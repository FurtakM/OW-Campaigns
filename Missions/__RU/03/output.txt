// var stReady , stRepair , stInCombat , stHelp , stNotReady , ImpatienceTreshold ; var vozKirov , vozKirovImpat , vozKirovState , vozKirovOut , vozHrace , mechKirov , mechKirovOut ; var targHrace , targAcquired ; every 0 0$1 marked 10 do var i ; var auta , autapom ; var poc ;
   0: GO 2
   2: DISABLE
   3: LD_INT 0
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
// begin auta = FilterUnitsInArea ( RU2_base , [ [ f_type , unit_vehicle ] , [ f_occupied ] ] ) ;
   9: LD_ADDR_VAR 0 2
  13: PUSH
  14: LD_INT 2
  16: PPUSH
  17: LD_INT 21
  19: PUSH
  20: LD_INT 2
  22: PUSH
  23: EMPTY
  24: LIST
  25: LIST
  26: PUSH
  27: LD_INT 59
  29: PUSH
  30: EMPTY
  31: LIST
  32: PUSH
  33: EMPTY
  34: LIST
  35: LIST
  36: PPUSH
  37: CALL_OW 70
  41: ST_TO_ADDR
// for i in auta do
  42: LD_ADDR_VAR 0 1
  46: PUSH
  47: LD_VAR 0 2
  51: PUSH
  52: FOR_IN
  53: IFFALSE 132
// begin ComMoveToArea ( i , Zarea_utok ) ;
  55: LD_VAR 0 1
  59: PPUSH
  60: LD_INT 50
  62: PPUSH
  63: CALL_OW 113
// AddComAgressiveMove ( i , 28 , 15 ) ;
  67: LD_VAR 0 1
  71: PPUSH
  72: LD_INT 28
  74: PPUSH
  75: LD_INT 15
  77: PPUSH
  78: CALL_OW 174
// AddComAttackUnit ( i , Am_bu3 ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: LD_INT 19
  89: PPUSH
  90: CALL_OW 175
// AddComAgressiveMove ( i , 13 , 9 ) ;
  94: LD_VAR 0 1
  98: PPUSH
  99: LD_INT 13
 101: PPUSH
 102: LD_INT 9
 104: PPUSH
 105: CALL_OW 174
// RUSKE_POSILY_RIDICI_LIST = RUSKE_POSILY_RIDICI_LIST diff IsDrivenBy ( i ) ;
 109: LD_ADDR_EXP 57
 113: PUSH
 114: LD_EXP 57
 118: PUSH
 119: LD_VAR 0 1
 123: PPUSH
 124: CALL_OW 311
 128: DIFF
 129: ST_TO_ADDR
// end ;
 130: GO 52
 132: POP
 133: POP
// auta = FilterUnitsInArea ( RU2_base , [ [ f_type , unit_vehicle ] , f_not , [ f_occupied ] ] ) ;
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: LD_INT 2
 141: PPUSH
 142: LD_INT 21
 144: PUSH
 145: LD_INT 2
 147: PUSH
 148: EMPTY
 149: LIST
 150: LIST
 151: PUSH
 152: LD_INT 3
 154: PUSH
 155: LD_INT 59
 157: PUSH
 158: EMPTY
 159: LIST
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PPUSH
 166: CALL_OW 70
 170: ST_TO_ADDR
// poc = 1 ;
 171: LD_ADDR_VAR 0 4
 175: PUSH
 176: LD_INT 1
 178: ST_TO_ADDR
// for i in RUSKE_POSILY_RIDICI_LIST do
 179: LD_ADDR_VAR 0 1
 183: PUSH
 184: LD_EXP 57
 188: PUSH
 189: FOR_IN
 190: IFFALSE 244
// begin if auta + 0 >= poc then
 192: LD_VAR 0 2
 196: PUSH
 197: LD_INT 0
 199: PLUS
 200: PUSH
 201: LD_VAR 0 4
 205: GREATEREQUAL
 206: IFFALSE 228
// ComEnterUnit ( i , auta [ poc ] ) ;
 208: LD_VAR 0 1
 212: PPUSH
 213: LD_VAR 0 2
 217: PUSH
 218: LD_VAR 0 4
 222: ARRAY
 223: PPUSH
 224: CALL_OW 120
// poc = poc + 1 ;
 228: LD_ADDR_VAR 0 4
 232: PUSH
 233: LD_VAR 0 4
 237: PUSH
 238: LD_INT 1
 240: PLUS
 241: ST_TO_ADDR
// end ;
 242: GO 189
 244: POP
 245: POP
// if RUSKE_POSILY_RIDICI_LIST <> 0 then
 246: LD_EXP 57
 250: PUSH
 251: LD_INT 0
 253: NONEQUAL
 254: IFFALSE 257
// enable ;
 256: ENABLE
// end ;
 257: PPOPN 4
 259: END
// every 0 0$1 trigger setkani_om and stav_omikron < 7 do
 260: LD_EXP 41
 264: PUSH
 265: LD_EXP 39
 269: PUSH
 270: LD_INT 7
 272: LESS
 273: AND
 274: IFFALSE 296
 276: GO 278
 278: DISABLE
// begin RepairVehicles ( 6 , Om_repair , 61 , 9 ) ;
 279: LD_INT 6
 281: PPUSH
 282: LD_INT 52
 284: PPUSH
 285: LD_INT 61
 287: PPUSH
 288: LD_INT 9
 290: PPUSH
 291: CALL 724 0 4
// enable ;
 295: ENABLE
// end ;
 296: END
// every 0 0$1 trigger setkani_om and stav_omikron < 7 do
 297: LD_EXP 41
 301: PUSH
 302: LD_EXP 39
 306: PUSH
 307: LD_INT 7
 309: LESS
 310: AND
 311: IFFALSE 323
 313: GO 315
 315: DISABLE
// begin AttackVehicles ( 6 ) ;
 316: LD_INT 6
 318: PPUSH
 319: CALL 324 0 1
// end ;
 323: END
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
 324: LD_INT 0
 326: PPUSH
 327: PPUSH
 328: PPUSH
 329: PPUSH
 330: PPUSH
 331: PPUSH
 332: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= 0 then
 333: LD_INT 22
 335: PUSH
 336: LD_VAR 0 1
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 21
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: LD_INT 24
 357: PUSH
 358: LD_INT 1000
 360: PUSH
 361: EMPTY
 362: LIST
 363: LIST
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: LD_INT 0
 377: GREATEREQUAL
 378: IFFALSE 719
// repeat wait ( 0 0$1 ) ;
 380: LD_INT 35
 382: PPUSH
 383: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] , [ f_or , [ f_weapon , 42 ] , [ f_weapon , 43 ] , [ f_weapon , 44 ] ] ] ) ;
 387: LD_ADDR_VAR 0 5
 391: PUSH
 392: LD_INT 22
 394: PUSH
 395: LD_VAR 0 1
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: PUSH
 404: LD_INT 21
 406: PUSH
 407: LD_INT 2
 409: PUSH
 410: EMPTY
 411: LIST
 412: LIST
 413: PUSH
 414: LD_INT 24
 416: PUSH
 417: LD_INT 650
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PUSH
 424: LD_INT 2
 426: PUSH
 427: LD_INT 34
 429: PUSH
 430: LD_INT 42
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: LD_INT 34
 439: PUSH
 440: LD_INT 43
 442: PUSH
 443: EMPTY
 444: LIST
 445: LIST
 446: PUSH
 447: LD_INT 34
 449: PUSH
 450: LD_INT 44
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PPUSH
 469: CALL_OW 69
 473: ST_TO_ADDR
// for j in vehiclesOK do
 474: LD_ADDR_VAR 0 4
 478: PUSH
 479: LD_VAR 0 5
 483: PUSH
 484: FOR_IN
 485: IFFALSE 660
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] ] ) , j ) ;
 487: LD_ADDR_VAR 0 6
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_INT 1
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: PUSH
 502: EMPTY
 503: LIST
 504: PPUSH
 505: CALL_OW 69
 509: PPUSH
 510: LD_VAR 0 4
 514: PPUSH
 515: CALL_OW 74
 519: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
 520: LD_ADDR_VAR 0 7
 524: PUSH
 525: LD_INT 22
 527: PUSH
 528: LD_INT 1
 530: PUSH
 531: EMPTY
 532: LIST
 533: LIST
 534: PUSH
 535: LD_INT 2
 537: PUSH
 538: LD_INT 59
 540: PUSH
 541: EMPTY
 542: LIST
 543: PUSH
 544: LD_INT 21
 546: PUSH
 547: LD_INT 1
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: LD_INT 21
 556: PUSH
 557: LD_INT 2
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: LIST
 568: LIST
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: PUSH
 574: EMPTY
 575: LIST
 576: PPUSH
 577: CALL_OW 69
 581: PPUSH
 582: LD_VAR 0 4
 586: PPUSH
 587: CALL_OW 74
 591: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
 592: LD_VAR 0 4
 596: PPUSH
 597: LD_VAR 0 6
 601: PPUSH
 602: CALL_OW 296
 606: PUSH
 607: LD_INT 8
 609: PLUS
 610: PUSH
 611: LD_VAR 0 4
 615: PPUSH
 616: LD_VAR 0 7
 620: PPUSH
 621: CALL_OW 296
 625: LESS
 626: IFFALSE 644
// ComAttackUnit ( j , target1 ) else
 628: LD_VAR 0 4
 632: PPUSH
 633: LD_VAR 0 6
 637: PPUSH
 638: CALL_OW 115
 642: GO 658
// ComAttackUnit ( j , target2 ) ;
 644: LD_VAR 0 4
 648: PPUSH
 649: LD_VAR 0 7
 653: PPUSH
 654: CALL_OW 115
// end ;
 658: GO 484
 660: POP
 661: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 or stav_omikron >= 7 ;
 662: LD_INT 22
 664: PUSH
 665: LD_VAR 0 1
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 21
 676: PUSH
 677: LD_INT 2
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 24
 686: PUSH
 687: LD_INT 1000
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: LIST
 698: PPUSH
 699: CALL_OW 69
 703: PUSH
 704: LD_INT 0
 706: EQUAL
 707: PUSH
 708: LD_EXP 39
 712: PUSH
 713: LD_INT 7
 715: GREATEREQUAL
 716: OR
 717: IFFALSE 380
// end ;
 719: LD_VAR 0 2
 723: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
 724: LD_INT 0
 726: PPUSH
 727: PPUSH
 728: PPUSH
 729: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
 730: LD_ADDR_VAR 0 8
 734: PUSH
 735: LD_INT 22
 737: PUSH
 738: LD_VAR 0 1
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: PUSH
 747: LD_INT 21
 749: PUSH
 750: LD_INT 2
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: PUSH
 757: LD_INT 3
 759: PUSH
 760: LD_INT 24
 762: PUSH
 763: LD_INT 650
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: LIST
 778: PPUSH
 779: CALL_OW 69
 783: ST_TO_ADDR
// if damageVehicles > 0 then
 784: LD_VAR 0 8
 788: PUSH
 789: LD_INT 0
 791: GREATER
 792: IFFALSE 813
// ComMoveXY ( damageVehicles , repX , repY ) ;
 794: LD_VAR 0 8
 798: PPUSH
 799: LD_VAR 0 3
 803: PPUSH
 804: LD_VAR 0 4
 808: PPUSH
 809: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
 813: LD_VAR 0 8
 817: PPUSH
 818: LD_INT 95
 820: PUSH
 821: LD_VAR 0 2
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 3
 832: PUSH
 833: LD_INT 58
 835: PUSH
 836: EMPTY
 837: LIST
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: PPUSH
 847: CALL_OW 72
 851: PUSH
 852: LD_INT 0
 854: GREATER
 855: IFFALSE 922
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
 857: LD_ADDR_VAR 0 6
 861: PUSH
 862: LD_VAR 0 8
 866: PPUSH
 867: LD_INT 95
 869: PUSH
 870: LD_VAR 0 2
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: PUSH
 879: LD_INT 3
 881: PUSH
 882: LD_INT 58
 884: PUSH
 885: EMPTY
 886: LIST
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: PPUSH
 896: CALL_OW 72
 900: PUSH
 901: FOR_IN
 902: IFFALSE 920
// ComExitVehicle ( UnitsInside ( i ) ) ;
 904: LD_VAR 0 6
 908: PPUSH
 909: CALL_OW 313
 913: PPUSH
 914: CALL_OW 121
 918: GO 901
 920: POP
 921: POP
// end ;
 922: LD_VAR 0 5
 926: RET
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 and GetSide ( human ) = 6 and IsOk ( vehicle ) then
 927: LD_VAR 0 1
 931: PPUSH
 932: CALL_OW 255
 936: PUSH
 937: LD_INT 6
 939: EQUAL
 940: PUSH
 941: LD_VAR 0 2
 945: PPUSH
 946: CALL_OW 255
 950: PUSH
 951: LD_INT 6
 953: EQUAL
 954: AND
 955: PUSH
 956: LD_VAR 0 1
 960: PPUSH
 961: CALL_OW 302
 965: AND
 966: IFFALSE 1041
// if GetWeapon ( vehicle ) = 42 or GetWeapon ( vehicle ) = 43 or GetWeapon ( vehicle ) = 44 then
 968: LD_VAR 0 1
 972: PPUSH
 973: CALL_OW 264
 977: PUSH
 978: LD_INT 42
 980: EQUAL
 981: PUSH
 982: LD_VAR 0 1
 986: PPUSH
 987: CALL_OW 264
 991: PUSH
 992: LD_INT 43
 994: EQUAL
 995: OR
 996: PUSH
 997: LD_VAR 0 1
1001: PPUSH
1002: CALL_OW 264
1006: PUSH
1007: LD_INT 44
1009: EQUAL
1010: OR
1011: IFFALSE 1041
// begin ComRepairVehicle ( human , vehicle ) ;
1013: LD_VAR 0 2
1017: PPUSH
1018: LD_VAR 0 1
1022: PPUSH
1023: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
1027: LD_VAR 0 2
1031: PPUSH
1032: LD_VAR 0 1
1036: PPUSH
1037: CALL_OW 180
// end ; end ;
1041: PPOPN 2
1043: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) do var i ;
1044: LD_INT 22
1046: PUSH
1047: LD_INT 6
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: PUSH
1054: LD_INT 21
1056: PUSH
1057: LD_INT 2
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PPUSH
1068: CALL_OW 69
1072: IFFALSE 1149
1074: GO 1076
1076: DISABLE
1077: LD_INT 0
1079: PPUSH
// begin enable ;
1080: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) do
1081: LD_ADDR_VAR 0 1
1085: PUSH
1086: LD_INT 22
1088: PUSH
1089: LD_INT 6
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: LD_INT 21
1098: PUSH
1099: LD_INT 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: PPUSH
1110: CALL_OW 69
1114: PUSH
1115: FOR_IN
1116: IFFALSE 1147
// if GetFuel ( i ) < 3 then
1118: LD_VAR 0 1
1122: PPUSH
1123: CALL_OW 261
1127: PUSH
1128: LD_INT 3
1130: LESS
1131: IFFALSE 1145
// SetFuel ( i , 3 ) ;
1133: LD_VAR 0 1
1137: PPUSH
1138: LD_INT 3
1140: PPUSH
1141: CALL_OW 240
1145: GO 1115
1147: POP
1148: POP
// end ; end_of_file
1149: PPOPN 1
1151: END
// export You , You2 , You3 , Amici , Arabi ; export KurinDialog ; export KurinAddTime ; starting begin RandomizeAll ;
1152: CALL_OW 11
// InitHc ;
1156: CALL_OW 19
// InitBc ;
1160: CALL_OW 21
// InitVc ;
1164: CALL_OW 20
// InitUc ;
1168: CALL_OW 18
// KurinDialog = 0 ;
1172: LD_ADDR_EXP 6
1176: PUSH
1177: LD_INT 0
1179: ST_TO_ADDR
// KurinAddTime = 0 ;
1180: LD_ADDR_EXP 7
1184: PUSH
1185: LD_INT 0
1187: ST_TO_ADDR
// set_difficulty ;
1188: CALL 4327 0 0
// load_postav ;
1192: CALL 2152 0 0
// load_promenne ;
1196: CALL 2304 0 0
// You = 3 ;
1200: LD_ADDR_EXP 1
1204: PUSH
1205: LD_INT 3
1207: ST_TO_ADDR
// You2 = 6 ;
1208: LD_ADDR_EXP 2
1212: PUSH
1213: LD_INT 6
1215: ST_TO_ADDR
// You3 = 5 ;
1216: LD_ADDR_EXP 3
1220: PUSH
1221: LD_INT 5
1223: ST_TO_ADDR
// Amici = 1 ;
1224: LD_ADDR_EXP 4
1228: PUSH
1229: LD_INT 1
1231: ST_TO_ADDR
// Arabi = 2 ;
1232: LD_ADDR_EXP 5
1236: PUSH
1237: LD_INT 2
1239: ST_TO_ADDR
// placni_budovy_z_predesle_mise ;
1240: CALL 2706 0 0
// RevealFogArea ( You , CelaRU02 ) ;
1244: LD_EXP 1
1248: PPUSH
1249: LD_INT 36
1251: PPUSH
1252: CALL_OW 332
// RevealFogArea ( You2 , CelaRU02 ) ;
1256: LD_EXP 2
1260: PPUSH
1261: LD_INT 36
1263: PPUSH
1264: CALL_OW 332
// create_arabsky_utok ;
1268: CALL 18995 0 0
// create_americka_pomoc_hlidce ;
1272: CALL 16919 0 0
// create_americke_posily ;
1276: CALL 17788 0 0
// create_ruske_posily_na_omicron ;
1280: CALL 20144 0 0
// create_arabi_komanda ;
1284: CALL 21116 0 0
// create_ru_posily_ma_utek ;
1288: CALL 21962 0 0
// create_arabi_na_posily_kirovu ;
1292: CALL 22414 0 0
// create_cerpaci_ruske_auta ;
1296: CALL 22866 0 0
// create_am_jednotky ;
1300: CALL 20786 0 0
// set_skily_amikum ;
1304: CALL 17272 0 0
// uklid_rusu ;
1308: CALL 5095 0 0
// ChangeSideFog ( You , You ) ;
1312: LD_EXP 1
1316: PPUSH
1317: LD_EXP 1
1321: PPUSH
1322: CALL_OW 343
// ChangeSideFog ( You2 , You ) ;
1326: LD_EXP 2
1330: PPUSH
1331: LD_EXP 1
1335: PPUSH
1336: CALL_OW 343
// pojmenovani_zakladen ;
1340: CALL 4752 0 0
// InGameOn ;
1344: CALL_OW 8
// CenterOnXY ( 137 , 76 ) ;
1348: LD_INT 137
1350: PPUSH
1351: LD_INT 76
1353: PPUSH
1354: CALL_OW 84
// RevealFogArea ( You , CelaRU02 ) ;
1358: LD_EXP 1
1362: PPUSH
1363: LD_INT 36
1365: PPUSH
1366: CALL_OW 332
// RevealFogArea ( You2 , CelaRU02 ) ;
1370: LD_EXP 2
1374: PPUSH
1375: LD_INT 36
1377: PPUSH
1378: CALL_OW 332
// uvodni_pokec ;
1382: CALL 10206 0 0
// end ;
1386: END
// on UnitDestroyed ( un ) do begin if un = schol2 and GetSide ( un ) = 6 then
1387: LD_VAR 0 1
1391: PUSH
1392: LD_EXP 34
1396: EQUAL
1397: PUSH
1398: LD_VAR 0 1
1402: PPUSH
1403: CALL_OW 255
1407: PUSH
1408: LD_INT 6
1410: EQUAL
1411: AND
1412: IFFALSE 1418
// SA_DontSaveScholtze ;
1414: CALL 29285 0 0
// if un = bur then
1418: LD_VAR 0 1
1422: PUSH
1423: LD_EXP 29
1427: EQUAL
1428: IFFALSE 1437
// YouLost ( Burlak ) ;
1430: LD_STRING Burlak
1432: PPUSH
1433: CALL_OW 104
// end ;
1437: PPOPN 1
1439: END
// export function konec_mise_lhani ; begin
1440: LD_INT 0
1442: PPUSH
// hlaska_lhani ;
1443: CALL 15593 0 0
// YouLost ( Vehicles ) ;
1447: LD_STRING Vehicles
1449: PPUSH
1450: CALL_OW 104
// end ;
1454: LD_VAR 0 1
1458: RET
// export function konec_pred_omikronem ; begin
1459: LD_INT 0
1461: PPUSH
// YouLost ( Delay ) ;
1462: LD_STRING Delay
1464: PPUSH
1465: CALL_OW 104
// end ;
1469: LD_VAR 0 1
1473: RET
// export function konec_mise_utok ; begin
1474: LD_INT 0
1476: PPUSH
// YouLost ( SelfAttack ) ;
1477: LD_STRING SelfAttack
1479: PPUSH
1480: CALL_OW 104
// end ;
1484: LD_VAR 0 1
1488: RET
// export function konec_mise ; var i , pom , pom1 ; var zivi ; var drv ; var mrtvi ; var all_people ; var medal1 , medal2 , medal3 ; begin
1489: LD_INT 0
1491: PPUSH
1492: PPUSH
1493: PPUSH
1494: PPUSH
1495: PPUSH
1496: PPUSH
1497: PPUSH
1498: PPUSH
1499: PPUSH
1500: PPUSH
1501: PPUSH
// medal1 := false ;
1502: LD_ADDR_VAR 0 9
1506: PUSH
1507: LD_INT 0
1509: ST_TO_ADDR
// medal2 := false ;
1510: LD_ADDR_VAR 0 10
1514: PUSH
1515: LD_INT 0
1517: ST_TO_ADDR
// medal3 := false ;
1518: LD_ADDR_VAR 0 11
1522: PUSH
1523: LD_INT 0
1525: ST_TO_ADDR
// DisableExclamations ;
1526: CALL_OW 474
// gained_medals := [ ] ;
1530: LD_ADDR_OWVAR 61
1534: PUSH
1535: EMPTY
1536: ST_TO_ADDR
// missing_medals := [ ] ;
1537: LD_ADDR_OWVAR 62
1541: PUSH
1542: EMPTY
1543: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) = 1 then
1544: LD_INT 22
1546: PUSH
1547: LD_INT 3
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 30
1556: PUSH
1557: LD_INT 0
1559: PUSH
1560: EMPTY
1561: LIST
1562: LIST
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: PPUSH
1568: CALL_OW 69
1572: PUSH
1573: LD_INT 1
1575: EQUAL
1576: IFFALSE 1582
// SA_OneDepotWin ;
1578: CALL 29300 0 0
// if Prezite_posily >= muze_projit_posil [ difficulty ] then
1582: LD_EXP 73
1586: PUSH
1587: LD_EXP 22
1591: PUSH
1592: LD_OWVAR 67
1596: ARRAY
1597: GREATEREQUAL
1598: IFFALSE 1613
// AddMedal ( PreventReinforcements , - 1 ) else
1600: LD_STRING PreventReinforcements
1602: PPUSH
1603: LD_INT 1
1605: NEG
1606: PPUSH
1607: CALL_OW 101
1611: GO 1631
// begin medal1 := true ;
1613: LD_ADDR_VAR 0 9
1617: PUSH
1618: LD_INT 1
1620: ST_TO_ADDR
// AddMedal ( PreventReinforcements , 1 ) ;
1621: LD_STRING PreventReinforcements
1623: PPUSH
1624: LD_INT 1
1626: PPUSH
1627: CALL_OW 101
// end ; if scholtze_saved and IsLive ( schol ) and GetSide ( schol ) = 3 then
1631: LD_EXP 37
1635: PUSH
1636: LD_EXP 33
1640: PPUSH
1641: CALL_OW 300
1645: AND
1646: PUSH
1647: LD_EXP 33
1651: PPUSH
1652: CALL_OW 255
1656: PUSH
1657: LD_INT 3
1659: EQUAL
1660: AND
1661: IFFALSE 1683
// begin AddMedal ( Scholtze , 1 ) ;
1663: LD_STRING Scholtze
1665: PPUSH
1666: LD_INT 1
1668: PPUSH
1669: CALL_OW 101
// medal2 := true ;
1673: LD_ADDR_VAR 0 10
1677: PUSH
1678: LD_INT 1
1680: ST_TO_ADDR
// end else
1681: GO 1694
// AddMedal ( Scholtze , - 1 ) ;
1683: LD_STRING Scholtze
1685: PPUSH
1686: LD_INT 1
1688: NEG
1689: PPUSH
1690: CALL_OW 101
// case stav_aut_new of 1 :
1694: LD_EXP 46
1698: PUSH
1699: LD_INT 1
1701: DOUBLE
1702: EQUAL
1703: IFTRUE 1707
1705: GO 1728
1707: POP
// begin AddMedal ( Surplus , 1 ) ;
1708: LD_STRING Surplus
1710: PPUSH
1711: LD_INT 1
1713: PPUSH
1714: CALL_OW 101
// medal3 := true ;
1718: LD_ADDR_VAR 0 11
1722: PUSH
1723: LD_INT 1
1725: ST_TO_ADDR
// end ; 2 :
1726: GO 1773
1728: LD_INT 2
1730: DOUBLE
1731: EQUAL
1732: IFTRUE 1736
1734: GO 1750
1736: POP
// AddMedal ( Surplus , - 1 ) ; 3 :
1737: LD_STRING Surplus
1739: PPUSH
1740: LD_INT 1
1742: NEG
1743: PPUSH
1744: CALL_OW 101
1748: GO 1773
1750: LD_INT 3
1752: DOUBLE
1753: EQUAL
1754: IFTRUE 1758
1756: GO 1772
1758: POP
// AddMedal ( Surplus , - 2 ) ; end ;
1759: LD_STRING Surplus
1761: PPUSH
1762: LD_INT 2
1764: NEG
1765: PPUSH
1766: CALL_OW 101
1770: GO 1773
1772: POP
// if not stav_aut_new then
1773: LD_EXP 46
1777: NOT
1778: IFFALSE 1791
// AddMedal ( Surplus , - 1 ) ;
1780: LD_STRING Surplus
1782: PPUSH
1783: LD_INT 1
1785: NEG
1786: PPUSH
1787: CALL_OW 101
// SA_EndMission ( 3 , 3 , medal1 , medal2 , medal3 ) ;
1791: LD_INT 3
1793: PPUSH
1794: LD_INT 3
1796: PPUSH
1797: LD_VAR 0 9
1801: PPUSH
1802: LD_VAR 0 10
1806: PPUSH
1807: LD_VAR 0 11
1811: PPUSH
1812: CALL 29315 0 5
// GiveMedals ( Main ) ;
1816: LD_STRING Main
1818: PPUSH
1819: CALL_OW 102
// all_people := FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
1823: LD_ADDR_VAR 0 8
1827: PUSH
1828: LD_INT 22
1830: PUSH
1831: LD_EXP 1
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 21
1842: PUSH
1843: LD_INT 1
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PPUSH
1854: CALL_OW 69
1858: ST_TO_ADDR
// RewardPeople ( all_people ) ;
1859: LD_VAR 0 8
1863: PPUSH
1864: CALL_OW 43
// if not ( bel in all_people ) then
1868: LD_EXP 32
1872: PUSH
1873: LD_VAR 0 8
1877: IN
1878: NOT
1879: IFFALSE 1890
// KillUnit ( bel ) ;
1881: LD_EXP 32
1885: PPUSH
1886: CALL_OW 66
// if not ( gny in all_people ) then
1890: LD_EXP 31
1894: PUSH
1895: LD_VAR 0 8
1899: IN
1900: NOT
1901: IFFALSE 1912
// KillUnit ( gny ) ;
1903: LD_EXP 31
1907: PPUSH
1908: CALL_OW 66
// if not ( kov in all_people ) then
1912: LD_EXP 30
1916: PUSH
1917: LD_VAR 0 8
1921: IN
1922: NOT
1923: IFFALSE 1934
// KillUnit ( kov ) ;
1925: LD_EXP 30
1929: PPUSH
1930: CALL_OW 66
// if not ( schol in all_people ) then
1934: LD_EXP 33
1938: PUSH
1939: LD_VAR 0 8
1943: IN
1944: NOT
1945: IFFALSE 1956
// KillUnit ( schol ) ;
1947: LD_EXP 33
1951: PPUSH
1952: CALL_OW 66
// SaveCharacters ( bur , Burlak ) ;
1956: LD_EXP 29
1960: PPUSH
1961: LD_STRING Burlak
1963: PPUSH
1964: CALL_OW 38
// SaveCharacters ( bel , Belkov ) ;
1968: LD_EXP 32
1972: PPUSH
1973: LD_STRING Belkov
1975: PPUSH
1976: CALL_OW 38
// SaveCharacters ( gny , Gnyevko ) ;
1980: LD_EXP 31
1984: PPUSH
1985: LD_STRING Gnyevko
1987: PPUSH
1988: CALL_OW 38
// SaveCharacters ( kov , Kovalyuk ) ;
1992: LD_EXP 30
1996: PPUSH
1997: LD_STRING Kovalyuk
1999: PPUSH
2000: CALL_OW 38
// SaveCharacters ( schol , Scholtze ) ;
2004: LD_EXP 33
2008: PPUSH
2009: LD_STRING Scholtze
2011: PPUSH
2012: CALL_OW 38
// SaveCharacters ( pop , Popov ) ;
2016: LD_EXP 28
2020: PPUSH
2021: LD_STRING Popov
2023: PPUSH
2024: CALL_OW 38
// pom := all_people diff [ bur , kur , bel , gny , kov , schol , schol2 , pop ] ;
2028: LD_ADDR_VAR 0 3
2032: PUSH
2033: LD_VAR 0 8
2037: PUSH
2038: LD_EXP 29
2042: PUSH
2043: LD_EXP 27
2047: PUSH
2048: LD_EXP 32
2052: PUSH
2053: LD_EXP 31
2057: PUSH
2058: LD_EXP 30
2062: PUSH
2063: LD_EXP 33
2067: PUSH
2068: LD_EXP 34
2072: PUSH
2073: LD_EXP 28
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: LIST
2086: LIST
2087: DIFF
2088: ST_TO_ADDR
// SaveCharacters ( pom , survivors1 ) ;
2089: LD_VAR 0 3
2093: PPUSH
2094: LD_STRING survivors1
2096: PPUSH
2097: CALL_OW 38
// SaveVariable ( BELKOV_SAVED , belkov_saved ) ;
2101: LD_EXP 24
2105: PPUSH
2106: LD_STRING belkov_saved
2108: PPUSH
2109: CALL_OW 39
// SaveVariable ( STAV_UTOKU , stav_utoku ) ;
2113: LD_EXP 25
2117: PPUSH
2118: LD_STRING stav_utoku
2120: PPUSH
2121: CALL_OW 39
// SaveVariable ( stav_aut , Surplus_vehicles ) ;
2125: LD_EXP 38
2129: PPUSH
2130: LD_STRING Surplus_vehicles
2132: PPUSH
2133: CALL_OW 39
// YouWin ;
2137: CALL_OW 103
// EnableExclamations ;
2141: CALL_OW 473
// exit ;
2145: GO 2147
// end ;
2147: LD_VAR 0 1
2151: RET
// function load_postav ; begin
2152: LD_INT 0
2154: PPUSH
// grishko = NewCharacter ( Grishko ) ;
2155: LD_ADDR_EXP 35
2159: PUSH
2160: LD_STRING Grishko
2162: PPUSH
2163: CALL_OW 25
2167: ST_TO_ADDR
// kur = nacti_osobu ( kurin ) ;
2168: LD_ADDR_EXP 27
2172: PUSH
2173: LD_STRING kurin
2175: PPUSH
2176: CALL 21072 0 1
2180: ST_TO_ADDR
// bel = nacti_osobu ( Belkov ) ;
2181: LD_ADDR_EXP 32
2185: PUSH
2186: LD_STRING Belkov
2188: PPUSH
2189: CALL 21072 0 1
2193: ST_TO_ADDR
// kov = nacti_osobu ( Kovalyuk ) ;
2194: LD_ADDR_EXP 30
2198: PUSH
2199: LD_STRING Kovalyuk
2201: PPUSH
2202: CALL 21072 0 1
2206: ST_TO_ADDR
// bur = nacti_osobu ( Burlak ) ;
2207: LD_ADDR_EXP 29
2211: PUSH
2212: LD_STRING Burlak
2214: PPUSH
2215: CALL 21072 0 1
2219: ST_TO_ADDR
// gny = nacti_osobu ( Gnyevko ) ;
2220: LD_ADDR_EXP 31
2224: PUSH
2225: LD_STRING Gnyevko
2227: PPUSH
2228: CALL 21072 0 1
2232: ST_TO_ADDR
// pop = NewCharacter ( Popov ) ;
2233: LD_ADDR_EXP 28
2237: PUSH
2238: LD_STRING Popov
2240: PPUSH
2241: CALL_OW 25
2245: ST_TO_ADDR
// if CheckCharacterSet ( survivors1 ) then
2246: LD_STRING survivors1
2248: PPUSH
2249: CALL_OW 29
2253: IFFALSE 2268
// other_survivors_mise_2 = CreateCharacterSet ( survivors1 ) ;
2255: LD_ADDR_EXP 71
2259: PUSH
2260: LD_STRING survivors1
2262: PPUSH
2263: CALL_OW 31
2267: ST_TO_ADDR
// if CheckCharacterSet ( amici_bw ) then
2268: LD_STRING amici_bw
2270: PPUSH
2271: CALL_OW 29
2275: IFFALSE 2292
// amici_bw_2 = CreateCharacter ( amici_bw ) else
2277: LD_ADDR_EXP 10
2281: PUSH
2282: LD_STRING amici_bw
2284: PPUSH
2285: CALL_OW 34
2289: ST_TO_ADDR
2290: GO 2299
// amici_bw_2 = [ ] ;
2292: LD_ADDR_EXP 10
2296: PUSH
2297: EMPTY
2298: ST_TO_ADDR
// end ;
2299: LD_VAR 0 1
2303: RET
// function load_promenne ; var default_budovy ; begin
2304: LD_INT 0
2306: PPUSH
2307: PPUSH
// default_budovy = [ [ 0 , 2 , 66 , 97 , 0 ] , [ 2 , 1 , 61 , 83 , 2 ] , [ 6 , 1 , 73 , 90 , 4 ] ] ;
2308: LD_ADDR_VAR 0 2
2312: PUSH
2313: LD_INT 0
2315: PUSH
2316: LD_INT 2
2318: PUSH
2319: LD_INT 66
2321: PUSH
2322: LD_INT 97
2324: PUSH
2325: LD_INT 0
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: PUSH
2335: LD_INT 2
2337: PUSH
2338: LD_INT 1
2340: PUSH
2341: LD_INT 61
2343: PUSH
2344: LD_INT 83
2346: PUSH
2347: LD_INT 2
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: PUSH
2357: LD_INT 6
2359: PUSH
2360: LD_INT 1
2362: PUSH
2363: LD_INT 73
2365: PUSH
2366: LD_INT 90
2368: PUSH
2369: LD_INT 4
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: PUSH
2379: EMPTY
2380: LIST
2381: LIST
2382: LIST
2383: ST_TO_ADDR
// budovy_mise_2 = LoadVariable ( budovy , default_budovy ) ;
2384: LD_ADDR_EXP 8
2388: PUSH
2389: LD_STRING budovy
2391: PPUSH
2392: LD_VAR 0 2
2396: PPUSH
2397: CALL_OW 30
2401: ST_TO_ADDR
// breastworks_east = LoadVariable ( bw_east , 3 ) ;
2402: LD_ADDR_EXP 9
2406: PUSH
2407: LD_STRING bw_east
2409: PPUSH
2410: LD_INT 3
2412: PPUSH
2413: CALL_OW 30
2417: ST_TO_ADDR
// end ;
2418: LD_VAR 0 1
2422: RET
// export function create_scholtze ; var pom ; begin
2423: LD_INT 0
2425: PPUSH
2426: PPUSH
// pom = NewCharacter ( Scholtze ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_STRING Scholtze
2434: PPUSH
2435: CALL_OW 25
2439: ST_TO_ADDR
// SetSide ( pom , You2 ) ;
2440: LD_VAR 0 2
2444: PPUSH
2445: LD_EXP 2
2449: PPUSH
2450: CALL_OW 235
// SetClass ( pom , class_scientistic ) ;
2454: LD_VAR 0 2
2458: PPUSH
2459: LD_INT 4
2461: PPUSH
2462: CALL_OW 336
// PlaceUnitXYR ( pom , 49 , 5 , 8 , true ) ;
2466: LD_VAR 0 2
2470: PPUSH
2471: LD_INT 49
2473: PPUSH
2474: LD_INT 5
2476: PPUSH
2477: LD_INT 8
2479: PPUSH
2480: LD_INT 1
2482: PPUSH
2483: CALL_OW 50
// result = pom ;
2487: LD_ADDR_VAR 0 1
2491: PUSH
2492: LD_VAR 0 2
2496: ST_TO_ADDR
// end ;
2497: LD_VAR 0 1
2501: RET
// on Command ( com ) do var i , j , temp ;
2502: LD_INT 0
2504: PPUSH
2505: PPUSH
2506: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
2507: LD_ADDR_VAR 0 2
2511: PUSH
2512: LD_INT 22
2514: PUSH
2515: LD_INT 3
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: PUSH
2522: LD_INT 21
2524: PUSH
2525: LD_INT 1
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: PPUSH
2536: CALL_OW 69
2540: PUSH
2541: FOR_IN
2542: IFFALSE 2689
// if GetTaskList ( i ) > 0 then
2544: LD_VAR 0 2
2548: PPUSH
2549: CALL_OW 437
2553: PUSH
2554: LD_INT 0
2556: GREATER
2557: IFFALSE 2687
// for j = 1 to GetTaskList ( i ) do
2559: LD_ADDR_VAR 0 3
2563: PUSH
2564: DOUBLE
2565: LD_INT 1
2567: DEC
2568: ST_TO_ADDR
2569: LD_VAR 0 2
2573: PPUSH
2574: CALL_OW 437
2578: PUSH
2579: FOR_TO
2580: IFFALSE 2685
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
2582: LD_ADDR_VAR 0 4
2586: PUSH
2587: LD_VAR 0 2
2591: PPUSH
2592: CALL_OW 437
2596: PUSH
2597: LD_VAR 0 3
2601: ARRAY
2602: PUSH
2603: LD_INT 4
2605: ARRAY
2606: ST_TO_ADDR
// if temp = RU1_dep or ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = e and GetType ( temp ) = unit_vehicle ) then
2607: LD_VAR 0 4
2611: PUSH
2612: LD_INT 1
2614: EQUAL
2615: PUSH
2616: LD_VAR 0 4
2620: PPUSH
2621: CALL_OW 255
2625: PUSH
2626: LD_INT 6
2628: EQUAL
2629: PUSH
2630: LD_VAR 0 2
2634: PPUSH
2635: CALL_OW 437
2639: PUSH
2640: LD_VAR 0 3
2644: ARRAY
2645: PUSH
2646: LD_INT 1
2648: ARRAY
2649: PUSH
2650: LD_STRING e
2652: EQUAL
2653: AND
2654: PUSH
2655: LD_VAR 0 4
2659: PPUSH
2660: CALL_OW 247
2664: PUSH
2665: LD_INT 2
2667: EQUAL
2668: AND
2669: OR
2670: IFFALSE 2683
// SetTaskList ( i , [ ] ) ;
2672: LD_VAR 0 2
2676: PPUSH
2677: EMPTY
2678: PPUSH
2679: CALL_OW 446
// end ;
2683: GO 2579
2685: POP
2686: POP
2687: GO 2541
2689: POP
2690: POP
// end ; end_of_file
2691: PPOPN 4
2693: END
// var konzervy_delay ; export budovy_mise_2 ; export breastworks_east ; export amici_bw_2 ; every 0 0$0.1 do
2694: GO 2696
2696: DISABLE
// begin konzervy_delay = 0 ;
2697: LD_ADDR_LOC 16
2701: PUSH
2702: LD_INT 0
2704: ST_TO_ADDR
// end ;
2705: END
// export function placni_budovy_z_predesle_mise ; var pom , i ; var ab ; var bw_e ; var vojaci ; var pocet ; begin
2706: LD_INT 0
2708: PPUSH
2709: PPUSH
2710: PPUSH
2711: PPUSH
2712: PPUSH
2713: PPUSH
2714: PPUSH
// uc_side = You ;
2715: LD_ADDR_OWVAR 20
2719: PUSH
2720: LD_EXP 1
2724: ST_TO_ADDR
// bc_kind1 = b_lab_basic ;
2725: LD_ADDR_OWVAR 44
2729: PUSH
2730: LD_INT 9
2732: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2733: LD_ADDR_OWVAR 45
2737: PUSH
2738: LD_INT 9
2740: ST_TO_ADDR
// for i in budovy_mise_2 do
2741: LD_ADDR_VAR 0 3
2745: PUSH
2746: LD_EXP 8
2750: PUSH
2751: FOR_IN
2752: IFFALSE 2900
// begin uc_nation = i [ 6 ] ;
2754: LD_ADDR_OWVAR 21
2758: PUSH
2759: LD_VAR 0 3
2763: PUSH
2764: LD_INT 6
2766: ARRAY
2767: ST_TO_ADDR
// bc_type = i [ 1 ] ;
2768: LD_ADDR_OWVAR 42
2772: PUSH
2773: LD_VAR 0 3
2777: PUSH
2778: LD_INT 1
2780: ARRAY
2781: ST_TO_ADDR
// bc_level = i [ 2 ] ;
2782: LD_ADDR_OWVAR 43
2786: PUSH
2787: LD_VAR 0 3
2791: PUSH
2792: LD_INT 2
2794: ARRAY
2795: ST_TO_ADDR
// pom = CreateAndPlaceBuildingXYD ( i [ 3 ] + 30 , i [ 4 ] - 20 , i [ 5 ] ) ;
2796: LD_ADDR_VAR 0 2
2800: PUSH
2801: LD_VAR 0 3
2805: PUSH
2806: LD_INT 3
2808: ARRAY
2809: PUSH
2810: LD_INT 30
2812: PLUS
2813: PPUSH
2814: LD_VAR 0 3
2818: PUSH
2819: LD_INT 4
2821: ARRAY
2822: PUSH
2823: LD_INT 20
2825: MINUS
2826: PPUSH
2827: LD_VAR 0 3
2831: PUSH
2832: LD_INT 5
2834: ARRAY
2835: PPUSH
2836: CALL_OW 47
2840: ST_TO_ADDR
// if bc_type in [ b_depot , b_warehouse ] then
2841: LD_OWVAR 42
2845: PUSH
2846: LD_INT 0
2848: PUSH
2849: LD_INT 1
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: IN
2856: IFFALSE 2898
// begin SetResourceType ( GetBase ( pom ) , mat_cans , 100 ) ;
2858: LD_VAR 0 2
2862: PPUSH
2863: CALL_OW 274
2867: PPUSH
2868: LD_INT 1
2870: PPUSH
2871: LD_INT 100
2873: PPUSH
2874: CALL_OW 277
// SetResourceType ( GetBase ( pom ) , mat_oil , 25 ) ;
2878: LD_VAR 0 2
2882: PPUSH
2883: CALL_OW 274
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: LD_INT 25
2893: PPUSH
2894: CALL_OW 277
// end ; end ;
2898: GO 2751
2900: POP
2901: POP
// bw_e = breastworks_east ;
2902: LD_ADDR_VAR 0 5
2906: PUSH
2907: LD_EXP 9
2911: ST_TO_ADDR
// uc_side = Amici ;
2912: LD_ADDR_OWVAR 20
2916: PUSH
2917: LD_EXP 4
2921: ST_TO_ADDR
// uc_nation = nation_american ;
2922: LD_ADDR_OWVAR 21
2926: PUSH
2927: LD_INT 1
2929: ST_TO_ADDR
// bc_type = b_breastwork ;
2930: LD_ADDR_OWVAR 42
2934: PUSH
2935: LD_INT 31
2937: ST_TO_ADDR
// bc_level = level_bw_e [ difficulty ] ;
2938: LD_ADDR_OWVAR 43
2942: PUSH
2943: LD_EXP 11
2947: PUSH
2948: LD_OWVAR 67
2952: ARRAY
2953: ST_TO_ADDR
// if bw_e > 1 then
2954: LD_VAR 0 5
2958: PUSH
2959: LD_INT 1
2961: GREATER
2962: IFFALSE 2977
// CreateAndPlaceBuildingXYD ( 123 , 42 , 1 ) ;
2964: LD_INT 123
2966: PPUSH
2967: LD_INT 42
2969: PPUSH
2970: LD_INT 1
2972: PPUSH
2973: CALL_OW 47
// if bw_e = 1 or bw_e = 3 then
2977: LD_VAR 0 5
2981: PUSH
2982: LD_INT 1
2984: EQUAL
2985: PUSH
2986: LD_VAR 0 5
2990: PUSH
2991: LD_INT 3
2993: EQUAL
2994: OR
2995: IFFALSE 3010
// CreateAndPlaceBuildingXYD ( 120 , 36 , 1 ) ;
2997: LD_INT 120
2999: PPUSH
3000: LD_INT 36
3002: PPUSH
3003: LD_INT 1
3005: PPUSH
3006: CALL_OW 47
// vojaci = amici_bw_2 ;
3010: LD_ADDR_VAR 0 6
3014: PUSH
3015: LD_EXP 10
3019: ST_TO_ADDR
// if bw_e > 0 then
3020: LD_VAR 0 5
3024: PUSH
3025: LD_INT 0
3027: GREATER
3028: IFFALSE 3277
// begin if bw_e = 1 or bw_e = 2 then
3030: LD_VAR 0 5
3034: PUSH
3035: LD_INT 1
3037: EQUAL
3038: PUSH
3039: LD_VAR 0 5
3043: PUSH
3044: LD_INT 2
3046: EQUAL
3047: OR
3048: IFFALSE 3060
// pocet = 1 else
3050: LD_ADDR_VAR 0 7
3054: PUSH
3055: LD_INT 1
3057: ST_TO_ADDR
3058: GO 3068
// pocet = 2 ;
3060: LD_ADDR_VAR 0 7
3064: PUSH
3065: LD_INT 2
3067: ST_TO_ADDR
// vojaci = vojaci ^ get_human ( sex_male , class_soldier , 2 ,  ) ;
3068: LD_ADDR_VAR 0 6
3072: PUSH
3073: LD_VAR 0 6
3077: PUSH
3078: LD_INT 1
3080: PPUSH
3081: LD_INT 1
3083: PPUSH
3084: LD_INT 2
3086: PPUSH
3087: LD_STRING 
3089: PPUSH
3090: CALL 16872 0 4
3094: ADD
3095: ST_TO_ADDR
// vojaci = vojaci ^ get_human ( sex_male , class_soldier , 2 ,  ) ;
3096: LD_ADDR_VAR 0 6
3100: PUSH
3101: LD_VAR 0 6
3105: PUSH
3106: LD_INT 1
3108: PPUSH
3109: LD_INT 1
3111: PPUSH
3112: LD_INT 2
3114: PPUSH
3115: LD_STRING 
3117: PPUSH
3118: CALL 16872 0 4
3122: ADD
3123: ST_TO_ADDR
// pom = FilterUnitsinArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) ;
3124: LD_ADDR_VAR 0 2
3128: PUSH
3129: LD_INT 22
3131: PPUSH
3132: LD_INT 22
3134: PUSH
3135: LD_EXP 4
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PUSH
3144: LD_INT 30
3146: PUSH
3147: LD_INT 31
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PPUSH
3158: CALL_OW 70
3162: ST_TO_ADDR
// if pocet >= 1 then
3163: LD_VAR 0 7
3167: PUSH
3168: LD_INT 1
3170: GREATEREQUAL
3171: IFFALSE 3220
// begin PlaceUnitXYR ( vojaci [ 1 ] , 129 , 39 , 5 , false ) ;
3173: LD_VAR 0 6
3177: PUSH
3178: LD_INT 1
3180: ARRAY
3181: PPUSH
3182: LD_INT 129
3184: PPUSH
3185: LD_INT 39
3187: PPUSH
3188: LD_INT 5
3190: PPUSH
3191: LD_INT 0
3193: PPUSH
3194: CALL_OW 50
// ComEnterUnit ( vojaci [ 1 ] , pom [ 1 ] ) ;
3198: LD_VAR 0 6
3202: PUSH
3203: LD_INT 1
3205: ARRAY
3206: PPUSH
3207: LD_VAR 0 2
3211: PUSH
3212: LD_INT 1
3214: ARRAY
3215: PPUSH
3216: CALL_OW 120
// end ; if pocet = 2 then
3220: LD_VAR 0 7
3224: PUSH
3225: LD_INT 2
3227: EQUAL
3228: IFFALSE 3277
// begin PlaceUnitXYR ( vojaci [ 2 ] , 129 , 39 , 5 , false ) ;
3230: LD_VAR 0 6
3234: PUSH
3235: LD_INT 2
3237: ARRAY
3238: PPUSH
3239: LD_INT 129
3241: PPUSH
3242: LD_INT 39
3244: PPUSH
3245: LD_INT 5
3247: PPUSH
3248: LD_INT 0
3250: PPUSH
3251: CALL_OW 50
// ComEnterUnit ( vojaci [ 2 ] , pom [ 2 ] ) ;
3255: LD_VAR 0 6
3259: PUSH
3260: LD_INT 2
3262: ARRAY
3263: PPUSH
3264: LD_VAR 0 2
3268: PUSH
3269: LD_INT 2
3271: ARRAY
3272: PPUSH
3273: CALL_OW 120
// end ; end ; end ;
3277: LD_VAR 0 1
3281: RET
// export function vyber_characteru ; var pom ; var units_na_vyber ; var i ; var pocet ; var vyber ; var osurviv ; begin
3282: LD_INT 0
3284: PPUSH
3285: PPUSH
3286: PPUSH
3287: PPUSH
3288: PPUSH
3289: PPUSH
3290: PPUSH
// uc_side = You ;
3291: LD_ADDR_OWVAR 20
3295: PUSH
3296: LD_EXP 1
3300: ST_TO_ADDR
// uc_nation = nation_russian ;
3301: LD_ADDR_OWVAR 21
3305: PUSH
3306: LD_INT 3
3308: ST_TO_ADDR
// pocet = 3 ;
3309: LD_ADDR_VAR 0 5
3313: PUSH
3314: LD_INT 3
3316: ST_TO_ADDR
// units_na_vyber = [ sel_not_changeable , sel_hired , sel_dont_change_class , bur ] ;
3317: LD_ADDR_VAR 0 3
3321: PUSH
3322: LD_INT -4
3324: PUSH
3325: LD_INT -1
3327: PUSH
3328: LD_INT -6
3330: PUSH
3331: LD_EXP 29
3335: PUSH
3336: EMPTY
3337: LIST
3338: LIST
3339: LIST
3340: LIST
3341: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ [ sel_change_class ] ;
3342: LD_ADDR_VAR 0 3
3346: PUSH
3347: LD_VAR 0 3
3351: PUSH
3352: LD_INT -5
3354: PUSH
3355: EMPTY
3356: LIST
3357: ADD
3358: ST_TO_ADDR
// if IsOK ( gny ) then
3359: LD_EXP 31
3363: PPUSH
3364: CALL_OW 302
3368: IFFALSE 3402
// begin SetSide ( gny , You ) ;
3370: LD_EXP 31
3374: PPUSH
3375: LD_EXP 1
3379: PPUSH
3380: CALL_OW 235
// units_na_vyber = units_na_vyber ^ gny end else
3384: LD_ADDR_VAR 0 3
3388: PUSH
3389: LD_VAR 0 3
3393: PUSH
3394: LD_EXP 31
3398: ADD
3399: ST_TO_ADDR
3400: GO 3416
// pocet = pocet + 1 ;
3402: LD_ADDR_VAR 0 5
3406: PUSH
3407: LD_VAR 0 5
3411: PUSH
3412: LD_INT 1
3414: PLUS
3415: ST_TO_ADDR
// if IsOK ( kov ) then
3416: LD_EXP 30
3420: PPUSH
3421: CALL_OW 302
3425: IFFALSE 3459
// begin SetSide ( kov , You ) ;
3427: LD_EXP 30
3431: PPUSH
3432: LD_EXP 1
3436: PPUSH
3437: CALL_OW 235
// units_na_vyber = units_na_vyber ^ kov end else
3441: LD_ADDR_VAR 0 3
3445: PUSH
3446: LD_VAR 0 3
3450: PUSH
3451: LD_EXP 30
3455: ADD
3456: ST_TO_ADDR
3457: GO 3473
// pocet = pocet + 1 ;
3459: LD_ADDR_VAR 0 5
3463: PUSH
3464: LD_VAR 0 5
3468: PUSH
3469: LD_INT 1
3471: PLUS
3472: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ [ sel_not_hired , sel_changeable , sel_change_class ] ;
3473: LD_ADDR_VAR 0 3
3477: PUSH
3478: LD_VAR 0 3
3482: PUSH
3483: LD_INT -2
3485: PUSH
3486: LD_INT -3
3488: PUSH
3489: LD_INT -5
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: LIST
3496: ADD
3497: ST_TO_ADDR
// if IsOK ( bel ) then
3498: LD_EXP 32
3502: PPUSH
3503: CALL_OW 302
3507: IFFALSE 3539
// begin SetSide ( bel , You ) ;
3509: LD_EXP 32
3513: PPUSH
3514: LD_EXP 1
3518: PPUSH
3519: CALL_OW 235
// units_na_vyber = units_na_vyber ^ bel ;
3523: LD_ADDR_VAR 0 3
3527: PUSH
3528: LD_VAR 0 3
3532: PUSH
3533: LD_EXP 32
3537: ADD
3538: ST_TO_ADDR
// end ; osurviv = other_survivors_mise_2 ;
3539: LD_ADDR_VAR 0 7
3543: PUSH
3544: LD_EXP 71
3548: ST_TO_ADDR
// for i in osurviv do
3549: LD_ADDR_VAR 0 4
3553: PUSH
3554: LD_VAR 0 7
3558: PUSH
3559: FOR_IN
3560: IFFALSE 3578
// SetSide ( i , You ) ;
3562: LD_VAR 0 4
3566: PPUSH
3567: LD_EXP 1
3571: PPUSH
3572: CALL_OW 235
3576: GO 3559
3578: POP
3579: POP
// units_na_vyber = units_na_vyber ^ osurviv ;
3580: LD_ADDR_VAR 0 3
3584: PUSH
3585: LD_VAR 0 3
3589: PUSH
3590: LD_VAR 0 7
3594: ADD
3595: ST_TO_ADDR
// uc_side = You ;
3596: LD_ADDR_OWVAR 20
3600: PUSH
3601: LD_EXP 1
3605: ST_TO_ADDR
// uc_nation = nation_russian ;
3606: LD_ADDR_OWVAR 21
3610: PUSH
3611: LD_INT 3
3613: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_soldier , 2 ,  ) ;
3614: LD_ADDR_VAR 0 3
3618: PUSH
3619: LD_VAR 0 3
3623: PUSH
3624: CALL 16837 0 0
3628: PPUSH
3629: LD_INT 1
3631: PPUSH
3632: LD_INT 2
3634: PPUSH
3635: LD_STRING 
3637: PPUSH
3638: CALL 16872 0 4
3642: ADD
3643: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( sex_female , class_soldier , 3 ,  ) ;
3644: LD_ADDR_VAR 0 3
3648: PUSH
3649: LD_VAR 0 3
3653: PUSH
3654: LD_INT 2
3656: PPUSH
3657: LD_INT 1
3659: PPUSH
3660: LD_INT 3
3662: PPUSH
3663: LD_STRING 
3665: PPUSH
3666: CALL 16872 0 4
3670: ADD
3671: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_engineer , 2 ,  ) ;
3672: LD_ADDR_VAR 0 3
3676: PUSH
3677: LD_VAR 0 3
3681: PUSH
3682: CALL 16837 0 0
3686: PPUSH
3687: LD_INT 2
3689: PPUSH
3690: LD_INT 2
3692: PPUSH
3693: LD_STRING 
3695: PPUSH
3696: CALL 16872 0 4
3700: ADD
3701: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_scientistic , 2 ,  ) ;
3702: LD_ADDR_VAR 0 3
3706: PUSH
3707: LD_VAR 0 3
3711: PUSH
3712: CALL 16837 0 0
3716: PPUSH
3717: LD_INT 4
3719: PPUSH
3720: LD_INT 2
3722: PPUSH
3723: LD_STRING 
3725: PPUSH
3726: CALL 16872 0 4
3730: ADD
3731: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_mechanic , 2 ,  ) ;
3732: LD_ADDR_VAR 0 3
3736: PUSH
3737: LD_VAR 0 3
3741: PUSH
3742: CALL 16837 0 0
3746: PPUSH
3747: LD_INT 3
3749: PPUSH
3750: LD_INT 2
3752: PPUSH
3753: LD_STRING 
3755: PPUSH
3756: CALL 16872 0 4
3760: ADD
3761: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_engineer , 2 ,  ) ;
3762: LD_ADDR_VAR 0 3
3766: PUSH
3767: LD_VAR 0 3
3771: PUSH
3772: CALL 16837 0 0
3776: PPUSH
3777: LD_INT 2
3779: PPUSH
3780: LD_INT 2
3782: PPUSH
3783: LD_STRING 
3785: PPUSH
3786: CALL 16872 0 4
3790: ADD
3791: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_scientistic , 2 ,  ) ;
3792: LD_ADDR_VAR 0 3
3796: PUSH
3797: LD_VAR 0 3
3801: PUSH
3802: CALL 16837 0 0
3806: PPUSH
3807: LD_INT 4
3809: PPUSH
3810: LD_INT 2
3812: PPUSH
3813: LD_STRING 
3815: PPUSH
3816: CALL 16872 0 4
3820: ADD
3821: ST_TO_ADDR
// units_na_vyber = units_na_vyber ^ get_human ( get_sex , class_mechanic , 2 ,  ) ;
3822: LD_ADDR_VAR 0 3
3826: PUSH
3827: LD_VAR 0 3
3831: PUSH
3832: CALL 16837 0 0
3836: PPUSH
3837: LD_INT 3
3839: PPUSH
3840: LD_INT 2
3842: PPUSH
3843: LD_STRING 
3845: PPUSH
3846: CALL 16872 0 4
3850: ADD
3851: ST_TO_ADDR
// pom = CharacterSelection ( Vyber si peopliky , pocet , pocet , units_na_vyber , [ [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_mechanic , 0 ] , [ class_soldier , 0 ] ] ) ;
3852: LD_ADDR_VAR 0 2
3856: PUSH
3857: LD_STRING Vyber si peopliky
3859: PPUSH
3860: LD_VAR 0 5
3864: PPUSH
3865: LD_VAR 0 5
3869: PPUSH
3870: LD_VAR 0 3
3874: PPUSH
3875: LD_INT 2
3877: PUSH
3878: LD_INT 1
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 4
3887: PUSH
3888: LD_INT 1
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: PUSH
3895: LD_INT 3
3897: PUSH
3898: LD_INT 0
3900: PUSH
3901: EMPTY
3902: LIST
3903: LIST
3904: PUSH
3905: LD_INT 1
3907: PUSH
3908: LD_INT 0
3910: PUSH
3911: EMPTY
3912: LIST
3913: LIST
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: PPUSH
3921: CALL_OW 42
3925: ST_TO_ADDR
// vyber = [ bur ] ;
3926: LD_ADDR_VAR 0 6
3930: PUSH
3931: LD_EXP 29
3935: PUSH
3936: EMPTY
3937: LIST
3938: ST_TO_ADDR
// if IsOK ( gny ) then
3939: LD_EXP 31
3943: PPUSH
3944: CALL_OW 302
3948: IFFALSE 3966
// vyber = vyber ^ gny ;
3950: LD_ADDR_VAR 0 6
3954: PUSH
3955: LD_VAR 0 6
3959: PUSH
3960: LD_EXP 31
3964: ADD
3965: ST_TO_ADDR
// if IsOK ( kov ) then
3966: LD_EXP 30
3970: PPUSH
3971: CALL_OW 302
3975: IFFALSE 3993
// vyber = vyber ^ kov ;
3977: LD_ADDR_VAR 0 6
3981: PUSH
3982: LD_VAR 0 6
3986: PUSH
3987: LD_EXP 30
3991: ADD
3992: ST_TO_ADDR
// vyber = vyber ^ pom ;
3993: LD_ADDR_VAR 0 6
3997: PUSH
3998: LD_VAR 0 6
4002: PUSH
4003: LD_VAR 0 2
4007: ADD
4008: ST_TO_ADDR
// manage_zbytek ( osurviv diff vyber ) ;
4009: LD_VAR 0 7
4013: PUSH
4014: LD_VAR 0 6
4018: DIFF
4019: PPUSH
4020: CALL 4254 0 1
// result := vyber ;
4024: LD_ADDR_VAR 0 1
4028: PUSH
4029: LD_VAR 0 6
4033: ST_TO_ADDR
// end ;
4034: LD_VAR 0 1
4038: RET
// export function placni_unity ( unity ) ; var i ; begin
4039: LD_INT 0
4041: PPUSH
4042: PPUSH
// for i in unity do
4043: LD_ADDR_VAR 0 3
4047: PUSH
4048: LD_VAR 0 1
4052: PUSH
4053: FOR_IN
4054: IFFALSE 4093
// begin SetSide ( i , You ) ;
4056: LD_VAR 0 3
4060: PPUSH
4061: LD_EXP 1
4065: PPUSH
4066: CALL_OW 235
// PlaceUnitXYR ( i , 99 , 73 , 5 , false ) ;
4070: LD_VAR 0 3
4074: PPUSH
4075: LD_INT 99
4077: PPUSH
4078: LD_INT 73
4080: PPUSH
4081: LD_INT 5
4083: PPUSH
4084: LD_INT 0
4086: PPUSH
4087: CALL_OW 50
// end ;
4091: GO 4053
4093: POP
4094: POP
// wait ( 0 0$0.5 ) ;
4095: LD_INT 18
4097: PPUSH
4098: CALL_OW 67
// SaveForQuickRestart ;
4102: CALL_OW 22
// end ;
4106: LD_VAR 0 2
4110: RET
// every 0 0$10 trigger stav_omikron < 3 do
4111: LD_EXP 39
4115: PUSH
4116: LD_INT 3
4118: LESS
4119: IFFALSE 4188
4121: GO 4123
4123: DISABLE
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
4124: LD_INT 50
4126: PPUSH
4127: LD_INT 4200
4129: PPUSH
4130: CALL_OW 12
4134: PPUSH
4135: CALL_OW 67
// wait ( konzervy_delay * 0 0$5 ) ;
4139: LD_LOC 16
4143: PUSH
4144: LD_INT 175
4146: MUL
4147: PPUSH
4148: CALL_OW 67
// konzervy_delay = konzervy_delay + 1 ;
4152: LD_ADDR_LOC 16
4156: PUSH
4157: LD_LOC 16
4161: PUSH
4162: LD_INT 1
4164: PLUS
4165: ST_TO_ADDR
// CreateCratesArea ( Rand ( 3 , 5 ) , RU2_bedny , true ) ;
4166: LD_INT 3
4168: PPUSH
4169: LD_INT 5
4171: PPUSH
4172: CALL_OW 12
4176: PPUSH
4177: LD_INT 7
4179: PPUSH
4180: LD_INT 1
4182: PPUSH
4183: CALL_OW 55
// enable ;
4187: ENABLE
// end ;
4188: END
// every 0 0$30 do
4189: GO 4191
4191: DISABLE
// begin CreateCratesArea ( Rand ( 3 , 5 ) , RU2_bedny , true ) ;
4192: LD_INT 3
4194: PPUSH
4195: LD_INT 5
4197: PPUSH
4198: CALL_OW 12
4202: PPUSH
4203: LD_INT 7
4205: PPUSH
4206: LD_INT 1
4208: PPUSH
4209: CALL_OW 55
// end ;
4213: END
// every 1 1$20 do
4214: GO 4216
4216: DISABLE
// begin wait ( Rand ( 1 , 0 0$40 ) ) ;
4217: LD_INT 1
4219: PPUSH
4220: LD_INT 1400
4222: PPUSH
4223: CALL_OW 12
4227: PPUSH
4228: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 4 ) , konzervy_all , true ) ;
4232: LD_INT 1
4234: PPUSH
4235: LD_INT 4
4237: PPUSH
4238: CALL_OW 12
4242: PPUSH
4243: LD_INT 25
4245: PPUSH
4246: LD_INT 1
4248: PPUSH
4249: CALL_OW 55
// end ;
4253: END
// function manage_zbytek ( lidi ) ; var i ; begin
4254: LD_INT 0
4256: PPUSH
4257: PPUSH
// for i in lidi do
4258: LD_ADDR_VAR 0 3
4262: PUSH
4263: LD_VAR 0 1
4267: PUSH
4268: FOR_IN
4269: IFFALSE 4308
// begin SetSide ( i , You2 ) ;
4271: LD_VAR 0 3
4275: PPUSH
4276: LD_EXP 2
4280: PPUSH
4281: CALL_OW 235
// PlaceUnitXYR ( i , 144 , 79 , 3 , false ) ;
4285: LD_VAR 0 3
4289: PPUSH
4290: LD_INT 144
4292: PPUSH
4293: LD_INT 79
4295: PPUSH
4296: LD_INT 3
4298: PPUSH
4299: LD_INT 0
4301: PPUSH
4302: CALL_OW 50
// end ;
4306: GO 4268
4308: POP
4309: POP
// ComEnterUnit ( lidi , RU1_dep ) ;
4310: LD_VAR 0 1
4314: PPUSH
4315: LD_INT 1
4317: PPUSH
4318: CALL_OW 120
// end ; end_of_file
4322: LD_VAR 0 2
4326: RET
// export level_bw_e ; export schol_find_amikama ; export levely_amici ; export posily1 ; export posily11 ; export posily2 ; export posily3 ; export posily4 ; export utok_na_omikron ; export levely_ruske_posily ; export levely_am_budov ; export muze_projit_posil ; export muze_prezit_posil ; export BELKOV_SAVED ; export STAV_UTOKU ; export function set_difficulty ; begin
4327: LD_INT 0
4329: PPUSH
// BELKOV_SAVED = LoadVariable ( belkov_saved , 0 ) ;
4330: LD_ADDR_EXP 24
4334: PUSH
4335: LD_STRING belkov_saved
4337: PPUSH
4338: LD_INT 0
4340: PPUSH
4341: CALL_OW 30
4345: ST_TO_ADDR
// STAV_UTOKU = LoadVariable ( utok_stav , 3 ) ;
4346: LD_ADDR_EXP 25
4350: PUSH
4351: LD_STRING utok_stav
4353: PPUSH
4354: LD_INT 3
4356: PPUSH
4357: CALL_OW 30
4361: ST_TO_ADDR
// level_bw_e = [ 2 , 3 , 4 ] ;
4362: LD_ADDR_EXP 11
4366: PUSH
4367: LD_INT 2
4369: PUSH
4370: LD_INT 3
4372: PUSH
4373: LD_INT 4
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: LIST
4380: ST_TO_ADDR
// schol_find_amikama = [ 11 11$0 , 9 9$0 , 7 7$0 ] ;
4381: LD_ADDR_EXP 12
4385: PUSH
4386: LD_INT 23100
4388: PUSH
4389: LD_INT 18900
4391: PUSH
4392: LD_INT 14700
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: LIST
4399: ST_TO_ADDR
// levely_amici = [ 2 , 3 , 4 ] ;
4400: LD_ADDR_EXP 13
4404: PUSH
4405: LD_INT 2
4407: PUSH
4408: LD_INT 3
4410: PUSH
4411: LD_INT 4
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: LIST
4418: ST_TO_ADDR
// posily1 = [ 13 13$00 , 11 11$00 , 10 10$00 ] ;
4419: LD_ADDR_EXP 14
4423: PUSH
4424: LD_INT 27300
4426: PUSH
4427: LD_INT 23100
4429: PUSH
4430: LD_INT 21000
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: LIST
4437: ST_TO_ADDR
// posily11 = [ 5 5$0 , 4 4$0 , 3 3$0 ] ;
4438: LD_ADDR_EXP 15
4442: PUSH
4443: LD_INT 10500
4445: PUSH
4446: LD_INT 8400
4448: PUSH
4449: LD_INT 6300
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: LIST
4456: ST_TO_ADDR
// posily2 = [ 10 10$0 , 8 8$0 , 5 5$0 ] ;
4457: LD_ADDR_EXP 16
4461: PUSH
4462: LD_INT 21000
4464: PUSH
4465: LD_INT 16800
4467: PUSH
4468: LD_INT 10500
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: LIST
4475: ST_TO_ADDR
// posily3 = [ 11 11$0 , 8 8$30 , 5 5$0 ] ;
4476: LD_ADDR_EXP 17
4480: PUSH
4481: LD_INT 23100
4483: PUSH
4484: LD_INT 17850
4486: PUSH
4487: LD_INT 10500
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: LIST
4494: ST_TO_ADDR
// posily4 = [ 8 8$0 , 7 7$0 , 5 5$0 ] ;
4495: LD_ADDR_EXP 18
4499: PUSH
4500: LD_INT 16800
4502: PUSH
4503: LD_INT 14700
4505: PUSH
4506: LD_INT 10500
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: LIST
4513: ST_TO_ADDR
// utok_na_omikron = [ 55 55$0 , 45 45$0 , 35 35$0 ] [ difficulty ] ;
4514: LD_ADDR_EXP 19
4518: PUSH
4519: LD_INT 115500
4521: PUSH
4522: LD_INT 94500
4524: PUSH
4525: LD_INT 73500
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: LIST
4532: PUSH
4533: LD_OWVAR 67
4537: ARRAY
4538: ST_TO_ADDR
// levely_ruske_posily = [ 4 , 3 , 2 ] ;
4539: LD_ADDR_EXP 20
4543: PUSH
4544: LD_INT 4
4546: PUSH
4547: LD_INT 3
4549: PUSH
4550: LD_INT 2
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: LIST
4557: ST_TO_ADDR
// levely_am_budov = [ 0 , 1 , 2 ] ;
4558: LD_ADDR_EXP 21
4562: PUSH
4563: LD_INT 0
4565: PUSH
4566: LD_INT 1
4568: PUSH
4569: LD_INT 2
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: LIST
4576: ST_TO_ADDR
// muze_projit_posil = [ 8 , 8 , 6 ] ;
4577: LD_ADDR_EXP 22
4581: PUSH
4582: LD_INT 8
4584: PUSH
4585: LD_INT 8
4587: PUSH
4588: LD_INT 6
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: LIST
4595: ST_TO_ADDR
// muze_prezit_posil = [ 2 , 5 , 100 ] ;
4596: LD_ADDR_EXP 23
4600: PUSH
4601: LD_INT 2
4603: PUSH
4604: LD_INT 5
4606: PUSH
4607: LD_INT 100
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: LIST
4614: ST_TO_ADDR
// cas = [ 0 , : , 0 ] ;
4615: LD_ADDR_EXP 26
4619: PUSH
4620: LD_INT 0
4622: PUSH
4623: LD_STRING :
4625: PUSH
4626: LD_INT 0
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: LIST
4633: ST_TO_ADDR
// end ;
4634: LD_VAR 0 1
4638: RET
// export cas ; every 0 0$10 do var pom ;
4639: GO 4641
4641: DISABLE
4642: LD_INT 0
4644: PPUSH
// begin if cas [ 3 ] + 10 = 60 then
4645: LD_EXP 26
4649: PUSH
4650: LD_INT 3
4652: ARRAY
4653: PUSH
4654: LD_INT 10
4656: PLUS
4657: PUSH
4658: LD_INT 60
4660: EQUAL
4661: IFFALSE 4697
// cas = cas [ 1 ] + 1 ^ cas [ 2 ] ^ 0 else
4663: LD_ADDR_EXP 26
4667: PUSH
4668: LD_EXP 26
4672: PUSH
4673: LD_INT 1
4675: ARRAY
4676: PUSH
4677: LD_INT 1
4679: PLUS
4680: PUSH
4681: LD_EXP 26
4685: PUSH
4686: LD_INT 2
4688: ARRAY
4689: ADD
4690: PUSH
4691: LD_INT 0
4693: ADD
4694: ST_TO_ADDR
4695: GO 4735
// cas = cas [ 1 ] ^ cas [ 2 ] ^ cas [ 3 ] + 10 ;
4697: LD_ADDR_EXP 26
4701: PUSH
4702: LD_EXP 26
4706: PUSH
4707: LD_INT 1
4709: ARRAY
4710: PUSH
4711: LD_EXP 26
4715: PUSH
4716: LD_INT 2
4718: ARRAY
4719: ADD
4720: PUSH
4721: LD_EXP 26
4725: PUSH
4726: LD_INT 3
4728: ARRAY
4729: PUSH
4730: LD_INT 10
4732: PLUS
4733: ADD
4734: ST_TO_ADDR
// debug_strings = [ cas ] ;
4735: LD_ADDR_OWVAR 48
4739: PUSH
4740: LD_EXP 26
4744: PUSH
4745: EMPTY
4746: LIST
4747: ST_TO_ADDR
// enable ;
4748: ENABLE
// end ;
4749: PPOPN 1
4751: END
// export function pojmenovani_zakladen ; var pom ; begin
4752: LD_INT 0
4754: PPUSH
4755: PPUSH
// SetBName ( RU1_dep , kirov ) ;
4756: LD_INT 1
4758: PPUSH
4759: LD_STRING kirov
4761: PPUSH
4762: CALL_OW 500
// pom = FilterUnitsInArea ( Ru2_base , [ [ f_side , You ] , [ f_btype , b_depot ] ] ) ;
4766: LD_ADDR_VAR 0 2
4770: PUSH
4771: LD_INT 2
4773: PPUSH
4774: LD_INT 22
4776: PUSH
4777: LD_EXP 1
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 30
4788: PUSH
4789: LD_INT 0
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: PPUSH
4800: CALL_OW 70
4804: ST_TO_ADDR
// if pom > 0 then
4805: LD_VAR 0 2
4809: PUSH
4810: LD_INT 0
4812: GREATER
4813: IFFALSE 4831
// SetBName ( pom [ 1 ] , beria ) ;
4815: LD_VAR 0 2
4819: PUSH
4820: LD_INT 1
4822: ARRAY
4823: PPUSH
4824: LD_STRING beria
4826: PPUSH
4827: CALL_OW 500
// SetBName ( Am_dep , omikron ) ;
4831: LD_INT 12
4833: PPUSH
4834: LD_STRING omikron
4836: PPUSH
4837: CALL_OW 500
// end ;
4841: LD_VAR 0 1
4845: RET
// export function pojmenovani_kaganoviche ( base ) ; begin
4846: LD_INT 0
4848: PPUSH
// SetBName ( base , kagan ) ;
4849: LD_VAR 0 1
4853: PPUSH
4854: LD_STRING kagan
4856: PPUSH
4857: CALL_OW 500
// end ; end_of_file
4861: LD_VAR 0 2
4865: RET
// export kur ; export pop ; export bur ; export kov ; export gny ; export bel ; export schol ; export schol2 ; export grishko ; export Rusi_enter ; export scholtze_saved ; export stav_aut ; export stav_omikron ; export RU_videl_oil ; var counter_zapnut ; export setkani_om ; var R_comp ; export Rusi_utekli ; export Rusi_save ; var dialog_probehnul ; var qrefuel_over ; export kecy_scholtze_nalezen ; export konec_counteru ; export stav_aut_new ; export postavenych_aut ; var TTime ; export special_time ; every 0 0$0.1 do var i ;
4866: GO 4868
4868: DISABLE
4869: LD_INT 0
4871: PPUSH
// begin schol = 0 ;
4872: LD_ADDR_EXP 33
4876: PUSH
4877: LD_INT 0
4879: ST_TO_ADDR
// scholtze_saved = false ;
4880: LD_ADDR_EXP 37
4884: PUSH
4885: LD_INT 0
4887: ST_TO_ADDR
// stav_omikron = 0 ;
4888: LD_ADDR_EXP 39
4892: PUSH
4893: LD_INT 0
4895: ST_TO_ADDR
// stav_aut = 0 ;
4896: LD_ADDR_EXP 38
4900: PUSH
4901: LD_INT 0
4903: ST_TO_ADDR
// RU_videl_oil = false ;
4904: LD_ADDR_EXP 40
4908: PUSH
4909: LD_INT 0
4911: ST_TO_ADDR
// counter_zapnut = false ;
4912: LD_ADDR_LOC 17
4916: PUSH
4917: LD_INT 0
4919: ST_TO_ADDR
// setkani_om = false ;
4920: LD_ADDR_EXP 41
4924: PUSH
4925: LD_INT 0
4927: ST_TO_ADDR
// R_comp = [ ] ;
4928: LD_ADDR_LOC 18
4932: PUSH
4933: EMPTY
4934: ST_TO_ADDR
// Rusi_utekli = [ ] ;
4935: LD_ADDR_EXP 42
4939: PUSH
4940: EMPTY
4941: ST_TO_ADDR
// Rusi_save = [ ] ;
4942: LD_ADDR_EXP 43
4946: PUSH
4947: EMPTY
4948: ST_TO_ADDR
// dialog_probehnul = false ;
4949: LD_ADDR_LOC 19
4953: PUSH
4954: LD_INT 0
4956: ST_TO_ADDR
// qrefuel_over = false ;
4957: LD_ADDR_LOC 20
4961: PUSH
4962: LD_INT 0
4964: ST_TO_ADDR
// kecy_scholtze_nalezen = false ;
4965: LD_ADDR_EXP 44
4969: PUSH
4970: LD_INT 0
4972: ST_TO_ADDR
// postavenych_aut = 0 ;
4973: LD_ADDR_EXP 47
4977: PUSH
4978: LD_INT 0
4980: ST_TO_ADDR
// TTime = 0 ;
4981: LD_ADDR_LOC 21
4985: PUSH
4986: LD_INT 0
4988: ST_TO_ADDR
// konec_counteru = false ;
4989: LD_ADDR_EXP 45
4993: PUSH
4994: LD_INT 0
4996: ST_TO_ADDR
// stav_aut_new = 0 ;
4997: LD_ADDR_EXP 46
5001: PUSH
5002: LD_INT 0
5004: ST_TO_ADDR
// special_time = false ;
5005: LD_ADDR_EXP 48
5009: PUSH
5010: LD_INT 0
5012: ST_TO_ADDR
// for i in [ 1 , 2 , 3 , 6 , 7 , 8 , 9 , 10 , 51 , 52 , 53 , 200 , 201 , 202 , 203 ] do
5013: LD_ADDR_VAR 0 1
5017: PUSH
5018: LD_INT 1
5020: PUSH
5021: LD_INT 2
5023: PUSH
5024: LD_INT 3
5026: PUSH
5027: LD_INT 6
5029: PUSH
5030: LD_INT 7
5032: PUSH
5033: LD_INT 8
5035: PUSH
5036: LD_INT 9
5038: PUSH
5039: LD_INT 10
5041: PUSH
5042: LD_INT 51
5044: PUSH
5045: LD_INT 52
5047: PUSH
5048: LD_INT 53
5050: PUSH
5051: LD_INT 200
5053: PUSH
5054: LD_INT 201
5056: PUSH
5057: LD_INT 202
5059: PUSH
5060: LD_INT 203
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: PUSH
5080: FOR_IN
5081: IFFALSE 5090
// disable ( i ) ;
5083: LD_VAR 0 1
5087: DISABLE_MARKED
5088: GO 5080
5090: POP
5091: POP
// end ;
5092: PPOPN 1
5094: END
// export function uklid_rusu ; begin
5095: LD_INT 0
5097: PPUSH
// ComEnterUnit ( RU1_vb1 , RU1_bu1 ) ;
5098: LD_INT 42
5100: PPUSH
5101: LD_INT 3
5103: PPUSH
5104: CALL_OW 120
// ComEnterUnit ( RU1_vb2 , RU1_bu2 ) ;
5108: LD_INT 43
5110: PPUSH
5111: LD_INT 4
5113: PPUSH
5114: CALL_OW 120
// ComEnterUnit ( RU1_sci1 , RU1_lab2 ) ;
5118: LD_INT 44
5120: PPUSH
5121: LD_INT 16
5123: PPUSH
5124: CALL_OW 120
// ComEnterUnit ( RU1_sci2 , RU1_lab2 ) ;
5128: LD_INT 45
5130: PPUSH
5131: LD_INT 16
5133: PPUSH
5134: CALL_OW 120
// ComEnterUnit ( RU1_sci3 , RU1_lab2 ) ;
5138: LD_INT 46
5140: PPUSH
5141: LD_INT 16
5143: PPUSH
5144: CALL_OW 120
// ComEnterUnit ( RU1_sci4 , RU1_lab1 ) ;
5148: LD_INT 47
5150: PPUSH
5151: LD_INT 6
5153: PPUSH
5154: CALL_OW 120
// ComEnterUnit ( RU1_sci5 , RU1_lab1 ) ;
5158: LD_INT 48
5160: PPUSH
5161: LD_INT 6
5163: PPUSH
5164: CALL_OW 120
// ComEnterUnit ( RU1_me1 , RU1_fac ) ;
5168: LD_INT 49
5170: PPUSH
5171: LD_INT 5
5173: PPUSH
5174: CALL_OW 120
// ComEnterUnit ( RU1_me2 , RU1_fac ) ;
5178: LD_INT 50
5180: PPUSH
5181: LD_INT 5
5183: PPUSH
5184: CALL_OW 120
// ComEnterUnit ( RU1_me3 , RU1_fac ) ;
5188: LD_INT 51
5190: PPUSH
5191: LD_INT 5
5193: PPUSH
5194: CALL_OW 120
// ComEnterUnit ( pop , RU1_bar1 ) ;
5198: LD_EXP 28
5202: PPUSH
5203: LD_INT 2
5205: PPUSH
5206: CALL_OW 120
// ComEnterUnit ( RU1_sol1 , RU1_bar1 ) ;
5210: LD_INT 52
5212: PPUSH
5213: LD_INT 2
5215: PPUSH
5216: CALL_OW 120
// ComEnterUnit ( RU1_sol2 , RU1_bar1 ) ;
5220: LD_INT 53
5222: PPUSH
5223: LD_INT 2
5225: PPUSH
5226: CALL_OW 120
// ComEnterUnit ( RU1_sol3 , RU1_bar2 ) ;
5230: LD_INT 56
5232: PPUSH
5233: LD_INT 17
5235: PPUSH
5236: CALL_OW 120
// ComEnterUnit ( RU1_sol4 , RU1_bar2 ) ;
5240: LD_INT 54
5242: PPUSH
5243: LD_INT 17
5245: PPUSH
5246: CALL_OW 120
// ComEnterUnit ( RU1_sol5 , RU1_bar2 ) ;
5250: LD_INT 55
5252: PPUSH
5253: LD_INT 17
5255: PPUSH
5256: CALL_OW 120
// ComEnterUnit ( RU1_eng1 , RU1_dep ) ;
5260: LD_INT 57
5262: PPUSH
5263: LD_INT 1
5265: PPUSH
5266: CALL_OW 120
// end ;
5270: LD_VAR 0 1
5274: RET
// every 5 5$30 do var pom ;
5275: GO 5277
5277: DISABLE
5278: LD_INT 0
5280: PPUSH
// begin schol2 = create_scholtze ;
5281: LD_ADDR_EXP 34
5285: PUSH
5286: CALL 2423 0 0
5290: ST_TO_ADDR
// wait ( 0 0$2 ) ;
5291: LD_INT 70
5293: PPUSH
5294: CALL_OW 67
// CenterNowOnUnits ( schol2 ) ;
5298: LD_EXP 34
5302: PPUSH
5303: CALL_OW 87
// dialog_scholtze_enter ;
5307: CALL 11640 0 0
// ComMoveToArea ( schol2 , scholze_flee ) ;
5311: LD_EXP 34
5315: PPUSH
5316: LD_INT 45
5318: PPUSH
5319: CALL_OW 113
// AddComHold ( schol2 ) ;
5323: LD_EXP 34
5327: PPUSH
5328: CALL_OW 200
// wait ( 0 0$5 ) ;
5332: LD_INT 175
5334: PPUSH
5335: CALL_OW 67
// amici_hlidka ;
5339: CALL 23864 0 0
// enable ( 1 ) ;
5343: LD_INT 1
5345: ENABLE_MARKED
// end ;
5346: PPOPN 1
5348: END
// every 0 0$1 trigger FilterUnitsInArea ( Schol_les , [ [ f_side , You ] ] ) > 0 marked 1 do
5349: LD_INT 26
5351: PPUSH
5352: LD_INT 22
5354: PUSH
5355: LD_EXP 1
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: PUSH
5364: EMPTY
5365: LIST
5366: PPUSH
5367: CALL_OW 70
5371: PUSH
5372: LD_INT 0
5374: GREATER
5375: IFFALSE 5449
5377: GO 5379
5379: DISABLE
// begin kecy_scholtze_nalezen = true ;
5380: LD_ADDR_EXP 44
5384: PUSH
5385: LD_INT 1
5387: ST_TO_ADDR
// dialog_scholtze_nalezen ;
5388: CALL 11712 0 0
// SetSide ( schol2 , You ) ;
5392: LD_EXP 34
5396: PPUSH
5397: LD_EXP 1
5401: PPUSH
5402: CALL_OW 235
// schol = schol2 ;
5406: LD_ADDR_EXP 33
5410: PUSH
5411: LD_EXP 34
5415: ST_TO_ADDR
// ChangeMissionObjectives ( MScholtzeOut ) ;
5416: LD_STRING MScholtzeOut
5418: PPUSH
5419: CALL_OW 337
// wait ( 1 1$0 ) ;
5423: LD_INT 2100
5425: PPUSH
5426: CALL_OW 67
// if IsLive ( schol ) then
5430: LD_EXP 33
5434: PPUSH
5435: CALL_OW 300
5439: IFFALSE 5449
// scholtze_saved = true ;
5441: LD_ADDR_EXP 37
5445: PUSH
5446: LD_INT 1
5448: ST_TO_ADDR
// end ;
5449: END
// every 1 1$0 do
5450: GO 5452
5452: DISABLE
// begin if GetResourceType ( GetBase ( RU1_dep ) , mat_oil ) < 50 then
5453: LD_INT 1
5455: PPUSH
5456: CALL_OW 274
5460: PPUSH
5461: LD_INT 2
5463: PPUSH
5464: CALL_OW 275
5468: PUSH
5469: LD_INT 50
5471: LESS
5472: IFFALSE 5492
// AddResourceType ( GetBase ( RU1_dep ) , mat_oil , 100 ) ;
5474: LD_INT 1
5476: PPUSH
5477: CALL_OW 274
5481: PPUSH
5482: LD_INT 2
5484: PPUSH
5485: LD_INT 100
5487: PPUSH
5488: CALL_OW 276
// enable ;
5492: ENABLE
// end ;
5493: END
// every 1 1$7 do
5494: GO 5496
5496: DISABLE
// begin if Researched ( You2 , tech_Weap1 ) then
5497: LD_EXP 2
5501: PPUSH
5502: LD_INT 51
5504: PPUSH
5505: CALL_OW 325
5509: IFFALSE 5536
// begin SetTech ( tech_Weap1 , You2 , state_enabled ) ;
5511: LD_INT 51
5513: PPUSH
5514: LD_EXP 2
5518: PPUSH
5519: LD_INT 1
5521: PPUSH
5522: CALL_OW 322
// ComResearch ( RU1_lab1 , tech_Weap1 ) ;
5526: LD_INT 6
5528: PPUSH
5529: LD_INT 51
5531: PPUSH
5532: CALL_OW 124
// end ; enable ;
5536: ENABLE
// end ;
5537: END
// every 0 0$19 do
5538: GO 5540
5540: DISABLE
// begin SetTech ( tech_Weap1 , You2 , state_enabled ) ;
5541: LD_INT 51
5543: PPUSH
5544: LD_EXP 2
5548: PPUSH
5549: LD_INT 1
5551: PPUSH
5552: CALL_OW 322
// ComResearch ( RU1_lab1 , tech_Weap1 ) ;
5556: LD_INT 6
5558: PPUSH
5559: LD_INT 51
5561: PPUSH
5562: CALL_OW 124
// end ;
5566: END
// every 0 0$5 trigger stav_omikron = 2 do
5567: LD_EXP 39
5571: PUSH
5572: LD_INT 2
5574: EQUAL
5575: IFFALSE 5618
5577: GO 5579
5579: DISABLE
// begin TTime = 7 7$0 ;
5580: LD_ADDR_LOC 21
5584: PUSH
5585: LD_INT 14700
5587: ST_TO_ADDR
// enable ( 53 ) ;
5588: LD_INT 53
5590: ENABLE_MARKED
// wait ( 7 7$0 ) ;
5591: LD_INT 14700
5593: PPUSH
5594: CALL_OW 67
// special_time = true ;
5598: LD_ADDR_EXP 48
5602: PUSH
5603: LD_INT 1
5605: ST_TO_ADDR
// hlaska_omicron ;
5606: CALL 13309 0 0
// stav_omikron = 3 ;
5610: LD_ADDR_EXP 39
5614: PUSH
5615: LD_INT 3
5617: ST_TO_ADDR
// end ;
5618: END
// export function popov_ven ; var i ; begin
5619: LD_INT 0
5621: PPUSH
5622: PPUSH
// for i = 1 to 8 do
5623: LD_ADDR_VAR 0 2
5627: PUSH
5628: DOUBLE
5629: LD_INT 1
5631: DEC
5632: ST_TO_ADDR
5633: LD_INT 8
5635: PUSH
5636: FOR_TO
5637: IFFALSE 5655
// DoNotAttack ( i , pop ) ;
5639: LD_VAR 0 2
5643: PPUSH
5644: LD_EXP 28
5648: PPUSH
5649: CALL_OW 471
5653: GO 5636
5655: POP
5656: POP
// while IsInUnit ( pop ) > 0 do
5657: LD_EXP 28
5661: PPUSH
5662: CALL_OW 310
5666: PUSH
5667: LD_INT 0
5669: GREATER
5670: IFFALSE 5737
// begin case GetType ( IsInUnit ( pop ) ) of unit_building :
5672: LD_EXP 28
5676: PPUSH
5677: CALL_OW 310
5681: PPUSH
5682: CALL_OW 247
5686: PUSH
5687: LD_INT 3
5689: DOUBLE
5690: EQUAL
5691: IFTRUE 5695
5693: GO 5707
5695: POP
// ComExitBuilding ( pop ) ; unit_vehicle :
5696: LD_EXP 28
5700: PPUSH
5701: CALL_OW 122
5705: GO 5728
5707: LD_INT 2
5709: DOUBLE
5710: EQUAL
5711: IFTRUE 5715
5713: GO 5727
5715: POP
// ComExitVehicle ( pop ) ; end ;
5716: LD_EXP 28
5720: PPUSH
5721: CALL_OW 121
5725: GO 5728
5727: POP
// wait ( 0 0$0.5 ) ;
5728: LD_INT 18
5730: PPUSH
5731: CALL_OW 67
// end ;
5735: GO 5657
// AddComMoveToArea ( pop , bst_2 ) ;
5737: LD_EXP 28
5741: PPUSH
5742: LD_INT 41
5744: PPUSH
5745: CALL_OW 173
// AddComMoveToArea ( pop , bst_3 ) ;
5749: LD_EXP 28
5753: PPUSH
5754: LD_INT 42
5756: PPUSH
5757: CALL_OW 173
// AddComHold ( pop ) ;
5761: LD_EXP 28
5765: PPUSH
5766: CALL_OW 200
// end ;
5770: LD_VAR 0 1
5774: RET
// every 0 0$5 trigger IsInArea ( pop , Exit_area ) do
5775: LD_EXP 28
5779: PPUSH
5780: LD_INT 16
5782: PPUSH
5783: CALL_OW 308
5787: IFFALSE 5801
5789: GO 5791
5791: DISABLE
// begin RemoveUnit ( pop ) ;
5792: LD_EXP 28
5796: PPUSH
5797: CALL_OW 64
// end ;
5801: END
// export function prebarveni_druhe_baze ; var pom , i ; begin
5802: LD_INT 0
5804: PPUSH
5805: PPUSH
5806: PPUSH
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You3 ] , [ f_type , unit_building ] ] ) ;
5807: LD_ADDR_VAR 0 2
5811: PUSH
5812: LD_INT 2
5814: PPUSH
5815: LD_INT 22
5817: PUSH
5818: LD_EXP 3
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PUSH
5827: LD_INT 21
5829: PUSH
5830: LD_INT 3
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: PUSH
5837: EMPTY
5838: LIST
5839: LIST
5840: PPUSH
5841: CALL_OW 70
5845: ST_TO_ADDR
// for i in pom do
5846: LD_ADDR_VAR 0 3
5850: PUSH
5851: LD_VAR 0 2
5855: PUSH
5856: FOR_IN
5857: IFFALSE 5875
// SetSide ( i , You ) ;
5859: LD_VAR 0 3
5863: PPUSH
5864: LD_EXP 1
5868: PPUSH
5869: CALL_OW 235
5873: GO 5856
5875: POP
5876: POP
// end ;
5877: LD_VAR 0 1
5881: RET
// export function pomoc_pro_omikroni_utok ; var i ; begin
5882: LD_INT 0
5884: PPUSH
5885: PPUSH
// for i in RUSKE_POSILY_NA_OMICRON_LIST do
5886: LD_ADDR_VAR 0 2
5890: PUSH
5891: LD_EXP 56
5895: PUSH
5896: FOR_IN
5897: IFFALSE 5916
// PlaceUnitArea ( i , Enterposil , false ) ;
5899: LD_VAR 0 2
5903: PPUSH
5904: LD_INT 49
5906: PPUSH
5907: LD_INT 0
5909: PPUSH
5910: CALL_OW 49
5914: GO 5896
5916: POP
5917: POP
// ComMoveToArea ( RUSKE_POSILY_NA_OMICRON_LIST , bst_4 ) ;
5918: LD_EXP 56
5922: PPUSH
5923: LD_INT 43
5925: PPUSH
5926: CALL_OW 113
// for i in RUSKE_POSILY_RIDICI_LIST do
5930: LD_ADDR_VAR 0 2
5934: PUSH
5935: LD_EXP 57
5939: PUSH
5940: FOR_IN
5941: IFFALSE 5960
// PlaceUnitArea ( i , Arabi1 , false ) ;
5943: LD_VAR 0 2
5947: PPUSH
5948: LD_INT 12
5950: PPUSH
5951: LD_INT 0
5953: PPUSH
5954: CALL_OW 49
5958: GO 5940
5960: POP
5961: POP
// ComMoveToArea ( RUSKE_POSILY_RIDICI_LIST , bst_1 ) ;
5962: LD_EXP 57
5966: PPUSH
5967: LD_INT 40
5969: PPUSH
5970: CALL_OW 113
// AddComEnterUnit ( RUSKE_POSILY_RIDICI_LIST , RU1_fac ) ;
5974: LD_EXP 57
5978: PPUSH
5979: LD_INT 5
5981: PPUSH
5982: CALL_OW 180
// end ;
5986: LD_VAR 0 1
5990: RET
// every 0 0$1 trigger stav_omikron = 3 and not special_time do
5991: LD_EXP 39
5995: PUSH
5996: LD_INT 3
5998: EQUAL
5999: PUSH
6000: LD_EXP 48
6004: NOT
6005: AND
6006: IFFALSE 6040
6008: GO 6010
6010: DISABLE
// begin disable ( 53 ) ;
6011: LD_INT 53
6013: DISABLE_MARKED
// TTime = 3 3$0 ;
6014: LD_ADDR_LOC 21
6018: PUSH
6019: LD_INT 6300
6021: ST_TO_ADDR
// enable ( 51 ) ;
6022: LD_INT 51
6024: ENABLE_MARKED
// counter_zapnut = true ;
6025: LD_ADDR_LOC 17
6029: PUSH
6030: LD_INT 1
6032: ST_TO_ADDR
// posli_ruske_posily ;
6033: CALL 6543 0 0
// enable ( 3 ) ;
6037: LD_INT 3
6039: ENABLE_MARKED
// end ;
6040: END
// every 0 0$1 trigger stav_omikron = 3 and special_time do
6041: LD_EXP 39
6045: PUSH
6046: LD_INT 3
6048: EQUAL
6049: PUSH
6050: LD_EXP 48
6054: AND
6055: IFFALSE 6089
6057: GO 6059
6059: DISABLE
// begin disable ( 53 ) ;
6060: LD_INT 53
6062: DISABLE_MARKED
// TTime = 2 2$0 ;
6063: LD_ADDR_LOC 21
6067: PUSH
6068: LD_INT 4200
6070: ST_TO_ADDR
// enable ( 51 ) ;
6071: LD_INT 51
6073: ENABLE_MARKED
// counter_zapnut = true ;
6074: LD_ADDR_LOC 17
6078: PUSH
6079: LD_INT 1
6081: ST_TO_ADDR
// posli_ruske_posily ;
6082: CALL 6543 0 0
// enable ( 3 ) ;
6086: LD_INT 3
6088: ENABLE_MARKED
// end ;
6089: END
// every 0 0$3 trigger stav_omikron = 3 do var i , pom , pom1 , pom2 , rpom ; var rusi_enter_new ; var poc ;
6090: LD_EXP 39
6094: PUSH
6095: LD_INT 3
6097: EQUAL
6098: IFFALSE 6295
6100: GO 6102
6102: DISABLE
6103: LD_INT 0
6105: PPUSH
6106: PPUSH
6107: PPUSH
6108: PPUSH
6109: PPUSH
6110: PPUSH
6111: PPUSH
// begin if FilterUnitsInArea ( Om_zone , [ [ f_side , You ] ] ) then
6112: LD_INT 8
6114: PPUSH
6115: LD_INT 22
6117: PUSH
6118: LD_EXP 1
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: PUSH
6127: EMPTY
6128: LIST
6129: PPUSH
6130: CALL_OW 70
6134: IFFALSE 6294
// begin rpom = FilterUnitsExceptArea ( Om_pom1 , [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
6136: LD_ADDR_VAR 0 5
6140: PUSH
6141: LD_INT 23
6143: PPUSH
6144: LD_INT 22
6146: PUSH
6147: LD_EXP 1
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: PUSH
6156: LD_INT 21
6158: PUSH
6159: LD_INT 1
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: PUSH
6166: EMPTY
6167: LIST
6168: LIST
6169: PPUSH
6170: CALL_OW 71
6174: ST_TO_ADDR
// if rpom = 0 then
6175: LD_VAR 0 5
6179: PUSH
6180: LD_INT 0
6182: EQUAL
6183: IFFALSE 6291
// begin disable ( 51 ) ;
6185: LD_INT 51
6187: DISABLE_MARKED
// disable ( 52 ) ;
6188: LD_INT 52
6190: DISABLE_MARKED
// konec_counteru = true ;
6191: LD_ADDR_EXP 45
6195: PUSH
6196: LD_INT 1
6198: ST_TO_ADDR
// poc = 0 ;
6199: LD_ADDR_VAR 0 7
6203: PUSH
6204: LD_INT 0
6206: ST_TO_ADDR
// while FilterUnitsInArea ( Om_zone , [ [ f_side , You2 ] ] ) = 0 and poc < 60 do
6207: LD_INT 8
6209: PPUSH
6210: LD_INT 22
6212: PUSH
6213: LD_EXP 2
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PUSH
6222: EMPTY
6223: LIST
6224: PPUSH
6225: CALL_OW 70
6229: PUSH
6230: LD_INT 0
6232: EQUAL
6233: PUSH
6234: LD_VAR 0 7
6238: PUSH
6239: LD_INT 60
6241: LESS
6242: AND
6243: IFFALSE 6268
// begin wait ( 0 0$1 ) ;
6245: LD_INT 35
6247: PPUSH
6248: CALL_OW 67
// poc = poc + 1 ;
6252: LD_ADDR_VAR 0 7
6256: PUSH
6257: LD_VAR 0 7
6261: PUSH
6262: LD_INT 1
6264: PLUS
6265: ST_TO_ADDR
// end ;
6266: GO 6207
// stav_omikron = 4 ;
6268: LD_ADDR_EXP 39
6272: PUSH
6273: LD_INT 4
6275: ST_TO_ADDR
// dialog_pred_omicronem ;
6276: CALL 13392 0 0
// enable ( 9 ) ;
6280: LD_INT 9
6282: ENABLE_MARKED
// disable ( 3 ) ;
6283: LD_INT 3
6285: DISABLE_MARKED
// enable ( 10 ) ;
6286: LD_INT 10
6288: ENABLE_MARKED
// end else
6289: GO 6292
// enable ;
6291: ENABLE
// end else
6292: GO 6295
// enable ;
6294: ENABLE
// end ;
6295: PPOPN 7
6297: END
// export function CheckVehicles ; var pom , pom1 , pom2 ; begin
6298: LD_INT 0
6300: PPUSH
6301: PPUSH
6302: PPUSH
6303: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
6304: LD_ADDR_VAR 0 2
6308: PUSH
6309: LD_INT 22
6311: PUSH
6312: LD_EXP 1
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: LD_INT 21
6323: PUSH
6324: LD_INT 2
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: PPUSH
6335: CALL_OW 69
6339: ST_TO_ADDR
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] , [ f_alive ] ] ) ;
6340: LD_ADDR_VAR 0 3
6344: PUSH
6345: LD_INT 22
6347: PUSH
6348: LD_EXP 1
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: PUSH
6357: LD_INT 21
6359: PUSH
6360: LD_INT 1
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: PUSH
6367: LD_INT 51
6369: PUSH
6370: EMPTY
6371: LIST
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: LIST
6377: PPUSH
6378: CALL_OW 69
6382: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Ru2_base , [ [ f_side , You2 ] , [ f_type , unit_vehicle ] ] ) ;
6383: LD_ADDR_VAR 0 4
6387: PUSH
6388: LD_INT 2
6390: PPUSH
6391: LD_INT 22
6393: PUSH
6394: LD_EXP 2
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: PUSH
6403: LD_INT 21
6405: PUSH
6406: LD_INT 2
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: PPUSH
6417: CALL_OW 70
6421: ST_TO_ADDR
// pom = pom + pom2 ;
6422: LD_ADDR_VAR 0 2
6426: PUSH
6427: LD_VAR 0 2
6431: PUSH
6432: LD_VAR 0 4
6436: PLUS
6437: ST_TO_ADDR
// if pom < pom1 then
6438: LD_VAR 0 2
6442: PUSH
6443: LD_VAR 0 3
6447: LESS
6448: IFFALSE 6458
// stav_aut_new = 3 ;
6450: LD_ADDR_EXP 46
6454: PUSH
6455: LD_INT 3
6457: ST_TO_ADDR
// if pom = pom1 then
6458: LD_VAR 0 2
6462: PUSH
6463: LD_VAR 0 3
6467: EQUAL
6468: IFFALSE 6478
// stav_aut_new = 2 ;
6470: LD_ADDR_EXP 46
6474: PUSH
6475: LD_INT 2
6477: ST_TO_ADDR
// if pom > pom1 and KurinAddTime = 0 then
6478: LD_VAR 0 2
6482: PUSH
6483: LD_VAR 0 3
6487: GREATER
6488: PUSH
6489: LD_EXP 7
6493: PUSH
6494: LD_INT 0
6496: EQUAL
6497: AND
6498: IFFALSE 6508
// stav_aut_new = 1 ;
6500: LD_ADDR_EXP 46
6504: PUSH
6505: LD_INT 1
6507: ST_TO_ADDR
// if pom >= pom1 and KurinAddTime = 1 then
6508: LD_VAR 0 2
6512: PUSH
6513: LD_VAR 0 3
6517: GREATEREQUAL
6518: PUSH
6519: LD_EXP 7
6523: PUSH
6524: LD_INT 1
6526: EQUAL
6527: AND
6528: IFFALSE 6538
// stav_aut_new = 2 ;
6530: LD_ADDR_EXP 46
6534: PUSH
6535: LD_INT 2
6537: ST_TO_ADDR
// end ;
6538: LD_VAR 0 1
6542: RET
// function posli_ruske_posily ; begin
6543: LD_INT 0
6545: PPUSH
// McMove ( 1 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) , [ [ 109 , 54 ] , [ 102 , 38 ] , [ 90 , 22 ] , [ 54 , 10 ] ] , [ mc_move_dontcapture ] ) ;
6546: LD_INT 1
6548: PPUSH
6549: LD_INT 22
6551: PUSH
6552: LD_INT 6
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 21
6561: PUSH
6562: LD_INT 2
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PPUSH
6573: CALL_OW 69
6577: PPUSH
6578: LD_INT 109
6580: PUSH
6581: LD_INT 54
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: LD_INT 102
6590: PUSH
6591: LD_INT 38
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PUSH
6598: LD_INT 90
6600: PUSH
6601: LD_INT 22
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: PUSH
6608: LD_INT 54
6610: PUSH
6611: LD_INT 10
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: PPUSH
6624: LD_INT 5
6626: PUSH
6627: EMPTY
6628: LIST
6629: PPUSH
6630: CALL_OW 398
// end ;
6634: LD_VAR 0 1
6638: RET
// every 0 0$7 marked 2 do var i , k , pom ;
6639: GO 6641
6641: DISABLE
6642: LD_INT 0
6644: PPUSH
6645: PPUSH
6646: PPUSH
// begin ComExitBuilding ( RUSKE_POSILY_RIDICI_LIST ) ;
6647: LD_EXP 57
6651: PPUSH
6652: CALL_OW 122
// while FilterUnitsInArea ( RU2_base , [ [ f_side , You2 ] ] ) < RUSKE_POSILY_RIDICI_LIST do
6656: LD_INT 2
6658: PPUSH
6659: LD_INT 22
6661: PUSH
6662: LD_EXP 2
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PUSH
6671: EMPTY
6672: LIST
6673: PPUSH
6674: CALL_OW 70
6678: PUSH
6679: LD_EXP 57
6683: LESS
6684: IFFALSE 6707
// begin ComMoveToArea ( RUSKE_POSILY_RIDICI_LIST , drivers_enter ) ;
6686: LD_EXP 57
6690: PPUSH
6691: LD_INT 47
6693: PPUSH
6694: CALL_OW 113
// wait ( 0 0$1 ) ;
6698: LD_INT 35
6700: PPUSH
6701: CALL_OW 67
// end ;
6705: GO 6656
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_not , [ f_occupied ] ] ] ) ;
6707: LD_ADDR_VAR 0 3
6711: PUSH
6712: LD_INT 2
6714: PPUSH
6715: LD_INT 22
6717: PUSH
6718: LD_EXP 1
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PUSH
6727: LD_INT 21
6729: PUSH
6730: LD_INT 2
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PUSH
6737: LD_INT 3
6739: PUSH
6740: LD_INT 59
6742: PUSH
6743: EMPTY
6744: LIST
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: LIST
6754: PPUSH
6755: CALL_OW 70
6759: ST_TO_ADDR
// if not pom then
6760: LD_VAR 0 3
6764: NOT
6765: IFFALSE 6771
// konec_mise_lhani ;
6767: CALL 1440 0 0
// if pom < RUSKE_POSILY_RIDICI_LIST then
6771: LD_VAR 0 3
6775: PUSH
6776: LD_EXP 57
6780: LESS
6781: IFFALSE 6795
// k := pom else
6783: LD_ADDR_VAR 0 2
6787: PUSH
6788: LD_VAR 0 3
6792: ST_TO_ADDR
6793: GO 6805
// k := RUSKE_POSILY_RIDICI_LIST ;
6795: LD_ADDR_VAR 0 2
6799: PUSH
6800: LD_EXP 57
6804: ST_TO_ADDR
// for i = 1 to k do
6805: LD_ADDR_VAR 0 1
6809: PUSH
6810: DOUBLE
6811: LD_INT 1
6813: DEC
6814: ST_TO_ADDR
6815: LD_VAR 0 2
6819: PUSH
6820: FOR_TO
6821: IFFALSE 6872
// begin ComEnterUnit ( RUSKE_POSILY_RIDICI_LIST [ i ] , pom [ i ] ) ;
6823: LD_EXP 57
6827: PUSH
6828: LD_VAR 0 1
6832: ARRAY
6833: PPUSH
6834: LD_VAR 0 3
6838: PUSH
6839: LD_VAR 0 1
6843: ARRAY
6844: PPUSH
6845: CALL_OW 120
// AddComMoveXY ( RUSKE_POSILY_RIDICI_LIST [ i ] , 60 , 13 ) ;
6849: LD_EXP 57
6853: PUSH
6854: LD_VAR 0 1
6858: ARRAY
6859: PPUSH
6860: LD_INT 60
6862: PPUSH
6863: LD_INT 13
6865: PPUSH
6866: CALL_OW 171
// end ;
6870: GO 6820
6872: POP
6873: POP
// end ;
6874: PPOPN 3
6876: END
// every 0 0$1 marked 3 do
6877: GO 6879
6879: DISABLE
// begin if special_time then
6880: LD_EXP 48
6884: IFFALSE 6895
// wait ( 2 2$0 ) else
6886: LD_INT 4200
6888: PPUSH
6889: CALL_OW 67
6893: GO 6902
// wait ( 3 3$0 ) ;
6895: LD_INT 6300
6897: PPUSH
6898: CALL_OW 67
// if not setkani_om then
6902: LD_EXP 41
6906: NOT
6907: IFFALSE 6945
// begin dialog_upoz ;
6909: CALL 15637 0 0
// TTime = 2 2$0 ;
6913: LD_ADDR_LOC 21
6917: PUSH
6918: LD_INT 4200
6920: ST_TO_ADDR
// disable ( 51 ) ;
6921: LD_INT 51
6923: DISABLE_MARKED
// enable ( 52 ) ;
6924: LD_INT 52
6926: ENABLE_MARKED
// wait ( 2 2$0 ) ;
6927: LD_INT 4200
6929: PPUSH
6930: CALL_OW 67
// if not setkani_om then
6934: LD_EXP 41
6938: NOT
6939: IFFALSE 6945
// konec_pred_omikronem ;
6941: CALL 1459 0 0
// end ; end ;
6945: END
// every 0 0$1 marked 4 do var pom ;
6946: GO 6948
6948: DISABLE
6949: LD_INT 0
6951: PPUSH
// begin wait ( utok_na_omikron - 5 5$0 ) ;
6952: LD_EXP 19
6956: PUSH
6957: LD_INT 10500
6959: MINUS
6960: PPUSH
6961: CALL_OW 67
// pomoc_pro_omikroni_utok ;
6965: CALL 5882 0 0
// wait ( 5 5$0 ) ;
6969: LD_INT 10500
6971: PPUSH
6972: CALL_OW 67
// disable ( 5 ) ;
6976: LD_INT 5
6978: DISABLE_MARKED
// if dialog_probehnul then
6979: LD_LOC 19
6983: IFFALSE 6989
// exit else
6985: GO 7097
6987: GO 6997
// dialog_probehnul := true ;
6989: LD_ADDR_LOC 19
6993: PUSH
6994: LD_INT 1
6996: ST_TO_ADDR
// pom = dialog_otazka_poctu_aut ;
6997: LD_ADDR_VAR 0 1
7001: PUSH
7002: CALL 13098 0 0
7006: ST_TO_ADDR
// case pom of 1 :
7007: LD_VAR 0 1
7011: PUSH
7012: LD_INT 1
7014: DOUBLE
7015: EQUAL
7016: IFTRUE 7020
7018: GO 7042
7020: POP
// begin stav_omikron = 3 ;
7021: LD_ADDR_EXP 39
7025: PUSH
7026: LD_INT 3
7028: ST_TO_ADDR
// stav_aut = 1 ;
7029: LD_ADDR_EXP 38
7033: PUSH
7034: LD_INT 1
7036: ST_TO_ADDR
// enable ( 2 ) ;
7037: LD_INT 2
7039: ENABLE_MARKED
// end ; 2 :
7040: GO 7097
7042: LD_INT 2
7044: DOUBLE
7045: EQUAL
7046: IFTRUE 7050
7048: GO 7069
7050: POP
// begin stav_omikron = 3 ;
7051: LD_ADDR_EXP 39
7055: PUSH
7056: LD_INT 3
7058: ST_TO_ADDR
// stav_aut = 2 ;
7059: LD_ADDR_EXP 38
7063: PUSH
7064: LD_INT 2
7066: ST_TO_ADDR
// end ; 3 :
7067: GO 7097
7069: LD_INT 3
7071: DOUBLE
7072: EQUAL
7073: IFTRUE 7077
7075: GO 7096
7077: POP
// begin stav_omikron = 2 ;
7078: LD_ADDR_EXP 39
7082: PUSH
7083: LD_INT 2
7085: ST_TO_ADDR
// stav_aut = 3 ;
7086: LD_ADDR_EXP 38
7090: PUSH
7091: LD_INT 3
7093: ST_TO_ADDR
// end ; end ;
7094: GO 7097
7096: POP
// end ;
7097: PPOPN 1
7099: END
// every 0 0$17 trigger stav_omikron < 2 marked 5 do var un , veh ;
7100: LD_EXP 39
7104: PUSH
7105: LD_INT 2
7107: LESS
7108: IFFALSE 7340
7110: GO 7112
7112: DISABLE
7113: LD_INT 0
7115: PPUSH
7116: PPUSH
// begin un = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
7117: LD_ADDR_VAR 0 1
7121: PUSH
7122: LD_INT 22
7124: PUSH
7125: LD_EXP 1
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: LD_INT 21
7136: PUSH
7137: LD_INT 1
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PPUSH
7148: CALL_OW 69
7152: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
7153: LD_ADDR_VAR 0 2
7157: PUSH
7158: LD_INT 22
7160: PUSH
7161: LD_EXP 1
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 21
7172: PUSH
7173: LD_INT 2
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PPUSH
7184: CALL_OW 69
7188: ST_TO_ADDR
// if veh >= ( un + 2 ) then
7189: LD_VAR 0 2
7193: PUSH
7194: LD_VAR 0 1
7198: PUSH
7199: LD_INT 2
7201: PLUS
7202: GREATEREQUAL
7203: IFFALSE 7339
// begin disable ( 4 ) ;
7205: LD_INT 4
7207: DISABLE_MARKED
// pomoc_pro_omikroni_utok ;
7208: CALL 5882 0 0
// if dialog_probehnul then
7212: LD_LOC 19
7216: IFFALSE 7222
// exit else
7218: GO 7340
7220: GO 7230
// dialog_probehnul = true ;
7222: LD_ADDR_LOC 19
7226: PUSH
7227: LD_INT 1
7229: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7230: LD_INT 350
7232: PPUSH
7233: CALL_OW 67
// un = dialog_otazka_poctu_aut ;
7237: LD_ADDR_VAR 0 1
7241: PUSH
7242: CALL 13098 0 0
7246: ST_TO_ADDR
// case un of 1 :
7247: LD_VAR 0 1
7251: PUSH
7252: LD_INT 1
7254: DOUBLE
7255: EQUAL
7256: IFTRUE 7260
7258: GO 7282
7260: POP
// begin stav_omikron = 3 ;
7261: LD_ADDR_EXP 39
7265: PUSH
7266: LD_INT 3
7268: ST_TO_ADDR
// stav_aut = 1 ;
7269: LD_ADDR_EXP 38
7273: PUSH
7274: LD_INT 1
7276: ST_TO_ADDR
// enable ( 2 ) ;
7277: LD_INT 2
7279: ENABLE_MARKED
// end ; 2 :
7280: GO 7337
7282: LD_INT 2
7284: DOUBLE
7285: EQUAL
7286: IFTRUE 7290
7288: GO 7309
7290: POP
// begin stav_omikron = 3 ;
7291: LD_ADDR_EXP 39
7295: PUSH
7296: LD_INT 3
7298: ST_TO_ADDR
// stav_aut = 2 ;
7299: LD_ADDR_EXP 38
7303: PUSH
7304: LD_INT 2
7306: ST_TO_ADDR
// end ; 3 :
7307: GO 7337
7309: LD_INT 3
7311: DOUBLE
7312: EQUAL
7313: IFTRUE 7317
7315: GO 7336
7317: POP
// begin stav_omikron = 2 ;
7318: LD_ADDR_EXP 39
7322: PUSH
7323: LD_INT 2
7325: ST_TO_ADDR
// stav_aut = 3 ;
7326: LD_ADDR_EXP 38
7330: PUSH
7331: LD_INT 3
7333: ST_TO_ADDR
// end ; end ;
7334: GO 7337
7336: POP
// end else
7337: GO 7340
// enable ;
7339: ENABLE
// end ;
7340: PPOPN 2
7342: END
// export function manage_ruske_computery_zpet ; var pom ; begin
7343: LD_INT 0
7345: PPUSH
7346: PPUSH
// disable ( 200 ) ;
7347: LD_INT 200
7349: DISABLE_MARKED
// disable ( 201 ) ;
7350: LD_INT 201
7352: DISABLE_MARKED
// disable ( 202 ) ;
7353: LD_INT 202
7355: DISABLE_MARKED
// disable ( 203 ) ;
7356: LD_INT 203
7358: DISABLE_MARKED
// pom = FilterUnitsInArea ( Am_base , [ [ F_side , You2 ] ] ) ;
7359: LD_ADDR_VAR 0 2
7363: PUSH
7364: LD_INT 6
7366: PPUSH
7367: LD_INT 22
7369: PUSH
7370: LD_EXP 2
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PUSH
7379: EMPTY
7380: LIST
7381: PPUSH
7382: CALL_OW 70
7386: ST_TO_ADDR
// McMove ( 2 , pom , [ [ 42 , 14 ] , [ 60 , 15 ] , [ 95 , 21 ] , [ 100 , 34 ] ] , [ mc_move_agressive , mc_move_wait , mc_move_waitwp ] ) ;
7387: LD_INT 2
7389: PPUSH
7390: LD_VAR 0 2
7394: PPUSH
7395: LD_INT 42
7397: PUSH
7398: LD_INT 14
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PUSH
7405: LD_INT 60
7407: PUSH
7408: LD_INT 15
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PUSH
7415: LD_INT 95
7417: PUSH
7418: LD_INT 21
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PUSH
7425: LD_INT 100
7427: PUSH
7428: LD_INT 34
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: PPUSH
7441: LD_INT 6
7443: PUSH
7444: LD_INT 1
7446: PUSH
7447: LD_INT 3
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: LIST
7454: PPUSH
7455: CALL_OW 398
// enable ( 5 ) ;
7459: LD_INT 5
7461: ENABLE_MARKED
// R_comp = pom ;
7462: LD_ADDR_LOC 18
7466: PUSH
7467: LD_VAR 0 2
7471: ST_TO_ADDR
// end ;
7472: LD_VAR 0 1
7476: RET
// every 0 0$15 marked 5 do
7477: GO 7479
7479: DISABLE
// begin wait ( 1 1$0 ) ;
7480: LD_INT 2100
7482: PPUSH
7483: CALL_OW 67
// McMove ( 1 , R_comp , [ [ 110 , 59 ] , [ 129 , 75 ] ] , [ mc_move_agressive , mc_move_wait , mc_move_waitwp ] ) ;
7487: LD_INT 1
7489: PPUSH
7490: LD_LOC 18
7494: PPUSH
7495: LD_INT 110
7497: PUSH
7498: LD_INT 59
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PUSH
7505: LD_INT 129
7507: PUSH
7508: LD_INT 75
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: PPUSH
7519: LD_INT 6
7521: PUSH
7522: LD_INT 1
7524: PUSH
7525: LD_INT 3
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: LIST
7532: PPUSH
7533: CALL_OW 398
// end ;
7537: END
// function split_ruske_jednotky ( jedn ) ; var i , pom ; var p1 , p2 , p3 , p4 ; var a ; begin
7538: LD_INT 0
7540: PPUSH
7541: PPUSH
7542: PPUSH
7543: PPUSH
7544: PPUSH
7545: PPUSH
7546: PPUSH
7547: PPUSH
// p1 = [ ] ;
7548: LD_ADDR_VAR 0 5
7552: PUSH
7553: EMPTY
7554: ST_TO_ADDR
// p2 = [ ] ;
7555: LD_ADDR_VAR 0 6
7559: PUSH
7560: EMPTY
7561: ST_TO_ADDR
// p3 = [ ] ;
7562: LD_ADDR_VAR 0 7
7566: PUSH
7567: EMPTY
7568: ST_TO_ADDR
// p4 = [ ] ;
7569: LD_ADDR_VAR 0 8
7573: PUSH
7574: EMPTY
7575: ST_TO_ADDR
// for i in jedn do
7576: LD_ADDR_VAR 0 3
7580: PUSH
7581: LD_VAR 0 1
7585: PUSH
7586: FOR_IN
7587: IFFALSE 7721
// begin pom = Rand ( 1 , 4 ) ;
7589: LD_ADDR_VAR 0 4
7593: PUSH
7594: LD_INT 1
7596: PPUSH
7597: LD_INT 4
7599: PPUSH
7600: CALL_OW 12
7604: ST_TO_ADDR
// case pom of 1 :
7605: LD_VAR 0 4
7609: PUSH
7610: LD_INT 1
7612: DOUBLE
7613: EQUAL
7614: IFTRUE 7618
7616: GO 7637
7618: POP
// p1 = p1 ^ i ; 2 :
7619: LD_ADDR_VAR 0 5
7623: PUSH
7624: LD_VAR 0 5
7628: PUSH
7629: LD_VAR 0 3
7633: ADD
7634: ST_TO_ADDR
7635: GO 7719
7637: LD_INT 2
7639: DOUBLE
7640: EQUAL
7641: IFTRUE 7645
7643: GO 7664
7645: POP
// p2 = p2 ^ i ; 3 :
7646: LD_ADDR_VAR 0 6
7650: PUSH
7651: LD_VAR 0 6
7655: PUSH
7656: LD_VAR 0 3
7660: ADD
7661: ST_TO_ADDR
7662: GO 7719
7664: LD_INT 3
7666: DOUBLE
7667: EQUAL
7668: IFTRUE 7672
7670: GO 7691
7672: POP
// p3 = p3 ^ i ; 4 :
7673: LD_ADDR_VAR 0 7
7677: PUSH
7678: LD_VAR 0 7
7682: PUSH
7683: LD_VAR 0 3
7687: ADD
7688: ST_TO_ADDR
7689: GO 7719
7691: LD_INT 4
7693: DOUBLE
7694: EQUAL
7695: IFTRUE 7699
7697: GO 7718
7699: POP
// p4 = p4 ^ i ; end ;
7700: LD_ADDR_VAR 0 8
7704: PUSH
7705: LD_VAR 0 8
7709: PUSH
7710: LD_VAR 0 3
7714: ADD
7715: ST_TO_ADDR
7716: GO 7719
7718: POP
// end ;
7719: GO 7586
7721: POP
7722: POP
// a = [ p1 , p2 , p3 , p4 ] ;
7723: LD_ADDR_VAR 0 9
7727: PUSH
7728: LD_VAR 0 5
7732: PUSH
7733: LD_VAR 0 6
7737: PUSH
7738: LD_VAR 0 7
7742: PUSH
7743: LD_VAR 0 8
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: ST_TO_ADDR
// result := a ;
7754: LD_ADDR_VAR 0 2
7758: PUSH
7759: LD_VAR 0 9
7763: ST_TO_ADDR
// end ;
7764: LD_VAR 0 2
7768: RET
// every 0 0$1 marked 6 do var pom , i ;
7769: GO 7771
7771: DISABLE
7772: LD_INT 0
7774: PPUSH
7775: PPUSH
// begin pom = FilterUnitsInArea ( RU_odber , [ [ f_side , You2 ] ] ) ;
7776: LD_ADDR_VAR 0 1
7780: PUSH
7781: LD_INT 27
7783: PPUSH
7784: LD_INT 22
7786: PUSH
7787: LD_EXP 2
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: PPUSH
7799: CALL_OW 70
7803: ST_TO_ADDR
// if pom > 0 then
7804: LD_VAR 0 1
7808: PUSH
7809: LD_INT 0
7811: GREATER
7812: IFFALSE 7856
// begin Rusi_utekli = Rusi_utekli ^ pom ;
7814: LD_ADDR_EXP 42
7818: PUSH
7819: LD_EXP 42
7823: PUSH
7824: LD_VAR 0 1
7828: ADD
7829: ST_TO_ADDR
// for i in pom do
7830: LD_ADDR_VAR 0 2
7834: PUSH
7835: LD_VAR 0 1
7839: PUSH
7840: FOR_IN
7841: IFFALSE 7854
// RemoveUnit ( i ) ;
7843: LD_VAR 0 2
7847: PPUSH
7848: CALL_OW 64
7852: GO 7840
7854: POP
7855: POP
// end ; enable ;
7856: ENABLE
// end ;
7857: PPOPN 2
7859: END
// every 25 25$0 do var i , pom ;
7860: GO 7862
7862: DISABLE
7863: LD_INT 0
7865: PPUSH
7866: PPUSH
// begin for i in RU_posily_na_utek do
7867: LD_ADDR_VAR 0 1
7871: PUSH
7872: LD_EXP 58
7876: PUSH
7877: FOR_IN
7878: IFFALSE 7897
// PlaceUnitArea ( i , Ru_posily , false ) ;
7880: LD_VAR 0 1
7884: PPUSH
7885: LD_INT 28
7887: PPUSH
7888: LD_INT 0
7890: PPUSH
7891: CALL_OW 49
7895: GO 7877
7897: POP
7898: POP
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_type , unit_vehicle ] ] ) ;
7899: LD_ADDR_VAR 0 2
7903: PUSH
7904: LD_EXP 58
7908: PPUSH
7909: LD_INT 21
7911: PUSH
7912: LD_INT 2
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: EMPTY
7920: LIST
7921: PPUSH
7922: CALL_OW 72
7926: ST_TO_ADDR
// ComMoveXY ( pom , 155 , 93 ) ;
7927: LD_VAR 0 2
7931: PPUSH
7932: LD_INT 155
7934: PPUSH
7935: LD_INT 93
7937: PPUSH
7938: CALL_OW 111
// Rusi_save = pom ;
7942: LD_ADDR_EXP 43
7946: PUSH
7947: LD_VAR 0 2
7951: ST_TO_ADDR
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_class , class_soldier ] ] ) ;
7952: LD_ADDR_VAR 0 2
7956: PUSH
7957: LD_EXP 58
7961: PPUSH
7962: LD_INT 25
7964: PUSH
7965: LD_INT 1
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: PUSH
7972: EMPTY
7973: LIST
7974: PPUSH
7975: CALL_OW 72
7979: ST_TO_ADDR
// ComEnterUnit ( pom , RU1_bar2 ) ;
7980: LD_VAR 0 2
7984: PPUSH
7985: LD_INT 17
7987: PPUSH
7988: CALL_OW 120
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_class , class_mechanic ] ] ) ;
7992: LD_ADDR_VAR 0 2
7996: PUSH
7997: LD_EXP 58
8001: PPUSH
8002: LD_INT 25
8004: PUSH
8005: LD_INT 3
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: PUSH
8012: EMPTY
8013: LIST
8014: PPUSH
8015: CALL_OW 72
8019: ST_TO_ADDR
// ComEnterUnit ( pom , RU1_fac ) ;
8020: LD_VAR 0 2
8024: PPUSH
8025: LD_INT 5
8027: PPUSH
8028: CALL_OW 120
// pom = UnitFilter ( RU_posily_na_utek , [ [ f_class , class_engineer ] ] ) ;
8032: LD_ADDR_VAR 0 2
8036: PUSH
8037: LD_EXP 58
8041: PPUSH
8042: LD_INT 25
8044: PUSH
8045: LD_INT 2
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: PUSH
8052: EMPTY
8053: LIST
8054: PPUSH
8055: CALL_OW 72
8059: ST_TO_ADDR
// ComEnterUnit ( pom , RU1_dep ) ;
8060: LD_VAR 0 2
8064: PPUSH
8065: LD_INT 1
8067: PPUSH
8068: CALL_OW 120
// Rusi_save = Rusi_save ^ [ RU1_sol1 , RU1_me3 , Ru1_sci2 , RU1_sci5 , RU1_sci3 , RU1_sol5 , RU1_eng1 ] ;
8072: LD_ADDR_EXP 43
8076: PUSH
8077: LD_EXP 43
8081: PUSH
8082: LD_INT 52
8084: PUSH
8085: LD_INT 51
8087: PUSH
8088: LD_INT 45
8090: PUSH
8091: LD_INT 48
8093: PUSH
8094: LD_INT 46
8096: PUSH
8097: LD_INT 55
8099: PUSH
8100: LD_INT 57
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: ADD
8112: ST_TO_ADDR
// end ;
8113: PPOPN 2
8115: END
// export function posli_rusy_pryc ; var pom ; begin
8116: LD_INT 0
8118: PPUSH
8119: PPUSH
// SetLives ( Rusi_save , 800 ) ;
8120: LD_EXP 43
8124: PPUSH
8125: LD_INT 800
8127: PPUSH
8128: CALL_OW 234
// pom = split_ruske_jednotky ( Rusi_save ) ;
8132: LD_ADDR_VAR 0 2
8136: PUSH
8137: LD_EXP 43
8141: PPUSH
8142: CALL 7538 0 1
8146: ST_TO_ADDR
// ComExitBuilding ( Rusi_save ) ;
8147: LD_EXP 43
8151: PPUSH
8152: CALL_OW 122
// AddComMoveXY ( pom [ 1 ] , 110 , 45 ) ;
8156: LD_VAR 0 2
8160: PUSH
8161: LD_INT 1
8163: ARRAY
8164: PPUSH
8165: LD_INT 110
8167: PPUSH
8168: LD_INT 45
8170: PPUSH
8171: CALL_OW 171
// AddComMoveXY ( pom [ 2 ] , 103 , 60 ) ;
8175: LD_VAR 0 2
8179: PUSH
8180: LD_INT 2
8182: ARRAY
8183: PPUSH
8184: LD_INT 103
8186: PPUSH
8187: LD_INT 60
8189: PPUSH
8190: CALL_OW 171
// AddComMoveXY ( pom [ 3 ] , 76 , 80 ) ;
8194: LD_VAR 0 2
8198: PUSH
8199: LD_INT 3
8201: ARRAY
8202: PPUSH
8203: LD_INT 76
8205: PPUSH
8206: LD_INT 80
8208: PPUSH
8209: CALL_OW 171
// AddComMoveXY ( pom [ 4 ] , 53 , 1 ) ;
8213: LD_VAR 0 2
8217: PUSH
8218: LD_INT 4
8220: ARRAY
8221: PPUSH
8222: LD_INT 53
8224: PPUSH
8225: LD_INT 1
8227: PPUSH
8228: CALL_OW 171
// end ;
8232: LD_VAR 0 1
8236: RET
// export function posli_lidi_zpet_omicron ; var pom ; var pom1 , i ; begin
8237: LD_INT 0
8239: PPUSH
8240: PPUSH
8241: PPUSH
8242: PPUSH
// pom1 = [ ] ;
8243: LD_ADDR_VAR 0 3
8247: PUSH
8248: EMPTY
8249: ST_TO_ADDR
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_building ] , [ f_side , You ] ] ) ;
8250: LD_ADDR_VAR 0 2
8254: PUSH
8255: LD_INT 20
8257: PPUSH
8258: LD_INT 21
8260: PUSH
8261: LD_INT 3
8263: PUSH
8264: EMPTY
8265: LIST
8266: LIST
8267: PUSH
8268: LD_INT 22
8270: PUSH
8271: LD_EXP 1
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: PPUSH
8284: CALL_OW 70
8288: ST_TO_ADDR
// for i in pom do
8289: LD_ADDR_VAR 0 4
8293: PUSH
8294: LD_VAR 0 2
8298: PUSH
8299: FOR_IN
8300: IFFALSE 8325
// pom1 = pom1 ^ UnitsInside ( i ) ;
8302: LD_ADDR_VAR 0 3
8306: PUSH
8307: LD_VAR 0 3
8311: PUSH
8312: LD_VAR 0 4
8316: PPUSH
8317: CALL_OW 313
8321: ADD
8322: ST_TO_ADDR
8323: GO 8299
8325: POP
8326: POP
// ComExitBuilding ( pom1 ) ;
8327: LD_VAR 0 3
8331: PPUSH
8332: CALL_OW 122
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_human ] , [ f_side , You ] ] ) ;
8336: LD_ADDR_VAR 0 2
8340: PUSH
8341: LD_INT 20
8343: PPUSH
8344: LD_INT 21
8346: PUSH
8347: LD_INT 1
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: PUSH
8354: LD_INT 22
8356: PUSH
8357: LD_EXP 1
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: PPUSH
8370: CALL_OW 70
8374: ST_TO_ADDR
// pom1 = pom1 ^ pom ;
8375: LD_ADDR_VAR 0 3
8379: PUSH
8380: LD_VAR 0 3
8384: PUSH
8385: LD_VAR 0 2
8389: ADD
8390: ST_TO_ADDR
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_vehicle ] , [ f_side , You ] ] ) ;
8391: LD_ADDR_VAR 0 2
8395: PUSH
8396: LD_INT 20
8398: PPUSH
8399: LD_INT 21
8401: PUSH
8402: LD_INT 2
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PUSH
8409: LD_INT 22
8411: PUSH
8412: LD_EXP 1
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: PPUSH
8425: CALL_OW 70
8429: ST_TO_ADDR
// for i in pom do
8430: LD_ADDR_VAR 0 4
8434: PUSH
8435: LD_VAR 0 2
8439: PUSH
8440: FOR_IN
8441: IFFALSE 8493
// begin pom1 = pom ^ i ;
8443: LD_ADDR_VAR 0 3
8447: PUSH
8448: LD_VAR 0 2
8452: PUSH
8453: LD_VAR 0 4
8457: ADD
8458: ST_TO_ADDR
// if IsDrivenBy ( i ) then
8459: LD_VAR 0 4
8463: PPUSH
8464: CALL_OW 311
8468: IFFALSE 8491
// pom1 = pom1 ^ IsDrivenBy ( i ) ;
8470: LD_ADDR_VAR 0 3
8474: PUSH
8475: LD_VAR 0 3
8479: PUSH
8480: LD_VAR 0 4
8484: PPUSH
8485: CALL_OW 311
8489: ADD
8490: ST_TO_ADDR
// end ;
8491: GO 8440
8493: POP
8494: POP
// SetSide ( pom1 , You3 ) ;
8495: LD_VAR 0 3
8499: PPUSH
8500: LD_EXP 3
8504: PPUSH
8505: CALL_OW 235
// pom = FilterUnitsInArea ( Om_ven_1 , [ [ f_side , You3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8509: LD_ADDR_VAR 0 2
8513: PUSH
8514: LD_INT 29
8516: PPUSH
8517: LD_INT 22
8519: PUSH
8520: LD_EXP 3
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: PUSH
8529: LD_INT 2
8531: PUSH
8532: LD_INT 21
8534: PUSH
8535: LD_INT 2
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: LD_INT 21
8544: PUSH
8545: LD_INT 1
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: LIST
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PPUSH
8561: CALL_OW 70
8565: ST_TO_ADDR
// ComMoveXY ( pom , 79 , 16 ) ;
8566: LD_VAR 0 2
8570: PPUSH
8571: LD_INT 79
8573: PPUSH
8574: LD_INT 16
8576: PPUSH
8577: CALL_OW 111
// pom = FilterUnitsInArea ( Om_ven_2 , [ [ f_side , You3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8581: LD_ADDR_VAR 0 2
8585: PUSH
8586: LD_INT 30
8588: PPUSH
8589: LD_INT 22
8591: PUSH
8592: LD_EXP 3
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: LD_INT 2
8603: PUSH
8604: LD_INT 21
8606: PUSH
8607: LD_INT 2
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: LD_INT 21
8616: PUSH
8617: LD_INT 1
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: PUSH
8629: EMPTY
8630: LIST
8631: LIST
8632: PPUSH
8633: CALL_OW 70
8637: ST_TO_ADDR
// ComMoveXY ( pom , 67 , 40 ) ;
8638: LD_VAR 0 2
8642: PPUSH
8643: LD_INT 67
8645: PPUSH
8646: LD_INT 40
8648: PPUSH
8649: CALL_OW 111
// pom = FilterUnitsInArea ( Om_ven_3 , [ [ f_side , You3 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8653: LD_ADDR_VAR 0 2
8657: PUSH
8658: LD_INT 31
8660: PPUSH
8661: LD_INT 22
8663: PUSH
8664: LD_EXP 3
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: LD_INT 2
8675: PUSH
8676: LD_INT 21
8678: PUSH
8679: LD_INT 2
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: LD_INT 21
8688: PUSH
8689: LD_INT 1
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: LIST
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: PPUSH
8705: CALL_OW 70
8709: ST_TO_ADDR
// ComMoveXY ( pom , 58 , 52 ) ;
8710: LD_VAR 0 2
8714: PPUSH
8715: LD_INT 58
8717: PPUSH
8718: LD_INT 52
8720: PPUSH
8721: CALL_OW 111
// end ;
8725: LD_VAR 0 1
8729: RET
// export function get_lidi_popov_area ; var pom , i ; var drv ; var a ; begin
8730: LD_INT 0
8732: PPUSH
8733: PPUSH
8734: PPUSH
8735: PPUSH
8736: PPUSH
// a = [ ] ;
8737: LD_ADDR_VAR 0 5
8741: PUSH
8742: EMPTY
8743: ST_TO_ADDR
// pom = FilterUnitsInArea ( Pop_area , [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
8744: LD_ADDR_VAR 0 2
8748: PUSH
8749: LD_INT 15
8751: PPUSH
8752: LD_INT 22
8754: PUSH
8755: LD_EXP 1
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PUSH
8764: LD_INT 21
8766: PUSH
8767: LD_INT 1
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: PPUSH
8778: CALL_OW 70
8782: ST_TO_ADDR
// a = pom ;
8783: LD_ADDR_VAR 0 5
8787: PUSH
8788: LD_VAR 0 2
8792: ST_TO_ADDR
// pom = FilterUnitsInArea ( Pop_area , [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
8793: LD_ADDR_VAR 0 2
8797: PUSH
8798: LD_INT 15
8800: PPUSH
8801: LD_INT 22
8803: PUSH
8804: LD_EXP 1
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PUSH
8813: LD_INT 21
8815: PUSH
8816: LD_INT 2
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: PPUSH
8827: CALL_OW 70
8831: ST_TO_ADDR
// for i in pom do
8832: LD_ADDR_VAR 0 3
8836: PUSH
8837: LD_VAR 0 2
8841: PUSH
8842: FOR_IN
8843: IFFALSE 8901
// begin drv = IsDrivenBy ( i ) ;
8845: LD_ADDR_VAR 0 4
8849: PUSH
8850: LD_VAR 0 3
8854: PPUSH
8855: CALL_OW 311
8859: ST_TO_ADDR
// if ( not ( drv in a ) ) and ( drv <> 0 ) then
8860: LD_VAR 0 4
8864: PUSH
8865: LD_VAR 0 5
8869: IN
8870: NOT
8871: PUSH
8872: LD_VAR 0 4
8876: PUSH
8877: LD_INT 0
8879: NONEQUAL
8880: AND
8881: IFFALSE 8899
// a = a ^ drv ;
8883: LD_ADDR_VAR 0 5
8887: PUSH
8888: LD_VAR 0 5
8892: PUSH
8893: LD_VAR 0 4
8897: ADD
8898: ST_TO_ADDR
// end ;
8899: GO 8842
8901: POP
8902: POP
// result := a ;
8903: LD_ADDR_VAR 0 1
8907: PUSH
8908: LD_VAR 0 5
8912: ST_TO_ADDR
// end ;
8913: LD_VAR 0 1
8917: RET
// export function totalni_ukonceni_mise_v_ingame_videu ; var pom ; begin
8918: LD_INT 0
8920: PPUSH
8921: PPUSH
// InGameOn ;
8922: CALL_OW 8
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
8926: LD_ADDR_VAR 0 2
8930: PUSH
8931: LD_INT 22
8933: PUSH
8934: LD_EXP 1
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 2
8945: PUSH
8946: LD_INT 21
8948: PUSH
8949: LD_INT 2
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PUSH
8956: LD_INT 21
8958: PUSH
8959: LD_INT 1
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: LIST
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: PPUSH
8975: CALL_OW 69
8979: ST_TO_ADDR
// McMove ( 10 , pom , [ [ 108 , 70 ] , [ 77 , 65 ] , [ 53 , 63 ] , [ 40 , 64 ] , [ 51 , 97 ] ] , [ mc_no_stop , mc_move_dontcapture ] ) ;
8980: LD_INT 10
8982: PPUSH
8983: LD_VAR 0 2
8987: PPUSH
8988: LD_INT 108
8990: PUSH
8991: LD_INT 70
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: LD_INT 77
9000: PUSH
9001: LD_INT 65
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: PUSH
9008: LD_INT 53
9010: PUSH
9011: LD_INT 63
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: PUSH
9018: LD_INT 40
9020: PUSH
9021: LD_INT 64
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PUSH
9028: LD_INT 51
9030: PUSH
9031: LD_INT 97
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: PPUSH
9045: LD_INT 10
9047: PUSH
9048: LD_INT 5
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: PPUSH
9055: CALL_OW 398
// pom = FilterAllUnits ( [ [ f_side , You2 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
9059: LD_ADDR_VAR 0 2
9063: PUSH
9064: LD_INT 22
9066: PUSH
9067: LD_EXP 2
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: PUSH
9076: LD_INT 2
9078: PUSH
9079: LD_INT 21
9081: PUSH
9082: LD_INT 2
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PUSH
9089: LD_INT 21
9091: PUSH
9092: LD_INT 1
9094: PUSH
9095: EMPTY
9096: LIST
9097: LIST
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: PPUSH
9108: CALL_OW 69
9112: ST_TO_ADDR
// McMove ( 10 , pom , [ [ 108 , 70 ] , [ 77 , 65 ] , [ 53 , 63 ] , [ 40 , 64 ] , [ 51 , 97 ] ] , [ mc_no_stop , mc_move_dontcapture ] ) ;
9113: LD_INT 10
9115: PPUSH
9116: LD_VAR 0 2
9120: PPUSH
9121: LD_INT 108
9123: PUSH
9124: LD_INT 70
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: PUSH
9131: LD_INT 77
9133: PUSH
9134: LD_INT 65
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: PUSH
9141: LD_INT 53
9143: PUSH
9144: LD_INT 63
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: PUSH
9151: LD_INT 40
9153: PUSH
9154: LD_INT 64
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: PUSH
9161: LD_INT 51
9163: PUSH
9164: LD_INT 97
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: PPUSH
9178: LD_INT 10
9180: PUSH
9181: LD_INT 5
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PPUSH
9188: CALL_OW 398
// enable ( 7 ) ;
9192: LD_INT 7
9194: ENABLE_MARKED
// wait ( 0 0$10 ) ;
9195: LD_INT 350
9197: PPUSH
9198: CALL_OW 67
// InGameOff ;
9202: CALL_OW 9
// konec_mise ;
9206: CALL 1489 0 0
// end ;
9210: LD_VAR 0 1
9214: RET
// export function schovej_kurina ; begin
9215: LD_INT 0
9217: PPUSH
// ComEnterUnit ( kur , RU1_dep ) ;
9218: LD_EXP 27
9222: PPUSH
9223: LD_INT 1
9225: PPUSH
9226: CALL_OW 120
// end ;
9230: LD_VAR 0 1
9234: RET
// export function posli_kurina_na_smrt ; begin
9235: LD_INT 0
9237: PPUSH
// ComExitBuilding ( kur ) ;
9238: LD_EXP 27
9242: PPUSH
9243: CALL_OW 122
// end ;
9247: LD_VAR 0 1
9251: RET
// every 0 0$2 do var pom ; var i ;
9252: GO 9254
9254: DISABLE
9255: LD_INT 0
9257: PPUSH
9258: PPUSH
// begin pom = FilterUnitsExceptArea ( Om_ven , [ [ f_side , You3 ] ] ) ;
9259: LD_ADDR_VAR 0 1
9263: PUSH
9264: LD_INT 20
9266: PPUSH
9267: LD_INT 22
9269: PUSH
9270: LD_EXP 3
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: EMPTY
9280: LIST
9281: PPUSH
9282: CALL_OW 71
9286: ST_TO_ADDR
// for i in pom do
9287: LD_ADDR_VAR 0 2
9291: PUSH
9292: LD_VAR 0 1
9296: PUSH
9297: FOR_IN
9298: IFFALSE 9361
// begin if GetType ( i ) = unit_vehicle then
9300: LD_VAR 0 2
9304: PPUSH
9305: CALL_OW 247
9309: PUSH
9310: LD_INT 2
9312: EQUAL
9313: IFFALSE 9345
// if IsDrivenBy ( i ) then
9315: LD_VAR 0 2
9319: PPUSH
9320: CALL_OW 311
9324: IFFALSE 9345
// SetSide ( IsDrivenBy ( i ) , You ) ;
9326: LD_VAR 0 2
9330: PPUSH
9331: CALL_OW 311
9335: PPUSH
9336: LD_EXP 1
9340: PPUSH
9341: CALL_OW 235
// SetSide ( i , You ) ;
9345: LD_VAR 0 2
9349: PPUSH
9350: LD_EXP 1
9354: PPUSH
9355: CALL_OW 235
// end ;
9359: GO 9297
9361: POP
9362: POP
// enable ;
9363: ENABLE
// end ;
9364: PPOPN 2
9366: END
// every 0 0$1 marked 9 do var i ; var ridici ; var mcm ;
9367: GO 9369
9369: DISABLE
9370: LD_INT 0
9372: PPUSH
9373: PPUSH
9374: PPUSH
// begin if FilterUnitsInArea ( cargoSpawnSave , [ f_side , 1 ] ) then
9375: LD_INT 56
9377: PPUSH
9378: LD_INT 22
9380: PUSH
9381: LD_INT 1
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: PPUSH
9388: CALL_OW 70
9392: IFFALSE 9433
// for i in FilterUnitsInArea ( cargoSpawnSave , [ f_side , 1 ] ) do
9394: LD_ADDR_VAR 0 1
9398: PUSH
9399: LD_INT 56
9401: PPUSH
9402: LD_INT 22
9404: PUSH
9405: LD_INT 1
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PPUSH
9412: CALL_OW 70
9416: PUSH
9417: FOR_IN
9418: IFFALSE 9431
// RemoveUnit ( i ) ;
9420: LD_VAR 0 1
9424: PPUSH
9425: CALL_OW 64
9429: GO 9417
9431: POP
9432: POP
// ridici = [ ] ;
9433: LD_ADDR_VAR 0 2
9437: PUSH
9438: EMPTY
9439: ST_TO_ADDR
// for i in RUSI_CERPACI_AUTA_LIST do
9440: LD_ADDR_VAR 0 1
9444: PUSH
9445: LD_EXP 59
9449: PUSH
9450: FOR_IN
9451: IFFALSE 9491
// begin PlaceUnitArea ( i , cargoSpawn , false ) ;
9453: LD_VAR 0 1
9457: PPUSH
9458: LD_INT 55
9460: PPUSH
9461: LD_INT 0
9463: PPUSH
9464: CALL_OW 49
// ridici = ridici ^ IsDrivenBy ( i ) ;
9468: LD_ADDR_VAR 0 2
9472: PUSH
9473: LD_VAR 0 2
9477: PUSH
9478: LD_VAR 0 1
9482: PPUSH
9483: CALL_OW 311
9487: ADD
9488: ST_TO_ADDR
// end ;
9489: GO 9450
9491: POP
9492: POP
// mcm = McMove ( 10 , RUSI_CERPACI_AUTA_LIST , [ [ 130 , 75 ] , [ 112 , 59 ] , [ 106 , 32 ] , [ 91 , 21 ] , [ 62 , 9 ] ] , [ mc_move_waitwp ] ) ;
9493: LD_ADDR_VAR 0 3
9497: PUSH
9498: LD_INT 10
9500: PPUSH
9501: LD_EXP 59
9505: PPUSH
9506: LD_INT 130
9508: PUSH
9509: LD_INT 75
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: PUSH
9516: LD_INT 112
9518: PUSH
9519: LD_INT 59
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: LD_INT 106
9528: PUSH
9529: LD_INT 32
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: PUSH
9536: LD_INT 91
9538: PUSH
9539: LD_INT 21
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 62
9548: PUSH
9549: LD_INT 9
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: PPUSH
9563: LD_INT 3
9565: PUSH
9566: EMPTY
9567: LIST
9568: PPUSH
9569: CALL_OW 398
9573: ST_TO_ADDR
// while UnitFilter ( RUSI_CERPACI_AUTA_LIST , [ [ f_inarea , benzina ] ] ) <> RUSI_CERPACI_AUTA_LIST do
9574: LD_EXP 59
9578: PPUSH
9579: LD_INT 95
9581: PUSH
9582: LD_INT 48
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PUSH
9589: EMPTY
9590: LIST
9591: PPUSH
9592: CALL_OW 72
9596: PUSH
9597: LD_EXP 59
9601: NONEQUAL
9602: IFFALSE 9637
// begin KillMc ( mcm ) ;
9604: LD_VAR 0 3
9608: PPUSH
9609: CALL_OW 387
// wait ( 0 0$2 ) ;
9613: LD_INT 70
9615: PPUSH
9616: CALL_OW 67
// ComMoveXY ( RUSI_CERPACI_AUTA_LIST , 62 , 9 ) ;
9620: LD_EXP 59
9624: PPUSH
9625: LD_INT 62
9627: PPUSH
9628: LD_INT 9
9630: PPUSH
9631: CALL_OW 111
// end ;
9635: GO 9574
// hint_cerpaci_auta ;
9637: CALL 16822 0 0
// ComExitVehicle ( ridici ) ;
9641: LD_VAR 0 2
9645: PPUSH
9646: CALL_OW 121
// AddComAgressiveMove ( ridici , 45 , 6 ) ;
9650: LD_VAR 0 2
9654: PPUSH
9655: LD_INT 45
9657: PPUSH
9658: LD_INT 6
9660: PPUSH
9661: CALL_OW 174
// AddComAgressiveMove ( ridici , 15 , 10 ) ;
9665: LD_VAR 0 2
9669: PPUSH
9670: LD_INT 15
9672: PPUSH
9673: LD_INT 10
9675: PPUSH
9676: CALL_OW 174
// AddComAttackUnit ( ridici , Am_dep ) ;
9680: LD_VAR 0 2
9684: PPUSH
9685: LD_INT 12
9687: PPUSH
9688: CALL_OW 175
// end ;
9692: PPOPN 3
9694: END
// every 0 0$2 do var pom , i ; var ridic ;
9695: GO 9697
9697: DISABLE
9698: LD_INT 0
9700: PPUSH
9701: PPUSH
9702: PPUSH
// begin pom = FilterUnitsInArea ( Cauta , [ [ f_side , You2 ] , [ f_weapon , ru_cargo_bay ] ] ) ;
9703: LD_ADDR_VAR 0 1
9707: PUSH
9708: LD_INT 39
9710: PPUSH
9711: LD_INT 22
9713: PUSH
9714: LD_EXP 2
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 34
9725: PUSH
9726: LD_INT 51
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: PPUSH
9737: CALL_OW 70
9741: ST_TO_ADDR
// if pom > 0 then
9742: LD_VAR 0 1
9746: PUSH
9747: LD_INT 0
9749: GREATER
9750: IFFALSE 9771
// begin if not qrefuel_over then
9752: LD_LOC 20
9756: NOT
9757: IFFALSE 9771
// begin qrefuel_over = true ;
9759: LD_ADDR_LOC 20
9763: PUSH
9764: LD_INT 1
9766: ST_TO_ADDR
// query_refuel ;
9767: CALL 16740 0 0
// end ; end ; for i in pom do
9771: LD_ADDR_VAR 0 2
9775: PUSH
9776: LD_VAR 0 1
9780: PUSH
9781: FOR_IN
9782: IFFALSE 9836
// if IsDrivenBy ( i ) then
9784: LD_VAR 0 2
9788: PPUSH
9789: CALL_OW 311
9793: IFFALSE 9834
// begin ridic = IsDrivenBy ( i ) ;
9795: LD_ADDR_VAR 0 3
9799: PUSH
9800: LD_VAR 0 2
9804: PPUSH
9805: CALL_OW 311
9809: ST_TO_ADDR
// ComExitVehicle ( ridic ) ;
9810: LD_VAR 0 3
9814: PPUSH
9815: CALL_OW 121
// AddComAgressiveMove ( ridic , 21 , 14 ) ;
9819: LD_VAR 0 3
9823: PPUSH
9824: LD_INT 21
9826: PPUSH
9827: LD_INT 14
9829: PPUSH
9830: CALL_OW 174
// end ;
9834: GO 9781
9836: POP
9837: POP
// enable ;
9838: ENABLE
// end ;
9839: PPOPN 3
9841: END
// on VehicleConstructed ( v , fact ) do begin if GetSide ( fact ) = 3 then
9842: LD_VAR 0 2
9846: PPUSH
9847: CALL_OW 255
9851: PUSH
9852: LD_INT 3
9854: EQUAL
9855: IFFALSE 9871
// postavenych_aut = postavenych_aut + 1 ;
9857: LD_ADDR_EXP 47
9861: PUSH
9862: LD_EXP 47
9866: PUSH
9867: LD_INT 1
9869: PLUS
9870: ST_TO_ADDR
// if GetSide ( fact ) = 6 then
9871: LD_VAR 0 2
9875: PPUSH
9876: CALL_OW 255
9880: PUSH
9881: LD_INT 6
9883: EQUAL
9884: IFFALSE 9901
// ComMoveXY ( v , 125 , 70 ) ;
9886: LD_VAR 0 1
9890: PPUSH
9891: LD_INT 125
9893: PPUSH
9894: LD_INT 70
9896: PPUSH
9897: CALL_OW 111
// end ;
9901: PPOPN 2
9903: END
// every 0 0$1 marked 51 do
9904: GO 9906
9906: DISABLE
// begin if konec_counteru then
9907: LD_EXP 45
9911: IFFALSE 9922
// begin display_strings = [ ] ;
9913: LD_ADDR_OWVAR 47
9917: PUSH
9918: EMPTY
9919: ST_TO_ADDR
// exit ;
9920: GO 9973
// end ; display_strings = [ #Ru03-1 , TTime ] ;
9922: LD_ADDR_OWVAR 47
9926: PUSH
9927: LD_STRING #Ru03-1
9929: PUSH
9930: LD_LOC 21
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: ST_TO_ADDR
// TTime = TTime - 0 0$1 ;
9939: LD_ADDR_LOC 21
9943: PUSH
9944: LD_LOC 21
9948: PUSH
9949: LD_INT 35
9951: MINUS
9952: ST_TO_ADDR
// if TTime > 0 then
9953: LD_LOC 21
9957: PUSH
9958: LD_INT 0
9960: GREATER
9961: IFFALSE 9966
// enable else
9963: ENABLE
9964: GO 9973
// display_strings = [ ] ;
9966: LD_ADDR_OWVAR 47
9970: PUSH
9971: EMPTY
9972: ST_TO_ADDR
// end ;
9973: END
// every 0 0$1 marked 52 do
9974: GO 9976
9976: DISABLE
// begin if konec_counteru then
9977: LD_EXP 45
9981: IFFALSE 9992
// begin display_strings = [ ] ;
9983: LD_ADDR_OWVAR 47
9987: PUSH
9988: EMPTY
9989: ST_TO_ADDR
// exit ;
9990: GO 10043
// end ; display_strings = [ #Ru03-2 , TTime ] ;
9992: LD_ADDR_OWVAR 47
9996: PUSH
9997: LD_STRING #Ru03-2
9999: PUSH
10000: LD_LOC 21
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: ST_TO_ADDR
// TTime = TTime - 0 0$1 ;
10009: LD_ADDR_LOC 21
10013: PUSH
10014: LD_LOC 21
10018: PUSH
10019: LD_INT 35
10021: MINUS
10022: ST_TO_ADDR
// if TTime > 0 then
10023: LD_LOC 21
10027: PUSH
10028: LD_INT 0
10030: GREATER
10031: IFFALSE 10036
// enable else
10033: ENABLE
10034: GO 10043
// display_strings = [ ] ;
10036: LD_ADDR_OWVAR 47
10040: PUSH
10041: EMPTY
10042: ST_TO_ADDR
// end ;
10043: END
// every 0 0$1 marked 53 do
10044: GO 10046
10046: DISABLE
// begin if konec_counteru then
10047: LD_EXP 45
10051: IFFALSE 10062
// begin display_strings = [ ] ;
10053: LD_ADDR_OWVAR 47
10057: PUSH
10058: EMPTY
10059: ST_TO_ADDR
// exit ;
10060: GO 10113
// end ; display_strings = [ #Ru03-3 , TTime ] ;
10062: LD_ADDR_OWVAR 47
10066: PUSH
10067: LD_STRING #Ru03-3
10069: PUSH
10070: LD_LOC 21
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: ST_TO_ADDR
// TTime = TTime - 0 0$1 ;
10079: LD_ADDR_LOC 21
10083: PUSH
10084: LD_LOC 21
10088: PUSH
10089: LD_INT 35
10091: MINUS
10092: ST_TO_ADDR
// if TTime > 0 then
10093: LD_LOC 21
10097: PUSH
10098: LD_INT 0
10100: GREATER
10101: IFFALSE 10106
// enable else
10103: ENABLE
10104: GO 10113
// display_strings = [ ] ;
10106: LD_ADDR_OWVAR 47
10110: PUSH
10111: EMPTY
10112: ST_TO_ADDR
// end ;
10113: END
// export function zastaveni_rusaku ; var pom ; begin
10114: LD_INT 0
10116: PPUSH
10117: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
10118: LD_ADDR_VAR 0 2
10122: PUSH
10123: LD_INT 22
10125: PUSH
10126: LD_EXP 1
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: PUSH
10135: LD_INT 2
10137: PUSH
10138: LD_INT 21
10140: PUSH
10141: LD_INT 2
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PUSH
10148: LD_INT 21
10150: PUSH
10151: LD_INT 1
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: LIST
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PPUSH
10167: CALL_OW 69
10171: ST_TO_ADDR
// ComStand ( pom ) ;
10172: LD_VAR 0 2
10176: PPUSH
10177: CALL_OW 165
// end ; end_of_file
10181: LD_VAR 0 1
10185: RET
// export konstanta_utoceni ; var hint_bw ; every 0 0$0.1 do
10186: GO 10188
10188: DISABLE
// begin konstanta_utoceni = 0 ;
10189: LD_ADDR_EXP 49
10193: PUSH
10194: LD_INT 0
10196: ST_TO_ADDR
// hint_bw = false ;
10197: LD_ADDR_LOC 22
10201: PUSH
10202: LD_INT 0
10204: ST_TO_ADDR
// end ;
10205: END
// export function uvodni_pokec ; var vyber , eng ; begin
10206: LD_INT 0
10208: PPUSH
10209: PPUSH
10210: PPUSH
// wait ( 0 0$2 ) ;
10211: LD_INT 70
10213: PPUSH
10214: CALL_OW 67
// ComTurnUnit ( bur , kur ) ;
10218: LD_EXP 29
10222: PPUSH
10223: LD_EXP 27
10227: PPUSH
10228: CALL_OW 119
// ComTurnUnit ( kur , bur ) ;
10232: LD_EXP 27
10236: PPUSH
10237: LD_EXP 29
10241: PPUSH
10242: CALL_OW 119
// if BELKOV_SAVED then
10246: LD_EXP 24
10250: IFFALSE 10290
// begin Say ( kur , D1b-Kur-1 ) ;
10252: LD_EXP 27
10256: PPUSH
10257: LD_STRING D1b-Kur-1
10259: PPUSH
10260: CALL_OW 88
// Say ( bel , D1b-Bel-1 ) ;
10264: LD_EXP 32
10268: PPUSH
10269: LD_STRING D1b-Bel-1
10271: PPUSH
10272: CALL_OW 88
// Say ( kur , D1b-Kur-2 ) ;
10276: LD_EXP 27
10280: PPUSH
10281: LD_STRING D1b-Kur-2
10283: PPUSH
10284: CALL_OW 88
// end else
10288: GO 10374
// begin Say ( kur , D1a-Kur-1 ) ;
10290: LD_EXP 27
10294: PPUSH
10295: LD_STRING D1a-Kur-1
10297: PPUSH
10298: CALL_OW 88
// Say ( bur , D1a-Bur-1 ) ;
10302: LD_EXP 29
10306: PPUSH
10307: LD_STRING D1a-Bur-1
10309: PPUSH
10310: CALL_OW 88
// if STAV_UTOKU = 3 then
10314: LD_EXP 25
10318: PUSH
10319: LD_INT 3
10321: EQUAL
10322: IFFALSE 10338
// Say ( kur , D1a-Kur-2a ) else
10324: LD_EXP 27
10328: PPUSH
10329: LD_STRING D1a-Kur-2a
10331: PPUSH
10332: CALL_OW 88
10336: GO 10350
// Say ( kur , D1a-Kur-2 ) ;
10338: LD_EXP 27
10342: PPUSH
10343: LD_STRING D1a-Kur-2
10345: PPUSH
10346: CALL_OW 88
// Say ( kur , D1a-Kur-2b ) ;
10350: LD_EXP 27
10354: PPUSH
10355: LD_STRING D1a-Kur-2b
10357: PPUSH
10358: CALL_OW 88
// Say ( bur , D1a-Bur-2 ) ;
10362: LD_EXP 29
10366: PPUSH
10367: LD_STRING D1a-Bur-2
10369: PPUSH
10370: CALL_OW 88
// end ; Say ( kur , D2-Kur-1 ) ;
10374: LD_EXP 27
10378: PPUSH
10379: LD_STRING D2-Kur-1
10381: PPUSH
10382: CALL_OW 88
// Say ( bur , D2-Bur-1 ) ;
10386: LD_EXP 29
10390: PPUSH
10391: LD_STRING D2-Bur-1
10393: PPUSH
10394: CALL_OW 88
// Say ( kur , D2-Kur-2 ) ;
10398: LD_EXP 27
10402: PPUSH
10403: LD_STRING D2-Kur-2
10405: PPUSH
10406: CALL_OW 88
// Say ( bur , D2-Bur-2 ) ;
10410: LD_EXP 29
10414: PPUSH
10415: LD_STRING D2-Bur-2
10417: PPUSH
10418: CALL_OW 88
// Say ( kur , D2-Kur-3 ) ;
10422: LD_EXP 27
10426: PPUSH
10427: LD_STRING D2-Kur-3
10429: PPUSH
10430: CALL_OW 88
// Say ( pop , D2-Pop-3 ) ;
10434: LD_EXP 28
10438: PPUSH
10439: LD_STRING D2-Pop-3
10441: PPUSH
10442: CALL_OW 88
// Say ( kur , D2-Kur-4 ) ;
10446: LD_EXP 27
10450: PPUSH
10451: LD_STRING D2-Kur-4
10453: PPUSH
10454: CALL_OW 88
// Say ( bur , D2-Bur-4 ) ;
10458: LD_EXP 29
10462: PPUSH
10463: LD_STRING D2-Bur-4
10465: PPUSH
10466: CALL_OW 88
// Say ( kur , D2-Kur-5 ) ;
10470: LD_EXP 27
10474: PPUSH
10475: LD_STRING D2-Kur-5
10477: PPUSH
10478: CALL_OW 88
// Say ( bur , D2-Bur-5 ) ;
10482: LD_EXP 29
10486: PPUSH
10487: LD_STRING D2-Bur-5
10489: PPUSH
10490: CALL_OW 88
// Say ( kur , D2-Kur-6 ) ;
10494: LD_EXP 27
10498: PPUSH
10499: LD_STRING D2-Kur-6
10501: PPUSH
10502: CALL_OW 88
// vyber = vyber_characteru ;
10506: LD_ADDR_VAR 0 2
10510: PUSH
10511: CALL 3282 0 0
10515: ST_TO_ADDR
// if bel in vyber then
10516: LD_EXP 32
10520: PUSH
10521: LD_VAR 0 2
10525: IN
10526: IFFALSE 10539
// RemoveUnit ( bel ) else
10528: LD_EXP 32
10532: PPUSH
10533: CALL_OW 64
10537: GO 10553
// Setside ( bel , You2 ) ;
10539: LD_EXP 32
10543: PPUSH
10544: LD_EXP 2
10548: PPUSH
10549: CALL_OW 235
// if IsOK ( kov ) then
10553: LD_EXP 30
10557: PPUSH
10558: CALL_OW 302
10562: IFFALSE 10573
// RemoveUnit ( kov ) ;
10564: LD_EXP 30
10568: PPUSH
10569: CALL_OW 64
// if IsOK ( gny ) then
10573: LD_EXP 31
10577: PPUSH
10578: CALL_OW 302
10582: IFFALSE 10593
// RemoveUnit ( gny ) ;
10584: LD_EXP 31
10588: PPUSH
10589: CALL_OW 64
// RemoveUnit ( bur ) ;
10593: LD_EXP 29
10597: PPUSH
10598: CALL_OW 64
// prebarveni_druhe_baze ;
10602: CALL 5802 0 0
// ChangeSideFog ( You3 , You ) ;
10606: LD_EXP 3
10610: PPUSH
10611: LD_EXP 1
10615: PPUSH
10616: CALL_OW 343
// placni_unity ( vyber ) ;
10620: LD_VAR 0 2
10624: PPUSH
10625: CALL 4039 0 1
// CenterOnUnits ( vyber ) ;
10629: LD_VAR 0 2
10633: PPUSH
10634: CALL_OW 85
// RevealFogArea ( You , Wth ) ;
10638: LD_EXP 1
10642: PPUSH
10643: LD_INT 24
10645: PPUSH
10646: CALL_OW 332
// wait ( 0 0$2 ) ;
10650: LD_INT 70
10652: PPUSH
10653: CALL_OW 67
// ChangeMissionObjectives ( M1 ) ;
10657: LD_STRING M1
10659: PPUSH
10660: CALL_OW 337
// hint_bw = true ;
10664: LD_ADDR_LOC 22
10668: PUSH
10669: LD_INT 1
10671: ST_TO_ADDR
// Hint ( Oil ) ;
10672: LD_STRING Oil
10674: PPUSH
10675: CALL_OW 339
// Hint ( Upgrading ) ;
10679: LD_STRING Upgrading
10681: PPUSH
10682: CALL_OW 339
// InGameOff ;
10686: CALL_OW 9
// wait ( 1 1$00 ) ;
10690: LD_INT 2100
10692: PPUSH
10693: CALL_OW 67
// eng := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) ;
10697: LD_ADDR_VAR 0 3
10701: PUSH
10702: LD_INT 22
10704: PUSH
10705: LD_INT 6
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: LD_INT 25
10714: PUSH
10715: LD_INT 2
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PPUSH
10726: CALL_OW 69
10730: ST_TO_ADDR
// if not eng then
10731: LD_VAR 0 3
10735: NOT
10736: IFFALSE 10740
// exit ;
10738: GO 10789
// ComExitBuilding ( eng ) ;
10740: LD_VAR 0 3
10744: PPUSH
10745: CALL_OW 122
// AddComBuild ( eng , b_oil_power , 140 , 69 , 0 ) ;
10749: LD_VAR 0 3
10753: PPUSH
10754: LD_INT 26
10756: PPUSH
10757: LD_INT 140
10759: PPUSH
10760: LD_INT 69
10762: PPUSH
10763: LD_INT 0
10765: PPUSH
10766: CALL_OW 205
// wait ( 2 2$30 ) ;
10770: LD_INT 5250
10772: PPUSH
10773: CALL_OW 67
// ComEnterUnit ( eng , RU1_dep ) ;
10777: LD_VAR 0 3
10781: PPUSH
10782: LD_INT 1
10784: PPUSH
10785: CALL_OW 120
// end ;
10789: LD_VAR 0 1
10793: RET
// every 0 0$1 trigger GetResourceVisibility ( 57 , 89 , You ) > 0 do
10794: LD_INT 57
10796: PPUSH
10797: LD_INT 89
10799: PPUSH
10800: LD_EXP 1
10804: PPUSH
10805: CALL_OW 440
10809: PUSH
10810: LD_INT 0
10812: GREATER
10813: IFFALSE 10917
10815: GO 10817
10817: DISABLE
// begin CenterOnXY ( 57 , 89 ) ;
10818: LD_INT 57
10820: PPUSH
10821: LD_INT 89
10823: PPUSH
10824: CALL_OW 84
// DialogueOn ;
10828: CALL_OW 6
// interface_hidden := true ;
10832: LD_ADDR_OWVAR 54
10836: PUSH
10837: LD_INT 1
10839: ST_TO_ADDR
// Say ( bur , D2a-Bur-1 ) ;
10840: LD_EXP 29
10844: PPUSH
10845: LD_STRING D2a-Bur-1
10847: PPUSH
10848: CALL_OW 88
// SayRadio ( kur , D2a-Kur-1 ) ;
10852: LD_EXP 27
10856: PPUSH
10857: LD_STRING D2a-Kur-1
10859: PPUSH
10860: CALL_OW 94
// RU_videl_oil = true ;
10864: LD_ADDR_EXP 40
10868: PUSH
10869: LD_INT 1
10871: ST_TO_ADDR
// interface_hidden := false ;
10872: LD_ADDR_OWVAR 54
10876: PUSH
10877: LD_INT 0
10879: ST_TO_ADDR
// Hint ( OilSpoted ) ;
10880: LD_STRING OilSpoted
10882: PPUSH
10883: CALL_OW 339
// DialogueOff ;
10887: CALL_OW 7
// wait ( 0 0$45 ) ;
10891: LD_INT 1575
10893: PPUSH
10894: CALL_OW 67
// ComConstruct ( Ru1_fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
10898: LD_INT 5
10900: PPUSH
10901: LD_INT 21
10903: PPUSH
10904: LD_INT 1
10906: PPUSH
10907: LD_INT 1
10909: PPUSH
10910: LD_INT 42
10912: PPUSH
10913: CALL_OW 125
// end ;
10917: END
// every 0 0$3 trigger RU_videl_oil and FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) > 1 do var pom , pom1 ; var i ;
10918: LD_EXP 40
10922: PUSH
10923: LD_INT 22
10925: PUSH
10926: LD_EXP 1
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 30
10937: PUSH
10938: LD_INT 0
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PPUSH
10949: CALL_OW 69
10953: PUSH
10954: LD_INT 1
10956: GREATER
10957: AND
10958: IFFALSE 11122
10960: GO 10962
10962: DISABLE
10963: LD_INT 0
10965: PPUSH
10966: PPUSH
10967: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) ;
10968: LD_ADDR_VAR 0 1
10972: PUSH
10973: LD_INT 22
10975: PUSH
10976: LD_EXP 1
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 30
10987: PUSH
10988: LD_INT 0
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PPUSH
10999: CALL_OW 69
11003: ST_TO_ADDR
// pom1 = [ ] ;
11004: LD_ADDR_VAR 0 2
11008: PUSH
11009: EMPTY
11010: ST_TO_ADDR
// for i in pom do
11011: LD_ADDR_VAR 0 3
11015: PUSH
11016: LD_VAR 0 1
11020: PUSH
11021: FOR_IN
11022: IFFALSE 11063
// if GetDistUnitXY ( i , 56 , 88 ) < 30 then
11024: LD_VAR 0 3
11028: PPUSH
11029: LD_INT 56
11031: PPUSH
11032: LD_INT 88
11034: PPUSH
11035: CALL_OW 297
11039: PUSH
11040: LD_INT 30
11042: LESS
11043: IFFALSE 11061
// pom1 = pom1 ^ i ;
11045: LD_ADDR_VAR 0 2
11049: PUSH
11050: LD_VAR 0 2
11054: PUSH
11055: LD_VAR 0 3
11059: ADD
11060: ST_TO_ADDR
11061: GO 11021
11063: POP
11064: POP
// if pom1 > 0 then
11065: LD_VAR 0 2
11069: PUSH
11070: LD_INT 0
11072: GREATER
11073: IFFALSE 11121
// begin while IsConstructed ( pom1 [ 1 ] ) do
11075: LD_VAR 0 2
11079: PUSH
11080: LD_INT 1
11082: ARRAY
11083: PPUSH
11084: CALL_OW 304
11088: IFFALSE 11099
// wait ( 0 0$5 ) ;
11090: LD_INT 175
11092: PPUSH
11093: CALL_OW 67
11097: GO 11075
// ChangeMissionObjectives ( M2 ) ;
11099: LD_STRING M2
11101: PPUSH
11102: CALL_OW 337
// pojmenovani_kaganoviche ( pom1 [ 1 ] ) ;
11106: LD_VAR 0 2
11110: PUSH
11111: LD_INT 1
11113: ARRAY
11114: PPUSH
11115: CALL 4846 0 1
// end else
11119: GO 11122
// enable ;
11121: ENABLE
// end ;
11122: PPOPN 3
11124: END
// every 0 0$2 trigger FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_factory ] ] ) > 0 do var pom ;
11125: LD_INT 2
11127: PPUSH
11128: LD_INT 22
11130: PUSH
11131: LD_EXP 1
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: LD_INT 30
11142: PUSH
11143: LD_INT 3
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: PPUSH
11154: CALL_OW 70
11158: PUSH
11159: LD_INT 0
11161: GREATER
11162: IFFALSE 11454
11164: GO 11166
11166: DISABLE
11167: LD_INT 0
11169: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_factory ] ] ) ;
11170: LD_ADDR_VAR 0 1
11174: PUSH
11175: LD_INT 2
11177: PPUSH
11178: LD_INT 22
11180: PUSH
11181: LD_EXP 1
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: PUSH
11190: LD_INT 30
11192: PUSH
11193: LD_INT 3
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: PPUSH
11204: CALL_OW 70
11208: ST_TO_ADDR
// pom = pom [ 1 ] ;
11209: LD_ADDR_VAR 0 1
11213: PUSH
11214: LD_VAR 0 1
11218: PUSH
11219: LD_INT 1
11221: ARRAY
11222: ST_TO_ADDR
// while IsConstructed ( pom ) <> 0 do
11223: LD_VAR 0 1
11227: PPUSH
11228: CALL_OW 304
11232: PUSH
11233: LD_INT 0
11235: NONEQUAL
11236: IFFALSE 11247
// wait ( 0 0$2 ) ;
11238: LD_INT 70
11240: PPUSH
11241: CALL_OW 67
11245: GO 11223
// CenterNowOnUnits ( pom ) ;
11247: LD_VAR 0 1
11251: PPUSH
11252: CALL_OW 87
// interface_hidden := true ;
11256: LD_ADDR_OWVAR 54
11260: PUSH
11261: LD_INT 1
11263: ST_TO_ADDR
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_oil_power ] ] ) ;
11264: LD_ADDR_VAR 0 1
11268: PUSH
11269: LD_INT 2
11271: PPUSH
11272: LD_INT 22
11274: PUSH
11275: LD_EXP 1
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: LD_INT 30
11286: PUSH
11287: LD_INT 26
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PPUSH
11298: CALL_OW 70
11302: ST_TO_ADDR
// if pom = 0 then
11303: LD_VAR 0 1
11307: PUSH
11308: LD_INT 0
11310: EQUAL
11311: IFFALSE 11428
// begin DialogueOn ;
11313: CALL_OW 6
// Say ( bur , D3aa-Bur-1 ) ;
11317: LD_EXP 29
11321: PPUSH
11322: LD_STRING D3aa-Bur-1
11324: PPUSH
11325: CALL_OW 88
// if IsOK ( schol ) then
11329: LD_EXP 33
11333: PPUSH
11334: CALL_OW 302
11338: IFFALSE 11366
// begin Say ( schol , D3aa-Sch-1 ) ;
11340: LD_EXP 33
11344: PPUSH
11345: LD_STRING D3aa-Sch-1
11347: PPUSH
11348: CALL_OW 88
// Say ( bur , D3aa-Bur-2 ) ;
11352: LD_EXP 29
11356: PPUSH
11357: LD_STRING D3aa-Bur-2
11359: PPUSH
11360: CALL_OW 88
// end else
11364: GO 11428
// begin pom = GetPeople ( sex_male , class_scientistic , [ bur ] ) ;
11366: LD_ADDR_VAR 0 1
11370: PUSH
11371: LD_INT 1
11373: PPUSH
11374: LD_INT 4
11376: PPUSH
11377: LD_EXP 29
11381: PUSH
11382: EMPTY
11383: LIST
11384: PPUSH
11385: CALL 11999 0 3
11389: ST_TO_ADDR
// if pom > 0 then
11390: LD_VAR 0 1
11394: PUSH
11395: LD_INT 0
11397: GREATER
11398: IFFALSE 11428
// begin Say ( pom [ 1 ] , D3aa-Sci1-1 ) ;
11400: LD_VAR 0 1
11404: PUSH
11405: LD_INT 1
11407: ARRAY
11408: PPUSH
11409: LD_STRING D3aa-Sci1-1
11411: PPUSH
11412: CALL_OW 88
// Say ( bur , D3aa-Bur-2 ) ;
11416: LD_EXP 29
11420: PPUSH
11421: LD_STRING D3aa-Bur-2
11423: PPUSH
11424: CALL_OW 88
// end ; end ; end ; ChangeMissionObjectives ( M3 ) ;
11428: LD_STRING M3
11430: PPUSH
11431: CALL_OW 337
// Hint ( Factory ) ;
11435: LD_STRING Factory
11437: PPUSH
11438: CALL_OW 339
// interface_hidden := false ;
11442: LD_ADDR_OWVAR 54
11446: PUSH
11447: LD_INT 0
11449: ST_TO_ADDR
// DialogueOff ;
11450: CALL_OW 7
// end ;
11454: PPOPN 1
11456: END
// every 0 0$5 trigger FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_armoury ] ] ) > 0 do var pom ;
11457: LD_INT 2
11459: PPUSH
11460: LD_INT 22
11462: PUSH
11463: LD_EXP 1
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 30
11474: PUSH
11475: LD_INT 4
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PPUSH
11486: CALL_OW 70
11490: PUSH
11491: LD_INT 0
11493: GREATER
11494: IFFALSE 11576
11496: GO 11498
11498: DISABLE
11499: LD_INT 0
11501: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_armoury ] ] ) ;
11502: LD_ADDR_VAR 0 1
11506: PUSH
11507: LD_INT 2
11509: PPUSH
11510: LD_INT 22
11512: PUSH
11513: LD_EXP 1
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PUSH
11522: LD_INT 30
11524: PUSH
11525: LD_INT 4
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PPUSH
11536: CALL_OW 70
11540: ST_TO_ADDR
// while IsConstructed ( pom [ 1 ] ) <> 0 do
11541: LD_VAR 0 1
11545: PUSH
11546: LD_INT 1
11548: ARRAY
11549: PPUSH
11550: CALL_OW 304
11554: PUSH
11555: LD_INT 0
11557: NONEQUAL
11558: IFFALSE 11569
// wait ( 0 0$5 ) ;
11560: LD_INT 175
11562: PPUSH
11563: CALL_OW 67
11567: GO 11541
// Hint ( Armoury ) ;
11569: LD_STRING Armoury
11571: PPUSH
11572: CALL_OW 339
// end ;
11576: PPOPN 1
11578: END
// every 0 0$3 trigger hint_bw do var pom ;
11579: LD_LOC 22
11583: IFFALSE 11637
11585: GO 11587
11587: DISABLE
11588: LD_INT 0
11590: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_breastwork ] ] ) ;
11591: LD_ADDR_VAR 0 1
11595: PUSH
11596: LD_INT 2
11598: PPUSH
11599: LD_INT 22
11601: PUSH
11602: LD_EXP 1
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 30
11613: PUSH
11614: LD_INT 31
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PPUSH
11625: CALL_OW 70
11629: ST_TO_ADDR
// Hint ( bunkers ) ;
11630: LD_STRING bunkers
11632: PPUSH
11633: CALL_OW 339
// end ;
11637: PPOPN 1
11639: END
// export function dialog_scholtze_enter ; begin
11640: LD_INT 0
11642: PPUSH
// CenterOnUnits ( schol2 ) ;
11643: LD_EXP 34
11647: PPUSH
11648: CALL_OW 85
// DialogueOn ;
11652: CALL_OW 6
// interface_hidden := true ;
11656: LD_ADDR_OWVAR 54
11660: PUSH
11661: LD_INT 1
11663: ST_TO_ADDR
// SayRadio ( schol2 , D4-Sch-1 ) ;
11664: LD_EXP 34
11668: PPUSH
11669: LD_STRING D4-Sch-1
11671: PPUSH
11672: CALL_OW 94
// Say ( bur , D4-Bur-1 ) ;
11676: LD_EXP 29
11680: PPUSH
11681: LD_STRING D4-Bur-1
11683: PPUSH
11684: CALL_OW 88
// ChangeMissionObjectives ( M4 ) ;
11688: LD_STRING M4
11690: PPUSH
11691: CALL_OW 337
// interface_hidden := false ;
11695: LD_ADDR_OWVAR 54
11699: PUSH
11700: LD_INT 0
11702: ST_TO_ADDR
// DialogueOff ;
11703: CALL_OW 7
// end ;
11707: LD_VAR 0 1
11711: RET
// export function dialog_scholtze_nalezen ; begin
11712: LD_INT 0
11714: PPUSH
// CenterOnUnits ( schol2 ) ;
11715: LD_EXP 34
11719: PPUSH
11720: CALL_OW 85
// DialogueOn ;
11724: CALL_OW 6
// interface_hidden := true ;
11728: LD_ADDR_OWVAR 54
11732: PUSH
11733: LD_INT 1
11735: ST_TO_ADDR
// if IsOK ( schol2 ) then
11736: LD_EXP 34
11740: PPUSH
11741: CALL_OW 302
11745: IFFALSE 11790
// begin Say ( schol2 , D4a-Sch-1 ) ;
11747: LD_EXP 34
11751: PPUSH
11752: LD_STRING D4a-Sch-1
11754: PPUSH
11755: CALL_OW 88
// Say ( bur , D4a-Bur-1 ) ;
11759: LD_EXP 29
11763: PPUSH
11764: LD_STRING D4a-Bur-1
11766: PPUSH
11767: CALL_OW 88
// Say ( schol2 , D4a-Sch-2 ) ;
11771: LD_EXP 34
11775: PPUSH
11776: LD_STRING D4a-Sch-2
11778: PPUSH
11779: CALL_OW 88
// ChangeMissionObjectives ( MScholtzeOut ) ;
11783: LD_STRING MScholtzeOut
11785: PPUSH
11786: CALL_OW 337
// end ; interface_hidden := false ;
11790: LD_ADDR_OWVAR 54
11794: PUSH
11795: LD_INT 0
11797: ST_TO_ADDR
// DialogueOff ;
11798: CALL_OW 7
// end ;
11802: LD_VAR 0 1
11806: RET
// every 0 0$1 trigger am_posily_videny_rusakama and FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) = 1 marked 201 do var pom ;
11807: CALL 26360 0 0
11811: PUSH
11812: LD_INT 22
11814: PUSH
11815: LD_EXP 1
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: PUSH
11824: LD_INT 30
11826: PUSH
11827: LD_INT 0
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PPUSH
11838: CALL_OW 69
11842: PUSH
11843: LD_INT 1
11845: EQUAL
11846: AND
11847: IFFALSE 11996
11849: GO 11851
11851: DISABLE
11852: LD_INT 0
11854: PPUSH
// begin DialogueOn ;
11855: CALL_OW 6
// interface_hidden := true ;
11859: LD_ADDR_OWVAR 54
11863: PUSH
11864: LD_INT 1
11866: ST_TO_ADDR
// CenterOnUnits ( Am_posily ) ;
11867: LD_EXP 72
11871: PPUSH
11872: CALL_OW 85
// pom = GetPeople ( sex_male , class_soldier , [ bur , gny , kov ] ) ;
11876: LD_ADDR_VAR 0 1
11880: PUSH
11881: LD_INT 1
11883: PPUSH
11884: LD_INT 1
11886: PPUSH
11887: LD_EXP 29
11891: PUSH
11892: LD_EXP 31
11896: PUSH
11897: LD_EXP 30
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: LIST
11906: PPUSH
11907: CALL 11999 0 3
11911: ST_TO_ADDR
// if pom = 0 then
11912: LD_VAR 0 1
11916: PUSH
11917: LD_INT 0
11919: EQUAL
11920: IFFALSE 11946
// pom = GetPeople ( sex_male , class_soldier , [ bur ] ) ;
11922: LD_ADDR_VAR 0 1
11926: PUSH
11927: LD_INT 1
11929: PPUSH
11930: LD_INT 1
11932: PPUSH
11933: LD_EXP 29
11937: PUSH
11938: EMPTY
11939: LIST
11940: PPUSH
11941: CALL 11999 0 3
11945: ST_TO_ADDR
// if pom > 0 then
11946: LD_VAR 0 1
11950: PUSH
11951: LD_INT 0
11953: GREATER
11954: IFFALSE 11984
// begin Say ( pom [ 1 ] , D3a-RSol1-1 ) ;
11956: LD_VAR 0 1
11960: PUSH
11961: LD_INT 1
11963: ARRAY
11964: PPUSH
11965: LD_STRING D3a-RSol1-1
11967: PPUSH
11968: CALL_OW 88
// Say ( bur , D3a-Bur-1 ) ;
11972: LD_EXP 29
11976: PPUSH
11977: LD_STRING D3a-Bur-1
11979: PPUSH
11980: CALL_OW 88
// end ; interface_hidden := false ;
11984: LD_ADDR_OWVAR 54
11988: PUSH
11989: LD_INT 0
11991: ST_TO_ADDR
// DialogueOff ;
11992: CALL_OW 7
// end ;
11996: PPOPN 1
11998: END
// function GetPeople ( sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 ; begin
11999: LD_INT 0
12001: PPUSH
12002: PPUSH
12003: PPUSH
12004: PPUSH
12005: PPUSH
12006: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
12007: LD_ADDR_VAR 0 6
12011: PUSH
12012: LD_INT 22
12014: PUSH
12015: LD_EXP 1
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: LD_INT 25
12026: PUSH
12027: LD_INT 4
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PUSH
12034: LD_INT 26
12036: PUSH
12037: LD_VAR 0 1
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: LIST
12050: PPUSH
12051: CALL_OW 69
12055: ST_TO_ADDR
// pom2 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
12056: LD_ADDR_VAR 0 7
12060: PUSH
12061: LD_INT 22
12063: PUSH
12064: LD_EXP 1
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PUSH
12073: LD_INT 25
12075: PUSH
12076: LD_INT 3
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: PUSH
12083: LD_INT 26
12085: PUSH
12086: LD_VAR 0 1
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: LIST
12099: PPUSH
12100: CALL_OW 69
12104: ST_TO_ADDR
// pom3 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
12105: LD_ADDR_VAR 0 8
12109: PUSH
12110: LD_INT 22
12112: PUSH
12113: LD_EXP 1
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 25
12124: PUSH
12125: LD_INT 2
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 26
12134: PUSH
12135: LD_VAR 0 1
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: LIST
12148: PPUSH
12149: CALL_OW 69
12153: ST_TO_ADDR
// pom4 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
12154: LD_ADDR_VAR 0 9
12158: PUSH
12159: LD_INT 22
12161: PUSH
12162: LD_EXP 1
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 25
12173: PUSH
12174: LD_INT 1
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: LD_INT 26
12183: PUSH
12184: LD_VAR 0 1
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: LIST
12197: PPUSH
12198: CALL_OW 69
12202: ST_TO_ADDR
// case povolani of class_scientistic :
12203: LD_VAR 0 2
12207: PUSH
12208: LD_INT 4
12210: DOUBLE
12211: EQUAL
12212: IFTRUE 12216
12214: GO 12229
12216: POP
// pom = pom1 ; class_mechanic :
12217: LD_ADDR_VAR 0 5
12221: PUSH
12222: LD_VAR 0 6
12226: ST_TO_ADDR
12227: GO 12293
12229: LD_INT 3
12231: DOUBLE
12232: EQUAL
12233: IFTRUE 12237
12235: GO 12250
12237: POP
// pom = pom2 ; class_engineer :
12238: LD_ADDR_VAR 0 5
12242: PUSH
12243: LD_VAR 0 7
12247: ST_TO_ADDR
12248: GO 12293
12250: LD_INT 2
12252: DOUBLE
12253: EQUAL
12254: IFTRUE 12258
12256: GO 12271
12258: POP
// pom = pom3 ; class_soldier :
12259: LD_ADDR_VAR 0 5
12263: PUSH
12264: LD_VAR 0 8
12268: ST_TO_ADDR
12269: GO 12293
12271: LD_INT 1
12273: DOUBLE
12274: EQUAL
12275: IFTRUE 12279
12277: GO 12292
12279: POP
// pom = pom4 ; end ;
12280: LD_ADDR_VAR 0 5
12284: PUSH
12285: LD_VAR 0 9
12289: ST_TO_ADDR
12290: GO 12293
12292: POP
// if povolani <> class_scientistic then
12293: LD_VAR 0 2
12297: PUSH
12298: LD_INT 4
12300: NONEQUAL
12301: IFFALSE 12319
// pom = pom ^ pom1 ;
12303: LD_ADDR_VAR 0 5
12307: PUSH
12308: LD_VAR 0 5
12312: PUSH
12313: LD_VAR 0 6
12317: ADD
12318: ST_TO_ADDR
// if povolani <> class_mechanic then
12319: LD_VAR 0 2
12323: PUSH
12324: LD_INT 3
12326: NONEQUAL
12327: IFFALSE 12345
// pom = pom ^ pom2 ;
12329: LD_ADDR_VAR 0 5
12333: PUSH
12334: LD_VAR 0 5
12338: PUSH
12339: LD_VAR 0 7
12343: ADD
12344: ST_TO_ADDR
// if povolani <> class_engineer then
12345: LD_VAR 0 2
12349: PUSH
12350: LD_INT 2
12352: NONEQUAL
12353: IFFALSE 12371
// pom = pom ^ pom3 ;
12355: LD_ADDR_VAR 0 5
12359: PUSH
12360: LD_VAR 0 5
12364: PUSH
12365: LD_VAR 0 8
12369: ADD
12370: ST_TO_ADDR
// if povolani <> class_soldier then
12371: LD_VAR 0 2
12375: PUSH
12376: LD_INT 1
12378: NONEQUAL
12379: IFFALSE 12397
// pom = pom ^ pom4 ;
12381: LD_ADDR_VAR 0 5
12385: PUSH
12386: LD_VAR 0 5
12390: PUSH
12391: LD_VAR 0 9
12395: ADD
12396: ST_TO_ADDR
// result := pom diff diffseznam ;
12397: LD_ADDR_VAR 0 4
12401: PUSH
12402: LD_VAR 0 5
12406: PUSH
12407: LD_VAR 0 3
12411: DIFF
12412: ST_TO_ADDR
// end ;
12413: LD_VAR 0 4
12417: RET
// function GetPeopleSide ( side , sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 ; begin
12418: LD_INT 0
12420: PPUSH
12421: PPUSH
12422: PPUSH
12423: PPUSH
12424: PPUSH
12425: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
12426: LD_ADDR_VAR 0 7
12430: PUSH
12431: LD_INT 22
12433: PUSH
12434: LD_VAR 0 1
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: PUSH
12443: LD_INT 25
12445: PUSH
12446: LD_INT 4
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PUSH
12453: LD_INT 26
12455: PUSH
12456: LD_VAR 0 2
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: LIST
12469: PPUSH
12470: CALL_OW 69
12474: ST_TO_ADDR
// pom2 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
12475: LD_ADDR_VAR 0 8
12479: PUSH
12480: LD_INT 22
12482: PUSH
12483: LD_VAR 0 1
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: LD_INT 25
12494: PUSH
12495: LD_INT 3
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: PUSH
12502: LD_INT 26
12504: PUSH
12505: LD_VAR 0 2
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: LIST
12518: PPUSH
12519: CALL_OW 69
12523: ST_TO_ADDR
// pom3 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
12524: LD_ADDR_VAR 0 9
12528: PUSH
12529: LD_INT 22
12531: PUSH
12532: LD_VAR 0 1
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 25
12543: PUSH
12544: LD_INT 2
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: LD_INT 26
12553: PUSH
12554: LD_VAR 0 2
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: LIST
12567: PPUSH
12568: CALL_OW 69
12572: ST_TO_ADDR
// pom4 = FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
12573: LD_ADDR_VAR 0 10
12577: PUSH
12578: LD_INT 22
12580: PUSH
12581: LD_VAR 0 1
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: LD_INT 25
12592: PUSH
12593: LD_INT 1
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: LD_INT 26
12602: PUSH
12603: LD_VAR 0 2
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: LIST
12616: PPUSH
12617: CALL_OW 69
12621: ST_TO_ADDR
// case povolani of class_scientistic :
12622: LD_VAR 0 3
12626: PUSH
12627: LD_INT 4
12629: DOUBLE
12630: EQUAL
12631: IFTRUE 12635
12633: GO 12648
12635: POP
// pom = pom1 ; class_mechanic :
12636: LD_ADDR_VAR 0 6
12640: PUSH
12641: LD_VAR 0 7
12645: ST_TO_ADDR
12646: GO 12712
12648: LD_INT 3
12650: DOUBLE
12651: EQUAL
12652: IFTRUE 12656
12654: GO 12669
12656: POP
// pom = pom2 ; class_engineer :
12657: LD_ADDR_VAR 0 6
12661: PUSH
12662: LD_VAR 0 8
12666: ST_TO_ADDR
12667: GO 12712
12669: LD_INT 2
12671: DOUBLE
12672: EQUAL
12673: IFTRUE 12677
12675: GO 12690
12677: POP
// pom = pom3 ; class_soldier :
12678: LD_ADDR_VAR 0 6
12682: PUSH
12683: LD_VAR 0 9
12687: ST_TO_ADDR
12688: GO 12712
12690: LD_INT 1
12692: DOUBLE
12693: EQUAL
12694: IFTRUE 12698
12696: GO 12711
12698: POP
// pom = pom4 ; end ;
12699: LD_ADDR_VAR 0 6
12703: PUSH
12704: LD_VAR 0 10
12708: ST_TO_ADDR
12709: GO 12712
12711: POP
// if povolani <> class_scientistic then
12712: LD_VAR 0 3
12716: PUSH
12717: LD_INT 4
12719: NONEQUAL
12720: IFFALSE 12738
// pom = pom ^ pom1 ;
12722: LD_ADDR_VAR 0 6
12726: PUSH
12727: LD_VAR 0 6
12731: PUSH
12732: LD_VAR 0 7
12736: ADD
12737: ST_TO_ADDR
// if povolani <> class_mechanic then
12738: LD_VAR 0 3
12742: PUSH
12743: LD_INT 3
12745: NONEQUAL
12746: IFFALSE 12764
// pom = pom ^ pom2 ;
12748: LD_ADDR_VAR 0 6
12752: PUSH
12753: LD_VAR 0 6
12757: PUSH
12758: LD_VAR 0 8
12762: ADD
12763: ST_TO_ADDR
// if povolani <> class_engineer then
12764: LD_VAR 0 3
12768: PUSH
12769: LD_INT 2
12771: NONEQUAL
12772: IFFALSE 12790
// pom = pom ^ pom3 ;
12774: LD_ADDR_VAR 0 6
12778: PUSH
12779: LD_VAR 0 6
12783: PUSH
12784: LD_VAR 0 9
12788: ADD
12789: ST_TO_ADDR
// if povolani <> class_soldier then
12790: LD_VAR 0 3
12794: PUSH
12795: LD_INT 1
12797: NONEQUAL
12798: IFFALSE 12816
// pom = pom ^ pom4 ;
12800: LD_ADDR_VAR 0 6
12804: PUSH
12805: LD_VAR 0 6
12809: PUSH
12810: LD_VAR 0 10
12814: ADD
12815: ST_TO_ADDR
// result := pom diff diffseznam ;
12816: LD_ADDR_VAR 0 5
12820: PUSH
12821: LD_VAR 0 6
12825: PUSH
12826: LD_VAR 0 4
12830: DIFF
12831: ST_TO_ADDR
// end ;
12832: LD_VAR 0 5
12836: RET
// every 0 0$1 trigger am_posily_videny_rusakama and FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) > 1 do var pom ;
12837: CALL 26360 0 0
12841: PUSH
12842: LD_INT 22
12844: PUSH
12845: LD_EXP 1
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: PUSH
12854: LD_INT 30
12856: PUSH
12857: LD_INT 0
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: PPUSH
12868: CALL_OW 69
12872: PUSH
12873: LD_INT 1
12875: GREATER
12876: AND
12877: IFFALSE 13095
12879: GO 12881
12881: DISABLE
12882: LD_INT 0
12884: PPUSH
// begin disable ( 201 ) ;
12885: LD_INT 201
12887: DISABLE_MARKED
// DialogueOn ;
12888: CALL_OW 6
// interface_hidden := true ;
12892: LD_ADDR_OWVAR 54
12896: PUSH
12897: LD_INT 1
12899: ST_TO_ADDR
// CenterOnUnits ( Am_posily ) ;
12900: LD_EXP 72
12904: PPUSH
12905: CALL_OW 85
// pom = GetPeople ( sex_male , class_soldier , [ bur , gny , kov ] ) ;
12909: LD_ADDR_VAR 0 1
12913: PUSH
12914: LD_INT 1
12916: PPUSH
12917: LD_INT 1
12919: PPUSH
12920: LD_EXP 29
12924: PUSH
12925: LD_EXP 31
12929: PUSH
12930: LD_EXP 30
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: LIST
12939: PPUSH
12940: CALL 11999 0 3
12944: ST_TO_ADDR
// if pom = 0 then
12945: LD_VAR 0 1
12949: PUSH
12950: LD_INT 0
12952: EQUAL
12953: IFFALSE 12979
// pom = GetPeople ( sex_male , class_soldier , [ bur ] ) ;
12955: LD_ADDR_VAR 0 1
12959: PUSH
12960: LD_INT 1
12962: PPUSH
12963: LD_INT 1
12965: PPUSH
12966: LD_EXP 29
12970: PUSH
12971: EMPTY
12972: LIST
12973: PPUSH
12974: CALL 11999 0 3
12978: ST_TO_ADDR
// if pom > 0 then
12979: LD_VAR 0 1
12983: PUSH
12984: LD_INT 0
12986: GREATER
12987: IFFALSE 13083
// begin Say ( pom [ 1 ] , D3b-RSol1-1 ) ;
12989: LD_VAR 0 1
12993: PUSH
12994: LD_INT 1
12996: ARRAY
12997: PPUSH
12998: LD_STRING D3b-RSol1-1
13000: PPUSH
13001: CALL_OW 88
// if IsOK ( gny ) then
13005: LD_EXP 31
13009: PPUSH
13010: CALL_OW 302
13014: IFFALSE 13042
// begin Say ( gny , D3b-Gny-1 ) ;
13016: LD_EXP 31
13020: PPUSH
13021: LD_STRING D3b-Gny-1
13023: PPUSH
13024: CALL_OW 88
// Say ( bur , D3b-Bur-1 ) ;
13028: LD_EXP 29
13032: PPUSH
13033: LD_STRING D3b-Bur-1
13035: PPUSH
13036: CALL_OW 88
// end else
13040: GO 13083
// if ISOK ( kov ) then
13042: LD_EXP 30
13046: PPUSH
13047: CALL_OW 302
13051: IFFALSE 13067
// Say ( kov , D3b-Kov-1 ) else
13053: LD_EXP 30
13057: PPUSH
13058: LD_STRING D3b-Kov-1
13060: PPUSH
13061: CALL_OW 88
13065: GO 13083
// Say ( pom [ 1 ] , D3b-RSol1-2 ) ;
13067: LD_VAR 0 1
13071: PUSH
13072: LD_INT 1
13074: ARRAY
13075: PPUSH
13076: LD_STRING D3b-RSol1-2
13078: PPUSH
13079: CALL_OW 88
// end ; interface_hidden := false ;
13083: LD_ADDR_OWVAR 54
13087: PUSH
13088: LD_INT 0
13090: ST_TO_ADDR
// DialogueOff ;
13091: CALL_OW 7
// end ;
13095: PPOPN 1
13097: END
// export function dialog_otazka_poctu_aut ; var pom ; begin
13098: LD_INT 0
13100: PPUSH
13101: PPUSH
// DialogueOn ;
13102: CALL_OW 6
// interface_hidden := true ;
13106: LD_ADDR_OWVAR 54
13110: PUSH
13111: LD_INT 1
13113: ST_TO_ADDR
// Say ( kur , D5-Kur-1 ) ;
13114: LD_EXP 27
13118: PPUSH
13119: LD_STRING D5-Kur-1
13121: PPUSH
13122: CALL_OW 88
// pom = Query ( QVehicles ) ;
13126: LD_ADDR_VAR 0 2
13130: PUSH
13131: LD_STRING QVehicles
13133: PPUSH
13134: CALL_OW 97
13138: ST_TO_ADDR
// case pom of 1 :
13139: LD_VAR 0 2
13143: PUSH
13144: LD_INT 1
13146: DOUBLE
13147: EQUAL
13148: IFTRUE 13152
13150: GO 13179
13152: POP
// begin Say ( bur , D6a-Bur-1 ) ;
13153: LD_EXP 29
13157: PPUSH
13158: LD_STRING D6a-Bur-1
13160: PPUSH
13161: CALL_OW 88
// Say ( kur , D6a-Kur-1 ) ;
13165: LD_EXP 27
13169: PPUSH
13170: LD_STRING D6a-Kur-1
13172: PPUSH
13173: CALL_OW 88
// end ; 2 :
13177: GO 13282
13179: LD_INT 2
13181: DOUBLE
13182: EQUAL
13183: IFTRUE 13187
13185: GO 13226
13187: POP
// begin Say ( bur , D6b-Bur-1 ) ;
13188: LD_EXP 29
13192: PPUSH
13193: LD_STRING D6b-Bur-1
13195: PPUSH
13196: CALL_OW 88
// Say ( kur , D6b-Kur-1 ) ;
13200: LD_EXP 27
13204: PPUSH
13205: LD_STRING D6b-Kur-1
13207: PPUSH
13208: CALL_OW 88
// Say ( bur , D6b-Bur-2 ) ;
13212: LD_EXP 29
13216: PPUSH
13217: LD_STRING D6b-Bur-2
13219: PPUSH
13220: CALL_OW 88
// end ; 3 :
13224: GO 13282
13226: LD_INT 3
13228: DOUBLE
13229: EQUAL
13230: IFTRUE 13234
13232: GO 13281
13234: POP
// begin Say ( bur , D6c-Bur-1 ) ;
13235: LD_EXP 29
13239: PPUSH
13240: LD_STRING D6c-Bur-1
13242: PPUSH
13243: CALL_OW 88
// Say ( kur , D6c-Kur-1 ) ;
13247: LD_EXP 27
13251: PPUSH
13252: LD_STRING D6c-Kur-1
13254: PPUSH
13255: CALL_OW 88
// Say ( bur , D6c-Bur-2 ) ;
13259: LD_EXP 29
13263: PPUSH
13264: LD_STRING D6c-Bur-2
13266: PPUSH
13267: CALL_OW 88
// KurinAddTime = 1 ;
13271: LD_ADDR_EXP 7
13275: PUSH
13276: LD_INT 1
13278: ST_TO_ADDR
// end ; end ;
13279: GO 13282
13281: POP
// interface_hidden := false ;
13282: LD_ADDR_OWVAR 54
13286: PUSH
13287: LD_INT 0
13289: ST_TO_ADDR
// DialogueOff ;
13290: CALL_OW 7
// result := pom ;
13294: LD_ADDR_VAR 0 1
13298: PUSH
13299: LD_VAR 0 2
13303: ST_TO_ADDR
// end ;
13304: LD_VAR 0 1
13308: RET
// export function hlaska_omicron ; begin
13309: LD_INT 0
13311: PPUSH
// DialogueOn ;
13312: CALL_OW 6
// interface_hidden := true ;
13316: LD_ADDR_OWVAR 54
13320: PUSH
13321: LD_INT 1
13323: ST_TO_ADDR
// Say ( kur , D6c-Kur-2 ) ;
13324: LD_EXP 27
13328: PPUSH
13329: LD_STRING D6c-Kur-2
13331: PPUSH
13332: CALL_OW 88
// interface_hidden := false ;
13336: LD_ADDR_OWVAR 54
13340: PUSH
13341: LD_INT 0
13343: ST_TO_ADDR
// DialogueOff ;
13344: CALL_OW 7
// end ;
13348: LD_VAR 0 1
13352: RET
// every 0 0$1 trigger stav_omikron = 3 do
13353: LD_EXP 39
13357: PUSH
13358: LD_INT 3
13360: EQUAL
13361: IFFALSE 13391
13363: GO 13365
13365: DISABLE
// begin CheckVehicles ;
13366: CALL 6298 0 0
// ChangeMissionObjectives ( M5 ) ;
13370: LD_STRING M5
13372: PPUSH
13373: CALL_OW 337
// SetAreaMapShow ( Om_zone1 , 1 ) ;
13377: LD_INT 32
13379: PPUSH
13380: LD_INT 1
13382: PPUSH
13383: CALL_OW 424
// CheckVehicles ;
13387: CALL 6298 0 0
// end ;
13391: END
// export function dialog_pred_omicronem ; var pom ; begin
13392: LD_INT 0
13394: PPUSH
13395: PPUSH
// DialogueOn ;
13396: CALL_OW 6
// interface_hidden := true ;
13400: LD_ADDR_OWVAR 54
13404: PUSH
13405: LD_INT 1
13407: ST_TO_ADDR
// Say ( bur , D7-Bur-1 ) ;
13408: LD_EXP 29
13412: PPUSH
13413: LD_STRING D7-Bur-1
13415: PPUSH
13416: CALL_OW 88
// SayRadio ( kur , D7-Kur-1 ) ;
13420: LD_EXP 27
13424: PPUSH
13425: LD_STRING D7-Kur-1
13427: PPUSH
13428: CALL_OW 94
// setkani_om := true ;
13432: LD_ADDR_EXP 41
13436: PUSH
13437: LD_INT 1
13439: ST_TO_ADDR
// ChangeMissionObjectives ( M5a ) ;
13440: LD_STRING M5a
13442: PPUSH
13443: CALL_OW 337
// SetAreaMapShow ( Om_zone1 , 0 ) ;
13447: LD_INT 32
13449: PPUSH
13450: LD_INT 0
13452: PPUSH
13453: CALL_OW 424
// interface_hidden := false ;
13457: LD_ADDR_OWVAR 54
13461: PUSH
13462: LD_INT 0
13464: ST_TO_ADDR
// DialogueOff ;
13465: CALL_OW 7
// end ;
13469: LD_VAR 0 1
13473: RET
// every 0 0$5 trigger stav_omikron = 4 and omicron_half_destroyed do var pom ;
13474: LD_EXP 39
13478: PUSH
13479: LD_INT 4
13481: EQUAL
13482: PUSH
13483: CALL 26429 0 0
13487: AND
13488: IFFALSE 13755
13490: GO 13492
13492: DISABLE
13493: LD_INT 0
13495: PPUSH
// begin popov_ven ;
13496: CALL 5619 0 0
// DialogueOn ;
13500: CALL_OW 6
// interface_hidden := true ;
13504: LD_ADDR_OWVAR 54
13508: PUSH
13509: LD_INT 1
13511: ST_TO_ADDR
// pom = create_kecajici_amik ;
13512: LD_ADDR_VAR 0 1
13516: PUSH
13517: CALL 18834 0 0
13521: ST_TO_ADDR
// SayRadio ( pom , D8-Sol1-1 ) ;
13522: LD_VAR 0 1
13526: PPUSH
13527: LD_STRING D8-Sol1-1
13529: PPUSH
13530: CALL_OW 94
// if IsOK ( kov ) then
13534: LD_EXP 30
13538: PPUSH
13539: CALL_OW 302
13543: IFFALSE 13559
// Say ( kov , D8-Kov-1 ) else
13545: LD_EXP 30
13549: PPUSH
13550: LD_STRING D8-Kov-1
13552: PPUSH
13553: CALL_OW 88
13557: GO 13650
// begin pom = GetPeople ( sex_male , class_soldier , [ bur , gny ] ) ;
13559: LD_ADDR_VAR 0 1
13563: PUSH
13564: LD_INT 1
13566: PPUSH
13567: LD_INT 1
13569: PPUSH
13570: LD_EXP 29
13574: PUSH
13575: LD_EXP 31
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PPUSH
13584: CALL 11999 0 3
13588: ST_TO_ADDR
// if pom = 0 then
13589: LD_VAR 0 1
13593: PUSH
13594: LD_INT 0
13596: EQUAL
13597: IFFALSE 13634
// GetPeopleSide ( You2 , sex_male , class_soldier , [ kur , pop , bel ] ) ;
13599: LD_EXP 2
13603: PPUSH
13604: LD_INT 1
13606: PPUSH
13607: LD_INT 1
13609: PPUSH
13610: LD_EXP 27
13614: PUSH
13615: LD_EXP 28
13619: PUSH
13620: LD_EXP 32
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: LIST
13629: PPUSH
13630: CALL 12418 0 4
// Say ( pom [ 1 ] , D8-RSol1-1 ) ;
13634: LD_VAR 0 1
13638: PUSH
13639: LD_INT 1
13641: ARRAY
13642: PPUSH
13643: LD_STRING D8-RSol1-1
13645: PPUSH
13646: CALL_OW 88
// end ; if IsOK ( gny ) then
13650: LD_EXP 31
13654: PPUSH
13655: CALL_OW 302
13659: IFFALSE 13675
// Say ( gny , D8-Gny-1 ) else
13661: LD_EXP 31
13665: PPUSH
13666: LD_STRING D8-Gny-1
13668: PPUSH
13669: CALL_OW 88
13673: GO 13731
// begin pom = GetPeople ( sex_male , class_soldier , [ bur , gny ] ) ;
13675: LD_ADDR_VAR 0 1
13679: PUSH
13680: LD_INT 1
13682: PPUSH
13683: LD_INT 1
13685: PPUSH
13686: LD_EXP 29
13690: PUSH
13691: LD_EXP 31
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PPUSH
13700: CALL 11999 0 3
13704: ST_TO_ADDR
// if pom > 1 then
13705: LD_VAR 0 1
13709: PUSH
13710: LD_INT 1
13712: GREATER
13713: IFFALSE 13731
// Say ( pom [ 2 ] , D8-RSol2-1 ) ;
13715: LD_VAR 0 1
13719: PUSH
13720: LD_INT 2
13722: ARRAY
13723: PPUSH
13724: LD_STRING D8-RSol2-1
13726: PPUSH
13727: CALL_OW 88
// end ; interface_hidden := false ;
13731: LD_ADDR_OWVAR 54
13735: PUSH
13736: LD_INT 0
13738: ST_TO_ADDR
// DialogueOff ;
13739: CALL_OW 7
// stahnuti_amiku ;
13743: CALL 26592 0 0
// stav_omikron = 5 ;
13747: LD_ADDR_EXP 39
13751: PUSH
13752: LD_INT 5
13754: ST_TO_ADDR
// end ;
13755: PPOPN 1
13757: END
// every 0 0$5 trigger stav_omikron = 5 do var gri ;
13758: LD_EXP 39
13762: PUSH
13763: LD_INT 5
13765: EQUAL
13766: IFFALSE 13927
13768: GO 13770
13770: DISABLE
13771: LD_INT 0
13773: PPUSH
// begin setkani_om = false ;
13774: LD_ADDR_EXP 41
13778: PUSH
13779: LD_INT 0
13781: ST_TO_ADDR
// gri = create_grishko ;
13782: LD_ADDR_VAR 0 1
13786: PUSH
13787: CALL 18893 0 0
13791: ST_TO_ADDR
// CenterOnUnits ( gri ) ;
13792: LD_VAR 0 1
13796: PPUSH
13797: CALL_OW 85
// DialogueOn ;
13801: CALL_OW 6
// interface_hidden := true ;
13805: LD_ADDR_OWVAR 54
13809: PUSH
13810: LD_INT 1
13812: ST_TO_ADDR
// SayRadio ( gri , D9-Gri-1 ) ;
13813: LD_VAR 0 1
13817: PPUSH
13818: LD_STRING D9-Gri-1
13820: PPUSH
13821: CALL_OW 94
// SayRadio ( kur , D9-Kur-1 ) ;
13825: LD_EXP 27
13829: PPUSH
13830: LD_STRING D9-Kur-1
13832: PPUSH
13833: CALL_OW 94
// wait ( 0 0$2 ) ;
13837: LD_INT 70
13839: PPUSH
13840: CALL_OW 67
// SayRadio ( gri , D9-Gri-2 ) ;
13844: LD_VAR 0 1
13848: PPUSH
13849: LD_STRING D9-Gri-2
13851: PPUSH
13852: CALL_OW 94
// SayRadio ( kur , D9-Kur-2 ) ;
13856: LD_EXP 27
13860: PPUSH
13861: LD_STRING D9-Kur-2
13863: PPUSH
13864: CALL_OW 94
// SayRadio ( gri , D9-Gri-3 ) ;
13868: LD_VAR 0 1
13872: PPUSH
13873: LD_STRING D9-Gri-3
13875: PPUSH
13876: CALL_OW 94
// SayRadio ( kur , D9-Kur-3 ) ;
13880: LD_EXP 27
13884: PPUSH
13885: LD_STRING D9-Kur-3
13887: PPUSH
13888: CALL_OW 94
// interface_hidden := false ;
13892: LD_ADDR_OWVAR 54
13896: PUSH
13897: LD_INT 0
13899: ST_TO_ADDR
// DialogueOff ;
13900: CALL_OW 7
// wait ( 0 0$20 ) ;
13904: LD_INT 700
13906: PPUSH
13907: CALL_OW 67
// stav_omikron = 6 ;
13911: LD_ADDR_EXP 39
13915: PUSH
13916: LD_INT 6
13918: ST_TO_ADDR
// zastaveni_rusaku ;
13919: CALL 10114 0 0
// utok_arabu ;
13923: CALL 27433 0 0
// end ;
13927: PPOPN 1
13929: END
// export function kecy_behem_utoku_arabu ; var i ; begin
13930: LD_INT 0
13932: PPUSH
13933: PPUSH
// stav_omikron = 7 ;
13934: LD_ADDR_EXP 39
13938: PUSH
13939: LD_INT 7
13941: ST_TO_ADDR
// SayRadio ( kur , D9a-Kur-1 ) ;
13942: LD_EXP 27
13946: PPUSH
13947: LD_STRING D9a-Kur-1
13949: PPUSH
13950: CALL_OW 94
// Say ( bur , D9a-Bur-1 ) ;
13954: LD_EXP 29
13958: PPUSH
13959: LD_STRING D9a-Bur-1
13961: PPUSH
13962: CALL_OW 88
// SayRadio ( kur , D9a-Kur-2 ) ;
13966: LD_EXP 27
13970: PPUSH
13971: LD_STRING D9a-Kur-2
13973: PPUSH
13974: CALL_OW 94
// posilani_arabskych_hlidek = true ;
13978: LD_ADDR_EXP 74
13982: PUSH
13983: LD_INT 1
13985: ST_TO_ADDR
// manage_ruske_computery_zpet ;
13986: CALL 7343 0 0
// end ;
13990: LD_VAR 0 1
13994: RET
// every 0 0$1 trigger stav_omikron = 8 and get_lidi_popov_area > 0 do var pom , pom1 ;
13995: LD_EXP 39
13999: PUSH
14000: LD_INT 8
14002: EQUAL
14003: PUSH
14004: CALL 8730 0 0
14008: PUSH
14009: LD_INT 0
14011: GREATER
14012: AND
14013: IFFALSE 14271
14015: GO 14017
14017: DISABLE
14018: LD_INT 0
14020: PPUSH
14021: PPUSH
// begin pom = get_lidi_popov_area ;
14022: LD_ADDR_VAR 0 1
14026: PUSH
14027: CALL 8730 0 0
14031: ST_TO_ADDR
// pom = pom [ 1 ] ;
14032: LD_ADDR_VAR 0 1
14036: PUSH
14037: LD_VAR 0 1
14041: PUSH
14042: LD_INT 1
14044: ARRAY
14045: ST_TO_ADDR
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14046: LD_ADDR_VAR 0 2
14050: PUSH
14051: LD_INT 22
14053: PUSH
14054: LD_EXP 1
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: PUSH
14063: LD_INT 2
14065: PUSH
14066: LD_INT 21
14068: PUSH
14069: LD_INT 1
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: PUSH
14076: LD_INT 21
14078: PUSH
14079: LD_INT 2
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: LIST
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PPUSH
14095: CALL_OW 69
14099: ST_TO_ADDR
// ComStop ( pom1 ) ;
14100: LD_VAR 0 2
14104: PPUSH
14105: CALL_OW 141
// ArDontAttackPlayer ( true ) ;
14109: LD_INT 1
14111: PPUSH
14112: CALL 28470 0 1
// InGameOn ;
14116: CALL_OW 8
// CenterOnUnits ( [ pop ] ) ;
14120: LD_EXP 28
14124: PUSH
14125: EMPTY
14126: LIST
14127: PPUSH
14128: CALL_OW 85
// ComMoveUnit ( pop , pom ) ;
14132: LD_EXP 28
14136: PPUSH
14137: LD_VAR 0 1
14141: PPUSH
14142: CALL_OW 112
// while GetDistUnits ( pop , pom ) > 4 do
14146: LD_EXP 28
14150: PPUSH
14151: LD_VAR 0 1
14155: PPUSH
14156: CALL_OW 296
14160: PUSH
14161: LD_INT 4
14163: GREATER
14164: IFFALSE 14175
// wait ( 0 0$1 ) ;
14166: LD_INT 35
14168: PPUSH
14169: CALL_OW 67
14173: GO 14146
// ComTurnUnit ( pom , pop ) ;
14175: LD_VAR 0 1
14179: PPUSH
14180: LD_EXP 28
14184: PPUSH
14185: CALL_OW 119
// CenterOnUnits ( [ pop ] ) ;
14189: LD_EXP 28
14193: PUSH
14194: EMPTY
14195: LIST
14196: PPUSH
14197: CALL_OW 85
// InGameOff ;
14201: CALL_OW 9
// DialogueOn ;
14205: CALL_OW 6
// interface_hidden := true ;
14209: LD_ADDR_OWVAR 54
14213: PUSH
14214: LD_INT 1
14216: ST_TO_ADDR
// if GetDistUnits ( pop , bur ) <= 10 then
14217: LD_EXP 28
14221: PPUSH
14222: LD_EXP 29
14226: PPUSH
14227: CALL_OW 296
14231: PUSH
14232: LD_INT 10
14234: LESSEQUAL
14235: IFFALSE 14243
// dialog_popov_s_burlakem else
14237: CALL 14274 0 0
14241: GO 14247
// dialog_popov_bez_burlaka ;
14243: CALL 14402 0 0
// stav_omikron = 9 ;
14247: LD_ADDR_EXP 39
14251: PUSH
14252: LD_INT 9
14254: ST_TO_ADDR
// interface_hidden := false ;
14255: LD_ADDR_OWVAR 54
14259: PUSH
14260: LD_INT 0
14262: ST_TO_ADDR
// DialogueOff ;
14263: CALL_OW 7
// totalni_ukonceni_mise_v_ingame_videu ;
14267: CALL 8918 0 0
// end ;
14271: PPOPN 2
14273: END
// function dialog_popov_s_burlakem ; begin
14274: LD_INT 0
14276: PPUSH
// Say ( bur , D10a-Bur-1 ) ;
14277: LD_EXP 29
14281: PPUSH
14282: LD_STRING D10a-Bur-1
14284: PPUSH
14285: CALL_OW 88
// Say ( pop , D10a-Pop-1 ) ;
14289: LD_EXP 28
14293: PPUSH
14294: LD_STRING D10a-Pop-1
14296: PPUSH
14297: CALL_OW 88
// Say ( bur , D10a-Bur-2 ) ;
14301: LD_EXP 29
14305: PPUSH
14306: LD_STRING D10a-Bur-2
14308: PPUSH
14309: CALL_OW 88
// Say ( pop , D10a-Pop-2 ) ;
14313: LD_EXP 28
14317: PPUSH
14318: LD_STRING D10a-Pop-2
14320: PPUSH
14321: CALL_OW 88
// Say ( bur , D10a-Bur-3 ) ;
14325: LD_EXP 29
14329: PPUSH
14330: LD_STRING D10a-Bur-3
14332: PPUSH
14333: CALL_OW 88
// Say ( pop , D10a-Pop-3 ) ;
14337: LD_EXP 28
14341: PPUSH
14342: LD_STRING D10a-Pop-3
14344: PPUSH
14345: CALL_OW 88
// Say ( bur , D10a-Bur-4 ) ;
14349: LD_EXP 29
14353: PPUSH
14354: LD_STRING D10a-Bur-4
14356: PPUSH
14357: CALL_OW 88
// Say ( pop , D10a-Pop-4 ) ;
14361: LD_EXP 28
14365: PPUSH
14366: LD_STRING D10a-Pop-4
14368: PPUSH
14369: CALL_OW 88
// Say ( bur , D10a-Bur-5 ) ;
14373: LD_EXP 29
14377: PPUSH
14378: LD_STRING D10a-Bur-5
14380: PPUSH
14381: CALL_OW 88
// Say ( pop , D10a-Pop-5 ) ;
14385: LD_EXP 28
14389: PPUSH
14390: LD_STRING D10a-Pop-5
14392: PPUSH
14393: CALL_OW 88
// end ;
14397: LD_VAR 0 1
14401: RET
// function dialog_popov_bez_burlaka ; var pom ; begin
14402: LD_INT 0
14404: PPUSH
14405: PPUSH
// pom = FilterUnitsInArea ( Pop_area , [ [ f_side , You ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) ;
14406: LD_ADDR_VAR 0 2
14410: PUSH
14411: LD_INT 15
14413: PPUSH
14414: LD_INT 22
14416: PUSH
14417: LD_EXP 1
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: LD_INT 21
14428: PUSH
14429: LD_INT 1
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PUSH
14436: LD_INT 26
14438: PUSH
14439: LD_INT 1
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: LIST
14450: PPUSH
14451: CALL_OW 70
14455: ST_TO_ADDR
// if pom = 0 then
14456: LD_VAR 0 2
14460: PUSH
14461: LD_INT 0
14463: EQUAL
14464: IFFALSE 14468
// exit ;
14466: GO 14588
// Say ( pom , D10b-RSol1-1 ) ;
14468: LD_VAR 0 2
14472: PPUSH
14473: LD_STRING D10b-RSol1-1
14475: PPUSH
14476: CALL_OW 88
// Say ( pop , D10b-Pop-1 ) ;
14480: LD_EXP 28
14484: PPUSH
14485: LD_STRING D10b-Pop-1
14487: PPUSH
14488: CALL_OW 88
// Say ( pom , D10b-RSol1-2 ) ;
14492: LD_VAR 0 2
14496: PPUSH
14497: LD_STRING D10b-RSol1-2
14499: PPUSH
14500: CALL_OW 88
// SayRadio ( pop , D10b-Pop-2 ) ;
14504: LD_EXP 28
14508: PPUSH
14509: LD_STRING D10b-Pop-2
14511: PPUSH
14512: CALL_OW 94
// Say ( bur , D10b-Bur-2 ) ;
14516: LD_EXP 29
14520: PPUSH
14521: LD_STRING D10b-Bur-2
14523: PPUSH
14524: CALL_OW 88
// SayRadio ( pop , D10b-Pop-3 ) ;
14528: LD_EXP 28
14532: PPUSH
14533: LD_STRING D10b-Pop-3
14535: PPUSH
14536: CALL_OW 94
// Say ( bur , D10b-Bur-3 ) ;
14540: LD_EXP 29
14544: PPUSH
14545: LD_STRING D10b-Bur-3
14547: PPUSH
14548: CALL_OW 88
// SayRadio ( pop , D10b-Pop-4 ) ;
14552: LD_EXP 28
14556: PPUSH
14557: LD_STRING D10b-Pop-4
14559: PPUSH
14560: CALL_OW 94
// Say ( bur , D10b-Bur-4 ) ;
14564: LD_EXP 29
14568: PPUSH
14569: LD_STRING D10b-Bur-4
14571: PPUSH
14572: CALL_OW 88
// SayRadio ( pop , D10b-Pop-5 ) ;
14576: LD_EXP 28
14580: PPUSH
14581: LD_STRING D10b-Pop-5
14583: PPUSH
14584: CALL_OW 94
// end ;
14588: LD_VAR 0 1
14592: RET
// every 0 0$1 trigger stav_omikron in [ 0 , 1 , 2 , 3 ] do var pom , i , upoz , pom1 , pom2 , pom3 ; var dr_pom1 , dr_pom2 , dr_pom3 ; var dr_pom ;
14593: LD_EXP 39
14597: PUSH
14598: LD_INT 0
14600: PUSH
14601: LD_INT 1
14603: PUSH
14604: LD_INT 2
14606: PUSH
14607: LD_INT 3
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: IN
14616: IFFALSE 15408
14618: GO 14620
14620: DISABLE
14621: LD_INT 0
14623: PPUSH
14624: PPUSH
14625: PPUSH
14626: PPUSH
14627: PPUSH
14628: PPUSH
14629: PPUSH
14630: PPUSH
14631: PPUSH
14632: PPUSH
// begin upoz = false ;
14633: LD_ADDR_VAR 0 3
14637: PUSH
14638: LD_INT 0
14640: ST_TO_ADDR
// pom = FilterUnitsInArea ( Om_attack , [ [ f_side , You ] , f_not , [ f_type , unit_building ] ] ) ;
14641: LD_ADDR_VAR 0 1
14645: PUSH
14646: LD_INT 17
14648: PPUSH
14649: LD_INT 22
14651: PUSH
14652: LD_EXP 1
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: PUSH
14661: LD_INT 3
14663: PUSH
14664: LD_INT 21
14666: PUSH
14667: LD_INT 3
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: LIST
14678: PPUSH
14679: CALL_OW 70
14683: ST_TO_ADDR
// dr_pom = FilterUnitsInArea ( Om_attack , [ [ f_side , You ] , [ f_type , unit_building ] ] ) ;
14684: LD_ADDR_VAR 0 10
14688: PUSH
14689: LD_INT 17
14691: PPUSH
14692: LD_INT 22
14694: PUSH
14695: LD_EXP 1
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: LD_INT 21
14706: PUSH
14707: LD_INT 3
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PPUSH
14718: CALL_OW 70
14722: ST_TO_ADDR
// for i in dr_pom do
14723: LD_ADDR_VAR 0 2
14727: PUSH
14728: LD_VAR 0 10
14732: PUSH
14733: FOR_IN
14734: IFFALSE 14759
// pom = pom union UnitsInside ( i ) ;
14736: LD_ADDR_VAR 0 1
14740: PUSH
14741: LD_VAR 0 1
14745: PUSH
14746: LD_VAR 0 2
14750: PPUSH
14751: CALL_OW 313
14755: UNION
14756: ST_TO_ADDR
14757: GO 14733
14759: POP
14760: POP
// if pom then
14761: LD_VAR 0 1
14765: IFFALSE 14814
// for i in pom do
14767: LD_ADDR_VAR 0 2
14771: PUSH
14772: LD_VAR 0 1
14776: PUSH
14777: FOR_IN
14778: IFFALSE 14812
// if Getside ( Attacks ( i ) ) = Amici then
14780: LD_VAR 0 2
14784: PPUSH
14785: CALL_OW 320
14789: PPUSH
14790: CALL_OW 255
14794: PUSH
14795: LD_EXP 4
14799: EQUAL
14800: IFFALSE 14810
// upoz = true ;
14802: LD_ADDR_VAR 0 3
14806: PUSH
14807: LD_INT 1
14809: ST_TO_ADDR
14810: GO 14777
14812: POP
14813: POP
// if upoz then
14814: LD_VAR 0 3
14818: IFFALSE 15407
// begin DialogueOn ;
14820: CALL_OW 6
// interface_hidden := true ;
14824: LD_ADDR_OWVAR 54
14828: PUSH
14829: LD_INT 1
14831: ST_TO_ADDR
// if IsOK ( gny ) then
14832: LD_EXP 31
14836: PPUSH
14837: CALL_OW 302
14841: IFFALSE 14869
// begin Say ( gny , D11-Gny-1 ) ;
14843: LD_EXP 31
14847: PPUSH
14848: LD_STRING D11-Gny-1
14850: PPUSH
14851: CALL_OW 88
// Say ( bur , D11-Bur-1 ) ;
14855: LD_EXP 29
14859: PPUSH
14860: LD_STRING D11-Bur-1
14862: PPUSH
14863: CALL_OW 88
// end else
14867: GO 14881
// SayRadio ( kur , D11-Kur-1 ) ;
14869: LD_EXP 27
14873: PPUSH
14874: LD_STRING D11-Kur-1
14876: PPUSH
14877: CALL_OW 94
// interface_hidden := true ;
14881: LD_ADDR_OWVAR 54
14885: PUSH
14886: LD_INT 1
14888: ST_TO_ADDR
// DialogueOff ;
14889: CALL_OW 7
// InGameOn ;
14893: CALL_OW 8
// repeat pom1 = FilterUnitsInArea ( om_at_1 , [ [ f_side , you ] , f_not , [ f_type , unit_building ] ] ) ;
14897: LD_ADDR_VAR 0 4
14901: PUSH
14902: LD_INT 18
14904: PPUSH
14905: LD_INT 22
14907: PUSH
14908: LD_EXP 1
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: LD_INT 3
14919: PUSH
14920: LD_INT 21
14922: PUSH
14923: LD_INT 3
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: LIST
14934: PPUSH
14935: CALL_OW 70
14939: ST_TO_ADDR
// dr_pom1 = FilterUnitsInArea ( om_at_1 , [ [ f_side , you ] , [ f_type , unit_building ] ] ) ;
14940: LD_ADDR_VAR 0 7
14944: PUSH
14945: LD_INT 18
14947: PPUSH
14948: LD_INT 22
14950: PUSH
14951: LD_EXP 1
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PUSH
14960: LD_INT 21
14962: PUSH
14963: LD_INT 3
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PPUSH
14974: CALL_OW 70
14978: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( om_at_2 , [ [ f_side , you ] , f_not , [ f_type , unit_building ] ] ) ;
14979: LD_ADDR_VAR 0 5
14983: PUSH
14984: LD_INT 19
14986: PPUSH
14987: LD_INT 22
14989: PUSH
14990: LD_EXP 1
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 3
15001: PUSH
15002: LD_INT 21
15004: PUSH
15005: LD_INT 3
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: LIST
15016: PPUSH
15017: CALL_OW 70
15021: ST_TO_ADDR
// dr_pom2 = FilterUnitsInArea ( om_at_2 , [ [ f_side , you ] , [ f_type , unit_building ] ] ) ;
15022: LD_ADDR_VAR 0 8
15026: PUSH
15027: LD_INT 19
15029: PPUSH
15030: LD_INT 22
15032: PUSH
15033: LD_EXP 1
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PUSH
15042: LD_INT 21
15044: PUSH
15045: LD_INT 3
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PPUSH
15056: CALL_OW 70
15060: ST_TO_ADDR
// pom3 = FilterUnitsInArea ( om_at_3 , [ [ f_side , you ] , f_not , [ f_type , unit_building ] ] ) ;
15061: LD_ADDR_VAR 0 6
15065: PUSH
15066: LD_INT 37
15068: PPUSH
15069: LD_INT 22
15071: PUSH
15072: LD_EXP 1
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 3
15083: PUSH
15084: LD_INT 21
15086: PUSH
15087: LD_INT 3
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: LIST
15098: PPUSH
15099: CALL_OW 70
15103: ST_TO_ADDR
// dr_pom3 = FilterUnitsInArea ( om_at_3 , [ [ f_side , you ] , [ f_type , unit_building ] ] ) ;
15104: LD_ADDR_VAR 0 9
15108: PUSH
15109: LD_INT 37
15111: PPUSH
15112: LD_INT 22
15114: PUSH
15115: LD_EXP 1
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: LD_INT 21
15126: PUSH
15127: LD_INT 3
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PPUSH
15138: CALL_OW 70
15142: ST_TO_ADDR
// ComMoveToArea ( pom1 , om_ven_3 ) ;
15143: LD_VAR 0 4
15147: PPUSH
15148: LD_INT 31
15150: PPUSH
15151: CALL_OW 113
// for i in dr_pom1 do
15155: LD_ADDR_VAR 0 2
15159: PUSH
15160: LD_VAR 0 7
15164: PUSH
15165: FOR_IN
15166: IFFALSE 15206
// begin dr_pom = UnitsInside ( i ) ;
15168: LD_ADDR_VAR 0 10
15172: PUSH
15173: LD_VAR 0 2
15177: PPUSH
15178: CALL_OW 313
15182: ST_TO_ADDR
// ComExitBuilding ( dr_pom ) ;
15183: LD_VAR 0 10
15187: PPUSH
15188: CALL_OW 122
// AddComMoveToArea ( dr_pom , om_ven_1 ) ;
15192: LD_VAR 0 10
15196: PPUSH
15197: LD_INT 29
15199: PPUSH
15200: CALL_OW 173
// end ;
15204: GO 15165
15206: POP
15207: POP
// ComMoveToArea ( pom2 , om_zone ) ;
15208: LD_VAR 0 5
15212: PPUSH
15213: LD_INT 8
15215: PPUSH
15216: CALL_OW 113
// for i in dr_pom2 do
15220: LD_ADDR_VAR 0 2
15224: PUSH
15225: LD_VAR 0 8
15229: PUSH
15230: FOR_IN
15231: IFFALSE 15271
// begin dr_pom = UnitsInside ( i ) ;
15233: LD_ADDR_VAR 0 10
15237: PUSH
15238: LD_VAR 0 2
15242: PPUSH
15243: CALL_OW 313
15247: ST_TO_ADDR
// ComExitBuilding ( dr_pom ) ;
15248: LD_VAR 0 10
15252: PPUSH
15253: CALL_OW 122
// AddComMoveToArea ( dr_pom , om_ven_2 ) ;
15257: LD_VAR 0 10
15261: PPUSH
15262: LD_INT 30
15264: PPUSH
15265: CALL_OW 173
// end ;
15269: GO 15230
15271: POP
15272: POP
// ComMoveToArea ( pom3 , om_zone ) ;
15273: LD_VAR 0 6
15277: PPUSH
15278: LD_INT 8
15280: PPUSH
15281: CALL_OW 113
// for i in dr_pom3 do
15285: LD_ADDR_VAR 0 2
15289: PUSH
15290: LD_VAR 0 9
15294: PUSH
15295: FOR_IN
15296: IFFALSE 15336
// begin dr_pom = UnitsInside ( i ) ;
15298: LD_ADDR_VAR 0 10
15302: PUSH
15303: LD_VAR 0 2
15307: PPUSH
15308: CALL_OW 313
15312: ST_TO_ADDR
// ComExitBuilding ( dr_pom ) ;
15313: LD_VAR 0 10
15317: PPUSH
15318: CALL_OW 122
// AddComMoveToArea ( dr_pom , om_ven_3 ) ;
15322: LD_VAR 0 10
15326: PPUSH
15327: LD_INT 31
15329: PPUSH
15330: CALL_OW 173
// end ;
15334: GO 15295
15336: POP
15337: POP
// wait ( 0 0$3 ) ;
15338: LD_INT 105
15340: PPUSH
15341: CALL_OW 67
// until not ( pom1 or pom3 or pom3 ) ;
15345: LD_VAR 0 4
15349: PUSH
15350: LD_VAR 0 6
15354: OR
15355: PUSH
15356: LD_VAR 0 6
15360: OR
15361: NOT
15362: IFFALSE 14897
// wait ( 0 0$4 ) ;
15364: LD_INT 140
15366: PPUSH
15367: CALL_OW 67
// if dr_pom3 then
15371: LD_VAR 0 9
15375: IFFALSE 15403
// for i in dr_pom3 do
15377: LD_ADDR_VAR 0 2
15381: PUSH
15382: LD_VAR 0 9
15386: PUSH
15387: FOR_IN
15388: IFFALSE 15401
// KillUnit ( i ) ;
15390: LD_VAR 0 2
15394: PPUSH
15395: CALL_OW 66
15399: GO 15387
15401: POP
15402: POP
// InGameOff ;
15403: CALL_OW 9
// end ; enable ;
15407: ENABLE
// end ;
15408: PPOPN 10
15410: END
// every 1 trigger stav_omikron in [ 4 , 5 , 6 ] do var pom , pom1 , pom2 , i , AreaNotCleared , firstDialog ;
15411: LD_EXP 39
15415: PUSH
15416: LD_INT 4
15418: PUSH
15419: LD_INT 5
15421: PUSH
15422: LD_INT 6
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: LIST
15429: IN
15430: IFFALSE 15590
15432: GO 15434
15434: DISABLE
15435: LD_INT 0
15437: PPUSH
15438: PPUSH
15439: PPUSH
15440: PPUSH
15441: PPUSH
15442: PPUSH
// begin enable ;
15443: ENABLE
// pom = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_human ] , [ f_side , 3 ] ] ) ;
15444: LD_ADDR_VAR 0 1
15448: PUSH
15449: LD_INT 20
15451: PPUSH
15452: LD_INT 21
15454: PUSH
15455: LD_INT 1
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PUSH
15462: LD_INT 22
15464: PUSH
15465: LD_INT 3
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PPUSH
15476: CALL_OW 70
15480: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Om_ven , [ [ f_type , unit_vehicle ] , [ f_side , 3 ] ] ) ;
15481: LD_ADDR_VAR 0 3
15485: PUSH
15486: LD_INT 20
15488: PPUSH
15489: LD_INT 21
15491: PUSH
15492: LD_INT 2
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 22
15501: PUSH
15502: LD_INT 3
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PPUSH
15513: CALL_OW 70
15517: ST_TO_ADDR
// if pom or pom2 then
15518: LD_VAR 0 1
15522: PUSH
15523: LD_VAR 0 3
15527: OR
15528: IFFALSE 15590
// begin ComMoveXY ( pom , 62 , 16 ) ;
15530: LD_VAR 0 1
15534: PPUSH
15535: LD_INT 62
15537: PPUSH
15538: LD_INT 16
15540: PPUSH
15541: CALL_OW 111
// ComMoveXY ( pom2 , 62 , 16 ) ;
15545: LD_VAR 0 3
15549: PPUSH
15550: LD_INT 62
15552: PPUSH
15553: LD_INT 16
15555: PPUSH
15556: CALL_OW 111
// if KurinDialog = 0 then
15560: LD_EXP 6
15564: PUSH
15565: LD_INT 0
15567: EQUAL
15568: IFFALSE 15590
// begin KurinDialog = 1 ;
15570: LD_ADDR_EXP 6
15574: PUSH
15575: LD_INT 1
15577: ST_TO_ADDR
// Say ( kur , D12-Kur-1 ) ;
15578: LD_EXP 27
15582: PPUSH
15583: LD_STRING D12-Kur-1
15585: PPUSH
15586: CALL_OW 88
// end ; end ; end ;
15590: PPOPN 6
15592: END
// export function hlaska_lhani ; begin
15593: LD_INT 0
15595: PPUSH
// DialogueOn ;
15596: CALL_OW 6
// interface_hidden := true ;
15600: LD_ADDR_OWVAR 54
15604: PUSH
15605: LD_INT 1
15607: ST_TO_ADDR
// Say ( kur , D6d-Kur-1 ) ;
15608: LD_EXP 27
15612: PPUSH
15613: LD_STRING D6d-Kur-1
15615: PPUSH
15616: CALL_OW 88
// interface_hidden := false ;
15620: LD_ADDR_OWVAR 54
15624: PUSH
15625: LD_INT 0
15627: ST_TO_ADDR
// DialogueOff ;
15628: CALL_OW 7
// end ;
15632: LD_VAR 0 1
15636: RET
// export function dialog_upoz ; begin
15637: LD_INT 0
15639: PPUSH
// DialogueOn ;
15640: CALL_OW 6
// interface_hidden := true ;
15644: LD_ADDR_OWVAR 54
15648: PUSH
15649: LD_INT 1
15651: ST_TO_ADDR
// SayRadio ( kur , D7a-Kur-1 ) ;
15652: LD_EXP 27
15656: PPUSH
15657: LD_STRING D7a-Kur-1
15659: PPUSH
15660: CALL_OW 94
// interface_hidden := false ;
15664: LD_ADDR_OWVAR 54
15668: PUSH
15669: LD_INT 0
15671: ST_TO_ADDR
// DialogueOff ;
15672: CALL_OW 7
// end ;
15676: LD_VAR 0 1
15680: RET
// every 0 0$1 do var pom , i ; var Ru_Units ;
15681: GO 15683
15683: DISABLE
15684: LD_INT 0
15686: PPUSH
15687: PPUSH
15688: PPUSH
// begin Ru_Units = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15689: LD_ADDR_VAR 0 3
15693: PUSH
15694: LD_INT 22
15696: PUSH
15697: LD_EXP 1
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: LD_INT 2
15708: PUSH
15709: LD_INT 21
15711: PUSH
15712: LD_INT 1
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: LD_INT 21
15721: PUSH
15722: LD_INT 2
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: LIST
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PPUSH
15738: CALL_OW 69
15742: ST_TO_ADDR
// for i in Ru_Units do
15743: LD_ADDR_VAR 0 2
15747: PUSH
15748: LD_VAR 0 3
15752: PUSH
15753: FOR_IN
15754: IFFALSE 15861
// begin pom = Attacks ( i ) ;
15756: LD_ADDR_VAR 0 1
15760: PUSH
15761: LD_VAR 0 2
15765: PPUSH
15766: CALL_OW 320
15770: ST_TO_ADDR
// if pom <> 0 then
15771: LD_VAR 0 1
15775: PUSH
15776: LD_INT 0
15778: NONEQUAL
15779: IFFALSE 15821
// if Getside ( pom ) in [ You2 , You3 ] then
15781: LD_VAR 0 1
15785: PPUSH
15786: CALL_OW 255
15790: PUSH
15791: LD_EXP 2
15795: PUSH
15796: LD_EXP 3
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: IN
15805: IFFALSE 15821
// konstanta_utoceni = konstanta_utoceni + 1 ;
15807: LD_ADDR_EXP 49
15811: PUSH
15812: LD_EXP 49
15816: PUSH
15817: LD_INT 1
15819: PLUS
15820: ST_TO_ADDR
// if pom = pop or pom = kur then
15821: LD_VAR 0 1
15825: PUSH
15826: LD_EXP 28
15830: EQUAL
15831: PUSH
15832: LD_VAR 0 1
15836: PUSH
15837: LD_EXP 27
15841: EQUAL
15842: OR
15843: IFFALSE 15859
// konstanta_utoceni = konstanta_utoceni + 10 ;
15845: LD_ADDR_EXP 49
15849: PUSH
15850: LD_EXP 49
15854: PUSH
15855: LD_INT 10
15857: PLUS
15858: ST_TO_ADDR
// end ;
15859: GO 15753
15861: POP
15862: POP
// if konstanta_utoceni < 10 then
15863: LD_EXP 49
15867: PUSH
15868: LD_INT 10
15870: LESS
15871: IFFALSE 15874
// enable ;
15873: ENABLE
// end ;
15874: PPOPN 3
15876: END
// every 0 0$1 trigger konstanta_utoceni >= 10 do
15877: LD_EXP 49
15881: PUSH
15882: LD_INT 10
15884: GREATEREQUAL
15885: IFFALSE 15894
15887: GO 15889
15889: DISABLE
// begin konec_mise_utok ;
15890: CALL 1474 0 0
// end ;
15894: END
// every 0 0$1 trigger stav_omikron < 6 and not FilterAllUnits ( [ f_side , 2 ] ) and ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 999 ] ] ] ) or GetLives ( kur ) < 999 ) do
15895: LD_EXP 39
15899: PUSH
15900: LD_INT 6
15902: LESS
15903: PUSH
15904: LD_INT 22
15906: PUSH
15907: LD_INT 2
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PPUSH
15914: CALL_OW 69
15918: NOT
15919: AND
15920: PUSH
15921: LD_INT 22
15923: PUSH
15924: LD_INT 6
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: PUSH
15931: LD_INT 21
15933: PUSH
15934: LD_INT 3
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: PUSH
15941: LD_INT 3
15943: PUSH
15944: LD_INT 24
15946: PUSH
15947: LD_INT 999
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: LIST
15962: PPUSH
15963: CALL_OW 69
15967: PUSH
15968: LD_EXP 27
15972: PPUSH
15973: CALL_OW 256
15977: PUSH
15978: LD_INT 999
15980: LESS
15981: OR
15982: AND
15983: IFFALSE 15992
15985: GO 15987
15987: DISABLE
// konec_mise_utok ;
15988: CALL 1474 0 0
15992: END
// export function dialog_scholtze_umrel ; var i , pom , pom1 ; begin
15993: LD_INT 0
15995: PPUSH
15996: PPUSH
15997: PPUSH
15998: PPUSH
// pom = 0 ;
15999: LD_ADDR_VAR 0 3
16003: PUSH
16004: LD_INT 0
16006: ST_TO_ADDR
// DialogueOn ;
16007: CALL_OW 6
// interface_hidden := true ;
16011: LD_ADDR_OWVAR 54
16015: PUSH
16016: LD_INT 1
16018: ST_TO_ADDR
// ForceSay ( schol2 , D4b-Sch-1 ) ;
16019: LD_EXP 34
16023: PPUSH
16024: LD_STRING D4b-Sch-1
16026: PPUSH
16027: CALL_OW 91
// pom = FilterAllUnits ( [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
16031: LD_ADDR_VAR 0 3
16035: PUSH
16036: LD_INT 22
16038: PUSH
16039: LD_EXP 4
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: PUSH
16048: LD_INT 21
16050: PUSH
16051: LD_INT 1
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PPUSH
16062: CALL_OW 69
16066: ST_TO_ADDR
// pom1 = NearestUnitToUnit ( pom , schol2 ) ;
16067: LD_ADDR_VAR 0 4
16071: PUSH
16072: LD_VAR 0 3
16076: PPUSH
16077: LD_EXP 34
16081: PPUSH
16082: CALL_OW 74
16086: ST_TO_ADDR
// if pom1 <> 0 then
16087: LD_VAR 0 4
16091: PUSH
16092: LD_INT 0
16094: NONEQUAL
16095: IFFALSE 16109
// SayNoName ( pom1 , D4b-Sol1-1 ) ;
16097: LD_VAR 0 4
16101: PPUSH
16102: LD_STRING D4b-Sol1-1
16104: PPUSH
16105: CALL_OW 90
// pom1 = NearestUnitToUnit ( pom diff pom1 , pom1 ) ;
16109: LD_ADDR_VAR 0 4
16113: PUSH
16114: LD_VAR 0 3
16118: PUSH
16119: LD_VAR 0 4
16123: DIFF
16124: PPUSH
16125: LD_VAR 0 4
16129: PPUSH
16130: CALL_OW 74
16134: ST_TO_ADDR
// SayNoName ( pom1 , D4b-Sol2-1 ) ;
16135: LD_VAR 0 4
16139: PPUSH
16140: LD_STRING D4b-Sol2-1
16142: PPUSH
16143: CALL_OW 90
// ForceSay ( schol2 , D4b-Sch-2 ) ;
16147: LD_EXP 34
16151: PPUSH
16152: LD_STRING D4b-Sch-2
16154: PPUSH
16155: CALL_OW 91
// Say ( bur , D4b-Bur-2 ) ;
16159: LD_EXP 29
16163: PPUSH
16164: LD_STRING D4b-Bur-2
16166: PPUSH
16167: CALL_OW 88
// SetLives ( schol2 , 0 ) ;
16171: LD_EXP 34
16175: PPUSH
16176: LD_INT 0
16178: PPUSH
16179: CALL_OW 234
// ChangeMissionObjectives ( MScholtzeDel ) ;
16183: LD_STRING MScholtzeDel
16185: PPUSH
16186: CALL_OW 337
// interface_hidden := false ;
16190: LD_ADDR_OWVAR 54
16194: PUSH
16195: LD_INT 0
16197: ST_TO_ADDR
// DialogueOff ;
16198: CALL_OW 7
// end ;
16202: LD_VAR 0 1
16206: RET
// on UnitGoesToRed ( un ) do begin if un = schol2 then
16207: LD_VAR 0 1
16211: PUSH
16212: LD_EXP 34
16216: EQUAL
16217: IFFALSE 16233
// if kecy_scholtze_nalezen then
16219: LD_EXP 44
16223: IFFALSE 16229
// exit else
16225: GO 16233
16227: GO 16233
// dialog_scholtze_umrel ;
16229: CALL 15993 0 0
// end ;
16233: PPOPN 1
16235: END
// every 0 0$2 trigger FilterUnitsInArea ( noTracksArea , [ [ f_side , You ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] , [ f_chassis , us_light_wheeled ] , [ f_chassis , us_medium_wheeled ] ] ] ) and stav_omikron in [ 0 , 1 , 2 , 3 ] do
16236: LD_INT 53
16238: PPUSH
16239: LD_INT 22
16241: PUSH
16242: LD_EXP 1
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: LD_INT 2
16253: PUSH
16254: LD_INT 31
16256: PUSH
16257: LD_INT 21
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: PUSH
16264: LD_INT 31
16266: PUSH
16267: LD_INT 23
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PUSH
16274: LD_INT 31
16276: PUSH
16277: LD_INT 1
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 31
16286: PUSH
16287: LD_INT 2
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PPUSH
16305: CALL_OW 70
16309: PUSH
16310: LD_EXP 39
16314: PUSH
16315: LD_INT 0
16317: PUSH
16318: LD_INT 1
16320: PUSH
16321: LD_INT 2
16323: PUSH
16324: LD_INT 3
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: IN
16333: AND
16334: IFFALSE 16361
16336: GO 16338
16338: DISABLE
// begin CenterOnXY ( 38 , 58 ) ;
16339: LD_INT 38
16341: PPUSH
16342: LD_INT 58
16344: PPUSH
16345: CALL_OW 84
// Say ( bur , D5a-Bur-1 ) ;
16349: LD_EXP 29
16353: PPUSH
16354: LD_STRING D5a-Bur-1
16356: PPUSH
16357: CALL_OW 88
// end ;
16361: END
// on BuildingStarted ( b , builder ) do begin if b in FilterUnitsInArea ( restrictedArea , [ f_side , 3 ] ) then
16362: LD_VAR 0 1
16366: PUSH
16367: LD_INT 54
16369: PPUSH
16370: LD_INT 22
16372: PUSH
16373: LD_INT 3
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PPUSH
16380: CALL_OW 70
16384: IN
16385: IFFALSE 16396
// RemoveUnit ( b ) ;
16387: LD_VAR 0 1
16391: PPUSH
16392: CALL_OW 64
// end ;
16396: PPOPN 2
16398: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_oil_power ] ] ) > 0 do var pom ;
16399: LD_INT 22
16401: PUSH
16402: LD_EXP 1
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: LD_INT 30
16413: PUSH
16414: LD_INT 26
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PPUSH
16425: CALL_OW 69
16429: PUSH
16430: LD_INT 0
16432: GREATER
16433: IFFALSE 16525
16435: GO 16437
16437: DISABLE
16438: LD_INT 0
16440: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_oil_mine ] ] ) ;
16441: LD_ADDR_VAR 0 1
16445: PUSH
16446: LD_INT 22
16448: PUSH
16449: LD_EXP 1
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PUSH
16458: LD_INT 30
16460: PUSH
16461: LD_INT 29
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PPUSH
16472: CALL_OW 69
16476: ST_TO_ADDR
// if pom > 0 then
16477: LD_VAR 0 1
16481: PUSH
16482: LD_INT 0
16484: GREATER
16485: IFFALSE 16524
// begin while IsConstructed ( pom [ 1 ] ) <> 0 do
16487: LD_VAR 0 1
16491: PUSH
16492: LD_INT 1
16494: ARRAY
16495: PPUSH
16496: CALL_OW 304
16500: PUSH
16501: LD_INT 0
16503: NONEQUAL
16504: IFFALSE 16515
// wait ( 0 0$1 ) ;
16506: LD_INT 35
16508: PPUSH
16509: CALL_OW 67
16513: GO 16487
// Hint ( PowerPlant ) ;
16515: LD_STRING PowerPlant
16517: PPUSH
16518: CALL_OW 339
// end else
16522: GO 16525
// enable ;
16524: ENABLE
// end ;
16525: PPOPN 1
16527: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) > 1 do var pom , pom1 ; var i ; var pocet ;
16528: LD_INT 22
16530: PUSH
16531: LD_EXP 1
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: LD_INT 30
16542: PUSH
16543: LD_INT 0
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PPUSH
16554: CALL_OW 69
16558: PUSH
16559: LD_INT 1
16561: GREATER
16562: IFFALSE 16722
16564: GO 16566
16566: DISABLE
16567: LD_INT 0
16569: PPUSH
16570: PPUSH
16571: PPUSH
16572: PPUSH
// begin pocet = 0 ;
16573: LD_ADDR_VAR 0 4
16577: PUSH
16578: LD_INT 0
16580: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_depot ] ] ) ;
16581: LD_ADDR_VAR 0 1
16585: PUSH
16586: LD_INT 22
16588: PUSH
16589: LD_EXP 1
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 30
16600: PUSH
16601: LD_INT 0
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: PPUSH
16612: CALL_OW 69
16616: ST_TO_ADDR
// pom1 = pom ;
16617: LD_ADDR_VAR 0 2
16621: PUSH
16622: LD_VAR 0 1
16626: ST_TO_ADDR
// while pocet < 2 do
16627: LD_VAR 0 4
16631: PUSH
16632: LD_INT 2
16634: LESS
16635: IFFALSE 16715
// begin for i in pom do
16637: LD_ADDR_VAR 0 3
16641: PUSH
16642: LD_VAR 0 1
16646: PUSH
16647: FOR_IN
16648: IFFALSE 16694
// if not IsConstructed ( i ) then
16650: LD_VAR 0 3
16654: PPUSH
16655: CALL_OW 304
16659: NOT
16660: IFFALSE 16692
// begin pocet = pocet + 1 ;
16662: LD_ADDR_VAR 0 4
16666: PUSH
16667: LD_VAR 0 4
16671: PUSH
16672: LD_INT 1
16674: PLUS
16675: ST_TO_ADDR
// pom1 = pom1 diff i ;
16676: LD_ADDR_VAR 0 2
16680: PUSH
16681: LD_VAR 0 2
16685: PUSH
16686: LD_VAR 0 3
16690: DIFF
16691: ST_TO_ADDR
// end ;
16692: GO 16647
16694: POP
16695: POP
// pom = pom1 ;
16696: LD_ADDR_VAR 0 1
16700: PUSH
16701: LD_VAR 0 2
16705: ST_TO_ADDR
// wait ( 0 0$2 ) ;
16706: LD_INT 70
16708: PPUSH
16709: CALL_OW 67
// end ;
16713: GO 16627
// Hint ( Transport1 ) ;
16715: LD_STRING Transport1
16717: PPUSH
16718: CALL_OW 339
// end ;
16722: PPOPN 4
16724: END
// export function chmo_6 ; begin
16725: LD_INT 0
16727: PPUSH
// ChangeMissionObjectives ( M6a ) ;
16728: LD_STRING M6a
16730: PPUSH
16731: CALL_OW 337
// end ;
16735: LD_VAR 0 1
16739: RET
// export function query_refuel ; begin
16740: LD_INT 0
16742: PPUSH
// Query ( QRefuel ) ;
16743: LD_STRING QRefuel
16745: PPUSH
16746: CALL_OW 97
// end ;
16750: LD_VAR 0 1
16754: RET
// every 0 0$6 do var pom ;
16755: GO 16757
16757: DISABLE
16758: LD_INT 0
16760: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
16761: LD_ADDR_VAR 0 1
16765: PUSH
16766: LD_INT 22
16768: PUSH
16769: LD_EXP 1
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 21
16780: PUSH
16781: LD_INT 1
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PPUSH
16792: CALL_OW 69
16796: ST_TO_ADDR
// if postavenych_aut >= pom then
16797: LD_EXP 47
16801: PUSH
16802: LD_VAR 0 1
16806: GREATEREQUAL
16807: IFFALSE 16818
// ChangeMissionObjectives ( M3a ) else
16809: LD_STRING M3a
16811: PPUSH
16812: CALL_OW 337
16816: GO 16819
// enable ;
16818: ENABLE
// end ;
16819: PPOPN 1
16821: END
// export function hint_cerpaci_auta ; begin
16822: LD_INT 0
16824: PPUSH
// Hint ( refuelingtrucks ) ;
16825: LD_STRING refuelingtrucks
16827: PPUSH
16828: CALL_OW 339
// end ; end_of_file
16832: LD_VAR 0 1
16836: RET
// export AMERICKA_POMOC_HLIDCE_LIST ; export AMERICKE_POSILY1_LIST ; export AMERICKE_POSILY2_LIST ; export AMERICKE_POSILY3_LIST ; export AMERICKE_POSILY4_LIST ; export AMERICKE_POSILY11_LIST ; export RUSKE_POSILY_NA_OMICRON_LIST ; export RUSKE_POSILY_RIDICI_LIST ; export RU_posily_na_utek ; export RUSI_CERPACI_AUTA_LIST ; export ARABI_KAMIKADZE_LIST ; export ARABI_PRVNI_VLNA ; export ARABI_FLAME_LIST ; export ARABI_SELF_AUTA ; export ARABI_VOJACI ; export ARABI_doraz ; export ARABI_KIROV_POSILY ; export Arabi_komanda1 ; export Arabi_komanda2 ; export Arabi_komanda3 ; export Arabi_komanda4 ; export other_survivors_mise_2 ; var ah , av ; export function get_sex ; begin
16837: LD_INT 0
16839: PPUSH
// if Prob ( 20 ) then
16840: LD_INT 20
16842: PPUSH
16843: CALL_OW 13
16847: IFFALSE 16859
// result = sex_female else
16849: LD_ADDR_VAR 0 1
16853: PUSH
16854: LD_INT 2
16856: ST_TO_ADDR
16857: GO 16867
// result = sex_male ;
16859: LD_ADDR_VAR 0 1
16863: PUSH
16864: LD_INT 1
16866: ST_TO_ADDR
// end ;
16867: LD_VAR 0 1
16871: RET
// export function get_human ( sex , clas , level , name ) ; begin
16872: LD_INT 0
16874: PPUSH
// PrepareHuman ( sex , clas , level ) ;
16875: LD_VAR 0 1
16879: PPUSH
16880: LD_VAR 0 2
16884: PPUSH
16885: LD_VAR 0 3
16889: PPUSH
16890: CALL_OW 380
// hc_name := name ;
16894: LD_ADDR_OWVAR 26
16898: PUSH
16899: LD_VAR 0 4
16903: ST_TO_ADDR
// result := CreateHuman ;
16904: LD_ADDR_VAR 0 5
16908: PUSH
16909: CALL_OW 44
16913: ST_TO_ADDR
// end ;
16914: LD_VAR 0 5
16918: RET
// export function create_americka_pomoc_hlidce ; var pom ; begin
16919: LD_INT 0
16921: PPUSH
16922: PPUSH
// pom = [ ] ;
16923: LD_ADDR_VAR 0 2
16927: PUSH
16928: EMPTY
16929: ST_TO_ADDR
// uc_side = Amici ;
16930: LD_ADDR_OWVAR 20
16934: PUSH
16935: LD_EXP 4
16939: ST_TO_ADDR
// uc_nation = nation_american ;
16940: LD_ADDR_OWVAR 21
16944: PUSH
16945: LD_INT 1
16947: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
16948: LD_ADDR_LOC 23
16952: PUSH
16953: CALL 16837 0 0
16957: PPUSH
16958: LD_INT 3
16960: PPUSH
16961: LD_EXP 13
16965: PUSH
16966: LD_OWVAR 67
16970: ARRAY
16971: PPUSH
16972: LD_STRING 
16974: PPUSH
16975: CALL 16872 0 4
16979: ST_TO_ADDR
// case difficulty of 1 :
16980: LD_OWVAR 67
16984: PUSH
16985: LD_INT 1
16987: DOUBLE
16988: EQUAL
16989: IFTRUE 16993
16991: GO 17028
16993: POP
// begin vc_chassis = us_light_wheeled ;
16994: LD_ADDR_OWVAR 37
16998: PUSH
16999: LD_INT 1
17001: ST_TO_ADDR
// vc_control = control_manual ;
17002: LD_ADDR_OWVAR 38
17006: PUSH
17007: LD_INT 1
17009: ST_TO_ADDR
// vc_engine = engine_solar ;
17010: LD_ADDR_OWVAR 39
17014: PUSH
17015: LD_INT 2
17017: ST_TO_ADDR
// vc_weapon = us_light_gun ;
17018: LD_ADDR_OWVAR 40
17022: PUSH
17023: LD_INT 3
17025: ST_TO_ADDR
// end ; 2 :
17026: GO 17115
17028: LD_INT 2
17030: DOUBLE
17031: EQUAL
17032: IFTRUE 17036
17034: GO 17071
17036: POP
// begin vc_chassis = us_light_wheeled ;
17037: LD_ADDR_OWVAR 37
17041: PUSH
17042: LD_INT 1
17044: ST_TO_ADDR
// vc_control = control_manual ;
17045: LD_ADDR_OWVAR 38
17049: PUSH
17050: LD_INT 1
17052: ST_TO_ADDR
// vc_engine = engine_solar ;
17053: LD_ADDR_OWVAR 39
17057: PUSH
17058: LD_INT 2
17060: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
17061: LD_ADDR_OWVAR 40
17065: PUSH
17066: LD_INT 2
17068: ST_TO_ADDR
// end ; 3 :
17069: GO 17115
17071: LD_INT 3
17073: DOUBLE
17074: EQUAL
17075: IFTRUE 17079
17077: GO 17114
17079: POP
// begin vc_chassis = us_medium_wheeled ;
17080: LD_ADDR_OWVAR 37
17084: PUSH
17085: LD_INT 2
17087: ST_TO_ADDR
// vc_control = control_manual ;
17088: LD_ADDR_OWVAR 38
17092: PUSH
17093: LD_INT 1
17095: ST_TO_ADDR
// vc_engine = engine_combustion ;
17096: LD_ADDR_OWVAR 39
17100: PUSH
17101: LD_INT 1
17103: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
17104: LD_ADDR_OWVAR 40
17108: PUSH
17109: LD_INT 4
17111: ST_TO_ADDR
// end ; end ;
17112: GO 17115
17114: POP
// av = CreateVehicle ;
17115: LD_ADDR_LOC 24
17119: PUSH
17120: CALL_OW 45
17124: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
17125: LD_LOC 23
17129: PPUSH
17130: LD_LOC 24
17134: PPUSH
17135: CALL_OW 52
// pom = pom ^ av ;
17139: LD_ADDR_VAR 0 2
17143: PUSH
17144: LD_VAR 0 2
17148: PUSH
17149: LD_LOC 24
17153: ADD
17154: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17155: LD_ADDR_LOC 23
17159: PUSH
17160: CALL 16837 0 0
17164: PPUSH
17165: LD_INT 1
17167: PPUSH
17168: LD_EXP 13
17172: PUSH
17173: LD_OWVAR 67
17177: ARRAY
17178: PPUSH
17179: LD_STRING 
17181: PPUSH
17182: CALL 16872 0 4
17186: ST_TO_ADDR
// pom = pom ^ ah ;
17187: LD_ADDR_VAR 0 2
17191: PUSH
17192: LD_VAR 0 2
17196: PUSH
17197: LD_LOC 23
17201: ADD
17202: ST_TO_ADDR
// if pom > 2 then
17203: LD_VAR 0 2
17207: PUSH
17208: LD_INT 2
17210: GREATER
17211: IFFALSE 17257
// pom = pom ^ ah = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17213: LD_ADDR_VAR 0 2
17217: PUSH
17218: LD_VAR 0 2
17222: PUSH
17223: LD_LOC 23
17227: ADD
17228: PUSH
17229: CALL 16837 0 0
17233: PPUSH
17234: LD_INT 1
17236: PPUSH
17237: LD_EXP 13
17241: PUSH
17242: LD_OWVAR 67
17246: ARRAY
17247: PPUSH
17248: LD_STRING 
17250: PPUSH
17251: CALL 16872 0 4
17255: EQUAL
17256: ST_TO_ADDR
// AMERICKA_POMOC_HLIDCE_LIST = pom ;
17257: LD_ADDR_EXP 50
17261: PUSH
17262: LD_VAR 0 2
17266: ST_TO_ADDR
// end ;
17267: LD_VAR 0 1
17271: RET
// export function set_skily_amikum ; var pom , i ; begin
17272: LD_INT 0
17274: PPUSH
17275: PPUSH
17276: PPUSH
// pom = [ Am_sol1 , Am_sol2 , Am_sol3 , Am_sol4 , Am_vb1 , Am_vb2 , Am_vb3 , Am_vb4 ] ;
17277: LD_ADDR_VAR 0 2
17281: PUSH
17282: LD_INT 38
17284: PUSH
17285: LD_INT 39
17287: PUSH
17288: LD_INT 40
17290: PUSH
17291: LD_INT 41
17293: PUSH
17294: LD_INT 29
17296: PUSH
17297: LD_INT 30
17299: PUSH
17300: LD_INT 31
17302: PUSH
17303: LD_INT 32
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: ST_TO_ADDR
// for i in pom do
17316: LD_ADDR_VAR 0 3
17320: PUSH
17321: LD_VAR 0 2
17325: PUSH
17326: FOR_IN
17327: IFFALSE 17354
// uprav_cloveka ( i , class_soldier , levely_amici [ difficulty ] ) ;
17329: LD_VAR 0 3
17333: PPUSH
17334: LD_INT 1
17336: PPUSH
17337: LD_EXP 13
17341: PUSH
17342: LD_OWVAR 67
17346: ARRAY
17347: PPUSH
17348: CALL 17669 0 3
17352: GO 17326
17354: POP
17355: POP
// pom = [ Am_me1 , Am_me2 , Am_me3 ] ;
17356: LD_ADDR_VAR 0 2
17360: PUSH
17361: LD_INT 33
17363: PUSH
17364: LD_INT 34
17366: PUSH
17367: LD_INT 35
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: LIST
17374: ST_TO_ADDR
// for i in pom do
17375: LD_ADDR_VAR 0 3
17379: PUSH
17380: LD_VAR 0 2
17384: PUSH
17385: FOR_IN
17386: IFFALSE 17413
// uprav_cloveka ( i , class_mechanic , levely_amici [ difficulty ] ) ;
17388: LD_VAR 0 3
17392: PPUSH
17393: LD_INT 3
17395: PPUSH
17396: LD_EXP 13
17400: PUSH
17401: LD_OWVAR 67
17405: ARRAY
17406: PPUSH
17407: CALL 17669 0 3
17411: GO 17385
17413: POP
17414: POP
// uprav_cloveka ( Am_sci1 , class_scientistic , levely_amici [ difficulty ] ) ;
17415: LD_INT 37
17417: PPUSH
17418: LD_INT 4
17420: PPUSH
17421: LD_EXP 13
17425: PUSH
17426: LD_OWVAR 67
17430: ARRAY
17431: PPUSH
17432: CALL 17669 0 3
// uprav_cloveka ( Am_eng1 , class_engineer , levely_amici [ difficulty ] ) ;
17436: LD_INT 36
17438: PPUSH
17439: LD_INT 2
17441: PPUSH
17442: LD_EXP 13
17446: PUSH
17447: LD_OWVAR 67
17451: ARRAY
17452: PPUSH
17453: CALL 17669 0 3
// end ;
17457: LD_VAR 0 1
17461: RET
// function set_skills ( un , skills ) ; begin
17462: LD_INT 0
17464: PPUSH
// SetSkill ( un , skill_combat , skills [ 1 ] ) ;
17465: LD_VAR 0 1
17469: PPUSH
17470: LD_INT 1
17472: PPUSH
17473: LD_VAR 0 2
17477: PUSH
17478: LD_INT 1
17480: ARRAY
17481: PPUSH
17482: CALL_OW 237
// SetSkill ( un , skill_engineering , skills [ 2 ] ) ;
17486: LD_VAR 0 1
17490: PPUSH
17491: LD_INT 2
17493: PPUSH
17494: LD_VAR 0 2
17498: PUSH
17499: LD_INT 2
17501: ARRAY
17502: PPUSH
17503: CALL_OW 237
// SetSkill ( un , skill_mechanical , skills [ 3 ] ) ;
17507: LD_VAR 0 1
17511: PPUSH
17512: LD_INT 3
17514: PPUSH
17515: LD_VAR 0 2
17519: PUSH
17520: LD_INT 3
17522: ARRAY
17523: PPUSH
17524: CALL_OW 237
// SetSkill ( un , skill_scientistic , skills [ 4 ] ) ;
17528: LD_VAR 0 1
17532: PPUSH
17533: LD_INT 4
17535: PPUSH
17536: LD_VAR 0 2
17540: PUSH
17541: LD_INT 4
17543: ARRAY
17544: PPUSH
17545: CALL_OW 237
// end ;
17549: LD_VAR 0 3
17553: RET
// function get_skills ( un ) ; var pom3 , pom4 , pom5 , pom6 ; begin
17554: LD_INT 0
17556: PPUSH
17557: PPUSH
17558: PPUSH
17559: PPUSH
17560: PPUSH
// pom3 := GetSkill ( un , skill_combat ) ;
17561: LD_ADDR_VAR 0 3
17565: PUSH
17566: LD_VAR 0 1
17570: PPUSH
17571: LD_INT 1
17573: PPUSH
17574: CALL_OW 259
17578: ST_TO_ADDR
// pom4 := GetSkill ( un , skill_engineering ) ;
17579: LD_ADDR_VAR 0 4
17583: PUSH
17584: LD_VAR 0 1
17588: PPUSH
17589: LD_INT 2
17591: PPUSH
17592: CALL_OW 259
17596: ST_TO_ADDR
// pom5 := GetSkill ( un , skill_mechanical ) ;
17597: LD_ADDR_VAR 0 5
17601: PUSH
17602: LD_VAR 0 1
17606: PPUSH
17607: LD_INT 3
17609: PPUSH
17610: CALL_OW 259
17614: ST_TO_ADDR
// pom6 := GetSkill ( un , skill_scientistic ) ;
17615: LD_ADDR_VAR 0 6
17619: PUSH
17620: LD_VAR 0 1
17624: PPUSH
17625: LD_INT 4
17627: PPUSH
17628: CALL_OW 259
17632: ST_TO_ADDR
// result := [ pom3 , pom4 , pom5 , pom6 ] end ;
17633: LD_ADDR_VAR 0 2
17637: PUSH
17638: LD_VAR 0 3
17642: PUSH
17643: LD_VAR 0 4
17647: PUSH
17648: LD_VAR 0 5
17652: PUSH
17653: LD_VAR 0 6
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: ST_TO_ADDR
17664: LD_VAR 0 2
17668: RET
// function uprav_cloveka ( un , clas , lev ) ; var pom1 ; begin
17669: LD_INT 0
17671: PPUSH
17672: PPUSH
// prepare_human ( sex_male , clas , lev ,  ) ;
17673: LD_INT 1
17675: PPUSH
17676: LD_VAR 0 2
17680: PPUSH
17681: LD_VAR 0 3
17685: PPUSH
17686: LD_STRING 
17688: PPUSH
17689: CALL 17751 0 4
// ah = CreateHuman ;
17693: LD_ADDR_LOC 23
17697: PUSH
17698: CALL_OW 44
17702: ST_TO_ADDR
// pom1 = get_skills ( ah ) ;
17703: LD_ADDR_VAR 0 5
17707: PUSH
17708: LD_LOC 23
17712: PPUSH
17713: CALL 17554 0 1
17717: ST_TO_ADDR
// set_skills ( un , get_skills ( ah ) ) ;
17718: LD_VAR 0 1
17722: PPUSH
17723: LD_LOC 23
17727: PPUSH
17728: CALL 17554 0 1
17732: PPUSH
17733: CALL 17462 0 2
// DestroyUnit ( ah ) ;
17737: LD_LOC 23
17741: PPUSH
17742: CALL_OW 65
// end ;
17746: LD_VAR 0 4
17750: RET
// function prepare_human ( sex , clas , level , name ) ; begin
17751: LD_INT 0
17753: PPUSH
// PrepareHuman ( sex , clas , level ) ;
17754: LD_VAR 0 1
17758: PPUSH
17759: LD_VAR 0 2
17763: PPUSH
17764: LD_VAR 0 3
17768: PPUSH
17769: CALL_OW 380
// hc_name := name ;
17773: LD_ADDR_OWVAR 26
17777: PUSH
17778: LD_VAR 0 4
17782: ST_TO_ADDR
// end ;
17783: LD_VAR 0 5
17787: RET
// export function create_americke_posily ; var pom ; begin
17788: LD_INT 0
17790: PPUSH
17791: PPUSH
// uc_side = Amici ;
17792: LD_ADDR_OWVAR 20
17796: PUSH
17797: LD_EXP 4
17801: ST_TO_ADDR
// uc_nation = nation_american ;
17802: LD_ADDR_OWVAR 21
17806: PUSH
17807: LD_INT 1
17809: ST_TO_ADDR
// pom = [ ] ;
17810: LD_ADDR_VAR 0 2
17814: PUSH
17815: EMPTY
17816: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17817: LD_ADDR_VAR 0 2
17821: PUSH
17822: LD_VAR 0 2
17826: PUSH
17827: CALL 16837 0 0
17831: PPUSH
17832: LD_INT 1
17834: PPUSH
17835: LD_EXP 13
17839: PUSH
17840: LD_OWVAR 67
17844: ARRAY
17845: PPUSH
17846: LD_STRING 
17848: PPUSH
17849: CALL 16872 0 4
17853: ADD
17854: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17855: LD_ADDR_VAR 0 2
17859: PUSH
17860: LD_VAR 0 2
17864: PUSH
17865: CALL 16837 0 0
17869: PPUSH
17870: LD_INT 1
17872: PPUSH
17873: LD_EXP 13
17877: PUSH
17878: LD_OWVAR 67
17882: ARRAY
17883: PPUSH
17884: LD_STRING 
17886: PPUSH
17887: CALL 16872 0 4
17891: ADD
17892: ST_TO_ADDR
// AMERICKE_POSILY1_LIST = pom ;
17893: LD_ADDR_EXP 51
17897: PUSH
17898: LD_VAR 0 2
17902: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
17903: LD_ADDR_VAR 0 2
17907: PUSH
17908: CALL 16837 0 0
17912: PPUSH
17913: LD_INT 1
17915: PPUSH
17916: LD_EXP 13
17920: PUSH
17921: LD_OWVAR 67
17925: ARRAY
17926: PPUSH
17927: LD_STRING 
17929: PPUSH
17930: CALL 16872 0 4
17934: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
17935: LD_ADDR_VAR 0 2
17939: PUSH
17940: LD_VAR 0 2
17944: PUSH
17945: CALL 16837 0 0
17949: PPUSH
17950: LD_INT 3
17952: PPUSH
17953: LD_EXP 13
17957: PUSH
17958: LD_OWVAR 67
17962: ARRAY
17963: PPUSH
17964: LD_STRING 
17966: PPUSH
17967: CALL 16872 0 4
17971: ADD
17972: ST_TO_ADDR
// if pom > 1 then
17973: LD_VAR 0 2
17977: PUSH
17978: LD_INT 1
17980: GREATER
17981: IFFALSE 18021
// pom = pom ^ get_human ( get_sex , class_scientistic , levely_amici [ difficulty ] ,  ) ;
17983: LD_ADDR_VAR 0 2
17987: PUSH
17988: LD_VAR 0 2
17992: PUSH
17993: CALL 16837 0 0
17997: PPUSH
17998: LD_INT 4
18000: PPUSH
18001: LD_EXP 13
18005: PUSH
18006: LD_OWVAR 67
18010: ARRAY
18011: PPUSH
18012: LD_STRING 
18014: PPUSH
18015: CALL 16872 0 4
18019: ADD
18020: ST_TO_ADDR
// if pom > 2 then
18021: LD_VAR 0 2
18025: PUSH
18026: LD_INT 2
18028: GREATER
18029: IFFALSE 18069
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
18031: LD_ADDR_VAR 0 2
18035: PUSH
18036: LD_VAR 0 2
18040: PUSH
18041: CALL 16837 0 0
18045: PPUSH
18046: LD_INT 1
18048: PPUSH
18049: LD_EXP 13
18053: PUSH
18054: LD_OWVAR 67
18058: ARRAY
18059: PPUSH
18060: LD_STRING 
18062: PPUSH
18063: CALL 16872 0 4
18067: ADD
18068: ST_TO_ADDR
// AMERICKE_POSILY2_LIST = pom ;
18069: LD_ADDR_EXP 52
18073: PUSH
18074: LD_VAR 0 2
18078: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
18079: LD_ADDR_VAR 0 2
18083: PUSH
18084: CALL 16837 0 0
18088: PPUSH
18089: LD_INT 1
18091: PPUSH
18092: LD_EXP 13
18096: PUSH
18097: LD_OWVAR 67
18101: ARRAY
18102: PPUSH
18103: LD_STRING 
18105: PPUSH
18106: CALL 16872 0 4
18110: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
18111: LD_ADDR_VAR 0 2
18115: PUSH
18116: LD_VAR 0 2
18120: PUSH
18121: CALL 16837 0 0
18125: PPUSH
18126: LD_INT 1
18128: PPUSH
18129: LD_EXP 13
18133: PUSH
18134: LD_OWVAR 67
18138: ARRAY
18139: PPUSH
18140: LD_STRING 
18142: PPUSH
18143: CALL 16872 0 4
18147: ADD
18148: ST_TO_ADDR
// if pom = 1 then
18149: LD_VAR 0 2
18153: PUSH
18154: LD_INT 1
18156: EQUAL
18157: IFFALSE 18197
// pom = pom ^ get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
18159: LD_ADDR_VAR 0 2
18163: PUSH
18164: LD_VAR 0 2
18168: PUSH
18169: CALL 16837 0 0
18173: PPUSH
18174: LD_INT 3
18176: PPUSH
18177: LD_EXP 13
18181: PUSH
18182: LD_OWVAR 67
18186: ARRAY
18187: PPUSH
18188: LD_STRING 
18190: PPUSH
18191: CALL 16872 0 4
18195: ADD
18196: ST_TO_ADDR
// if pom = 2 then
18197: LD_VAR 0 2
18201: PUSH
18202: LD_INT 2
18204: EQUAL
18205: IFFALSE 18311
// begin ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
18207: LD_ADDR_LOC 23
18211: PUSH
18212: CALL 16837 0 0
18216: PPUSH
18217: LD_INT 3
18219: PPUSH
18220: LD_EXP 13
18224: PUSH
18225: LD_OWVAR 67
18229: ARRAY
18230: PPUSH
18231: LD_STRING 
18233: PPUSH
18234: CALL 16872 0 4
18238: ST_TO_ADDR
// vc_chassis = us_light_wheeled ;
18239: LD_ADDR_OWVAR 37
18243: PUSH
18244: LD_INT 1
18246: ST_TO_ADDR
// vc_control = control_manual ;
18247: LD_ADDR_OWVAR 38
18251: PUSH
18252: LD_INT 1
18254: ST_TO_ADDR
// vc_engine = engine_solar ;
18255: LD_ADDR_OWVAR 39
18259: PUSH
18260: LD_INT 2
18262: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
18263: LD_ADDR_OWVAR 40
18267: PUSH
18268: LD_INT 2
18270: ST_TO_ADDR
// av = CreateVehicle ;
18271: LD_ADDR_LOC 24
18275: PUSH
18276: CALL_OW 45
18280: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18281: LD_LOC 23
18285: PPUSH
18286: LD_LOC 24
18290: PPUSH
18291: CALL_OW 52
// pom = pom ^ av ;
18295: LD_ADDR_VAR 0 2
18299: PUSH
18300: LD_VAR 0 2
18304: PUSH
18305: LD_LOC 24
18309: ADD
18310: ST_TO_ADDR
// end ; if pom = 3 then
18311: LD_VAR 0 2
18315: PUSH
18316: LD_INT 3
18318: EQUAL
18319: IFFALSE 18425
// begin ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
18321: LD_ADDR_LOC 23
18325: PUSH
18326: CALL 16837 0 0
18330: PPUSH
18331: LD_INT 3
18333: PPUSH
18334: LD_EXP 13
18338: PUSH
18339: LD_OWVAR 67
18343: ARRAY
18344: PPUSH
18345: LD_STRING 
18347: PPUSH
18348: CALL 16872 0 4
18352: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
18353: LD_ADDR_OWVAR 37
18357: PUSH
18358: LD_INT 2
18360: ST_TO_ADDR
// vc_control = control_manual ;
18361: LD_ADDR_OWVAR 38
18365: PUSH
18366: LD_INT 1
18368: ST_TO_ADDR
// vc_engine = engine_solar ;
18369: LD_ADDR_OWVAR 39
18373: PUSH
18374: LD_INT 2
18376: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
18377: LD_ADDR_OWVAR 40
18381: PUSH
18382: LD_INT 4
18384: ST_TO_ADDR
// av = CreateVehicle ;
18385: LD_ADDR_LOC 24
18389: PUSH
18390: CALL_OW 45
18394: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18395: LD_LOC 23
18399: PPUSH
18400: LD_LOC 24
18404: PPUSH
18405: CALL_OW 52
// pom = pom ^ av ;
18409: LD_ADDR_VAR 0 2
18413: PUSH
18414: LD_VAR 0 2
18418: PUSH
18419: LD_LOC 24
18423: ADD
18424: ST_TO_ADDR
// end ; AMERICKE_POSILY3_LIST = pom ;
18425: LD_ADDR_EXP 53
18429: PUSH
18430: LD_VAR 0 2
18434: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
18435: LD_ADDR_VAR 0 2
18439: PUSH
18440: CALL 16837 0 0
18444: PPUSH
18445: LD_INT 1
18447: PPUSH
18448: LD_EXP 13
18452: PUSH
18453: LD_OWVAR 67
18457: ARRAY
18458: PPUSH
18459: LD_STRING 
18461: PPUSH
18462: CALL 16872 0 4
18466: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
18467: LD_ADDR_VAR 0 2
18471: PUSH
18472: LD_VAR 0 2
18476: PUSH
18477: CALL 16837 0 0
18481: PPUSH
18482: LD_INT 1
18484: PPUSH
18485: LD_EXP 13
18489: PUSH
18490: LD_OWVAR 67
18494: ARRAY
18495: PPUSH
18496: LD_STRING 
18498: PPUSH
18499: CALL 16872 0 4
18503: ADD
18504: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] - 1 ,  ) ;
18505: LD_ADDR_VAR 0 2
18509: PUSH
18510: LD_VAR 0 2
18514: PUSH
18515: CALL 16837 0 0
18519: PPUSH
18520: LD_INT 1
18522: PPUSH
18523: LD_EXP 13
18527: PUSH
18528: LD_OWVAR 67
18532: ARRAY
18533: PUSH
18534: LD_INT 1
18536: MINUS
18537: PPUSH
18538: LD_STRING 
18540: PPUSH
18541: CALL 16872 0 4
18545: ADD
18546: ST_TO_ADDR
// AMERICKE_POSILY4_LIST = pom ;
18547: LD_ADDR_EXP 54
18551: PUSH
18552: LD_VAR 0 2
18556: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , levely_amici [ difficulty ] ,  ) ;
18557: LD_ADDR_VAR 0 2
18561: PUSH
18562: CALL 16837 0 0
18566: PPUSH
18567: LD_INT 1
18569: PPUSH
18570: LD_EXP 13
18574: PUSH
18575: LD_OWVAR 67
18579: ARRAY
18580: PPUSH
18581: LD_STRING 
18583: PPUSH
18584: CALL 16872 0 4
18588: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] - 1 ,  ) ;
18589: LD_ADDR_VAR 0 2
18593: PUSH
18594: LD_VAR 0 2
18598: PUSH
18599: CALL 16837 0 0
18603: PPUSH
18604: LD_INT 1
18606: PPUSH
18607: LD_EXP 13
18611: PUSH
18612: LD_OWVAR 67
18616: ARRAY
18617: PUSH
18618: LD_INT 1
18620: MINUS
18621: PPUSH
18622: LD_STRING 
18624: PPUSH
18625: CALL 16872 0 4
18629: ADD
18630: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , levely_amici [ difficulty ] - 1 ,  ) ;
18631: LD_ADDR_VAR 0 2
18635: PUSH
18636: LD_VAR 0 2
18640: PUSH
18641: CALL 16837 0 0
18645: PPUSH
18646: LD_INT 1
18648: PPUSH
18649: LD_EXP 13
18653: PUSH
18654: LD_OWVAR 67
18658: ARRAY
18659: PUSH
18660: LD_INT 1
18662: MINUS
18663: PPUSH
18664: LD_STRING 
18666: PPUSH
18667: CALL 16872 0 4
18671: ADD
18672: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_scientistic , levely_amici [ difficulty ] - 1 ,  ) ;
18673: LD_ADDR_VAR 0 2
18677: PUSH
18678: LD_VAR 0 2
18682: PUSH
18683: CALL 16837 0 0
18687: PPUSH
18688: LD_INT 4
18690: PPUSH
18691: LD_EXP 13
18695: PUSH
18696: LD_OWVAR 67
18700: ARRAY
18701: PUSH
18702: LD_INT 1
18704: MINUS
18705: PPUSH
18706: LD_STRING 
18708: PPUSH
18709: CALL 16872 0 4
18713: ADD
18714: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_amici [ difficulty ] ,  ) ;
18715: LD_ADDR_LOC 23
18719: PUSH
18720: CALL 16837 0 0
18724: PPUSH
18725: LD_INT 3
18727: PPUSH
18728: LD_EXP 13
18732: PUSH
18733: LD_OWVAR 67
18737: ARRAY
18738: PPUSH
18739: LD_STRING 
18741: PPUSH
18742: CALL 16872 0 4
18746: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
18747: LD_ADDR_OWVAR 37
18751: PUSH
18752: LD_INT 3
18754: ST_TO_ADDR
// vc_control = control_manual ;
18755: LD_ADDR_OWVAR 38
18759: PUSH
18760: LD_INT 1
18762: ST_TO_ADDR
// vc_engine = engine_combustion ;
18763: LD_ADDR_OWVAR 39
18767: PUSH
18768: LD_INT 1
18770: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
18771: LD_ADDR_OWVAR 40
18775: PUSH
18776: LD_INT 2
18778: ST_TO_ADDR
// av = CreateVehicle ;
18779: LD_ADDR_LOC 24
18783: PUSH
18784: CALL_OW 45
18788: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
18789: LD_LOC 23
18793: PPUSH
18794: LD_LOC 24
18798: PPUSH
18799: CALL_OW 52
// pom = pom ^ av ;
18803: LD_ADDR_VAR 0 2
18807: PUSH
18808: LD_VAR 0 2
18812: PUSH
18813: LD_LOC 24
18817: ADD
18818: ST_TO_ADDR
// AMERICKE_POSILY11_LIST = pom ;
18819: LD_ADDR_EXP 55
18823: PUSH
18824: LD_VAR 0 2
18828: ST_TO_ADDR
// end ;
18829: LD_VAR 0 1
18833: RET
// export function create_kecajici_amik ; var pom ; begin
18834: LD_INT 0
18836: PPUSH
18837: PPUSH
// uc_side = Amici ;
18838: LD_ADDR_OWVAR 20
18842: PUSH
18843: LD_EXP 4
18847: ST_TO_ADDR
// uc_nation = nation_american ;
18848: LD_ADDR_OWVAR 21
18852: PUSH
18853: LD_INT 1
18855: ST_TO_ADDR
// pom = get_human ( sex_male , class_soldier , 4 , Mike Damme ) ;
18856: LD_ADDR_VAR 0 2
18860: PUSH
18861: LD_INT 1
18863: PPUSH
18864: LD_INT 1
18866: PPUSH
18867: LD_INT 4
18869: PPUSH
18870: LD_STRING Mike Damme
18872: PPUSH
18873: CALL 16872 0 4
18877: ST_TO_ADDR
// result := pom ;
18878: LD_ADDR_VAR 0 1
18882: PUSH
18883: LD_VAR 0 2
18887: ST_TO_ADDR
// end ;
18888: LD_VAR 0 1
18892: RET
// export function create_grishko ; var pom ; begin
18893: LD_INT 0
18895: PPUSH
18896: PPUSH
// pom = grishko ;
18897: LD_ADDR_VAR 0 2
18901: PUSH
18902: LD_EXP 35
18906: ST_TO_ADDR
// if pom = 0 then
18907: LD_VAR 0 2
18911: PUSH
18912: LD_INT 0
18914: EQUAL
18915: IFFALSE 18939
// pom = get_human ( sex_male , class_soldier , 4 , Piotr Grishko ) ;
18917: LD_ADDR_VAR 0 2
18921: PUSH
18922: LD_INT 1
18924: PPUSH
18925: LD_INT 1
18927: PPUSH
18928: LD_INT 4
18930: PPUSH
18931: LD_STRING Piotr Grishko
18933: PPUSH
18934: CALL 16872 0 4
18938: ST_TO_ADDR
// if pom > 0 then
18939: LD_VAR 0 2
18943: PUSH
18944: LD_INT 0
18946: GREATER
18947: IFFALSE 18983
// begin SetSide ( pom [ 1 ] , You2 ) ;
18949: LD_VAR 0 2
18953: PUSH
18954: LD_INT 1
18956: ARRAY
18957: PPUSH
18958: LD_EXP 2
18962: PPUSH
18963: CALL_OW 235
// result = pom [ 1 ] ;
18967: LD_ADDR_VAR 0 1
18971: PUSH
18972: LD_VAR 0 2
18976: PUSH
18977: LD_INT 1
18979: ARRAY
18980: ST_TO_ADDR
// end else
18981: GO 18990
// msg ( ERROR: Grishko se z nejakych obskurnich duvodu nevytvoril ) ;
18983: LD_STRING ERROR: Grishko se z nejakych obskurnich duvodu nevytvoril
18985: PPUSH
18986: CALL_OW 100
// end ;
18990: LD_VAR 0 1
18994: RET
// export function create_arabsky_utok ; var pom , i ; begin
18995: LD_INT 0
18997: PPUSH
18998: PPUSH
18999: PPUSH
// pom = FilterUnitsInArea ( Ar_jedn , [ [ f_side , Arabi ] , [ f_class , class_apeman_kamikaze ] ] ) ;
19000: LD_ADDR_VAR 0 2
19004: PUSH
19005: LD_INT 9
19007: PPUSH
19008: LD_INT 22
19010: PUSH
19011: LD_EXP 5
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 25
19022: PUSH
19023: LD_INT 17
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PPUSH
19034: CALL_OW 70
19038: ST_TO_ADDR
// ARABI_KAMIKADZE_LIST = pom ;
19039: LD_ADDR_EXP 60
19043: PUSH
19044: LD_VAR 0 2
19048: ST_TO_ADDR
// for i in pom do
19049: LD_ADDR_VAR 0 3
19053: PUSH
19054: LD_VAR 0 2
19058: PUSH
19059: FOR_IN
19060: IFFALSE 19073
// RemoveUnit ( i ) ;
19062: LD_VAR 0 3
19066: PPUSH
19067: CALL_OW 64
19071: GO 19059
19073: POP
19074: POP
// pom = [ ] ;
19075: LD_ADDR_VAR 0 2
19079: PUSH
19080: EMPTY
19081: ST_TO_ADDR
// uc_side = Arabi ;
19082: LD_ADDR_OWVAR 20
19086: PUSH
19087: LD_EXP 5
19091: ST_TO_ADDR
// uc_nation = nation_arabian ;
19092: LD_ADDR_OWVAR 21
19096: PUSH
19097: LD_INT 2
19099: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19100: LD_ADDR_LOC 23
19104: PUSH
19105: CALL 16837 0 0
19109: PPUSH
19110: LD_INT 3
19112: PPUSH
19113: LD_INT 9
19115: PPUSH
19116: LD_STRING 
19118: PPUSH
19119: CALL 16872 0 4
19123: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
19124: LD_ADDR_OWVAR 37
19128: PUSH
19129: LD_INT 14
19131: ST_TO_ADDR
// vc_weapon = ar_flame_thrower ;
19132: LD_ADDR_OWVAR 40
19136: PUSH
19137: LD_INT 26
19139: ST_TO_ADDR
// vc_control = control_manual ;
19140: LD_ADDR_OWVAR 38
19144: PUSH
19145: LD_INT 1
19147: ST_TO_ADDR
// vc_engine = engine_combustion ;
19148: LD_ADDR_OWVAR 39
19152: PUSH
19153: LD_INT 1
19155: ST_TO_ADDR
// av = CreateVehicle ;
19156: LD_ADDR_LOC 24
19160: PUSH
19161: CALL_OW 45
19165: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19166: LD_LOC 23
19170: PPUSH
19171: LD_LOC 24
19175: PPUSH
19176: CALL_OW 52
// pom = pom ^ av ;
19180: LD_ADDR_VAR 0 2
19184: PUSH
19185: LD_VAR 0 2
19189: PUSH
19190: LD_LOC 24
19194: ADD
19195: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19196: LD_ADDR_LOC 23
19200: PUSH
19201: CALL 16837 0 0
19205: PPUSH
19206: LD_INT 3
19208: PPUSH
19209: LD_INT 9
19211: PPUSH
19212: LD_STRING 
19214: PPUSH
19215: CALL 16872 0 4
19219: ST_TO_ADDR
// av = CreateVehicle ;
19220: LD_ADDR_LOC 24
19224: PUSH
19225: CALL_OW 45
19229: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19230: LD_LOC 23
19234: PPUSH
19235: LD_LOC 24
19239: PPUSH
19240: CALL_OW 52
// pom = pom ^ av ;
19244: LD_ADDR_VAR 0 2
19248: PUSH
19249: LD_VAR 0 2
19253: PUSH
19254: LD_LOC 24
19258: ADD
19259: ST_TO_ADDR
// ARABI_FLAME_LIST = pom ;
19260: LD_ADDR_EXP 62
19264: PUSH
19265: LD_VAR 0 2
19269: ST_TO_ADDR
// pom = [ ] ;
19270: LD_ADDR_VAR 0 2
19274: PUSH
19275: EMPTY
19276: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19277: LD_ADDR_LOC 23
19281: PUSH
19282: CALL 16837 0 0
19286: PPUSH
19287: LD_INT 3
19289: PPUSH
19290: LD_INT 9
19292: PPUSH
19293: LD_STRING 
19295: PPUSH
19296: CALL 16872 0 4
19300: ST_TO_ADDR
// vc_weapon = ar_gun ;
19301: LD_ADDR_OWVAR 40
19305: PUSH
19306: LD_INT 27
19308: ST_TO_ADDR
// av = CreateVehicle ;
19309: LD_ADDR_LOC 24
19313: PUSH
19314: CALL_OW 45
19318: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19319: LD_LOC 23
19323: PPUSH
19324: LD_LOC 24
19328: PPUSH
19329: CALL_OW 52
// pom = av ;
19333: LD_ADDR_VAR 0 2
19337: PUSH
19338: LD_LOC 24
19342: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19343: LD_ADDR_LOC 23
19347: PUSH
19348: CALL 16837 0 0
19352: PPUSH
19353: LD_INT 3
19355: PPUSH
19356: LD_INT 9
19358: PPUSH
19359: LD_STRING 
19361: PPUSH
19362: CALL 16872 0 4
19366: ST_TO_ADDR
// av = CreateVehicle ;
19367: LD_ADDR_LOC 24
19371: PUSH
19372: CALL_OW 45
19376: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19377: LD_LOC 23
19381: PPUSH
19382: LD_LOC 24
19386: PPUSH
19387: CALL_OW 52
// pom = pom ^ av ;
19391: LD_ADDR_VAR 0 2
19395: PUSH
19396: LD_VAR 0 2
19400: PUSH
19401: LD_LOC 24
19405: ADD
19406: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19407: LD_ADDR_LOC 23
19411: PUSH
19412: CALL 16837 0 0
19416: PPUSH
19417: LD_INT 3
19419: PPUSH
19420: LD_INT 9
19422: PPUSH
19423: LD_STRING 
19425: PPUSH
19426: CALL 16872 0 4
19430: ST_TO_ADDR
// vc_weapon = ar_gatling_gun ;
19431: LD_ADDR_OWVAR 40
19435: PUSH
19436: LD_INT 25
19438: ST_TO_ADDR
// av = CreateVehicle ;
19439: LD_ADDR_LOC 24
19443: PUSH
19444: CALL_OW 45
19448: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19449: LD_LOC 23
19453: PPUSH
19454: LD_LOC 24
19458: PPUSH
19459: CALL_OW 52
// pom = pom ^ av ;
19463: LD_ADDR_VAR 0 2
19467: PUSH
19468: LD_VAR 0 2
19472: PUSH
19473: LD_LOC 24
19477: ADD
19478: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19479: LD_ADDR_LOC 23
19483: PUSH
19484: CALL 16837 0 0
19488: PPUSH
19489: LD_INT 3
19491: PPUSH
19492: LD_INT 9
19494: PPUSH
19495: LD_STRING 
19497: PPUSH
19498: CALL 16872 0 4
19502: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
19503: LD_ADDR_OWVAR 40
19507: PUSH
19508: LD_INT 28
19510: ST_TO_ADDR
// av = CreateVehicle ;
19511: LD_ADDR_LOC 24
19515: PUSH
19516: CALL_OW 45
19520: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19521: LD_LOC 23
19525: PPUSH
19526: LD_LOC 24
19530: PPUSH
19531: CALL_OW 52
// pom = pom ^ av ;
19535: LD_ADDR_VAR 0 2
19539: PUSH
19540: LD_VAR 0 2
19544: PUSH
19545: LD_LOC 24
19549: ADD
19550: ST_TO_ADDR
// ARABI_PRVNI_VLNA = pom ;
19551: LD_ADDR_EXP 61
19555: PUSH
19556: LD_VAR 0 2
19560: ST_TO_ADDR
// pom = [ ] ;
19561: LD_ADDR_VAR 0 2
19565: PUSH
19566: EMPTY
19567: ST_TO_ADDR
// vc_weapon = ar_selfpropelled_bomb ;
19568: LD_ADDR_OWVAR 40
19572: PUSH
19573: LD_INT 29
19575: ST_TO_ADDR
// vc_control = control_apeman ;
19576: LD_ADDR_OWVAR 38
19580: PUSH
19581: LD_INT 5
19583: ST_TO_ADDR
// ah = CreateVehicle ;
19584: LD_ADDR_LOC 23
19588: PUSH
19589: CALL_OW 45
19593: ST_TO_ADDR
// pom = ah ;
19594: LD_ADDR_VAR 0 2
19598: PUSH
19599: LD_LOC 23
19603: ST_TO_ADDR
// pom = pom ^ CreateVehicle ;
19604: LD_ADDR_VAR 0 2
19608: PUSH
19609: LD_VAR 0 2
19613: PUSH
19614: CALL_OW 45
19618: ADD
19619: ST_TO_ADDR
// ARABI_SELF_AUTA = pom ;
19620: LD_ADDR_EXP 63
19624: PUSH
19625: LD_VAR 0 2
19629: ST_TO_ADDR
// pom = [ ] ;
19630: LD_ADDR_VAR 0 2
19634: PUSH
19635: EMPTY
19636: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 9 ,  ) ;
19637: LD_ADDR_VAR 0 2
19641: PUSH
19642: CALL 16837 0 0
19646: PPUSH
19647: LD_INT 1
19649: PPUSH
19650: LD_INT 9
19652: PPUSH
19653: LD_STRING 
19655: PPUSH
19656: CALL 16872 0 4
19660: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19661: LD_ADDR_VAR 0 2
19665: PUSH
19666: LD_VAR 0 2
19670: PUSH
19671: CALL 16837 0 0
19675: PPUSH
19676: LD_INT 1
19678: PPUSH
19679: LD_INT 9
19681: PPUSH
19682: LD_STRING 
19684: PPUSH
19685: CALL 16872 0 4
19689: ADD
19690: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19691: LD_ADDR_VAR 0 2
19695: PUSH
19696: LD_VAR 0 2
19700: PUSH
19701: CALL 16837 0 0
19705: PPUSH
19706: LD_INT 1
19708: PPUSH
19709: LD_INT 9
19711: PPUSH
19712: LD_STRING 
19714: PPUSH
19715: CALL 16872 0 4
19719: ADD
19720: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19721: LD_ADDR_VAR 0 2
19725: PUSH
19726: LD_VAR 0 2
19730: PUSH
19731: CALL 16837 0 0
19735: PPUSH
19736: LD_INT 1
19738: PPUSH
19739: LD_INT 9
19741: PPUSH
19742: LD_STRING 
19744: PPUSH
19745: CALL 16872 0 4
19749: ADD
19750: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19751: LD_ADDR_VAR 0 2
19755: PUSH
19756: LD_VAR 0 2
19760: PUSH
19761: CALL 16837 0 0
19765: PPUSH
19766: LD_INT 8
19768: PPUSH
19769: LD_INT 9
19771: PPUSH
19772: LD_STRING 
19774: PPUSH
19775: CALL 16872 0 4
19779: ADD
19780: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19781: LD_ADDR_VAR 0 2
19785: PUSH
19786: LD_VAR 0 2
19790: PUSH
19791: CALL 16837 0 0
19795: PPUSH
19796: LD_INT 8
19798: PPUSH
19799: LD_INT 9
19801: PPUSH
19802: LD_STRING 
19804: PPUSH
19805: CALL 16872 0 4
19809: ADD
19810: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 9 ,  ) ;
19811: LD_ADDR_VAR 0 2
19815: PUSH
19816: LD_VAR 0 2
19820: PUSH
19821: CALL 16837 0 0
19825: PPUSH
19826: LD_INT 1
19828: PPUSH
19829: LD_INT 9
19831: PPUSH
19832: LD_STRING 
19834: PPUSH
19835: CALL 16872 0 4
19839: ADD
19840: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19841: LD_ADDR_VAR 0 2
19845: PUSH
19846: LD_VAR 0 2
19850: PUSH
19851: CALL 16837 0 0
19855: PPUSH
19856: LD_INT 8
19858: PPUSH
19859: LD_INT 9
19861: PPUSH
19862: LD_STRING 
19864: PPUSH
19865: CALL 16872 0 4
19869: ADD
19870: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 9 ,  ) ;
19871: LD_ADDR_VAR 0 2
19875: PUSH
19876: LD_VAR 0 2
19880: PUSH
19881: CALL 16837 0 0
19885: PPUSH
19886: LD_INT 8
19888: PPUSH
19889: LD_INT 9
19891: PPUSH
19892: LD_STRING 
19894: PPUSH
19895: CALL 16872 0 4
19899: ADD
19900: ST_TO_ADDR
// ARABI_VOJACI = pom ;
19901: LD_ADDR_EXP 64
19905: PUSH
19906: LD_VAR 0 2
19910: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
19911: LD_ADDR_OWVAR 40
19915: PUSH
19916: LD_INT 28
19918: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
19919: LD_ADDR_OWVAR 37
19923: PUSH
19924: LD_INT 14
19926: ST_TO_ADDR
// vc_control = control_manual ;
19927: LD_ADDR_OWVAR 38
19931: PUSH
19932: LD_INT 1
19934: ST_TO_ADDR
// vc_engine = engine_combustion ;
19935: LD_ADDR_OWVAR 39
19939: PUSH
19940: LD_INT 1
19942: ST_TO_ADDR
// av = CreateVehicle ;
19943: LD_ADDR_LOC 24
19947: PUSH
19948: CALL_OW 45
19952: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 9 ,  ) ;
19953: LD_ADDR_LOC 23
19957: PUSH
19958: CALL 16837 0 0
19962: PPUSH
19963: LD_INT 3
19965: PPUSH
19966: LD_INT 9
19968: PPUSH
19969: LD_STRING 
19971: PPUSH
19972: CALL 16872 0 4
19976: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
19977: LD_LOC 23
19981: PPUSH
19982: LD_LOC 24
19986: PPUSH
19987: CALL_OW 52
// pom = av ;
19991: LD_ADDR_VAR 0 2
19995: PUSH
19996: LD_LOC 24
20000: ST_TO_ADDR
// av = CreateVehicle ;
20001: LD_ADDR_LOC 24
20005: PUSH
20006: CALL_OW 45
20010: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 8 ,  ) ;
20011: LD_ADDR_LOC 23
20015: PUSH
20016: CALL 16837 0 0
20020: PPUSH
20021: LD_INT 3
20023: PPUSH
20024: LD_INT 8
20026: PPUSH
20027: LD_STRING 
20029: PPUSH
20030: CALL 16872 0 4
20034: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20035: LD_LOC 23
20039: PPUSH
20040: LD_LOC 24
20044: PPUSH
20045: CALL_OW 52
// pom = pom ^ av ;
20049: LD_ADDR_VAR 0 2
20053: PUSH
20054: LD_VAR 0 2
20058: PUSH
20059: LD_LOC 24
20063: ADD
20064: ST_TO_ADDR
// av = CreateVehicle ;
20065: LD_ADDR_LOC 24
20069: PUSH
20070: CALL_OW 45
20074: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 8 ,  ) ;
20075: LD_ADDR_LOC 23
20079: PUSH
20080: CALL 16837 0 0
20084: PPUSH
20085: LD_INT 3
20087: PPUSH
20088: LD_INT 8
20090: PPUSH
20091: LD_STRING 
20093: PPUSH
20094: CALL 16872 0 4
20098: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20099: LD_LOC 23
20103: PPUSH
20104: LD_LOC 24
20108: PPUSH
20109: CALL_OW 52
// pom = pom ^ av ;
20113: LD_ADDR_VAR 0 2
20117: PUSH
20118: LD_VAR 0 2
20122: PUSH
20123: LD_LOC 24
20127: ADD
20128: ST_TO_ADDR
// ARABI_doraz = pom ;
20129: LD_ADDR_EXP 65
20133: PUSH
20134: LD_VAR 0 2
20138: ST_TO_ADDR
// end ;
20139: LD_VAR 0 1
20143: RET
// export function create_ruske_posily_na_omicron ; var pom ; begin
20144: LD_INT 0
20146: PPUSH
20147: PPUSH
// pom = [ ] ;
20148: LD_ADDR_VAR 0 2
20152: PUSH
20153: EMPTY
20154: ST_TO_ADDR
// uc_side = You2 ;
20155: LD_ADDR_OWVAR 20
20159: PUSH
20160: LD_EXP 2
20164: ST_TO_ADDR
// uc_nation = nation_russian ;
20165: LD_ADDR_OWVAR 21
20169: PUSH
20170: LD_INT 3
20172: ST_TO_ADDR
// vc_chassis = ru_heavy_wheeled ;
20173: LD_ADDR_OWVAR 37
20177: PUSH
20178: LD_INT 23
20180: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
20181: LD_ADDR_OWVAR 40
20185: PUSH
20186: LD_INT 43
20188: ST_TO_ADDR
// vc_control = control_manual ;
20189: LD_ADDR_OWVAR 38
20193: PUSH
20194: LD_INT 1
20196: ST_TO_ADDR
// vc_engine = engine_combustion ;
20197: LD_ADDR_OWVAR 39
20201: PUSH
20202: LD_INT 1
20204: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20205: LD_ADDR_LOC 23
20209: PUSH
20210: CALL 16837 0 0
20214: PPUSH
20215: LD_INT 3
20217: PPUSH
20218: LD_EXP 20
20222: PUSH
20223: LD_OWVAR 67
20227: ARRAY
20228: PPUSH
20229: LD_STRING 
20231: PPUSH
20232: CALL 16872 0 4
20236: ST_TO_ADDR
// av = CreateVehicle ;
20237: LD_ADDR_LOC 24
20241: PUSH
20242: CALL_OW 45
20246: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20247: LD_LOC 23
20251: PPUSH
20252: LD_LOC 24
20256: PPUSH
20257: CALL_OW 52
// pom = pom ^ av ;
20261: LD_ADDR_VAR 0 2
20265: PUSH
20266: LD_VAR 0 2
20270: PUSH
20271: LD_LOC 24
20275: ADD
20276: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] + 1 ,  ) ;
20277: LD_ADDR_LOC 23
20281: PUSH
20282: CALL 16837 0 0
20286: PPUSH
20287: LD_INT 3
20289: PPUSH
20290: LD_EXP 20
20294: PUSH
20295: LD_OWVAR 67
20299: ARRAY
20300: PUSH
20301: LD_INT 1
20303: PLUS
20304: PPUSH
20305: LD_STRING 
20307: PPUSH
20308: CALL 16872 0 4
20312: ST_TO_ADDR
// av = CreateVehicle ;
20313: LD_ADDR_LOC 24
20317: PUSH
20318: CALL_OW 45
20322: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20323: LD_LOC 23
20327: PPUSH
20328: LD_LOC 24
20332: PPUSH
20333: CALL_OW 52
// pom = pom ^ av ;
20337: LD_ADDR_VAR 0 2
20341: PUSH
20342: LD_VAR 0 2
20346: PUSH
20347: LD_LOC 24
20351: ADD
20352: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20353: LD_ADDR_LOC 23
20357: PUSH
20358: CALL 16837 0 0
20362: PPUSH
20363: LD_INT 3
20365: PPUSH
20366: LD_EXP 20
20370: PUSH
20371: LD_OWVAR 67
20375: ARRAY
20376: PPUSH
20377: LD_STRING 
20379: PPUSH
20380: CALL 16872 0 4
20384: ST_TO_ADDR
// vc_weapon = ru_gun ;
20385: LD_ADDR_OWVAR 40
20389: PUSH
20390: LD_INT 44
20392: ST_TO_ADDR
// av = CreateVehicle ;
20393: LD_ADDR_LOC 24
20397: PUSH
20398: CALL_OW 45
20402: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20403: LD_LOC 23
20407: PPUSH
20408: LD_LOC 24
20412: PPUSH
20413: CALL_OW 52
// pom = pom ^ av ;
20417: LD_ADDR_VAR 0 2
20421: PUSH
20422: LD_VAR 0 2
20426: PUSH
20427: LD_LOC 24
20431: ADD
20432: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] - 1 ,  ) ;
20433: LD_ADDR_LOC 23
20437: PUSH
20438: CALL 16837 0 0
20442: PPUSH
20443: LD_INT 3
20445: PPUSH
20446: LD_EXP 20
20450: PUSH
20451: LD_OWVAR 67
20455: ARRAY
20456: PUSH
20457: LD_INT 1
20459: MINUS
20460: PPUSH
20461: LD_STRING 
20463: PPUSH
20464: CALL 16872 0 4
20468: ST_TO_ADDR
// vc_chassis = ru_medium_tracked ;
20469: LD_ADDR_OWVAR 37
20473: PUSH
20474: LD_INT 22
20476: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
20477: LD_ADDR_OWVAR 40
20481: PUSH
20482: LD_INT 42
20484: ST_TO_ADDR
// av = CreateVehicle ;
20485: LD_ADDR_LOC 24
20489: PUSH
20490: CALL_OW 45
20494: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
20495: LD_LOC 23
20499: PPUSH
20500: LD_LOC 24
20504: PPUSH
20505: CALL_OW 52
// pom = pom ^ av ;
20509: LD_ADDR_VAR 0 2
20513: PUSH
20514: LD_VAR 0 2
20518: PUSH
20519: LD_LOC 24
20523: ADD
20524: ST_TO_ADDR
// RUSKE_POSILY_NA_OMICRON_LIST = pom ;
20525: LD_ADDR_EXP 56
20529: PUSH
20530: LD_VAR 0 2
20534: ST_TO_ADDR
// pom = [ ] ;
20535: LD_ADDR_VAR 0 2
20539: PUSH
20540: EMPTY
20541: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20542: LD_ADDR_LOC 23
20546: PUSH
20547: CALL 16837 0 0
20551: PPUSH
20552: LD_INT 3
20554: PPUSH
20555: LD_EXP 20
20559: PUSH
20560: LD_OWVAR 67
20564: ARRAY
20565: PPUSH
20566: LD_STRING 
20568: PPUSH
20569: CALL 16872 0 4
20573: ST_TO_ADDR
// pom = pom ^ ah ;
20574: LD_ADDR_VAR 0 2
20578: PUSH
20579: LD_VAR 0 2
20583: PUSH
20584: LD_LOC 23
20588: ADD
20589: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20590: LD_ADDR_LOC 23
20594: PUSH
20595: CALL 16837 0 0
20599: PPUSH
20600: LD_INT 3
20602: PPUSH
20603: LD_EXP 20
20607: PUSH
20608: LD_OWVAR 67
20612: ARRAY
20613: PPUSH
20614: LD_STRING 
20616: PPUSH
20617: CALL 16872 0 4
20621: ST_TO_ADDR
// pom = pom ^ ah ;
20622: LD_ADDR_VAR 0 2
20626: PUSH
20627: LD_VAR 0 2
20631: PUSH
20632: LD_LOC 23
20636: ADD
20637: ST_TO_ADDR
// RUSKE_POSILY_RIDICI_LIST = pom ;
20638: LD_ADDR_EXP 57
20642: PUSH
20643: LD_VAR 0 2
20647: ST_TO_ADDR
// end ;
20648: LD_VAR 0 1
20652: RET
// export function create_dalsi_ridici ( auta ) ; var i , pom ; var poc ; begin
20653: LD_INT 0
20655: PPUSH
20656: PPUSH
20657: PPUSH
20658: PPUSH
// uc_side = You2 ;
20659: LD_ADDR_OWVAR 20
20663: PUSH
20664: LD_EXP 2
20668: ST_TO_ADDR
// uc_nation = nation_russian ;
20669: LD_ADDR_OWVAR 21
20673: PUSH
20674: LD_INT 3
20676: ST_TO_ADDR
// pom = [ ] ;
20677: LD_ADDR_VAR 0 4
20681: PUSH
20682: EMPTY
20683: ST_TO_ADDR
// poc = 0 ;
20684: LD_ADDR_VAR 0 5
20688: PUSH
20689: LD_INT 0
20691: ST_TO_ADDR
// for i in auta do
20692: LD_ADDR_VAR 0 3
20696: PUSH
20697: LD_VAR 0 1
20701: PUSH
20702: FOR_IN
20703: IFFALSE 20769
// begin poc = poc + 1 ;
20705: LD_ADDR_VAR 0 5
20709: PUSH
20710: LD_VAR 0 5
20714: PUSH
20715: LD_INT 1
20717: PLUS
20718: ST_TO_ADDR
// if poc < 3 then
20719: LD_VAR 0 5
20723: PUSH
20724: LD_INT 3
20726: LESS
20727: IFFALSE 20767
// pom = pom ^ get_human ( get_sex , class_mechanic , levely_ruske_posily [ difficulty ] ,  ) ;
20729: LD_ADDR_VAR 0 4
20733: PUSH
20734: LD_VAR 0 4
20738: PUSH
20739: CALL 16837 0 0
20743: PPUSH
20744: LD_INT 3
20746: PPUSH
20747: LD_EXP 20
20751: PUSH
20752: LD_OWVAR 67
20756: ARRAY
20757: PPUSH
20758: LD_STRING 
20760: PPUSH
20761: CALL 16872 0 4
20765: ADD
20766: ST_TO_ADDR
// end ;
20767: GO 20702
20769: POP
20770: POP
// result := pom ;
20771: LD_ADDR_VAR 0 2
20775: PUSH
20776: LD_VAR 0 4
20780: ST_TO_ADDR
// end ;
20781: LD_VAR 0 2
20785: RET
// export function create_am_jednotky ; begin
20786: LD_INT 0
20788: PPUSH
// SetSide ( kur , You2 ) ;
20789: LD_EXP 27
20793: PPUSH
20794: LD_EXP 2
20798: PPUSH
20799: CALL_OW 235
// PlaceUnitXY ( kur , 149 , 79 , false ) ;
20803: LD_EXP 27
20807: PPUSH
20808: LD_INT 149
20810: PPUSH
20811: LD_INT 79
20813: PPUSH
20814: LD_INT 0
20816: PPUSH
20817: CALL_OW 48
// if BELKOV_SAVED then
20821: LD_EXP 24
20825: IFFALSE 20871
// begin SetSide ( bel , You2 ) ;
20827: LD_EXP 32
20831: PPUSH
20832: LD_EXP 2
20836: PPUSH
20837: CALL_OW 235
// SetClass ( bel , class_soldier ) ;
20841: LD_EXP 32
20845: PPUSH
20846: LD_INT 1
20848: PPUSH
20849: CALL_OW 336
// PlaceUnitXY ( bel , 141 , 80 , false ) ;
20853: LD_EXP 32
20857: PPUSH
20858: LD_INT 141
20860: PPUSH
20861: LD_INT 80
20863: PPUSH
20864: LD_INT 0
20866: PPUSH
20867: CALL_OW 48
// end ; if kov <> 0 then
20871: LD_EXP 30
20875: PUSH
20876: LD_INT 0
20878: NONEQUAL
20879: IFFALSE 20925
// begin SetSide ( kov , You ) ;
20881: LD_EXP 30
20885: PPUSH
20886: LD_EXP 1
20890: PPUSH
20891: CALL_OW 235
// SetClass ( kov , class_soldier ) ;
20895: LD_EXP 30
20899: PPUSH
20900: LD_INT 1
20902: PPUSH
20903: CALL_OW 336
// PlaceUnitXY ( kov , 142 , 80 , false ) ;
20907: LD_EXP 30
20911: PPUSH
20912: LD_INT 142
20914: PPUSH
20915: LD_INT 80
20917: PPUSH
20918: LD_INT 0
20920: PPUSH
20921: CALL_OW 48
// end ; SetClass ( bur , class_mechanic ) ;
20925: LD_EXP 29
20929: PPUSH
20930: LD_INT 3
20932: PPUSH
20933: CALL_OW 336
// SetSide ( bur , You ) ;
20937: LD_EXP 29
20941: PPUSH
20942: LD_EXP 1
20946: PPUSH
20947: CALL_OW 235
// PlaceUnitXY ( bur , 144 , 80 , false ) ;
20951: LD_EXP 29
20955: PPUSH
20956: LD_INT 144
20958: PPUSH
20959: LD_INT 80
20961: PPUSH
20962: LD_INT 0
20964: PPUSH
20965: CALL_OW 48
// if gny <> 0 then
20969: LD_EXP 31
20973: PUSH
20974: LD_INT 0
20976: NONEQUAL
20977: IFFALSE 21035
// begin SetClass ( gny , class_soldier ) ;
20979: LD_EXP 31
20983: PPUSH
20984: LD_INT 1
20986: PPUSH
20987: CALL_OW 336
// SetSide ( gny , You ) ;
20991: LD_EXP 31
20995: PPUSH
20996: LD_EXP 1
21000: PPUSH
21001: CALL_OW 235
// SetClass ( gny , class_mechanic ) ;
21005: LD_EXP 31
21009: PPUSH
21010: LD_INT 3
21012: PPUSH
21013: CALL_OW 336
// PlaceUnitXY ( gny , 142 , 79 , false ) ;
21017: LD_EXP 31
21021: PPUSH
21022: LD_INT 142
21024: PPUSH
21025: LD_INT 79
21027: PPUSH
21028: LD_INT 0
21030: PPUSH
21031: CALL_OW 48
// end ; SetSide ( pop , You2 ) ;
21035: LD_EXP 28
21039: PPUSH
21040: LD_EXP 2
21044: PPUSH
21045: CALL_OW 235
// PlaceUnitXY ( pop , 136 , 79 , false ) ;
21049: LD_EXP 28
21053: PPUSH
21054: LD_INT 136
21056: PPUSH
21057: LD_INT 79
21059: PPUSH
21060: LD_INT 0
21062: PPUSH
21063: CALL_OW 48
// end ;
21067: LD_VAR 0 1
21071: RET
// export function nacti_osobu ( ident ) ; begin
21072: LD_INT 0
21074: PPUSH
// if CheckCharacterSet ( ident ) then
21075: LD_VAR 0 1
21079: PPUSH
21080: CALL_OW 29
21084: IFFALSE 21103
// result := CreateCharacter ( ident ) else
21086: LD_ADDR_VAR 0 2
21090: PUSH
21091: LD_VAR 0 1
21095: PPUSH
21096: CALL_OW 34
21100: ST_TO_ADDR
21101: GO 21111
// result := 0 ;
21103: LD_ADDR_VAR 0 2
21107: PUSH
21108: LD_INT 0
21110: ST_TO_ADDR
// end ;
21111: LD_VAR 0 2
21115: RET
// export function create_arabi_komanda ; var pom ; begin
21116: LD_INT 0
21118: PPUSH
21119: PPUSH
// uc_side = Arabi ;
21120: LD_ADDR_OWVAR 20
21124: PUSH
21125: LD_EXP 5
21129: ST_TO_ADDR
// uc_nation = nation_arabian ;
21130: LD_ADDR_OWVAR 21
21134: PUSH
21135: LD_INT 2
21137: ST_TO_ADDR
// pom = [ ] ;
21138: LD_ADDR_VAR 0 2
21142: PUSH
21143: EMPTY
21144: ST_TO_ADDR
// pom = get_human ( sex_female , class_soldier , 8 ,  ) ;
21145: LD_ADDR_VAR 0 2
21149: PUSH
21150: LD_INT 2
21152: PPUSH
21153: LD_INT 1
21155: PPUSH
21156: LD_INT 8
21158: PPUSH
21159: LD_STRING 
21161: PPUSH
21162: CALL 16872 0 4
21166: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21167: LD_ADDR_VAR 0 2
21171: PUSH
21172: LD_VAR 0 2
21176: PUSH
21177: CALL 16837 0 0
21181: PPUSH
21182: LD_INT 1
21184: PPUSH
21185: LD_INT 6
21187: PPUSH
21188: LD_STRING 
21190: PPUSH
21191: CALL 16872 0 4
21195: ADD
21196: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21197: LD_ADDR_VAR 0 2
21201: PUSH
21202: LD_VAR 0 2
21206: PUSH
21207: CALL 16837 0 0
21211: PPUSH
21212: LD_INT 1
21214: PPUSH
21215: LD_INT 6
21217: PPUSH
21218: LD_STRING 
21220: PPUSH
21221: CALL 16872 0 4
21225: ADD
21226: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21227: LD_ADDR_VAR 0 2
21231: PUSH
21232: LD_VAR 0 2
21236: PUSH
21237: CALL 16837 0 0
21241: PPUSH
21242: LD_INT 1
21244: PPUSH
21245: LD_INT 6
21247: PPUSH
21248: LD_STRING 
21250: PPUSH
21251: CALL 16872 0 4
21255: ADD
21256: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 6 ,  ) ;
21257: LD_ADDR_LOC 23
21261: PUSH
21262: CALL 16837 0 0
21266: PPUSH
21267: LD_INT 3
21269: PPUSH
21270: LD_INT 6
21272: PPUSH
21273: LD_STRING 
21275: PPUSH
21276: CALL 16872 0 4
21280: ST_TO_ADDR
// vc_weapon = ar_gatling_gun ;
21281: LD_ADDR_OWVAR 40
21285: PUSH
21286: LD_INT 25
21288: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
21289: LD_ADDR_OWVAR 37
21293: PUSH
21294: LD_INT 13
21296: ST_TO_ADDR
// vc_control = control_manual ;
21297: LD_ADDR_OWVAR 38
21301: PUSH
21302: LD_INT 1
21304: ST_TO_ADDR
// vc_engine = engine_solar ;
21305: LD_ADDR_OWVAR 39
21309: PUSH
21310: LD_INT 2
21312: ST_TO_ADDR
// av = CreateVehicle ;
21313: LD_ADDR_LOC 24
21317: PUSH
21318: CALL_OW 45
21322: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
21323: LD_LOC 23
21327: PPUSH
21328: LD_LOC 24
21332: PPUSH
21333: CALL_OW 52
// pom = pom ^ av ;
21337: LD_ADDR_VAR 0 2
21341: PUSH
21342: LD_VAR 0 2
21346: PUSH
21347: LD_LOC 24
21351: ADD
21352: ST_TO_ADDR
// vc_weapon = ar_gun ;
21353: LD_ADDR_OWVAR 40
21357: PUSH
21358: LD_INT 27
21360: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
21361: LD_ADDR_OWVAR 37
21365: PUSH
21366: LD_INT 14
21368: ST_TO_ADDR
// vc_control = control_apeman ;
21369: LD_ADDR_OWVAR 38
21373: PUSH
21374: LD_INT 5
21376: ST_TO_ADDR
// vc_engine = engine_combustion ;
21377: LD_ADDR_OWVAR 39
21381: PUSH
21382: LD_INT 1
21384: ST_TO_ADDR
// av = CreateVehicle ;
21385: LD_ADDR_LOC 24
21389: PUSH
21390: CALL_OW 45
21394: ST_TO_ADDR
// pom = pom ^ av ;
21395: LD_ADDR_VAR 0 2
21399: PUSH
21400: LD_VAR 0 2
21404: PUSH
21405: LD_LOC 24
21409: ADD
21410: ST_TO_ADDR
// vc_weapon = ar_gun ;
21411: LD_ADDR_OWVAR 40
21415: PUSH
21416: LD_INT 27
21418: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
21419: LD_ADDR_OWVAR 37
21423: PUSH
21424: LD_INT 14
21426: ST_TO_ADDR
// vc_control = control_apeman ;
21427: LD_ADDR_OWVAR 38
21431: PUSH
21432: LD_INT 5
21434: ST_TO_ADDR
// vc_engine = engine_combustion ;
21435: LD_ADDR_OWVAR 39
21439: PUSH
21440: LD_INT 1
21442: ST_TO_ADDR
// av = CreateVehicle ;
21443: LD_ADDR_LOC 24
21447: PUSH
21448: CALL_OW 45
21452: ST_TO_ADDR
// pom = pom ^ av ;
21453: LD_ADDR_VAR 0 2
21457: PUSH
21458: LD_VAR 0 2
21462: PUSH
21463: LD_LOC 24
21467: ADD
21468: ST_TO_ADDR
// Arabi_komanda1 = pom ;
21469: LD_ADDR_EXP 67
21473: PUSH
21474: LD_VAR 0 2
21478: ST_TO_ADDR
// Arabi_komanda2 = pom ;
21479: LD_ADDR_EXP 68
21483: PUSH
21484: LD_VAR 0 2
21488: ST_TO_ADDR
// vc_weapon = ar_gun ;
21489: LD_ADDR_OWVAR 40
21493: PUSH
21494: LD_INT 27
21496: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
21497: LD_ADDR_OWVAR 37
21501: PUSH
21502: LD_INT 14
21504: ST_TO_ADDR
// vc_control = control_apeman ;
21505: LD_ADDR_OWVAR 38
21509: PUSH
21510: LD_INT 5
21512: ST_TO_ADDR
// vc_engine = engine_combustion ;
21513: LD_ADDR_OWVAR 39
21517: PUSH
21518: LD_INT 1
21520: ST_TO_ADDR
// av = CreateVehicle ;
21521: LD_ADDR_LOC 24
21525: PUSH
21526: CALL_OW 45
21530: ST_TO_ADDR
// pom = pom ^ av ;
21531: LD_ADDR_VAR 0 2
21535: PUSH
21536: LD_VAR 0 2
21540: PUSH
21541: LD_LOC 24
21545: ADD
21546: ST_TO_ADDR
// av = CreateVehicle ;
21547: LD_ADDR_LOC 24
21551: PUSH
21552: CALL_OW 45
21556: ST_TO_ADDR
// pom = pom ^ av ;
21557: LD_ADDR_VAR 0 2
21561: PUSH
21562: LD_VAR 0 2
21566: PUSH
21567: LD_LOC 24
21571: ADD
21572: ST_TO_ADDR
// vc_weapon = ar_gun ;
21573: LD_ADDR_OWVAR 40
21577: PUSH
21578: LD_INT 27
21580: ST_TO_ADDR
// av = CreateVehicle ;
21581: LD_ADDR_LOC 24
21585: PUSH
21586: CALL_OW 45
21590: ST_TO_ADDR
// pom = pom ^ av ;
21591: LD_ADDR_VAR 0 2
21595: PUSH
21596: LD_VAR 0 2
21600: PUSH
21601: LD_LOC 24
21605: ADD
21606: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21607: LD_ADDR_VAR 0 2
21611: PUSH
21612: LD_VAR 0 2
21616: PUSH
21617: CALL 16837 0 0
21621: PPUSH
21622: LD_INT 1
21624: PPUSH
21625: LD_INT 6
21627: PPUSH
21628: LD_STRING 
21630: PPUSH
21631: CALL 16872 0 4
21635: ADD
21636: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21637: LD_ADDR_VAR 0 2
21641: PUSH
21642: LD_VAR 0 2
21646: PUSH
21647: CALL 16837 0 0
21651: PPUSH
21652: LD_INT 1
21654: PPUSH
21655: LD_INT 6
21657: PPUSH
21658: LD_STRING 
21660: PPUSH
21661: CALL 16872 0 4
21665: ADD
21666: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 6 ,  ) ;
21667: LD_ADDR_LOC 23
21671: PUSH
21672: CALL 16837 0 0
21676: PPUSH
21677: LD_INT 3
21679: PPUSH
21680: LD_INT 6
21682: PPUSH
21683: LD_STRING 
21685: PPUSH
21686: CALL 16872 0 4
21690: ST_TO_ADDR
// vc_weapon = ar_gun ;
21691: LD_ADDR_OWVAR 40
21695: PUSH
21696: LD_INT 27
21698: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
21699: LD_ADDR_OWVAR 37
21703: PUSH
21704: LD_INT 13
21706: ST_TO_ADDR
// vc_control = control_manual ;
21707: LD_ADDR_OWVAR 38
21711: PUSH
21712: LD_INT 1
21714: ST_TO_ADDR
// vc_engine = engine_siberite ;
21715: LD_ADDR_OWVAR 39
21719: PUSH
21720: LD_INT 3
21722: ST_TO_ADDR
// av = CreateVehicle ;
21723: LD_ADDR_LOC 24
21727: PUSH
21728: CALL_OW 45
21732: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
21733: LD_LOC 23
21737: PPUSH
21738: LD_LOC 24
21742: PPUSH
21743: CALL_OW 52
// pom = pom ^ av ;
21747: LD_ADDR_VAR 0 2
21751: PUSH
21752: LD_VAR 0 2
21756: PUSH
21757: LD_LOC 24
21761: ADD
21762: ST_TO_ADDR
// Arabi_komanda3 = pom ;
21763: LD_ADDR_EXP 69
21767: PUSH
21768: LD_VAR 0 2
21772: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 8 ,  ) ;
21773: LD_ADDR_VAR 0 2
21777: PUSH
21778: CALL 16837 0 0
21782: PPUSH
21783: LD_INT 1
21785: PPUSH
21786: LD_INT 8
21788: PPUSH
21789: LD_STRING 
21791: PPUSH
21792: CALL 16872 0 4
21796: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21797: LD_ADDR_VAR 0 2
21801: PUSH
21802: LD_VAR 0 2
21806: PUSH
21807: CALL 16837 0 0
21811: PPUSH
21812: LD_INT 1
21814: PPUSH
21815: LD_INT 6
21817: PPUSH
21818: LD_STRING 
21820: PPUSH
21821: CALL 16872 0 4
21825: ADD
21826: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 6 ,  ) ;
21827: LD_ADDR_VAR 0 2
21831: PUSH
21832: LD_VAR 0 2
21836: PUSH
21837: CALL 16837 0 0
21841: PPUSH
21842: LD_INT 1
21844: PPUSH
21845: LD_INT 6
21847: PPUSH
21848: LD_STRING 
21850: PPUSH
21851: CALL 16872 0 4
21855: ADD
21856: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 6 ,  ) ;
21857: LD_ADDR_VAR 0 2
21861: PUSH
21862: LD_VAR 0 2
21866: PUSH
21867: CALL 16837 0 0
21871: PPUSH
21872: LD_INT 8
21874: PPUSH
21875: LD_INT 6
21877: PPUSH
21878: LD_STRING 
21880: PPUSH
21881: CALL 16872 0 4
21885: ADD
21886: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 6 ,  ) ;
21887: LD_ADDR_VAR 0 2
21891: PUSH
21892: LD_VAR 0 2
21896: PUSH
21897: CALL 16837 0 0
21901: PPUSH
21902: LD_INT 8
21904: PPUSH
21905: LD_INT 6
21907: PPUSH
21908: LD_STRING 
21910: PPUSH
21911: CALL 16872 0 4
21915: ADD
21916: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_scientistic , 6 ,  ) ;
21917: LD_ADDR_VAR 0 2
21921: PUSH
21922: LD_VAR 0 2
21926: PUSH
21927: CALL 16837 0 0
21931: PPUSH
21932: LD_INT 4
21934: PPUSH
21935: LD_INT 6
21937: PPUSH
21938: LD_STRING 
21940: PPUSH
21941: CALL 16872 0 4
21945: ADD
21946: ST_TO_ADDR
// Arabi_komanda4 = pom ;
21947: LD_ADDR_EXP 70
21951: PUSH
21952: LD_VAR 0 2
21956: ST_TO_ADDR
// end ;
21957: LD_VAR 0 1
21961: RET
// export function create_ru_posily_ma_utek ; var pom ; begin
21962: LD_INT 0
21964: PPUSH
21965: PPUSH
// uc_side = You2 ;
21966: LD_ADDR_OWVAR 20
21970: PUSH
21971: LD_EXP 2
21975: ST_TO_ADDR
// uc_nation = nation_russian ;
21976: LD_ADDR_OWVAR 21
21980: PUSH
21981: LD_INT 3
21983: ST_TO_ADDR
// pom = [ ] ;
21984: LD_ADDR_VAR 0 2
21988: PUSH
21989: EMPTY
21990: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 3 ,  ) ;
21991: LD_ADDR_LOC 23
21995: PUSH
21996: CALL 16837 0 0
22000: PPUSH
22001: LD_INT 3
22003: PPUSH
22004: LD_INT 3
22006: PPUSH
22007: LD_STRING 
22009: PPUSH
22010: CALL 16872 0 4
22014: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
22015: LD_ADDR_OWVAR 40
22019: PUSH
22020: LD_INT 42
22022: ST_TO_ADDR
// vc_chassis = ru_heavy_wheeled ;
22023: LD_ADDR_OWVAR 37
22027: PUSH
22028: LD_INT 23
22030: ST_TO_ADDR
// vc_control = control_manual ;
22031: LD_ADDR_OWVAR 38
22035: PUSH
22036: LD_INT 1
22038: ST_TO_ADDR
// vc_engine = engine_combustion ;
22039: LD_ADDR_OWVAR 39
22043: PUSH
22044: LD_INT 1
22046: ST_TO_ADDR
// av = CreateVehicle ;
22047: LD_ADDR_LOC 24
22051: PUSH
22052: CALL_OW 45
22056: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22057: LD_LOC 23
22061: PPUSH
22062: LD_LOC 24
22066: PPUSH
22067: CALL_OW 52
// pom = pom ^ av ;
22071: LD_ADDR_VAR 0 2
22075: PUSH
22076: LD_VAR 0 2
22080: PUSH
22081: LD_LOC 24
22085: ADD
22086: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 3 ,  ) ;
22087: LD_ADDR_LOC 23
22091: PUSH
22092: CALL 16837 0 0
22096: PPUSH
22097: LD_INT 3
22099: PPUSH
22100: LD_INT 3
22102: PPUSH
22103: LD_STRING 
22105: PPUSH
22106: CALL 16872 0 4
22110: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
22111: LD_ADDR_OWVAR 37
22115: PUSH
22116: LD_INT 21
22118: ST_TO_ADDR
// av = CreateVehicle ;
22119: LD_ADDR_LOC 24
22123: PUSH
22124: CALL_OW 45
22128: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22129: LD_LOC 23
22133: PPUSH
22134: LD_LOC 24
22138: PPUSH
22139: CALL_OW 52
// pom = pom ^ av ;
22143: LD_ADDR_VAR 0 2
22147: PUSH
22148: LD_VAR 0 2
22152: PUSH
22153: LD_LOC 24
22157: ADD
22158: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 3 ,  ) ;
22159: LD_ADDR_VAR 0 2
22163: PUSH
22164: LD_VAR 0 2
22168: PUSH
22169: CALL 16837 0 0
22173: PPUSH
22174: LD_INT 1
22176: PPUSH
22177: LD_INT 3
22179: PPUSH
22180: LD_STRING 
22182: PPUSH
22183: CALL 16872 0 4
22187: ADD
22188: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 3 ,  ) ;
22189: LD_ADDR_VAR 0 2
22193: PUSH
22194: LD_VAR 0 2
22198: PUSH
22199: CALL 16837 0 0
22203: PPUSH
22204: LD_INT 1
22206: PPUSH
22207: LD_INT 3
22209: PPUSH
22210: LD_STRING 
22212: PPUSH
22213: CALL 16872 0 4
22217: ADD
22218: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 3 ,  ) ;
22219: LD_ADDR_VAR 0 2
22223: PUSH
22224: LD_VAR 0 2
22228: PUSH
22229: CALL 16837 0 0
22233: PPUSH
22234: LD_INT 1
22236: PPUSH
22237: LD_INT 3
22239: PPUSH
22240: LD_STRING 
22242: PPUSH
22243: CALL 16872 0 4
22247: ADD
22248: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , 3 ,  ) ;
22249: LD_ADDR_VAR 0 2
22253: PUSH
22254: LD_VAR 0 2
22258: PUSH
22259: CALL 16837 0 0
22263: PPUSH
22264: LD_INT 3
22266: PPUSH
22267: LD_INT 3
22269: PPUSH
22270: LD_STRING 
22272: PPUSH
22273: CALL 16872 0 4
22277: ADD
22278: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , 3 ,  ) ;
22279: LD_ADDR_VAR 0 2
22283: PUSH
22284: LD_VAR 0 2
22288: PUSH
22289: CALL 16837 0 0
22293: PPUSH
22294: LD_INT 3
22296: PPUSH
22297: LD_INT 3
22299: PPUSH
22300: LD_STRING 
22302: PPUSH
22303: CALL 16872 0 4
22307: ADD
22308: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mechanic , 3 ,  ) ;
22309: LD_ADDR_VAR 0 2
22313: PUSH
22314: LD_VAR 0 2
22318: PUSH
22319: CALL 16837 0 0
22323: PPUSH
22324: LD_INT 3
22326: PPUSH
22327: LD_INT 3
22329: PPUSH
22330: LD_STRING 
22332: PPUSH
22333: CALL 16872 0 4
22337: ADD
22338: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , 3 ,  ) ;
22339: LD_ADDR_VAR 0 2
22343: PUSH
22344: LD_VAR 0 2
22348: PUSH
22349: CALL 16837 0 0
22353: PPUSH
22354: LD_INT 2
22356: PPUSH
22357: LD_INT 3
22359: PPUSH
22360: LD_STRING 
22362: PPUSH
22363: CALL 16872 0 4
22367: ADD
22368: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , 3 ,  ) ;
22369: LD_ADDR_VAR 0 2
22373: PUSH
22374: LD_VAR 0 2
22378: PUSH
22379: CALL 16837 0 0
22383: PPUSH
22384: LD_INT 2
22386: PPUSH
22387: LD_INT 3
22389: PPUSH
22390: LD_STRING 
22392: PPUSH
22393: CALL 16872 0 4
22397: ADD
22398: ST_TO_ADDR
// RU_posily_na_utek = pom ;
22399: LD_ADDR_EXP 58
22403: PUSH
22404: LD_VAR 0 2
22408: ST_TO_ADDR
// end ;
22409: LD_VAR 0 1
22413: RET
// export function create_arabi_na_posily_kirovu ; var pom ; begin
22414: LD_INT 0
22416: PPUSH
22417: PPUSH
// pom = [ ] ;
22418: LD_ADDR_VAR 0 2
22422: PUSH
22423: EMPTY
22424: ST_TO_ADDR
// uc_side = Arabi ;
22425: LD_ADDR_OWVAR 20
22429: PUSH
22430: LD_EXP 5
22434: ST_TO_ADDR
// uc_nation = nation_arabian ;
22435: LD_ADDR_OWVAR 21
22439: PUSH
22440: LD_INT 2
22442: ST_TO_ADDR
// vc_weapon = ar_gun ;
22443: LD_ADDR_OWVAR 40
22447: PUSH
22448: LD_INT 27
22450: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
22451: LD_ADDR_OWVAR 37
22455: PUSH
22456: LD_INT 14
22458: ST_TO_ADDR
// vc_control = control_apeman ;
22459: LD_ADDR_OWVAR 38
22463: PUSH
22464: LD_INT 5
22466: ST_TO_ADDR
// vc_engine = engine_combustion ;
22467: LD_ADDR_OWVAR 39
22471: PUSH
22472: LD_INT 1
22474: ST_TO_ADDR
// av = CreateVehicle ;
22475: LD_ADDR_LOC 24
22479: PUSH
22480: CALL_OW 45
22484: ST_TO_ADDR
// pom = pom ^ av ;
22485: LD_ADDR_VAR 0 2
22489: PUSH
22490: LD_VAR 0 2
22494: PUSH
22495: LD_LOC 24
22499: ADD
22500: ST_TO_ADDR
// av = CreateVehicle ;
22501: LD_ADDR_LOC 24
22505: PUSH
22506: CALL_OW 45
22510: ST_TO_ADDR
// pom = pom ^ av ;
22511: LD_ADDR_VAR 0 2
22515: PUSH
22516: LD_VAR 0 2
22520: PUSH
22521: LD_LOC 24
22525: ADD
22526: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 5 ,  ) ;
22527: LD_ADDR_LOC 23
22531: PUSH
22532: CALL 16837 0 0
22536: PPUSH
22537: LD_INT 3
22539: PPUSH
22540: LD_INT 5
22542: PPUSH
22543: LD_STRING 
22545: PPUSH
22546: CALL 16872 0 4
22550: ST_TO_ADDR
// vc_control = control_manual ;
22551: LD_ADDR_OWVAR 38
22555: PUSH
22556: LD_INT 1
22558: ST_TO_ADDR
// av = CreateVehicle ;
22559: LD_ADDR_LOC 24
22563: PUSH
22564: CALL_OW 45
22568: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22569: LD_LOC 23
22573: PPUSH
22574: LD_LOC 24
22578: PPUSH
22579: CALL_OW 52
// pom = pom ^ av ;
22583: LD_ADDR_VAR 0 2
22587: PUSH
22588: LD_VAR 0 2
22592: PUSH
22593: LD_LOC 24
22597: ADD
22598: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 5 ,  ) ;
22599: LD_ADDR_LOC 23
22603: PUSH
22604: CALL 16837 0 0
22608: PPUSH
22609: LD_INT 3
22611: PPUSH
22612: LD_INT 5
22614: PPUSH
22615: LD_STRING 
22617: PPUSH
22618: CALL 16872 0 4
22622: ST_TO_ADDR
// vc_control = control_manual ;
22623: LD_ADDR_OWVAR 38
22627: PUSH
22628: LD_INT 1
22630: ST_TO_ADDR
// av = CreateVehicle ;
22631: LD_ADDR_LOC 24
22635: PUSH
22636: CALL_OW 45
22640: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22641: LD_LOC 23
22645: PPUSH
22646: LD_LOC 24
22650: PPUSH
22651: CALL_OW 52
// pom = pom ^ av ;
22655: LD_ADDR_VAR 0 2
22659: PUSH
22660: LD_VAR 0 2
22664: PUSH
22665: LD_LOC 24
22669: ADD
22670: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 7 ,  ) ;
22671: LD_ADDR_VAR 0 2
22675: PUSH
22676: LD_VAR 0 2
22680: PUSH
22681: CALL 16837 0 0
22685: PPUSH
22686: LD_INT 1
22688: PPUSH
22689: LD_INT 7
22691: PPUSH
22692: LD_STRING 
22694: PPUSH
22695: CALL 16872 0 4
22699: ADD
22700: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 7 ,  ) ;
22701: LD_ADDR_VAR 0 2
22705: PUSH
22706: LD_VAR 0 2
22710: PUSH
22711: CALL 16837 0 0
22715: PPUSH
22716: LD_INT 1
22718: PPUSH
22719: LD_INT 7
22721: PPUSH
22722: LD_STRING 
22724: PPUSH
22725: CALL 16872 0 4
22729: ADD
22730: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22731: LD_ADDR_VAR 0 2
22735: PUSH
22736: LD_VAR 0 2
22740: PUSH
22741: CALL 16837 0 0
22745: PPUSH
22746: LD_INT 8
22748: PPUSH
22749: LD_INT 7
22751: PPUSH
22752: LD_STRING 
22754: PPUSH
22755: CALL 16872 0 4
22759: ADD
22760: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22761: LD_ADDR_VAR 0 2
22765: PUSH
22766: LD_VAR 0 2
22770: PUSH
22771: CALL 16837 0 0
22775: PPUSH
22776: LD_INT 8
22778: PPUSH
22779: LD_INT 7
22781: PPUSH
22782: LD_STRING 
22784: PPUSH
22785: CALL 16872 0 4
22789: ADD
22790: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22791: LD_ADDR_VAR 0 2
22795: PUSH
22796: LD_VAR 0 2
22800: PUSH
22801: CALL 16837 0 0
22805: PPUSH
22806: LD_INT 8
22808: PPUSH
22809: LD_INT 7
22811: PPUSH
22812: LD_STRING 
22814: PPUSH
22815: CALL 16872 0 4
22819: ADD
22820: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 7 ,  ) ;
22821: LD_ADDR_VAR 0 2
22825: PUSH
22826: LD_VAR 0 2
22830: PUSH
22831: CALL 16837 0 0
22835: PPUSH
22836: LD_INT 8
22838: PPUSH
22839: LD_INT 7
22841: PPUSH
22842: LD_STRING 
22844: PPUSH
22845: CALL 16872 0 4
22849: ADD
22850: ST_TO_ADDR
// ARABI_KIROV_POSILY = pom ;
22851: LD_ADDR_EXP 66
22855: PUSH
22856: LD_VAR 0 2
22860: ST_TO_ADDR
// end ;
22861: LD_VAR 0 1
22865: RET
// export function create_cerpaci_ruske_auta ; var pom ; begin
22866: LD_INT 0
22868: PPUSH
22869: PPUSH
// pom = [ ] ;
22870: LD_ADDR_VAR 0 2
22874: PUSH
22875: EMPTY
22876: ST_TO_ADDR
// uc_nation = nation_russian ;
22877: LD_ADDR_OWVAR 21
22881: PUSH
22882: LD_INT 3
22884: ST_TO_ADDR
// uc_side = You2 ;
22885: LD_ADDR_OWVAR 20
22889: PUSH
22890: LD_EXP 2
22894: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
22895: LD_ADDR_OWVAR 40
22899: PUSH
22900: LD_INT 51
22902: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
22903: LD_ADDR_OWVAR 37
22907: PUSH
22908: LD_INT 21
22910: ST_TO_ADDR
// vc_control = control_manual ;
22911: LD_ADDR_OWVAR 38
22915: PUSH
22916: LD_INT 1
22918: ST_TO_ADDR
// vc_engine = engine_combustion ;
22919: LD_ADDR_OWVAR 39
22923: PUSH
22924: LD_INT 1
22926: ST_TO_ADDR
// av = CreateVehicle ;
22927: LD_ADDR_LOC 24
22931: PUSH
22932: CALL_OW 45
22936: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , 4 ,  ) ;
22937: LD_ADDR_LOC 23
22941: PUSH
22942: CALL 16837 0 0
22946: PPUSH
22947: LD_INT 1
22949: PPUSH
22950: LD_INT 4
22952: PPUSH
22953: LD_STRING 
22955: PPUSH
22956: CALL 16872 0 4
22960: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
22961: LD_LOC 23
22965: PPUSH
22966: LD_LOC 24
22970: PPUSH
22971: CALL_OW 52
// SetCargo ( av , mat_oil , 100 ) ;
22975: LD_LOC 24
22979: PPUSH
22980: LD_INT 2
22982: PPUSH
22983: LD_INT 100
22985: PPUSH
22986: CALL_OW 290
// pom = pom ^ av ;
22990: LD_ADDR_VAR 0 2
22994: PUSH
22995: LD_VAR 0 2
22999: PUSH
23000: LD_LOC 24
23004: ADD
23005: ST_TO_ADDR
// av = CreateVehicle ;
23006: LD_ADDR_LOC 24
23010: PUSH
23011: CALL_OW 45
23015: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , 4 ,  ) ;
23016: LD_ADDR_LOC 23
23020: PUSH
23021: CALL 16837 0 0
23025: PPUSH
23026: LD_INT 1
23028: PPUSH
23029: LD_INT 4
23031: PPUSH
23032: LD_STRING 
23034: PPUSH
23035: CALL 16872 0 4
23039: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
23040: LD_LOC 23
23044: PPUSH
23045: LD_LOC 24
23049: PPUSH
23050: CALL_OW 52
// SetCargo ( av , mat_oil , 100 ) ;
23054: LD_LOC 24
23058: PPUSH
23059: LD_INT 2
23061: PPUSH
23062: LD_INT 100
23064: PPUSH
23065: CALL_OW 290
// pom = pom ^ av ;
23069: LD_ADDR_VAR 0 2
23073: PUSH
23074: LD_VAR 0 2
23078: PUSH
23079: LD_LOC 24
23083: ADD
23084: ST_TO_ADDR
// av = CreateVehicle ;
23085: LD_ADDR_LOC 24
23089: PUSH
23090: CALL_OW 45
23094: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , 4 ,  ) ;
23095: LD_ADDR_LOC 23
23099: PUSH
23100: CALL 16837 0 0
23104: PPUSH
23105: LD_INT 1
23107: PPUSH
23108: LD_INT 4
23110: PPUSH
23111: LD_STRING 
23113: PPUSH
23114: CALL 16872 0 4
23118: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
23119: LD_LOC 23
23123: PPUSH
23124: LD_LOC 24
23128: PPUSH
23129: CALL_OW 52
// SetCargo ( av , mat_oil , 100 ) ;
23133: LD_LOC 24
23137: PPUSH
23138: LD_INT 2
23140: PPUSH
23141: LD_INT 100
23143: PPUSH
23144: CALL_OW 290
// pom = pom ^ av ;
23148: LD_ADDR_VAR 0 2
23152: PUSH
23153: LD_VAR 0 2
23157: PUSH
23158: LD_LOC 24
23162: ADD
23163: ST_TO_ADDR
// RUSI_CERPACI_AUTA_LIST = pom ;
23164: LD_ADDR_EXP 59
23168: PUSH
23169: LD_VAR 0 2
23173: ST_TO_ADDR
// end ; end_of_file
23174: LD_VAR 0 1
23178: RET
// var Am_hlidka ; var Am_pomoc ; export Am_posily ; export Prezite_posily ; every 0 0$0.1 do var i ;
23179: GO 23181
23181: DISABLE
23182: LD_INT 0
23184: PPUSH
// begin Am_hlidka = [ ] ;
23185: LD_ADDR_LOC 25
23189: PUSH
23190: EMPTY
23191: ST_TO_ADDR
// Am_pomoc = [ ] ;
23192: LD_ADDR_LOC 26
23196: PUSH
23197: EMPTY
23198: ST_TO_ADDR
// Prezite_posily = 0 ;
23199: LD_ADDR_EXP 73
23203: PUSH
23204: LD_INT 0
23206: ST_TO_ADDR
// for i in [ 101 , 102 , 103 ] do
23207: LD_ADDR_VAR 0 1
23211: PUSH
23212: LD_INT 101
23214: PUSH
23215: LD_INT 102
23217: PUSH
23218: LD_INT 103
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: LIST
23225: PUSH
23226: FOR_IN
23227: IFFALSE 23236
// enable ( i ) end ;
23229: LD_VAR 0 1
23233: ENABLE_MARKED
23234: GO 23226
23236: POP
23237: POP
23238: PPOPN 1
23240: END
// export function PrepareOmicron ; var i , skill ; begin
23241: LD_INT 0
23243: PPUSH
23244: PPUSH
23245: PPUSH
// uc_side := 1 ;
23246: LD_ADDR_OWVAR 20
23250: PUSH
23251: LD_INT 1
23253: ST_TO_ADDR
// uc_nation := 1 ;
23254: LD_ADDR_OWVAR 21
23258: PUSH
23259: LD_INT 1
23261: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
23262: LD_ADDR_VAR 0 3
23266: PUSH
23267: LD_INT 3
23269: PUSH
23270: LD_INT 4
23272: PUSH
23273: LD_INT 5
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: LIST
23280: PUSH
23281: LD_OWVAR 67
23285: ARRAY
23286: ST_TO_ADDR
// for i = 1 to Difficulty do
23287: LD_ADDR_VAR 0 2
23291: PUSH
23292: DOUBLE
23293: LD_INT 1
23295: DEC
23296: ST_TO_ADDR
23297: LD_OWVAR 67
23301: PUSH
23302: FOR_TO
23303: IFFALSE 23343
// begin PrepareHuman ( false , 2 , skill ) ;
23305: LD_INT 0
23307: PPUSH
23308: LD_INT 2
23310: PPUSH
23311: LD_VAR 0 3
23315: PPUSH
23316: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 20 , 13 , 6 , false ) ;
23320: CALL_OW 44
23324: PPUSH
23325: LD_INT 20
23327: PPUSH
23328: LD_INT 13
23330: PPUSH
23331: LD_INT 6
23333: PPUSH
23334: LD_INT 0
23336: PPUSH
23337: CALL_OW 50
// end ;
23341: GO 23302
23343: POP
23344: POP
// if Difficulty > 1 then
23345: LD_OWVAR 67
23349: PUSH
23350: LD_INT 1
23352: GREATER
23353: IFFALSE 23365
// begin PlaceWeaponTurret ( Am_bu1 , us_gatling_gun ) ;
23355: LD_INT 7
23357: PPUSH
23358: LD_INT 4
23360: PPUSH
23361: CALL_OW 431
// end ; end ;
23365: LD_VAR 0 1
23369: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var i , engs , buildings ;
23370: LD_INT 22
23372: PUSH
23373: LD_INT 1
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 25
23382: PUSH
23383: LD_INT 2
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: PPUSH
23394: CALL_OW 69
23398: IFFALSE 23603
23400: GO 23402
23402: DISABLE
23403: LD_INT 0
23405: PPUSH
23406: PPUSH
23407: PPUSH
// begin enable ;
23408: ENABLE
// buildings := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23409: LD_ADDR_VAR 0 3
23413: PUSH
23414: LD_INT 22
23416: PUSH
23417: LD_INT 1
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 30
23426: PUSH
23427: LD_INT 4
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 3
23436: PUSH
23437: LD_INT 24
23439: PUSH
23440: LD_INT 1000
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: LIST
23455: PPUSH
23456: CALL_OW 69
23460: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
23461: LD_ADDR_VAR 0 2
23465: PUSH
23466: LD_INT 22
23468: PUSH
23469: LD_INT 1
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 25
23478: PUSH
23479: LD_INT 2
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PPUSH
23490: CALL_OW 69
23494: ST_TO_ADDR
// for i in engs do
23495: LD_ADDR_VAR 0 1
23499: PUSH
23500: LD_VAR 0 2
23504: PUSH
23505: FOR_IN
23506: IFFALSE 23601
// if not HasTask ( i ) and not IsInUnit ( i ) and not buildings then
23508: LD_VAR 0 1
23512: PPUSH
23513: CALL_OW 314
23517: NOT
23518: PUSH
23519: LD_VAR 0 1
23523: PPUSH
23524: CALL_OW 310
23528: NOT
23529: AND
23530: PUSH
23531: LD_VAR 0 3
23535: NOT
23536: AND
23537: IFFALSE 23553
// ComEnterUnit ( i , Am_dep ) else
23539: LD_VAR 0 1
23543: PPUSH
23544: LD_INT 12
23546: PPUSH
23547: CALL_OW 120
23551: GO 23599
// if buildings then
23553: LD_VAR 0 3
23557: IFFALSE 23599
// if IsInUnit ( i ) then
23559: LD_VAR 0 1
23563: PPUSH
23564: CALL_OW 310
23568: IFFALSE 23581
// ComExitBuilding ( i ) else
23570: LD_VAR 0 1
23574: PPUSH
23575: CALL_OW 122
23579: GO 23599
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
23581: LD_VAR 0 1
23585: PPUSH
23586: LD_VAR 0 3
23590: PUSH
23591: LD_INT 1
23593: ARRAY
23594: PPUSH
23595: CALL_OW 130
23599: GO 23505
23601: POP
23602: POP
// end ;
23603: PPOPN 3
23605: END
// every 0 0$1 do var budovy ;
23606: GO 23608
23608: DISABLE
23609: LD_INT 0
23611: PPUSH
// begin PrepareOmicron ;
23612: CALL 23241 0 0
// ComEnterUnit ( Am_pru1 , Am_bar2 ) ;
23616: LD_INT 26
23618: PPUSH
23619: LD_INT 25
23621: PPUSH
23622: CALL_OW 120
// ComEnterUnit ( Am_pru2 , Am_bar2 ) ;
23626: LD_INT 27
23628: PPUSH
23629: LD_INT 25
23631: PPUSH
23632: CALL_OW 120
// ComEnterUnit ( Am_pru3 , Am_bar2 ) ;
23636: LD_INT 28
23638: PPUSH
23639: LD_INT 25
23641: PPUSH
23642: CALL_OW 120
// ComEnterUnit ( Am_vb1 , Am_bu1 ) ;
23646: LD_INT 29
23648: PPUSH
23649: LD_INT 7
23651: PPUSH
23652: CALL_OW 120
// ComEnterUnit ( Am_vb2 , Am_bu2 ) ;
23656: LD_INT 30
23658: PPUSH
23659: LD_INT 8
23661: PPUSH
23662: CALL_OW 120
// ComEnterUnit ( Am_vb3 , Am_bu3 ) ;
23666: LD_INT 31
23668: PPUSH
23669: LD_INT 19
23671: PPUSH
23672: CALL_OW 120
// ComEnterUnit ( Am_vb4 , Am_bu4 ) ;
23676: LD_INT 32
23678: PPUSH
23679: LD_INT 18
23681: PPUSH
23682: CALL_OW 120
// ComEnterUnit ( Am_sol1 , Am_bar1 ) ;
23686: LD_INT 38
23688: PPUSH
23689: LD_INT 11
23691: PPUSH
23692: CALL_OW 120
// ComEnterUnit ( Am_sol2 , Am_bar1 ) ;
23696: LD_INT 39
23698: PPUSH
23699: LD_INT 11
23701: PPUSH
23702: CALL_OW 120
// ComEnterUnit ( Am_sol3 , Am_bar1 ) ;
23706: LD_INT 40
23708: PPUSH
23709: LD_INT 11
23711: PPUSH
23712: CALL_OW 120
// ComEnterUnit ( pitomec , Am_bar2 ) ;
23716: LD_INT 63
23718: PPUSH
23719: LD_INT 25
23721: PPUSH
23722: CALL_OW 120
// ComEnterUnit ( Am_sol4 , Am_dep ) ;
23726: LD_INT 41
23728: PPUSH
23729: LD_INT 12
23731: PPUSH
23732: CALL_OW 120
// ComEnterUnit ( Am_eng1 , Am_dep ) ;
23736: LD_INT 36
23738: PPUSH
23739: LD_INT 12
23741: PPUSH
23742: CALL_OW 120
// ComEnterUnit ( Am_sci1 , Am_lab ) ;
23746: LD_INT 37
23748: PPUSH
23749: LD_INT 9
23751: PPUSH
23752: CALL_OW 120
// ComEnterUnit ( Am_me1 , Am_fac ) ;
23756: LD_INT 33
23758: PPUSH
23759: LD_INT 10
23761: PPUSH
23762: CALL_OW 120
// ComEnterUnit ( Am_me2 , Am_fac ) ;
23766: LD_INT 34
23768: PPUSH
23769: LD_INT 10
23771: PPUSH
23772: CALL_OW 120
// ComEnterUnit ( Am_me3 , Am_fac ) ;
23776: LD_INT 35
23778: PPUSH
23779: LD_INT 10
23781: PPUSH
23782: CALL_OW 120
// budovy = [ Am_bu1 , Am_bu2 , Am_bu3 , Am_bu4 , Am_el1 , Am_el2 , Am_lab , Am_fac , Am_mine , Am_dep , Am_bar1 , Am_bar2 ] ;
23786: LD_ADDR_VAR 0 1
23790: PUSH
23791: LD_INT 7
23793: PUSH
23794: LD_INT 8
23796: PUSH
23797: LD_INT 19
23799: PUSH
23800: LD_INT 18
23802: PUSH
23803: LD_INT 22
23805: PUSH
23806: LD_INT 23
23808: PUSH
23809: LD_INT 9
23811: PUSH
23812: LD_INT 10
23814: PUSH
23815: LD_INT 24
23817: PUSH
23818: LD_INT 12
23820: PUSH
23821: LD_INT 11
23823: PUSH
23824: LD_INT 25
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: ST_TO_ADDR
// SetBLevel ( budovy , levely_am_budov [ difficulty ] ) ;
23841: LD_VAR 0 1
23845: PPUSH
23846: LD_EXP 21
23850: PUSH
23851: LD_OWVAR 67
23855: ARRAY
23856: PPUSH
23857: CALL_OW 241
// end ;
23861: PPOPN 1
23863: END
// export function amici_hlidka ; begin
23864: LD_INT 0
23866: PPUSH
// case difficulty of 1 :
23867: LD_OWVAR 67
23871: PUSH
23872: LD_INT 1
23874: DOUBLE
23875: EQUAL
23876: IFTRUE 23880
23878: GO 23894
23880: POP
// Am_hlidka = [ Am_pru1 ] ; 2 :
23881: LD_ADDR_LOC 25
23885: PUSH
23886: LD_INT 26
23888: PUSH
23889: EMPTY
23890: LIST
23891: ST_TO_ADDR
23892: GO 23951
23894: LD_INT 2
23896: DOUBLE
23897: EQUAL
23898: IFTRUE 23902
23900: GO 23920
23902: POP
// Am_hlidka = [ Am_pru1 , Am_pru2 ] ; 3 :
23903: LD_ADDR_LOC 25
23907: PUSH
23908: LD_INT 26
23910: PUSH
23911: LD_INT 27
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: ST_TO_ADDR
23918: GO 23951
23920: LD_INT 3
23922: DOUBLE
23923: EQUAL
23924: IFTRUE 23928
23926: GO 23950
23928: POP
// Am_hlidka = [ Am_pru1 , Am_pru2 , Am_pru3 ] ; end ;
23929: LD_ADDR_LOC 25
23933: PUSH
23934: LD_INT 26
23936: PUSH
23937: LD_INT 27
23939: PUSH
23940: LD_INT 28
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: LIST
23947: ST_TO_ADDR
23948: GO 23951
23950: POP
// ComExitBuilding ( Am_hlidka ) ;
23951: LD_LOC 25
23955: PPUSH
23956: CALL_OW 122
// AddComAgressiveMove ( Am_hlidka , 34 , 16 ) ;
23960: LD_LOC 25
23964: PPUSH
23965: LD_INT 34
23967: PPUSH
23968: LD_INT 16
23970: PPUSH
23971: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
23975: LD_LOC 25
23979: PPUSH
23980: LD_INT 245
23982: PPUSH
23983: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 51 , 19 ) ;
23987: LD_LOC 25
23991: PPUSH
23992: LD_INT 51
23994: PPUSH
23995: LD_INT 19
23997: PPUSH
23998: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24002: LD_LOC 25
24006: PPUSH
24007: LD_INT 245
24009: PPUSH
24010: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 54 , 5 ) ;
24014: LD_LOC 25
24018: PPUSH
24019: LD_INT 54
24021: PPUSH
24022: LD_INT 5
24024: PPUSH
24025: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24029: LD_LOC 25
24033: PPUSH
24034: LD_INT 245
24036: PPUSH
24037: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 77 , 16 ) ;
24041: LD_LOC 25
24045: PPUSH
24046: LD_INT 77
24048: PPUSH
24049: LD_INT 16
24051: PPUSH
24052: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24056: LD_LOC 25
24060: PPUSH
24061: LD_INT 245
24063: PPUSH
24064: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 81 , 32 ) ;
24068: LD_LOC 25
24072: PPUSH
24073: LD_INT 81
24075: PPUSH
24076: LD_INT 32
24078: PPUSH
24079: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24083: LD_LOC 25
24087: PPUSH
24088: LD_INT 245
24090: PPUSH
24091: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 73 , 32 ) ;
24095: LD_LOC 25
24099: PPUSH
24100: LD_INT 73
24102: PPUSH
24103: LD_INT 32
24105: PPUSH
24106: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24110: LD_LOC 25
24114: PPUSH
24115: LD_INT 245
24117: PPUSH
24118: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 57 , 33 ) ;
24122: LD_LOC 25
24126: PPUSH
24127: LD_INT 57
24129: PPUSH
24130: LD_INT 33
24132: PPUSH
24133: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24137: LD_LOC 25
24141: PPUSH
24142: LD_INT 245
24144: PPUSH
24145: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 45 , 24 ) ;
24149: LD_LOC 25
24153: PPUSH
24154: LD_INT 45
24156: PPUSH
24157: LD_INT 24
24159: PPUSH
24160: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24164: LD_LOC 25
24168: PPUSH
24169: LD_INT 245
24171: PPUSH
24172: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 13 ) ;
24176: LD_LOC 25
24180: PPUSH
24181: LD_INT 34
24183: PPUSH
24184: LD_INT 13
24186: PPUSH
24187: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24191: LD_LOC 25
24195: PPUSH
24196: LD_INT 245
24198: PPUSH
24199: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 16 ) ;
24203: LD_LOC 25
24207: PPUSH
24208: LD_INT 34
24210: PPUSH
24211: LD_INT 16
24213: PPUSH
24214: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24218: LD_LOC 25
24222: PPUSH
24223: LD_INT 245
24225: PPUSH
24226: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 51 , 19 ) ;
24230: LD_LOC 25
24234: PPUSH
24235: LD_INT 51
24237: PPUSH
24238: LD_INT 19
24240: PPUSH
24241: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24245: LD_LOC 25
24249: PPUSH
24250: LD_INT 245
24252: PPUSH
24253: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 54 , 5 ) ;
24257: LD_LOC 25
24261: PPUSH
24262: LD_INT 54
24264: PPUSH
24265: LD_INT 5
24267: PPUSH
24268: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24272: LD_LOC 25
24276: PPUSH
24277: LD_INT 245
24279: PPUSH
24280: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 77 , 16 ) ;
24284: LD_LOC 25
24288: PPUSH
24289: LD_INT 77
24291: PPUSH
24292: LD_INT 16
24294: PPUSH
24295: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24299: LD_LOC 25
24303: PPUSH
24304: LD_INT 245
24306: PPUSH
24307: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 81 , 32 ) ;
24311: LD_LOC 25
24315: PPUSH
24316: LD_INT 81
24318: PPUSH
24319: LD_INT 32
24321: PPUSH
24322: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24326: LD_LOC 25
24330: PPUSH
24331: LD_INT 245
24333: PPUSH
24334: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 73 , 32 ) ;
24338: LD_LOC 25
24342: PPUSH
24343: LD_INT 73
24345: PPUSH
24346: LD_INT 32
24348: PPUSH
24349: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24353: LD_LOC 25
24357: PPUSH
24358: LD_INT 245
24360: PPUSH
24361: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 57 , 33 ) ;
24365: LD_LOC 25
24369: PPUSH
24370: LD_INT 57
24372: PPUSH
24373: LD_INT 33
24375: PPUSH
24376: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24380: LD_LOC 25
24384: PPUSH
24385: LD_INT 245
24387: PPUSH
24388: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 45 , 24 ) ;
24392: LD_LOC 25
24396: PPUSH
24397: LD_INT 45
24399: PPUSH
24400: LD_INT 24
24402: PPUSH
24403: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24407: LD_LOC 25
24411: PPUSH
24412: LD_INT 245
24414: PPUSH
24415: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 13 ) ;
24419: LD_LOC 25
24423: PPUSH
24424: LD_INT 34
24426: PPUSH
24427: LD_INT 13
24429: PPUSH
24430: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24434: LD_LOC 25
24438: PPUSH
24439: LD_INT 245
24441: PPUSH
24442: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 16 ) ;
24446: LD_LOC 25
24450: PPUSH
24451: LD_INT 34
24453: PPUSH
24454: LD_INT 16
24456: PPUSH
24457: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24461: LD_LOC 25
24465: PPUSH
24466: LD_INT 245
24468: PPUSH
24469: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 51 , 19 ) ;
24473: LD_LOC 25
24477: PPUSH
24478: LD_INT 51
24480: PPUSH
24481: LD_INT 19
24483: PPUSH
24484: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24488: LD_LOC 25
24492: PPUSH
24493: LD_INT 245
24495: PPUSH
24496: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 54 , 5 ) ;
24500: LD_LOC 25
24504: PPUSH
24505: LD_INT 54
24507: PPUSH
24508: LD_INT 5
24510: PPUSH
24511: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24515: LD_LOC 25
24519: PPUSH
24520: LD_INT 245
24522: PPUSH
24523: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 77 , 16 ) ;
24527: LD_LOC 25
24531: PPUSH
24532: LD_INT 77
24534: PPUSH
24535: LD_INT 16
24537: PPUSH
24538: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24542: LD_LOC 25
24546: PPUSH
24547: LD_INT 245
24549: PPUSH
24550: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 81 , 32 ) ;
24554: LD_LOC 25
24558: PPUSH
24559: LD_INT 81
24561: PPUSH
24562: LD_INT 32
24564: PPUSH
24565: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24569: LD_LOC 25
24573: PPUSH
24574: LD_INT 245
24576: PPUSH
24577: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 73 , 32 ) ;
24581: LD_LOC 25
24585: PPUSH
24586: LD_INT 73
24588: PPUSH
24589: LD_INT 32
24591: PPUSH
24592: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24596: LD_LOC 25
24600: PPUSH
24601: LD_INT 245
24603: PPUSH
24604: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 57 , 33 ) ;
24608: LD_LOC 25
24612: PPUSH
24613: LD_INT 57
24615: PPUSH
24616: LD_INT 33
24618: PPUSH
24619: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24623: LD_LOC 25
24627: PPUSH
24628: LD_INT 245
24630: PPUSH
24631: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 45 , 24 ) ;
24635: LD_LOC 25
24639: PPUSH
24640: LD_INT 45
24642: PPUSH
24643: LD_INT 24
24645: PPUSH
24646: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24650: LD_LOC 25
24654: PPUSH
24655: LD_INT 245
24657: PPUSH
24658: CALL_OW 202
// AddComAgressiveMove ( Am_hlidka , 34 , 13 ) ;
24662: LD_LOC 25
24666: PPUSH
24667: LD_INT 34
24669: PPUSH
24670: LD_INT 13
24672: PPUSH
24673: CALL_OW 174
// AddComWait ( Am_hlidka , 0 0$7 ) ;
24677: LD_LOC 25
24681: PPUSH
24682: LD_INT 245
24684: PPUSH
24685: CALL_OW 202
// enable ( 101 ) ;
24689: LD_INT 101
24691: ENABLE_MARKED
// enable ( 103 ) ;
24692: LD_INT 103
24694: ENABLE_MARKED
// enable ( 102 ) ;
24695: LD_INT 102
24697: ENABLE_MARKED
// end ;
24698: LD_VAR 0 1
24702: RET
// every 0 0$1 marked 102 do var i , j , pom ;
24703: GO 24705
24705: DISABLE
24706: LD_INT 0
24708: PPUSH
24709: PPUSH
24710: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
24711: LD_ADDR_VAR 0 3
24715: PUSH
24716: LD_INT 22
24718: PUSH
24719: LD_EXP 1
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 21
24730: PUSH
24731: LD_INT 1
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PPUSH
24742: CALL_OW 69
24746: ST_TO_ADDR
// for i in Am_hlidka do
24747: LD_ADDR_VAR 0 1
24751: PUSH
24752: LD_LOC 25
24756: PUSH
24757: FOR_IN
24758: IFFALSE 24826
// if GetLives ( i ) < 1000 then
24760: LD_VAR 0 1
24764: PPUSH
24765: CALL_OW 256
24769: PUSH
24770: LD_INT 1000
24772: LESS
24773: IFFALSE 24824
// for j in pom do
24775: LD_ADDR_VAR 0 2
24779: PUSH
24780: LD_VAR 0 3
24784: PUSH
24785: FOR_IN
24786: IFFALSE 24822
// begin if See ( Amici , j ) then
24788: LD_EXP 4
24792: PPUSH
24793: LD_VAR 0 2
24797: PPUSH
24798: CALL_OW 292
24802: IFFALSE 24818
// ComAttackUnit ( Am_hlidka , j ) ;
24804: LD_LOC 25
24808: PPUSH
24809: LD_VAR 0 2
24813: PPUSH
24814: CALL_OW 115
// break ;
24818: GO 24822
// end ;
24820: GO 24785
24822: POP
24823: POP
24824: GO 24757
24826: POP
24827: POP
// end ;
24828: PPOPN 3
24830: END
// every 0 0$1 marked 101 do var i ; var jedn ; var posli ;
24831: GO 24833
24833: DISABLE
24834: LD_INT 0
24836: PPUSH
24837: PPUSH
24838: PPUSH
// begin jedn = [ ] ;
24839: LD_ADDR_VAR 0 2
24843: PUSH
24844: EMPTY
24845: ST_TO_ADDR
// posli = false ;
24846: LD_ADDR_VAR 0 3
24850: PUSH
24851: LD_INT 0
24853: ST_TO_ADDR
// for i in Am_hlidka do
24854: LD_ADDR_VAR 0 1
24858: PUSH
24859: LD_LOC 25
24863: PUSH
24864: FOR_IN
24865: IFFALSE 24900
// if GetLives ( i ) < 1000 then
24867: LD_VAR 0 1
24871: PPUSH
24872: CALL_OW 256
24876: PUSH
24877: LD_INT 1000
24879: LESS
24880: IFFALSE 24898
// jedn = jedn ^ i ;
24882: LD_ADDR_VAR 0 2
24886: PUSH
24887: LD_VAR 0 2
24891: PUSH
24892: LD_VAR 0 1
24896: ADD
24897: ST_TO_ADDR
24898: GO 24864
24900: POP
24901: POP
// if jedn > 0 then
24902: LD_VAR 0 2
24906: PUSH
24907: LD_INT 0
24909: GREATER
24910: IFFALSE 24955
// begin wait ( 0 0$7 ) ;
24912: LD_INT 245
24914: PPUSH
24915: CALL_OW 67
// for i in jedn do
24919: LD_ADDR_VAR 0 1
24923: PUSH
24924: LD_VAR 0 2
24928: PUSH
24929: FOR_IN
24930: IFFALSE 24953
// if IsOK ( i ) then
24932: LD_VAR 0 1
24936: PPUSH
24937: CALL_OW 302
24941: IFFALSE 24951
// posli = true ;
24943: LD_ADDR_VAR 0 3
24947: PUSH
24948: LD_INT 1
24950: ST_TO_ADDR
24951: GO 24929
24953: POP
24954: POP
// end ; if posli then
24955: LD_VAR 0 3
24959: IFFALSE 24974
// americka_pomoc_hlidce ( jedn [ 1 ] ) ;
24961: LD_VAR 0 2
24965: PUSH
24966: LD_INT 1
24968: ARRAY
24969: PPUSH
24970: CALL 25133 0 1
// enable ;
24974: ENABLE
// end ;
24975: PPOPN 3
24977: END
// every 0 0$1 marked 102 do
24978: GO 24980
24980: DISABLE
// begin wait ( schol_find_amikama [ difficulty ] ) ;
24981: LD_EXP 12
24985: PUSH
24986: LD_OWVAR 67
24990: ARRAY
24991: PPUSH
24992: CALL_OW 67
// if GetSide ( schol ) = You or GetSide ( schol2 ) = You then
24996: LD_EXP 33
25000: PPUSH
25001: CALL_OW 255
25005: PUSH
25006: LD_EXP 1
25010: EQUAL
25011: PUSH
25012: LD_EXP 34
25016: PPUSH
25017: CALL_OW 255
25021: PUSH
25022: LD_EXP 1
25026: EQUAL
25027: OR
25028: IFFALSE 25034
// exit else
25030: GO 25063
25032: GO 25063
// begin ComAgressiveMove ( Am_hlidka , 38 , 2 ) ;
25034: LD_LOC 25
25038: PPUSH
25039: LD_INT 38
25041: PPUSH
25042: LD_INT 2
25044: PPUSH
25045: CALL_OW 114
// AddComAttackUnit ( Am_hlidka , schol2 ) ;
25049: LD_LOC 25
25053: PPUSH
25054: LD_EXP 34
25058: PPUSH
25059: CALL_OW 175
// end ; end ;
25063: END
// every 0 0$3 trigger scholtze_saved or IsDead ( schol2 ) do
25064: LD_EXP 37
25068: PUSH
25069: LD_EXP 34
25073: PPUSH
25074: CALL_OW 301
25078: OR
25079: IFFALSE 25132
25081: GO 25083
25083: DISABLE
// begin ComAgressiveMove ( Am_hlidka , 28 , 18 ) ;
25084: LD_LOC 25
25088: PPUSH
25089: LD_INT 28
25091: PPUSH
25092: LD_INT 18
25094: PPUSH
25095: CALL_OW 114
// AddComEnterUnit ( Am_hlidka , Am_bar2 ) ;
25099: LD_LOC 25
25103: PPUSH
25104: LD_INT 25
25106: PPUSH
25107: CALL_OW 180
// ComAgressiveMove ( Am_pomoc , 21 , 32 ) ;
25111: LD_LOC 26
25115: PPUSH
25116: LD_INT 21
25118: PPUSH
25119: LD_INT 32
25121: PPUSH
25122: CALL_OW 114
// disable ( 101 ) ;
25126: LD_INT 101
25128: DISABLE_MARKED
// disable ( 102 ) ;
25129: LD_INT 102
25131: DISABLE_MARKED
// end ;
25132: END
// function americka_pomoc_hlidce ( jedn ) ; var i ; begin
25133: LD_INT 0
25135: PPUSH
25136: PPUSH
// Am_pomoc = AMERICKA_POMOC_HLIDCE_LIST ;
25137: LD_ADDR_LOC 26
25141: PUSH
25142: LD_EXP 50
25146: ST_TO_ADDR
// while SeeArea ( Amici , Help_area ) > 0 do
25147: LD_EXP 4
25151: PPUSH
25152: LD_INT 3
25154: PPUSH
25155: CALL_OW 294
25159: PUSH
25160: LD_INT 0
25162: GREATER
25163: IFFALSE 25174
// wait ( 0 0$1 ) ;
25165: LD_INT 35
25167: PPUSH
25168: CALL_OW 67
25172: GO 25147
// for i in AMERICKA_POMOC_HLIDCE_LIST do
25174: LD_ADDR_VAR 0 3
25178: PUSH
25179: LD_EXP 50
25183: PUSH
25184: FOR_IN
25185: IFFALSE 25204
// PlaceUnitArea ( i , Help_area , false ) ;
25187: LD_VAR 0 3
25191: PPUSH
25192: LD_INT 3
25194: PPUSH
25195: LD_INT 0
25197: PPUSH
25198: CALL_OW 49
25202: GO 25184
25204: POP
25205: POP
// wait ( 0 0$1 ) ;
25206: LD_INT 35
25208: PPUSH
25209: CALL_OW 67
// ComAgressiveMove ( Am_pomoc , GetX ( jedn ) , GetY ( jedn ) ) ;
25213: LD_LOC 26
25217: PPUSH
25218: LD_VAR 0 1
25222: PPUSH
25223: CALL_OW 250
25227: PPUSH
25228: LD_VAR 0 1
25232: PPUSH
25233: CALL_OW 251
25237: PPUSH
25238: CALL_OW 114
// end ;
25242: LD_VAR 0 2
25246: RET
// every 0 0$10 do
25247: GO 25249
25249: DISABLE
// begin wait ( Rand ( 1 , 0 0$30 ) ) ;
25250: LD_INT 1
25252: PPUSH
25253: LD_INT 1050
25255: PPUSH
25256: CALL_OW 12
25260: PPUSH
25261: CALL_OW 67
// wait ( posily1 [ difficulty ] ) ;
25265: LD_EXP 14
25269: PUSH
25270: LD_OWVAR 67
25274: ARRAY
25275: PPUSH
25276: CALL_OW 67
// posli_posily ( 1 ) ;
25280: LD_INT 1
25282: PPUSH
25283: CALL 25376 0 1
// wait ( posily11 [ difficulty ] ) ;
25287: LD_EXP 15
25291: PUSH
25292: LD_OWVAR 67
25296: ARRAY
25297: PPUSH
25298: CALL_OW 67
// posli_posily ( 11 ) ;
25302: LD_INT 11
25304: PPUSH
25305: CALL 25376 0 1
// wait ( posily2 [ difficulty ] ) ;
25309: LD_EXP 16
25313: PUSH
25314: LD_OWVAR 67
25318: ARRAY
25319: PPUSH
25320: CALL_OW 67
// posli_posily ( 2 ) ;
25324: LD_INT 2
25326: PPUSH
25327: CALL 25376 0 1
// wait ( posily3 [ difficulty ] ) ;
25331: LD_EXP 17
25335: PUSH
25336: LD_OWVAR 67
25340: ARRAY
25341: PPUSH
25342: CALL_OW 67
// posli_posily ( 3 ) ;
25346: LD_INT 3
25348: PPUSH
25349: CALL 25376 0 1
// wait ( posily4 [ difficulty ] ) ;
25353: LD_EXP 18
25357: PUSH
25358: LD_OWVAR 67
25362: ARRAY
25363: PPUSH
25364: CALL_OW 67
// posli_posily ( 4 ) ;
25368: LD_INT 4
25370: PPUSH
25371: CALL 25376 0 1
// end ;
25375: END
// function posli_posily ( ktere ) ; var i , pom ; var poc ; begin
25376: LD_INT 0
25378: PPUSH
25379: PPUSH
25380: PPUSH
25381: PPUSH
// case ktere of 1 :
25382: LD_VAR 0 1
25386: PUSH
25387: LD_INT 1
25389: DOUBLE
25390: EQUAL
25391: IFTRUE 25395
25393: GO 25430
25395: POP
// for i in AMERICKE_POSILY1_LIST do
25396: LD_ADDR_VAR 0 3
25400: PUSH
25401: LD_EXP 51
25405: PUSH
25406: FOR_IN
25407: IFFALSE 25426
// PlaceUnitArea ( i , posily_1 , false ) ; 2 :
25409: LD_VAR 0 3
25413: PPUSH
25414: LD_INT 4
25416: PPUSH
25417: LD_INT 0
25419: PPUSH
25420: CALL_OW 49
25424: GO 25406
25426: POP
25427: POP
25428: GO 25603
25430: LD_INT 2
25432: DOUBLE
25433: EQUAL
25434: IFTRUE 25438
25436: GO 25473
25438: POP
// for i in AMERICKE_POSILY2_LIST do
25439: LD_ADDR_VAR 0 3
25443: PUSH
25444: LD_EXP 52
25448: PUSH
25449: FOR_IN
25450: IFFALSE 25469
// PlaceUnitArea ( i , posily_3 , false ) ; 3 :
25452: LD_VAR 0 3
25456: PPUSH
25457: LD_INT 5
25459: PPUSH
25460: LD_INT 0
25462: PPUSH
25463: CALL_OW 49
25467: GO 25449
25469: POP
25470: POP
25471: GO 25603
25473: LD_INT 3
25475: DOUBLE
25476: EQUAL
25477: IFTRUE 25481
25479: GO 25516
25481: POP
// for i in AMERICKE_POSILY3_LIST do
25482: LD_ADDR_VAR 0 3
25486: PUSH
25487: LD_EXP 53
25491: PUSH
25492: FOR_IN
25493: IFFALSE 25512
// PlaceUnitArea ( i , posily_1 , false ) ; 4 :
25495: LD_VAR 0 3
25499: PPUSH
25500: LD_INT 4
25502: PPUSH
25503: LD_INT 0
25505: PPUSH
25506: CALL_OW 49
25510: GO 25492
25512: POP
25513: POP
25514: GO 25603
25516: LD_INT 4
25518: DOUBLE
25519: EQUAL
25520: IFTRUE 25524
25522: GO 25559
25524: POP
// for i in AMERICKE_POSILY4_LIST do
25525: LD_ADDR_VAR 0 3
25529: PUSH
25530: LD_EXP 54
25534: PUSH
25535: FOR_IN
25536: IFFALSE 25555
// PlaceUnitArea ( i , posily_3 , false ) ; 11 :
25538: LD_VAR 0 3
25542: PPUSH
25543: LD_INT 5
25545: PPUSH
25546: LD_INT 0
25548: PPUSH
25549: CALL_OW 49
25553: GO 25535
25555: POP
25556: POP
25557: GO 25603
25559: LD_INT 11
25561: DOUBLE
25562: EQUAL
25563: IFTRUE 25567
25565: GO 25602
25567: POP
// for i in AMERICKE_POSILY11_LIST do
25568: LD_ADDR_VAR 0 3
25572: PUSH
25573: LD_EXP 55
25577: PUSH
25578: FOR_IN
25579: IFFALSE 25598
// PlaceUnitArea ( i , posily_1 , false ) ; end ;
25581: LD_VAR 0 3
25585: PPUSH
25586: LD_INT 4
25588: PPUSH
25589: LD_INT 0
25591: PPUSH
25592: CALL_OW 49
25596: GO 25578
25598: POP
25599: POP
25600: GO 25603
25602: POP
// case ktere of 1 :
25603: LD_VAR 0 1
25607: PUSH
25608: LD_INT 1
25610: DOUBLE
25611: EQUAL
25612: IFTRUE 25616
25614: GO 25674
25616: POP
// begin Am_posily = AMERICKE_POSILY1_LIST ;
25617: LD_ADDR_EXP 72
25621: PUSH
25622: LD_EXP 51
25626: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
25627: LD_EXP 72
25631: PPUSH
25632: LD_INT 42
25634: PPUSH
25635: LD_INT 69
25637: PPUSH
25638: CALL_OW 114
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25642: LD_EXP 72
25646: PPUSH
25647: LD_INT 28
25649: PPUSH
25650: LD_INT 47
25652: PPUSH
25653: CALL_OW 174
// AddComAgressiveMove ( Am_posily , 20 , 12 ) ;
25657: LD_EXP 72
25661: PPUSH
25662: LD_INT 20
25664: PPUSH
25665: LD_INT 12
25667: PPUSH
25668: CALL_OW 174
// end ; 2 :
25672: GO 25969
25674: LD_INT 2
25676: DOUBLE
25677: EQUAL
25678: IFTRUE 25682
25680: GO 25755
25682: POP
// begin Am_posily = AMERICKE_POSILY2_LIST ;
25683: LD_ADDR_EXP 72
25687: PUSH
25688: LD_EXP 52
25692: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
25693: LD_EXP 72
25697: PPUSH
25698: LD_INT 110
25700: PPUSH
25701: LD_INT 23
25703: PPUSH
25704: CALL_OW 114
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
25708: LD_EXP 72
25712: PPUSH
25713: LD_INT 87
25715: PPUSH
25716: LD_INT 19
25718: PPUSH
25719: CALL_OW 174
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
25723: LD_EXP 72
25727: PPUSH
25728: LD_INT 52
25730: PPUSH
25731: LD_INT 12
25733: PPUSH
25734: CALL_OW 174
// AddComAgressiveMove ( Am_posily , 27 , 13 ) ;
25738: LD_EXP 72
25742: PPUSH
25743: LD_INT 27
25745: PPUSH
25746: LD_INT 13
25748: PPUSH
25749: CALL_OW 174
// end ; 3 :
25753: GO 25969
25755: LD_INT 3
25757: DOUBLE
25758: EQUAL
25759: IFTRUE 25763
25761: GO 25821
25763: POP
// begin Am_posily = AMERICKE_POSILY3_LIST ;
25764: LD_ADDR_EXP 72
25768: PUSH
25769: LD_EXP 53
25773: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
25774: LD_EXP 72
25778: PPUSH
25779: LD_INT 42
25781: PPUSH
25782: LD_INT 69
25784: PPUSH
25785: CALL_OW 114
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25789: LD_EXP 72
25793: PPUSH
25794: LD_INT 28
25796: PPUSH
25797: LD_INT 47
25799: PPUSH
25800: CALL_OW 174
// AddComAgressiveMove ( Am_posily , 20 , 12 ) ;
25804: LD_EXP 72
25808: PPUSH
25809: LD_INT 20
25811: PPUSH
25812: LD_INT 12
25814: PPUSH
25815: CALL_OW 174
// end ; 4 :
25819: GO 25969
25821: LD_INT 4
25823: DOUBLE
25824: EQUAL
25825: IFTRUE 25829
25827: GO 25902
25829: POP
// begin Am_posily = AMERICKE_POSILY4_LIST ;
25830: LD_ADDR_EXP 72
25834: PUSH
25835: LD_EXP 54
25839: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 110 , 23 ) ;
25840: LD_EXP 72
25844: PPUSH
25845: LD_INT 110
25847: PPUSH
25848: LD_INT 23
25850: PPUSH
25851: CALL_OW 114
// AddComAgressiveMove ( Am_posily , 87 , 19 ) ;
25855: LD_EXP 72
25859: PPUSH
25860: LD_INT 87
25862: PPUSH
25863: LD_INT 19
25865: PPUSH
25866: CALL_OW 174
// AddComAgressiveMove ( Am_posily , 52 , 12 ) ;
25870: LD_EXP 72
25874: PPUSH
25875: LD_INT 52
25877: PPUSH
25878: LD_INT 12
25880: PPUSH
25881: CALL_OW 174
// AddComAgressiveMove ( Am_posily , 27 , 13 ) ;
25885: LD_EXP 72
25889: PPUSH
25890: LD_INT 27
25892: PPUSH
25893: LD_INT 13
25895: PPUSH
25896: CALL_OW 174
// end ; 11 :
25900: GO 25969
25902: LD_INT 11
25904: DOUBLE
25905: EQUAL
25906: IFTRUE 25910
25908: GO 25968
25910: POP
// begin Am_posily = AMERICKE_POSILY11_LIST ;
25911: LD_ADDR_EXP 72
25915: PUSH
25916: LD_EXP 55
25920: ST_TO_ADDR
// ComAgressiveMove ( Am_posily , 42 , 69 ) ;
25921: LD_EXP 72
25925: PPUSH
25926: LD_INT 42
25928: PPUSH
25929: LD_INT 69
25931: PPUSH
25932: CALL_OW 114
// AddComAgressiveMove ( Am_posily , 28 , 47 ) ;
25936: LD_EXP 72
25940: PPUSH
25941: LD_INT 28
25943: PPUSH
25944: LD_INT 47
25946: PPUSH
25947: CALL_OW 174
// AddComAgressiveMove ( Am_posily , 20 , 12 ) ;
25951: LD_EXP 72
25955: PPUSH
25956: LD_INT 20
25958: PPUSH
25959: LD_INT 12
25961: PPUSH
25962: CALL_OW 174
// end ; end ;
25966: GO 25969
25968: POP
// end ;
25969: LD_VAR 0 2
25973: RET
// every 1 1$7 do
25974: GO 25976
25976: DISABLE
// begin if Researched ( Amici , tech_Weap1 ) then
25977: LD_EXP 4
25981: PPUSH
25982: LD_INT 51
25984: PPUSH
25985: CALL_OW 325
25989: IFFALSE 26016
// begin SetTech ( tech_Weap1 , Amici , state_enabled ) ;
25991: LD_INT 51
25993: PPUSH
25994: LD_EXP 4
25998: PPUSH
25999: LD_INT 1
26001: PPUSH
26002: CALL_OW 322
// ComResearch ( Am_lab , tech_Weap1 ) ;
26006: LD_INT 9
26008: PPUSH
26009: LD_INT 51
26011: PPUSH
26012: CALL_OW 124
// end ; enable ;
26016: ENABLE
// end ;
26017: END
// every 0 0$19 do
26018: GO 26020
26020: DISABLE
// begin SetTech ( tech_Weap1 , Amici , state_enabled ) ;
26021: LD_INT 51
26023: PPUSH
26024: LD_EXP 4
26028: PPUSH
26029: LD_INT 1
26031: PPUSH
26032: CALL_OW 322
// ComResearch ( Am_lab , tech_Weap1 ) ;
26036: LD_INT 9
26038: PPUSH
26039: LD_INT 51
26041: PPUSH
26042: CALL_OW 124
// end ;
26046: END
// every 0 0$1 do var i , temp_list ;
26047: GO 26049
26049: DISABLE
26050: LD_INT 0
26052: PPUSH
26053: PPUSH
// begin i = 1 ;
26054: LD_ADDR_VAR 0 1
26058: PUSH
26059: LD_INT 1
26061: ST_TO_ADDR
// while i <= Am_posily do
26062: LD_VAR 0 1
26066: PUSH
26067: LD_EXP 72
26071: LESSEQUAL
26072: IFFALSE 26211
// begin if IsInArea ( Am_posily [ i ] , Am_base ) or not IsLive ( i ) then
26074: LD_EXP 72
26078: PUSH
26079: LD_VAR 0 1
26083: ARRAY
26084: PPUSH
26085: LD_INT 6
26087: PPUSH
26088: CALL_OW 308
26092: PUSH
26093: LD_VAR 0 1
26097: PPUSH
26098: CALL_OW 300
26102: NOT
26103: OR
26104: IFFALSE 26195
// begin if IsInArea ( Am_posily [ i ] , Am_base ) then
26106: LD_EXP 72
26110: PUSH
26111: LD_VAR 0 1
26115: ARRAY
26116: PPUSH
26117: LD_INT 6
26119: PPUSH
26120: CALL_OW 308
26124: IFFALSE 26173
// begin Prezite_posily = Prezite_posily + 1 ;
26126: LD_ADDR_EXP 73
26130: PUSH
26131: LD_EXP 73
26135: PUSH
26136: LD_INT 1
26138: PLUS
26139: ST_TO_ADDR
// if Prezite_posily > muze_prezit_posil [ difficulty ] then
26140: LD_EXP 73
26144: PUSH
26145: LD_EXP 23
26149: PUSH
26150: LD_OWVAR 67
26154: ARRAY
26155: GREATER
26156: IFFALSE 26173
// DestroyUnit ( Am_posily [ i ] ) ;
26158: LD_EXP 72
26162: PUSH
26163: LD_VAR 0 1
26167: ARRAY
26168: PPUSH
26169: CALL_OW 65
// end ; Am_posily = Delete ( Am_posily , i ) ;
26173: LD_ADDR_EXP 72
26177: PUSH
26178: LD_EXP 72
26182: PPUSH
26183: LD_VAR 0 1
26187: PPUSH
26188: CALL_OW 3
26192: ST_TO_ADDR
// continue ;
26193: GO 26062
// end ; i = i + 1 ;
26195: LD_ADDR_VAR 0 1
26199: PUSH
26200: LD_VAR 0 1
26204: PUSH
26205: LD_INT 1
26207: PLUS
26208: ST_TO_ADDR
// end ;
26209: GO 26062
// enable ;
26211: ENABLE
// end ;
26212: PPOPN 2
26214: END
// every 0 0$13 do var pom ;
26215: GO 26217
26217: DISABLE
26218: LD_INT 0
26220: PPUSH
// begin pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_class , class_mechanic ] ] ) ;
26221: LD_ADDR_VAR 0 1
26225: PUSH
26226: LD_INT 6
26228: PPUSH
26229: LD_INT 22
26231: PUSH
26232: LD_EXP 4
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 25
26243: PUSH
26244: LD_INT 3
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PPUSH
26255: CALL_OW 70
26259: ST_TO_ADDR
// if pom > 0 then
26260: LD_VAR 0 1
26264: PUSH
26265: LD_INT 0
26267: GREATER
26268: IFFALSE 26282
// ComEnterUnit ( pom , Am_fac ) ;
26270: LD_VAR 0 1
26274: PPUSH
26275: LD_INT 10
26277: PPUSH
26278: CALL_OW 120
// enable ;
26282: ENABLE
// end ;
26283: PPOPN 1
26285: END
// every 0 0$17 do var pom ;
26286: GO 26288
26288: DISABLE
26289: LD_INT 0
26291: PPUSH
// begin pom = UnitsInside ( Am_fac ) ;
26292: LD_ADDR_VAR 0 1
26296: PUSH
26297: LD_INT 10
26299: PPUSH
26300: CALL_OW 313
26304: ST_TO_ADDR
// if pom > 3 then
26305: LD_VAR 0 1
26309: PUSH
26310: LD_INT 3
26312: GREATER
26313: IFFALSE 26334
// ComConstruct ( Am_fac , us_light_wheeled , engine_solar , control_manual , us_machine_gun ) ;
26315: LD_INT 10
26317: PPUSH
26318: LD_INT 1
26320: PPUSH
26321: LD_INT 2
26323: PPUSH
26324: LD_INT 1
26326: PPUSH
26327: LD_INT 2
26329: PPUSH
26330: CALL_OW 125
// while UnitsInside ( Am_fac ) > 3 do
26334: LD_INT 10
26336: PPUSH
26337: CALL_OW 313
26341: PUSH
26342: LD_INT 3
26344: GREATER
26345: IFFALSE 26356
// wait ( 0 0$10 ) ;
26347: LD_INT 350
26349: PPUSH
26350: CALL_OW 67
26354: GO 26334
// enable ;
26356: ENABLE
// end ;
26357: PPOPN 1
26359: END
// export function am_posily_videny_rusakama ; var i ; var videli ; begin
26360: LD_INT 0
26362: PPUSH
26363: PPUSH
26364: PPUSH
// videli = false ;
26365: LD_ADDR_VAR 0 3
26369: PUSH
26370: LD_INT 0
26372: ST_TO_ADDR
// for i in Am_posily do
26373: LD_ADDR_VAR 0 2
26377: PUSH
26378: LD_EXP 72
26382: PUSH
26383: FOR_IN
26384: IFFALSE 26412
// if See ( You , i ) then
26386: LD_EXP 1
26390: PPUSH
26391: LD_VAR 0 2
26395: PPUSH
26396: CALL_OW 292
26400: IFFALSE 26410
// videli = true ;
26402: LD_ADDR_VAR 0 3
26406: PUSH
26407: LD_INT 1
26409: ST_TO_ADDR
26410: GO 26383
26412: POP
26413: POP
// result := videli ;
26414: LD_ADDR_VAR 0 1
26418: PUSH
26419: LD_VAR 0 3
26423: ST_TO_ADDR
// end ;
26424: LD_VAR 0 1
26428: RET
// export function omicron_half_destroyed ; var pom , i ; var zije ; var a ; begin
26429: LD_INT 0
26431: PPUSH
26432: PPUSH
26433: PPUSH
26434: PPUSH
26435: PPUSH
// a = false ;
26436: LD_ADDR_VAR 0 5
26440: PUSH
26441: LD_INT 0
26443: ST_TO_ADDR
// if ( ( not IsOK ( Am_bu1 ) ) or ( GetSide ( Am_bu1 ) <> Amici ) ) and ( ( not IsOK ( Am_bu2 ) ) or GetSide ( Am_bu2 ) <> Amici ) and ( ( not IsOK ( Am_bu3 ) ) or GetSide ( Am_bu3 ) <> Amici ) and ( ( not IsOK ( Am_bar1 ) ) or GetSide ( Am_bar1 ) <> Amici ) and ( ( not IsOK ( Am_bar2 ) ) or GetSide ( Am_bar2 ) <> Amici ) then
26444: LD_INT 7
26446: PPUSH
26447: CALL_OW 302
26451: NOT
26452: PUSH
26453: LD_INT 7
26455: PPUSH
26456: CALL_OW 255
26460: PUSH
26461: LD_EXP 4
26465: NONEQUAL
26466: OR
26467: PUSH
26468: LD_INT 8
26470: PPUSH
26471: CALL_OW 302
26475: NOT
26476: PUSH
26477: LD_INT 8
26479: PPUSH
26480: CALL_OW 255
26484: PUSH
26485: LD_EXP 4
26489: NONEQUAL
26490: OR
26491: AND
26492: PUSH
26493: LD_INT 19
26495: PPUSH
26496: CALL_OW 302
26500: NOT
26501: PUSH
26502: LD_INT 19
26504: PPUSH
26505: CALL_OW 255
26509: PUSH
26510: LD_EXP 4
26514: NONEQUAL
26515: OR
26516: AND
26517: PUSH
26518: LD_INT 11
26520: PPUSH
26521: CALL_OW 302
26525: NOT
26526: PUSH
26527: LD_INT 11
26529: PPUSH
26530: CALL_OW 255
26534: PUSH
26535: LD_EXP 4
26539: NONEQUAL
26540: OR
26541: AND
26542: PUSH
26543: LD_INT 25
26545: PPUSH
26546: CALL_OW 302
26550: NOT
26551: PUSH
26552: LD_INT 25
26554: PPUSH
26555: CALL_OW 255
26559: PUSH
26560: LD_EXP 4
26564: NONEQUAL
26565: OR
26566: AND
26567: IFFALSE 26577
// a = true ;
26569: LD_ADDR_VAR 0 5
26573: PUSH
26574: LD_INT 1
26576: ST_TO_ADDR
// result = a ;
26577: LD_ADDR_VAR 0 1
26581: PUSH
26582: LD_VAR 0 5
26586: ST_TO_ADDR
// end ;
26587: LD_VAR 0 1
26591: RET
// export function stahnuti_amiku ; var i ; var pom , pom1 , pom2 , pomx ; begin
26592: LD_INT 0
26594: PPUSH
26595: PPUSH
26596: PPUSH
26597: PPUSH
26598: PPUSH
26599: PPUSH
// pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
26600: LD_ADDR_VAR 0 3
26604: PUSH
26605: LD_INT 6
26607: PPUSH
26608: LD_INT 22
26610: PUSH
26611: LD_EXP 4
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 21
26622: PUSH
26623: LD_INT 1
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PPUSH
26634: CALL_OW 70
26638: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
26639: LD_ADDR_VAR 0 5
26643: PUSH
26644: LD_INT 6
26646: PPUSH
26647: LD_INT 22
26649: PUSH
26650: LD_EXP 4
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 21
26661: PUSH
26662: LD_INT 3
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PPUSH
26673: CALL_OW 70
26677: ST_TO_ADDR
// for i in pom2 do
26678: LD_ADDR_VAR 0 2
26682: PUSH
26683: LD_VAR 0 5
26687: PUSH
26688: FOR_IN
26689: IFFALSE 26729
// if UnitsInside ( i ) <> 0 then
26691: LD_VAR 0 2
26695: PPUSH
26696: CALL_OW 313
26700: PUSH
26701: LD_INT 0
26703: NONEQUAL
26704: IFFALSE 26727
// pom = pom ^ UnitsInside ( i ) ;
26706: LD_ADDR_VAR 0 3
26710: PUSH
26711: LD_VAR 0 3
26715: PUSH
26716: LD_VAR 0 2
26720: PPUSH
26721: CALL_OW 313
26725: ADD
26726: ST_TO_ADDR
26727: GO 26688
26729: POP
26730: POP
// ComExitBuilding ( pom ) ;
26731: LD_VAR 0 3
26735: PPUSH
26736: CALL_OW 122
// AddComMoveXY ( pom , 6 , 2 ) ;
26740: LD_VAR 0 3
26744: PPUSH
26745: LD_INT 6
26747: PPUSH
26748: LD_INT 2
26750: PPUSH
26751: CALL_OW 171
// wait ( 0 0$1 ) ;
26755: LD_INT 35
26757: PPUSH
26758: CALL_OW 67
// while pom > 0 do
26762: LD_VAR 0 3
26766: PUSH
26767: LD_INT 0
26769: GREATER
26770: IFFALSE 27006
// begin pom1 = FilterUnitsInArea ( ODBER_AM2 , [ [ f_side , Amici ] ] ) ;
26772: LD_ADDR_VAR 0 4
26776: PUSH
26777: LD_INT 38
26779: PPUSH
26780: LD_INT 22
26782: PUSH
26783: LD_EXP 4
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: EMPTY
26793: LIST
26794: PPUSH
26795: CALL_OW 70
26799: ST_TO_ADDR
// for i in pom1 do
26800: LD_ADDR_VAR 0 2
26804: PUSH
26805: LD_VAR 0 4
26809: PUSH
26810: FOR_IN
26811: IFFALSE 26840
// begin RemoveUnit ( i ) ;
26813: LD_VAR 0 2
26817: PPUSH
26818: CALL_OW 64
// pom = pom diff i ;
26822: LD_ADDR_VAR 0 3
26826: PUSH
26827: LD_VAR 0 3
26831: PUSH
26832: LD_VAR 0 2
26836: DIFF
26837: ST_TO_ADDR
// end ;
26838: GO 26810
26840: POP
26841: POP
// wait ( 0 0$1 ) ;
26842: LD_INT 35
26844: PPUSH
26845: CALL_OW 67
// pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
26849: LD_ADDR_VAR 0 3
26853: PUSH
26854: LD_INT 6
26856: PPUSH
26857: LD_INT 22
26859: PUSH
26860: LD_EXP 4
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 21
26871: PUSH
26872: LD_INT 1
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PPUSH
26883: CALL_OW 70
26887: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
26888: LD_ADDR_VAR 0 5
26892: PUSH
26893: LD_INT 6
26895: PPUSH
26896: LD_INT 22
26898: PUSH
26899: LD_EXP 4
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 21
26910: PUSH
26911: LD_INT 3
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PPUSH
26922: CALL_OW 70
26926: ST_TO_ADDR
// for i in pom2 do
26927: LD_ADDR_VAR 0 2
26931: PUSH
26932: LD_VAR 0 5
26936: PUSH
26937: FOR_IN
26938: IFFALSE 26978
// if UnitsInside ( i ) <> 0 then
26940: LD_VAR 0 2
26944: PPUSH
26945: CALL_OW 313
26949: PUSH
26950: LD_INT 0
26952: NONEQUAL
26953: IFFALSE 26976
// pom = pom ^ UnitsInside ( i ) ;
26955: LD_ADDR_VAR 0 3
26959: PUSH
26960: LD_VAR 0 3
26964: PUSH
26965: LD_VAR 0 2
26969: PPUSH
26970: CALL_OW 313
26974: ADD
26975: ST_TO_ADDR
26976: GO 26937
26978: POP
26979: POP
// ComExitBuilding ( pom ) ;
26980: LD_VAR 0 3
26984: PPUSH
26985: CALL_OW 122
// AddComMoveXY ( pom , 6 , 2 ) ;
26989: LD_VAR 0 3
26993: PPUSH
26994: LD_INT 6
26996: PPUSH
26997: LD_INT 2
26999: PPUSH
27000: CALL_OW 171
// end ;
27004: GO 26762
// pom = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
27006: LD_ADDR_VAR 0 3
27010: PUSH
27011: LD_INT 22
27013: PPUSH
27014: LD_INT 22
27016: PUSH
27017: LD_EXP 4
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 21
27028: PUSH
27029: LD_INT 1
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PPUSH
27040: CALL_OW 70
27044: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
27045: LD_ADDR_VAR 0 5
27049: PUSH
27050: LD_INT 22
27052: PPUSH
27053: LD_INT 22
27055: PUSH
27056: LD_EXP 4
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 21
27067: PUSH
27068: LD_INT 3
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PPUSH
27079: CALL_OW 70
27083: ST_TO_ADDR
// for i in pom2 do
27084: LD_ADDR_VAR 0 2
27088: PUSH
27089: LD_VAR 0 5
27093: PUSH
27094: FOR_IN
27095: IFFALSE 27135
// if UnitsInside ( i ) <> 0 then
27097: LD_VAR 0 2
27101: PPUSH
27102: CALL_OW 313
27106: PUSH
27107: LD_INT 0
27109: NONEQUAL
27110: IFFALSE 27133
// pom = pom ^ UnitsInside ( i ) ;
27112: LD_ADDR_VAR 0 3
27116: PUSH
27117: LD_VAR 0 3
27121: PUSH
27122: LD_VAR 0 2
27126: PPUSH
27127: CALL_OW 313
27131: ADD
27132: ST_TO_ADDR
27133: GO 27094
27135: POP
27136: POP
// ComExitBuilding ( pom ) ;
27137: LD_VAR 0 3
27141: PPUSH
27142: CALL_OW 122
// AddComMoveXY ( pom , 138 , 40 ) ;
27146: LD_VAR 0 3
27150: PPUSH
27151: LD_INT 138
27153: PPUSH
27154: LD_INT 40
27156: PPUSH
27157: CALL_OW 171
// wait ( 0 0$1 ) ;
27161: LD_INT 35
27163: PPUSH
27164: CALL_OW 67
// while pom + 0 > 0 do
27168: LD_VAR 0 3
27172: PUSH
27173: LD_INT 0
27175: PLUS
27176: PUSH
27177: LD_INT 0
27179: GREATER
27180: IFFALSE 27416
// begin pom1 = FilterUnitsInArea ( ODBER_AM , [ [ f_side , Amici ] ] ) ;
27182: LD_ADDR_VAR 0 4
27186: PUSH
27187: LD_INT 35
27189: PPUSH
27190: LD_INT 22
27192: PUSH
27193: LD_EXP 4
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: EMPTY
27203: LIST
27204: PPUSH
27205: CALL_OW 70
27209: ST_TO_ADDR
// for i in pom1 do
27210: LD_ADDR_VAR 0 2
27214: PUSH
27215: LD_VAR 0 4
27219: PUSH
27220: FOR_IN
27221: IFFALSE 27250
// begin RemoveUnit ( i ) ;
27223: LD_VAR 0 2
27227: PPUSH
27228: CALL_OW 64
// pom = pom diff i ;
27232: LD_ADDR_VAR 0 3
27236: PUSH
27237: LD_VAR 0 3
27241: PUSH
27242: LD_VAR 0 2
27246: DIFF
27247: ST_TO_ADDR
// end ;
27248: GO 27220
27250: POP
27251: POP
// wait ( 0 0$1 ) ;
27252: LD_INT 35
27254: PPUSH
27255: CALL_OW 67
// pom = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_human ] ] ) ;
27259: LD_ADDR_VAR 0 3
27263: PUSH
27264: LD_INT 22
27266: PPUSH
27267: LD_INT 22
27269: PUSH
27270: LD_EXP 4
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 21
27281: PUSH
27282: LD_INT 1
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PPUSH
27293: CALL_OW 70
27297: ST_TO_ADDR
// pom2 = FilterUnitsInArea ( Am_bw_e , [ [ f_side , Amici ] , [ f_type , unit_building ] ] ) ;
27298: LD_ADDR_VAR 0 5
27302: PUSH
27303: LD_INT 22
27305: PPUSH
27306: LD_INT 22
27308: PUSH
27309: LD_EXP 4
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 21
27320: PUSH
27321: LD_INT 3
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PPUSH
27332: CALL_OW 70
27336: ST_TO_ADDR
// for i in pom2 do
27337: LD_ADDR_VAR 0 2
27341: PUSH
27342: LD_VAR 0 5
27346: PUSH
27347: FOR_IN
27348: IFFALSE 27388
// if UnitsInside ( i ) <> 0 then
27350: LD_VAR 0 2
27354: PPUSH
27355: CALL_OW 313
27359: PUSH
27360: LD_INT 0
27362: NONEQUAL
27363: IFFALSE 27386
// pom = pom ^ UnitsInside ( i ) ;
27365: LD_ADDR_VAR 0 3
27369: PUSH
27370: LD_VAR 0 3
27374: PUSH
27375: LD_VAR 0 2
27379: PPUSH
27380: CALL_OW 313
27384: ADD
27385: ST_TO_ADDR
27386: GO 27347
27388: POP
27389: POP
// ComExitBuilding ( pom ) ;
27390: LD_VAR 0 3
27394: PPUSH
27395: CALL_OW 122
// AddComMoveXY ( pom , 138 , 40 ) ;
27399: LD_VAR 0 3
27403: PPUSH
27404: LD_INT 138
27406: PPUSH
27407: LD_INT 40
27409: PPUSH
27410: CALL_OW 171
// end ;
27414: GO 27168
// end ; end_of_file
27416: LD_VAR 0 1
27420: RET
// var arabsky_utok_zacal ; export posilani_arabskych_hlidek ; every 0 0$0.1 do
27421: GO 27423
27423: DISABLE
// begin posilani_arabskych_hlidek = false ;
27424: LD_ADDR_EXP 74
27428: PUSH
27429: LD_INT 0
27431: ST_TO_ADDR
// end ;
27432: END
// export function utok_arabu ; var i , pom ; begin
27433: LD_INT 0
27435: PPUSH
27436: PPUSH
27437: PPUSH
// pom = FilterAllUnits ( [ [ f_side , You ] ] ) ;
27438: LD_ADDR_VAR 0 3
27442: PUSH
27443: LD_INT 22
27445: PUSH
27446: LD_EXP 1
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: EMPTY
27456: LIST
27457: PPUSH
27458: CALL_OW 69
27462: ST_TO_ADDR
// ArDontAttackPlayer ( true ) ;
27463: LD_INT 1
27465: PPUSH
27466: CALL 28470 0 1
// InGameOn ;
27470: CALL_OW 8
// ComStop ( pom ) ;
27474: LD_VAR 0 3
27478: PPUSH
27479: CALL_OW 141
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
27483: LD_ADDR_VAR 0 2
27487: PUSH
27488: LD_INT 22
27490: PUSH
27491: LD_INT 3
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 3
27500: PUSH
27501: LD_INT 21
27503: PUSH
27504: LD_INT 3
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PPUSH
27519: CALL_OW 69
27523: PUSH
27524: FOR_IN
27525: IFFALSE 27544
// ComMoveXY ( i , 59 , 12 ) ;
27527: LD_VAR 0 2
27531: PPUSH
27532: LD_INT 59
27534: PPUSH
27535: LD_INT 12
27537: PPUSH
27538: CALL_OW 111
27542: GO 27524
27544: POP
27545: POP
// EnableVideoExclamations ;
27546: CALL_OW 498
// CenterNowOnXY ( 142 , 80 ) ;
27550: LD_INT 142
27552: PPUSH
27553: LD_INT 80
27555: PPUSH
27556: CALL_OW 86
// arabsky_utok_zacal = true ;
27560: LD_ADDR_LOC 27
27564: PUSH
27565: LD_INT 1
27567: ST_TO_ADDR
// posli_rusy_pryc ;
27568: CALL 8116 0 0
// schovej_kurina ;
27572: CALL 9215 0 0
// PlaceUnitArea ( ARABI_KAMIKADZE_LIST [ 1 ] , Opoce1 , false ) ;
27576: LD_EXP 60
27580: PUSH
27581: LD_INT 1
27583: ARRAY
27584: PPUSH
27585: LD_INT 10
27587: PPUSH
27588: LD_INT 0
27590: PPUSH
27591: CALL_OW 49
// PlaceUnitArea ( ARABI_KAMIKADZE_LIST [ 2 ] , Opoce2 , false ) ;
27595: LD_EXP 60
27599: PUSH
27600: LD_INT 2
27602: ARRAY
27603: PPUSH
27604: LD_INT 11
27606: PPUSH
27607: LD_INT 0
27609: PPUSH
27610: CALL_OW 49
// PlaceUnitArea ( ARABI_KAMIKADZE_LIST [ 3 ] , Opoce2 , false ) ;
27614: LD_EXP 60
27618: PUSH
27619: LD_INT 3
27621: ARRAY
27622: PPUSH
27623: LD_INT 11
27625: PPUSH
27626: LD_INT 0
27628: PPUSH
27629: CALL_OW 49
// ComMoveXY ( ARABI_KAMIKADZE_LIST [ 1 ] , 134 , 62 ) ;
27633: LD_EXP 60
27637: PUSH
27638: LD_INT 1
27640: ARRAY
27641: PPUSH
27642: LD_INT 134
27644: PPUSH
27645: LD_INT 62
27647: PPUSH
27648: CALL_OW 111
// AddComMoveXY ( ARABI_KAMIKADZE_LIST [ 1 ] , 133 , 69 ) ;
27652: LD_EXP 60
27656: PUSH
27657: LD_INT 1
27659: ARRAY
27660: PPUSH
27661: LD_INT 133
27663: PPUSH
27664: LD_INT 69
27666: PPUSH
27667: CALL_OW 171
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 1 ] , RU1_bu1 ) ;
27671: LD_EXP 60
27675: PUSH
27676: LD_INT 1
27678: ARRAY
27679: PPUSH
27680: LD_INT 3
27682: PPUSH
27683: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 1 ] , RU1_fac ) ;
27687: LD_EXP 60
27691: PUSH
27692: LD_INT 1
27694: ARRAY
27695: PPUSH
27696: LD_INT 5
27698: PPUSH
27699: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 1 ] , RU1_dep ) ;
27703: LD_EXP 60
27707: PUSH
27708: LD_INT 1
27710: ARRAY
27711: PPUSH
27712: LD_INT 1
27714: PPUSH
27715: CALL_OW 175
// ComMoveXY ( ARABI_KAMIKADZE_LIST [ 2 ] , 142 , 94 ) ;
27719: LD_EXP 60
27723: PUSH
27724: LD_INT 2
27726: ARRAY
27727: PPUSH
27728: LD_INT 142
27730: PPUSH
27731: LD_INT 94
27733: PPUSH
27734: CALL_OW 111
// AddComMoveXY ( ARABI_KAMIKADZE_LIST [ 2 ] , 140 , 90 ) ;
27738: LD_EXP 60
27742: PUSH
27743: LD_INT 2
27745: ARRAY
27746: PPUSH
27747: LD_INT 140
27749: PPUSH
27750: LD_INT 90
27752: PPUSH
27753: CALL_OW 171
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 2 ] , RU1_el1 ) ;
27757: LD_EXP 60
27761: PUSH
27762: LD_INT 2
27764: ARRAY
27765: PPUSH
27766: LD_INT 14
27768: PPUSH
27769: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 2 ] , RU1_fac ) ;
27773: LD_EXP 60
27777: PUSH
27778: LD_INT 2
27780: ARRAY
27781: PPUSH
27782: LD_INT 5
27784: PPUSH
27785: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 2 ] , RU1_dep ) ;
27789: LD_EXP 60
27793: PUSH
27794: LD_INT 2
27796: ARRAY
27797: PPUSH
27798: LD_INT 1
27800: PPUSH
27801: CALL_OW 175
// ComMoveXY ( ARABI_KAMIKADZE_LIST [ 3 ] , 143 , 94 ) ;
27805: LD_EXP 60
27809: PUSH
27810: LD_INT 3
27812: ARRAY
27813: PPUSH
27814: LD_INT 143
27816: PPUSH
27817: LD_INT 94
27819: PPUSH
27820: CALL_OW 111
// AddComMoveXY ( ARABI_KAMIKADZE_LIST [ 3 ] , 141 , 90 ) ;
27824: LD_EXP 60
27828: PUSH
27829: LD_INT 3
27831: ARRAY
27832: PPUSH
27833: LD_INT 141
27835: PPUSH
27836: LD_INT 90
27838: PPUSH
27839: CALL_OW 171
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 3 ] , RU1_bar1 ) ;
27843: LD_EXP 60
27847: PUSH
27848: LD_INT 3
27850: ARRAY
27851: PPUSH
27852: LD_INT 2
27854: PPUSH
27855: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 3 ] , RU1_fac ) ;
27859: LD_EXP 60
27863: PUSH
27864: LD_INT 3
27866: ARRAY
27867: PPUSH
27868: LD_INT 5
27870: PPUSH
27871: CALL_OW 175
// AddComAttackUnit ( ARABI_KAMIKADZE_LIST [ 3 ] , RU1_dep ) ;
27875: LD_EXP 60
27879: PUSH
27880: LD_INT 3
27882: ARRAY
27883: PPUSH
27884: LD_INT 1
27886: PPUSH
27887: CALL_OW 175
// music_nat = nation_arabian ;
27891: LD_ADDR_OWVAR 71
27895: PUSH
27896: LD_INT 2
27898: ST_TO_ADDR
// CenterOnXY ( 142 , 80 ) ;
27899: LD_INT 142
27901: PPUSH
27902: LD_INT 80
27904: PPUSH
27905: CALL_OW 84
// for i in ARABI_SELF_AUTA do
27909: LD_ADDR_VAR 0 2
27913: PUSH
27914: LD_EXP 63
27918: PUSH
27919: FOR_IN
27920: IFFALSE 27939
// PlaceUnitArea ( i , Arabi2 , false ) ;
27922: LD_VAR 0 2
27926: PPUSH
27927: LD_INT 13
27929: PPUSH
27930: LD_INT 0
27932: PPUSH
27933: CALL_OW 49
27937: GO 27919
27939: POP
27940: POP
// ComAttackUnit ( ARABI_SELF_AUTA [ 1 ] , RU1_bar2 ) ;
27941: LD_EXP 63
27945: PUSH
27946: LD_INT 1
27948: ARRAY
27949: PPUSH
27950: LD_INT 17
27952: PPUSH
27953: CALL_OW 115
// ComWait ( ARABI_SELF_AUTA [ 2 ] , 0 0$1 ) ;
27957: LD_EXP 63
27961: PUSH
27962: LD_INT 2
27964: ARRAY
27965: PPUSH
27966: LD_INT 35
27968: PPUSH
27969: CALL_OW 142
// AddComAttackUnit ( ARABI_SELF_AUTA [ 2 ] , RU1_dep ) ;
27973: LD_EXP 63
27977: PUSH
27978: LD_INT 2
27980: ARRAY
27981: PPUSH
27982: LD_INT 1
27984: PPUSH
27985: CALL_OW 175
// CenterOnXY ( 142 , 80 ) ;
27989: LD_INT 142
27991: PPUSH
27992: LD_INT 80
27994: PPUSH
27995: CALL_OW 84
// for i in ARABI_PRVNI_VLNA do
27999: LD_ADDR_VAR 0 2
28003: PUSH
28004: LD_EXP 61
28008: PUSH
28009: FOR_IN
28010: IFFALSE 28029
// PlaceUnitArea ( i , Arabi1 , false ) ;
28012: LD_VAR 0 2
28016: PPUSH
28017: LD_INT 12
28019: PPUSH
28020: LD_INT 0
28022: PPUSH
28023: CALL_OW 49
28027: GO 28009
28029: POP
28030: POP
// ComMoveXY ( ARABI_PRVNI_VLNA , 139 , 78 ) ;
28031: LD_EXP 61
28035: PPUSH
28036: LD_INT 139
28038: PPUSH
28039: LD_INT 78
28041: PPUSH
28042: CALL_OW 111
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_bar1 ) ;
28046: LD_EXP 61
28050: PPUSH
28051: LD_INT 2
28053: PPUSH
28054: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_bu2 ) ;
28058: LD_EXP 61
28062: PPUSH
28063: LD_INT 4
28065: PPUSH
28066: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_bu1 ) ;
28070: LD_EXP 61
28074: PPUSH
28075: LD_INT 3
28077: PPUSH
28078: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_lab2 ) ;
28082: LD_EXP 61
28086: PPUSH
28087: LD_INT 16
28089: PPUSH
28090: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_dep ) ;
28094: LD_EXP 61
28098: PPUSH
28099: LD_INT 1
28101: PPUSH
28102: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_lab1 ) ;
28106: LD_EXP 61
28110: PPUSH
28111: LD_INT 6
28113: PPUSH
28114: CALL_OW 175
// AddComAttackUnit ( ARABI_PRVNI_VLNA , RU1_fac ) ;
28118: LD_EXP 61
28122: PPUSH
28123: LD_INT 5
28125: PPUSH
28126: CALL_OW 175
// AddComAgressiveMove ( ARABI_PRVNI_VLNA , 143 , 79 ) ;
28130: LD_EXP 61
28134: PPUSH
28135: LD_INT 143
28137: PPUSH
28138: LD_INT 79
28140: PPUSH
28141: CALL_OW 174
// CenterOnXY ( 142 , 80 ) ;
28145: LD_INT 142
28147: PPUSH
28148: LD_INT 80
28150: PPUSH
28151: CALL_OW 84
// DisableVideoExclamations ;
28155: CALL_OW 499
// InGameOff ;
28159: CALL_OW 9
// interface_hidden := true ;
28163: LD_ADDR_OWVAR 54
28167: PUSH
28168: LD_INT 1
28170: ST_TO_ADDR
// kecy_behem_utoku_arabu ;
28171: CALL 13930 0 0
// InGameOn ;
28175: CALL_OW 8
// EnableVideoExclamations ;
28179: CALL_OW 498
// CenterOnXY ( 142 , 80 ) ;
28183: LD_INT 142
28185: PPUSH
28186: LD_INT 80
28188: PPUSH
28189: CALL_OW 84
// wait ( 0 0$4 ) ;
28193: LD_INT 140
28195: PPUSH
28196: CALL_OW 67
// posli_kurina_na_smrt ;
28200: CALL 9235 0 0
// for i in ARABI_FLAME_LIST do
28204: LD_ADDR_VAR 0 2
28208: PUSH
28209: LD_EXP 62
28213: PUSH
28214: FOR_IN
28215: IFFALSE 28234
// PlaceUnitArea ( i , Arabi2 , false ) ;
28217: LD_VAR 0 2
28221: PPUSH
28222: LD_INT 13
28224: PPUSH
28225: LD_INT 0
28227: PPUSH
28228: CALL_OW 49
28232: GO 28214
28234: POP
28235: POP
// ComMoveXY ( ARABI_FLAME_LIST , 139 , 78 ) ;
28236: LD_EXP 62
28240: PPUSH
28241: LD_INT 139
28243: PPUSH
28244: LD_INT 78
28246: PPUSH
28247: CALL_OW 111
// AddComAttackUnit ( ARABI_FLAME_LIST , RU1_bar1 ) ;
28251: LD_EXP 62
28255: PPUSH
28256: LD_INT 2
28258: PPUSH
28259: CALL_OW 175
// CenterOnXY ( 142 , 80 ) ;
28263: LD_INT 142
28265: PPUSH
28266: LD_INT 80
28268: PPUSH
28269: CALL_OW 84
// for i in ARABI_VOJACI do
28273: LD_ADDR_VAR 0 2
28277: PUSH
28278: LD_EXP 64
28282: PUSH
28283: FOR_IN
28284: IFFALSE 28303
// PlaceUnitArea ( i , Arabi1 , false ) ;
28286: LD_VAR 0 2
28290: PPUSH
28291: LD_INT 12
28293: PPUSH
28294: LD_INT 0
28296: PPUSH
28297: CALL_OW 49
28301: GO 28283
28303: POP
28304: POP
// ComMoveXY ( ARABI_VOJACI , 153 , 84 ) ;
28305: LD_EXP 64
28309: PPUSH
28310: LD_INT 153
28312: PPUSH
28313: LD_INT 84
28315: PPUSH
28316: CALL_OW 111
// AddComAgressiveMove ( ARABI_VOJACI , 150 , 83 ) ;
28320: LD_EXP 64
28324: PPUSH
28325: LD_INT 150
28327: PPUSH
28328: LD_INT 83
28330: PPUSH
28331: CALL_OW 174
// AddComAgressiveMove ( ARABI_VOJACI , 141 , 78 ) ;
28335: LD_EXP 64
28339: PPUSH
28340: LD_INT 141
28342: PPUSH
28343: LD_INT 78
28345: PPUSH
28346: CALL_OW 174
// AddComAgressiveMove ( ARABI_VOJACI , 141 , 86 ) ;
28350: LD_EXP 64
28354: PPUSH
28355: LD_INT 141
28357: PPUSH
28358: LD_INT 86
28360: PPUSH
28361: CALL_OW 174
// CenterOnXY ( 142 , 80 ) ;
28365: LD_INT 142
28367: PPUSH
28368: LD_INT 80
28370: PPUSH
28371: CALL_OW 84
// wait ( 0 0$5 ) ;
28375: LD_INT 175
28377: PPUSH
28378: CALL_OW 67
// for i in ARABI_doraz do
28382: LD_ADDR_VAR 0 2
28386: PUSH
28387: LD_EXP 65
28391: PUSH
28392: FOR_IN
28393: IFFALSE 28412
// PlaceUnitArea ( i , Arabi1 , false ) ;
28395: LD_VAR 0 2
28399: PPUSH
28400: LD_INT 12
28402: PPUSH
28403: LD_INT 0
28405: PPUSH
28406: CALL_OW 49
28410: GO 28392
28412: POP
28413: POP
// ComMoveXY ( ARABI_doraz , 153 , 85 ) ;
28414: LD_EXP 65
28418: PPUSH
28419: LD_INT 153
28421: PPUSH
28422: LD_INT 85
28424: PPUSH
28425: CALL_OW 111
// AddComAttackUnit ( ARABI_doraz , RU1_dep ) ;
28429: LD_EXP 65
28433: PPUSH
28434: LD_INT 1
28436: PPUSH
28437: CALL_OW 175
// AddComAttackUnit ( ARABI_doraz , RU1_lab1 ) ;
28441: LD_EXP 65
28445: PPUSH
28446: LD_INT 6
28448: PPUSH
28449: CALL_OW 175
// AddComAttackUnit ( ARABI_doraz , RU1_lab2 ) ;
28453: LD_EXP 65
28457: PPUSH
28458: LD_INT 16
28460: PPUSH
28461: CALL_OW 175
// end ;
28465: LD_VAR 0 1
28469: RET
// export function ArDontAttackPlayer ( bol ) ; var i ; begin
28470: LD_INT 0
28472: PPUSH
28473: PPUSH
// for i in FilterAllUnits ( [ f_side , You ] ) do
28474: LD_ADDR_VAR 0 3
28478: PUSH
28479: LD_INT 22
28481: PUSH
28482: LD_EXP 1
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PPUSH
28491: CALL_OW 69
28495: PUSH
28496: FOR_IN
28497: IFFALSE 28537
// if bol then
28499: LD_VAR 0 1
28503: IFFALSE 28521
// DoNotAttack ( Arabi , i ) else
28505: LD_EXP 5
28509: PPUSH
28510: LD_VAR 0 3
28514: PPUSH
28515: CALL_OW 471
28519: GO 28535
// NormalAttack ( Arabi , i ) ;
28521: LD_EXP 5
28525: PPUSH
28526: LD_VAR 0 3
28530: PPUSH
28531: CALL_OW 472
28535: GO 28496
28537: POP
28538: POP
// end ;
28539: LD_VAR 0 2
28543: RET
// every 0 0$5 trigger arabsky_utok_zacal do var pom , pom1 , i ; var utek ;
28544: LD_LOC 27
28548: IFFALSE 28732
28550: GO 28552
28552: DISABLE
28553: LD_INT 0
28555: PPUSH
28556: PPUSH
28557: PPUSH
28558: PPUSH
// begin utek = [ ] ;
28559: LD_ADDR_VAR 0 4
28563: PUSH
28564: EMPTY
28565: ST_TO_ADDR
// pom = FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] , [ f_ok ] ] ) ;
28566: LD_ADDR_VAR 0 1
28570: PUSH
28571: LD_INT 14
28573: PPUSH
28574: LD_INT 22
28576: PUSH
28577: LD_EXP 2
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 50
28588: PUSH
28589: EMPTY
28590: LIST
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PPUSH
28596: CALL_OW 70
28600: ST_TO_ADDR
// if pom < 2 then
28601: LD_VAR 0 1
28605: PUSH
28606: LD_INT 2
28608: LESS
28609: IFFALSE 28706
// begin pom1 = FilterAllUnits ( [ [ f_side , Arabi ] , [ f_ok ] ] ) ;
28611: LD_ADDR_VAR 0 2
28615: PUSH
28616: LD_INT 22
28618: PUSH
28619: LD_EXP 5
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 50
28630: PUSH
28631: EMPTY
28632: LIST
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PPUSH
28638: CALL_OW 69
28642: ST_TO_ADDR
// if pom1 > 0 then
28643: LD_VAR 0 2
28647: PUSH
28648: LD_INT 0
28650: GREATER
28651: IFFALSE 28706
// for i in pom1 do
28653: LD_ADDR_VAR 0 3
28657: PUSH
28658: LD_VAR 0 2
28662: PUSH
28663: FOR_IN
28664: IFFALSE 28704
// if utek < 3 then
28666: LD_VAR 0 4
28670: PUSH
28671: LD_INT 3
28673: LESS
28674: IFFALSE 28694
// utek = utek ^ i else
28676: LD_ADDR_VAR 0 4
28680: PUSH
28681: LD_VAR 0 4
28685: PUSH
28686: LD_VAR 0 3
28690: ADD
28691: ST_TO_ADDR
28692: GO 28702
// arabsky_utok_zacal = false ;
28694: LD_ADDR_LOC 27
28698: PUSH
28699: LD_INT 0
28701: ST_TO_ADDR
28702: GO 28663
28704: POP
28705: POP
// end ; if utek > 0 then
28706: LD_VAR 0 4
28710: PUSH
28711: LD_INT 0
28713: GREATER
28714: IFFALSE 28731
// ComMoveXY ( utek , 166 , 95 ) ;
28716: LD_VAR 0 4
28720: PPUSH
28721: LD_INT 166
28723: PPUSH
28724: LD_INT 95
28726: PPUSH
28727: CALL_OW 111
// enable ;
28731: ENABLE
// end ;
28732: PPOPN 4
28734: END
// every 0 0$3 trigger FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] , [ f_ok ] ] ) < 2 do var pom , i ;
28735: LD_INT 14
28737: PPUSH
28738: LD_INT 22
28740: PUSH
28741: LD_EXP 2
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 50
28752: PUSH
28753: EMPTY
28754: LIST
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PPUSH
28760: CALL_OW 70
28764: PUSH
28765: LD_INT 2
28767: LESS
28768: IFFALSE 28832
28770: GO 28772
28772: DISABLE
28773: LD_INT 0
28775: PPUSH
28776: PPUSH
// begin pom = FilterUnitsInArea ( Arabi2 , [ [ f_side , Arabi ] ] ) ;
28777: LD_ADDR_VAR 0 1
28781: PUSH
28782: LD_INT 13
28784: PPUSH
28785: LD_INT 22
28787: PUSH
28788: LD_EXP 5
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: EMPTY
28798: LIST
28799: PPUSH
28800: CALL_OW 70
28804: ST_TO_ADDR
// for i in pom do
28805: LD_ADDR_VAR 0 2
28809: PUSH
28810: LD_VAR 0 1
28814: PUSH
28815: FOR_IN
28816: IFFALSE 28829
// RemoveUnit ( i ) ;
28818: LD_VAR 0 2
28822: PPUSH
28823: CALL_OW 64
28827: GO 28815
28829: POP
28830: POP
// enable ;
28831: ENABLE
// end ;
28832: PPOPN 2
28834: END
// every 0 0$4 trigger arabsky_utok_zacal do
28835: LD_LOC 27
28839: IFFALSE 28935
28841: GO 28843
28843: DISABLE
// begin if GetLives ( RU1_el1 ) < 1000 and GetLives ( RU1_el1 ) < 150 then
28844: LD_INT 14
28846: PPUSH
28847: CALL_OW 256
28851: PUSH
28852: LD_INT 1000
28854: LESS
28855: PUSH
28856: LD_INT 14
28858: PPUSH
28859: CALL_OW 256
28863: PUSH
28864: LD_INT 150
28866: LESS
28867: AND
28868: IFFALSE 28880
// SetLives ( RU1_el1 , 150 ) ;
28870: LD_INT 14
28872: PPUSH
28873: LD_INT 150
28875: PPUSH
28876: CALL_OW 234
// if GetLives ( RU1_el2 ) < 1000 and GetLives ( RU1_el2 ) < 150 then
28880: LD_INT 15
28882: PPUSH
28883: CALL_OW 256
28887: PUSH
28888: LD_INT 1000
28890: LESS
28891: PUSH
28892: LD_INT 15
28894: PPUSH
28895: CALL_OW 256
28899: PUSH
28900: LD_INT 150
28902: LESS
28903: AND
28904: IFFALSE 28916
// SetLives ( RU1_el2 , 150 ) ;
28906: LD_INT 15
28908: PPUSH
28909: LD_INT 150
28911: PPUSH
28912: CALL_OW 234
// if IsOK ( RU1_el1 ) or IsOK ( RU1_el2 ) then
28916: LD_INT 14
28918: PPUSH
28919: CALL_OW 302
28923: PUSH
28924: LD_INT 15
28926: PPUSH
28927: CALL_OW 302
28931: OR
28932: IFFALSE 28935
// enable ;
28934: ENABLE
// end ;
28935: END
// every 0 0$5 trigger FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] , [ f_ok ] ] ) <= 3 do var i ;
28936: LD_INT 14
28938: PPUSH
28939: LD_INT 22
28941: PUSH
28942: LD_EXP 2
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 50
28953: PUSH
28954: EMPTY
28955: LIST
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PPUSH
28961: CALL_OW 70
28965: PUSH
28966: LD_INT 3
28968: LESSEQUAL
28969: IFFALSE 29016
28971: GO 28973
28973: DISABLE
28974: LD_INT 0
28976: PPUSH
// begin ArDontAttackPlayer ( false ) ;
28977: LD_INT 0
28979: PPUSH
28980: CALL 28470 0 1
// arabi_kirov_posily_posli ;
28984: CALL 29103 0 0
// DisableVideoExclamations ;
28988: CALL_OW 499
// music_nat = 0 ;
28992: LD_ADDR_OWVAR 71
28996: PUSH
28997: LD_INT 0
28999: ST_TO_ADDR
// chmo_6 ;
29000: CALL 16725 0 0
// InGameOff ;
29004: CALL_OW 9
// stav_omikron = 8 ;
29008: LD_ADDR_EXP 39
29012: PUSH
29013: LD_INT 8
29015: ST_TO_ADDR
// end ;
29016: PPOPN 1
29018: END
// every 0 0$3 trigger FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] ] ) > 2 do var pom ;
29019: LD_INT 14
29021: PPUSH
29022: LD_INT 22
29024: PUSH
29025: LD_EXP 2
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: EMPTY
29035: LIST
29036: PPUSH
29037: CALL_OW 70
29041: PUSH
29042: LD_INT 2
29044: GREATER
29045: IFFALSE 29100
29047: GO 29049
29049: DISABLE
29050: LD_INT 0
29052: PPUSH
// begin pom = FilterUnitsInArea ( RU1_base , [ [ f_side , You2 ] ] ) ;
29053: LD_ADDR_VAR 0 1
29057: PUSH
29058: LD_INT 14
29060: PPUSH
29061: LD_INT 22
29063: PUSH
29064: LD_EXP 2
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: EMPTY
29074: LIST
29075: PPUSH
29076: CALL_OW 70
29080: ST_TO_ADDR
// ComAttackUnit ( ARABI_doraz , pom [ 1 ] ) ;
29081: LD_EXP 65
29085: PPUSH
29086: LD_VAR 0 1
29090: PUSH
29091: LD_INT 1
29093: ARRAY
29094: PPUSH
29095: CALL_OW 115
// enable ;
29099: ENABLE
// end ;
29100: PPOPN 1
29102: END
// function arabi_kirov_posily_posli ; var i ; begin
29103: LD_INT 0
29105: PPUSH
29106: PPUSH
// for i in ARABI_KIROV_POSILY do
29107: LD_ADDR_VAR 0 2
29111: PUSH
29112: LD_EXP 66
29116: PUSH
29117: FOR_IN
29118: IFFALSE 29137
// PlaceUnitArea ( i , Arabi3 , false ) ;
29120: LD_VAR 0 2
29124: PPUSH
29125: LD_INT 33
29127: PPUSH
29128: LD_INT 0
29130: PPUSH
29131: CALL_OW 49
29135: GO 29117
29137: POP
29138: POP
// ComAgressiveMove ( ARABI_KIROV_POSILY , 142 , 84 ) ;
29139: LD_EXP 66
29143: PPUSH
29144: LD_INT 142
29146: PPUSH
29147: LD_INT 84
29149: PPUSH
29150: CALL_OW 114
// end ;
29154: LD_VAR 0 1
29158: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 4 do var i ;
29159: LD_INT 22
29161: PUSH
29162: LD_INT 2
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 3
29171: PUSH
29172: LD_INT 24
29174: PUSH
29175: LD_INT 1000
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PPUSH
29190: CALL_OW 69
29194: PUSH
29195: LD_INT 4
29197: GREATER
29198: IFFALSE 29282
29200: GO 29202
29202: DISABLE
29203: LD_INT 0
29205: PPUSH
// begin enable ;
29206: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
29207: LD_ADDR_VAR 0 1
29211: PUSH
29212: LD_INT 22
29214: PUSH
29215: LD_INT 2
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 3
29224: PUSH
29225: LD_INT 24
29227: PUSH
29228: LD_INT 1000
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PPUSH
29243: CALL_OW 69
29247: PUSH
29248: FOR_IN
29249: IFFALSE 29280
// if GetLives ( i ) > 500 then
29251: LD_VAR 0 1
29255: PPUSH
29256: CALL_OW 256
29260: PUSH
29261: LD_INT 500
29263: GREATER
29264: IFFALSE 29278
// SetLives ( i , 1000 ) ;
29266: LD_VAR 0 1
29270: PPUSH
29271: LD_INT 1000
29273: PPUSH
29274: CALL_OW 234
29278: GO 29248
29280: POP
29281: POP
// end ; end_of_file
29282: PPOPN 1
29284: END
// export function SA_DontSaveScholtze ; begin
29285: LD_INT 0
29287: PPUSH
// SetAchievement ( ACH_EPR ) ;
29288: LD_STRING ACH_EPR
29290: PPUSH
29291: CALL_OW 543
// end ;
29295: LD_VAR 0 1
29299: RET
// export function SA_OneDepotWin ; begin
29300: LD_INT 0
29302: PPUSH
// SetAchievement ( ACH_PON ) ;
29303: LD_STRING ACH_PON
29305: PPUSH
29306: CALL_OW 543
// end ; end_of_file
29310: LD_VAR 0 1
29314: RET
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
29315: LD_INT 0
29317: PPUSH
29318: PPUSH
// if not missionNumber then
29319: LD_VAR 0 2
29323: NOT
29324: IFFALSE 29328
// exit ;
29326: GO 29458
// achiv := false ;
29328: LD_ADDR_VAR 0 7
29332: PUSH
29333: LD_INT 0
29335: ST_TO_ADDR
// case campaignNumber of 1 :
29336: LD_VAR 0 1
29340: PUSH
29341: LD_INT 1
29343: DOUBLE
29344: EQUAL
29345: IFTRUE 29349
29347: GO 29360
29349: POP
// achiv := ACH_GOTA ; 2 :
29350: LD_ADDR_VAR 0 7
29354: PUSH
29355: LD_STRING ACH_GOTA
29357: ST_TO_ADDR
29358: GO 29410
29360: LD_INT 2
29362: DOUBLE
29363: EQUAL
29364: IFTRUE 29368
29366: GO 29371
29368: POP
// ; 3 :
29369: GO 29410
29371: LD_INT 3
29373: DOUBLE
29374: EQUAL
29375: IFTRUE 29379
29377: GO 29390
29379: POP
// achiv := ACH_MOTSU ; 4 :
29380: LD_ADDR_VAR 0 7
29384: PUSH
29385: LD_STRING ACH_MOTSU
29387: ST_TO_ADDR
29388: GO 29410
29390: LD_INT 4
29392: DOUBLE
29393: EQUAL
29394: IFTRUE 29398
29396: GO 29409
29398: POP
// achiv := ACH_LOP ; end ;
29399: LD_ADDR_VAR 0 7
29403: PUSH
29404: LD_STRING ACH_LOP
29406: ST_TO_ADDR
29407: GO 29410
29409: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
29410: LD_OWVAR 67
29414: PUSH
29415: LD_INT 3
29417: EQUAL
29418: PUSH
29419: LD_VAR 0 7
29423: AND
29424: PUSH
29425: LD_VAR 0 3
29429: AND
29430: PUSH
29431: LD_VAR 0 4
29435: AND
29436: PUSH
29437: LD_VAR 0 5
29441: AND
29442: IFFALSE 29458
// SetAchievementEX ( achiv , missionNumber ) ;
29444: LD_VAR 0 7
29448: PPUSH
29449: LD_VAR 0 2
29453: PPUSH
29454: CALL_OW 564
// end ;
29458: LD_VAR 0 6
29462: RET
// export function SA_BehemothConstructed ; begin
29463: LD_INT 0
29465: PPUSH
// SetAchievement ( ACH_SMC ) ;
29466: LD_STRING ACH_SMC
29468: PPUSH
29469: CALL_OW 543
// end ;
29473: LD_VAR 0 1
29477: RET
