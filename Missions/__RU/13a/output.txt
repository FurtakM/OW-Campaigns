// export al , rus , ar , am , oth , rus2 ; export maxlidi ; export ars0 , ars1 , ars2 , ars3 , ars4 , ars5 , ars6 , ars7 , ars8 , ars9 , ars10 , arm0 ; export arv1_ch , arv1_wp , arm1_sk , arv2_ch , arv2_wp , arm2_sk , arv3_ch , arv3_wp , arm3_sk , arv4_ch , arv4_wp , arm4_sk , arv5_ch , arv5_wp , arm5_sk , arv6_ch , arv6_wp , arm6_sk , arv7_ch , arv7_wp , arv8_ch , arv8_wp , arv9_ch , arv9_wp , arv10_ch , arv10_wp ; export ruv0_ch , ruv0_wp , ruv1_ch , ruv1_wp , ruv2_ch , ruv2_wp , ruv3_ch , ruv3_wp , ruv4_ch , ruv4_wp , ruv5_ch , ruv5_wp , ruv6_ch , ruv6_wp , ruv7_ch , ruv7_wp , ruv8_ch , ruv8_wp ; export rumech1_sk , rumech2_sk , rumech3_sk , rumech4_sk , rumech5_sk , rumech6_sk , rumech7_sk , rumech8_sk ; export hr_auta , time2wait , delay , arab_artef_zdrh , lab_build , koncime , artef_out , base_out ; export Masha ; function set_vars ; begin
   0: LD_INT 0
   2: PPUSH
// al = 7 ;
   3: LD_ADDR_EXP 1
   7: PUSH
   8: LD_INT 7
  10: ST_TO_ADDR
// rus = 3 ;
  11: LD_ADDR_EXP 2
  15: PUSH
  16: LD_INT 3
  18: ST_TO_ADDR
// rus2 = 6 ;
  19: LD_ADDR_EXP 6
  23: PUSH
  24: LD_INT 6
  26: ST_TO_ADDR
// am = 1 ;
  27: LD_ADDR_EXP 4
  31: PUSH
  32: LD_INT 1
  34: ST_TO_ADDR
// ar = 2 ;
  35: LD_ADDR_EXP 3
  39: PUSH
  40: LD_INT 2
  42: ST_TO_ADDR
// oth = 4 ;
  43: LD_ADDR_EXP 5
  47: PUSH
  48: LD_INT 4
  50: ST_TO_ADDR
// rusove = [ ] ;
  51: LD_ADDR_EXP 138
  55: PUSH
  56: EMPTY
  57: ST_TO_ADDR
// rusoveu = [ ] ;
  58: LD_ADDR_EXP 139
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// maxlidi = 13 ;
  65: LD_ADDR_EXP 7
  69: PUSH
  70: LD_INT 13
  72: ST_TO_ADDR
// lab_build = false ;
  73: LD_ADDR_EXP 76
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// vyjednavalo_se = false ;
  81: LD_ADDR_EXP 82
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// base_out = false ;
  89: LD_ADDR_EXP 79
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// artef_out = false ;
  97: LD_ADDR_EXP 78
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// supplies = 30 ;
 105: LD_ADDR_LOC 3
 109: PUSH
 110: LD_INT 30
 112: ST_TO_ADDR
// cperiode = [ 1 1$30 , 1 1$30 , 1 1$45 ] [ difficulty ] ;
 113: LD_ADDR_LOC 2
 117: PUSH
 118: LD_INT 3150
 120: PUSH
 121: LD_INT 3150
 123: PUSH
 124: LD_INT 3675
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: LIST
 131: PUSH
 132: LD_OWVAR 67
 136: ARRAY
 137: ST_TO_ADDR
// hr_auta = [ 500 , 500 , 500 ] [ difficulty ] ;
 138: LD_ADDR_EXP 72
 142: PUSH
 143: LD_INT 500
 145: PUSH
 146: LD_INT 500
 148: PUSH
 149: LD_INT 500
 151: PUSH
 152: EMPTY
 153: LIST
 154: LIST
 155: LIST
 156: PUSH
 157: LD_OWVAR 67
 161: ARRAY
 162: ST_TO_ADDR
// time2wait = [ 3 3$0 , 1 1$30 , 0 0$30 ] [ difficulty ] ;
 163: LD_ADDR_EXP 73
 167: PUSH
 168: LD_INT 6300
 170: PUSH
 171: LD_INT 3150
 173: PUSH
 174: LD_INT 1050
 176: PUSH
 177: EMPTY
 178: LIST
 179: LIST
 180: LIST
 181: PUSH
 182: LD_OWVAR 67
 186: ARRAY
 187: ST_TO_ADDR
// arab_artef_zdrh = [ 30 30$0 , 15 15$0 , 5 5$0 ] [ difficulty ] ;
 188: LD_ADDR_EXP 75
 192: PUSH
 193: LD_INT 63000
 195: PUSH
 196: LD_INT 31500
 198: PUSH
 199: LD_INT 10500
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: PUSH
 207: LD_OWVAR 67
 211: ARRAY
 212: ST_TO_ADDR
// ars0 = [ 3 , 5 , 7 ] [ difficulty ] ;
 213: LD_ADDR_EXP 8
 217: PUSH
 218: LD_INT 3
 220: PUSH
 221: LD_INT 5
 223: PUSH
 224: LD_INT 7
 226: PUSH
 227: EMPTY
 228: LIST
 229: LIST
 230: LIST
 231: PUSH
 232: LD_OWVAR 67
 236: ARRAY
 237: ST_TO_ADDR
// ars1 = [ 4 , 6 , 8 ] [ difficulty ] ;
 238: LD_ADDR_EXP 9
 242: PUSH
 243: LD_INT 4
 245: PUSH
 246: LD_INT 6
 248: PUSH
 249: LD_INT 8
 251: PUSH
 252: EMPTY
 253: LIST
 254: LIST
 255: LIST
 256: PUSH
 257: LD_OWVAR 67
 261: ARRAY
 262: ST_TO_ADDR
// ars2 = [ 4 , 6 , 8 ] [ difficulty ] ;
 263: LD_ADDR_EXP 10
 267: PUSH
 268: LD_INT 4
 270: PUSH
 271: LD_INT 6
 273: PUSH
 274: LD_INT 8
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: PUSH
 282: LD_OWVAR 67
 286: ARRAY
 287: ST_TO_ADDR
// ars3 = [ 3 , 5 , 7 ] [ difficulty ] ;
 288: LD_ADDR_EXP 11
 292: PUSH
 293: LD_INT 3
 295: PUSH
 296: LD_INT 5
 298: PUSH
 299: LD_INT 7
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: LIST
 306: PUSH
 307: LD_OWVAR 67
 311: ARRAY
 312: ST_TO_ADDR
// ars4 = [ 5 , 7 , 9 ] [ difficulty ] ;
 313: LD_ADDR_EXP 12
 317: PUSH
 318: LD_INT 5
 320: PUSH
 321: LD_INT 7
 323: PUSH
 324: LD_INT 9
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_OWVAR 67
 336: ARRAY
 337: ST_TO_ADDR
// ars5 = [ 4 , 6 , 8 ] [ difficulty ] ;
 338: LD_ADDR_EXP 13
 342: PUSH
 343: LD_INT 4
 345: PUSH
 346: LD_INT 6
 348: PUSH
 349: LD_INT 8
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: LIST
 356: PUSH
 357: LD_OWVAR 67
 361: ARRAY
 362: ST_TO_ADDR
// ars6 = [ 4 , 6 , 8 ] [ difficulty ] ;
 363: LD_ADDR_EXP 14
 367: PUSH
 368: LD_INT 4
 370: PUSH
 371: LD_INT 6
 373: PUSH
 374: LD_INT 8
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: LIST
 381: PUSH
 382: LD_OWVAR 67
 386: ARRAY
 387: ST_TO_ADDR
// ars7 = [ 3 , 5 , 7 ] [ difficulty ] ;
 388: LD_ADDR_EXP 15
 392: PUSH
 393: LD_INT 3
 395: PUSH
 396: LD_INT 5
 398: PUSH
 399: LD_INT 7
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_OWVAR 67
 411: ARRAY
 412: ST_TO_ADDR
// ars8 = [ 4 , 6 , 8 ] [ difficulty ] ;
 413: LD_ADDR_EXP 16
 417: PUSH
 418: LD_INT 4
 420: PUSH
 421: LD_INT 6
 423: PUSH
 424: LD_INT 8
 426: PUSH
 427: EMPTY
 428: LIST
 429: LIST
 430: LIST
 431: PUSH
 432: LD_OWVAR 67
 436: ARRAY
 437: ST_TO_ADDR
// ars9 = [ 4 , 6 , 8 ] [ difficulty ] ;
 438: LD_ADDR_EXP 17
 442: PUSH
 443: LD_INT 4
 445: PUSH
 446: LD_INT 6
 448: PUSH
 449: LD_INT 8
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: LD_OWVAR 67
 461: ARRAY
 462: ST_TO_ADDR
// ars10 = [ 4 , 6 , 8 ] [ difficulty ] ;
 463: LD_ADDR_EXP 18
 467: PUSH
 468: LD_INT 4
 470: PUSH
 471: LD_INT 6
 473: PUSH
 474: LD_INT 8
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: LD_OWVAR 67
 486: ARRAY
 487: ST_TO_ADDR
// ruv0_ch = [ ru_medium_wheeled , ru_medium_wheeled , ru_medium_wheeled ] [ difficulty ] ;
 488: LD_ADDR_EXP 46
 492: PUSH
 493: LD_INT 21
 495: PUSH
 496: LD_INT 21
 498: PUSH
 499: LD_INT 21
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: LIST
 506: PUSH
 507: LD_OWVAR 67
 511: ARRAY
 512: ST_TO_ADDR
// ruv0_wp = [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_heavy_machine_gun ] [ difficulty ] ;
 513: LD_ADDR_EXP 47
 517: PUSH
 518: LD_INT 42
 520: PUSH
 521: LD_INT 42
 523: PUSH
 524: LD_INT 42
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: PUSH
 532: LD_OWVAR 67
 536: ARRAY
 537: ST_TO_ADDR
// ruv1_ch = [ ru_medium_wheeled , ru_medium_wheeled , ru_medium_wheeled ] [ difficulty ] ;
 538: LD_ADDR_EXP 48
 542: PUSH
 543: LD_INT 21
 545: PUSH
 546: LD_INT 21
 548: PUSH
 549: LD_INT 21
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: LIST
 556: PUSH
 557: LD_OWVAR 67
 561: ARRAY
 562: ST_TO_ADDR
// ruv1_wp = [ ru_gatling_gun , ru_gatling_gun , ru_gun ] [ difficulty ] ;
 563: LD_ADDR_EXP 49
 567: PUSH
 568: LD_INT 43
 570: PUSH
 571: LD_INT 43
 573: PUSH
 574: LD_INT 44
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: LIST
 581: PUSH
 582: LD_OWVAR 67
 586: ARRAY
 587: ST_TO_ADDR
// rumech1_sk = [ 4 , 6 , 7 ] [ difficulty ] ;
 588: LD_ADDR_EXP 64
 592: PUSH
 593: LD_INT 4
 595: PUSH
 596: LD_INT 6
 598: PUSH
 599: LD_INT 7
 601: PUSH
 602: EMPTY
 603: LIST
 604: LIST
 605: LIST
 606: PUSH
 607: LD_OWVAR 67
 611: ARRAY
 612: ST_TO_ADDR
// ruv2_ch = [ ru_heavy_wheeled , ru_heavy_wheeled , ru_heavy_wheeled ] [ difficulty ] ;
 613: LD_ADDR_EXP 50
 617: PUSH
 618: LD_INT 23
 620: PUSH
 621: LD_INT 23
 623: PUSH
 624: LD_INT 23
 626: PUSH
 627: EMPTY
 628: LIST
 629: LIST
 630: LIST
 631: PUSH
 632: LD_OWVAR 67
 636: ARRAY
 637: ST_TO_ADDR
// ruv2_wp = [ ru_heavy_gun , ru_heavy_gun , ru_heavy_gun ] [ difficulty ] ;
 638: LD_ADDR_EXP 51
 642: PUSH
 643: LD_INT 46
 645: PUSH
 646: LD_INT 46
 648: PUSH
 649: LD_INT 46
 651: PUSH
 652: EMPTY
 653: LIST
 654: LIST
 655: LIST
 656: PUSH
 657: LD_OWVAR 67
 661: ARRAY
 662: ST_TO_ADDR
// rumech2_sk = [ 3 , 5 , 7 ] [ difficulty ] ;
 663: LD_ADDR_EXP 65
 667: PUSH
 668: LD_INT 3
 670: PUSH
 671: LD_INT 5
 673: PUSH
 674: LD_INT 7
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: LIST
 681: PUSH
 682: LD_OWVAR 67
 686: ARRAY
 687: ST_TO_ADDR
// ruv3_ch = [ ru_medium_tracked , ru_medium_tracked , ru_medium_tracked ] [ difficulty ] ;
 688: LD_ADDR_EXP 52
 692: PUSH
 693: LD_INT 22
 695: PUSH
 696: LD_INT 22
 698: PUSH
 699: LD_INT 22
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: LIST
 706: PUSH
 707: LD_OWVAR 67
 711: ARRAY
 712: ST_TO_ADDR
// ruv3_wp = [ ru_gatling_gun , ru_gatling_gun , ru_gatling_gun ] [ difficulty ] ;
 713: LD_ADDR_EXP 53
 717: PUSH
 718: LD_INT 43
 720: PUSH
 721: LD_INT 43
 723: PUSH
 724: LD_INT 43
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: LIST
 731: PUSH
 732: LD_OWVAR 67
 736: ARRAY
 737: ST_TO_ADDR
// rumech3_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 738: LD_ADDR_EXP 66
 742: PUSH
 743: LD_INT 5
 745: PUSH
 746: LD_INT 7
 748: PUSH
 749: LD_INT 9
 751: PUSH
 752: EMPTY
 753: LIST
 754: LIST
 755: LIST
 756: PUSH
 757: LD_OWVAR 67
 761: ARRAY
 762: ST_TO_ADDR
// ruv4_ch = [ ru_medium_wheeled , ru_medium_wheeled , ru_medium_tracked ] [ difficulty ] ;
 763: LD_ADDR_EXP 54
 767: PUSH
 768: LD_INT 21
 770: PUSH
 771: LD_INT 21
 773: PUSH
 774: LD_INT 22
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: LIST
 781: PUSH
 782: LD_OWVAR 67
 786: ARRAY
 787: ST_TO_ADDR
// ruv4_wp = [ ru_gatling_gun , ru_gatling_gun , ru_gatling_gun ] [ difficulty ] ;
 788: LD_ADDR_EXP 55
 792: PUSH
 793: LD_INT 43
 795: PUSH
 796: LD_INT 43
 798: PUSH
 799: LD_INT 43
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: PUSH
 807: LD_OWVAR 67
 811: ARRAY
 812: ST_TO_ADDR
// rumech4_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
 813: LD_ADDR_EXP 67
 817: PUSH
 818: LD_INT 4
 820: PUSH
 821: LD_INT 6
 823: PUSH
 824: LD_INT 8
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: LIST
 831: PUSH
 832: LD_OWVAR 67
 836: ARRAY
 837: ST_TO_ADDR
// ruv5_ch = [ ru_heavy_wheeled , ru_heavy_wheeled , ru_heavy_wheeled ] [ difficulty ] ;
 838: LD_ADDR_EXP 56
 842: PUSH
 843: LD_INT 23
 845: PUSH
 846: LD_INT 23
 848: PUSH
 849: LD_INT 23
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: LIST
 856: PUSH
 857: LD_OWVAR 67
 861: ARRAY
 862: ST_TO_ADDR
// ruv5_wp = [ ru_gun , ru_heavy_gun , ru_heavy_gun ] [ difficulty ] ;
 863: LD_ADDR_EXP 57
 867: PUSH
 868: LD_INT 44
 870: PUSH
 871: LD_INT 46
 873: PUSH
 874: LD_INT 46
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: LIST
 881: PUSH
 882: LD_OWVAR 67
 886: ARRAY
 887: ST_TO_ADDR
// rumech5_sk = [ 4 , 5 , 8 ] [ difficulty ] ;
 888: LD_ADDR_EXP 68
 892: PUSH
 893: LD_INT 4
 895: PUSH
 896: LD_INT 5
 898: PUSH
 899: LD_INT 8
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: LIST
 906: PUSH
 907: LD_OWVAR 67
 911: ARRAY
 912: ST_TO_ADDR
// ruv6_ch = [ ru_medium_tracked , ru_medium_tracked , ru_medium_tracked ] [ difficulty ] ;
 913: LD_ADDR_EXP 58
 917: PUSH
 918: LD_INT 22
 920: PUSH
 921: LD_INT 22
 923: PUSH
 924: LD_INT 22
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: LIST
 931: PUSH
 932: LD_OWVAR 67
 936: ARRAY
 937: ST_TO_ADDR
// ruv6_wp = [ ru_rocket_launcher , ru_rocket_launcher , ru_rocket_launcher ] [ difficulty ] ;
 938: LD_ADDR_EXP 59
 942: PUSH
 943: LD_INT 45
 945: PUSH
 946: LD_INT 45
 948: PUSH
 949: LD_INT 45
 951: PUSH
 952: EMPTY
 953: LIST
 954: LIST
 955: LIST
 956: PUSH
 957: LD_OWVAR 67
 961: ARRAY
 962: ST_TO_ADDR
// rumech6_sk = [ 4 , 7 , 9 ] [ difficulty ] ;
 963: LD_ADDR_EXP 69
 967: PUSH
 968: LD_INT 4
 970: PUSH
 971: LD_INT 7
 973: PUSH
 974: LD_INT 9
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: PUSH
 982: LD_OWVAR 67
 986: ARRAY
 987: ST_TO_ADDR
// ruv7_ch = [ ru_medium_tracked , ru_medium_tracked , ru_medium_tracked ] [ difficulty ] ;
 988: LD_ADDR_EXP 60
 992: PUSH
 993: LD_INT 22
 995: PUSH
 996: LD_INT 22
 998: PUSH
 999: LD_INT 22
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: PUSH
1007: LD_OWVAR 67
1011: ARRAY
1012: ST_TO_ADDR
// ruv7_wp = [ ru_gun , ru_gun , ru_gun ] [ difficulty ] ;
1013: LD_ADDR_EXP 61
1017: PUSH
1018: LD_INT 44
1020: PUSH
1021: LD_INT 44
1023: PUSH
1024: LD_INT 44
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: LD_OWVAR 67
1036: ARRAY
1037: ST_TO_ADDR
// rumech7_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
1038: LD_ADDR_EXP 70
1042: PUSH
1043: LD_INT 5
1045: PUSH
1046: LD_INT 7
1048: PUSH
1049: LD_INT 9
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: LIST
1056: PUSH
1057: LD_OWVAR 67
1061: ARRAY
1062: ST_TO_ADDR
// ruv8_ch = [ ru_heavy_wheeled , ru_heavy_wheeled , ru_heavy_wheeled ] [ difficulty ] ;
1063: LD_ADDR_EXP 62
1067: PUSH
1068: LD_INT 23
1070: PUSH
1071: LD_INT 23
1073: PUSH
1074: LD_INT 23
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: LIST
1081: PUSH
1082: LD_OWVAR 67
1086: ARRAY
1087: ST_TO_ADDR
// ruv8_wp = [ ru_gatling_gun , ru_gatling_gun , ru_gatling_gun ] [ difficulty ] ;
1088: LD_ADDR_EXP 63
1092: PUSH
1093: LD_INT 43
1095: PUSH
1096: LD_INT 43
1098: PUSH
1099: LD_INT 43
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: LD_OWVAR 67
1111: ARRAY
1112: ST_TO_ADDR
// rumech8_sk = [ 5 , 7 , 8 ] [ difficulty ] ;
1113: LD_ADDR_EXP 71
1117: PUSH
1118: LD_INT 5
1120: PUSH
1121: LD_INT 7
1123: PUSH
1124: LD_INT 8
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: LIST
1131: PUSH
1132: LD_OWVAR 67
1136: ARRAY
1137: ST_TO_ADDR
// arm0 = [ 6 , 8 , 10 ] [ difficulty ] ;
1138: LD_ADDR_EXP 19
1142: PUSH
1143: LD_INT 6
1145: PUSH
1146: LD_INT 8
1148: PUSH
1149: LD_INT 10
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: PUSH
1157: LD_OWVAR 67
1161: ARRAY
1162: ST_TO_ADDR
// arv1_ch = [ ar_medium_trike , ar_half_tracked , ar_half_tracked ] [ difficulty ] ;
1163: LD_ADDR_EXP 20
1167: PUSH
1168: LD_INT 13
1170: PUSH
1171: LD_INT 14
1173: PUSH
1174: LD_INT 14
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: LIST
1181: PUSH
1182: LD_OWVAR 67
1186: ARRAY
1187: ST_TO_ADDR
// arv1_wp = [ ar_flame_thrower , ar_flame_thrower , ar_flame_thrower ] [ difficulty ] ;
1188: LD_ADDR_EXP 21
1192: PUSH
1193: LD_INT 26
1195: PUSH
1196: LD_INT 26
1198: PUSH
1199: LD_INT 26
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: LIST
1206: PUSH
1207: LD_OWVAR 67
1211: ARRAY
1212: ST_TO_ADDR
// arm1_sk = [ 3 , 6 , 8 ] [ difficulty ] ;
1213: LD_ADDR_EXP 22
1217: PUSH
1218: LD_INT 3
1220: PUSH
1221: LD_INT 6
1223: PUSH
1224: LD_INT 8
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_OWVAR 67
1236: ARRAY
1237: ST_TO_ADDR
// arv2_ch = [ ar_medium_trike , ar_medium_trike , ar_medium_trike ] [ difficulty ] ;
1238: LD_ADDR_EXP 23
1242: PUSH
1243: LD_INT 13
1245: PUSH
1246: LD_INT 13
1248: PUSH
1249: LD_INT 13
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: LIST
1256: PUSH
1257: LD_OWVAR 67
1261: ARRAY
1262: ST_TO_ADDR
// arv2_wp = [ ar_double_machine_gun , ar_gatling_gun , ar_gatling_gun ] [ difficulty ] ;
1263: LD_ADDR_EXP 24
1267: PUSH
1268: LD_INT 24
1270: PUSH
1271: LD_INT 25
1273: PUSH
1274: LD_INT 25
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: LIST
1281: PUSH
1282: LD_OWVAR 67
1286: ARRAY
1287: ST_TO_ADDR
// arm2_sk = [ 4 , 6 , 9 ] [ difficulty ] ;
1288: LD_ADDR_EXP 25
1292: PUSH
1293: LD_INT 4
1295: PUSH
1296: LD_INT 6
1298: PUSH
1299: LD_INT 9
1301: PUSH
1302: EMPTY
1303: LIST
1304: LIST
1305: LIST
1306: PUSH
1307: LD_OWVAR 67
1311: ARRAY
1312: ST_TO_ADDR
// arv3_ch = [ ar_medium_trike , ar_half_tracked , ar_half_tracked ] [ difficulty ] ;
1313: LD_ADDR_EXP 26
1317: PUSH
1318: LD_INT 13
1320: PUSH
1321: LD_INT 14
1323: PUSH
1324: LD_INT 14
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: PUSH
1332: LD_OWVAR 67
1336: ARRAY
1337: ST_TO_ADDR
// arv3_wp = [ ar_gun , ar_gun , ar_gun ] [ difficulty ] ;
1338: LD_ADDR_EXP 27
1342: PUSH
1343: LD_INT 27
1345: PUSH
1346: LD_INT 27
1348: PUSH
1349: LD_INT 27
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: LIST
1356: PUSH
1357: LD_OWVAR 67
1361: ARRAY
1362: ST_TO_ADDR
// arm3_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
1363: LD_ADDR_EXP 28
1367: PUSH
1368: LD_INT 4
1370: PUSH
1371: LD_INT 6
1373: PUSH
1374: LD_INT 8
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_OWVAR 67
1386: ARRAY
1387: ST_TO_ADDR
// arv4_ch = [ ar_medium_trike , ar_medium_trike , ar_half_tracked ] [ difficulty ] ;
1388: LD_ADDR_EXP 29
1392: PUSH
1393: LD_INT 13
1395: PUSH
1396: LD_INT 13
1398: PUSH
1399: LD_INT 14
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: LIST
1406: PUSH
1407: LD_OWVAR 67
1411: ARRAY
1412: ST_TO_ADDR
// arv4_wp = [ ar_double_machine_gun , ar_gatling_gun , ar_gatling_gun ] [ difficulty ] ;
1413: LD_ADDR_EXP 30
1417: PUSH
1418: LD_INT 24
1420: PUSH
1421: LD_INT 25
1423: PUSH
1424: LD_INT 25
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: LIST
1431: PUSH
1432: LD_OWVAR 67
1436: ARRAY
1437: ST_TO_ADDR
// arm4_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
1438: LD_ADDR_EXP 31
1442: PUSH
1443: LD_INT 4
1445: PUSH
1446: LD_INT 6
1448: PUSH
1449: LD_INT 8
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: LIST
1456: PUSH
1457: LD_OWVAR 67
1461: ARRAY
1462: ST_TO_ADDR
// arv5_ch = [ ar_hovercraft , ar_hovercraft , ar_hovercraft ] [ difficulty ] ;
1463: LD_ADDR_EXP 32
1467: PUSH
1468: LD_INT 11
1470: PUSH
1471: LD_INT 11
1473: PUSH
1474: LD_INT 11
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: LIST
1481: PUSH
1482: LD_OWVAR 67
1486: ARRAY
1487: ST_TO_ADDR
// arv5_wp = [ ar_multimissile_ballista , ar_double_machine_gun , ar_double_machine_gun ] [ difficulty ] ;
1488: LD_ADDR_EXP 33
1492: PUSH
1493: LD_INT 22
1495: PUSH
1496: LD_INT 24
1498: PUSH
1499: LD_INT 24
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: LIST
1506: PUSH
1507: LD_OWVAR 67
1511: ARRAY
1512: ST_TO_ADDR
// arm5_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
1513: LD_ADDR_EXP 34
1517: PUSH
1518: LD_INT 5
1520: PUSH
1521: LD_INT 7
1523: PUSH
1524: LD_INT 9
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: LIST
1531: PUSH
1532: LD_OWVAR 67
1536: ARRAY
1537: ST_TO_ADDR
// arv6_ch = [ ar_medium_trike , ar_medium_trike , ar_half_tracked ] [ difficulty ] ;
1538: LD_ADDR_EXP 35
1542: PUSH
1543: LD_INT 13
1545: PUSH
1546: LD_INT 13
1548: PUSH
1549: LD_INT 14
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: LIST
1556: PUSH
1557: LD_OWVAR 67
1561: ARRAY
1562: ST_TO_ADDR
// arv6_wp = [ ar_double_machine_gun , ar_gatling_gun , ar_gatling_gun ] [ difficulty ] ;
1563: LD_ADDR_EXP 36
1567: PUSH
1568: LD_INT 24
1570: PUSH
1571: LD_INT 25
1573: PUSH
1574: LD_INT 25
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: LIST
1581: PUSH
1582: LD_OWVAR 67
1586: ARRAY
1587: ST_TO_ADDR
// arm6_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
1588: LD_ADDR_EXP 37
1592: PUSH
1593: LD_INT 4
1595: PUSH
1596: LD_INT 6
1598: PUSH
1599: LD_INT 8
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: LIST
1606: PUSH
1607: LD_OWVAR 67
1611: ARRAY
1612: ST_TO_ADDR
// arv7_ch = [ 0 , ar_medium_trike , ar_medium_trike ] [ difficulty ] ;
1613: LD_ADDR_EXP 38
1617: PUSH
1618: LD_INT 0
1620: PUSH
1621: LD_INT 13
1623: PUSH
1624: LD_INT 13
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: PUSH
1632: LD_OWVAR 67
1636: ARRAY
1637: ST_TO_ADDR
// arv7_wp = [ 0 , ar_rocket_launcher , ar_rocket_launcher ] [ difficulty ] ;
1638: LD_ADDR_EXP 39
1642: PUSH
1643: LD_INT 0
1645: PUSH
1646: LD_INT 28
1648: PUSH
1649: LD_INT 28
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PUSH
1657: LD_OWVAR 67
1661: ARRAY
1662: ST_TO_ADDR
// arv8_ch = [ 0 , ar_medium_trike , ar_half_tracked ] [ difficulty ] ;
1663: LD_ADDR_EXP 40
1667: PUSH
1668: LD_INT 0
1670: PUSH
1671: LD_INT 13
1673: PUSH
1674: LD_INT 14
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: LIST
1681: PUSH
1682: LD_OWVAR 67
1686: ARRAY
1687: ST_TO_ADDR
// arv8_wp = [ 0 , ar_gun , ar_gun ] [ difficulty ] ;
1688: LD_ADDR_EXP 41
1692: PUSH
1693: LD_INT 0
1695: PUSH
1696: LD_INT 27
1698: PUSH
1699: LD_INT 27
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: PUSH
1707: LD_OWVAR 67
1711: ARRAY
1712: ST_TO_ADDR
// arv9_ch = ar_half_tracked ;
1713: LD_ADDR_EXP 42
1717: PUSH
1718: LD_INT 14
1720: ST_TO_ADDR
// arv9_wp = ar_flame_thrower ;
1721: LD_ADDR_EXP 43
1725: PUSH
1726: LD_INT 26
1728: ST_TO_ADDR
// arv10_ch = ar_medium_trike ;
1729: LD_ADDR_EXP 44
1733: PUSH
1734: LD_INT 13
1736: ST_TO_ADDR
// arv10_wp = ar_flame_thrower ;
1737: LD_ADDR_EXP 45
1741: PUSH
1742: LD_INT 26
1744: ST_TO_ADDR
// setblevel ( [ arbunk0 , arbunk1 , arbunk2 , arbunk3 , arbunk4 , arbunk5 ] , [ 5 , 7 , 9 ] [ difficulty ] ) ;
1745: LD_INT 14
1747: PUSH
1748: LD_INT 15
1750: PUSH
1751: LD_INT 13
1753: PUSH
1754: LD_INT 16
1756: PUSH
1757: LD_INT 17
1759: PUSH
1760: LD_INT 18
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: PPUSH
1771: LD_INT 5
1773: PUSH
1774: LD_INT 7
1776: PUSH
1777: LD_INT 9
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: LIST
1784: PUSH
1785: LD_OWVAR 67
1789: ARRAY
1790: PPUSH
1791: CALL_OW 241
// setblevel ( [ arbarr ] , [ 4 , 6 , 8 ] [ difficulty ] ) ;
1795: LD_INT 2
1797: PUSH
1798: EMPTY
1799: LIST
1800: PPUSH
1801: LD_INT 4
1803: PUSH
1804: LD_INT 6
1806: PUSH
1807: LD_INT 8
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: LIST
1814: PUSH
1815: LD_OWVAR 67
1819: ARRAY
1820: PPUSH
1821: CALL_OW 241
// end ;
1825: LD_VAR 0 1
1829: RET
// export lb1 ; starting begin lb1 = false ;
1830: LD_ADDR_EXP 81
1834: PUSH
1835: LD_INT 0
1837: ST_TO_ADDR
// koncime = false ;
1838: LD_ADDR_EXP 77
1842: PUSH
1843: LD_INT 0
1845: ST_TO_ADDR
// set_vars ;
1846: CALL 0 0 0
// cper = cperiode ;
1850: LD_ADDR_LOC 1
1854: PUSH
1855: LD_LOC 2
1859: ST_TO_ADDR
// delay = time2wait ;
1860: LD_ADDR_EXP 74
1864: PUSH
1865: LD_EXP 73
1869: ST_TO_ADDR
// disable ( 01 ) ;
1870: LD_INT 1
1872: DISABLE_MARKED
// disable ( 02 ) ;
1873: LD_INT 2
1875: DISABLE_MARKED
// disable ( 05 ) ;
1876: LD_INT 5
1878: DISABLE_MARKED
// disable ( 07 ) ;
1879: LD_INT 7
1881: DISABLE_MARKED
// disable ( 09 ) ;
1882: LD_INT 9
1884: DISABLE_MARKED
// disable ( 10 ) ;
1885: LD_INT 10
1887: DISABLE_MARKED
// disable ( 15 ) ;
1888: LD_INT 15
1890: DISABLE_MARKED
// disable ( 37 ) ;
1891: LD_INT 37
1893: DISABLE_MARKED
// revealfogarea ( al , revfog ) ;
1894: LD_EXP 1
1898: PPUSH
1899: LD_INT 7
1901: PPUSH
1902: CALL_OW 332
// prepare_arabians ;
1906: CALL 10271 0 0
// prepare_russians ;
1910: CALL 2071 0 0
// end ;
1914: END
// var cper , cperiode , supplies ; every 0 0$15 + 0 0$45 do
1915: GO 1917
1917: DISABLE
// begin cper = cper - 0 0$15 ;
1918: LD_ADDR_LOC 1
1922: PUSH
1923: LD_LOC 1
1927: PUSH
1928: LD_INT 525
1930: MINUS
1931: ST_TO_ADDR
// if cper = 0 then
1932: LD_LOC 1
1936: PUSH
1937: LD_INT 0
1939: EQUAL
1940: IFFALSE 1992
// begin createcratesarea ( 5 , dropzone , true ) ;
1942: LD_INT 5
1944: PPUSH
1945: LD_INT 1
1947: PPUSH
1948: LD_INT 1
1950: PPUSH
1951: CALL_OW 55
// if ( supplies > 1 ) then
1955: LD_LOC 3
1959: PUSH
1960: LD_INT 1
1962: GREATER
1963: IFFALSE 1980
// begin supplies = supplies - 1 ;
1965: LD_ADDR_LOC 3
1969: PUSH
1970: LD_LOC 3
1974: PUSH
1975: LD_INT 1
1977: MINUS
1978: ST_TO_ADDR
// enable ;
1979: ENABLE
// end ; cper = cperiode ;
1980: LD_ADDR_LOC 1
1984: PUSH
1985: LD_LOC 2
1989: ST_TO_ADDR
// end else
1990: GO 1993
// enable ;
1992: ENABLE
// end ;
1993: END
// every 0 0$7 do
1994: GO 1996
1996: DISABLE
// begin randomize ;
1997: CALL_OW 10
// enable ;
2001: ENABLE
// end ;
2002: END
// every 0 0$20 do
2003: GO 2005
2005: DISABLE
// createcratesarea ( 5 , stred , true ) ;
2006: LD_INT 5
2008: PPUSH
2009: LD_INT 2
2011: PPUSH
2012: LD_INT 1
2014: PPUSH
2015: CALL_OW 55
2019: END
// every 0 0$30 do
2020: GO 2022
2022: DISABLE
// createcratesarea ( 5 , stred , true ) ;
2023: LD_INT 5
2025: PPUSH
2026: LD_INT 2
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: CALL_OW 55
2036: END
// every 0 0$45 do
2037: GO 2039
2039: DISABLE
// createcratesarea ( 5 , stred , true ) ;
2040: LD_INT 5
2042: PPUSH
2043: LD_INT 2
2045: PPUSH
2046: LD_INT 1
2048: PPUSH
2049: CALL_OW 55
2053: END
// every 0 0$55 do
2054: GO 2056
2056: DISABLE
// createcratesarea ( 5 , stred , true ) ; end_of_file
2057: LD_INT 5
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: LD_INT 1
2065: PPUSH
2066: CALL_OW 55
2070: END
// export vyjednavalo_se ; export burlak , belkov , gnyevko , kiril , kovalyuk , scholtze , kuzmov , karam , petrov , gleb , petros , lipshchin , titov , dolgov , xavier , oblukov , kozlov , kapitsova , gossud ; export vip , jahoda ; var vedci , zbytekze12 , vedciost , jahodatyp , plidi ; export function prepare_russians ; var old_al , old_al2 , tmp , tmp1 ; begin
2071: LD_INT 0
2073: PPUSH
2074: PPUSH
2075: PPUSH
2076: PPUSH
2077: PPUSH
// old_al = 1 ;
2078: LD_ADDR_VAR 0 2
2082: PUSH
2083: LD_INT 1
2085: ST_TO_ADDR
// old_al2 = 2 ;
2086: LD_ADDR_VAR 0 3
2090: PUSH
2091: LD_INT 2
2093: ST_TO_ADDR
// uc_side = al ;
2094: LD_ADDR_OWVAR 20
2098: PUSH
2099: LD_EXP 1
2103: ST_TO_ADDR
// burlak = 0 ;
2104: LD_ADDR_EXP 83
2108: PUSH
2109: LD_INT 0
2111: ST_TO_ADDR
// if checkcharacterset ( Burlak ) then
2112: LD_STRING Burlak
2114: PPUSH
2115: CALL_OW 29
2119: IFFALSE 2139
// burlak = createcharacterwithclass ( Burlak , class_engineer ) else
2121: LD_ADDR_EXP 83
2125: PUSH
2126: LD_STRING Burlak
2128: PPUSH
2129: LD_INT 2
2131: PPUSH
2132: CALL_OW 35
2136: ST_TO_ADDR
2137: GO 2152
// buildquery ( neny Burlak , [ OK ] ) ;
2139: LD_STRING neny Burlak
2141: PPUSH
2142: LD_STRING OK
2144: PUSH
2145: EMPTY
2146: LIST
2147: PPUSH
2148: CALL_OW 99
// tmp = LoadVariable ( Masha , 0 ) ;
2152: LD_ADDR_VAR 0 4
2156: PUSH
2157: LD_STRING Masha
2159: PPUSH
2160: LD_INT 0
2162: PPUSH
2163: CALL_OW 30
2167: ST_TO_ADDR
// if tmp then
2168: LD_VAR 0 4
2172: IFFALSE 2297
// begin uc_nation = nation_russian ;
2174: LD_ADDR_OWVAR 21
2178: PUSH
2179: LD_INT 3
2181: ST_TO_ADDR
// vc_chassis = tmp [ 1 ] ;
2182: LD_ADDR_OWVAR 37
2186: PUSH
2187: LD_VAR 0 4
2191: PUSH
2192: LD_INT 1
2194: ARRAY
2195: ST_TO_ADDR
// vc_engine = tmp [ 2 ] ;
2196: LD_ADDR_OWVAR 39
2200: PUSH
2201: LD_VAR 0 4
2205: PUSH
2206: LD_INT 2
2208: ARRAY
2209: ST_TO_ADDR
// vc_control = tmp [ 3 ] ;
2210: LD_ADDR_OWVAR 38
2214: PUSH
2215: LD_VAR 0 4
2219: PUSH
2220: LD_INT 3
2222: ARRAY
2223: ST_TO_ADDR
// vc_weapon = tmp [ 4 ] ;
2224: LD_ADDR_OWVAR 40
2228: PUSH
2229: LD_VAR 0 4
2233: PUSH
2234: LD_INT 4
2236: ARRAY
2237: ST_TO_ADDR
// Masha = CreateVehicle ;
2238: LD_ADDR_EXP 80
2242: PUSH
2243: CALL_OW 45
2247: ST_TO_ADDR
// SetMark ( Masha , 1 ) ;
2248: LD_EXP 80
2252: PPUSH
2253: LD_INT 1
2255: PPUSH
2256: CALL_OW 242
// PlaceHumanInUnit ( burlak , Masha ) ;
2260: LD_EXP 83
2264: PPUSH
2265: LD_EXP 80
2269: PPUSH
2270: CALL_OW 52
// PlaceUnitXYR ( Masha , 61 , 77 , 3 , false ) ;
2274: LD_EXP 80
2278: PPUSH
2279: LD_INT 61
2281: PPUSH
2282: LD_INT 77
2284: PPUSH
2285: LD_INT 3
2287: PPUSH
2288: LD_INT 0
2290: PPUSH
2291: CALL_OW 50
// end else
2295: GO 2318
// placeunitxyr ( burlak , 61 , 77 , 3 , false ) ;
2297: LD_EXP 83
2301: PPUSH
2302: LD_INT 61
2304: PPUSH
2305: LD_INT 77
2307: PPUSH
2308: LD_INT 3
2310: PPUSH
2311: LD_INT 0
2313: PPUSH
2314: CALL_OW 50
// vedci = [ ] ;
2318: LD_ADDR_LOC 4
2322: PUSH
2323: EMPTY
2324: ST_TO_ADDR
// jahoda = 0 ;
2325: LD_ADDR_EXP 103
2329: PUSH
2330: LD_INT 0
2332: ST_TO_ADDR
// jahodatyp = 0 ;
2333: LD_ADDR_LOC 7
2337: PUSH
2338: LD_INT 0
2340: ST_TO_ADDR
// belkov = 0 ;
2341: LD_ADDR_EXP 84
2345: PUSH
2346: LD_INT 0
2348: ST_TO_ADDR
// if testcharacters ( Belkov ) then
2349: LD_STRING Belkov
2351: PPUSH
2352: CALL_OW 28
2356: IFFALSE 2612
// if checkcharacterset ( Belkov ) then
2358: LD_STRING Belkov
2360: PPUSH
2361: CALL_OW 29
2365: IFFALSE 2610
// begin if testvariable ( belkov_side ) then
2367: LD_STRING belkov_side
2369: PPUSH
2370: CALL_OW 27
2374: IFFALSE 2395
// tmp = loadvariable ( belkov_side , - 1 ) else
2376: LD_ADDR_VAR 0 4
2380: PUSH
2381: LD_STRING belkov_side
2383: PPUSH
2384: LD_INT 1
2386: NEG
2387: PPUSH
2388: CALL_OW 30
2392: ST_TO_ADDR
2393: GO 2408
// buildquery ( neny belkov_side , [ OK ] ) ;
2395: LD_STRING neny belkov_side
2397: PPUSH
2398: LD_STRING OK
2400: PUSH
2401: EMPTY
2402: LIST
2403: PPUSH
2404: CALL_OW 99
// case tmp of old_al :
2408: LD_VAR 0 4
2412: PUSH
2413: LD_VAR 0 2
2417: DOUBLE
2418: EQUAL
2419: IFTRUE 2423
2421: GO 2487
2423: POP
// begin belkov = createcharacter ( Belkov ) ;
2424: LD_ADDR_EXP 84
2428: PUSH
2429: LD_STRING Belkov
2431: PPUSH
2432: CALL_OW 34
2436: ST_TO_ADDR
// if getclass ( belkov ) = class_bazooker then
2437: LD_EXP 84
2441: PPUSH
2442: CALL_OW 257
2446: PUSH
2447: LD_INT 9
2449: EQUAL
2450: IFFALSE 2464
// setclass ( belkov , class_soldier ) ;
2452: LD_EXP 84
2456: PPUSH
2457: LD_INT 1
2459: PPUSH
2460: CALL_OW 336
// placeunitxyr ( belkov , 61 , 77 , 3 , false ) ;
2464: LD_EXP 84
2468: PPUSH
2469: LD_INT 61
2471: PPUSH
2472: LD_INT 77
2474: PPUSH
2475: LD_INT 3
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL_OW 50
// end ; old_al2 :
2485: GO 2608
2487: LD_VAR 0 3
2491: DOUBLE
2492: EQUAL
2493: IFTRUE 2497
2495: GO 2559
2497: POP
// begin belkov = createcharacter ( Belkov ) ;
2498: LD_ADDR_EXP 84
2502: PUSH
2503: LD_STRING Belkov
2505: PPUSH
2506: CALL_OW 34
2510: ST_TO_ADDR
// if getclass ( belkov ) = class_bazooker then
2511: LD_EXP 84
2515: PPUSH
2516: CALL_OW 257
2520: PUSH
2521: LD_INT 9
2523: EQUAL
2524: IFFALSE 2538
// setclass ( belkov , class_soldier ) ;
2526: LD_EXP 84
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: CALL_OW 336
// vedci = vedci ^ [ belkov ] ;
2538: LD_ADDR_LOC 4
2542: PUSH
2543: LD_LOC 4
2547: PUSH
2548: LD_EXP 84
2552: PUSH
2553: EMPTY
2554: LIST
2555: ADD
2556: ST_TO_ADDR
// end ; else
2557: GO 2608
2559: POP
// begin jahoda = createcharacter ( Belkov ) ;
2560: LD_ADDR_EXP 103
2564: PUSH
2565: LD_STRING Belkov
2567: PPUSH
2568: CALL_OW 34
2572: ST_TO_ADDR
// if getclass ( jahoda ) = class_bazooker then
2573: LD_EXP 103
2577: PPUSH
2578: CALL_OW 257
2582: PUSH
2583: LD_INT 9
2585: EQUAL
2586: IFFALSE 2600
// setclass ( jahoda , class_soldier ) ;
2588: LD_EXP 103
2592: PPUSH
2593: LD_INT 1
2595: PPUSH
2596: CALL_OW 336
// jahodatyp = 1 ;
2600: LD_ADDR_LOC 7
2604: PUSH
2605: LD_INT 1
2607: ST_TO_ADDR
// end ; end ; end else
2608: GO 2610
// else
2610: GO 2619
// msg ( neny Belkov ) ;
2612: LD_STRING neny Belkov
2614: PPUSH
2615: CALL_OW 100
// gnyevko = 0 ;
2619: LD_ADDR_EXP 85
2623: PUSH
2624: LD_INT 0
2626: ST_TO_ADDR
// if testcharacters ( Gnyevko ) then
2627: LD_STRING Gnyevko
2629: PPUSH
2630: CALL_OW 28
2634: IFFALSE 2897
// if checkcharacterset ( Gnyevko ) then
2636: LD_STRING Gnyevko
2638: PPUSH
2639: CALL_OW 29
2643: IFFALSE 2895
// begin if testvariable ( gnyevko_side ) then
2645: LD_STRING gnyevko_side
2647: PPUSH
2648: CALL_OW 27
2652: IFFALSE 2673
// tmp = loadvariable ( gnyevko_side , - 1 ) else
2654: LD_ADDR_VAR 0 4
2658: PUSH
2659: LD_STRING gnyevko_side
2661: PPUSH
2662: LD_INT 1
2664: NEG
2665: PPUSH
2666: CALL_OW 30
2670: ST_TO_ADDR
2671: GO 2686
// buildquery ( neny gnyevko_side , [ OK ] ) ;
2673: LD_STRING neny gnyevko_side
2675: PPUSH
2676: LD_STRING OK
2678: PUSH
2679: EMPTY
2680: LIST
2681: PPUSH
2682: CALL_OW 99
// case tmp of old_al :
2686: LD_VAR 0 4
2690: PUSH
2691: LD_VAR 0 2
2695: DOUBLE
2696: EQUAL
2697: IFTRUE 2701
2699: GO 2765
2701: POP
// begin gnyevko = createcharacter ( Gnyevko ) ;
2702: LD_ADDR_EXP 85
2706: PUSH
2707: LD_STRING Gnyevko
2709: PPUSH
2710: CALL_OW 34
2714: ST_TO_ADDR
// if getclass ( gnyevko ) = class_bazooker then
2715: LD_EXP 85
2719: PPUSH
2720: CALL_OW 257
2724: PUSH
2725: LD_INT 9
2727: EQUAL
2728: IFFALSE 2742
// setclass ( gnyevko , class_soldier ) ;
2730: LD_EXP 85
2734: PPUSH
2735: LD_INT 1
2737: PPUSH
2738: CALL_OW 336
// placeunitxyr ( gnyevko , 61 , 77 , 3 , false ) ;
2742: LD_EXP 85
2746: PPUSH
2747: LD_INT 61
2749: PPUSH
2750: LD_INT 77
2752: PPUSH
2753: LD_INT 3
2755: PPUSH
2756: LD_INT 0
2758: PPUSH
2759: CALL_OW 50
// end ; old_al2 :
2763: GO 2893
2765: LD_VAR 0 3
2769: DOUBLE
2770: EQUAL
2771: IFTRUE 2775
2773: GO 2837
2775: POP
// begin gnyevko = createcharacter ( Gnyevko ) ;
2776: LD_ADDR_EXP 85
2780: PUSH
2781: LD_STRING Gnyevko
2783: PPUSH
2784: CALL_OW 34
2788: ST_TO_ADDR
// if getclass ( gnyevko ) = class_bazooker then
2789: LD_EXP 85
2793: PPUSH
2794: CALL_OW 257
2798: PUSH
2799: LD_INT 9
2801: EQUAL
2802: IFFALSE 2816
// setclass ( gnyevko , class_soldier ) ;
2804: LD_EXP 85
2808: PPUSH
2809: LD_INT 1
2811: PPUSH
2812: CALL_OW 336
// vedci = vedci ^ [ gnyevko ] ;
2816: LD_ADDR_LOC 4
2820: PUSH
2821: LD_LOC 4
2825: PUSH
2826: LD_EXP 85
2830: PUSH
2831: EMPTY
2832: LIST
2833: ADD
2834: ST_TO_ADDR
// end ; else
2835: GO 2893
2837: POP
// if not jahoda then
2838: LD_EXP 103
2842: NOT
2843: IFFALSE 2893
// begin jahoda = createcharacter ( Gnyevko ) ;
2845: LD_ADDR_EXP 103
2849: PUSH
2850: LD_STRING Gnyevko
2852: PPUSH
2853: CALL_OW 34
2857: ST_TO_ADDR
// if getclass ( jahoda ) = class_bazooker then
2858: LD_EXP 103
2862: PPUSH
2863: CALL_OW 257
2867: PUSH
2868: LD_INT 9
2870: EQUAL
2871: IFFALSE 2885
// setclass ( jahoda , class_soldier ) ;
2873: LD_EXP 103
2877: PPUSH
2878: LD_INT 1
2880: PPUSH
2881: CALL_OW 336
// jahodatyp = 2 ;
2885: LD_ADDR_LOC 7
2889: PUSH
2890: LD_INT 2
2892: ST_TO_ADDR
// end ; end ; end else
2893: GO 2895
// else
2895: GO 2904
// msg ( neny Gnyevko ) ;
2897: LD_STRING neny Gnyevko
2899: PPUSH
2900: CALL_OW 100
// kiril = 0 ;
2904: LD_ADDR_EXP 86
2908: PUSH
2909: LD_INT 0
2911: ST_TO_ADDR
// if testcharacters ( Kirilenkova ) then
2912: LD_STRING Kirilenkova
2914: PPUSH
2915: CALL_OW 28
2919: IFFALSE 3127
// if checkcharacterset ( Kirilenkova ) then
2921: LD_STRING Kirilenkova
2923: PPUSH
2924: CALL_OW 29
2928: IFFALSE 3125
// begin if testvariable ( kiril_side ) then
2930: LD_STRING kiril_side
2932: PPUSH
2933: CALL_OW 27
2937: IFFALSE 2958
// tmp = loadvariable ( kiril_side , - 1 ) else
2939: LD_ADDR_VAR 0 4
2943: PUSH
2944: LD_STRING kiril_side
2946: PPUSH
2947: LD_INT 1
2949: NEG
2950: PPUSH
2951: CALL_OW 30
2955: ST_TO_ADDR
2956: GO 2971
// buildquery ( neny kiril_side , [ OK ] ) ;
2958: LD_STRING neny kiril_side
2960: PPUSH
2961: LD_STRING OK
2963: PUSH
2964: EMPTY
2965: LIST
2966: PPUSH
2967: CALL_OW 99
// case tmp of old_al :
2971: LD_VAR 0 4
2975: PUSH
2976: LD_VAR 0 2
2980: DOUBLE
2981: EQUAL
2982: IFTRUE 2986
2984: GO 3050
2986: POP
// begin kiril = createcharacter ( Kirilenkova ) ;
2987: LD_ADDR_EXP 86
2991: PUSH
2992: LD_STRING Kirilenkova
2994: PPUSH
2995: CALL_OW 34
2999: ST_TO_ADDR
// if getclass ( kiril ) = class_bazooker then
3000: LD_EXP 86
3004: PPUSH
3005: CALL_OW 257
3009: PUSH
3010: LD_INT 9
3012: EQUAL
3013: IFFALSE 3027
// setclass ( kiril , class_soldier ) ;
3015: LD_EXP 86
3019: PPUSH
3020: LD_INT 1
3022: PPUSH
3023: CALL_OW 336
// placeunitxyr ( kiril , 61 , 77 , 3 , false ) ;
3027: LD_EXP 86
3031: PPUSH
3032: LD_INT 61
3034: PPUSH
3035: LD_INT 77
3037: PPUSH
3038: LD_INT 3
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 50
// end ; old_al2 :
3048: GO 3123
3050: LD_VAR 0 3
3054: DOUBLE
3055: EQUAL
3056: IFTRUE 3060
3058: GO 3122
3060: POP
// begin kiril = createcharacter ( Kirilenkova ) ;
3061: LD_ADDR_EXP 86
3065: PUSH
3066: LD_STRING Kirilenkova
3068: PPUSH
3069: CALL_OW 34
3073: ST_TO_ADDR
// if getclass ( kiril ) = class_bazooker then
3074: LD_EXP 86
3078: PPUSH
3079: CALL_OW 257
3083: PUSH
3084: LD_INT 9
3086: EQUAL
3087: IFFALSE 3101
// setclass ( kiril , class_soldier ) ;
3089: LD_EXP 86
3093: PPUSH
3094: LD_INT 1
3096: PPUSH
3097: CALL_OW 336
// vedci = vedci ^ [ kiril ] ;
3101: LD_ADDR_LOC 4
3105: PUSH
3106: LD_LOC 4
3110: PUSH
3111: LD_EXP 86
3115: PUSH
3116: EMPTY
3117: LIST
3118: ADD
3119: ST_TO_ADDR
// end ; end ;
3120: GO 3123
3122: POP
// end else
3123: GO 3125
// else
3125: GO 3134
// msg ( neny Kirilenkova ) ;
3127: LD_STRING neny Kirilenkova
3129: PPUSH
3130: CALL_OW 100
// kovalyuk = 0 ;
3134: LD_ADDR_EXP 87
3138: PUSH
3139: LD_INT 0
3141: ST_TO_ADDR
// if testcharacters ( Kovalyuk ) then
3142: LD_STRING Kovalyuk
3144: PPUSH
3145: CALL_OW 28
3149: IFFALSE 3357
// if checkcharacterset ( Kovalyuk ) then
3151: LD_STRING Kovalyuk
3153: PPUSH
3154: CALL_OW 29
3158: IFFALSE 3355
// begin if testvariable ( kovalyuk_side ) then
3160: LD_STRING kovalyuk_side
3162: PPUSH
3163: CALL_OW 27
3167: IFFALSE 3188
// tmp = loadvariable ( kovalyuk_side , - 1 ) else
3169: LD_ADDR_VAR 0 4
3173: PUSH
3174: LD_STRING kovalyuk_side
3176: PPUSH
3177: LD_INT 1
3179: NEG
3180: PPUSH
3181: CALL_OW 30
3185: ST_TO_ADDR
3186: GO 3201
// buildquery ( neny kovalyuk_side , [ OK ] ) ;
3188: LD_STRING neny kovalyuk_side
3190: PPUSH
3191: LD_STRING OK
3193: PUSH
3194: EMPTY
3195: LIST
3196: PPUSH
3197: CALL_OW 99
// case tmp of old_al :
3201: LD_VAR 0 4
3205: PUSH
3206: LD_VAR 0 2
3210: DOUBLE
3211: EQUAL
3212: IFTRUE 3216
3214: GO 3280
3216: POP
// begin kovalyuk = createcharacter ( Kovalyuk ) ;
3217: LD_ADDR_EXP 87
3221: PUSH
3222: LD_STRING Kovalyuk
3224: PPUSH
3225: CALL_OW 34
3229: ST_TO_ADDR
// if getclass ( kovalyuk ) = class_bazooker then
3230: LD_EXP 87
3234: PPUSH
3235: CALL_OW 257
3239: PUSH
3240: LD_INT 9
3242: EQUAL
3243: IFFALSE 3257
// setclass ( kovalyuk , class_soldier ) ;
3245: LD_EXP 87
3249: PPUSH
3250: LD_INT 1
3252: PPUSH
3253: CALL_OW 336
// placeunitxyr ( kovalyuk , 61 , 77 , 3 , false ) ;
3257: LD_EXP 87
3261: PPUSH
3262: LD_INT 61
3264: PPUSH
3265: LD_INT 77
3267: PPUSH
3268: LD_INT 3
3270: PPUSH
3271: LD_INT 0
3273: PPUSH
3274: CALL_OW 50
// end ; old_al2 :
3278: GO 3353
3280: LD_VAR 0 3
3284: DOUBLE
3285: EQUAL
3286: IFTRUE 3290
3288: GO 3352
3290: POP
// begin kovalyuk = createcharacter ( Kovalyuk ) ;
3291: LD_ADDR_EXP 87
3295: PUSH
3296: LD_STRING Kovalyuk
3298: PPUSH
3299: CALL_OW 34
3303: ST_TO_ADDR
// if getclass ( kovalyuk ) = class_bazooker then
3304: LD_EXP 87
3308: PPUSH
3309: CALL_OW 257
3313: PUSH
3314: LD_INT 9
3316: EQUAL
3317: IFFALSE 3331
// setclass ( kovalyuk , class_soldier ) ;
3319: LD_EXP 87
3323: PPUSH
3324: LD_INT 1
3326: PPUSH
3327: CALL_OW 336
// vedci = vedci ^ [ kovalyuk ] ;
3331: LD_ADDR_LOC 4
3335: PUSH
3336: LD_LOC 4
3340: PUSH
3341: LD_EXP 87
3345: PUSH
3346: EMPTY
3347: LIST
3348: ADD
3349: ST_TO_ADDR
// end ; end ;
3350: GO 3353
3352: POP
// end else
3353: GO 3355
// else
3355: GO 3364
// msg ( neny Kovalyuk ) ;
3357: LD_STRING neny Kovalyuk
3359: PPUSH
3360: CALL_OW 100
// scholtze = 0 ;
3364: LD_ADDR_EXP 88
3368: PUSH
3369: LD_INT 0
3371: ST_TO_ADDR
// if testcharacters ( Scholtze ) then
3372: LD_STRING Scholtze
3374: PPUSH
3375: CALL_OW 28
3379: IFFALSE 3587
// if checkcharacterset ( Scholtze ) then
3381: LD_STRING Scholtze
3383: PPUSH
3384: CALL_OW 29
3388: IFFALSE 3585
// begin if testvariable ( scholtze_side ) then
3390: LD_STRING scholtze_side
3392: PPUSH
3393: CALL_OW 27
3397: IFFALSE 3418
// tmp = loadvariable ( scholtze_side , - 1 ) else
3399: LD_ADDR_VAR 0 4
3403: PUSH
3404: LD_STRING scholtze_side
3406: PPUSH
3407: LD_INT 1
3409: NEG
3410: PPUSH
3411: CALL_OW 30
3415: ST_TO_ADDR
3416: GO 3431
// buildquery ( neny scholtze_side , [ OK ] ) ;
3418: LD_STRING neny scholtze_side
3420: PPUSH
3421: LD_STRING OK
3423: PUSH
3424: EMPTY
3425: LIST
3426: PPUSH
3427: CALL_OW 99
// case tmp of old_al :
3431: LD_VAR 0 4
3435: PUSH
3436: LD_VAR 0 2
3440: DOUBLE
3441: EQUAL
3442: IFTRUE 3446
3444: GO 3510
3446: POP
// begin scholtze = createcharacter ( Scholtze ) ;
3447: LD_ADDR_EXP 88
3451: PUSH
3452: LD_STRING Scholtze
3454: PPUSH
3455: CALL_OW 34
3459: ST_TO_ADDR
// if getclass ( scholtze ) = class_bazooker then
3460: LD_EXP 88
3464: PPUSH
3465: CALL_OW 257
3469: PUSH
3470: LD_INT 9
3472: EQUAL
3473: IFFALSE 3487
// setclass ( scholtze , class_soldier ) ;
3475: LD_EXP 88
3479: PPUSH
3480: LD_INT 1
3482: PPUSH
3483: CALL_OW 336
// placeunitxyr ( scholtze , 61 , 77 , 3 , false ) ;
3487: LD_EXP 88
3491: PPUSH
3492: LD_INT 61
3494: PPUSH
3495: LD_INT 77
3497: PPUSH
3498: LD_INT 3
3500: PPUSH
3501: LD_INT 0
3503: PPUSH
3504: CALL_OW 50
// end ; old_al2 :
3508: GO 3583
3510: LD_VAR 0 3
3514: DOUBLE
3515: EQUAL
3516: IFTRUE 3520
3518: GO 3582
3520: POP
// begin scholtze = createcharacter ( Scholtze ) ;
3521: LD_ADDR_EXP 88
3525: PUSH
3526: LD_STRING Scholtze
3528: PPUSH
3529: CALL_OW 34
3533: ST_TO_ADDR
// if getclass ( scholtze ) = class_bazooker then
3534: LD_EXP 88
3538: PPUSH
3539: CALL_OW 257
3543: PUSH
3544: LD_INT 9
3546: EQUAL
3547: IFFALSE 3561
// setclass ( scholtze , class_soldier ) ;
3549: LD_EXP 88
3553: PPUSH
3554: LD_INT 1
3556: PPUSH
3557: CALL_OW 336
// vedci = vedci ^ [ scholtze ] ;
3561: LD_ADDR_LOC 4
3565: PUSH
3566: LD_LOC 4
3570: PUSH
3571: LD_EXP 88
3575: PUSH
3576: EMPTY
3577: LIST
3578: ADD
3579: ST_TO_ADDR
// end ; end ;
3580: GO 3583
3582: POP
// end else
3583: GO 3585
// else
3585: GO 3594
// msg ( neny Scholtze ) ;
3587: LD_STRING neny Scholtze
3589: PPUSH
3590: CALL_OW 100
// kuzmov = 0 ;
3594: LD_ADDR_EXP 89
3598: PUSH
3599: LD_INT 0
3601: ST_TO_ADDR
// if testcharacters ( Kuzmov ) then
3602: LD_STRING Kuzmov
3604: PPUSH
3605: CALL_OW 28
3609: IFFALSE 3817
// if checkcharacterset ( Kuzmov ) then
3611: LD_STRING Kuzmov
3613: PPUSH
3614: CALL_OW 29
3618: IFFALSE 3815
// begin if testvariable ( kuzmov_side ) then
3620: LD_STRING kuzmov_side
3622: PPUSH
3623: CALL_OW 27
3627: IFFALSE 3648
// tmp = loadvariable ( kuzmov_side , - 1 ) else
3629: LD_ADDR_VAR 0 4
3633: PUSH
3634: LD_STRING kuzmov_side
3636: PPUSH
3637: LD_INT 1
3639: NEG
3640: PPUSH
3641: CALL_OW 30
3645: ST_TO_ADDR
3646: GO 3661
// buildquery ( neny kuzmov_side , [ OK ] ) ;
3648: LD_STRING neny kuzmov_side
3650: PPUSH
3651: LD_STRING OK
3653: PUSH
3654: EMPTY
3655: LIST
3656: PPUSH
3657: CALL_OW 99
// case tmp of old_al :
3661: LD_VAR 0 4
3665: PUSH
3666: LD_VAR 0 2
3670: DOUBLE
3671: EQUAL
3672: IFTRUE 3676
3674: GO 3740
3676: POP
// begin kuzmov = createcharacter ( Kuzmov ) ;
3677: LD_ADDR_EXP 89
3681: PUSH
3682: LD_STRING Kuzmov
3684: PPUSH
3685: CALL_OW 34
3689: ST_TO_ADDR
// if getclass ( kuzmov ) = class_bazooker then
3690: LD_EXP 89
3694: PPUSH
3695: CALL_OW 257
3699: PUSH
3700: LD_INT 9
3702: EQUAL
3703: IFFALSE 3717
// setclass ( kuzmov , class_soldier ) ;
3705: LD_EXP 89
3709: PPUSH
3710: LD_INT 1
3712: PPUSH
3713: CALL_OW 336
// placeunitxyr ( kuzmov , 61 , 77 , 3 , false ) ;
3717: LD_EXP 89
3721: PPUSH
3722: LD_INT 61
3724: PPUSH
3725: LD_INT 77
3727: PPUSH
3728: LD_INT 3
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 50
// end ; old_al2 :
3738: GO 3813
3740: LD_VAR 0 3
3744: DOUBLE
3745: EQUAL
3746: IFTRUE 3750
3748: GO 3812
3750: POP
// begin kuzmov = createcharacter ( Kuzmov ) ;
3751: LD_ADDR_EXP 89
3755: PUSH
3756: LD_STRING Kuzmov
3758: PPUSH
3759: CALL_OW 34
3763: ST_TO_ADDR
// if getclass ( kuzmov ) = class_bazooker then
3764: LD_EXP 89
3768: PPUSH
3769: CALL_OW 257
3773: PUSH
3774: LD_INT 9
3776: EQUAL
3777: IFFALSE 3791
// setclass ( kuzmov , class_soldier ) ;
3779: LD_EXP 89
3783: PPUSH
3784: LD_INT 1
3786: PPUSH
3787: CALL_OW 336
// vedci = vedci ^ [ kuzmov ] ;
3791: LD_ADDR_LOC 4
3795: PUSH
3796: LD_LOC 4
3800: PUSH
3801: LD_EXP 89
3805: PUSH
3806: EMPTY
3807: LIST
3808: ADD
3809: ST_TO_ADDR
// end ; end ;
3810: GO 3813
3812: POP
// end else
3813: GO 3815
// else
3815: GO 3824
// msg ( neny Kuzmov ) ;
3817: LD_STRING neny Kuzmov
3819: PPUSH
3820: CALL_OW 100
// karam = 0 ;
3824: LD_ADDR_EXP 90
3828: PUSH
3829: LD_INT 0
3831: ST_TO_ADDR
// if testcharacters ( Karamazov ) then
3832: LD_STRING Karamazov
3834: PPUSH
3835: CALL_OW 28
3839: IFFALSE 4047
// if checkcharacterset ( Karamazov ) then
3841: LD_STRING Karamazov
3843: PPUSH
3844: CALL_OW 29
3848: IFFALSE 4045
// begin if testvariable ( karam_side ) then
3850: LD_STRING karam_side
3852: PPUSH
3853: CALL_OW 27
3857: IFFALSE 3878
// tmp = loadvariable ( karam_side , - 1 ) else
3859: LD_ADDR_VAR 0 4
3863: PUSH
3864: LD_STRING karam_side
3866: PPUSH
3867: LD_INT 1
3869: NEG
3870: PPUSH
3871: CALL_OW 30
3875: ST_TO_ADDR
3876: GO 3891
// buildquery ( neny karam_side , [ OK ] ) ;
3878: LD_STRING neny karam_side
3880: PPUSH
3881: LD_STRING OK
3883: PUSH
3884: EMPTY
3885: LIST
3886: PPUSH
3887: CALL_OW 99
// case tmp of old_al :
3891: LD_VAR 0 4
3895: PUSH
3896: LD_VAR 0 2
3900: DOUBLE
3901: EQUAL
3902: IFTRUE 3906
3904: GO 3970
3906: POP
// begin karam = createcharacter ( Karamazov ) ;
3907: LD_ADDR_EXP 90
3911: PUSH
3912: LD_STRING Karamazov
3914: PPUSH
3915: CALL_OW 34
3919: ST_TO_ADDR
// if getclass ( karam ) = class_bazooker then
3920: LD_EXP 90
3924: PPUSH
3925: CALL_OW 257
3929: PUSH
3930: LD_INT 9
3932: EQUAL
3933: IFFALSE 3947
// setclass ( karam , class_soldier ) ;
3935: LD_EXP 90
3939: PPUSH
3940: LD_INT 1
3942: PPUSH
3943: CALL_OW 336
// placeunitxyr ( karam , 61 , 77 , 3 , false ) ;
3947: LD_EXP 90
3951: PPUSH
3952: LD_INT 61
3954: PPUSH
3955: LD_INT 77
3957: PPUSH
3958: LD_INT 3
3960: PPUSH
3961: LD_INT 0
3963: PPUSH
3964: CALL_OW 50
// end ; old_al2 :
3968: GO 4043
3970: LD_VAR 0 3
3974: DOUBLE
3975: EQUAL
3976: IFTRUE 3980
3978: GO 4042
3980: POP
// begin karam = createcharacter ( Karamazov ) ;
3981: LD_ADDR_EXP 90
3985: PUSH
3986: LD_STRING Karamazov
3988: PPUSH
3989: CALL_OW 34
3993: ST_TO_ADDR
// if getclass ( karam ) = class_bazooker then
3994: LD_EXP 90
3998: PPUSH
3999: CALL_OW 257
4003: PUSH
4004: LD_INT 9
4006: EQUAL
4007: IFFALSE 4021
// setclass ( karam , class_soldier ) ;
4009: LD_EXP 90
4013: PPUSH
4014: LD_INT 1
4016: PPUSH
4017: CALL_OW 336
// vedci = vedci ^ [ karam ] ;
4021: LD_ADDR_LOC 4
4025: PUSH
4026: LD_LOC 4
4030: PUSH
4031: LD_EXP 90
4035: PUSH
4036: EMPTY
4037: LIST
4038: ADD
4039: ST_TO_ADDR
// end ; end ;
4040: GO 4043
4042: POP
// end else
4043: GO 4045
// else
4045: GO 4054
// msg ( neny Karamazov ) ;
4047: LD_STRING neny Karamazov
4049: PPUSH
4050: CALL_OW 100
// petrov = 0 ;
4054: LD_ADDR_EXP 91
4058: PUSH
4059: LD_INT 0
4061: ST_TO_ADDR
// if testcharacters ( Petrovova ) then
4062: LD_STRING Petrovova
4064: PPUSH
4065: CALL_OW 28
4069: IFFALSE 4277
// if checkcharacterset ( Petrovova ) then
4071: LD_STRING Petrovova
4073: PPUSH
4074: CALL_OW 29
4078: IFFALSE 4275
// begin if testvariable ( petrov_side ) then
4080: LD_STRING petrov_side
4082: PPUSH
4083: CALL_OW 27
4087: IFFALSE 4108
// tmp = loadvariable ( petrov_side , - 1 ) else
4089: LD_ADDR_VAR 0 4
4093: PUSH
4094: LD_STRING petrov_side
4096: PPUSH
4097: LD_INT 1
4099: NEG
4100: PPUSH
4101: CALL_OW 30
4105: ST_TO_ADDR
4106: GO 4121
// buildquery ( neny petrov_side , [ OK ] ) ;
4108: LD_STRING neny petrov_side
4110: PPUSH
4111: LD_STRING OK
4113: PUSH
4114: EMPTY
4115: LIST
4116: PPUSH
4117: CALL_OW 99
// case tmp of old_al :
4121: LD_VAR 0 4
4125: PUSH
4126: LD_VAR 0 2
4130: DOUBLE
4131: EQUAL
4132: IFTRUE 4136
4134: GO 4200
4136: POP
// begin petrov = createcharacter ( Petrovova ) ;
4137: LD_ADDR_EXP 91
4141: PUSH
4142: LD_STRING Petrovova
4144: PPUSH
4145: CALL_OW 34
4149: ST_TO_ADDR
// if getclass ( petrov ) = class_bazooker then
4150: LD_EXP 91
4154: PPUSH
4155: CALL_OW 257
4159: PUSH
4160: LD_INT 9
4162: EQUAL
4163: IFFALSE 4177
// setclass ( petrov , class_soldier ) ;
4165: LD_EXP 91
4169: PPUSH
4170: LD_INT 1
4172: PPUSH
4173: CALL_OW 336
// placeunitxyr ( petrov , 61 , 77 , 3 , false ) ;
4177: LD_EXP 91
4181: PPUSH
4182: LD_INT 61
4184: PPUSH
4185: LD_INT 77
4187: PPUSH
4188: LD_INT 3
4190: PPUSH
4191: LD_INT 0
4193: PPUSH
4194: CALL_OW 50
// end ; old_al2 :
4198: GO 4273
4200: LD_VAR 0 3
4204: DOUBLE
4205: EQUAL
4206: IFTRUE 4210
4208: GO 4272
4210: POP
// begin petrov = createcharacter ( Petrovova ) ;
4211: LD_ADDR_EXP 91
4215: PUSH
4216: LD_STRING Petrovova
4218: PPUSH
4219: CALL_OW 34
4223: ST_TO_ADDR
// if getclass ( petrov ) = class_bazooker then
4224: LD_EXP 91
4228: PPUSH
4229: CALL_OW 257
4233: PUSH
4234: LD_INT 9
4236: EQUAL
4237: IFFALSE 4251
// setclass ( petrov , class_soldier ) ;
4239: LD_EXP 91
4243: PPUSH
4244: LD_INT 1
4246: PPUSH
4247: CALL_OW 336
// vedci = vedci ^ [ petrov ] ;
4251: LD_ADDR_LOC 4
4255: PUSH
4256: LD_LOC 4
4260: PUSH
4261: LD_EXP 91
4265: PUSH
4266: EMPTY
4267: LIST
4268: ADD
4269: ST_TO_ADDR
// end ; end ;
4270: GO 4273
4272: POP
// end else
4273: GO 4275
// else
4275: GO 4284
// msg ( neny Petrovova ) ;
4277: LD_STRING neny Petrovova
4279: PPUSH
4280: CALL_OW 100
// gleb = 0 ;
4284: LD_ADDR_EXP 92
4288: PUSH
4289: LD_INT 0
4291: ST_TO_ADDR
// if testcharacters ( Gleb ) then
4292: LD_STRING Gleb
4294: PPUSH
4295: CALL_OW 28
4299: IFFALSE 4507
// if checkcharacterset ( Gleb ) then
4301: LD_STRING Gleb
4303: PPUSH
4304: CALL_OW 29
4308: IFFALSE 4505
// begin if testvariable ( gleb_side ) then
4310: LD_STRING gleb_side
4312: PPUSH
4313: CALL_OW 27
4317: IFFALSE 4338
// tmp = loadvariable ( gleb_side , - 1 ) else
4319: LD_ADDR_VAR 0 4
4323: PUSH
4324: LD_STRING gleb_side
4326: PPUSH
4327: LD_INT 1
4329: NEG
4330: PPUSH
4331: CALL_OW 30
4335: ST_TO_ADDR
4336: GO 4351
// buildquery ( neny gleb_side , [ OK ] ) ;
4338: LD_STRING neny gleb_side
4340: PPUSH
4341: LD_STRING OK
4343: PUSH
4344: EMPTY
4345: LIST
4346: PPUSH
4347: CALL_OW 99
// case tmp of old_al :
4351: LD_VAR 0 4
4355: PUSH
4356: LD_VAR 0 2
4360: DOUBLE
4361: EQUAL
4362: IFTRUE 4366
4364: GO 4430
4366: POP
// begin gleb = createcharacter ( Gleb ) ;
4367: LD_ADDR_EXP 92
4371: PUSH
4372: LD_STRING Gleb
4374: PPUSH
4375: CALL_OW 34
4379: ST_TO_ADDR
// if getclass ( gleb ) = class_bazooker then
4380: LD_EXP 92
4384: PPUSH
4385: CALL_OW 257
4389: PUSH
4390: LD_INT 9
4392: EQUAL
4393: IFFALSE 4407
// setclass ( gleb , class_soldier ) ;
4395: LD_EXP 92
4399: PPUSH
4400: LD_INT 1
4402: PPUSH
4403: CALL_OW 336
// placeunitxyr ( gleb , 61 , 77 , 3 , false ) ;
4407: LD_EXP 92
4411: PPUSH
4412: LD_INT 61
4414: PPUSH
4415: LD_INT 77
4417: PPUSH
4418: LD_INT 3
4420: PPUSH
4421: LD_INT 0
4423: PPUSH
4424: CALL_OW 50
// end ; old_al2 :
4428: GO 4503
4430: LD_VAR 0 3
4434: DOUBLE
4435: EQUAL
4436: IFTRUE 4440
4438: GO 4502
4440: POP
// begin gleb = createcharacter ( Gleb ) ;
4441: LD_ADDR_EXP 92
4445: PUSH
4446: LD_STRING Gleb
4448: PPUSH
4449: CALL_OW 34
4453: ST_TO_ADDR
// if getclass ( gleb ) = class_bazooker then
4454: LD_EXP 92
4458: PPUSH
4459: CALL_OW 257
4463: PUSH
4464: LD_INT 9
4466: EQUAL
4467: IFFALSE 4481
// setclass ( gleb , class_soldier ) ;
4469: LD_EXP 92
4473: PPUSH
4474: LD_INT 1
4476: PPUSH
4477: CALL_OW 336
// vedci = vedci ^ [ gleb ] ;
4481: LD_ADDR_LOC 4
4485: PUSH
4486: LD_LOC 4
4490: PUSH
4491: LD_EXP 92
4495: PUSH
4496: EMPTY
4497: LIST
4498: ADD
4499: ST_TO_ADDR
// end ; end ;
4500: GO 4503
4502: POP
// end else
4503: GO 4505
// else
4505: GO 4514
// msg ( neny Gleb ) ;
4507: LD_STRING neny Gleb
4509: PPUSH
4510: CALL_OW 100
// petros = 0 ;
4514: LD_ADDR_EXP 93
4518: PUSH
4519: LD_INT 0
4521: ST_TO_ADDR
// if testcharacters ( Petrosyan ) then
4522: LD_STRING Petrosyan
4524: PPUSH
4525: CALL_OW 28
4529: IFFALSE 4737
// if checkcharacterset ( Petrosyan ) then
4531: LD_STRING Petrosyan
4533: PPUSH
4534: CALL_OW 29
4538: IFFALSE 4735
// begin if testvariable ( petros_side ) then
4540: LD_STRING petros_side
4542: PPUSH
4543: CALL_OW 27
4547: IFFALSE 4568
// tmp = loadvariable ( petros_side , - 1 ) else
4549: LD_ADDR_VAR 0 4
4553: PUSH
4554: LD_STRING petros_side
4556: PPUSH
4557: LD_INT 1
4559: NEG
4560: PPUSH
4561: CALL_OW 30
4565: ST_TO_ADDR
4566: GO 4581
// buildquery ( neny petros_side , [ OK ] ) ;
4568: LD_STRING neny petros_side
4570: PPUSH
4571: LD_STRING OK
4573: PUSH
4574: EMPTY
4575: LIST
4576: PPUSH
4577: CALL_OW 99
// case tmp of old_al :
4581: LD_VAR 0 4
4585: PUSH
4586: LD_VAR 0 2
4590: DOUBLE
4591: EQUAL
4592: IFTRUE 4596
4594: GO 4660
4596: POP
// begin petros = createcharacter ( Petrosyan ) ;
4597: LD_ADDR_EXP 93
4601: PUSH
4602: LD_STRING Petrosyan
4604: PPUSH
4605: CALL_OW 34
4609: ST_TO_ADDR
// if getclass ( petros ) = class_bazooker then
4610: LD_EXP 93
4614: PPUSH
4615: CALL_OW 257
4619: PUSH
4620: LD_INT 9
4622: EQUAL
4623: IFFALSE 4637
// setclass ( petros , class_soldier ) ;
4625: LD_EXP 93
4629: PPUSH
4630: LD_INT 1
4632: PPUSH
4633: CALL_OW 336
// placeunitxyr ( petros , 61 , 77 , 3 , false ) ;
4637: LD_EXP 93
4641: PPUSH
4642: LD_INT 61
4644: PPUSH
4645: LD_INT 77
4647: PPUSH
4648: LD_INT 3
4650: PPUSH
4651: LD_INT 0
4653: PPUSH
4654: CALL_OW 50
// end ; old_al2 :
4658: GO 4733
4660: LD_VAR 0 3
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4732
4670: POP
// begin petros = createcharacter ( Petrosyan ) ;
4671: LD_ADDR_EXP 93
4675: PUSH
4676: LD_STRING Petrosyan
4678: PPUSH
4679: CALL_OW 34
4683: ST_TO_ADDR
// if getclass ( petros ) = class_bazooker then
4684: LD_EXP 93
4688: PPUSH
4689: CALL_OW 257
4693: PUSH
4694: LD_INT 9
4696: EQUAL
4697: IFFALSE 4711
// setclass ( petros , class_soldier ) ;
4699: LD_EXP 93
4703: PPUSH
4704: LD_INT 1
4706: PPUSH
4707: CALL_OW 336
// vedci = vedci ^ [ petros ] ;
4711: LD_ADDR_LOC 4
4715: PUSH
4716: LD_LOC 4
4720: PUSH
4721: LD_EXP 93
4725: PUSH
4726: EMPTY
4727: LIST
4728: ADD
4729: ST_TO_ADDR
// end ; end ;
4730: GO 4733
4732: POP
// end else
4733: GO 4735
// else
4735: GO 4744
// msg ( neny Petrosyan ) ;
4737: LD_STRING neny Petrosyan
4739: PPUSH
4740: CALL_OW 100
// lipshchin = 0 ;
4744: LD_ADDR_EXP 94
4748: PUSH
4749: LD_INT 0
4751: ST_TO_ADDR
// if testcharacters ( Lipshchin ) then
4752: LD_STRING Lipshchin
4754: PPUSH
4755: CALL_OW 28
4759: IFFALSE 4967
// if checkcharacterset ( Lipshchin ) then
4761: LD_STRING Lipshchin
4763: PPUSH
4764: CALL_OW 29
4768: IFFALSE 4965
// begin if testvariable ( lipshchin_side ) then
4770: LD_STRING lipshchin_side
4772: PPUSH
4773: CALL_OW 27
4777: IFFALSE 4798
// tmp = loadvariable ( lipshchin_side , - 1 ) else
4779: LD_ADDR_VAR 0 4
4783: PUSH
4784: LD_STRING lipshchin_side
4786: PPUSH
4787: LD_INT 1
4789: NEG
4790: PPUSH
4791: CALL_OW 30
4795: ST_TO_ADDR
4796: GO 4811
// buildquery ( neny lipshchin_side , [ OK ] ) ;
4798: LD_STRING neny lipshchin_side
4800: PPUSH
4801: LD_STRING OK
4803: PUSH
4804: EMPTY
4805: LIST
4806: PPUSH
4807: CALL_OW 99
// case tmp of old_al :
4811: LD_VAR 0 4
4815: PUSH
4816: LD_VAR 0 2
4820: DOUBLE
4821: EQUAL
4822: IFTRUE 4826
4824: GO 4890
4826: POP
// begin lipshchin = createcharacter ( Lipshchin ) ;
4827: LD_ADDR_EXP 94
4831: PUSH
4832: LD_STRING Lipshchin
4834: PPUSH
4835: CALL_OW 34
4839: ST_TO_ADDR
// if getclass ( lipshchin ) = class_bazooker then
4840: LD_EXP 94
4844: PPUSH
4845: CALL_OW 257
4849: PUSH
4850: LD_INT 9
4852: EQUAL
4853: IFFALSE 4867
// setclass ( lipshchin , class_soldier ) ;
4855: LD_EXP 94
4859: PPUSH
4860: LD_INT 1
4862: PPUSH
4863: CALL_OW 336
// placeunitxyr ( lipshchin , 61 , 77 , 3 , false ) ;
4867: LD_EXP 94
4871: PPUSH
4872: LD_INT 61
4874: PPUSH
4875: LD_INT 77
4877: PPUSH
4878: LD_INT 3
4880: PPUSH
4881: LD_INT 0
4883: PPUSH
4884: CALL_OW 50
// end ; old_al2 :
4888: GO 4963
4890: LD_VAR 0 3
4894: DOUBLE
4895: EQUAL
4896: IFTRUE 4900
4898: GO 4962
4900: POP
// begin lipshchin = createcharacter ( Lipshchin ) ;
4901: LD_ADDR_EXP 94
4905: PUSH
4906: LD_STRING Lipshchin
4908: PPUSH
4909: CALL_OW 34
4913: ST_TO_ADDR
// if getclass ( lipshchin ) = class_bazooker then
4914: LD_EXP 94
4918: PPUSH
4919: CALL_OW 257
4923: PUSH
4924: LD_INT 9
4926: EQUAL
4927: IFFALSE 4941
// setclass ( lipshchin , class_soldier ) ;
4929: LD_EXP 94
4933: PPUSH
4934: LD_INT 1
4936: PPUSH
4937: CALL_OW 336
// vedci = vedci ^ [ lipshchin ] ;
4941: LD_ADDR_LOC 4
4945: PUSH
4946: LD_LOC 4
4950: PUSH
4951: LD_EXP 94
4955: PUSH
4956: EMPTY
4957: LIST
4958: ADD
4959: ST_TO_ADDR
// end ; end ;
4960: GO 4963
4962: POP
// end else
4963: GO 4965
// else
4965: GO 4974
// msg ( neny Lipshchin ) ;
4967: LD_STRING neny Lipshchin
4969: PPUSH
4970: CALL_OW 100
// titov = 0 ;
4974: LD_ADDR_EXP 95
4978: PUSH
4979: LD_INT 0
4981: ST_TO_ADDR
// if testcharacters ( Titov ) then
4982: LD_STRING Titov
4984: PPUSH
4985: CALL_OW 28
4989: IFFALSE 5197
// if checkcharacterset ( Titov ) then
4991: LD_STRING Titov
4993: PPUSH
4994: CALL_OW 29
4998: IFFALSE 5195
// begin if testvariable ( titov_side ) then
5000: LD_STRING titov_side
5002: PPUSH
5003: CALL_OW 27
5007: IFFALSE 5028
// tmp = loadvariable ( titov_side , - 1 ) else
5009: LD_ADDR_VAR 0 4
5013: PUSH
5014: LD_STRING titov_side
5016: PPUSH
5017: LD_INT 1
5019: NEG
5020: PPUSH
5021: CALL_OW 30
5025: ST_TO_ADDR
5026: GO 5041
// buildquery ( neny titov_side , [ OK ] ) ;
5028: LD_STRING neny titov_side
5030: PPUSH
5031: LD_STRING OK
5033: PUSH
5034: EMPTY
5035: LIST
5036: PPUSH
5037: CALL_OW 99
// case tmp of old_al :
5041: LD_VAR 0 4
5045: PUSH
5046: LD_VAR 0 2
5050: DOUBLE
5051: EQUAL
5052: IFTRUE 5056
5054: GO 5120
5056: POP
// begin titov = createcharacter ( Titov ) ;
5057: LD_ADDR_EXP 95
5061: PUSH
5062: LD_STRING Titov
5064: PPUSH
5065: CALL_OW 34
5069: ST_TO_ADDR
// if getclass ( titov ) = class_bazooker then
5070: LD_EXP 95
5074: PPUSH
5075: CALL_OW 257
5079: PUSH
5080: LD_INT 9
5082: EQUAL
5083: IFFALSE 5097
// setclass ( titov , class_soldier ) ;
5085: LD_EXP 95
5089: PPUSH
5090: LD_INT 1
5092: PPUSH
5093: CALL_OW 336
// placeunitxyr ( titov , 61 , 77 , 3 , false ) ;
5097: LD_EXP 95
5101: PPUSH
5102: LD_INT 61
5104: PPUSH
5105: LD_INT 77
5107: PPUSH
5108: LD_INT 3
5110: PPUSH
5111: LD_INT 0
5113: PPUSH
5114: CALL_OW 50
// end ; old_al2 :
5118: GO 5193
5120: LD_VAR 0 3
5124: DOUBLE
5125: EQUAL
5126: IFTRUE 5130
5128: GO 5192
5130: POP
// begin titov = createcharacter ( Titov ) ;
5131: LD_ADDR_EXP 95
5135: PUSH
5136: LD_STRING Titov
5138: PPUSH
5139: CALL_OW 34
5143: ST_TO_ADDR
// if getclass ( titov ) = class_bazooker then
5144: LD_EXP 95
5148: PPUSH
5149: CALL_OW 257
5153: PUSH
5154: LD_INT 9
5156: EQUAL
5157: IFFALSE 5171
// setclass ( titov , class_soldier ) ;
5159: LD_EXP 95
5163: PPUSH
5164: LD_INT 1
5166: PPUSH
5167: CALL_OW 336
// vedci = vedci ^ [ titov ] ;
5171: LD_ADDR_LOC 4
5175: PUSH
5176: LD_LOC 4
5180: PUSH
5181: LD_EXP 95
5185: PUSH
5186: EMPTY
5187: LIST
5188: ADD
5189: ST_TO_ADDR
// end ; end ;
5190: GO 5193
5192: POP
// end else
5193: GO 5195
// else
5195: GO 5204
// msg ( neny Titov ) ;
5197: LD_STRING neny Titov
5199: PPUSH
5200: CALL_OW 100
// dolgov = 0 ;
5204: LD_ADDR_EXP 96
5208: PUSH
5209: LD_INT 0
5211: ST_TO_ADDR
// if testcharacters ( Dolgov ) then
5212: LD_STRING Dolgov
5214: PPUSH
5215: CALL_OW 28
5219: IFFALSE 5427
// if checkcharacterset ( Dolgov ) then
5221: LD_STRING Dolgov
5223: PPUSH
5224: CALL_OW 29
5228: IFFALSE 5425
// begin if testvariable ( dolgov_side ) then
5230: LD_STRING dolgov_side
5232: PPUSH
5233: CALL_OW 27
5237: IFFALSE 5258
// tmp = loadvariable ( dolgov_side , - 1 ) else
5239: LD_ADDR_VAR 0 4
5243: PUSH
5244: LD_STRING dolgov_side
5246: PPUSH
5247: LD_INT 1
5249: NEG
5250: PPUSH
5251: CALL_OW 30
5255: ST_TO_ADDR
5256: GO 5271
// buildquery ( neny dolgov_side , [ OK ] ) ;
5258: LD_STRING neny dolgov_side
5260: PPUSH
5261: LD_STRING OK
5263: PUSH
5264: EMPTY
5265: LIST
5266: PPUSH
5267: CALL_OW 99
// case tmp of old_al :
5271: LD_VAR 0 4
5275: PUSH
5276: LD_VAR 0 2
5280: DOUBLE
5281: EQUAL
5282: IFTRUE 5286
5284: GO 5350
5286: POP
// begin dolgov = createcharacter ( Dolgov ) ;
5287: LD_ADDR_EXP 96
5291: PUSH
5292: LD_STRING Dolgov
5294: PPUSH
5295: CALL_OW 34
5299: ST_TO_ADDR
// if getclass ( dolgov ) = class_bazooker then
5300: LD_EXP 96
5304: PPUSH
5305: CALL_OW 257
5309: PUSH
5310: LD_INT 9
5312: EQUAL
5313: IFFALSE 5327
// setclass ( dolgov , class_soldier ) ;
5315: LD_EXP 96
5319: PPUSH
5320: LD_INT 1
5322: PPUSH
5323: CALL_OW 336
// placeunitxyr ( dolgov , 61 , 77 , 3 , false ) ;
5327: LD_EXP 96
5331: PPUSH
5332: LD_INT 61
5334: PPUSH
5335: LD_INT 77
5337: PPUSH
5338: LD_INT 3
5340: PPUSH
5341: LD_INT 0
5343: PPUSH
5344: CALL_OW 50
// end ; old_al2 :
5348: GO 5423
5350: LD_VAR 0 3
5354: DOUBLE
5355: EQUAL
5356: IFTRUE 5360
5358: GO 5422
5360: POP
// begin dolgov = createcharacter ( Dolgov ) ;
5361: LD_ADDR_EXP 96
5365: PUSH
5366: LD_STRING Dolgov
5368: PPUSH
5369: CALL_OW 34
5373: ST_TO_ADDR
// if getclass ( dolgov ) = class_bazooker then
5374: LD_EXP 96
5378: PPUSH
5379: CALL_OW 257
5383: PUSH
5384: LD_INT 9
5386: EQUAL
5387: IFFALSE 5401
// setclass ( dolgov , class_soldier ) ;
5389: LD_EXP 96
5393: PPUSH
5394: LD_INT 1
5396: PPUSH
5397: CALL_OW 336
// vedci = vedci ^ [ dolgov ] ;
5401: LD_ADDR_LOC 4
5405: PUSH
5406: LD_LOC 4
5410: PUSH
5411: LD_EXP 96
5415: PUSH
5416: EMPTY
5417: LIST
5418: ADD
5419: ST_TO_ADDR
// end ; end ;
5420: GO 5423
5422: POP
// end else
5423: GO 5425
// else
5425: GO 5434
// msg ( neny Dolgov ) ;
5427: LD_STRING neny Dolgov
5429: PPUSH
5430: CALL_OW 100
// xavier = 0 ;
5434: LD_ADDR_EXP 97
5438: PUSH
5439: LD_INT 0
5441: ST_TO_ADDR
// if testcharacters ( Xavier ) then
5442: LD_STRING Xavier
5444: PPUSH
5445: CALL_OW 28
5449: IFFALSE 5657
// if checkcharacterset ( Xavier ) then
5451: LD_STRING Xavier
5453: PPUSH
5454: CALL_OW 29
5458: IFFALSE 5655
// begin if testvariable ( xavier_side ) then
5460: LD_STRING xavier_side
5462: PPUSH
5463: CALL_OW 27
5467: IFFALSE 5488
// tmp = loadvariable ( xavier_side , - 1 ) else
5469: LD_ADDR_VAR 0 4
5473: PUSH
5474: LD_STRING xavier_side
5476: PPUSH
5477: LD_INT 1
5479: NEG
5480: PPUSH
5481: CALL_OW 30
5485: ST_TO_ADDR
5486: GO 5501
// buildquery ( neny xavier_side , [ OK ] ) ;
5488: LD_STRING neny xavier_side
5490: PPUSH
5491: LD_STRING OK
5493: PUSH
5494: EMPTY
5495: LIST
5496: PPUSH
5497: CALL_OW 99
// case tmp of old_al :
5501: LD_VAR 0 4
5505: PUSH
5506: LD_VAR 0 2
5510: DOUBLE
5511: EQUAL
5512: IFTRUE 5516
5514: GO 5580
5516: POP
// begin xavier = createcharacter ( Xavier ) ;
5517: LD_ADDR_EXP 97
5521: PUSH
5522: LD_STRING Xavier
5524: PPUSH
5525: CALL_OW 34
5529: ST_TO_ADDR
// if getclass ( xavier ) = class_bazooker then
5530: LD_EXP 97
5534: PPUSH
5535: CALL_OW 257
5539: PUSH
5540: LD_INT 9
5542: EQUAL
5543: IFFALSE 5557
// setclass ( xavier , class_soldier ) ;
5545: LD_EXP 97
5549: PPUSH
5550: LD_INT 1
5552: PPUSH
5553: CALL_OW 336
// placeunitxyr ( xavier , 61 , 77 , 3 , false ) ;
5557: LD_EXP 97
5561: PPUSH
5562: LD_INT 61
5564: PPUSH
5565: LD_INT 77
5567: PPUSH
5568: LD_INT 3
5570: PPUSH
5571: LD_INT 0
5573: PPUSH
5574: CALL_OW 50
// end ; old_al2 :
5578: GO 5653
5580: LD_VAR 0 3
5584: DOUBLE
5585: EQUAL
5586: IFTRUE 5590
5588: GO 5652
5590: POP
// begin xavier = createcharacter ( Xavier ) ;
5591: LD_ADDR_EXP 97
5595: PUSH
5596: LD_STRING Xavier
5598: PPUSH
5599: CALL_OW 34
5603: ST_TO_ADDR
// if getclass ( xavier ) = class_bazooker then
5604: LD_EXP 97
5608: PPUSH
5609: CALL_OW 257
5613: PUSH
5614: LD_INT 9
5616: EQUAL
5617: IFFALSE 5631
// setclass ( xavier , class_soldier ) ;
5619: LD_EXP 97
5623: PPUSH
5624: LD_INT 1
5626: PPUSH
5627: CALL_OW 336
// vedci = vedci ^ [ xavier ] ;
5631: LD_ADDR_LOC 4
5635: PUSH
5636: LD_LOC 4
5640: PUSH
5641: LD_EXP 97
5645: PUSH
5646: EMPTY
5647: LIST
5648: ADD
5649: ST_TO_ADDR
// end ; end ;
5650: GO 5653
5652: POP
// end else
5653: GO 5655
// else
5655: GO 5664
// msg ( neny Xavier ) ;
5657: LD_STRING neny Xavier
5659: PPUSH
5660: CALL_OW 100
// oblukov = 0 ;
5664: LD_ADDR_EXP 98
5668: PUSH
5669: LD_INT 0
5671: ST_TO_ADDR
// if testcharacters ( Oblukov ) then
5672: LD_STRING Oblukov
5674: PPUSH
5675: CALL_OW 28
5679: IFFALSE 5887
// if checkcharacterset ( Oblukov ) then
5681: LD_STRING Oblukov
5683: PPUSH
5684: CALL_OW 29
5688: IFFALSE 5885
// begin if testvariable ( oblukov_side ) then
5690: LD_STRING oblukov_side
5692: PPUSH
5693: CALL_OW 27
5697: IFFALSE 5718
// tmp = loadvariable ( oblukov_side , - 1 ) else
5699: LD_ADDR_VAR 0 4
5703: PUSH
5704: LD_STRING oblukov_side
5706: PPUSH
5707: LD_INT 1
5709: NEG
5710: PPUSH
5711: CALL_OW 30
5715: ST_TO_ADDR
5716: GO 5731
// buildquery ( neny oblukov_side , [ OK ] ) ;
5718: LD_STRING neny oblukov_side
5720: PPUSH
5721: LD_STRING OK
5723: PUSH
5724: EMPTY
5725: LIST
5726: PPUSH
5727: CALL_OW 99
// case tmp of old_al :
5731: LD_VAR 0 4
5735: PUSH
5736: LD_VAR 0 2
5740: DOUBLE
5741: EQUAL
5742: IFTRUE 5746
5744: GO 5810
5746: POP
// begin oblukov = createcharacter ( Oblukov ) ;
5747: LD_ADDR_EXP 98
5751: PUSH
5752: LD_STRING Oblukov
5754: PPUSH
5755: CALL_OW 34
5759: ST_TO_ADDR
// if getclass ( oblukov ) = class_bazooker then
5760: LD_EXP 98
5764: PPUSH
5765: CALL_OW 257
5769: PUSH
5770: LD_INT 9
5772: EQUAL
5773: IFFALSE 5787
// setclass ( oblukov , class_soldier ) ;
5775: LD_EXP 98
5779: PPUSH
5780: LD_INT 1
5782: PPUSH
5783: CALL_OW 336
// placeunitxyr ( oblukov , 61 , 77 , 3 , false ) ;
5787: LD_EXP 98
5791: PPUSH
5792: LD_INT 61
5794: PPUSH
5795: LD_INT 77
5797: PPUSH
5798: LD_INT 3
5800: PPUSH
5801: LD_INT 0
5803: PPUSH
5804: CALL_OW 50
// end ; old_al2 :
5808: GO 5883
5810: LD_VAR 0 3
5814: DOUBLE
5815: EQUAL
5816: IFTRUE 5820
5818: GO 5882
5820: POP
// begin oblukov = createcharacter ( Oblukov ) ;
5821: LD_ADDR_EXP 98
5825: PUSH
5826: LD_STRING Oblukov
5828: PPUSH
5829: CALL_OW 34
5833: ST_TO_ADDR
// if getclass ( oblukov ) = class_bazooker then
5834: LD_EXP 98
5838: PPUSH
5839: CALL_OW 257
5843: PUSH
5844: LD_INT 9
5846: EQUAL
5847: IFFALSE 5861
// setclass ( oblukov , class_soldier ) ;
5849: LD_EXP 98
5853: PPUSH
5854: LD_INT 1
5856: PPUSH
5857: CALL_OW 336
// vedci = vedci ^ [ oblukov ] ;
5861: LD_ADDR_LOC 4
5865: PUSH
5866: LD_LOC 4
5870: PUSH
5871: LD_EXP 98
5875: PUSH
5876: EMPTY
5877: LIST
5878: ADD
5879: ST_TO_ADDR
// end ; end ;
5880: GO 5883
5882: POP
// end else
5883: GO 5885
// else
5885: GO 5894
// msg ( neny Oblukov ) ;
5887: LD_STRING neny Oblukov
5889: PPUSH
5890: CALL_OW 100
// kozlov = 0 ;
5894: LD_ADDR_EXP 99
5898: PUSH
5899: LD_INT 0
5901: ST_TO_ADDR
// if testcharacters ( Kozlov ) then
5902: LD_STRING Kozlov
5904: PPUSH
5905: CALL_OW 28
5909: IFFALSE 6117
// if checkcharacterset ( Kozlov ) then
5911: LD_STRING Kozlov
5913: PPUSH
5914: CALL_OW 29
5918: IFFALSE 6115
// begin if testvariable ( kozlov_side ) then
5920: LD_STRING kozlov_side
5922: PPUSH
5923: CALL_OW 27
5927: IFFALSE 5948
// tmp = loadvariable ( kozlov_side , - 1 ) else
5929: LD_ADDR_VAR 0 4
5933: PUSH
5934: LD_STRING kozlov_side
5936: PPUSH
5937: LD_INT 1
5939: NEG
5940: PPUSH
5941: CALL_OW 30
5945: ST_TO_ADDR
5946: GO 5961
// buildquery ( neny kozlov_side , [ OK ] ) ;
5948: LD_STRING neny kozlov_side
5950: PPUSH
5951: LD_STRING OK
5953: PUSH
5954: EMPTY
5955: LIST
5956: PPUSH
5957: CALL_OW 99
// case tmp of old_al :
5961: LD_VAR 0 4
5965: PUSH
5966: LD_VAR 0 2
5970: DOUBLE
5971: EQUAL
5972: IFTRUE 5976
5974: GO 6040
5976: POP
// begin kozlov = createcharacter ( Kozlov ) ;
5977: LD_ADDR_EXP 99
5981: PUSH
5982: LD_STRING Kozlov
5984: PPUSH
5985: CALL_OW 34
5989: ST_TO_ADDR
// if getclass ( kozlov ) = class_bazooker then
5990: LD_EXP 99
5994: PPUSH
5995: CALL_OW 257
5999: PUSH
6000: LD_INT 9
6002: EQUAL
6003: IFFALSE 6017
// setclass ( kozlov , class_soldier ) ;
6005: LD_EXP 99
6009: PPUSH
6010: LD_INT 1
6012: PPUSH
6013: CALL_OW 336
// placeunitxyr ( kozlov , 61 , 77 , 3 , false ) ;
6017: LD_EXP 99
6021: PPUSH
6022: LD_INT 61
6024: PPUSH
6025: LD_INT 77
6027: PPUSH
6028: LD_INT 3
6030: PPUSH
6031: LD_INT 0
6033: PPUSH
6034: CALL_OW 50
// end ; old_al2 :
6038: GO 6113
6040: LD_VAR 0 3
6044: DOUBLE
6045: EQUAL
6046: IFTRUE 6050
6048: GO 6112
6050: POP
// begin kozlov = createcharacter ( Kozlov ) ;
6051: LD_ADDR_EXP 99
6055: PUSH
6056: LD_STRING Kozlov
6058: PPUSH
6059: CALL_OW 34
6063: ST_TO_ADDR
// if getclass ( kozlov ) = class_bazooker then
6064: LD_EXP 99
6068: PPUSH
6069: CALL_OW 257
6073: PUSH
6074: LD_INT 9
6076: EQUAL
6077: IFFALSE 6091
// setclass ( kozlov , class_soldier ) ;
6079: LD_EXP 99
6083: PPUSH
6084: LD_INT 1
6086: PPUSH
6087: CALL_OW 336
// vedci = vedci ^ [ kozlov ] ;
6091: LD_ADDR_LOC 4
6095: PUSH
6096: LD_LOC 4
6100: PUSH
6101: LD_EXP 99
6105: PUSH
6106: EMPTY
6107: LIST
6108: ADD
6109: ST_TO_ADDR
// end ; end ;
6110: GO 6113
6112: POP
// end else
6113: GO 6115
// else
6115: GO 6124
// msg ( neny Kozlov ) ;
6117: LD_STRING neny Kozlov
6119: PPUSH
6120: CALL_OW 100
// kapitsova = 0 ;
6124: LD_ADDR_EXP 100
6128: PUSH
6129: LD_INT 0
6131: ST_TO_ADDR
// if testcharacters ( Kapitsova ) then
6132: LD_STRING Kapitsova
6134: PPUSH
6135: CALL_OW 28
6139: IFFALSE 6347
// if checkcharacterset ( Kapitsova ) then
6141: LD_STRING Kapitsova
6143: PPUSH
6144: CALL_OW 29
6148: IFFALSE 6345
// begin if testvariable ( kapitsova_side ) then
6150: LD_STRING kapitsova_side
6152: PPUSH
6153: CALL_OW 27
6157: IFFALSE 6178
// tmp = loadvariable ( kapitsova_side , - 1 ) else
6159: LD_ADDR_VAR 0 4
6163: PUSH
6164: LD_STRING kapitsova_side
6166: PPUSH
6167: LD_INT 1
6169: NEG
6170: PPUSH
6171: CALL_OW 30
6175: ST_TO_ADDR
6176: GO 6191
// buildquery ( neny kapitsova_side , [ OK ] ) ;
6178: LD_STRING neny kapitsova_side
6180: PPUSH
6181: LD_STRING OK
6183: PUSH
6184: EMPTY
6185: LIST
6186: PPUSH
6187: CALL_OW 99
// case tmp of old_al :
6191: LD_VAR 0 4
6195: PUSH
6196: LD_VAR 0 2
6200: DOUBLE
6201: EQUAL
6202: IFTRUE 6206
6204: GO 6270
6206: POP
// begin kapitsova = createcharacter ( Kapitsova ) ;
6207: LD_ADDR_EXP 100
6211: PUSH
6212: LD_STRING Kapitsova
6214: PPUSH
6215: CALL_OW 34
6219: ST_TO_ADDR
// if getclass ( kapitsova ) = class_bazooker then
6220: LD_EXP 100
6224: PPUSH
6225: CALL_OW 257
6229: PUSH
6230: LD_INT 9
6232: EQUAL
6233: IFFALSE 6247
// setclass ( kapitsova , class_soldier ) ;
6235: LD_EXP 100
6239: PPUSH
6240: LD_INT 1
6242: PPUSH
6243: CALL_OW 336
// placeunitxyr ( kapitsova , 61 , 77 , 3 , false ) ;
6247: LD_EXP 100
6251: PPUSH
6252: LD_INT 61
6254: PPUSH
6255: LD_INT 77
6257: PPUSH
6258: LD_INT 3
6260: PPUSH
6261: LD_INT 0
6263: PPUSH
6264: CALL_OW 50
// end ; old_al2 :
6268: GO 6343
6270: LD_VAR 0 3
6274: DOUBLE
6275: EQUAL
6276: IFTRUE 6280
6278: GO 6342
6280: POP
// begin kapitsova = createcharacter ( Kapitsova ) ;
6281: LD_ADDR_EXP 100
6285: PUSH
6286: LD_STRING Kapitsova
6288: PPUSH
6289: CALL_OW 34
6293: ST_TO_ADDR
// if getclass ( kapitsova ) = class_bazooker then
6294: LD_EXP 100
6298: PPUSH
6299: CALL_OW 257
6303: PUSH
6304: LD_INT 9
6306: EQUAL
6307: IFFALSE 6321
// setclass ( kapitsova , class_soldier ) ;
6309: LD_EXP 100
6313: PPUSH
6314: LD_INT 1
6316: PPUSH
6317: CALL_OW 336
// vedci = vedci ^ [ kapitsova ] ;
6321: LD_ADDR_LOC 4
6325: PUSH
6326: LD_LOC 4
6330: PUSH
6331: LD_EXP 100
6335: PUSH
6336: EMPTY
6337: LIST
6338: ADD
6339: ST_TO_ADDR
// end ; end ;
6340: GO 6343
6342: POP
// end else
6343: GO 6345
// else
6345: GO 6354
// msg ( neny Kapitsova ) ;
6347: LD_STRING neny Kapitsova
6349: PPUSH
6350: CALL_OW 100
// gossud = 0 ;
6354: LD_ADDR_EXP 101
6358: PUSH
6359: LD_INT 0
6361: ST_TO_ADDR
// if testcharacters ( Gossudarov ) then
6362: LD_STRING Gossudarov
6364: PPUSH
6365: CALL_OW 28
6369: IFFALSE 6546
// if checkcharacterset ( Gossudarov ) then
6371: LD_STRING Gossudarov
6373: PPUSH
6374: CALL_OW 29
6378: IFFALSE 6544
// begin tmp = old_al2 ;
6380: LD_ADDR_VAR 0 4
6384: PUSH
6385: LD_VAR 0 3
6389: ST_TO_ADDR
// case tmp of old_al :
6390: LD_VAR 0 4
6394: PUSH
6395: LD_VAR 0 2
6399: DOUBLE
6400: EQUAL
6401: IFTRUE 6405
6403: GO 6469
6405: POP
// begin gossud = createcharacter ( Gossudarov ) ;
6406: LD_ADDR_EXP 101
6410: PUSH
6411: LD_STRING Gossudarov
6413: PPUSH
6414: CALL_OW 34
6418: ST_TO_ADDR
// if getclass ( gossud ) = class_bazooker then
6419: LD_EXP 101
6423: PPUSH
6424: CALL_OW 257
6428: PUSH
6429: LD_INT 9
6431: EQUAL
6432: IFFALSE 6446
// setclass ( gossud , class_soldier ) ;
6434: LD_EXP 101
6438: PPUSH
6439: LD_INT 1
6441: PPUSH
6442: CALL_OW 336
// placeunitxyr ( gossud , 61 , 77 , 3 , false ) ;
6446: LD_EXP 101
6450: PPUSH
6451: LD_INT 61
6453: PPUSH
6454: LD_INT 77
6456: PPUSH
6457: LD_INT 3
6459: PPUSH
6460: LD_INT 0
6462: PPUSH
6463: CALL_OW 50
// end ; old_al2 :
6467: GO 6542
6469: LD_VAR 0 3
6473: DOUBLE
6474: EQUAL
6475: IFTRUE 6479
6477: GO 6541
6479: POP
// begin gossud = createcharacter ( Gossudarov ) ;
6480: LD_ADDR_EXP 101
6484: PUSH
6485: LD_STRING Gossudarov
6487: PPUSH
6488: CALL_OW 34
6492: ST_TO_ADDR
// if getclass ( gossud ) = class_bazooker then
6493: LD_EXP 101
6497: PPUSH
6498: CALL_OW 257
6502: PUSH
6503: LD_INT 9
6505: EQUAL
6506: IFFALSE 6520
// setclass ( gossud , class_soldier ) ;
6508: LD_EXP 101
6512: PPUSH
6513: LD_INT 1
6515: PPUSH
6516: CALL_OW 336
// vedci = vedci ^ [ gossud ] ;
6520: LD_ADDR_LOC 4
6524: PUSH
6525: LD_LOC 4
6529: PUSH
6530: LD_EXP 101
6534: PUSH
6535: EMPTY
6536: LIST
6537: ADD
6538: ST_TO_ADDR
// end ; end ;
6539: GO 6542
6541: POP
// end else
6542: GO 6544
// else
6544: GO 6553
// msg ( neny Gossudarov ) ;
6546: LD_STRING neny Gossudarov
6548: PPUSH
6549: CALL_OW 100
// if testcharacters ( survivors5 ) then
6553: LD_STRING survivors5
6555: PPUSH
6556: CALL_OW 28
6560: IFFALSE 6595
// if checkcharacterset ( survivors5 ) then
6562: LD_STRING survivors5
6564: PPUSH
6565: CALL_OW 29
6569: IFFALSE 6586
// zbytekze12 = createcharacterset ( survivors5 ) else
6571: LD_ADDR_LOC 5
6575: PUSH
6576: LD_STRING survivors5
6578: PPUSH
6579: CALL_OW 31
6583: ST_TO_ADDR
6584: GO 6593
// zbytekze12 = [ ] else
6586: LD_ADDR_LOC 5
6590: PUSH
6591: EMPTY
6592: ST_TO_ADDR
6593: GO 6608
// buildquery ( neny survivors5 , [ OK ] ) ;
6595: LD_STRING neny survivors5
6597: PPUSH
6598: LD_STRING OK
6600: PUSH
6601: EMPTY
6602: LIST
6603: PPUSH
6604: CALL_OW 99
// vedciost = [ ] ;
6608: LD_ADDR_LOC 6
6612: PUSH
6613: EMPTY
6614: ST_TO_ADDR
// if testcharacters ( Scientists ) then
6615: LD_STRING Scientists
6617: PPUSH
6618: CALL_OW 28
6622: IFFALSE 6657
// if checkcharacterset ( Scientists ) then
6624: LD_STRING Scientists
6626: PPUSH
6627: CALL_OW 29
6631: IFFALSE 6648
// vedciost = createcharacterset ( Scientists ) else
6633: LD_ADDR_LOC 6
6637: PUSH
6638: LD_STRING Scientists
6640: PPUSH
6641: CALL_OW 31
6645: ST_TO_ADDR
6646: GO 6655
// vedciost = [ ] else
6648: LD_ADDR_LOC 6
6652: PUSH
6653: EMPTY
6654: ST_TO_ADDR
6655: GO 6670
// buildquery ( neny Scientists , [ OK ] ) ;
6657: LD_STRING neny Scientists
6659: PPUSH
6660: LD_STRING OK
6662: PUSH
6663: EMPTY
6664: LIST
6665: PPUSH
6666: CALL_OW 99
// zbytekze12 = zbytekze12 diff vedciost ;
6670: LD_ADDR_LOC 5
6674: PUSH
6675: LD_LOC 5
6679: PUSH
6680: LD_LOC 6
6684: DIFF
6685: ST_TO_ADDR
// for tmp in zbytekze12 do
6686: LD_ADDR_VAR 0 4
6690: PUSH
6691: LD_LOC 5
6695: PUSH
6696: FOR_IN
6697: IFFALSE 6722
// placeunitxyr ( tmp , 61 , 77 , 3 , false ) ;
6699: LD_VAR 0 4
6703: PPUSH
6704: LD_INT 61
6706: PPUSH
6707: LD_INT 77
6709: PPUSH
6710: LD_INT 3
6712: PPUSH
6713: LD_INT 0
6715: PPUSH
6716: CALL_OW 50
6720: GO 6696
6722: POP
6723: POP
// vip = [ burlak , belkov , gnyevko , kiril , kovalyuk , scholtze , kuzmov , karam , petrov , gleb , petros , lipshchin , titov , dolgov , xavier , oblukov , kozlov , kapitsova , gossud ] diff [ 0 ] ;
6724: LD_ADDR_EXP 102
6728: PUSH
6729: LD_EXP 83
6733: PUSH
6734: LD_EXP 84
6738: PUSH
6739: LD_EXP 85
6743: PUSH
6744: LD_EXP 86
6748: PUSH
6749: LD_EXP 87
6753: PUSH
6754: LD_EXP 88
6758: PUSH
6759: LD_EXP 89
6763: PUSH
6764: LD_EXP 90
6768: PUSH
6769: LD_EXP 91
6773: PUSH
6774: LD_EXP 92
6778: PUSH
6779: LD_EXP 93
6783: PUSH
6784: LD_EXP 94
6788: PUSH
6789: LD_EXP 95
6793: PUSH
6794: LD_EXP 96
6798: PUSH
6799: LD_EXP 97
6803: PUSH
6804: LD_EXP 98
6808: PUSH
6809: LD_EXP 99
6813: PUSH
6814: LD_EXP 100
6818: PUSH
6819: LD_EXP 101
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: PUSH
6845: LD_INT 0
6847: PUSH
6848: EMPTY
6849: LIST
6850: DIFF
6851: ST_TO_ADDR
// ingameon ;
6852: CALL_OW 8
// if Masha then
6856: LD_EXP 80
6860: IFFALSE 6873
// CenterNowOnUnits ( Masha ) else
6862: LD_EXP 80
6866: PPUSH
6867: CALL_OW 87
6871: GO 6882
// centernowonunits ( burlak ) ;
6873: LD_EXP 83
6877: PPUSH
6878: CALL_OW 87
// commovexy ( zbytekze12 ^ vip , 61 , 49 ) ;
6882: LD_LOC 5
6886: PUSH
6887: LD_EXP 102
6891: ADD
6892: PPUSH
6893: LD_INT 61
6895: PPUSH
6896: LD_INT 49
6898: PPUSH
6899: CALL_OW 111
// plidi = 0 + ( zbytekze12 ^ vip ) ;
6903: LD_ADDR_LOC 8
6907: PUSH
6908: LD_INT 0
6910: PUSH
6911: LD_LOC 5
6915: PUSH
6916: LD_EXP 102
6920: ADD
6921: PLUS
6922: ST_TO_ADDR
// while getdistunitxy ( burlak , 61 , 49 ) > 5 do
6923: LD_EXP 83
6927: PPUSH
6928: LD_INT 61
6930: PPUSH
6931: LD_INT 49
6933: PPUSH
6934: CALL_OW 297
6938: PUSH
6939: LD_INT 5
6941: GREATER
6942: IFFALSE 6979
// begin wait ( 1 ) ;
6944: LD_INT 1
6946: PPUSH
6947: CALL_OW 67
// if Masha then
6951: LD_EXP 80
6955: IFFALSE 6968
// CenterNowOnUnits ( Masha ) else
6957: LD_EXP 80
6961: PPUSH
6962: CALL_OW 87
6966: GO 6977
// centeronunits ( burlak ) ;
6968: LD_EXP 83
6972: PPUSH
6973: CALL_OW 85
// end ;
6977: GO 6923
// ingameoff ;
6979: CALL_OW 9
// dialogueon ;
6983: CALL_OW 6
// tmp = unitfilter ( vip diff ( [ burlak ] ^ vedci ) , [ [ f_sex , sex_male ] ] ) ;
6987: LD_ADDR_VAR 0 4
6991: PUSH
6992: LD_EXP 102
6996: PUSH
6997: LD_EXP 83
7001: PUSH
7002: EMPTY
7003: LIST
7004: PUSH
7005: LD_LOC 4
7009: ADD
7010: DIFF
7011: PPUSH
7012: LD_INT 26
7014: PUSH
7015: LD_INT 1
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: EMPTY
7023: LIST
7024: PPUSH
7025: CALL_OW 72
7029: ST_TO_ADDR
// tmp1 = unitfilter ( zbytekze12 , [ [ f_sex , sex_male ] ] ) ;
7030: LD_ADDR_VAR 0 5
7034: PUSH
7035: LD_LOC 5
7039: PPUSH
7040: LD_INT 26
7042: PUSH
7043: LD_INT 1
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: EMPTY
7051: LIST
7052: PPUSH
7053: CALL_OW 72
7057: ST_TO_ADDR
// if tmp or tmp1 or belkov or gnyevko then
7058: LD_VAR 0 4
7062: PUSH
7063: LD_VAR 0 5
7067: OR
7068: PUSH
7069: LD_EXP 84
7073: OR
7074: PUSH
7075: LD_EXP 85
7079: OR
7080: IFFALSE 7094
// say ( burlak , DStart-Bur-1 ) ;
7082: LD_EXP 83
7086: PPUSH
7087: LD_STRING DStart-Bur-1
7089: PPUSH
7090: CALL_OW 88
// if belkov then
7094: LD_EXP 84
7098: IFFALSE 7133
// begin say ( belkov , DStart-Bel-1 ) ;
7100: LD_EXP 84
7104: PPUSH
7105: LD_STRING DStart-Bel-1
7107: PPUSH
7108: CALL_OW 88
// tmp = tmp diff [ belkov ] ;
7112: LD_ADDR_VAR 0 4
7116: PUSH
7117: LD_VAR 0 4
7121: PUSH
7122: LD_EXP 84
7126: PUSH
7127: EMPTY
7128: LIST
7129: DIFF
7130: ST_TO_ADDR
// end else
7131: GO 7170
// if gnyevko then
7133: LD_EXP 85
7137: IFFALSE 7170
// begin say ( gnyevko , DStart-Gny-1 ) ;
7139: LD_EXP 85
7143: PPUSH
7144: LD_STRING DStart-Gny-1
7146: PPUSH
7147: CALL_OW 88
// tmp = tmp diff [ gnyevko ] ;
7151: LD_ADDR_VAR 0 4
7155: PUSH
7156: LD_VAR 0 4
7160: PUSH
7161: LD_EXP 85
7165: PUSH
7166: EMPTY
7167: LIST
7168: DIFF
7169: ST_TO_ADDR
// end ; if tmp1 then
7170: LD_VAR 0 5
7174: IFFALSE 7194
// say ( tmp1 [ 1 ] , DStart-Rsol1-1 ) else
7176: LD_VAR 0 5
7180: PUSH
7181: LD_INT 1
7183: ARRAY
7184: PPUSH
7185: LD_STRING DStart-Rsol1-1
7187: PPUSH
7188: CALL_OW 88
7192: GO 7216
// if tmp then
7194: LD_VAR 0 4
7198: IFFALSE 7216
// say ( tmp [ 1 ] , DStart-Rsol1-1 ) ;
7200: LD_VAR 0 4
7204: PUSH
7205: LD_INT 1
7207: ARRAY
7208: PPUSH
7209: LD_STRING DStart-Rsol1-1
7211: PPUSH
7212: CALL_OW 88
// if tmp or tmp1 or belkov or gnyevko then
7216: LD_VAR 0 4
7220: PUSH
7221: LD_VAR 0 5
7225: OR
7226: PUSH
7227: LD_EXP 84
7231: OR
7232: PUSH
7233: LD_EXP 85
7237: OR
7238: IFFALSE 7252
// say ( burlak , DStart-Bur-2 ) ;
7240: LD_EXP 83
7244: PPUSH
7245: LD_STRING DStart-Bur-2
7247: PPUSH
7248: CALL_OW 88
// dialogueoff ;
7252: CALL_OW 7
// saveforquickrestart ;
7256: CALL_OW 22
// wait ( 0 0$0.5 ) ;
7260: LD_INT 18
7262: PPUSH
7263: CALL_OW 67
// changemissionobjectives ( MBuild ) ;
7267: LD_STRING MBuild
7269: PPUSH
7270: CALL_OW 337
// end ;
7274: LD_VAR 0 1
7278: RET
// export glad , jmm , roth , bobby , brown , connie , cornel , cyrus , denis , lucy , frank , gary , lisa , simms , yamoko ; export arusove , amervyb ; every 1 1$30 do var tmp , tmp1 , tmp2 , tmpvedci , amer ;
7279: GO 7281
7281: DISABLE
7282: LD_INT 0
7284: PPUSH
7285: PPUSH
7286: PPUSH
7287: PPUSH
7288: PPUSH
// begin tmp2 = vedci ^ vedciost ;
7289: LD_ADDR_VAR 0 3
7293: PUSH
7294: LD_LOC 4
7298: PUSH
7299: LD_LOC 6
7303: ADD
7304: ST_TO_ADDR
// arusove = tmp2 ;
7305: LD_ADDR_EXP 119
7309: PUSH
7310: LD_VAR 0 3
7314: ST_TO_ADDR
// tmp = 0 + tmp2 ;
7315: LD_ADDR_VAR 0 1
7319: PUSH
7320: LD_INT 0
7322: PUSH
7323: LD_VAR 0 3
7327: PLUS
7328: ST_TO_ADDR
// setside ( tmp2 , rus2 ) ;
7329: LD_VAR 0 3
7333: PPUSH
7334: LD_EXP 6
7338: PPUSH
7339: CALL_OW 235
// for tmp1 = 1 to tmp do
7343: LD_ADDR_VAR 0 2
7347: PUSH
7348: DOUBLE
7349: LD_INT 1
7351: DEC
7352: ST_TO_ADDR
7353: LD_VAR 0 1
7357: PUSH
7358: FOR_TO
7359: IFFALSE 7390
// placeunitxyr ( tmp2 [ tmp1 ] , 70 , 96 , 3 , false ) ;
7361: LD_VAR 0 3
7365: PUSH
7366: LD_VAR 0 2
7370: ARRAY
7371: PPUSH
7372: LD_INT 70
7374: PPUSH
7375: LD_INT 96
7377: PPUSH
7378: LD_INT 3
7380: PPUSH
7381: LD_INT 0
7383: PPUSH
7384: CALL_OW 50
7388: GO 7358
7390: POP
7391: POP
// commovexy ( tmp2 , 64 , 54 ) ;
7392: LD_VAR 0 3
7396: PPUSH
7397: LD_INT 64
7399: PPUSH
7400: LD_INT 54
7402: PPUSH
7403: CALL_OW 111
// uc_side = oth ;
7407: LD_ADDR_OWVAR 20
7411: PUSH
7412: LD_EXP 5
7416: ST_TO_ADDR
// uc_nation = nation_american ;
7417: LD_ADDR_OWVAR 21
7421: PUSH
7422: LD_INT 1
7424: ST_TO_ADDR
// if testcharacters ( Gladstone ) then
7425: LD_STRING Gladstone
7427: PPUSH
7428: CALL_OW 28
7432: IFFALSE 7468
// if checkcharacterset ( Gladstone ) then
7434: LD_STRING Gladstone
7436: PPUSH
7437: CALL_OW 29
7441: IFFALSE 7458
// glad = createcharacter ( Gladstone ) else
7443: LD_ADDR_EXP 104
7447: PUSH
7448: LD_STRING Gladstone
7450: PPUSH
7451: CALL_OW 34
7455: ST_TO_ADDR
7456: GO 7466
// glad = 0 else
7458: LD_ADDR_EXP 104
7462: PUSH
7463: LD_INT 0
7465: ST_TO_ADDR
7466: GO 7475
// msg ( neny Gladstone ) ;
7468: LD_STRING neny Gladstone
7470: PPUSH
7471: CALL_OW 100
// jmm = newcharacter ( Macmillan ) ;
7475: LD_ADDR_EXP 105
7479: PUSH
7480: LD_STRING Macmillan
7482: PPUSH
7483: CALL_OW 25
7487: ST_TO_ADDR
// if not jmm then
7488: LD_EXP 105
7492: NOT
7493: IFFALSE 7502
// msg ( neny Macmillan ) ;
7495: LD_STRING neny Macmillan
7497: PPUSH
7498: CALL_OW 100
// roth = newcharacter ( Roth ) ;
7502: LD_ADDR_EXP 106
7506: PUSH
7507: LD_STRING Roth
7509: PPUSH
7510: CALL_OW 25
7514: ST_TO_ADDR
// if not roth then
7515: LD_EXP 106
7519: NOT
7520: IFFALSE 7529
// msg ( neny Roth ) ;
7522: LD_STRING neny Roth
7524: PPUSH
7525: CALL_OW 100
// denis = newcharacter ( Peterson ) ;
7529: LD_ADDR_EXP 112
7533: PUSH
7534: LD_STRING Peterson
7536: PPUSH
7537: CALL_OW 25
7541: ST_TO_ADDR
// if not denis then
7542: LD_EXP 112
7546: NOT
7547: IFFALSE 7556
// msg ( neny Peterson ) ;
7549: LD_STRING neny Peterson
7551: PPUSH
7552: CALL_OW 100
// bobby = newcharacter ( Bobby ) ;
7556: LD_ADDR_EXP 107
7560: PUSH
7561: LD_STRING Bobby
7563: PPUSH
7564: CALL_OW 25
7568: ST_TO_ADDR
// if not bobby then
7569: LD_EXP 107
7573: NOT
7574: IFFALSE 7583
// msg ( neny Bobby ) ;
7576: LD_STRING neny Bobby
7578: PPUSH
7579: CALL_OW 100
// brown = newcharacter ( Brown ) ;
7583: LD_ADDR_EXP 108
7587: PUSH
7588: LD_STRING Brown
7590: PPUSH
7591: CALL_OW 25
7595: ST_TO_ADDR
// if not brown then
7596: LD_EXP 108
7600: NOT
7601: IFFALSE 7610
// msg ( neny Brown ) ;
7603: LD_STRING neny Brown
7605: PPUSH
7606: CALL_OW 100
// connie = newcharacter ( Connie ) ;
7610: LD_ADDR_EXP 109
7614: PUSH
7615: LD_STRING Connie
7617: PPUSH
7618: CALL_OW 25
7622: ST_TO_ADDR
// if not connie then
7623: LD_EXP 109
7627: NOT
7628: IFFALSE 7637
// msg ( neny Connie ) ;
7630: LD_STRING neny Connie
7632: PPUSH
7633: CALL_OW 100
// cornel = newcharacter ( Cornell ) ;
7637: LD_ADDR_EXP 110
7641: PUSH
7642: LD_STRING Cornell
7644: PPUSH
7645: CALL_OW 25
7649: ST_TO_ADDR
// if not cornel then
7650: LD_EXP 110
7654: NOT
7655: IFFALSE 7664
// msg ( neny Cornell ) ;
7657: LD_STRING neny Cornell
7659: PPUSH
7660: CALL_OW 100
// cyrus = newcharacter ( Cyrus ) ;
7664: LD_ADDR_EXP 111
7668: PUSH
7669: LD_STRING Cyrus
7671: PPUSH
7672: CALL_OW 25
7676: ST_TO_ADDR
// if not cyrus then
7677: LD_EXP 111
7681: NOT
7682: IFFALSE 7691
// msg ( neny Cyrus ) ;
7684: LD_STRING neny Cyrus
7686: PPUSH
7687: CALL_OW 100
// lucy = newcharacter ( Donaldson ) ;
7691: LD_ADDR_EXP 113
7695: PUSH
7696: LD_STRING Donaldson
7698: PPUSH
7699: CALL_OW 25
7703: ST_TO_ADDR
// if not lucy then
7704: LD_EXP 113
7708: NOT
7709: IFFALSE 7718
// msg ( neny Donaldson ) ;
7711: LD_STRING neny Donaldson
7713: PPUSH
7714: CALL_OW 100
// frank = newcharacter ( Frank ) ;
7718: LD_ADDR_EXP 114
7722: PUSH
7723: LD_STRING Frank
7725: PPUSH
7726: CALL_OW 25
7730: ST_TO_ADDR
// if not frank then
7731: LD_EXP 114
7735: NOT
7736: IFFALSE 7745
// msg ( neny Frank ) ;
7738: LD_STRING neny Frank
7740: PPUSH
7741: CALL_OW 100
// gary = newcharacter ( Gary ) ;
7745: LD_ADDR_EXP 115
7749: PUSH
7750: LD_STRING Gary
7752: PPUSH
7753: CALL_OW 25
7757: ST_TO_ADDR
// if not gary then
7758: LD_EXP 115
7762: NOT
7763: IFFALSE 7772
// msg ( neny Gary ) ;
7765: LD_STRING neny Gary
7767: PPUSH
7768: CALL_OW 100
// lisa = newcharacter ( Lisa ) ;
7772: LD_ADDR_EXP 116
7776: PUSH
7777: LD_STRING Lisa
7779: PPUSH
7780: CALL_OW 25
7784: ST_TO_ADDR
// if not lisa then
7785: LD_EXP 116
7789: NOT
7790: IFFALSE 7799
// msg ( neny Lisa ) ;
7792: LD_STRING neny Lisa
7794: PPUSH
7795: CALL_OW 100
// simms = newcharacter ( Simms ) ;
7799: LD_ADDR_EXP 117
7803: PUSH
7804: LD_STRING Simms
7806: PPUSH
7807: CALL_OW 25
7811: ST_TO_ADDR
// if not simms then
7812: LD_EXP 117
7816: NOT
7817: IFFALSE 7826
// msg ( neny Simms ) ;
7819: LD_STRING neny Simms
7821: PPUSH
7822: CALL_OW 100
// yamoko = newcharacter ( Yamoko ) ;
7826: LD_ADDR_EXP 118
7830: PUSH
7831: LD_STRING Yamoko
7833: PPUSH
7834: CALL_OW 25
7838: ST_TO_ADDR
// amer = [ simms , glad , bobby , brown , connie , cornel , cyrus , lucy , frank , gary , lisa , yamoko ] diff [ 0 ] ;
7839: LD_ADDR_VAR 0 5
7843: PUSH
7844: LD_EXP 117
7848: PUSH
7849: LD_EXP 104
7853: PUSH
7854: LD_EXP 107
7858: PUSH
7859: LD_EXP 108
7863: PUSH
7864: LD_EXP 109
7868: PUSH
7869: LD_EXP 110
7873: PUSH
7874: LD_EXP 111
7878: PUSH
7879: LD_EXP 113
7883: PUSH
7884: LD_EXP 114
7888: PUSH
7889: LD_EXP 115
7893: PUSH
7894: LD_EXP 116
7898: PUSH
7899: LD_EXP 118
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: PUSH
7918: LD_INT 0
7920: PUSH
7921: EMPTY
7922: LIST
7923: DIFF
7924: ST_TO_ADDR
// amervyb = [ jmm , roth , denis ] diff [ 0 ] ;
7925: LD_ADDR_EXP 120
7929: PUSH
7930: LD_EXP 105
7934: PUSH
7935: LD_EXP 106
7939: PUSH
7940: LD_EXP 112
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: LIST
7949: PUSH
7950: LD_INT 0
7952: PUSH
7953: EMPTY
7954: LIST
7955: DIFF
7956: ST_TO_ADDR
// for tmp1 = 1 to 0 + amervyb do
7957: LD_ADDR_VAR 0 2
7961: PUSH
7962: DOUBLE
7963: LD_INT 1
7965: DEC
7966: ST_TO_ADDR
7967: LD_INT 0
7969: PUSH
7970: LD_EXP 120
7974: PLUS
7975: PUSH
7976: FOR_TO
7977: IFFALSE 8008
// placeunitxyr ( amervyb [ tmp1 ] , 50 , 5 , 3 , false ) ;
7979: LD_EXP 120
7983: PUSH
7984: LD_VAR 0 2
7988: ARRAY
7989: PPUSH
7990: LD_INT 50
7992: PPUSH
7993: LD_INT 5
7995: PPUSH
7996: LD_INT 3
7998: PPUSH
7999: LD_INT 0
8001: PPUSH
8002: CALL_OW 50
8006: GO 7976
8008: POP
8009: POP
// tmp = tmp + 0 + amervyb ;
8010: LD_ADDR_VAR 0 1
8014: PUSH
8015: LD_VAR 0 1
8019: PUSH
8020: LD_INT 0
8022: PLUS
8023: PUSH
8024: LD_EXP 120
8028: PLUS
8029: ST_TO_ADDR
// for tmp1 = 1 to maxlidi - plidi - tmp do
8030: LD_ADDR_VAR 0 2
8034: PUSH
8035: DOUBLE
8036: LD_INT 1
8038: DEC
8039: ST_TO_ADDR
8040: LD_EXP 7
8044: PUSH
8045: LD_LOC 8
8049: MINUS
8050: PUSH
8051: LD_VAR 0 1
8055: MINUS
8056: PUSH
8057: FOR_TO
8058: IFFALSE 8114
// begin placeunitxyr ( amer [ tmp1 ] , 50 , 5 , 3 , false ) ;
8060: LD_VAR 0 5
8064: PUSH
8065: LD_VAR 0 2
8069: ARRAY
8070: PPUSH
8071: LD_INT 50
8073: PPUSH
8074: LD_INT 5
8076: PPUSH
8077: LD_INT 3
8079: PPUSH
8080: LD_INT 0
8082: PPUSH
8083: CALL_OW 50
// amervyb = amervyb ^ [ amer [ tmp1 ] ] ;
8087: LD_ADDR_EXP 120
8091: PUSH
8092: LD_EXP 120
8096: PUSH
8097: LD_VAR 0 5
8101: PUSH
8102: LD_VAR 0 2
8106: ARRAY
8107: PUSH
8108: EMPTY
8109: LIST
8110: ADD
8111: ST_TO_ADDR
// end ;
8112: GO 8057
8114: POP
8115: POP
// commovexy ( amervyb , 62 , 47 ) ;
8116: LD_EXP 120
8120: PPUSH
8121: LD_INT 62
8123: PPUSH
8124: LD_INT 47
8126: PPUSH
8127: CALL_OW 111
// SetAttitude ( rus2 , oth , att_friend , true ) ;
8131: LD_EXP 6
8135: PPUSH
8136: LD_EXP 5
8140: PPUSH
8141: LD_INT 1
8143: PPUSH
8144: LD_INT 1
8146: PPUSH
8147: CALL_OW 80
// end ;
8151: PPOPN 5
8153: END
// var r_seen ; function side_sees_side ( sidea , sideb ) ; var tmp , tmp2 ; begin
8154: LD_INT 0
8156: PPUSH
8157: PPUSH
8158: PPUSH
// tmp2 = filterallunits ( [ [ f_side , sideb ] ] ) ;
8159: LD_ADDR_VAR 0 5
8163: PUSH
8164: LD_INT 22
8166: PUSH
8167: LD_VAR 0 2
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: PUSH
8176: EMPTY
8177: LIST
8178: PPUSH
8179: CALL_OW 69
8183: ST_TO_ADDR
// result = 0 ;
8184: LD_ADDR_VAR 0 3
8188: PUSH
8189: LD_INT 0
8191: ST_TO_ADDR
// for tmp in tmp2 do
8192: LD_ADDR_VAR 0 4
8196: PUSH
8197: LD_VAR 0 5
8201: PUSH
8202: FOR_IN
8203: IFFALSE 8245
// if see ( sidea , tmp ) then
8205: LD_VAR 0 1
8209: PPUSH
8210: LD_VAR 0 4
8214: PPUSH
8215: CALL_OW 292
8219: IFFALSE 8243
// begin r_seen = tmp ;
8221: LD_ADDR_LOC 9
8225: PUSH
8226: LD_VAR 0 4
8230: ST_TO_ADDR
// result = tmp ;
8231: LD_ADDR_VAR 0 3
8235: PUSH
8236: LD_VAR 0 4
8240: ST_TO_ADDR
// break ;
8241: GO 8245
// end ;
8243: GO 8202
8245: POP
8246: POP
// end ;
8247: LD_VAR 0 3
8251: RET
// every 0 0$1 + 1 1$30 trigger side_sees_side ( al , oth ) do
8252: LD_EXP 1
8256: PPUSH
8257: LD_EXP 5
8261: PPUSH
8262: CALL 8154 0 2
8266: IFFALSE 8770
8268: GO 8270
8270: DISABLE
// begin setside ( filterallunits ( [ [ f_side , rus2 ] ] ) , al ) ;
8271: LD_INT 22
8273: PUSH
8274: LD_EXP 6
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: PUSH
8283: EMPTY
8284: LIST
8285: PPUSH
8286: CALL_OW 69
8290: PPUSH
8291: LD_EXP 1
8295: PPUSH
8296: CALL_OW 235
// dialogueon ;
8300: CALL_OW 6
// say ( burlak , DSci-Bur-1 ) ;
8304: LD_EXP 83
8308: PPUSH
8309: LD_STRING DSci-Bur-1
8311: PPUSH
8312: CALL_OW 88
// say ( gossud , DSci-Gos-1 ) ;
8316: LD_EXP 101
8320: PPUSH
8321: LD_STRING DSci-Gos-1
8323: PPUSH
8324: CALL_OW 88
// say ( burlak , DSci-Bur-2 ) ;
8328: LD_EXP 83
8332: PPUSH
8333: LD_STRING DSci-Bur-2
8335: PPUSH
8336: CALL_OW 88
// say ( gossud , DSci-Gos-2 ) ;
8340: LD_EXP 101
8344: PPUSH
8345: LD_STRING DSci-Gos-2
8347: PPUSH
8348: CALL_OW 88
// revealfogarea ( al , arab_base_reveal ) ;
8352: LD_EXP 1
8356: PPUSH
8357: LD_INT 10
8359: PPUSH
8360: CALL_OW 332
// centernowonxy ( 126 , 27 ) ;
8364: LD_INT 126
8366: PPUSH
8367: LD_INT 27
8369: PPUSH
8370: CALL_OW 86
// say ( burlak , DSci-Bur-3 ) ;
8374: LD_EXP 83
8378: PPUSH
8379: LD_STRING DSci-Bur-3
8381: PPUSH
8382: CALL_OW 88
// say ( gossud , DSci-Gos-3 ) ;
8386: LD_EXP 101
8390: PPUSH
8391: LD_STRING DSci-Gos-3
8393: PPUSH
8394: CALL_OW 88
// say ( burlak , DSci-Bur-4 ) ;
8398: LD_EXP 83
8402: PPUSH
8403: LD_STRING DSci-Bur-4
8405: PPUSH
8406: CALL_OW 88
// say ( gossud , DSci-Gos-4 ) ;
8410: LD_EXP 101
8414: PPUSH
8415: LD_STRING DSci-Gos-4
8417: PPUSH
8418: CALL_OW 88
// say ( burlak , DSci-Bur-5 ) ;
8422: LD_EXP 83
8426: PPUSH
8427: LD_STRING DSci-Bur-5
8429: PPUSH
8430: CALL_OW 88
// dialogueoff ;
8434: CALL_OW 7
// centeronunits ( [ burlak , jmm ] ) ;
8438: LD_EXP 83
8442: PUSH
8443: LD_EXP 105
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: PPUSH
8452: CALL_OW 85
// wait ( 0 0$1 ) ;
8456: LD_INT 35
8458: PPUSH
8459: CALL_OW 67
// dialogueon ;
8463: CALL_OW 6
// say ( gossud , DAmer-Gos-1 ) ;
8467: LD_EXP 101
8471: PPUSH
8472: LD_STRING DAmer-Gos-1
8474: PPUSH
8475: CALL_OW 88
// say ( burlak , DAmer-Bur-1 ) ;
8479: LD_EXP 83
8483: PPUSH
8484: LD_STRING DAmer-Bur-1
8486: PPUSH
8487: CALL_OW 88
// say ( jmm , DAmer-JMM-1 ) ;
8491: LD_EXP 105
8495: PPUSH
8496: LD_STRING DAmer-JMM-1
8498: PPUSH
8499: CALL_OW 88
// dialogueoff ;
8503: CALL_OW 7
// ingameon ;
8507: CALL_OW 8
// comattackunit ( burlak , jmm ) ;
8511: LD_EXP 83
8515: PPUSH
8516: LD_EXP 105
8520: PPUSH
8521: CALL_OW 115
// comattackunit ( jmm , burlak ) ;
8525: LD_EXP 105
8529: PPUSH
8530: LD_EXP 83
8534: PPUSH
8535: CALL_OW 115
// while not attacks ( jmm ) do
8539: LD_EXP 105
8543: PPUSH
8544: CALL_OW 320
8548: NOT
8549: IFFALSE 8560
// wait ( 0 0$0.3 ) ;
8551: LD_INT 10
8553: PPUSH
8554: CALL_OW 67
8558: GO 8539
// ingameoff ;
8560: CALL_OW 9
// wait ( 0 0$1.7 ) ;
8564: LD_INT 59
8566: PPUSH
8567: CALL_OW 67
// dialogueon ;
8571: CALL_OW 6
// say ( gossud , DAmer-Gos-2 ) ;
8575: LD_EXP 101
8579: PPUSH
8580: LD_STRING DAmer-Gos-2
8582: PPUSH
8583: CALL_OW 88
// say ( roth , DAmer-Roth-2 ) ;
8587: LD_EXP 106
8591: PPUSH
8592: LD_STRING DAmer-Roth-2
8594: PPUSH
8595: CALL_OW 88
// dialogueoff ;
8599: CALL_OW 7
// comstop ( [ burlak , jmm ] ) ;
8603: LD_EXP 83
8607: PUSH
8608: LD_EXP 105
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PPUSH
8617: CALL_OW 141
// setside ( [ jmm ] , al ) ;
8621: LD_EXP 105
8625: PUSH
8626: EMPTY
8627: LIST
8628: PPUSH
8629: LD_EXP 1
8633: PPUSH
8634: CALL_OW 235
// dialogueon ;
8638: CALL_OW 6
// say ( gossud , DAmer-Gos-3 ) ;
8642: LD_EXP 101
8646: PPUSH
8647: LD_STRING DAmer-Gos-3
8649: PPUSH
8650: CALL_OW 88
// say ( burlak , DAmer-Bur-3 ) ;
8654: LD_EXP 83
8658: PPUSH
8659: LD_STRING DAmer-Bur-3
8661: PPUSH
8662: CALL_OW 88
// say ( jmm , DAmer-JMM-3 ) ;
8666: LD_EXP 105
8670: PPUSH
8671: LD_STRING DAmer-JMM-3
8673: PPUSH
8674: CALL_OW 88
// say ( burlak , DAmer-Bur-4 ) ;
8678: LD_EXP 83
8682: PPUSH
8683: LD_STRING DAmer-Bur-4
8685: PPUSH
8686: CALL_OW 88
// say ( jmm , DAmer-JMM-4 ) ;
8690: LD_EXP 105
8694: PPUSH
8695: LD_STRING DAmer-JMM-4
8697: PPUSH
8698: CALL_OW 88
// say ( burlak , DAmer-Bur-5 ) ;
8702: LD_EXP 83
8706: PPUSH
8707: LD_STRING DAmer-Bur-5
8709: PPUSH
8710: CALL_OW 88
// say ( jmm , DAmer-JMM-5 ) ;
8714: LD_EXP 105
8718: PPUSH
8719: LD_STRING DAmer-JMM-5
8721: PPUSH
8722: CALL_OW 88
// say ( burlak , DAmer-Bur-6 ) ;
8726: LD_EXP 83
8730: PPUSH
8731: LD_STRING DAmer-Bur-6
8733: PPUSH
8734: CALL_OW 88
// dialogueoff ;
8738: CALL_OW 7
// setside ( amervyb , al ) ;
8742: LD_EXP 120
8746: PPUSH
8747: LD_EXP 1
8751: PPUSH
8752: CALL_OW 235
// changemissionobjectives ( MMacmillan ) ;
8756: LD_STRING MMacmillan
8758: PPUSH
8759: CALL_OW 337
// hint ( CombinedForces ) ;
8763: LD_STRING CombinedForces
8765: PPUSH
8766: CALL_OW 339
// end ;
8770: END
// on BuildingComplete ( b ) do begin if ( getbtype ( b ) = b_lab ) and ( getnation ( b ) <> nation_american ) and not lb1 then
8771: LD_VAR 0 1
8775: PPUSH
8776: CALL_OW 266
8780: PUSH
8781: LD_INT 6
8783: EQUAL
8784: PUSH
8785: LD_VAR 0 1
8789: PPUSH
8790: CALL_OW 248
8794: PUSH
8795: LD_INT 1
8797: NONEQUAL
8798: AND
8799: PUSH
8800: LD_EXP 81
8804: NOT
8805: AND
8806: IFFALSE 8821
// begin lb1 = true ;
8808: LD_ADDR_EXP 81
8812: PUSH
8813: LD_INT 1
8815: ST_TO_ADDR
// enable ( 01 ) ;
8816: LD_INT 1
8818: ENABLE_MARKED
// end else
8819: GO 8863
// if ( getbtype ( b ) = b_lab ) and ( getnation ( b ) = nation_american ) then
8821: LD_VAR 0 1
8825: PPUSH
8826: CALL_OW 266
8830: PUSH
8831: LD_INT 6
8833: EQUAL
8834: PUSH
8835: LD_VAR 0 1
8839: PPUSH
8840: CALL_OW 248
8844: PUSH
8845: LD_INT 1
8847: EQUAL
8848: AND
8849: IFFALSE 8863
// begin disable ;
8851: DISABLE
// enable ( 02 ) ;
8852: LD_INT 2
8854: ENABLE_MARKED
// lab_build = true ;
8855: LD_ADDR_EXP 76
8859: PUSH
8860: LD_INT 1
8862: ST_TO_ADDR
// end ; if GetBType ( b ) = b_depot and GetSide ( b ) = 7 then
8863: LD_VAR 0 1
8867: PPUSH
8868: CALL_OW 266
8872: PUSH
8873: LD_INT 0
8875: EQUAL
8876: PUSH
8877: LD_VAR 0 1
8881: PPUSH
8882: CALL_OW 255
8886: PUSH
8887: LD_INT 7
8889: EQUAL
8890: AND
8891: IFFALSE 8905
// SetBName ( b , freedom ) ;
8893: LD_VAR 0 1
8897: PPUSH
8898: LD_STRING freedom
8900: PPUSH
8901: CALL_OW 500
// end ;
8905: PPOPN 1
8907: END
// every 0 0$1 + 1 1$45 marked 01 do var tmp ;
8908: GO 8910
8910: DISABLE
8911: LD_INT 0
8913: PPUSH
// begin dialogueon ;
8914: CALL_OW 6
// if isok ( denis ) then
8918: LD_EXP 112
8922: PPUSH
8923: CALL_OW 302
8927: IFFALSE 8943
// say ( denis , DLab-Pet-1 ) else
8929: LD_EXP 112
8933: PPUSH
8934: LD_STRING DLab-Pet-1
8936: PPUSH
8937: CALL_OW 88
8941: GO 9030
// begin tmp = filterallunits ( [ [ f_side , al ] , [ f_nation , nation_american ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) ;
8943: LD_ADDR_VAR 0 1
8947: PUSH
8948: LD_INT 22
8950: PUSH
8951: LD_EXP 1
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: PUSH
8960: LD_INT 23
8962: PUSH
8963: LD_INT 1
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: PUSH
8970: LD_INT 21
8972: PUSH
8973: LD_INT 1
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PUSH
8980: LD_INT 26
8982: PUSH
8983: LD_INT 1
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: PUSH
8990: LD_INT 50
8992: PUSH
8993: EMPTY
8994: LIST
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: PPUSH
9003: CALL_OW 69
9007: ST_TO_ADDR
// if tmp then
9008: LD_VAR 0 1
9012: IFFALSE 9030
// say ( tmp [ 1 ] , DLab-Pet-1 ) end ;
9014: LD_VAR 0 1
9018: PUSH
9019: LD_INT 1
9021: ARRAY
9022: PPUSH
9023: LD_STRING DLab-Pet-1
9025: PPUSH
9026: CALL_OW 88
// dialogueoff ;
9030: CALL_OW 7
// end ;
9034: PPOPN 1
9036: END
// every 0 0$1 + 2 2$0 marked 02 do var tmp ;
9037: GO 9039
9039: DISABLE
9040: LD_INT 0
9042: PPUSH
// begin tmp = filterallunits ( [ [ f_side , al ] , [ f_nation , nation_american ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) ;
9043: LD_ADDR_VAR 0 1
9047: PUSH
9048: LD_INT 22
9050: PUSH
9051: LD_EXP 1
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PUSH
9060: LD_INT 23
9062: PUSH
9063: LD_INT 1
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: PUSH
9070: LD_INT 21
9072: PUSH
9073: LD_INT 1
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: PUSH
9080: LD_INT 26
9082: PUSH
9083: LD_INT 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: LD_INT 50
9092: PUSH
9093: EMPTY
9094: LIST
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: PPUSH
9103: CALL_OW 69
9107: ST_TO_ADDR
// dialogueon ;
9108: CALL_OW 6
// if isok ( denis ) then
9112: LD_EXP 112
9116: PPUSH
9117: CALL_OW 302
9121: IFFALSE 9137
// say ( denis , DResearch-Pet-1 ) else
9123: LD_EXP 112
9127: PPUSH
9128: LD_STRING DResearch-Pet-1
9130: PPUSH
9131: CALL_OW 88
9135: GO 9159
// if tmp then
9137: LD_VAR 0 1
9141: IFFALSE 9159
// say ( tmp [ 1 ] , DResearch-Pet-1 ) ;
9143: LD_VAR 0 1
9147: PUSH
9148: LD_INT 1
9150: ARRAY
9151: PPUSH
9152: LD_STRING DResearch-Pet-1
9154: PPUSH
9155: CALL_OW 88
// dialogueoff ;
9159: CALL_OW 7
// end ;
9163: PPOPN 1
9165: END
// every 0 0$1 + 2 2$30 trigger see ( al , ruv0 ) do var tmp ;
9166: LD_EXP 1
9170: PPUSH
9171: LD_EXP 140
9175: PPUSH
9176: CALL_OW 292
9180: IFFALSE 9333
9182: GO 9184
9184: DISABLE
9185: LD_INT 0
9187: PPUSH
// begin tmp = unitfilter ( arusove , [ [ f_ok ] , [ f_sex , sex_male ] ] ) ;
9188: LD_ADDR_VAR 0 1
9192: PUSH
9193: LD_EXP 119
9197: PPUSH
9198: LD_INT 50
9200: PUSH
9201: EMPTY
9202: LIST
9203: PUSH
9204: LD_INT 26
9206: PUSH
9207: LD_INT 1
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: PPUSH
9218: CALL_OW 72
9222: ST_TO_ADDR
// if 0 = tmp then
9223: LD_INT 0
9225: PUSH
9226: LD_VAR 0 1
9230: EQUAL
9231: IFFALSE 9235
// exit ;
9233: GO 9333
// tmp = tmp diff [ gossud ] ;
9235: LD_ADDR_VAR 0 1
9239: PUSH
9240: LD_VAR 0 1
9244: PUSH
9245: LD_EXP 101
9249: PUSH
9250: EMPTY
9251: LIST
9252: DIFF
9253: ST_TO_ADDR
// dialogueon ;
9254: CALL_OW 6
// if tmp then
9258: LD_VAR 0 1
9262: IFFALSE 9282
// say ( tmp [ 1 ] , DRussianAttack-RSci1-1 ) else
9264: LD_VAR 0 1
9268: PUSH
9269: LD_INT 1
9271: ARRAY
9272: PPUSH
9273: LD_STRING DRussianAttack-RSci1-1
9275: PPUSH
9276: CALL_OW 88
9280: GO 9294
// say ( gossud , DRussianAttack-RSci1-1 ) ;
9282: LD_EXP 101
9286: PPUSH
9287: LD_STRING DRussianAttack-RSci1-1
9289: PPUSH
9290: CALL_OW 88
// if isok ( gossud ) then
9294: LD_EXP 101
9298: PPUSH
9299: CALL_OW 302
9303: IFFALSE 9329
// begin say ( gossud , DRussianAttack-Gos-1 ) ;
9305: LD_EXP 101
9309: PPUSH
9310: LD_STRING DRussianAttack-Gos-1
9312: PPUSH
9313: CALL_OW 88
// say ( burlak , DRussianAttack-Bur-1 ) ;
9317: LD_EXP 83
9321: PPUSH
9322: LD_STRING DRussianAttack-Bur-1
9324: PPUSH
9325: CALL_OW 88
// end ; dialogueoff ;
9329: CALL_OW 7
// end ;
9333: PPOPN 1
9335: END
// every 4 4$10 do
9336: GO 9338
9338: DISABLE
// begin setside ( jahoda , rus2 ) ;
9339: LD_EXP 103
9343: PPUSH
9344: LD_EXP 6
9348: PPUSH
9349: CALL_OW 235
// placeunitxyr ( jahoda , 113 , 97 , 2 , false ) ;
9353: LD_EXP 103
9357: PPUSH
9358: LD_INT 113
9360: PPUSH
9361: LD_INT 97
9363: PPUSH
9364: LD_INT 2
9366: PPUSH
9367: LD_INT 0
9369: PPUSH
9370: CALL_OW 50
// commovexy ( jahoda , 79 , 65 ) ;
9374: LD_EXP 103
9378: PPUSH
9379: LD_INT 79
9381: PPUSH
9382: LD_INT 65
9384: PPUSH
9385: CALL_OW 111
// end ;
9389: END
// every 0 0$2 + 4 4$28 trigger isinarea ( jahoda , stred ) do var tmp ;
9390: LD_EXP 103
9394: PPUSH
9395: LD_INT 2
9397: PPUSH
9398: CALL_OW 308
9402: IFFALSE 9518
9404: GO 9406
9406: DISABLE
9407: LD_INT 0
9409: PPUSH
// begin tmp = unitfilter ( arusove , [ [ f_ok ] ] ) ;
9410: LD_ADDR_VAR 0 1
9414: PUSH
9415: LD_EXP 119
9419: PPUSH
9420: LD_INT 50
9422: PUSH
9423: EMPTY
9424: LIST
9425: PUSH
9426: EMPTY
9427: LIST
9428: PPUSH
9429: CALL_OW 72
9433: ST_TO_ADDR
// dialogueon ;
9434: CALL_OW 6
// case jahodatyp of 1 :
9438: LD_LOC 7
9442: PUSH
9443: LD_INT 1
9445: DOUBLE
9446: EQUAL
9447: IFTRUE 9451
9449: GO 9478
9451: POP
// begin sayradio ( jahoda , DBelkov-Bel-1 ) ;
9452: LD_EXP 103
9456: PPUSH
9457: LD_STRING DBelkov-Bel-1
9459: PPUSH
9460: CALL_OW 94
// say ( burlak , DBelkov-Bur-1 ) ;
9464: LD_EXP 83
9468: PPUSH
9469: LD_STRING DBelkov-Bur-1
9471: PPUSH
9472: CALL_OW 88
// end ; 2 :
9476: GO 9514
9478: LD_INT 2
9480: DOUBLE
9481: EQUAL
9482: IFTRUE 9486
9484: GO 9513
9486: POP
// begin sayradio ( jahoda , DBelkov-Gny-1 ) ;
9487: LD_EXP 103
9491: PPUSH
9492: LD_STRING DBelkov-Gny-1
9494: PPUSH
9495: CALL_OW 94
// say ( burlak , DBelkov-Bur-1a ) ;
9499: LD_EXP 83
9503: PPUSH
9504: LD_STRING DBelkov-Bur-1a
9506: PPUSH
9507: CALL_OW 88
// end ; end ;
9511: GO 9514
9513: POP
// dialogueoff ;
9514: CALL_OW 7
// end ;
9518: PPOPN 1
9520: END
// every 0 0$1 + 4 4$33 trigger filterallunits ( [ [ f_side , al ] , [ f_dist , jahoda , 6 ] ] ) do
9521: LD_INT 22
9523: PUSH
9524: LD_EXP 1
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: PUSH
9533: LD_INT 91
9535: PUSH
9536: LD_EXP 103
9540: PUSH
9541: LD_INT 6
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: LIST
9548: PUSH
9549: EMPTY
9550: LIST
9551: LIST
9552: PPUSH
9553: CALL_OW 69
9557: IFFALSE 9624
9559: GO 9561
9561: DISABLE
// begin setside ( jahoda , al ) ;
9562: LD_EXP 103
9566: PPUSH
9567: LD_EXP 1
9571: PPUSH
9572: CALL_OW 235
// case jahodatyp of 1 :
9576: LD_LOC 7
9580: PUSH
9581: LD_INT 1
9583: DOUBLE
9584: EQUAL
9585: IFTRUE 9589
9587: GO 9602
9589: POP
// SaveVariable ( 1 , belkov_side ) ; 2 :
9590: LD_INT 1
9592: PPUSH
9593: LD_STRING belkov_side
9595: PPUSH
9596: CALL_OW 39
9600: GO 9624
9602: LD_INT 2
9604: DOUBLE
9605: EQUAL
9606: IFTRUE 9610
9608: GO 9623
9610: POP
// SaveVariable ( 1 , gnyevko_side ) ; end ;
9611: LD_INT 1
9613: PPUSH
9614: LD_STRING gnyevko_side
9616: PPUSH
9617: CALL_OW 39
9621: GO 9624
9623: POP
// end ;
9624: END
// every 0 0$1 + 10 10$15 do var tmp , tmp2 , tmp3 ;
9625: GO 9627
9627: DISABLE
9628: LD_INT 0
9630: PPUSH
9631: PPUSH
9632: PPUSH
// begin tmp = filterallunits ( [ [ f_side , al ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ;
9633: LD_ADDR_VAR 0 1
9637: PUSH
9638: LD_INT 22
9640: PUSH
9641: LD_EXP 1
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PUSH
9650: LD_INT 23
9652: PUSH
9653: LD_INT 3
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 50
9662: PUSH
9663: EMPTY
9664: LIST
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: LIST
9670: PPUSH
9671: CALL_OW 69
9675: ST_TO_ADDR
// tmp3 = filterallunits ( [ [ f_side , al ] , [ f_nation , nation_american ] , [ f_ok ] ] ) ;
9676: LD_ADDR_VAR 0 3
9680: PUSH
9681: LD_INT 22
9683: PUSH
9684: LD_EXP 1
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: PUSH
9693: LD_INT 23
9695: PUSH
9696: LD_INT 1
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PUSH
9703: LD_INT 50
9705: PUSH
9706: EMPTY
9707: LIST
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: PPUSH
9714: CALL_OW 69
9718: ST_TO_ADDR
// tmp2 = unitfilter ( tmp , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
9719: LD_ADDR_VAR 0 2
9723: PUSH
9724: LD_VAR 0 1
9728: PPUSH
9729: LD_INT 25
9731: PUSH
9732: LD_INT 4
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PUSH
9739: LD_INT 50
9741: PUSH
9742: EMPTY
9743: LIST
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: PPUSH
9749: CALL_OW 72
9753: ST_TO_ADDR
// dialogueon ;
9754: CALL_OW 6
// if isok ( gossud ) then
9758: LD_EXP 101
9762: PPUSH
9763: CALL_OW 302
9767: IFFALSE 9783
// say ( gossud , DArtef-Gos-1 ) else
9769: LD_EXP 101
9773: PPUSH
9774: LD_STRING DArtef-Gos-1
9776: PPUSH
9777: CALL_OW 88
9781: GO 9829
// if tmp2 then
9783: LD_VAR 0 2
9787: IFFALSE 9807
// say ( tmp2 [ 1 ] , DArtef-RSci1-1 ) else
9789: LD_VAR 0 2
9793: PUSH
9794: LD_INT 1
9796: ARRAY
9797: PPUSH
9798: LD_STRING DArtef-RSci1-1
9800: PPUSH
9801: CALL_OW 88
9805: GO 9829
// if tmp then
9807: LD_VAR 0 1
9811: IFFALSE 9829
// say ( tmp [ 1 ] , DArtef-RSci1-1 ) ;
9813: LD_VAR 0 1
9817: PUSH
9818: LD_INT 1
9820: ARRAY
9821: PPUSH
9822: LD_STRING DArtef-RSci1-1
9824: PPUSH
9825: CALL_OW 88
// if isok ( roth ) then
9829: LD_EXP 106
9833: PPUSH
9834: CALL_OW 302
9838: IFFALSE 9854
// say ( roth , DArtef-Roth-1 ) else
9840: LD_EXP 106
9844: PPUSH
9845: LD_STRING DArtef-Roth-1
9847: PPUSH
9848: CALL_OW 88
9852: GO 9870
// say ( tmp3 [ 1 ] , DArtef-Roth-1 ) ;
9854: LD_VAR 0 3
9858: PUSH
9859: LD_INT 1
9861: ARRAY
9862: PPUSH
9863: LD_STRING DArtef-Roth-1
9865: PPUSH
9866: CALL_OW 88
// say ( burlak , DArtef-Bur-1 ) ;
9870: LD_EXP 83
9874: PPUSH
9875: LD_STRING DArtef-Bur-1
9877: PPUSH
9878: CALL_OW 88
// if roth then
9882: LD_EXP 106
9886: IFFALSE 9902
// say ( roth , DArtef-Roth-2 ) else
9888: LD_EXP 106
9892: PPUSH
9893: LD_STRING DArtef-Roth-2
9895: PPUSH
9896: CALL_OW 88
9900: GO 9918
// say ( tmp3 [ 1 ] , DArtef-Roth-2 ) ;
9902: LD_VAR 0 3
9906: PUSH
9907: LD_INT 1
9909: ARRAY
9910: PPUSH
9911: LD_STRING DArtef-Roth-2
9913: PPUSH
9914: CALL_OW 88
// say ( burlak , DArtef-Bur-2 ) ;
9918: LD_EXP 83
9922: PPUSH
9923: LD_STRING DArtef-Bur-2
9925: PPUSH
9926: CALL_OW 88
// say ( jmm , DArtef-JMM-2 ) ;
9930: LD_EXP 105
9934: PPUSH
9935: LD_STRING DArtef-JMM-2
9937: PPUSH
9938: CALL_OW 88
// dialogueoff ;
9942: CALL_OW 7
// case query ( QBase ) of 1 :
9946: LD_STRING QBase
9948: PPUSH
9949: CALL_OW 97
9953: PUSH
9954: LD_INT 1
9956: DOUBLE
9957: EQUAL
9958: IFTRUE 9962
9960: GO 10120
9962: POP
// begin dialogueon ;
9963: CALL_OW 6
// say ( burlak , DQrBase#1-Bur-1 ) ;
9967: LD_EXP 83
9971: PPUSH
9972: LD_STRING DQrBase#1-Bur-1
9974: PPUSH
9975: CALL_OW 88
// if isok ( gossud ) then
9979: LD_EXP 101
9983: PPUSH
9984: CALL_OW 302
9988: IFFALSE 10004
// say ( gossud , DQrBase#1-Gos-1 ) else
9990: LD_EXP 101
9994: PPUSH
9995: LD_STRING DQrBase#1-Gos-1
9997: PPUSH
9998: CALL_OW 88
10002: GO 10063
// if isok ( roth ) then
10004: LD_EXP 106
10008: PPUSH
10009: CALL_OW 302
10013: IFFALSE 10029
// say ( roth , DQrBase#1-Roth-1 ) else
10015: LD_EXP 106
10019: PPUSH
10020: LD_STRING DQrBase#1-Roth-1
10022: PPUSH
10023: CALL_OW 88
10027: GO 10063
// if tmp ^ tmp3 then
10029: LD_VAR 0 1
10033: PUSH
10034: LD_VAR 0 3
10038: ADD
10039: IFFALSE 10063
// say ( ( tmp ^ tmp3 ) [ 1 ] , DQrBase#1-Roth-1 ) ;
10041: LD_VAR 0 1
10045: PUSH
10046: LD_VAR 0 3
10050: ADD
10051: PUSH
10052: LD_INT 1
10054: ARRAY
10055: PPUSH
10056: LD_STRING DQrBase#1-Roth-1
10058: PPUSH
10059: CALL_OW 88
// say ( burlak , DQrBase#1-Bur-2 ) ;
10063: LD_EXP 83
10067: PPUSH
10068: LD_STRING DQrBase#1-Bur-2
10070: PPUSH
10071: CALL_OW 88
// dialogueoff ;
10075: CALL_OW 7
// case query ( QBaseAgain ) of 1 :
10079: LD_STRING QBaseAgain
10081: PPUSH
10082: CALL_OW 97
10086: PUSH
10087: LD_INT 1
10089: DOUBLE
10090: EQUAL
10091: IFTRUE 10095
10093: GO 10102
10095: POP
// pokec1 ; 2 :
10096: CALL 10168 0 0
10100: GO 10118
10102: LD_INT 2
10104: DOUBLE
10105: EQUAL
10106: IFTRUE 10110
10108: GO 10117
10110: POP
// pokec2 ; end ;
10111: CALL 10243 0 0
10115: GO 10118
10117: POP
// end ; 2 :
10118: GO 10151
10120: LD_INT 2
10122: DOUBLE
10123: EQUAL
10124: IFTRUE 10128
10126: GO 10135
10128: POP
// pokec1 ; 3 :
10129: CALL 10168 0 0
10133: GO 10151
10135: LD_INT 3
10137: DOUBLE
10138: EQUAL
10139: IFTRUE 10143
10141: GO 10150
10143: POP
// pokec2 ; end ;
10144: CALL 10243 0 0
10148: GO 10151
10150: POP
// changemissionobjectives ( MAttack ) ;
10151: LD_STRING MAttack
10153: PPUSH
10154: CALL_OW 337
// update_display ( 1 ) ;
10158: LD_INT 1
10160: PPUSH
10161: CALL 12795 0 1
// end ;
10165: PPOPN 3
10167: END
// function pokec1 ; begin
10168: LD_INT 0
10170: PPUSH
// dialogueon ;
10171: CALL_OW 6
// say ( burlak , DQrBase#2-Bur-1 ) ;
10175: LD_EXP 83
10179: PPUSH
10180: LD_STRING DQrBase#2-Bur-1
10182: PPUSH
10183: CALL_OW 88
// sayradio ( abdul , DQrBase#2-Abd-1 ) ;
10187: LD_EXP 121
10191: PPUSH
10192: LD_STRING DQrBase#2-Abd-1
10194: PPUSH
10195: CALL_OW 94
// say ( burlak , DQrBase#2-Bur-2 ) ;
10199: LD_EXP 83
10203: PPUSH
10204: LD_STRING DQrBase#2-Bur-2
10206: PPUSH
10207: CALL_OW 88
// sayradio ( abdul , DQrBase#2-Abd-2 ) ;
10211: LD_EXP 121
10215: PPUSH
10216: LD_STRING DQrBase#2-Abd-2
10218: PPUSH
10219: CALL_OW 94
// dialogueoff ;
10223: CALL_OW 7
// vyjednavalo_se = true ;
10227: LD_ADDR_EXP 82
10231: PUSH
10232: LD_INT 1
10234: ST_TO_ADDR
// enable ( 07 ) ;
10235: LD_INT 7
10237: ENABLE_MARKED
// end ;
10238: LD_VAR 0 1
10242: RET
// function pokec2 ; begin
10243: LD_INT 0
10245: PPUSH
// dialogueon ;
10246: CALL_OW 6
// say ( burlak , DQrBase#3-Bur-1 ) ;
10250: LD_EXP 83
10254: PPUSH
10255: LD_STRING DQrBase#3-Bur-1
10257: PPUSH
10258: CALL_OW 88
// dialogueoff ;
10262: CALL_OW 7
// end ; end_of_file
10266: LD_VAR 0 1
10270: RET
// export abdul ; export arv1 , arm1 , arv2 , arm2 , arv3 , arm3 , arv4 , arm4 , arv5 , arm5 , arv6 , arm6 , arv7 , arv8 , arv9 , arv10 ; var inzinyrka , mechanic , ar_mech_ctrl , typitomybudovy ; export function prepare_arabians ; var tmp ; begin
10271: LD_INT 0
10273: PPUSH
10274: PPUSH
// uc_side = ar ;
10275: LD_ADDR_OWVAR 20
10279: PUSH
10280: LD_EXP 3
10284: ST_TO_ADDR
// uc_nation = nation_arabian ;
10285: LD_ADDR_OWVAR 21
10289: PUSH
10290: LD_INT 2
10292: ST_TO_ADDR
// preparesoldier ( sex_male , ars0 ) ;
10293: LD_INT 1
10295: PPUSH
10296: LD_EXP 8
10300: PPUSH
10301: CALL_OW 381
// tmp = createhuman ;
10305: LD_ADDR_VAR 0 2
10309: PUSH
10310: CALL_OW 44
10314: ST_TO_ADDR
// placeunitxy ( tmp , 135 , 91 , false ) ;
10315: LD_VAR 0 2
10319: PPUSH
10320: LD_INT 135
10322: PPUSH
10323: LD_INT 91
10325: PPUSH
10326: LD_INT 0
10328: PPUSH
10329: CALL_OW 48
// comenterunit ( tmp , arbunk0 ) ;
10333: LD_VAR 0 2
10337: PPUSH
10338: LD_INT 14
10340: PPUSH
10341: CALL_OW 120
// preparesoldier ( sex_male , ars1 ) ;
10345: LD_INT 1
10347: PPUSH
10348: LD_EXP 9
10352: PPUSH
10353: CALL_OW 381
// tmp = createhuman ;
10357: LD_ADDR_VAR 0 2
10361: PUSH
10362: CALL_OW 44
10366: ST_TO_ADDR
// placeunitxy ( tmp , 138 , 85 , false ) ;
10367: LD_VAR 0 2
10371: PPUSH
10372: LD_INT 138
10374: PPUSH
10375: LD_INT 85
10377: PPUSH
10378: LD_INT 0
10380: PPUSH
10381: CALL_OW 48
// comenterunit ( tmp , arbunk1 ) ;
10385: LD_VAR 0 2
10389: PPUSH
10390: LD_INT 15
10392: PPUSH
10393: CALL_OW 120
// preparesoldier ( sex_male , ars2 ) ;
10397: LD_INT 1
10399: PPUSH
10400: LD_EXP 10
10404: PPUSH
10405: CALL_OW 381
// tmp = createhuman ;
10409: LD_ADDR_VAR 0 2
10413: PUSH
10414: CALL_OW 44
10418: ST_TO_ADDR
// placeunitxy ( tmp , 129 , 78 , false ) ;
10419: LD_VAR 0 2
10423: PPUSH
10424: LD_INT 129
10426: PPUSH
10427: LD_INT 78
10429: PPUSH
10430: LD_INT 0
10432: PPUSH
10433: CALL_OW 48
// comenterunit ( tmp , arbunk2 ) ;
10437: LD_VAR 0 2
10441: PPUSH
10442: LD_INT 13
10444: PPUSH
10445: CALL_OW 120
// preparesoldier ( sex_male , ars3 ) ;
10449: LD_INT 1
10451: PPUSH
10452: LD_EXP 11
10456: PPUSH
10457: CALL_OW 381
// tmp = createhuman ;
10461: LD_ADDR_VAR 0 2
10465: PUSH
10466: CALL_OW 44
10470: ST_TO_ADDR
// placeunitxy ( tmp , 115 , 44 , false ) ;
10471: LD_VAR 0 2
10475: PPUSH
10476: LD_INT 115
10478: PPUSH
10479: LD_INT 44
10481: PPUSH
10482: LD_INT 0
10484: PPUSH
10485: CALL_OW 48
// comenterunit ( tmp , arbunk3 ) ;
10489: LD_VAR 0 2
10493: PPUSH
10494: LD_INT 16
10496: PPUSH
10497: CALL_OW 120
// preparesoldier ( sex_male , ars4 ) ;
10501: LD_INT 1
10503: PPUSH
10504: LD_EXP 12
10508: PPUSH
10509: CALL_OW 381
// tmp = createhuman ;
10513: LD_ADDR_VAR 0 2
10517: PUSH
10518: CALL_OW 44
10522: ST_TO_ADDR
// placeunitxy ( tmp , 125 , 37 , false ) ;
10523: LD_VAR 0 2
10527: PPUSH
10528: LD_INT 125
10530: PPUSH
10531: LD_INT 37
10533: PPUSH
10534: LD_INT 0
10536: PPUSH
10537: CALL_OW 48
// comenterunit ( tmp , arbunk4 ) ;
10541: LD_VAR 0 2
10545: PPUSH
10546: LD_INT 17
10548: PPUSH
10549: CALL_OW 120
// preparesoldier ( sex_male , ars5 ) ;
10553: LD_INT 1
10555: PPUSH
10556: LD_EXP 13
10560: PPUSH
10561: CALL_OW 381
// tmp = createhuman ;
10565: LD_ADDR_VAR 0 2
10569: PUSH
10570: CALL_OW 44
10574: ST_TO_ADDR
// placeunitxy ( tmp , 132 , 33 , false ) ;
10575: LD_VAR 0 2
10579: PPUSH
10580: LD_INT 132
10582: PPUSH
10583: LD_INT 33
10585: PPUSH
10586: LD_INT 0
10588: PPUSH
10589: CALL_OW 48
// comenterunit ( tmp , arbunk5 ) ;
10593: LD_VAR 0 2
10597: PPUSH
10598: LD_INT 18
10600: PPUSH
10601: CALL_OW 120
// if difficulty = 1 then
10605: LD_OWVAR 67
10609: PUSH
10610: LD_INT 1
10612: EQUAL
10613: IFFALSE 10907
// begin preparehuman ( sex_male , class_mortar , ars6 ) ;
10615: LD_INT 1
10617: PPUSH
10618: LD_INT 8
10620: PPUSH
10621: LD_EXP 14
10625: PPUSH
10626: CALL_OW 380
// tmp = createhuman ;
10630: LD_ADDR_VAR 0 2
10634: PUSH
10635: CALL_OW 44
10639: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
10640: LD_VAR 0 2
10644: PPUSH
10645: LD_INT 134
10647: PPUSH
10648: LD_INT 75
10650: PPUSH
10651: LD_INT 1
10653: PPUSH
10654: LD_INT 0
10656: PPUSH
10657: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
10661: LD_VAR 0 2
10665: PPUSH
10666: LD_INT 2
10668: PPUSH
10669: CALL_OW 120
// preparehuman ( sex_male , class_soldier , ars7 ) ;
10673: LD_INT 1
10675: PPUSH
10676: LD_INT 1
10678: PPUSH
10679: LD_EXP 15
10683: PPUSH
10684: CALL_OW 380
// tmp = createhuman ;
10688: LD_ADDR_VAR 0 2
10692: PUSH
10693: CALL_OW 44
10697: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
10698: LD_VAR 0 2
10702: PPUSH
10703: LD_INT 134
10705: PPUSH
10706: LD_INT 75
10708: PPUSH
10709: LD_INT 1
10711: PPUSH
10712: LD_INT 0
10714: PPUSH
10715: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
10719: LD_VAR 0 2
10723: PPUSH
10724: LD_INT 2
10726: PPUSH
10727: CALL_OW 120
// preparehuman ( sex_male , class_soldier , ars8 ) ;
10731: LD_INT 1
10733: PPUSH
10734: LD_INT 1
10736: PPUSH
10737: LD_EXP 16
10741: PPUSH
10742: CALL_OW 380
// tmp = createhuman ;
10746: LD_ADDR_VAR 0 2
10750: PUSH
10751: CALL_OW 44
10755: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
10756: LD_VAR 0 2
10760: PPUSH
10761: LD_INT 134
10763: PPUSH
10764: LD_INT 75
10766: PPUSH
10767: LD_INT 1
10769: PPUSH
10770: LD_INT 0
10772: PPUSH
10773: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
10777: LD_VAR 0 2
10781: PPUSH
10782: LD_INT 2
10784: PPUSH
10785: CALL_OW 120
// preparehuman ( sex_male , class_soldier , ars9 ) ;
10789: LD_INT 1
10791: PPUSH
10792: LD_INT 1
10794: PPUSH
10795: LD_EXP 17
10799: PPUSH
10800: CALL_OW 380
// tmp = createhuman ;
10804: LD_ADDR_VAR 0 2
10808: PUSH
10809: CALL_OW 44
10813: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
10814: LD_VAR 0 2
10818: PPUSH
10819: LD_INT 134
10821: PPUSH
10822: LD_INT 75
10824: PPUSH
10825: LD_INT 1
10827: PPUSH
10828: LD_INT 0
10830: PPUSH
10831: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
10835: LD_VAR 0 2
10839: PPUSH
10840: LD_INT 2
10842: PPUSH
10843: CALL_OW 120
// preparehuman ( sex_male , class_soldier , ars10 ) ;
10847: LD_INT 1
10849: PPUSH
10850: LD_INT 1
10852: PPUSH
10853: LD_EXP 18
10857: PPUSH
10858: CALL_OW 380
// tmp = createhuman ;
10862: LD_ADDR_VAR 0 2
10866: PUSH
10867: CALL_OW 44
10871: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
10872: LD_VAR 0 2
10876: PPUSH
10877: LD_INT 134
10879: PPUSH
10880: LD_INT 75
10882: PPUSH
10883: LD_INT 1
10885: PPUSH
10886: LD_INT 0
10888: PPUSH
10889: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
10893: LD_VAR 0 2
10897: PPUSH
10898: LD_INT 2
10900: PPUSH
10901: CALL_OW 120
// end else
10905: GO 11325
// begin preparehuman ( sex_male , class_mortar , ars6 ) ;
10907: LD_INT 1
10909: PPUSH
10910: LD_INT 8
10912: PPUSH
10913: LD_EXP 14
10917: PPUSH
10918: CALL_OW 380
// tmp = createhuman ;
10922: LD_ADDR_VAR 0 2
10926: PUSH
10927: CALL_OW 44
10931: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
10932: LD_VAR 0 2
10936: PPUSH
10937: LD_INT 134
10939: PPUSH
10940: LD_INT 75
10942: PPUSH
10943: LD_INT 1
10945: PPUSH
10946: LD_INT 0
10948: PPUSH
10949: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
10953: LD_VAR 0 2
10957: PPUSH
10958: LD_INT 2
10960: PPUSH
10961: CALL_OW 120
// preparehuman ( sex_male , class_mortar , ars7 ) ;
10965: LD_INT 1
10967: PPUSH
10968: LD_INT 8
10970: PPUSH
10971: LD_EXP 15
10975: PPUSH
10976: CALL_OW 380
// tmp = createhuman ;
10980: LD_ADDR_VAR 0 2
10984: PUSH
10985: CALL_OW 44
10989: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
10990: LD_VAR 0 2
10994: PPUSH
10995: LD_INT 134
10997: PPUSH
10998: LD_INT 75
11000: PPUSH
11001: LD_INT 1
11003: PPUSH
11004: LD_INT 0
11006: PPUSH
11007: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
11011: LD_VAR 0 2
11015: PPUSH
11016: LD_INT 2
11018: PPUSH
11019: CALL_OW 120
// preparehuman ( sex_male , class_soldier , ars8 ) ;
11023: LD_INT 1
11025: PPUSH
11026: LD_INT 1
11028: PPUSH
11029: LD_EXP 16
11033: PPUSH
11034: CALL_OW 380
// tmp = createhuman ;
11038: LD_ADDR_VAR 0 2
11042: PUSH
11043: CALL_OW 44
11047: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
11048: LD_VAR 0 2
11052: PPUSH
11053: LD_INT 134
11055: PPUSH
11056: LD_INT 75
11058: PPUSH
11059: LD_INT 1
11061: PPUSH
11062: LD_INT 0
11064: PPUSH
11065: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
11069: LD_VAR 0 2
11073: PPUSH
11074: LD_INT 2
11076: PPUSH
11077: CALL_OW 120
// if difficulty > 2 then
11081: LD_OWVAR 67
11085: PUSH
11086: LD_INT 2
11088: GREATER
11089: IFFALSE 11209
// begin preparehuman ( sex_male , class_mortar , ars9 ) ;
11091: LD_INT 1
11093: PPUSH
11094: LD_INT 8
11096: PPUSH
11097: LD_EXP 17
11101: PPUSH
11102: CALL_OW 380
// tmp = createhuman ;
11106: LD_ADDR_VAR 0 2
11110: PUSH
11111: CALL_OW 44
11115: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
11116: LD_VAR 0 2
11120: PPUSH
11121: LD_INT 134
11123: PPUSH
11124: LD_INT 75
11126: PPUSH
11127: LD_INT 1
11129: PPUSH
11130: LD_INT 0
11132: PPUSH
11133: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
11137: LD_VAR 0 2
11141: PPUSH
11142: LD_INT 2
11144: PPUSH
11145: CALL_OW 120
// preparehuman ( sex_male , class_mortar , ars10 ) ;
11149: LD_INT 1
11151: PPUSH
11152: LD_INT 8
11154: PPUSH
11155: LD_EXP 18
11159: PPUSH
11160: CALL_OW 380
// tmp = createhuman ;
11164: LD_ADDR_VAR 0 2
11168: PUSH
11169: CALL_OW 44
11173: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
11174: LD_VAR 0 2
11178: PPUSH
11179: LD_INT 134
11181: PPUSH
11182: LD_INT 75
11184: PPUSH
11185: LD_INT 1
11187: PPUSH
11188: LD_INT 0
11190: PPUSH
11191: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
11195: LD_VAR 0 2
11199: PPUSH
11200: LD_INT 2
11202: PPUSH
11203: CALL_OW 120
// end else
11207: GO 11325
// begin preparehuman ( sex_male , class_mortar , ars9 ) ;
11209: LD_INT 1
11211: PPUSH
11212: LD_INT 8
11214: PPUSH
11215: LD_EXP 17
11219: PPUSH
11220: CALL_OW 380
// tmp = createhuman ;
11224: LD_ADDR_VAR 0 2
11228: PUSH
11229: CALL_OW 44
11233: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
11234: LD_VAR 0 2
11238: PPUSH
11239: LD_INT 134
11241: PPUSH
11242: LD_INT 75
11244: PPUSH
11245: LD_INT 1
11247: PPUSH
11248: LD_INT 0
11250: PPUSH
11251: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
11255: LD_VAR 0 2
11259: PPUSH
11260: LD_INT 2
11262: PPUSH
11263: CALL_OW 120
// preparehuman ( sex_male , class_soldier , ars10 ) ;
11267: LD_INT 1
11269: PPUSH
11270: LD_INT 1
11272: PPUSH
11273: LD_EXP 18
11277: PPUSH
11278: CALL_OW 380
// tmp = createhuman ;
11282: LD_ADDR_VAR 0 2
11286: PUSH
11287: CALL_OW 44
11291: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
11292: LD_VAR 0 2
11296: PPUSH
11297: LD_INT 134
11299: PPUSH
11300: LD_INT 75
11302: PPUSH
11303: LD_INT 1
11305: PPUSH
11306: LD_INT 0
11308: PPUSH
11309: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
11313: LD_VAR 0 2
11317: PPUSH
11318: LD_INT 2
11320: PPUSH
11321: CALL_OW 120
// end ; end ; preparemechanic ( sex_female , 8 ) ;
11325: LD_INT 2
11327: PPUSH
11328: LD_INT 8
11330: PPUSH
11331: CALL_OW 383
// mechanic = createhuman ;
11335: LD_ADDR_LOC 11
11339: PUSH
11340: CALL_OW 44
11344: ST_TO_ADDR
// placeunitxy ( mechanic , 133 , 54 , false ) ;
11345: LD_LOC 11
11349: PPUSH
11350: LD_INT 133
11352: PPUSH
11353: LD_INT 54
11355: PPUSH
11356: LD_INT 0
11358: PPUSH
11359: CALL_OW 48
// comenterunit ( mechanic , arfact00 ) ;
11363: LD_LOC 11
11367: PPUSH
11368: LD_INT 4
11370: PPUSH
11371: CALL_OW 120
// prepareengineer ( sex_female , 7 ) ;
11375: LD_INT 2
11377: PPUSH
11378: LD_INT 7
11380: PPUSH
11381: CALL_OW 382
// inzinyrka = createhuman ;
11385: LD_ADDR_LOC 10
11389: PUSH
11390: CALL_OW 44
11394: ST_TO_ADDR
// placeunitxy ( inzinyrka , 134 , 61 , false ) ;
11395: LD_LOC 10
11399: PPUSH
11400: LD_INT 134
11402: PPUSH
11403: LD_INT 61
11405: PPUSH
11406: LD_INT 0
11408: PPUSH
11409: CALL_OW 48
// comenterunit ( inzinyrka , ar_depot ) ;
11413: LD_LOC 10
11417: PPUSH
11418: LD_INT 1
11420: PPUSH
11421: CALL_OW 120
// if checkcharacterset ( Abdul ) then
11425: LD_STRING Abdul
11427: PPUSH
11428: CALL_OW 29
11432: IFFALSE 11452
// abdul = createcharacterwithclass ( Abdul , class_desert_warior ) else
11434: LD_ADDR_EXP 121
11438: PUSH
11439: LD_STRING Abdul
11441: PPUSH
11442: LD_INT 11
11444: PPUSH
11445: CALL_OW 35
11449: ST_TO_ADDR
11450: GO 11465
// buildquery ( neny Abdul , [ OK ] ) ;
11452: LD_STRING neny Abdul
11454: PPUSH
11455: LD_STRING OK
11457: PUSH
11458: EMPTY
11459: LIST
11460: PPUSH
11461: CALL_OW 99
// placeunitxyr ( abdul , 140 , 65 , 3 , false ) ;
11465: LD_EXP 121
11469: PPUSH
11470: LD_INT 140
11472: PPUSH
11473: LD_INT 65
11475: PPUSH
11476: LD_INT 3
11478: PPUSH
11479: LD_INT 0
11481: PPUSH
11482: CALL_OW 50
// addcomenterunit ( abdul , abduluv ) ;
11486: LD_EXP 121
11490: PPUSH
11491: LD_INT 22
11493: PPUSH
11494: CALL_OW 180
// preparemechanic ( sex_female , arm0 ) ;
11498: LD_INT 2
11500: PPUSH
11501: LD_EXP 19
11505: PPUSH
11506: CALL_OW 383
// tmp = createhuman ;
11510: LD_ADDR_VAR 0 2
11514: PUSH
11515: CALL_OW 44
11519: ST_TO_ADDR
// ar_mech_ctrl = tmp ;
11520: LD_ADDR_LOC 12
11524: PUSH
11525: LD_VAR 0 2
11529: ST_TO_ADDR
// placehumaninunit ( tmp , ctrl_twr ) ;
11530: LD_VAR 0 2
11534: PPUSH
11535: LD_INT 24
11537: PPUSH
11538: CALL_OW 52
// setcargo ( nakladak , mat_artefact , 50 ) ;
11542: LD_INT 23
11544: PPUSH
11545: LD_INT 4
11547: PPUSH
11548: LD_INT 50
11550: PPUSH
11551: CALL_OW 290
// preparemechanic ( sex_male , 7 ) ;
11555: LD_INT 1
11557: PPUSH
11558: LD_INT 7
11560: PPUSH
11561: CALL_OW 383
// placehumaninunit ( createhuman , nakladak ) ;
11565: CALL_OW 44
11569: PPUSH
11570: LD_INT 23
11572: PPUSH
11573: CALL_OW 52
// vc_engine = engine_siberite ;
11577: LD_ADDR_OWVAR 39
11581: PUSH
11582: LD_INT 3
11584: ST_TO_ADDR
// vc_control = control_manual ;
11585: LD_ADDR_OWVAR 38
11589: PUSH
11590: LD_INT 1
11592: ST_TO_ADDR
// vc_chassis = arv1_ch ;
11593: LD_ADDR_OWVAR 37
11597: PUSH
11598: LD_EXP 20
11602: ST_TO_ADDR
// vc_weapon = arv1_wp ;
11603: LD_ADDR_OWVAR 40
11607: PUSH
11608: LD_EXP 21
11612: ST_TO_ADDR
// arv1 = createvehicle ;
11613: LD_ADDR_EXP 122
11617: PUSH
11618: CALL_OW 45
11622: ST_TO_ADDR
// setdir ( arv1 , 5 ) ;
11623: LD_EXP 122
11627: PPUSH
11628: LD_INT 5
11630: PPUSH
11631: CALL_OW 233
// placeunitxy ( arv1 , 128 , 38 , false ) ;
11635: LD_EXP 122
11639: PPUSH
11640: LD_INT 128
11642: PPUSH
11643: LD_INT 38
11645: PPUSH
11646: LD_INT 0
11648: PPUSH
11649: CALL_OW 48
// preparemechanic ( sex_male , arm1_sk ) ;
11653: LD_INT 1
11655: PPUSH
11656: LD_EXP 22
11660: PPUSH
11661: CALL_OW 383
// arm1 = createhuman ;
11665: LD_ADDR_EXP 123
11669: PUSH
11670: CALL_OW 44
11674: ST_TO_ADDR
// placehumaninunit ( arm1 , arv1 ) ;
11675: LD_EXP 123
11679: PPUSH
11680: LD_EXP 122
11684: PPUSH
11685: CALL_OW 52
// vc_chassis = arv2_ch ;
11689: LD_ADDR_OWVAR 37
11693: PUSH
11694: LD_EXP 23
11698: ST_TO_ADDR
// vc_weapon = arv2_wp ;
11699: LD_ADDR_OWVAR 40
11703: PUSH
11704: LD_EXP 24
11708: ST_TO_ADDR
// arv2 = createvehicle ;
11709: LD_ADDR_EXP 124
11713: PUSH
11714: CALL_OW 45
11718: ST_TO_ADDR
// setdir ( arv2 , 4 ) ;
11719: LD_EXP 124
11723: PPUSH
11724: LD_INT 4
11726: PPUSH
11727: CALL_OW 233
// placeunitxy ( arv2 , 141 , 89 , false ) ;
11731: LD_EXP 124
11735: PPUSH
11736: LD_INT 141
11738: PPUSH
11739: LD_INT 89
11741: PPUSH
11742: LD_INT 0
11744: PPUSH
11745: CALL_OW 48
// preparemechanic ( sex_male , arm2_sk ) ;
11749: LD_INT 1
11751: PPUSH
11752: LD_EXP 25
11756: PPUSH
11757: CALL_OW 383
// arm2 = createhuman ;
11761: LD_ADDR_EXP 125
11765: PUSH
11766: CALL_OW 44
11770: ST_TO_ADDR
// placehumaninunit ( arm2 , arv2 ) ;
11771: LD_EXP 125
11775: PPUSH
11776: LD_EXP 124
11780: PPUSH
11781: CALL_OW 52
// if difficulty = 2 then
11785: LD_OWVAR 67
11789: PUSH
11790: LD_INT 2
11792: EQUAL
11793: IFFALSE 11891
// begin vc_chassis = arv3_ch ;
11795: LD_ADDR_OWVAR 37
11799: PUSH
11800: LD_EXP 26
11804: ST_TO_ADDR
// vc_weapon = arv3_wp ;
11805: LD_ADDR_OWVAR 40
11809: PUSH
11810: LD_EXP 27
11814: ST_TO_ADDR
// arv3 = createvehicle ;
11815: LD_ADDR_EXP 126
11819: PUSH
11820: CALL_OW 45
11824: ST_TO_ADDR
// setdir ( arv3 , 3 ) ;
11825: LD_EXP 126
11829: PPUSH
11830: LD_INT 3
11832: PPUSH
11833: CALL_OW 233
// placeunitxy ( arv3 , 126 , 74 , false ) ;
11837: LD_EXP 126
11841: PPUSH
11842: LD_INT 126
11844: PPUSH
11845: LD_INT 74
11847: PPUSH
11848: LD_INT 0
11850: PPUSH
11851: CALL_OW 48
// preparemechanic ( sex_male , arm3_sk ) ;
11855: LD_INT 1
11857: PPUSH
11858: LD_EXP 28
11862: PPUSH
11863: CALL_OW 383
// arm3 = createhuman ;
11867: LD_ADDR_EXP 127
11871: PUSH
11872: CALL_OW 44
11876: ST_TO_ADDR
// placehumaninunit ( arm3 , arv3 ) ;
11877: LD_EXP 127
11881: PPUSH
11882: LD_EXP 126
11886: PPUSH
11887: CALL_OW 52
// end ; vc_chassis = arv4_ch ;
11891: LD_ADDR_OWVAR 37
11895: PUSH
11896: LD_EXP 29
11900: ST_TO_ADDR
// vc_weapon = arv4_wp ;
11901: LD_ADDR_OWVAR 40
11905: PUSH
11906: LD_EXP 30
11910: ST_TO_ADDR
// arv4 = createvehicle ;
11911: LD_ADDR_EXP 128
11915: PUSH
11916: CALL_OW 45
11920: ST_TO_ADDR
// setdir ( arv4 , 5 ) ;
11921: LD_EXP 128
11925: PPUSH
11926: LD_INT 5
11928: PPUSH
11929: CALL_OW 233
// placeunitxy ( arv4 , 121 , 41 , false ) ;
11933: LD_EXP 128
11937: PPUSH
11938: LD_INT 121
11940: PPUSH
11941: LD_INT 41
11943: PPUSH
11944: LD_INT 0
11946: PPUSH
11947: CALL_OW 48
// preparemechanic ( sex_male , arm4_sk ) ;
11951: LD_INT 1
11953: PPUSH
11954: LD_EXP 31
11958: PPUSH
11959: CALL_OW 383
// arm4 = createhuman ;
11963: LD_ADDR_EXP 129
11967: PUSH
11968: CALL_OW 44
11972: ST_TO_ADDR
// placehumaninunit ( arm4 , arv4 ) ;
11973: LD_EXP 129
11977: PPUSH
11978: LD_EXP 128
11982: PPUSH
11983: CALL_OW 52
// vc_engine = engine_solar ;
11987: LD_ADDR_OWVAR 39
11991: PUSH
11992: LD_INT 2
11994: ST_TO_ADDR
// vc_chassis = arv5_ch ;
11995: LD_ADDR_OWVAR 37
11999: PUSH
12000: LD_EXP 32
12004: ST_TO_ADDR
// vc_weapon = arv5_wp ;
12005: LD_ADDR_OWVAR 40
12009: PUSH
12010: LD_EXP 33
12014: ST_TO_ADDR
// arv5 = createvehicle ;
12015: LD_ADDR_EXP 130
12019: PUSH
12020: CALL_OW 45
12024: ST_TO_ADDR
// setdir ( arv5 , 0 ) ;
12025: LD_EXP 130
12029: PPUSH
12030: LD_INT 0
12032: PPUSH
12033: CALL_OW 233
// placeunitxy ( arv5 , 118 , 44 , false ) ;
12037: LD_EXP 130
12041: PPUSH
12042: LD_INT 118
12044: PPUSH
12045: LD_INT 44
12047: PPUSH
12048: LD_INT 0
12050: PPUSH
12051: CALL_OW 48
// preparemechanic ( sex_male , arm5_sk ) ;
12055: LD_INT 1
12057: PPUSH
12058: LD_EXP 34
12062: PPUSH
12063: CALL_OW 383
// arm5 = createhuman ;
12067: LD_ADDR_EXP 131
12071: PUSH
12072: CALL_OW 44
12076: ST_TO_ADDR
// placehumaninunit ( arm5 , arv5 ) ;
12077: LD_EXP 131
12081: PPUSH
12082: LD_EXP 130
12086: PPUSH
12087: CALL_OW 52
// vc_engine = engine_siberite ;
12091: LD_ADDR_OWVAR 39
12095: PUSH
12096: LD_INT 3
12098: ST_TO_ADDR
// vc_chassis = arv6_ch ;
12099: LD_ADDR_OWVAR 37
12103: PUSH
12104: LD_EXP 35
12108: ST_TO_ADDR
// vc_weapon = arv6_wp ;
12109: LD_ADDR_OWVAR 40
12113: PUSH
12114: LD_EXP 36
12118: ST_TO_ADDR
// arv6 = createvehicle ;
12119: LD_ADDR_EXP 132
12123: PUSH
12124: CALL_OW 45
12128: ST_TO_ADDR
// setdir ( arv6 , 5 ) ;
12129: LD_EXP 132
12133: PPUSH
12134: LD_INT 5
12136: PPUSH
12137: CALL_OW 233
// placeunitxy ( arv6 , 129 , 35 , false ) ;
12141: LD_EXP 132
12145: PPUSH
12146: LD_INT 129
12148: PPUSH
12149: LD_INT 35
12151: PPUSH
12152: LD_INT 0
12154: PPUSH
12155: CALL_OW 48
// preparemechanic ( sex_male , arm6_sk ) ;
12159: LD_INT 1
12161: PPUSH
12162: LD_EXP 37
12166: PPUSH
12167: CALL_OW 383
// arm6 = createhuman ;
12171: LD_ADDR_EXP 133
12175: PUSH
12176: CALL_OW 44
12180: ST_TO_ADDR
// placehumaninunit ( arm6 , arv6 ) ;
12181: LD_EXP 133
12185: PPUSH
12186: LD_EXP 132
12190: PPUSH
12191: CALL_OW 52
// comremember ( [ arv1 , arv2 , arv3 , arv4 , arv5 , arv6 ] ) ;
12195: LD_EXP 122
12199: PUSH
12200: LD_EXP 124
12204: PUSH
12205: LD_EXP 126
12209: PUSH
12210: LD_EXP 128
12214: PUSH
12215: LD_EXP 130
12219: PUSH
12220: LD_EXP 132
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: PPUSH
12233: CALL_OW 143
// vc_control = control_remote ;
12237: LD_ADDR_OWVAR 38
12241: PUSH
12242: LD_INT 2
12244: ST_TO_ADDR
// if difficulty > 2 then
12245: LD_OWVAR 67
12249: PUSH
12250: LD_INT 2
12252: GREATER
12253: IFFALSE 12421
// begin vc_chassis = arv7_ch ;
12255: LD_ADDR_OWVAR 37
12259: PUSH
12260: LD_EXP 38
12264: ST_TO_ADDR
// vc_weapon = arv7_wp ;
12265: LD_ADDR_OWVAR 40
12269: PUSH
12270: LD_EXP 39
12274: ST_TO_ADDR
// arv7 = createvehicle ;
12275: LD_ADDR_EXP 134
12279: PUSH
12280: CALL_OW 45
12284: ST_TO_ADDR
// setdir ( arv7 , 4 ) ;
12285: LD_EXP 134
12289: PPUSH
12290: LD_INT 4
12292: PPUSH
12293: CALL_OW 233
// placeunitxy ( arv7 , 136 , 88 , false ) ;
12297: LD_EXP 134
12301: PPUSH
12302: LD_INT 136
12304: PPUSH
12305: LD_INT 88
12307: PPUSH
12308: LD_INT 0
12310: PPUSH
12311: CALL_OW 48
// linkvehicletohuman ( arv7 , tmp ) ;
12315: LD_EXP 134
12319: PPUSH
12320: LD_VAR 0 2
12324: PPUSH
12325: CALL_OW 53
// vc_chassis = arv8_ch ;
12329: LD_ADDR_OWVAR 37
12333: PUSH
12334: LD_EXP 40
12338: ST_TO_ADDR
// vc_weapon = arv8_wp ;
12339: LD_ADDR_OWVAR 40
12343: PUSH
12344: LD_EXP 41
12348: ST_TO_ADDR
// arv8 = createvehicle ;
12349: LD_ADDR_EXP 135
12353: PUSH
12354: CALL_OW 45
12358: ST_TO_ADDR
// setdir ( arv8 , 3 ) ;
12359: LD_EXP 135
12363: PPUSH
12364: LD_INT 3
12366: PPUSH
12367: CALL_OW 233
// placeunitxy ( arv8 , 132 , 81 , false ) ;
12371: LD_EXP 135
12375: PPUSH
12376: LD_INT 132
12378: PPUSH
12379: LD_INT 81
12381: PPUSH
12382: LD_INT 0
12384: PPUSH
12385: CALL_OW 48
// linkvehicletohuman ( arv8 , tmp ) ;
12389: LD_EXP 135
12393: PPUSH
12394: LD_VAR 0 2
12398: PPUSH
12399: CALL_OW 53
// comremember ( [ arv7 , arv8 ] ) ;
12403: LD_EXP 134
12407: PUSH
12408: LD_EXP 135
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PPUSH
12417: CALL_OW 143
// end ; if difficulty > 2 then
12421: LD_OWVAR 67
12425: PUSH
12426: LD_INT 2
12428: GREATER
12429: IFFALSE 12523
// begin vc_chassis = arv10_ch ;
12431: LD_ADDR_OWVAR 37
12435: PUSH
12436: LD_EXP 44
12440: ST_TO_ADDR
// vc_weapon = arv10_wp ;
12441: LD_ADDR_OWVAR 40
12445: PUSH
12446: LD_EXP 45
12450: ST_TO_ADDR
// arv10 = createvehicle ;
12451: LD_ADDR_EXP 137
12455: PUSH
12456: CALL_OW 45
12460: ST_TO_ADDR
// setdir ( arv10 , 5 ) ;
12461: LD_EXP 137
12465: PPUSH
12466: LD_INT 5
12468: PPUSH
12469: CALL_OW 233
// placeunitxy ( arv10 , 125 , 40 , false ) ;
12473: LD_EXP 137
12477: PPUSH
12478: LD_INT 125
12480: PPUSH
12481: LD_INT 40
12483: PPUSH
12484: LD_INT 0
12486: PPUSH
12487: CALL_OW 48
// linkvehicletohuman ( arv10 , tmp ) ;
12491: LD_EXP 137
12495: PPUSH
12496: LD_VAR 0 2
12500: PPUSH
12501: CALL_OW 53
// comremember ( [ arv9 , arv10 ] ) ;
12505: LD_EXP 136
12509: PUSH
12510: LD_EXP 137
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: PPUSH
12519: CALL_OW 143
// end ; typitomybudovy = filterallunits ( [ [ f_side , ar ] , [ f_type , unit_building ] ] ) ;
12523: LD_ADDR_LOC 13
12527: PUSH
12528: LD_INT 22
12530: PUSH
12531: LD_EXP 3
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PUSH
12540: LD_INT 21
12542: PUSH
12543: LD_INT 3
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PPUSH
12554: CALL_OW 69
12558: ST_TO_ADDR
// hiddencamera ( 117 , 15 , ar ) ;
12559: LD_INT 117
12561: PPUSH
12562: LD_INT 15
12564: PPUSH
12565: LD_EXP 3
12569: PPUSH
12570: CALL_OW 244
// hiddencamera ( 111 , 18 , ar ) ;
12574: LD_INT 111
12576: PPUSH
12577: LD_INT 18
12579: PPUSH
12580: LD_EXP 3
12584: PPUSH
12585: CALL_OW 244
// hiddencamera ( 107 , 18 , ar ) ;
12589: LD_INT 107
12591: PPUSH
12592: LD_INT 18
12594: PPUSH
12595: LD_EXP 3
12599: PPUSH
12600: CALL_OW 244
// hiddencamera ( 108 , 23 , ar ) ;
12604: LD_INT 108
12606: PPUSH
12607: LD_INT 23
12609: PPUSH
12610: LD_EXP 3
12614: PPUSH
12615: CALL_OW 244
// hiddencamera ( 122 , 18 , ar ) ;
12619: LD_INT 122
12621: PPUSH
12622: LD_INT 18
12624: PPUSH
12625: LD_EXP 3
12629: PPUSH
12630: CALL_OW 244
// hiddencamera ( 102 , 22 , ar ) ;
12634: LD_INT 102
12636: PPUSH
12637: LD_INT 22
12639: PPUSH
12640: LD_EXP 3
12644: PPUSH
12645: CALL_OW 244
// hiddencamera ( 107 , 29 , ar ) ;
12649: LD_INT 107
12651: PPUSH
12652: LD_INT 29
12654: PPUSH
12655: LD_EXP 3
12659: PPUSH
12660: CALL_OW 244
// regid = mcregistry ( ar , [ [ mc_reg_area_to_guard , area4reg ] , [ mc_reg_refresh_time , 13 ] ] ) ;
12664: LD_ADDR_LOC 14
12668: PUSH
12669: LD_EXP 3
12673: PPUSH
12674: LD_INT 2
12676: PUSH
12677: LD_INT 13
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PUSH
12684: LD_INT 1
12686: PUSH
12687: LD_INT 13
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PPUSH
12698: CALL_OW 399
12702: ST_TO_ADDR
// defid = mcdefend ( 100 , regid , [ ars3 , ars4 , ars5 , arm1 , arm4 , arm5 , arm6 , ars9 , ars10 ] , [ [ mc_area_dont_leave , area4reg ] ] ) ;
12703: LD_ADDR_LOC 15
12707: PUSH
12708: LD_INT 100
12710: PPUSH
12711: LD_LOC 14
12715: PPUSH
12716: LD_EXP 11
12720: PUSH
12721: LD_EXP 12
12725: PUSH
12726: LD_EXP 13
12730: PUSH
12731: LD_EXP 123
12735: PUSH
12736: LD_EXP 129
12740: PUSH
12741: LD_EXP 131
12745: PUSH
12746: LD_EXP 133
12750: PUSH
12751: LD_EXP 17
12755: PUSH
12756: LD_EXP 18
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: PPUSH
12772: LD_INT 2
12774: PUSH
12775: LD_INT 13
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PUSH
12782: EMPTY
12783: LIST
12784: PPUSH
12785: CALL_OW 401
12789: ST_TO_ADDR
// end ;
12790: LD_VAR 0 1
12794: RET
// var regid , defid ; var act_time ; export function update_display ( flag ) ; var tmp ; begin
12795: LD_INT 0
12797: PPUSH
12798: PPUSH
// tmp = tick div ( 35 * 60 ) ;
12799: LD_ADDR_VAR 0 3
12803: PUSH
12804: LD_OWVAR 1
12808: PUSH
12809: LD_INT 35
12811: PUSH
12812: LD_INT 60
12814: MUL
12815: DIV
12816: ST_TO_ADDR
// act_time = tmp * 35 * 60 ;
12817: LD_ADDR_LOC 16
12821: PUSH
12822: LD_VAR 0 3
12826: PUSH
12827: LD_INT 35
12829: MUL
12830: PUSH
12831: LD_INT 60
12833: MUL
12834: ST_TO_ADDR
// display_strings = [ #Am17-1 , arab_artef_zdrh + 25 25$0 - act_time ] ;
12835: LD_ADDR_OWVAR 47
12839: PUSH
12840: LD_STRING #Am17-1
12842: PUSH
12843: LD_EXP 75
12847: PUSH
12848: LD_INT 52500
12850: PLUS
12851: PUSH
12852: LD_LOC 16
12856: MINUS
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: ST_TO_ADDR
// if flag then
12862: LD_VAR 0 1
12866: IFFALSE 12871
// enable ( 37 ) ;
12868: LD_INT 37
12870: ENABLE_MARKED
// end ;
12871: LD_VAR 0 2
12875: RET
// every 1 1$0 marked 37 do
12876: GO 12878
12878: DISABLE
// begin update_display ( 0 ) ;
12879: LD_INT 0
12881: PPUSH
12882: CALL 12795 0 1
// enable ;
12886: ENABLE
// end ;
12887: END
// function isinareaex ( list , area ) ; var tmp ; begin
12888: LD_INT 0
12890: PPUSH
12891: PPUSH
// for tmp in list do
12892: LD_ADDR_VAR 0 4
12896: PUSH
12897: LD_VAR 0 1
12901: PUSH
12902: FOR_IN
12903: IFFALSE 12936
// if not isinarea ( tmp , area ) then
12905: LD_VAR 0 4
12909: PPUSH
12910: LD_VAR 0 2
12914: PPUSH
12915: CALL_OW 308
12919: NOT
12920: IFFALSE 12934
// begin result = false ;
12922: LD_ADDR_VAR 0 3
12926: PUSH
12927: LD_INT 0
12929: ST_TO_ADDR
// exit ;
12930: POP
12931: POP
12932: GO 12946
// end ;
12934: GO 12902
12936: POP
12937: POP
// result = true ;
12938: LD_ADDR_VAR 0 3
12942: PUSH
12943: LD_INT 1
12945: ST_TO_ADDR
// end ;
12946: LD_VAR 0 3
12950: RET
// every 0 0$1 marked 07 do var tmp , tmp2 ;
12951: GO 12953
12953: DISABLE
12954: LD_INT 0
12956: PPUSH
12957: PPUSH
// begin wait ( 7 7$0 ) ;
12958: LD_INT 14700
12960: PPUSH
12961: CALL_OW 67
// uc_side = ar ;
12965: LD_ADDR_OWVAR 20
12969: PUSH
12970: LD_EXP 3
12974: ST_TO_ADDR
// uc_nation = nation_arabian ;
12975: LD_ADDR_OWVAR 21
12979: PUSH
12980: LD_INT 2
12982: ST_TO_ADDR
// vc_engine = engine_siberite ;
12983: LD_ADDR_OWVAR 39
12987: PUSH
12988: LD_INT 3
12990: ST_TO_ADDR
// vc_control = control_manual ;
12991: LD_ADDR_OWVAR 38
12995: PUSH
12996: LD_INT 1
12998: ST_TO_ADDR
// tmp2 = [ ] ;
12999: LD_ADDR_VAR 0 2
13003: PUSH
13004: EMPTY
13005: ST_TO_ADDR
// vc_chassis = arv1_ch ;
13006: LD_ADDR_OWVAR 37
13010: PUSH
13011: LD_EXP 20
13015: ST_TO_ADDR
// vc_weapon = arv1_wp ;
13016: LD_ADDR_OWVAR 40
13020: PUSH
13021: LD_EXP 21
13025: ST_TO_ADDR
// tmp = createvehicle ;
13026: LD_ADDR_VAR 0 1
13030: PUSH
13031: CALL_OW 45
13035: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
13036: LD_VAR 0 1
13040: PPUSH
13041: LD_INT 5
13043: PPUSH
13044: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
13048: LD_VAR 0 1
13052: PPUSH
13053: LD_INT 11
13055: PPUSH
13056: LD_INT 0
13058: PPUSH
13059: CALL_OW 49
// preparemechanic ( sex_male , arm1_sk ) ;
13063: LD_INT 1
13065: PPUSH
13066: LD_EXP 22
13070: PPUSH
13071: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
13075: CALL_OW 44
13079: PPUSH
13080: LD_VAR 0 1
13084: PPUSH
13085: CALL_OW 52
// tmp2 = tmp2 ^ [ tmp ] ;
13089: LD_ADDR_VAR 0 2
13093: PUSH
13094: LD_VAR 0 2
13098: PUSH
13099: LD_VAR 0 1
13103: PUSH
13104: EMPTY
13105: LIST
13106: ADD
13107: ST_TO_ADDR
// vc_chassis = arv2_ch ;
13108: LD_ADDR_OWVAR 37
13112: PUSH
13113: LD_EXP 23
13117: ST_TO_ADDR
// vc_weapon = arv2_wp ;
13118: LD_ADDR_OWVAR 40
13122: PUSH
13123: LD_EXP 24
13127: ST_TO_ADDR
// tmp = createvehicle ;
13128: LD_ADDR_VAR 0 1
13132: PUSH
13133: CALL_OW 45
13137: ST_TO_ADDR
// setdir ( tmp , 4 ) ;
13138: LD_VAR 0 1
13142: PPUSH
13143: LD_INT 4
13145: PPUSH
13146: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
13150: LD_VAR 0 1
13154: PPUSH
13155: LD_INT 11
13157: PPUSH
13158: LD_INT 0
13160: PPUSH
13161: CALL_OW 49
// preparemechanic ( sex_male , arm2_sk ) ;
13165: LD_INT 1
13167: PPUSH
13168: LD_EXP 25
13172: PPUSH
13173: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
13177: CALL_OW 44
13181: PPUSH
13182: LD_VAR 0 1
13186: PPUSH
13187: CALL_OW 52
// tmp2 = tmp2 ^ [ tmp ] ;
13191: LD_ADDR_VAR 0 2
13195: PUSH
13196: LD_VAR 0 2
13200: PUSH
13201: LD_VAR 0 1
13205: PUSH
13206: EMPTY
13207: LIST
13208: ADD
13209: ST_TO_ADDR
// vc_chassis = arv3_ch ;
13210: LD_ADDR_OWVAR 37
13214: PUSH
13215: LD_EXP 26
13219: ST_TO_ADDR
// vc_weapon = arv3_wp ;
13220: LD_ADDR_OWVAR 40
13224: PUSH
13225: LD_EXP 27
13229: ST_TO_ADDR
// tmp = createvehicle ;
13230: LD_ADDR_VAR 0 1
13234: PUSH
13235: CALL_OW 45
13239: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
13240: LD_VAR 0 1
13244: PPUSH
13245: LD_INT 5
13247: PPUSH
13248: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
13252: LD_VAR 0 1
13256: PPUSH
13257: LD_INT 11
13259: PPUSH
13260: LD_INT 0
13262: PPUSH
13263: CALL_OW 49
// preparemechanic ( sex_male , arm3_sk ) ;
13267: LD_INT 1
13269: PPUSH
13270: LD_EXP 28
13274: PPUSH
13275: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
13279: CALL_OW 44
13283: PPUSH
13284: LD_VAR 0 1
13288: PPUSH
13289: CALL_OW 52
// tmp2 = tmp2 ^ [ tmp ] ;
13293: LD_ADDR_VAR 0 2
13297: PUSH
13298: LD_VAR 0 2
13302: PUSH
13303: LD_VAR 0 1
13307: PUSH
13308: EMPTY
13309: LIST
13310: ADD
13311: ST_TO_ADDR
// vc_chassis = arv4_ch ;
13312: LD_ADDR_OWVAR 37
13316: PUSH
13317: LD_EXP 29
13321: ST_TO_ADDR
// vc_weapon = arv4_wp ;
13322: LD_ADDR_OWVAR 40
13326: PUSH
13327: LD_EXP 30
13331: ST_TO_ADDR
// tmp = createvehicle ;
13332: LD_ADDR_VAR 0 1
13336: PUSH
13337: CALL_OW 45
13341: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
13342: LD_VAR 0 1
13346: PPUSH
13347: LD_INT 5
13349: PPUSH
13350: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
13354: LD_VAR 0 1
13358: PPUSH
13359: LD_INT 11
13361: PPUSH
13362: LD_INT 0
13364: PPUSH
13365: CALL_OW 49
// preparemechanic ( sex_male , arm4_sk ) ;
13369: LD_INT 1
13371: PPUSH
13372: LD_EXP 31
13376: PPUSH
13377: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
13381: CALL_OW 44
13385: PPUSH
13386: LD_VAR 0 1
13390: PPUSH
13391: CALL_OW 52
// tmp2 = tmp2 ^ [ tmp ] ;
13395: LD_ADDR_VAR 0 2
13399: PUSH
13400: LD_VAR 0 2
13404: PUSH
13405: LD_VAR 0 1
13409: PUSH
13410: EMPTY
13411: LIST
13412: ADD
13413: ST_TO_ADDR
// vc_chassis = arv5_ch ;
13414: LD_ADDR_OWVAR 37
13418: PUSH
13419: LD_EXP 32
13423: ST_TO_ADDR
// vc_weapon = arv5_wp ;
13424: LD_ADDR_OWVAR 40
13428: PUSH
13429: LD_EXP 33
13433: ST_TO_ADDR
// tmp = createvehicle ;
13434: LD_ADDR_VAR 0 1
13438: PUSH
13439: CALL_OW 45
13443: ST_TO_ADDR
// setdir ( tmp , 4 ) ;
13444: LD_VAR 0 1
13448: PPUSH
13449: LD_INT 4
13451: PPUSH
13452: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
13456: LD_VAR 0 1
13460: PPUSH
13461: LD_INT 11
13463: PPUSH
13464: LD_INT 0
13466: PPUSH
13467: CALL_OW 49
// preparemechanic ( sex_male , arm5_sk ) ;
13471: LD_INT 1
13473: PPUSH
13474: LD_EXP 34
13478: PPUSH
13479: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
13483: CALL_OW 44
13487: PPUSH
13488: LD_VAR 0 1
13492: PPUSH
13493: CALL_OW 52
// tmp2 = tmp2 ^ [ tmp ] ;
13497: LD_ADDR_VAR 0 2
13501: PUSH
13502: LD_VAR 0 2
13506: PUSH
13507: LD_VAR 0 1
13511: PUSH
13512: EMPTY
13513: LIST
13514: ADD
13515: ST_TO_ADDR
// vc_chassis = arv6_ch ;
13516: LD_ADDR_OWVAR 37
13520: PUSH
13521: LD_EXP 35
13525: ST_TO_ADDR
// vc_weapon = arv6_wp ;
13526: LD_ADDR_OWVAR 40
13530: PUSH
13531: LD_EXP 36
13535: ST_TO_ADDR
// tmp = createvehicle ;
13536: LD_ADDR_VAR 0 1
13540: PUSH
13541: CALL_OW 45
13545: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
13546: LD_VAR 0 1
13550: PPUSH
13551: LD_INT 5
13553: PPUSH
13554: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
13558: LD_VAR 0 1
13562: PPUSH
13563: LD_INT 11
13565: PPUSH
13566: LD_INT 0
13568: PPUSH
13569: CALL_OW 49
// preparemechanic ( sex_male , arm6_sk ) ;
13573: LD_INT 1
13575: PPUSH
13576: LD_EXP 37
13580: PPUSH
13581: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
13585: CALL_OW 44
13589: PPUSH
13590: LD_VAR 0 1
13594: PPUSH
13595: CALL_OW 52
// tmp2 = tmp2 ^ [ tmp ] ;
13599: LD_ADDR_VAR 0 2
13603: PUSH
13604: LD_VAR 0 2
13608: PUSH
13609: LD_VAR 0 1
13613: PUSH
13614: EMPTY
13615: LIST
13616: ADD
13617: ST_TO_ADDR
// vc_control = control_remote ;
13618: LD_ADDR_OWVAR 38
13622: PUSH
13623: LD_INT 2
13625: ST_TO_ADDR
// if difficulty >= 2 then
13626: LD_OWVAR 67
13630: PUSH
13631: LD_INT 2
13633: GREATEREQUAL
13634: IFFALSE 13816
// begin vc_chassis = arv7_ch ;
13636: LD_ADDR_OWVAR 37
13640: PUSH
13641: LD_EXP 38
13645: ST_TO_ADDR
// vc_weapon = arv7_wp ;
13646: LD_ADDR_OWVAR 40
13650: PUSH
13651: LD_EXP 39
13655: ST_TO_ADDR
// tmp = createvehicle ;
13656: LD_ADDR_VAR 0 1
13660: PUSH
13661: CALL_OW 45
13665: ST_TO_ADDR
// setdir ( tmp , 4 ) ;
13666: LD_VAR 0 1
13670: PPUSH
13671: LD_INT 4
13673: PPUSH
13674: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
13678: LD_VAR 0 1
13682: PPUSH
13683: LD_INT 11
13685: PPUSH
13686: LD_INT 0
13688: PPUSH
13689: CALL_OW 49
// linkvehicletohuman ( tmp , ar_mech_ctrl ) ;
13693: LD_VAR 0 1
13697: PPUSH
13698: LD_LOC 12
13702: PPUSH
13703: CALL_OW 53
// tmp2 = tmp2 ^ [ tmp ] ;
13707: LD_ADDR_VAR 0 2
13711: PUSH
13712: LD_VAR 0 2
13716: PUSH
13717: LD_VAR 0 1
13721: PUSH
13722: EMPTY
13723: LIST
13724: ADD
13725: ST_TO_ADDR
// vc_chassis = arv8_ch ;
13726: LD_ADDR_OWVAR 37
13730: PUSH
13731: LD_EXP 40
13735: ST_TO_ADDR
// vc_weapon = arv8_wp ;
13736: LD_ADDR_OWVAR 40
13740: PUSH
13741: LD_EXP 41
13745: ST_TO_ADDR
// tmp = createvehicle ;
13746: LD_ADDR_VAR 0 1
13750: PUSH
13751: CALL_OW 45
13755: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
13756: LD_VAR 0 1
13760: PPUSH
13761: LD_INT 5
13763: PPUSH
13764: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
13768: LD_VAR 0 1
13772: PPUSH
13773: LD_INT 11
13775: PPUSH
13776: LD_INT 0
13778: PPUSH
13779: CALL_OW 49
// linkvehicletohuman ( tmp , ar_mech_ctrl ) ;
13783: LD_VAR 0 1
13787: PPUSH
13788: LD_LOC 12
13792: PPUSH
13793: CALL_OW 53
// tmp2 = tmp2 ^ [ tmp ] ;
13797: LD_ADDR_VAR 0 2
13801: PUSH
13802: LD_VAR 0 2
13806: PUSH
13807: LD_VAR 0 1
13811: PUSH
13812: EMPTY
13813: LIST
13814: ADD
13815: ST_TO_ADDR
// end ; if difficulty > 2 then
13816: LD_OWVAR 67
13820: PUSH
13821: LD_INT 2
13823: GREATER
13824: IFFALSE 14006
// begin vc_chassis = arv9_ch ;
13826: LD_ADDR_OWVAR 37
13830: PUSH
13831: LD_EXP 42
13835: ST_TO_ADDR
// vc_weapon = arv9_wp ;
13836: LD_ADDR_OWVAR 40
13840: PUSH
13841: LD_EXP 43
13845: ST_TO_ADDR
// tmp = createvehicle ;
13846: LD_ADDR_VAR 0 1
13850: PUSH
13851: CALL_OW 45
13855: ST_TO_ADDR
// setdir ( tmp , 4 ) ;
13856: LD_VAR 0 1
13860: PPUSH
13861: LD_INT 4
13863: PPUSH
13864: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
13868: LD_VAR 0 1
13872: PPUSH
13873: LD_INT 11
13875: PPUSH
13876: LD_INT 0
13878: PPUSH
13879: CALL_OW 49
// linkvehicletohuman ( tmp , ar_mech_ctrl ) ;
13883: LD_VAR 0 1
13887: PPUSH
13888: LD_LOC 12
13892: PPUSH
13893: CALL_OW 53
// tmp2 = tmp2 ^ [ tmp ] ;
13897: LD_ADDR_VAR 0 2
13901: PUSH
13902: LD_VAR 0 2
13906: PUSH
13907: LD_VAR 0 1
13911: PUSH
13912: EMPTY
13913: LIST
13914: ADD
13915: ST_TO_ADDR
// vc_chassis = arv10_ch ;
13916: LD_ADDR_OWVAR 37
13920: PUSH
13921: LD_EXP 44
13925: ST_TO_ADDR
// vc_weapon = arv10_wp ;
13926: LD_ADDR_OWVAR 40
13930: PUSH
13931: LD_EXP 45
13935: ST_TO_ADDR
// tmp = createvehicle ;
13936: LD_ADDR_VAR 0 1
13940: PUSH
13941: CALL_OW 45
13945: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
13946: LD_VAR 0 1
13950: PPUSH
13951: LD_INT 5
13953: PPUSH
13954: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
13958: LD_VAR 0 1
13962: PPUSH
13963: LD_INT 11
13965: PPUSH
13966: LD_INT 0
13968: PPUSH
13969: CALL_OW 49
// linkvehicletohuman ( tmp , ar_mech_ctrl ) ;
13973: LD_VAR 0 1
13977: PPUSH
13978: LD_LOC 12
13982: PPUSH
13983: CALL_OW 53
// tmp2 = tmp2 ^ [ tmp ] ;
13987: LD_ADDR_VAR 0 2
13991: PUSH
13992: LD_VAR 0 2
13996: PUSH
13997: LD_VAR 0 1
14001: PUSH
14002: EMPTY
14003: LIST
14004: ADD
14005: ST_TO_ADDR
// end ; commovetoarea ( tmp2 , wayp ) ;
14006: LD_VAR 0 2
14010: PPUSH
14011: LD_INT 12
14013: PPUSH
14014: CALL_OW 113
// tmp = 1 ;
14018: LD_ADDR_VAR 0 1
14022: PUSH
14023: LD_INT 1
14025: ST_TO_ADDR
// while not isinareaex ( tmp2 , wayp ) do
14026: LD_VAR 0 2
14030: PPUSH
14031: LD_INT 12
14033: PPUSH
14034: CALL 12888 0 2
14038: NOT
14039: IFFALSE 14090
// begin wait ( 0 0$1 ) ;
14041: LD_INT 35
14043: PPUSH
14044: CALL_OW 67
// tmp = tmp + 1 ;
14048: LD_ADDR_VAR 0 1
14052: PUSH
14053: LD_VAR 0 1
14057: PUSH
14058: LD_INT 1
14060: PLUS
14061: ST_TO_ADDR
// if ( tmp mod 5 ) = 0 then
14062: LD_VAR 0 1
14066: PUSH
14067: LD_INT 5
14069: MOD
14070: PUSH
14071: LD_INT 0
14073: EQUAL
14074: IFFALSE 14088
// commovetoarea ( tmp2 , wayp ) ;
14076: LD_VAR 0 2
14080: PPUSH
14081: LD_INT 12
14083: PPUSH
14084: CALL_OW 113
// end ;
14088: GO 14026
// comagressivemove ( tmp2 , 61 , 50 ) ;
14090: LD_VAR 0 2
14094: PPUSH
14095: LD_INT 61
14097: PPUSH
14098: LD_INT 50
14100: PPUSH
14101: CALL_OW 114
// end ;
14105: PPOPN 2
14107: END
// every 25 25$0 do
14108: GO 14110
14110: DISABLE
// begin wait ( arab_artef_zdrh ) ;
14111: LD_EXP 75
14115: PPUSH
14116: CALL_OW 67
// commovexy ( nakladak , 161 , 87 ) ;
14120: LD_INT 23
14122: PPUSH
14123: LD_INT 161
14125: PPUSH
14126: LD_INT 87
14128: PPUSH
14129: CALL_OW 111
// wait ( 0 0$5 ) ;
14133: LD_INT 175
14135: PPUSH
14136: CALL_OW 67
// destroyunit ( nakladak ) ;
14140: LD_INT 23
14142: PPUSH
14143: CALL_OW 65
// youlost ( Destroyed ) ;
14147: LD_STRING Destroyed
14149: PPUSH
14150: CALL_OW 104
// end ;
14154: END
// on vehiclecaptured ( vehnew , vehold , origside , hum ) do if vehold = nakladak then
14155: LD_VAR 0 2
14159: PUSH
14160: LD_INT 23
14162: EQUAL
14163: IFFALSE 14173
// koncime = true ;
14165: LD_ADDR_EXP 77
14169: PUSH
14170: LD_INT 1
14172: ST_TO_ADDR
14173: PPOPN 4
14175: END
// on artifactloaded ( un , size ) marked 15 do if getside ( un ) = al then
14176: LD_VAR 0 1
14180: PPUSH
14181: CALL_OW 255
14185: PUSH
14186: LD_EXP 1
14190: EQUAL
14191: IFFALSE 14201
// koncime = true ;
14193: LD_ADDR_EXP 77
14197: PUSH
14198: LD_INT 1
14200: ST_TO_ADDR
14201: PPOPN 2
14203: END
// every 0 0$1 trigger koncime or base_out or artef_out do var un ;
14204: LD_EXP 77
14208: PUSH
14209: LD_EXP 79
14213: OR
14214: PUSH
14215: LD_EXP 78
14219: OR
14220: IFFALSE 14647
14222: GO 14224
14224: DISABLE
14225: LD_INT 0
14227: PPUSH
// begin wait ( [ 0 0$10 , 0 0$5 , 0 0$0 ] [ difficulty ] ) ;
14228: LD_INT 350
14230: PUSH
14231: LD_INT 175
14233: PUSH
14234: LD_INT 0
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: LIST
14241: PUSH
14242: LD_OWVAR 67
14246: ARRAY
14247: PPUSH
14248: CALL_OW 67
// if IsPlaced ( Abdul ) and IsLive ( Abdul ) then
14252: LD_EXP 121
14256: PPUSH
14257: CALL_OW 305
14261: PUSH
14262: LD_EXP 121
14266: PPUSH
14267: CALL_OW 300
14271: AND
14272: IFFALSE 14396
// begin repeat wait ( 0 0$1 ) ;
14274: LD_INT 35
14276: PPUSH
14277: CALL_OW 67
// if IsDead ( Abdul ) then
14281: LD_EXP 121
14285: PPUSH
14286: CALL_OW 301
14290: IFFALSE 14294
// break ;
14292: GO 14389
// if IsInUnit ( Abdul ) > 0 then
14294: LD_EXP 121
14298: PPUSH
14299: CALL_OW 310
14303: PUSH
14304: LD_INT 0
14306: GREATER
14307: IFFALSE 14326
// un = IsInUnit ( Abdul ) else
14309: LD_ADDR_VAR 0 1
14313: PUSH
14314: LD_EXP 121
14318: PPUSH
14319: CALL_OW 310
14323: ST_TO_ADDR
14324: GO 14336
// un = Abdul ;
14326: LD_ADDR_VAR 0 1
14330: PUSH
14331: LD_EXP 121
14335: ST_TO_ADDR
// if GetDistUnitXY ( un , 167 , 97 ) <= 2 then
14336: LD_VAR 0 1
14340: PPUSH
14341: LD_INT 167
14343: PPUSH
14344: LD_INT 97
14346: PPUSH
14347: CALL_OW 297
14351: PUSH
14352: LD_INT 2
14354: LESSEQUAL
14355: IFFALSE 14370
// begin RemoveUnit ( un ) ;
14357: LD_VAR 0 1
14361: PPUSH
14362: CALL_OW 64
// break ;
14366: GO 14389
// end else
14368: GO 14385
// ComMoveXY ( un , 167 , 97 ) ;
14370: LD_VAR 0 1
14374: PPUSH
14375: LD_INT 167
14377: PPUSH
14378: LD_INT 97
14380: PPUSH
14381: CALL_OW 111
// until false ;
14385: LD_INT 0
14387: IFFALSE 14274
// wait ( 0 0$2 ) ;
14389: LD_INT 70
14391: PPUSH
14392: CALL_OW 67
// end ; while IsPlaced ( abduluv ) and IsLive ( abduluv ) do
14396: LD_INT 22
14398: PPUSH
14399: CALL_OW 305
14403: PUSH
14404: LD_INT 22
14406: PPUSH
14407: CALL_OW 300
14411: AND
14412: IFFALSE 14423
// wait ( 0 0$1 ) ;
14414: LD_INT 35
14416: PPUSH
14417: CALL_OW 67
14421: GO 14396
// if isdead ( abdul ) then
14423: LD_EXP 121
14427: PPUSH
14428: CALL_OW 301
14432: IFFALSE 14446
// addmedal ( Abdul , 1 ) else
14434: LD_STRING Abdul
14436: PPUSH
14437: LD_INT 1
14439: PPUSH
14440: CALL_OW 101
14444: GO 14457
// addmedal ( Abdul , - 1 ) ;
14446: LD_STRING Abdul
14448: PPUSH
14449: LD_INT 1
14451: NEG
14452: PPUSH
14453: CALL_OW 101
// if isdead ( abduluv ) then
14457: LD_INT 22
14459: PPUSH
14460: CALL_OW 301
14464: IFFALSE 14478
// addmedal ( Mast , 1 ) else
14466: LD_STRING Mast
14468: PPUSH
14469: LD_INT 1
14471: PPUSH
14472: CALL_OW 101
14476: GO 14489
// addmedal ( Mast , - 1 ) ;
14478: LD_STRING Mast
14480: PPUSH
14481: LD_INT 1
14483: NEG
14484: PPUSH
14485: CALL_OW 101
// if gettech ( tech_laser , al ) = state_researched then
14489: LD_INT 10
14491: PPUSH
14492: LD_EXP 1
14496: PPUSH
14497: CALL_OW 321
14501: PUSH
14502: LD_INT 2
14504: EQUAL
14505: IFFALSE 14519
// addmedal ( Laser , 1 ) else
14507: LD_STRING Laser
14509: PPUSH
14510: LD_INT 1
14512: PPUSH
14513: CALL_OW 101
14517: GO 14530
// addmedal ( Laser , - 1 ) ;
14519: LD_STRING Laser
14521: PPUSH
14522: LD_INT 1
14524: NEG
14525: PPUSH
14526: CALL_OW 101
// SA_EndMission ( 4 , 6 , isdead ( abdul ) , isdead ( abduluv ) , gettech ( tech_laser , al ) = state_researched ) ;
14530: LD_INT 4
14532: PPUSH
14533: LD_INT 6
14535: PPUSH
14536: LD_EXP 121
14540: PPUSH
14541: CALL_OW 301
14545: PPUSH
14546: LD_INT 22
14548: PPUSH
14549: CALL_OW 301
14553: PPUSH
14554: LD_INT 10
14556: PPUSH
14557: LD_EXP 1
14561: PPUSH
14562: CALL_OW 321
14566: PUSH
14567: LD_INT 2
14569: EQUAL
14570: PPUSH
14571: CALL 18287 0 5
// givemedals ( Main ) ;
14575: LD_STRING Main
14577: PPUSH
14578: CALL_OW 102
// rewardpeople ( filterallunits ( [ [ f_alive ] , [ f_side , al ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ) ;
14582: LD_INT 51
14584: PUSH
14585: EMPTY
14586: LIST
14587: PUSH
14588: LD_INT 22
14590: PUSH
14591: LD_EXP 1
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PUSH
14600: LD_INT 21
14602: PUSH
14603: LD_INT 1
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: PUSH
14610: LD_INT 3
14612: PUSH
14613: LD_INT 23
14615: PUSH
14616: LD_INT 0
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: PPUSH
14630: CALL_OW 69
14634: PPUSH
14635: CALL_OW 43
// saveitall ;
14639: CALL 14650 0 0
// youwin ;
14643: CALL_OW 103
// end ;
14647: PPOPN 1
14649: END
// export function saveitall ; var bz , tmz , tmzo , smejdi ; begin
14650: LD_INT 0
14652: PPUSH
14653: PPUSH
14654: PPUSH
14655: PPUSH
14656: PPUSH
// savevariable ( vyjednavalo_se , NegotiationsOffered ) ;
14657: LD_EXP 82
14661: PPUSH
14662: LD_STRING NegotiationsOffered
14664: PPUSH
14665: CALL_OW 39
// smejdi = [ burlak , belkov , gnyevko , kiril , kovalyuk , scholtze , kuzmov , karam , petrov , gleb , petros , lipshchin , titov , dolgov , xavier , oblukov , kozlov , kapitsova , gossud , glad , jmm , roth , bobby , brown , connie , cornel , cyrus , denis , lucy , frank , gary , lisa , simms , yamoko ] ;
14669: LD_ADDR_VAR 0 5
14673: PUSH
14674: LD_EXP 83
14678: PUSH
14679: LD_EXP 84
14683: PUSH
14684: LD_EXP 85
14688: PUSH
14689: LD_EXP 86
14693: PUSH
14694: LD_EXP 87
14698: PUSH
14699: LD_EXP 88
14703: PUSH
14704: LD_EXP 89
14708: PUSH
14709: LD_EXP 90
14713: PUSH
14714: LD_EXP 91
14718: PUSH
14719: LD_EXP 92
14723: PUSH
14724: LD_EXP 93
14728: PUSH
14729: LD_EXP 94
14733: PUSH
14734: LD_EXP 95
14738: PUSH
14739: LD_EXP 96
14743: PUSH
14744: LD_EXP 97
14748: PUSH
14749: LD_EXP 98
14753: PUSH
14754: LD_EXP 99
14758: PUSH
14759: LD_EXP 100
14763: PUSH
14764: LD_EXP 101
14768: PUSH
14769: LD_EXP 104
14773: PUSH
14774: LD_EXP 105
14778: PUSH
14779: LD_EXP 106
14783: PUSH
14784: LD_EXP 107
14788: PUSH
14789: LD_EXP 108
14793: PUSH
14794: LD_EXP 109
14798: PUSH
14799: LD_EXP 110
14803: PUSH
14804: LD_EXP 111
14808: PUSH
14809: LD_EXP 112
14813: PUSH
14814: LD_EXP 113
14818: PUSH
14819: LD_EXP 114
14823: PUSH
14824: LD_EXP 115
14828: PUSH
14829: LD_EXP 116
14833: PUSH
14834: LD_EXP 117
14838: PUSH
14839: LD_EXP 118
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: ST_TO_ADDR
// savecharacters ( glad , Gladstone ) ;
14880: LD_EXP 104
14884: PPUSH
14885: LD_STRING Gladstone
14887: PPUSH
14888: CALL_OW 38
// savecharacters ( jmm , JMM ) ;
14892: LD_EXP 105
14896: PPUSH
14897: LD_STRING JMM
14899: PPUSH
14900: CALL_OW 38
// savecharacters ( roth , Roth ) ;
14904: LD_EXP 106
14908: PPUSH
14909: LD_STRING Roth
14911: PPUSH
14912: CALL_OW 38
// savecharacters ( bobby , Bobby ) ;
14916: LD_EXP 107
14920: PPUSH
14921: LD_STRING Bobby
14923: PPUSH
14924: CALL_OW 38
// savecharacters ( brown , Brown ) ;
14928: LD_EXP 108
14932: PPUSH
14933: LD_STRING Brown
14935: PPUSH
14936: CALL_OW 38
// savecharacters ( connie , Connie ) ;
14940: LD_EXP 109
14944: PPUSH
14945: LD_STRING Connie
14947: PPUSH
14948: CALL_OW 38
// savecharacters ( cornel , Cornell ) ;
14952: LD_EXP 110
14956: PPUSH
14957: LD_STRING Cornell
14959: PPUSH
14960: CALL_OW 38
// savecharacters ( cyrus , Cyrus ) ;
14964: LD_EXP 111
14968: PPUSH
14969: LD_STRING Cyrus
14971: PPUSH
14972: CALL_OW 38
// savecharacters ( denis , Peterson ) ;
14976: LD_EXP 112
14980: PPUSH
14981: LD_STRING Peterson
14983: PPUSH
14984: CALL_OW 38
// savecharacters ( lucy , Donaldson ) ;
14988: LD_EXP 113
14992: PPUSH
14993: LD_STRING Donaldson
14995: PPUSH
14996: CALL_OW 38
// savecharacters ( frank , Frank ) ;
15000: LD_EXP 114
15004: PPUSH
15005: LD_STRING Frank
15007: PPUSH
15008: CALL_OW 38
// savecharacters ( gary , Gary ) ;
15012: LD_EXP 115
15016: PPUSH
15017: LD_STRING Gary
15019: PPUSH
15020: CALL_OW 38
// savecharacters ( lisa , Lisa ) ;
15024: LD_EXP 116
15028: PPUSH
15029: LD_STRING Lisa
15031: PPUSH
15032: CALL_OW 38
// savecharacters ( simms , Simms ) ;
15036: LD_EXP 117
15040: PPUSH
15041: LD_STRING Simms
15043: PPUSH
15044: CALL_OW 38
// savecharacters ( yamoko , Yamoko ) ;
15048: LD_EXP 118
15052: PPUSH
15053: LD_STRING Yamoko
15055: PPUSH
15056: CALL_OW 38
// savecharacters ( burlak , Burlak ) ;
15060: LD_EXP 83
15064: PPUSH
15065: LD_STRING Burlak
15067: PPUSH
15068: CALL_OW 38
// if belkov then
15072: LD_EXP 84
15076: IFFALSE 15090
// savecharacters ( belkov , Belkov ) ;
15078: LD_EXP 84
15082: PPUSH
15083: LD_STRING Belkov
15085: PPUSH
15086: CALL_OW 38
// if gnyevko then
15090: LD_EXP 85
15094: IFFALSE 15108
// savecharacters ( gnyevko , Gnyevko ) ;
15096: LD_EXP 85
15100: PPUSH
15101: LD_STRING Gnyevko
15103: PPUSH
15104: CALL_OW 38
// if kiril then
15108: LD_EXP 86
15112: IFFALSE 15126
// savecharacters ( kiril , Kirilenkova ) ;
15114: LD_EXP 86
15118: PPUSH
15119: LD_STRING Kirilenkova
15121: PPUSH
15122: CALL_OW 38
// if kovalyuk then
15126: LD_EXP 87
15130: IFFALSE 15144
// savecharacters ( kovalyuk , Kovalyuk ) ;
15132: LD_EXP 87
15136: PPUSH
15137: LD_STRING Kovalyuk
15139: PPUSH
15140: CALL_OW 38
// if scholtze then
15144: LD_EXP 88
15148: IFFALSE 15162
// savecharacters ( scholtze , Scholtze ) ;
15150: LD_EXP 88
15154: PPUSH
15155: LD_STRING Scholtze
15157: PPUSH
15158: CALL_OW 38
// if kuzmov then
15162: LD_EXP 89
15166: IFFALSE 15180
// savecharacters ( kuzmov , Kuzmov ) ;
15168: LD_EXP 89
15172: PPUSH
15173: LD_STRING Kuzmov
15175: PPUSH
15176: CALL_OW 38
// if karam then
15180: LD_EXP 90
15184: IFFALSE 15198
// savecharacters ( karam , Karamazov ) ;
15186: LD_EXP 90
15190: PPUSH
15191: LD_STRING Karamazov
15193: PPUSH
15194: CALL_OW 38
// if petrov then
15198: LD_EXP 91
15202: IFFALSE 15216
// savecharacters ( petrov , Petrovova ) ;
15204: LD_EXP 91
15208: PPUSH
15209: LD_STRING Petrovova
15211: PPUSH
15212: CALL_OW 38
// if gleb then
15216: LD_EXP 92
15220: IFFALSE 15234
// savecharacters ( gleb , Gleb ) ;
15222: LD_EXP 92
15226: PPUSH
15227: LD_STRING Gleb
15229: PPUSH
15230: CALL_OW 38
// if petros then
15234: LD_EXP 93
15238: IFFALSE 15252
// savecharacters ( petros , Petrosyan ) ;
15240: LD_EXP 93
15244: PPUSH
15245: LD_STRING Petrosyan
15247: PPUSH
15248: CALL_OW 38
// if lipshchin then
15252: LD_EXP 94
15256: IFFALSE 15270
// savecharacters ( lipshchin , Lipshchin ) ;
15258: LD_EXP 94
15262: PPUSH
15263: LD_STRING Lipshchin
15265: PPUSH
15266: CALL_OW 38
// if titov then
15270: LD_EXP 95
15274: IFFALSE 15288
// savecharacters ( titov , Titov ) ;
15276: LD_EXP 95
15280: PPUSH
15281: LD_STRING Titov
15283: PPUSH
15284: CALL_OW 38
// if dolgov then
15288: LD_EXP 96
15292: IFFALSE 15306
// savecharacters ( dolgov , Dolgov ) ;
15294: LD_EXP 96
15298: PPUSH
15299: LD_STRING Dolgov
15301: PPUSH
15302: CALL_OW 38
// if xavier then
15306: LD_EXP 97
15310: IFFALSE 15324
// savecharacters ( xavier , Xavier ) ;
15312: LD_EXP 97
15316: PPUSH
15317: LD_STRING Xavier
15319: PPUSH
15320: CALL_OW 38
// if oblukov then
15324: LD_EXP 98
15328: IFFALSE 15342
// savecharacters ( oblukov , Oblukov ) ;
15330: LD_EXP 98
15334: PPUSH
15335: LD_STRING Oblukov
15337: PPUSH
15338: CALL_OW 38
// if kozlov then
15342: LD_EXP 99
15346: IFFALSE 15360
// savecharacters ( kozlov , Kozlov ) ;
15348: LD_EXP 99
15352: PPUSH
15353: LD_STRING Kozlov
15355: PPUSH
15356: CALL_OW 38
// if kapitsova then
15360: LD_EXP 100
15364: IFFALSE 15378
// savecharacters ( kapitsova , Kapitsova ) ;
15366: LD_EXP 100
15370: PPUSH
15371: LD_STRING Kapitsova
15373: PPUSH
15374: CALL_OW 38
// if gossud then
15378: LD_EXP 101
15382: IFFALSE 15396
// savecharacters ( gossud , Gossudarov ) ;
15384: LD_EXP 101
15388: PPUSH
15389: LD_STRING Gossudarov
15391: PPUSH
15392: CALL_OW 38
// bz = filterallunits ( [ [ f_alive ] , [ f_side , al ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
15396: LD_ADDR_VAR 0 2
15400: PUSH
15401: LD_INT 51
15403: PUSH
15404: EMPTY
15405: LIST
15406: PUSH
15407: LD_INT 22
15409: PUSH
15410: LD_EXP 1
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: PUSH
15419: LD_INT 21
15421: PUSH
15422: LD_INT 1
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: PUSH
15429: LD_INT 3
15431: PUSH
15432: LD_INT 23
15434: PUSH
15435: LD_INT 0
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: PPUSH
15449: CALL_OW 69
15453: ST_TO_ADDR
// savecharacters ( bz diff smejdi ^ jahoda , survivors5 ) ;
15454: LD_VAR 0 2
15458: PUSH
15459: LD_VAR 0 5
15463: PUSH
15464: LD_EXP 103
15468: ADD
15469: DIFF
15470: PPUSH
15471: LD_STRING survivors5
15473: PPUSH
15474: CALL_OW 38
// tmz = filterunitsinarea ( stred , [ [ f_side , al ] , f_not , [ f_nation , nation_arabian ] , [ f_btype , b_factory ] ] ) ;
15478: LD_ADDR_VAR 0 3
15482: PUSH
15483: LD_INT 2
15485: PPUSH
15486: LD_INT 22
15488: PUSH
15489: LD_EXP 1
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PUSH
15498: LD_INT 3
15500: PUSH
15501: LD_INT 23
15503: PUSH
15504: LD_INT 2
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: LD_INT 30
15513: PUSH
15514: LD_INT 3
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: PPUSH
15527: CALL_OW 70
15531: ST_TO_ADDR
// tmz = tmz ^ filterunitsinarea ( stred , [ [ f_side , al ] , f_not , [ f_nation , nation_arabian ] , [ f_type , unit_building ] , f_not , [ f_btype , b_factory ] ] ) ;
15532: LD_ADDR_VAR 0 3
15536: PUSH
15537: LD_VAR 0 3
15541: PUSH
15542: LD_INT 2
15544: PPUSH
15545: LD_INT 22
15547: PUSH
15548: LD_EXP 1
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PUSH
15557: LD_INT 3
15559: PUSH
15560: LD_INT 23
15562: PUSH
15563: LD_INT 2
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: PUSH
15570: LD_INT 21
15572: PUSH
15573: LD_INT 3
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: LD_INT 3
15582: PUSH
15583: LD_INT 30
15585: PUSH
15586: LD_INT 3
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: PPUSH
15601: CALL_OW 70
15605: ADD
15606: ST_TO_ADDR
// tmzo = [ ] ;
15607: LD_ADDR_VAR 0 4
15611: PUSH
15612: EMPTY
15613: ST_TO_ADDR
// for bz in tmz do
15614: LD_ADDR_VAR 0 2
15618: PUSH
15619: LD_VAR 0 3
15623: PUSH
15624: FOR_IN
15625: IFFALSE 16012
// case getbtype ( bz ) of b_lab_basic , b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_biological , b_lab_spacetime , b_lab_opto :
15627: LD_VAR 0 2
15631: PPUSH
15632: CALL_OW 266
15636: PUSH
15637: LD_INT 9
15639: DOUBLE
15640: EQUAL
15641: IFTRUE 15681
15643: LD_INT 10
15645: DOUBLE
15646: EQUAL
15647: IFTRUE 15681
15649: LD_INT 11
15651: DOUBLE
15652: EQUAL
15653: IFTRUE 15681
15655: LD_INT 12
15657: DOUBLE
15658: EQUAL
15659: IFTRUE 15681
15661: LD_INT 13
15663: DOUBLE
15664: EQUAL
15665: IFTRUE 15681
15667: LD_INT 14
15669: DOUBLE
15670: EQUAL
15671: IFTRUE 15681
15673: LD_INT 15
15675: DOUBLE
15676: EQUAL
15677: IFTRUE 15681
15679: GO 15684
15681: POP
// begin end ; b_lab , b_lab_half , b_lab_full :
15682: GO 16010
15684: LD_INT 6
15686: DOUBLE
15687: EQUAL
15688: IFTRUE 15704
15690: LD_INT 7
15692: DOUBLE
15693: EQUAL
15694: IFTRUE 15704
15696: LD_INT 8
15698: DOUBLE
15699: EQUAL
15700: IFTRUE 15704
15702: GO 15817
15704: POP
// tmzo = tmzo ^ [ [ getx ( bz ) , gety ( bz ) , getdir ( bz ) , getbtype ( bz ) , getblevel ( bz ) , getnation ( bz ) , getlabkind ( bz , 1 ) , getlabkind ( bz , 2 ) ] ] ; b_bunker , b_turret :
15705: LD_ADDR_VAR 0 4
15709: PUSH
15710: LD_VAR 0 4
15714: PUSH
15715: LD_VAR 0 2
15719: PPUSH
15720: CALL_OW 250
15724: PUSH
15725: LD_VAR 0 2
15729: PPUSH
15730: CALL_OW 251
15734: PUSH
15735: LD_VAR 0 2
15739: PPUSH
15740: CALL_OW 254
15744: PUSH
15745: LD_VAR 0 2
15749: PPUSH
15750: CALL_OW 266
15754: PUSH
15755: LD_VAR 0 2
15759: PPUSH
15760: CALL_OW 267
15764: PUSH
15765: LD_VAR 0 2
15769: PPUSH
15770: CALL_OW 248
15774: PUSH
15775: LD_VAR 0 2
15779: PPUSH
15780: LD_INT 1
15782: PPUSH
15783: CALL_OW 268
15787: PUSH
15788: LD_VAR 0 2
15792: PPUSH
15793: LD_INT 2
15795: PPUSH
15796: CALL_OW 268
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: PUSH
15811: EMPTY
15812: LIST
15813: ADD
15814: ST_TO_ADDR
15815: GO 16010
15817: LD_INT 32
15819: DOUBLE
15820: EQUAL
15821: IFTRUE 15831
15823: LD_INT 33
15825: DOUBLE
15826: EQUAL
15827: IFTRUE 15831
15829: GO 15927
15831: POP
// tmzo = tmzo ^ [ [ getx ( bz ) , gety ( bz ) , getdir ( bz ) , getbtype ( bz ) , getblevel ( bz ) , getnation ( bz ) , getbweapon ( bz ) ] ] ; else
15832: LD_ADDR_VAR 0 4
15836: PUSH
15837: LD_VAR 0 4
15841: PUSH
15842: LD_VAR 0 2
15846: PPUSH
15847: CALL_OW 250
15851: PUSH
15852: LD_VAR 0 2
15856: PPUSH
15857: CALL_OW 251
15861: PUSH
15862: LD_VAR 0 2
15866: PPUSH
15867: CALL_OW 254
15871: PUSH
15872: LD_VAR 0 2
15876: PPUSH
15877: CALL_OW 266
15881: PUSH
15882: LD_VAR 0 2
15886: PPUSH
15887: CALL_OW 267
15891: PUSH
15892: LD_VAR 0 2
15896: PPUSH
15897: CALL_OW 248
15901: PUSH
15902: LD_VAR 0 2
15906: PPUSH
15907: CALL_OW 269
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: PUSH
15921: EMPTY
15922: LIST
15923: ADD
15924: ST_TO_ADDR
15925: GO 16010
15927: POP
// tmzo = tmzo ^ [ [ getx ( bz ) , gety ( bz ) , getdir ( bz ) , getbtype ( bz ) , getblevel ( bz ) , getnation ( bz ) ] ] ; end ;
15928: LD_ADDR_VAR 0 4
15932: PUSH
15933: LD_VAR 0 4
15937: PUSH
15938: LD_VAR 0 2
15942: PPUSH
15943: CALL_OW 250
15947: PUSH
15948: LD_VAR 0 2
15952: PPUSH
15953: CALL_OW 251
15957: PUSH
15958: LD_VAR 0 2
15962: PPUSH
15963: CALL_OW 254
15967: PUSH
15968: LD_VAR 0 2
15972: PPUSH
15973: CALL_OW 266
15977: PUSH
15978: LD_VAR 0 2
15982: PPUSH
15983: CALL_OW 267
15987: PUSH
15988: LD_VAR 0 2
15992: PPUSH
15993: CALL_OW 248
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: PUSH
16006: EMPTY
16007: LIST
16008: ADD
16009: ST_TO_ADDR
16010: GO 15624
16012: POP
16013: POP
// savevariable ( tmzo , Freedom ) ;
16014: LD_VAR 0 4
16018: PPUSH
16019: LD_STRING Freedom
16021: PPUSH
16022: CALL_OW 39
// if GetLives ( Masha ) = 0 then
16026: LD_EXP 80
16030: PPUSH
16031: CALL_OW 256
16035: PUSH
16036: LD_INT 0
16038: EQUAL
16039: IFFALSE 16048
// DeleteVariable ( Masha ) ;
16041: LD_STRING Masha
16043: PPUSH
16044: CALL_OW 41
// end ; end_of_file
16048: LD_VAR 0 1
16052: RET
// export rusove , rusoveu ; export ruv0 , ruv1 , ruv2 , ruv3 , ruv4 , ruv5 , ruv6 , ruv7 , ruv8 ; export rumech1 , rumech2 , rumech3 , rumech4 , rumech5 , rumech6 , rumech7 , rumech8 ; every 2 2$30 do
16053: GO 16055
16055: DISABLE
// begin uc_side = rus ;
16056: LD_ADDR_OWVAR 20
16060: PUSH
16061: LD_EXP 2
16065: ST_TO_ADDR
// uc_nation = nation_russian ;
16066: LD_ADDR_OWVAR 21
16070: PUSH
16071: LD_INT 3
16073: ST_TO_ADDR
// vc_engine = engine_siberite ;
16074: LD_ADDR_OWVAR 39
16078: PUSH
16079: LD_INT 3
16081: ST_TO_ADDR
// vc_control = control_computer ;
16082: LD_ADDR_OWVAR 38
16086: PUSH
16087: LD_INT 3
16089: ST_TO_ADDR
// vc_chassis = ruv0_ch ;
16090: LD_ADDR_OWVAR 37
16094: PUSH
16095: LD_EXP 46
16099: ST_TO_ADDR
// vc_weapon = ruv0_wp ;
16100: LD_ADDR_OWVAR 40
16104: PUSH
16105: LD_EXP 47
16109: ST_TO_ADDR
// ruv0 = createvehicle ;
16110: LD_ADDR_EXP 140
16114: PUSH
16115: CALL_OW 45
16119: ST_TO_ADDR
// setdir ( ruv0 , 0 ) ;
16120: LD_EXP 140
16124: PPUSH
16125: LD_INT 0
16127: PPUSH
16128: CALL_OW 233
// placeunitxy ( ruv0 , 70 , 96 , false ) ;
16132: LD_EXP 140
16136: PPUSH
16137: LD_INT 70
16139: PPUSH
16140: LD_INT 96
16142: PPUSH
16143: LD_INT 0
16145: PPUSH
16146: CALL_OW 48
// commovexy ( ruv0 , 60 , 48 ) ;
16150: LD_EXP 140
16154: PPUSH
16155: LD_INT 60
16157: PPUSH
16158: LD_INT 48
16160: PPUSH
16161: CALL_OW 111
// addcommovexy ( ruv0 , 70 , 97 ) ;
16165: LD_EXP 140
16169: PPUSH
16170: LD_INT 70
16172: PPUSH
16173: LD_INT 97
16175: PPUSH
16176: CALL_OW 171
// end ;
16180: END
// every 0 0$1 + 2 2$35 trigger isinarea ( ruv0 , south_exit_0 ) do
16181: LD_EXP 140
16185: PPUSH
16186: LD_INT 3
16188: PPUSH
16189: CALL_OW 308
16193: IFFALSE 16215
16195: GO 16197
16197: DISABLE
// begin destroyunit ( ruv0 ) ;
16198: LD_EXP 140
16202: PPUSH
16203: CALL_OW 65
// ruv0 = 0 ;
16207: LD_ADDR_EXP 140
16211: PUSH
16212: LD_INT 0
16214: ST_TO_ADDR
// end ;
16215: END
// var rusinarea ; function isinareaex ( units , area ) ; var tmp ; begin
16216: LD_INT 0
16218: PPUSH
16219: PPUSH
// result = 0 ;
16220: LD_ADDR_VAR 0 3
16224: PUSH
16225: LD_INT 0
16227: ST_TO_ADDR
// for tmp in units do
16228: LD_ADDR_VAR 0 4
16232: PUSH
16233: LD_VAR 0 1
16237: PUSH
16238: FOR_IN
16239: IFFALSE 16281
// if isinarea ( tmp , area ) then
16241: LD_VAR 0 4
16245: PPUSH
16246: LD_VAR 0 2
16250: PPUSH
16251: CALL_OW 308
16255: IFFALSE 16279
// begin result = tmp ;
16257: LD_ADDR_VAR 0 3
16261: PUSH
16262: LD_VAR 0 4
16266: ST_TO_ADDR
// rusinarea = tmp ;
16267: LD_ADDR_LOC 17
16271: PUSH
16272: LD_VAR 0 4
16276: ST_TO_ADDR
// break ;
16277: GO 16281
// end ;
16279: GO 16238
16281: POP
16282: POP
// end ;
16283: LD_VAR 0 3
16287: RET
// every 0 0$15 + 7 7$45 do var tmp ;
16288: GO 16290
16290: DISABLE
16291: LD_INT 0
16293: PPUSH
// begin delay = delay - 0 0$15 ;
16294: LD_ADDR_EXP 74
16298: PUSH
16299: LD_EXP 74
16303: PUSH
16304: LD_INT 525
16306: MINUS
16307: ST_TO_ADDR
// if delay then
16308: LD_EXP 74
16312: IFFALSE 16317
// begin enable ;
16314: ENABLE
// exit ;
16315: GO 16797
// end ; case difficulty of 1 :
16317: LD_OWVAR 67
16321: PUSH
16322: LD_INT 1
16324: DOUBLE
16325: EQUAL
16326: IFTRUE 16330
16328: GO 16341
16330: POP
// time2wait = 3 3$00 ; 2 :
16331: LD_ADDR_EXP 73
16335: PUSH
16336: LD_INT 6300
16338: ST_TO_ADDR
16339: GO 16380
16341: LD_INT 2
16343: DOUBLE
16344: EQUAL
16345: IFTRUE 16349
16347: GO 16360
16349: POP
// time2wait = 1 1$30 ; 3 :
16350: LD_ADDR_EXP 73
16354: PUSH
16355: LD_INT 3150
16357: ST_TO_ADDR
16358: GO 16380
16360: LD_INT 3
16362: DOUBLE
16363: EQUAL
16364: IFTRUE 16368
16366: GO 16379
16368: POP
// time2wait = 0 0$30 ; end ;
16369: LD_ADDR_EXP 73
16373: PUSH
16374: LD_INT 1050
16376: ST_TO_ADDR
16377: GO 16380
16379: POP
// delay = time2wait ;
16380: LD_ADDR_EXP 74
16384: PUSH
16385: LD_EXP 73
16389: ST_TO_ADDR
// uc_side = rus ;
16390: LD_ADDR_OWVAR 20
16394: PUSH
16395: LD_EXP 2
16399: ST_TO_ADDR
// uc_nation = nation_russian ;
16400: LD_ADDR_OWVAR 21
16404: PUSH
16405: LD_INT 3
16407: ST_TO_ADDR
// vc_engine = engine_siberite ;
16408: LD_ADDR_OWVAR 39
16412: PUSH
16413: LD_INT 3
16415: ST_TO_ADDR
// vc_control = control_manual ;
16416: LD_ADDR_OWVAR 38
16420: PUSH
16421: LD_INT 1
16423: ST_TO_ADDR
// vc_chassis = ruv1_ch ;
16424: LD_ADDR_OWVAR 37
16428: PUSH
16429: LD_EXP 48
16433: ST_TO_ADDR
// vc_weapon = ruv1_wp ;
16434: LD_ADDR_OWVAR 40
16438: PUSH
16439: LD_EXP 49
16443: ST_TO_ADDR
// ruv1 = createvehicle ;
16444: LD_ADDR_EXP 141
16448: PUSH
16449: CALL_OW 45
16453: ST_TO_ADDR
// setdir ( ruv1 , 0 ) ;
16454: LD_EXP 141
16458: PPUSH
16459: LD_INT 0
16461: PPUSH
16462: CALL_OW 233
// placeunitxy ( ruv1 , 70 , 95 , false ) ;
16466: LD_EXP 141
16470: PPUSH
16471: LD_INT 70
16473: PPUSH
16474: LD_INT 95
16476: PPUSH
16477: LD_INT 0
16479: PPUSH
16480: CALL_OW 48
// preparemechanic ( sex_male , rumech1_sk ) ;
16484: LD_INT 1
16486: PPUSH
16487: LD_EXP 64
16491: PPUSH
16492: CALL_OW 383
// rumech1 = createhuman ;
16496: LD_ADDR_EXP 149
16500: PUSH
16501: CALL_OW 44
16505: ST_TO_ADDR
// placehumaninunit ( rumech1 , ruv1 ) ;
16506: LD_EXP 149
16510: PPUSH
16511: LD_EXP 141
16515: PPUSH
16516: CALL_OW 52
// vc_chassis = ruv2_ch ;
16520: LD_ADDR_OWVAR 37
16524: PUSH
16525: LD_EXP 50
16529: ST_TO_ADDR
// vc_weapon = ruv2_wp ;
16530: LD_ADDR_OWVAR 40
16534: PUSH
16535: LD_EXP 51
16539: ST_TO_ADDR
// ruv2 = createvehicle ;
16540: LD_ADDR_EXP 142
16544: PUSH
16545: CALL_OW 45
16549: ST_TO_ADDR
// setdir ( ruv2 , 0 ) ;
16550: LD_EXP 142
16554: PPUSH
16555: LD_INT 0
16557: PPUSH
16558: CALL_OW 233
// placeunitxy ( ruv2 , 35 , 63 , false ) ;
16562: LD_EXP 142
16566: PPUSH
16567: LD_INT 35
16569: PPUSH
16570: LD_INT 63
16572: PPUSH
16573: LD_INT 0
16575: PPUSH
16576: CALL_OW 48
// preparemechanic ( sex_male , rumech2_sk ) ;
16580: LD_INT 1
16582: PPUSH
16583: LD_EXP 65
16587: PPUSH
16588: CALL_OW 383
// rumech2 = createhuman ;
16592: LD_ADDR_EXP 150
16596: PUSH
16597: CALL_OW 44
16601: ST_TO_ADDR
// placehumaninunit ( rumech2 , ruv2 ) ;
16602: LD_EXP 150
16606: PPUSH
16607: LD_EXP 142
16611: PPUSH
16612: CALL_OW 52
// vc_chassis = ruv3_ch ;
16616: LD_ADDR_OWVAR 37
16620: PUSH
16621: LD_EXP 52
16625: ST_TO_ADDR
// vc_weapon = ruv3_wp ;
16626: LD_ADDR_OWVAR 40
16630: PUSH
16631: LD_EXP 53
16635: ST_TO_ADDR
// ruv3 = createvehicle ;
16636: LD_ADDR_EXP 143
16640: PUSH
16641: CALL_OW 45
16645: ST_TO_ADDR
// setdir ( ruv3 , 0 ) ;
16646: LD_EXP 143
16650: PPUSH
16651: LD_INT 0
16653: PPUSH
16654: CALL_OW 233
// placeunitxy ( ruv3 , 99 , 95 , false ) ;
16658: LD_EXP 143
16662: PPUSH
16663: LD_INT 99
16665: PPUSH
16666: LD_INT 95
16668: PPUSH
16669: LD_INT 0
16671: PPUSH
16672: CALL_OW 48
// preparemechanic ( sex_male , rumech3_sk ) ;
16676: LD_INT 1
16678: PPUSH
16679: LD_EXP 66
16683: PPUSH
16684: CALL_OW 383
// rumech3 = createhuman ;
16688: LD_ADDR_EXP 151
16692: PUSH
16693: CALL_OW 44
16697: ST_TO_ADDR
// placehumaninunit ( rumech3 , ruv3 ) ;
16698: LD_EXP 151
16702: PPUSH
16703: LD_EXP 143
16707: PPUSH
16708: CALL_OW 52
// rusove = [ ruv1 , ruv2 , ruv3 ] ;
16712: LD_ADDR_EXP 138
16716: PUSH
16717: LD_EXP 141
16721: PUSH
16722: LD_EXP 142
16726: PUSH
16727: LD_EXP 143
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: LIST
16736: ST_TO_ADDR
// comremember ( rusove ) ;
16737: LD_EXP 138
16741: PPUSH
16742: CALL_OW 143
// commovexy ( ruv1 , 64 , 66 ) ;
16746: LD_EXP 141
16750: PPUSH
16751: LD_INT 64
16753: PPUSH
16754: LD_INT 66
16756: PPUSH
16757: CALL_OW 111
// commovexy ( ruv2 , 42 , 44 ) ;
16761: LD_EXP 142
16765: PPUSH
16766: LD_INT 42
16768: PPUSH
16769: LD_INT 44
16771: PPUSH
16772: CALL_OW 111
// commovexy ( ruv3 , 74 , 61 ) ;
16776: LD_EXP 143
16780: PPUSH
16781: LD_INT 74
16783: PPUSH
16784: LD_INT 61
16786: PPUSH
16787: CALL_OW 111
// enable ( 03 ) ;
16791: LD_INT 3
16793: ENABLE_MARKED
// enable ( 05 ) ;
16794: LD_INT 5
16796: ENABLE_MARKED
// end ;
16797: PPOPN 1
16799: END
// on destinationunreachable ( un ) do if ( un = ruv1 ) or ( un = ruv2 ) or ( un = ruv3 ) then
16800: LD_VAR 0 1
16804: PUSH
16805: LD_EXP 141
16809: EQUAL
16810: PUSH
16811: LD_VAR 0 1
16815: PUSH
16816: LD_EXP 142
16820: EQUAL
16821: OR
16822: PUSH
16823: LD_VAR 0 1
16827: PUSH
16828: LD_EXP 143
16832: EQUAL
16833: OR
16834: IFFALSE 16885
// begin effectteleport ( getx ( un ) , gety ( un ) ) ;
16836: LD_VAR 0 1
16840: PPUSH
16841: CALL_OW 250
16845: PPUSH
16846: LD_VAR 0 1
16850: PPUSH
16851: CALL_OW 251
16855: PPUSH
16856: CALL_OW 494
// comhold ( un ) ;
16860: LD_VAR 0 1
16864: PPUSH
16865: CALL_OW 140
// wait ( 50 ) ;
16869: LD_INT 50
16871: PPUSH
16872: CALL_OW 67
// destroyunit ( un ) ;
16876: LD_VAR 0 1
16880: PPUSH
16881: CALL_OW 65
// end ;
16885: PPOPN 1
16887: END
// every 0 0$0.3 + 8 8$0 trigger not hastask ( ruv1 ) marked 05 do
16888: LD_EXP 141
16892: PPUSH
16893: CALL_OW 314
16897: NOT
16898: IFFALSE 16918
16900: GO 16902
16902: DISABLE
// commovexy ( ruv1 , 60 , 48 ) ;
16903: LD_EXP 141
16907: PPUSH
16908: LD_INT 60
16910: PPUSH
16911: LD_INT 48
16913: PPUSH
16914: CALL_OW 111
16918: END
// every 0 0$0.3 + 8 8$0 trigger not hastask ( ruv2 ) marked 05 do
16919: LD_EXP 142
16923: PPUSH
16924: CALL_OW 314
16928: NOT
16929: IFFALSE 16949
16931: GO 16933
16933: DISABLE
// commovexy ( ruv2 , 56 , 49 ) ;
16934: LD_EXP 142
16938: PPUSH
16939: LD_INT 56
16941: PPUSH
16942: LD_INT 49
16944: PPUSH
16945: CALL_OW 111
16949: END
// every 0 0$0.3 + 8 8$0 trigger not hastask ( ruv3 ) marked 05 do
16950: LD_EXP 143
16954: PPUSH
16955: CALL_OW 314
16959: NOT
16960: IFFALSE 16980
16962: GO 16964
16964: DISABLE
// commovexy ( ruv3 , 62 , 50 ) ;
16965: LD_EXP 143
16969: PPUSH
16970: LD_INT 62
16972: PPUSH
16973: LD_INT 50
16975: PPUSH
16976: CALL_OW 111
16980: END
// every 0 0$0.33 do var tmp , tmp2 ;
16981: GO 16983
16983: DISABLE
16984: LD_INT 0
16986: PPUSH
16987: PPUSH
// begin tmp2 = rusove ;
16988: LD_ADDR_VAR 0 2
16992: PUSH
16993: LD_EXP 138
16997: ST_TO_ADDR
// for tmp in tmp2 do
16998: LD_ADDR_VAR 0 1
17002: PUSH
17003: LD_VAR 0 2
17007: PUSH
17008: FOR_IN
17009: IFFALSE 17071
// if getlives ( tmp ) <= hr_auta then
17011: LD_VAR 0 1
17015: PPUSH
17016: CALL_OW 256
17020: PUSH
17021: LD_EXP 72
17025: LESSEQUAL
17026: IFFALSE 17069
// begin rusove = rusove diff tmp ;
17028: LD_ADDR_EXP 138
17032: PUSH
17033: LD_EXP 138
17037: PUSH
17038: LD_VAR 0 1
17042: DIFF
17043: ST_TO_ADDR
// rusoveu = rusoveu union tmp ;
17044: LD_ADDR_EXP 139
17048: PUSH
17049: LD_EXP 139
17053: PUSH
17054: LD_VAR 0 1
17058: UNION
17059: ST_TO_ADDR
// comreturn ( tmp ) ;
17060: LD_VAR 0 1
17064: PPUSH
17065: CALL_OW 144
// end ;
17069: GO 17008
17071: POP
17072: POP
// enable ;
17073: ENABLE
// end ;
17074: PPOPN 2
17076: END
// every 0 0$0.3 trigger isinareaex ( rusoveu , south_exit_0 ) do
17077: LD_EXP 139
17081: PPUSH
17082: LD_INT 3
17084: PPUSH
17085: CALL 16216 0 2
17089: IFFALSE 17104
17091: GO 17093
17093: DISABLE
// begin destroyunit ( rusinarea ) ;
17094: LD_LOC 17
17098: PPUSH
17099: CALL_OW 65
// enable ;
17103: ENABLE
// end ;
17104: END
// every 0 0$0.3 trigger isinareaex ( rusoveu , west_exit_0 ) do
17105: LD_EXP 139
17109: PPUSH
17110: LD_INT 4
17112: PPUSH
17113: CALL 16216 0 2
17117: IFFALSE 17132
17119: GO 17121
17121: DISABLE
// begin destroyunit ( rusinarea ) ;
17122: LD_LOC 17
17126: PPUSH
17127: CALL_OW 65
// enable ;
17131: ENABLE
// end ;
17132: END
// every 0 0$0.3 trigger isinareaex ( rusoveu , south_exit_1 ) do
17133: LD_EXP 139
17137: PPUSH
17138: LD_INT 5
17140: PPUSH
17141: CALL 16216 0 2
17145: IFFALSE 17160
17147: GO 17149
17149: DISABLE
// begin destroyunit ( rusinarea ) ;
17150: LD_LOC 17
17154: PPUSH
17155: CALL_OW 65
// enable ;
17159: ENABLE
// end ;
17160: END
// every 0 0$15 + 12 12$45 do
17161: GO 17163
17163: DISABLE
// begin delay = delay - 0 0$15 ;
17164: LD_ADDR_EXP 74
17168: PUSH
17169: LD_EXP 74
17173: PUSH
17174: LD_INT 525
17176: MINUS
17177: ST_TO_ADDR
// if delay then
17178: LD_EXP 74
17182: IFFALSE 17187
// begin enable ;
17184: ENABLE
// exit ;
17185: GO 17588
// end ; uc_side = rus ;
17187: LD_ADDR_OWVAR 20
17191: PUSH
17192: LD_EXP 2
17196: ST_TO_ADDR
// uc_nation = nation_russian ;
17197: LD_ADDR_OWVAR 21
17201: PUSH
17202: LD_INT 3
17204: ST_TO_ADDR
// vc_engine = engine_siberite ;
17205: LD_ADDR_OWVAR 39
17209: PUSH
17210: LD_INT 3
17212: ST_TO_ADDR
// vc_control = control_manual ;
17213: LD_ADDR_OWVAR 38
17217: PUSH
17218: LD_INT 1
17220: ST_TO_ADDR
// vc_chassis = ruv4_ch ;
17221: LD_ADDR_OWVAR 37
17225: PUSH
17226: LD_EXP 54
17230: ST_TO_ADDR
// vc_weapon = ruv4_wp ;
17231: LD_ADDR_OWVAR 40
17235: PUSH
17236: LD_EXP 55
17240: ST_TO_ADDR
// ruv4 = createvehicle ;
17241: LD_ADDR_EXP 144
17245: PUSH
17246: CALL_OW 45
17250: ST_TO_ADDR
// setdir ( ruv4 , 0 ) ;
17251: LD_EXP 144
17255: PPUSH
17256: LD_INT 0
17258: PPUSH
17259: CALL_OW 233
// placeunitxy ( ruv4 , 70 , 95 , false ) ;
17263: LD_EXP 144
17267: PPUSH
17268: LD_INT 70
17270: PPUSH
17271: LD_INT 95
17273: PPUSH
17274: LD_INT 0
17276: PPUSH
17277: CALL_OW 48
// preparemechanic ( sex_male , rumech4_sk ) ;
17281: LD_INT 1
17283: PPUSH
17284: LD_EXP 67
17288: PPUSH
17289: CALL_OW 383
// rumech4 = createhuman ;
17293: LD_ADDR_EXP 152
17297: PUSH
17298: CALL_OW 44
17302: ST_TO_ADDR
// placehumaninunit ( rumech4 , ruv4 ) ;
17303: LD_EXP 152
17307: PPUSH
17308: LD_EXP 144
17312: PPUSH
17313: CALL_OW 52
// vc_chassis = ruv5_ch ;
17317: LD_ADDR_OWVAR 37
17321: PUSH
17322: LD_EXP 56
17326: ST_TO_ADDR
// vc_weapon = ruv5_wp ;
17327: LD_ADDR_OWVAR 40
17331: PUSH
17332: LD_EXP 57
17336: ST_TO_ADDR
// ruv5 = createvehicle ;
17337: LD_ADDR_EXP 145
17341: PUSH
17342: CALL_OW 45
17346: ST_TO_ADDR
// setdir ( ruv5 , 0 ) ;
17347: LD_EXP 145
17351: PPUSH
17352: LD_INT 0
17354: PPUSH
17355: CALL_OW 233
// placeunitxy ( ruv5 , 35 , 63 , false ) ;
17359: LD_EXP 145
17363: PPUSH
17364: LD_INT 35
17366: PPUSH
17367: LD_INT 63
17369: PPUSH
17370: LD_INT 0
17372: PPUSH
17373: CALL_OW 48
// preparemechanic ( sex_male , rumech5_sk ) ;
17377: LD_INT 1
17379: PPUSH
17380: LD_EXP 68
17384: PPUSH
17385: CALL_OW 383
// rumech5 = createhuman ;
17389: LD_ADDR_EXP 153
17393: PUSH
17394: CALL_OW 44
17398: ST_TO_ADDR
// placehumaninunit ( rumech5 , ruv5 ) ;
17399: LD_EXP 153
17403: PPUSH
17404: LD_EXP 145
17408: PPUSH
17409: CALL_OW 52
// vc_chassis = ruv6_ch ;
17413: LD_ADDR_OWVAR 37
17417: PUSH
17418: LD_EXP 58
17422: ST_TO_ADDR
// vc_weapon = ruv6_wp ;
17423: LD_ADDR_OWVAR 40
17427: PUSH
17428: LD_EXP 59
17432: ST_TO_ADDR
// ruv6 = createvehicle ;
17433: LD_ADDR_EXP 146
17437: PUSH
17438: CALL_OW 45
17442: ST_TO_ADDR
// setdir ( ruv6 , 0 ) ;
17443: LD_EXP 146
17447: PPUSH
17448: LD_INT 0
17450: PPUSH
17451: CALL_OW 233
// placeunitxy ( ruv6 , 99 , 95 , false ) ;
17455: LD_EXP 146
17459: PPUSH
17460: LD_INT 99
17462: PPUSH
17463: LD_INT 95
17465: PPUSH
17466: LD_INT 0
17468: PPUSH
17469: CALL_OW 48
// preparemechanic ( sex_male , rumech6_sk ) ;
17473: LD_INT 1
17475: PPUSH
17476: LD_EXP 69
17480: PPUSH
17481: CALL_OW 383
// rumech6 = createhuman ;
17485: LD_ADDR_EXP 154
17489: PUSH
17490: CALL_OW 44
17494: ST_TO_ADDR
// placehumaninunit ( rumech6 , ruv6 ) ;
17495: LD_EXP 154
17499: PPUSH
17500: LD_EXP 146
17504: PPUSH
17505: CALL_OW 52
// rusove = [ ruv4 , ruv5 , ruv6 ] ;
17509: LD_ADDR_EXP 138
17513: PUSH
17514: LD_EXP 144
17518: PUSH
17519: LD_EXP 145
17523: PUSH
17524: LD_EXP 146
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: LIST
17533: ST_TO_ADDR
// comremember ( rusove ) ;
17534: LD_EXP 138
17538: PPUSH
17539: CALL_OW 143
// commovexy ( ruv4 , 61 , 56 ) ;
17543: LD_EXP 144
17547: PPUSH
17548: LD_INT 61
17550: PPUSH
17551: LD_INT 56
17553: PPUSH
17554: CALL_OW 111
// commovexy ( ruv5 , 50 , 45 ) ;
17558: LD_EXP 145
17562: PPUSH
17563: LD_INT 50
17565: PPUSH
17566: LD_INT 45
17568: PPUSH
17569: CALL_OW 111
// commovexy ( ruv6 , 69 , 56 ) ;
17573: LD_EXP 146
17577: PPUSH
17578: LD_INT 69
17580: PPUSH
17581: LD_INT 56
17583: PPUSH
17584: CALL_OW 111
// end ;
17588: END
// every 0 0$15 + 12 12$55 do
17589: GO 17591
17591: DISABLE
// begin if delay then
17592: LD_EXP 74
17596: IFFALSE 17601
// begin enable ;
17598: ENABLE
// exit ;
17599: GO 17948
// end ; uc_side = rus ;
17601: LD_ADDR_OWVAR 20
17605: PUSH
17606: LD_EXP 2
17610: ST_TO_ADDR
// uc_nation = nation_russian ;
17611: LD_ADDR_OWVAR 21
17615: PUSH
17616: LD_INT 3
17618: ST_TO_ADDR
// vc_engine = engine_siberite ;
17619: LD_ADDR_OWVAR 39
17623: PUSH
17624: LD_INT 3
17626: ST_TO_ADDR
// vc_control = control_manual ;
17627: LD_ADDR_OWVAR 38
17631: PUSH
17632: LD_INT 1
17634: ST_TO_ADDR
// if difficulty >= 2 then
17635: LD_OWVAR 67
17639: PUSH
17640: LD_INT 2
17642: GREATEREQUAL
17643: IFFALSE 17799
// begin vc_chassis = ruv7_ch ;
17645: LD_ADDR_OWVAR 37
17649: PUSH
17650: LD_EXP 60
17654: ST_TO_ADDR
// vc_weapon = ruv7_wp ;
17655: LD_ADDR_OWVAR 40
17659: PUSH
17660: LD_EXP 61
17664: ST_TO_ADDR
// ruv7 = createvehicle ;
17665: LD_ADDR_EXP 147
17669: PUSH
17670: CALL_OW 45
17674: ST_TO_ADDR
// setdir ( ruv7 , 0 ) ;
17675: LD_EXP 147
17679: PPUSH
17680: LD_INT 0
17682: PPUSH
17683: CALL_OW 233
// placeunitxy ( ruv7 , 99 , 95 , false ) ;
17687: LD_EXP 147
17691: PPUSH
17692: LD_INT 99
17694: PPUSH
17695: LD_INT 95
17697: PPUSH
17698: LD_INT 0
17700: PPUSH
17701: CALL_OW 48
// preparemechanic ( sex_male , rumech7_sk ) ;
17705: LD_INT 1
17707: PPUSH
17708: LD_EXP 70
17712: PPUSH
17713: CALL_OW 383
// rumech7 = createhuman ;
17717: LD_ADDR_EXP 155
17721: PUSH
17722: CALL_OW 44
17726: ST_TO_ADDR
// placehumaninunit ( rumech7 , ruv7 ) ;
17727: LD_EXP 155
17731: PPUSH
17732: LD_EXP 147
17736: PPUSH
17737: CALL_OW 52
// rusove = rusove ^ [ ruv7 ] ;
17741: LD_ADDR_EXP 138
17745: PUSH
17746: LD_EXP 138
17750: PUSH
17751: LD_EXP 147
17755: PUSH
17756: EMPTY
17757: LIST
17758: ADD
17759: ST_TO_ADDR
// comremember ( ruv7 ) ;
17760: LD_EXP 147
17764: PPUSH
17765: CALL_OW 143
// commovexy ( ruv7 , 97 , 55 ) ;
17769: LD_EXP 147
17773: PPUSH
17774: LD_INT 97
17776: PPUSH
17777: LD_INT 55
17779: PPUSH
17780: CALL_OW 111
// addcommovexy ( ruv7 , 67 , 50 ) ;
17784: LD_EXP 147
17788: PPUSH
17789: LD_INT 67
17791: PPUSH
17792: LD_INT 50
17794: PPUSH
17795: CALL_OW 171
// end ; if difficulty > 2 then
17799: LD_OWVAR 67
17803: PUSH
17804: LD_INT 2
17806: GREATER
17807: IFFALSE 17948
// begin vc_chassis = ruv8_ch ;
17809: LD_ADDR_OWVAR 37
17813: PUSH
17814: LD_EXP 62
17818: ST_TO_ADDR
// vc_weapon = ruv8_wp ;
17819: LD_ADDR_OWVAR 40
17823: PUSH
17824: LD_EXP 63
17828: ST_TO_ADDR
// ruv8 = createvehicle ;
17829: LD_ADDR_EXP 148
17833: PUSH
17834: CALL_OW 45
17838: ST_TO_ADDR
// setdir ( ruv8 , 0 ) ;
17839: LD_EXP 148
17843: PPUSH
17844: LD_INT 0
17846: PPUSH
17847: CALL_OW 233
// placeunitxy ( ruv8 , 70 , 95 , false ) ;
17851: LD_EXP 148
17855: PPUSH
17856: LD_INT 70
17858: PPUSH
17859: LD_INT 95
17861: PPUSH
17862: LD_INT 0
17864: PPUSH
17865: CALL_OW 48
// preparemechanic ( sex_male , rumech8_sk ) ;
17869: LD_INT 1
17871: PPUSH
17872: LD_EXP 71
17876: PPUSH
17877: CALL_OW 383
// rumech8 = createhuman ;
17881: LD_ADDR_EXP 156
17885: PUSH
17886: CALL_OW 44
17890: ST_TO_ADDR
// placehumaninunit ( rumech8 , ruv8 ) ;
17891: LD_EXP 156
17895: PPUSH
17896: LD_EXP 148
17900: PPUSH
17901: CALL_OW 52
// rusove = rusove ^ [ ruv8 ] ;
17905: LD_ADDR_EXP 138
17909: PUSH
17910: LD_EXP 138
17914: PUSH
17915: LD_EXP 148
17919: PUSH
17920: EMPTY
17921: LIST
17922: ADD
17923: ST_TO_ADDR
// comremember ( ruv8 ) ;
17924: LD_EXP 148
17928: PPUSH
17929: CALL_OW 143
// commovexy ( ruv8 , 61 , 56 ) ;
17933: LD_EXP 148
17937: PPUSH
17938: LD_INT 61
17940: PPUSH
17941: LD_INT 56
17943: PPUSH
17944: CALL_OW 111
// end ; end ;
17948: END
// on unitdestroyed ( un ) do if un = jmm then
17949: LD_VAR 0 1
17953: PUSH
17954: LD_EXP 105
17958: EQUAL
17959: IFFALSE 17970
// youlost ( JMM ) else
17961: LD_STRING JMM
17963: PPUSH
17964: CALL_OW 104
17968: GO 18112
// if un = burlak then
17970: LD_VAR 0 1
17974: PUSH
17975: LD_EXP 83
17979: EQUAL
17980: IFFALSE 17991
// youlost ( Burlak ) else
17982: LD_STRING Burlak
17984: PPUSH
17985: CALL_OW 104
17989: GO 18112
// if ( un = abdul ) and isdead ( abduluv ) then
17991: LD_VAR 0 1
17995: PUSH
17996: LD_EXP 121
18000: EQUAL
18001: PUSH
18002: LD_INT 22
18004: PPUSH
18005: CALL_OW 301
18009: AND
18010: IFFALSE 18021
// changemissionobjectives ( MAttackA ) else
18012: LD_STRING MAttackA
18014: PPUSH
18015: CALL_OW 337
18019: GO 18112
// if ( un = abduluv ) and isdead ( abdul ) then
18021: LD_VAR 0 1
18025: PUSH
18026: LD_INT 22
18028: EQUAL
18029: PUSH
18030: LD_EXP 121
18034: PPUSH
18035: CALL_OW 301
18039: AND
18040: IFFALSE 18051
// changemissionobjectives ( MAttackA ) else
18042: LD_STRING MAttackA
18044: PPUSH
18045: CALL_OW 337
18049: GO 18112
// if ( un = nakladak ) then
18051: LD_VAR 0 1
18055: PUSH
18056: LD_INT 23
18058: EQUAL
18059: IFFALSE 18074
// begin artef_out = true ;
18061: LD_ADDR_EXP 78
18065: PUSH
18066: LD_INT 1
18068: ST_TO_ADDR
// enable ( 15 ) ;
18069: LD_INT 15
18071: ENABLE_MARKED
// end else
18072: GO 18112
// if ( un = arbarr ) then
18074: LD_VAR 0 1
18078: PUSH
18079: LD_INT 2
18081: EQUAL
18082: IFFALSE 18094
// base_out = true else
18084: LD_ADDR_EXP 79
18088: PUSH
18089: LD_INT 1
18091: ST_TO_ADDR
18092: GO 18112
// if ( un = ar_depot ) then
18094: LD_VAR 0 1
18098: PUSH
18099: LD_INT 1
18101: EQUAL
18102: IFFALSE 18112
// base_out = true ; end_of_file
18104: LD_ADDR_EXP 79
18108: PUSH
18109: LD_INT 1
18111: ST_TO_ADDR
18112: PPOPN 1
18114: END
// every 0 0$2 + 0 0$0.1 do
18115: GO 18117
18117: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) > FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_not , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) then
18118: LD_INT 22
18120: PUSH
18121: LD_INT 7
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 2
18130: PUSH
18131: LD_INT 25
18133: PUSH
18134: LD_INT 12
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: LD_INT 25
18143: PUSH
18144: LD_INT 16
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: LD_INT 25
18153: PUSH
18154: LD_INT 15
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: LD_INT 25
18163: PUSH
18164: LD_INT 17
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PPUSH
18182: CALL_OW 69
18186: PUSH
18187: LD_INT 22
18189: PUSH
18190: LD_INT 7
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 21
18199: PUSH
18200: LD_INT 1
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 3
18209: PUSH
18210: LD_INT 2
18212: PUSH
18213: LD_INT 25
18215: PUSH
18216: LD_INT 12
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 25
18225: PUSH
18226: LD_INT 16
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 25
18235: PUSH
18236: LD_INT 15
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 25
18245: PUSH
18246: LD_INT 17
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: LIST
18268: PPUSH
18269: CALL_OW 69
18273: GREATER
18274: IFFALSE 18285
// begin SetAchievement ( ACH_POTA ) ;
18276: LD_STRING ACH_POTA
18278: PPUSH
18279: CALL_OW 543
// exit ;
18283: GO 18286
// end ; enable ;
18285: ENABLE
// end ; end_of_file
18286: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
18287: LD_INT 0
18289: PPUSH
18290: PPUSH
// if not missionNumber then
18291: LD_VAR 0 2
18295: NOT
18296: IFFALSE 18300
// exit ;
18298: GO 18430
// achiv := false ;
18300: LD_ADDR_VAR 0 7
18304: PUSH
18305: LD_INT 0
18307: ST_TO_ADDR
// case campaignNumber of 1 :
18308: LD_VAR 0 1
18312: PUSH
18313: LD_INT 1
18315: DOUBLE
18316: EQUAL
18317: IFTRUE 18321
18319: GO 18332
18321: POP
// achiv := ACH_GOTA ; 2 :
18322: LD_ADDR_VAR 0 7
18326: PUSH
18327: LD_STRING ACH_GOTA
18329: ST_TO_ADDR
18330: GO 18382
18332: LD_INT 2
18334: DOUBLE
18335: EQUAL
18336: IFTRUE 18340
18338: GO 18343
18340: POP
// ; 3 :
18341: GO 18382
18343: LD_INT 3
18345: DOUBLE
18346: EQUAL
18347: IFTRUE 18351
18349: GO 18362
18351: POP
// achiv := ACH_MOTSU ; 4 :
18352: LD_ADDR_VAR 0 7
18356: PUSH
18357: LD_STRING ACH_MOTSU
18359: ST_TO_ADDR
18360: GO 18382
18362: LD_INT 4
18364: DOUBLE
18365: EQUAL
18366: IFTRUE 18370
18368: GO 18381
18370: POP
// achiv := ACH_LOP ; end ;
18371: LD_ADDR_VAR 0 7
18375: PUSH
18376: LD_STRING ACH_LOP
18378: ST_TO_ADDR
18379: GO 18382
18381: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
18382: LD_OWVAR 67
18386: PUSH
18387: LD_INT 3
18389: EQUAL
18390: PUSH
18391: LD_VAR 0 7
18395: AND
18396: PUSH
18397: LD_VAR 0 3
18401: AND
18402: PUSH
18403: LD_VAR 0 4
18407: AND
18408: PUSH
18409: LD_VAR 0 5
18413: AND
18414: IFFALSE 18430
// SetAchievementEX ( achiv , missionNumber ) ;
18416: LD_VAR 0 7
18420: PPUSH
18421: LD_VAR 0 2
18425: PPUSH
18426: CALL_OW 564
// end ;
18430: LD_VAR 0 6
18434: RET
// export function SA_BehemothConstructed ; begin
18435: LD_INT 0
18437: PPUSH
// SetAchievement ( ACH_SMC ) ;
18438: LD_STRING ACH_SMC
18440: PPUSH
18441: CALL_OW 543
// end ;
18445: LD_VAR 0 1
18449: RET
