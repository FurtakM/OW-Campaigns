// export you , you2 , americans , arabians , neutral ; export ai , ai_nation ; export apemans , rulive ; export cargo_am ; export Vsevolod_vstoupil ; export Vsevolod_uderna_group ; export belkovfreed ; export OvsyenkoTaken ; export OvsyenkoCaptured ; export mcdef_difficulty ; export mcatt_difficulty ; export na_kopci_mcdef_difficulty ; export b1_levels , b2_levels , b3_levels , b4_levels , b5_levels ; export normal1_utok , normal2_utok , normal3_utok , normal4_utok , vsevolod_attack , vsevolod_final_attack ; export mine_obj_completed ; export cas_mezi_utoky ; export cas_prvniho_utoku ; export kolik_ma_vsevolod_casu ; export kolik_ma_vsevolod_mezi_utoky ; export kolik_je_v_depotu ; export kolik_je_sib_v_hornim ; export zivoty_armoury , zivoty_armoury2 ; export utoci_max ; export all_labs ; export function Vyhra ; begin
   0: LD_INT 0
   2: PPUSH
// end ;
   3: LD_VAR 0 1
   7: RET
// function set_sides ; begin
   8: LD_INT 0
  10: PPUSH
// you := 3 ;
  11: LD_ADDR_EXP 1
  15: PUSH
  16: LD_INT 3
  18: ST_TO_ADDR
// you2 := 6 ;
  19: LD_ADDR_EXP 2
  23: PUSH
  24: LD_INT 6
  26: ST_TO_ADDR
// americans := 1 ;
  27: LD_ADDR_EXP 3
  31: PUSH
  32: LD_INT 1
  34: ST_TO_ADDR
// arabians := 2 ;
  35: LD_ADDR_EXP 4
  39: PUSH
  40: LD_INT 2
  42: ST_TO_ADDR
// neutral := 0 ;
  43: LD_ADDR_EXP 5
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// OvsyenkoTaken = 0 ;
  51: LD_ADDR_EXP 14
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// ai := americans ;
  59: LD_ADDR_EXP 6
  63: PUSH
  64: LD_EXP 3
  68: ST_TO_ADDR
// ai_nation := nation_american ;
  69: LD_ADDR_EXP 7
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// end ;
  77: LD_VAR 0 1
  81: RET
// var gleb_lives ; every 0 0$1 trigger gleb_lives <> GetLives ( gleb ) do var i ;
  82: LD_LOC 1
  86: PUSH
  87: LD_EXP 65
  91: PPUSH
  92: CALL_OW 256
  96: NONEQUAL
  97: IFFALSE 173
  99: GO 101
 101: DISABLE
 102: LD_INT 0
 104: PPUSH
// begin for i in FilterAllUnits ( [ f_side , you ] ) do
 105: LD_ADDR_VAR 0 1
 109: PUSH
 110: LD_INT 22
 112: PUSH
 113: LD_EXP 1
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PPUSH
 122: CALL_OW 69
 126: PUSH
 127: FOR_IN
 128: IFFALSE 156
// if WantsToAttack ( i ) = Gleb then
 130: LD_VAR 0 1
 134: PPUSH
 135: CALL_OW 319
 139: PUSH
 140: LD_EXP 65
 144: EQUAL
 145: IFFALSE 154
// YouLost ( Gleb ) ;
 147: LD_STRING Gleb
 149: PPUSH
 150: CALL_OW 104
 154: GO 127
 156: POP
 157: POP
// gleb_lives := GetLives ( gleb ) ;
 158: LD_ADDR_LOC 1
 162: PUSH
 163: LD_EXP 65
 167: PPUSH
 168: CALL_OW 256
 172: ST_TO_ADDR
// end ;
 173: PPOPN 1
 175: END
// every 0 0$5 trigger not FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_class , class_engineer ] , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
 176: LD_INT 22
 178: PUSH
 179: LD_EXP 1
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 2
 190: PUSH
 191: LD_INT 25
 193: PUSH
 194: LD_INT 2
 196: PUSH
 197: EMPTY
 198: LIST
 199: LIST
 200: PUSH
 201: LD_INT 30
 203: PUSH
 204: LD_INT 1
 206: PUSH
 207: EMPTY
 208: LIST
 209: LIST
 210: PUSH
 211: LD_INT 30
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: PUSH
 221: LD_INT 30
 223: PUSH
 224: LD_INT 6
 226: PUSH
 227: EMPTY
 228: LIST
 229: LIST
 230: PUSH
 231: LD_INT 30
 233: PUSH
 234: LD_INT 7
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 30
 243: PUSH
 244: LD_INT 8
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PPUSH
 264: CALL_OW 69
 268: NOT
 269: IFFALSE 281
 271: GO 273
 273: DISABLE
// begin YouLost ( NoDepotNoEngineerNoLab ) ;
 274: LD_STRING NoDepotNoEngineerNoLab
 276: PPUSH
 277: CALL_OW 104
// end ;
 281: END
// every 1 trigger OvsyenkoTaken = 0 do
 282: LD_EXP 14
 286: PUSH
 287: LD_INT 0
 289: EQUAL
 290: IFFALSE 300
 292: GO 294
 294: DISABLE
// begin BlockMarchNorth ;
 295: CALL 12100 0 0
// enable ;
 299: ENABLE
// end ;
 300: END
// export function VyhraResearch ; begin
 301: LD_INT 0
 303: PPUSH
// set_medals ;
 304: CALL 447 0 0
// GiveMedals ( Research ) ;
 308: LD_STRING Research
 310: PPUSH
 311: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) ) ;
 315: LD_INT 22
 317: PUSH
 318: LD_EXP 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 21
 329: PUSH
 330: LD_INT 1
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: PUSH
 337: LD_INT 23
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: LIST
 351: PPUSH
 352: CALL_OW 69
 356: PPUSH
 357: CALL_OW 43
// Save ;
 361: CALL 8794 0 0
// YouWin ;
 365: CALL_OW 103
// end ;
 369: LD_VAR 0 1
 373: RET
// export function VyhraExit ; begin
 374: LD_INT 0
 376: PPUSH
// set_medals ;
 377: CALL 447 0 0
// GiveMedals ( Exit ) ;
 381: LD_STRING Exit
 383: PPUSH
 384: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) ) ;
 388: LD_INT 22
 390: PUSH
 391: LD_EXP 1
 395: PUSH
 396: EMPTY
 397: LIST
 398: LIST
 399: PUSH
 400: LD_INT 21
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: PUSH
 410: LD_INT 23
 412: PUSH
 413: LD_INT 3
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: LIST
 424: PPUSH
 425: CALL_OW 69
 429: PPUSH
 430: CALL_OW 43
// Save ;
 434: CALL 8794 0 0
// YouWin ;
 438: CALL_OW 103
// end ;
 442: LD_VAR 0 1
 446: RET
// export function set_medals ; begin
 447: LD_INT 0
 449: PPUSH
// if not VsevolodSaved then
 450: LD_EXP 56
 454: NOT
 455: IFFALSE 461
// SA_NotSaveVsevolod ;
 457: CALL 33187 0 0
// SA_EndMission ( 3 , 6 , VsevolodSaved , OvsyenkoTaken and not OvsyenkoCaptured , GetTech ( tech_MatPred , you ) = state_researched ) ;
 461: LD_INT 3
 463: PPUSH
 464: LD_INT 6
 466: PPUSH
 467: LD_EXP 56
 471: PPUSH
 472: LD_EXP 14
 476: PUSH
 477: LD_EXP 15
 481: NOT
 482: AND
 483: PPUSH
 484: LD_INT 9
 486: PPUSH
 487: LD_EXP 1
 491: PPUSH
 492: CALL_OW 321
 496: PUSH
 497: LD_INT 2
 499: EQUAL
 500: PPUSH
 501: CALL 33202 0 5
// AddMedal ( Vsevolod , VsevolodSaved ) ;
 505: LD_STRING Vsevolod
 507: PPUSH
 508: LD_EXP 56
 512: PPUSH
 513: CALL_OW 101
// AddMedal ( Ovsyenko , OvsyenkoTaken and not OvsyenkoCaptured ) ;
 517: LD_STRING Ovsyenko
 519: PPUSH
 520: LD_EXP 14
 524: PUSH
 525: LD_EXP 15
 529: NOT
 530: AND
 531: PPUSH
 532: CALL_OW 101
// AddMedal ( Prediction , GetTech ( tech_MatPred , you ) = state_researched ) ;
 536: LD_STRING Prediction
 538: PPUSH
 539: LD_INT 9
 541: PPUSH
 542: LD_EXP 1
 546: PPUSH
 547: CALL_OW 321
 551: PUSH
 552: LD_INT 2
 554: EQUAL
 555: PPUSH
 556: CALL_OW 101
// end ;
 560: LD_VAR 0 1
 564: RET
// export function set_difficulty ; var d ; begin
 565: LD_INT 0
 567: PPUSH
 568: PPUSH
// d := difficulty ;
 569: LD_ADDR_VAR 0 2
 573: PUSH
 574: LD_OWVAR 67
 578: ST_TO_ADDR
// b1_levels := [ [ 1 , 3 , 5 ] [ d ] , [ 2 , 3 , 5 ] [ d ] ] ;
 579: LD_ADDR_EXP 19
 583: PUSH
 584: LD_INT 1
 586: PUSH
 587: LD_INT 3
 589: PUSH
 590: LD_INT 5
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: LIST
 597: PUSH
 598: LD_VAR 0 2
 602: ARRAY
 603: PUSH
 604: LD_INT 2
 606: PUSH
 607: LD_INT 3
 609: PUSH
 610: LD_INT 5
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: LIST
 617: PUSH
 618: LD_VAR 0 2
 622: ARRAY
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: ST_TO_ADDR
// b2_levels := [ [ 2 , 3 , 5 ] [ d ] , [ 3 , 4 , 6 ] [ d ] ] ;
 628: LD_ADDR_EXP 20
 632: PUSH
 633: LD_INT 2
 635: PUSH
 636: LD_INT 3
 638: PUSH
 639: LD_INT 5
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: LIST
 646: PUSH
 647: LD_VAR 0 2
 651: ARRAY
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 4
 658: PUSH
 659: LD_INT 6
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: LIST
 666: PUSH
 667: LD_VAR 0 2
 671: ARRAY
 672: PUSH
 673: EMPTY
 674: LIST
 675: LIST
 676: ST_TO_ADDR
// b3_levels := [ [ 2 , 5 , 8 ] [ d ] , [ 7 , 8 , 10 ] [ d ] ] ;
 677: LD_ADDR_EXP 21
 681: PUSH
 682: LD_INT 2
 684: PUSH
 685: LD_INT 5
 687: PUSH
 688: LD_INT 8
 690: PUSH
 691: EMPTY
 692: LIST
 693: LIST
 694: LIST
 695: PUSH
 696: LD_VAR 0 2
 700: ARRAY
 701: PUSH
 702: LD_INT 7
 704: PUSH
 705: LD_INT 8
 707: PUSH
 708: LD_INT 10
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: LIST
 715: PUSH
 716: LD_VAR 0 2
 720: ARRAY
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: ST_TO_ADDR
// b4_levels := [ [ 5 , 7 , 10 ] [ d ] , [ 7 , 8 , 10 ] [ d ] ] ;
 726: LD_ADDR_EXP 22
 730: PUSH
 731: LD_INT 5
 733: PUSH
 734: LD_INT 7
 736: PUSH
 737: LD_INT 10
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: LIST
 744: PUSH
 745: LD_VAR 0 2
 749: ARRAY
 750: PUSH
 751: LD_INT 7
 753: PUSH
 754: LD_INT 8
 756: PUSH
 757: LD_INT 10
 759: PUSH
 760: EMPTY
 761: LIST
 762: LIST
 763: LIST
 764: PUSH
 765: LD_VAR 0 2
 769: ARRAY
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: ST_TO_ADDR
// b5_levels := [ [ 3 , 6 , 9 ] [ d ] , [ 3 , 6 , 9 ] [ d ] ] ;
 775: LD_ADDR_EXP 23
 779: PUSH
 780: LD_INT 3
 782: PUSH
 783: LD_INT 6
 785: PUSH
 786: LD_INT 9
 788: PUSH
 789: EMPTY
 790: LIST
 791: LIST
 792: LIST
 793: PUSH
 794: LD_VAR 0 2
 798: ARRAY
 799: PUSH
 800: LD_INT 3
 802: PUSH
 803: LD_INT 6
 805: PUSH
 806: LD_INT 9
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: LIST
 813: PUSH
 814: LD_VAR 0 2
 818: ARRAY
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: ST_TO_ADDR
// mcatt_difficulty := [ 200 , 250 , 300 ] [ d ] ;
 824: LD_ADDR_EXP 17
 828: PUSH
 829: LD_INT 200
 831: PUSH
 832: LD_INT 250
 834: PUSH
 835: LD_INT 300
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: LIST
 842: PUSH
 843: LD_VAR 0 2
 847: ARRAY
 848: ST_TO_ADDR
// mcdef_difficulty := [ 270 , 350 , 450 ] [ d ] ;
 849: LD_ADDR_EXP 16
 853: PUSH
 854: LD_INT 270
 856: PUSH
 857: LD_INT 350
 859: PUSH
 860: LD_INT 450
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: LIST
 867: PUSH
 868: LD_VAR 0 2
 872: ARRAY
 873: ST_TO_ADDR
// na_kopci_mcdef_difficulty := [ 200 , 230 , 260 ] [ d ] ;
 874: LD_ADDR_EXP 18
 878: PUSH
 879: LD_INT 200
 881: PUSH
 882: LD_INT 230
 884: PUSH
 885: LD_INT 260
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: LIST
 892: PUSH
 893: LD_VAR 0 2
 897: ARRAY
 898: ST_TO_ADDR
// kolik_ma_vsevolod_casu := [ 46 46$0 , 39 39$0 , 32 32$0 ] [ d ] ;
 899: LD_ADDR_EXP 33
 903: PUSH
 904: LD_INT 96600
 906: PUSH
 907: LD_INT 81900
 909: PUSH
 910: LD_INT 67200
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: PUSH
 918: LD_VAR 0 2
 922: ARRAY
 923: ST_TO_ADDR
// kolik_ma_vsevolod_mezi_utoky := [ 10 10$0 , 8 8$0 , 5 5$0 ] [ d ] ;
 924: LD_ADDR_EXP 34
 928: PUSH
 929: LD_INT 21000
 931: PUSH
 932: LD_INT 16800
 934: PUSH
 935: LD_INT 10500
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: PUSH
 943: LD_VAR 0 2
 947: ARRAY
 948: ST_TO_ADDR
// kolik_je_v_depotu := [ 220 , 180 , 120 ] [ d ] ;
 949: LD_ADDR_EXP 35
 953: PUSH
 954: LD_INT 220
 956: PUSH
 957: LD_INT 180
 959: PUSH
 960: LD_INT 120
 962: PUSH
 963: EMPTY
 964: LIST
 965: LIST
 966: LIST
 967: PUSH
 968: LD_VAR 0 2
 972: ARRAY
 973: ST_TO_ADDR
// kolik_je_sib_v_hornim := [ 130 , 90 , 65 ] [ d ] ;
 974: LD_ADDR_EXP 36
 978: PUSH
 979: LD_INT 130
 981: PUSH
 982: LD_INT 90
 984: PUSH
 985: LD_INT 65
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_VAR 0 2
 997: ARRAY
 998: ST_TO_ADDR
// zivoty_armoury := [ hranice_umirani + 50 , hranice_umirani + 150 , hranice_umirani + 350 ] [ d ] ;
 999: LD_ADDR_EXP 37
1003: PUSH
1004: LD_INT 250
1006: PUSH
1007: LD_INT 50
1009: PLUS
1010: PUSH
1011: LD_INT 250
1013: PUSH
1014: LD_INT 150
1016: PLUS
1017: PUSH
1018: LD_INT 250
1020: PUSH
1021: LD_INT 350
1023: PLUS
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: PUSH
1030: LD_VAR 0 2
1034: ARRAY
1035: ST_TO_ADDR
// zivoty_armoury2 := [ hranice_umirani + 150 , hranice_umirani + 350 , hranice_umirani + 550 ] [ d ] ;
1036: LD_ADDR_EXP 38
1040: PUSH
1041: LD_INT 250
1043: PUSH
1044: LD_INT 150
1046: PLUS
1047: PUSH
1048: LD_INT 250
1050: PUSH
1051: LD_INT 350
1053: PLUS
1054: PUSH
1055: LD_INT 250
1057: PUSH
1058: LD_INT 550
1060: PLUS
1061: PUSH
1062: EMPTY
1063: LIST
1064: LIST
1065: LIST
1066: PUSH
1067: LD_VAR 0 2
1071: ARRAY
1072: ST_TO_ADDR
// cas_mezi_utoky := [ 6 6$0 , 3 3$0 , 0 0$30 ] [ d ] ;
1073: LD_ADDR_EXP 31
1077: PUSH
1078: LD_INT 12600
1080: PUSH
1081: LD_INT 6300
1083: PUSH
1084: LD_INT 1050
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_VAR 0 2
1096: ARRAY
1097: ST_TO_ADDR
// utoci_max := [ 3 , 6 , 9 ] [ d ] ;
1098: LD_ADDR_EXP 39
1102: PUSH
1103: LD_INT 3
1105: PUSH
1106: LD_INT 6
1108: PUSH
1109: LD_INT 9
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: PUSH
1117: LD_VAR 0 2
1121: ARRAY
1122: ST_TO_ADDR
// cas_prvniho_utoku := [ 5 5$0 , 3 3$30 , 1 1$0 ] [ d ] ;
1123: LD_ADDR_EXP 32
1127: PUSH
1128: LD_INT 10500
1130: PUSH
1131: LD_INT 7350
1133: PUSH
1134: LD_INT 2100
1136: PUSH
1137: EMPTY
1138: LIST
1139: LIST
1140: LIST
1141: PUSH
1142: LD_VAR 0 2
1146: ARRAY
1147: ST_TO_ADDR
// end ;
1148: LD_VAR 0 1
1152: RET
// export mrtvi_vsevolodaci ; every 0 0$1 do
1153: GO 1155
1155: DISABLE
// begin debug_strings := [ mrtvi_vsevolodaci , [ ( tick div 0 0$1 ) div 60 , ( tick div 0 0$1 ) mod 60 ] ] ;
1156: LD_ADDR_OWVAR 48
1160: PUSH
1161: LD_EXP 41
1165: PUSH
1166: LD_OWVAR 1
1170: PUSH
1171: LD_INT 35
1173: DIV
1174: PUSH
1175: LD_INT 60
1177: DIV
1178: PUSH
1179: LD_OWVAR 1
1183: PUSH
1184: LD_INT 35
1186: DIV
1187: PUSH
1188: LD_INT 60
1190: MOD
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: ST_TO_ADDR
// enable ;
1200: ENABLE
// end ;
1201: END
// starting begin all_labs := [ b_lab , b_lab_half , b_lab_full ] ;
1202: LD_ADDR_EXP 40
1206: PUSH
1207: LD_INT 6
1209: PUSH
1210: LD_INT 7
1212: PUSH
1213: LD_INT 8
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: LIST
1220: ST_TO_ADDR
// normal1_utok := 7001 ;
1221: LD_ADDR_EXP 24
1225: PUSH
1226: LD_INT 7001
1228: ST_TO_ADDR
// normal2_utok := 7002 ;
1229: LD_ADDR_EXP 25
1233: PUSH
1234: LD_INT 7002
1236: ST_TO_ADDR
// normal3_utok := 7003 ;
1237: LD_ADDR_EXP 26
1241: PUSH
1242: LD_INT 7003
1244: ST_TO_ADDR
// normal4_utok := 7004 ;
1245: LD_ADDR_EXP 27
1249: PUSH
1250: LD_INT 7004
1252: ST_TO_ADDR
// vsevolod_attack := 7005 ;
1253: LD_ADDR_EXP 28
1257: PUSH
1258: LD_INT 7005
1260: ST_TO_ADDR
// vsevolod_final_attack := 7006 ;
1261: LD_ADDR_EXP 29
1265: PUSH
1266: LD_INT 7006
1268: ST_TO_ADDR
// SetBName ( RuDepot , ovsyenko ) ;
1269: LD_INT 58
1271: PPUSH
1272: LD_STRING ovsyenko
1274: PPUSH
1275: CALL_OW 500
// set_difficulty ;
1279: CALL 565 0 0
// set_sides ;
1283: CALL 8 0 0
// load ;
1287: CALL 7306 0 0
// place_b ;
1291: CALL 19247 0 0
// place_in_ru_cars ;
1295: CALL 8221 0 0
// place_ru_cars ;
1299: CALL 8571 0 0
// apemans := FilterAllUnits ( [ [ f_nation , nation_nature ] , [ f_type , unit_human ] ] ) ;
1303: LD_ADDR_EXP 8
1307: PUSH
1308: LD_INT 23
1310: PUSH
1311: LD_INT 0
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: PUSH
1318: LD_INT 21
1320: PUSH
1321: LD_INT 1
1323: PUSH
1324: EMPTY
1325: LIST
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PPUSH
1332: CALL_OW 69
1336: ST_TO_ADDR
// set_shorts ;
1337: CALL 1346 0 0
// DStart ;
1341: CALL 1454 0 0
// end ; end_of_file
1345: END
// export Kar , Lip , Bur , Pla , Ptr , Pty , Glb , Tit , Dol , Vse ; export donttalk ; export function set_shorts ; begin
1346: LD_INT 0
1348: PPUSH
// Kar := Karamazov ;
1349: LD_ADDR_EXP 42
1353: PUSH
1354: LD_EXP 63
1358: ST_TO_ADDR
// Lip := Lipshchin ;
1359: LD_ADDR_EXP 43
1363: PUSH
1364: LD_EXP 69
1368: ST_TO_ADDR
// Bur := Burlak ;
1369: LD_ADDR_EXP 44
1373: PUSH
1374: LD_EXP 61
1378: ST_TO_ADDR
// Pla := Platonov ;
1379: LD_ADDR_EXP 45
1383: PUSH
1384: LD_EXP 62
1388: ST_TO_ADDR
// Ptr := Petrovova ;
1389: LD_ADDR_EXP 46
1393: PUSH
1394: LD_EXP 64
1398: ST_TO_ADDR
// Pty := Petrosyan ;
1399: LD_ADDR_EXP 47
1403: PUSH
1404: LD_EXP 66
1408: ST_TO_ADDR
// Glb := Gleb ;
1409: LD_ADDR_EXP 48
1413: PUSH
1414: LD_EXP 65
1418: ST_TO_ADDR
// Tit := Titov ;
1419: LD_ADDR_EXP 49
1423: PUSH
1424: LD_EXP 67
1428: ST_TO_ADDR
// Dol := Dolgov ;
1429: LD_ADDR_EXP 50
1433: PUSH
1434: LD_EXP 68
1438: ST_TO_ADDR
// Vse := Vsevolod ;
1439: LD_ADDR_EXP 51
1443: PUSH
1444: LD_EXP 70
1448: ST_TO_ADDR
// end ;
1449: LD_VAR 0 1
1453: RET
// export function DStart ; begin
1454: LD_INT 0
1456: PPUSH
// CenterNowOnXY ( 120 , 140 ) ;
1457: LD_INT 120
1459: PPUSH
1460: LD_INT 140
1462: PPUSH
1463: CALL_OW 86
// CenterNowOnXY ( 120 , 140 ) ;
1467: LD_INT 120
1469: PPUSH
1470: LD_INT 140
1472: PPUSH
1473: CALL_OW 86
// DialogueOn ;
1477: CALL_OW 6
// if not Say ( Kar , DStart-Kar-1 ) then
1481: LD_EXP 42
1485: PPUSH
1486: LD_STRING DStart-Kar-1
1488: PPUSH
1489: CALL_OW 88
1493: NOT
1494: IFFALSE 1508
// Say ( Lip , DStart-Lip-1 ) ;
1496: LD_EXP 43
1500: PPUSH
1501: LD_STRING DStart-Lip-1
1503: PPUSH
1504: CALL_OW 88
// Say ( Bur , DStart-Bur-1 ) ;
1508: LD_EXP 44
1512: PPUSH
1513: LD_STRING DStart-Bur-1
1515: PPUSH
1516: CALL_OW 88
// Dwait ( 0 0$3 ) ;
1520: LD_INT 105
1522: PPUSH
1523: CALL_OW 68
// SayRadio ( Pla , DStart-Pla-1 ) ;
1527: LD_EXP 45
1531: PPUSH
1532: LD_STRING DStart-Pla-1
1534: PPUSH
1535: CALL_OW 94
// Say ( Bur , DStart-Bur-2 ) ;
1539: LD_EXP 44
1543: PPUSH
1544: LD_STRING DStart-Bur-2
1546: PPUSH
1547: CALL_OW 88
// Say ( Ptr , DStart-Ptr-2 ) ;
1551: LD_EXP 46
1555: PPUSH
1556: LD_STRING DStart-Ptr-2
1558: PPUSH
1559: CALL_OW 88
// SaveForQuickRestart ;
1563: CALL_OW 22
// ChangeMissionObjectives ( MStart ) ;
1567: LD_STRING MStart
1569: PPUSH
1570: CALL_OW 337
// DialogueOff ;
1574: CALL_OW 7
// end ;
1578: LD_VAR 0 1
1582: RET
// every 0 0$2 trigger GetSide ( RuDepot ) = you or not FilterHumansInArea ( ovsyenko_base , [ [ f_side , ai ] ] ) do
1583: LD_INT 58
1585: PPUSH
1586: CALL_OW 255
1590: PUSH
1591: LD_EXP 1
1595: EQUAL
1596: PUSH
1597: LD_INT 14
1599: PPUSH
1600: LD_INT 22
1602: PUSH
1603: LD_EXP 6
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: EMPTY
1613: LIST
1614: PPUSH
1615: CALL 11017 0 2
1619: NOT
1620: OR
1621: IFFALSE 1638
1623: GO 1625
1625: DISABLE
// begin DOvsyenkoTaken ;
1626: CALL 1639 0 0
// OvsyenkoTaken := 1 ;
1630: LD_ADDR_EXP 14
1634: PUSH
1635: LD_INT 1
1637: ST_TO_ADDR
// end ;
1638: END
// export function DOvsyenkoTaken ; begin
1639: LD_INT 0
1641: PPUSH
// DialogueOn ;
1642: CALL_OW 6
// Say ( Bur , DOvsyenkoTaken-Bur-1 ) ;
1646: LD_EXP 44
1650: PPUSH
1651: LD_STRING DOvsyenkoTaken-Bur-1
1653: PPUSH
1654: CALL_OW 88
// SayRadio ( Pla , DOvsyenkoTaken-Pla-1 ) ;
1658: LD_EXP 45
1662: PPUSH
1663: LD_STRING DOvsyenkoTaken-Pla-1
1665: PPUSH
1666: CALL_OW 94
// Say ( Kar , DOvsyenkoTaken-Kar-1 ) ;
1670: LD_EXP 42
1674: PPUSH
1675: LD_STRING DOvsyenkoTaken-Kar-1
1677: PPUSH
1678: CALL_OW 88
// Say ( Tit , DOvsyenkoTaken-Tit-1 ) ;
1682: LD_EXP 49
1686: PPUSH
1687: LD_STRING DOvsyenkoTaken-Tit-1
1689: PPUSH
1690: CALL_OW 88
// if Say ( Lip , DOvsyenkoTaken-Lip-1 ) then
1694: LD_EXP 43
1698: PPUSH
1699: LD_STRING DOvsyenkoTaken-Lip-1
1701: PPUSH
1702: CALL_OW 88
1706: IFFALSE 1720
// Say ( Glb , DOvsyenkoTaken-Glb-1 ) ;
1708: LD_EXP 48
1712: PPUSH
1713: LD_STRING DOvsyenkoTaken-Glb-1
1715: PPUSH
1716: CALL_OW 88
// ChangeMissionObjectives ( MOutCapture ) ;
1720: LD_STRING MOutCapture
1722: PPUSH
1723: CALL_OW 337
// ChangeMissionObjectives ( MAddMine ) ;
1727: LD_STRING MAddMine
1729: PPUSH
1730: CALL_OW 337
// DialogueOff ;
1734: CALL_OW 7
// MyHint ( Capturing ) ;
1738: LD_STRING Capturing
1740: PPUSH
1741: CALL 12040 0 1
// MyHint ( SibDet ) ;
1745: LD_STRING SibDet
1747: PPUSH
1748: CALL 12040 0 1
// end ;
1752: LD_VAR 0 1
1756: RET
// export function DMatPrediction ; begin
1757: LD_INT 0
1759: PPUSH
// DialogueOn ;
1760: CALL_OW 6
// if IsOK ( Pty ) or IsOk ( Dol ) then
1764: LD_EXP 47
1768: PPUSH
1769: CALL_OW 302
1773: PUSH
1774: LD_EXP 50
1778: PPUSH
1779: CALL_OW 302
1783: OR
1784: IFFALSE 1891
// begin if not Say ( Pty , DMatPrediction-Pty-1 ) then
1786: LD_EXP 47
1790: PPUSH
1791: LD_STRING DMatPrediction-Pty-1
1793: PPUSH
1794: CALL_OW 88
1798: NOT
1799: IFFALSE 1813
// Say ( Dol , DMatPrediction-Dol-1 ) ;
1801: LD_EXP 50
1805: PPUSH
1806: LD_STRING DMatPrediction-Dol-1
1808: PPUSH
1809: CALL_OW 88
// Say ( Bur , DMatPrediction-Bur-1 ) ;
1813: LD_EXP 44
1817: PPUSH
1818: LD_STRING DMatPrediction-Bur-1
1820: PPUSH
1821: CALL_OW 88
// if not Say ( Pty , DMatPrediction-Pty-2 ) then
1825: LD_EXP 47
1829: PPUSH
1830: LD_STRING DMatPrediction-Pty-2
1832: PPUSH
1833: CALL_OW 88
1837: NOT
1838: IFFALSE 1852
// Say ( Dol , DMatPrediction-Dol-2 ) ;
1840: LD_EXP 50
1844: PPUSH
1845: LD_STRING DMatPrediction-Dol-2
1847: PPUSH
1848: CALL_OW 88
// Say ( Bur , DMatPrediction-Bur-2 ) ;
1852: LD_EXP 44
1856: PPUSH
1857: LD_STRING DMatPrediction-Bur-2
1859: PPUSH
1860: CALL_OW 88
// if not Say ( Pty , DMatPrediction-Pty-3 ) then
1864: LD_EXP 47
1868: PPUSH
1869: LD_STRING DMatPrediction-Pty-3
1871: PPUSH
1872: CALL_OW 88
1876: NOT
1877: IFFALSE 1891
// Say ( Dol , DMatPrediction-Dol-3 ) ;
1879: LD_EXP 50
1883: PPUSH
1884: LD_STRING DMatPrediction-Dol-3
1886: PPUSH
1887: CALL_OW 88
// end ; ChangeMissionObjectives ( MPred ) ;
1891: LD_STRING MPred
1893: PPUSH
1894: CALL_OW 337
// DialogueOff ;
1898: CALL_OW 7
// end ;
1902: LD_VAR 0 1
1906: RET
// export function DNoMaterial ; begin
1907: LD_INT 0
1909: PPUSH
// DialogueOn ;
1910: CALL_OW 6
// if not Say ( Pty , DNoMaterial-Pty-1 ) then
1914: LD_EXP 47
1918: PPUSH
1919: LD_STRING DNoMaterial-Pty-1
1921: PPUSH
1922: CALL_OW 88
1926: NOT
1927: IFFALSE 1941
// Say ( Dol , DNoMaterial-Dol-1 ) ;
1929: LD_EXP 50
1933: PPUSH
1934: LD_STRING DNoMaterial-Dol-1
1936: PPUSH
1937: CALL_OW 88
// Say ( Bur , DNoMaterial-Bur-1 ) ;
1941: LD_EXP 44
1945: PPUSH
1946: LD_STRING DNoMaterial-Bur-1
1948: PPUSH
1949: CALL_OW 88
// if not Say ( Pty , DNoMaterial-Pty-2 ) then
1953: LD_EXP 47
1957: PPUSH
1958: LD_STRING DNoMaterial-Pty-2
1960: PPUSH
1961: CALL_OW 88
1965: NOT
1966: IFFALSE 1980
// Say ( Dol , DNoMaterial-Dol-2 ) ;
1968: LD_EXP 50
1972: PPUSH
1973: LD_STRING DNoMaterial-Dol-2
1975: PPUSH
1976: CALL_OW 88
// Say ( Bur , DNoMaterial-Bur-2 ) ;
1980: LD_EXP 44
1984: PPUSH
1985: LD_STRING DNoMaterial-Bur-2
1987: PPUSH
1988: CALL_OW 88
// ChangeMissionObjectives ( MOutPred ) ;
1992: LD_STRING MOutPred
1994: PPUSH
1995: CALL_OW 337
// DialogueOff ;
1999: CALL_OW 7
// MyHint ( Prediction ) ;
2003: LD_STRING Prediction
2005: PPUSH
2006: CALL 12040 0 1
// end ;
2010: LD_VAR 0 1
2014: RET
// export byl_sib_research ; every 0 0$2 trigger GetResourceVisibility ( 101 , 93 , you ) or GetResourceVisibility ( 53 , 55 , you ) or GetResourceVisibility ( 29 , 30 , you ) or FilterAllUnits ( [ [ f_side , you ] , [ f_btype , b_siberite_mine ] ] ) > 0 or DepotWithSiberite marked 66 do
2015: LD_INT 101
2017: PPUSH
2018: LD_INT 93
2020: PPUSH
2021: LD_EXP 1
2025: PPUSH
2026: CALL_OW 440
2030: PUSH
2031: LD_INT 53
2033: PPUSH
2034: LD_INT 55
2036: PPUSH
2037: LD_EXP 1
2041: PPUSH
2042: CALL_OW 440
2046: OR
2047: PUSH
2048: LD_INT 29
2050: PPUSH
2051: LD_INT 30
2053: PPUSH
2054: LD_EXP 1
2058: PPUSH
2059: CALL_OW 440
2063: OR
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: LD_EXP 1
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: PUSH
2077: LD_INT 30
2079: PUSH
2080: LD_INT 30
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PPUSH
2091: CALL_OW 69
2095: PUSH
2096: LD_INT 0
2098: GREATER
2099: OR
2100: PUSH
2101: CALL 12200 0 0
2105: OR
2106: IFFALSE 2115
2108: GO 2110
2110: DISABLE
// begin DSibResearch ;
2111: CALL 2116 0 0
// end ;
2115: END
// export function DSibResearch ; begin
2116: LD_INT 0
2118: PPUSH
// byl_sib_research := true ;
2119: LD_ADDR_EXP 53
2123: PUSH
2124: LD_INT 1
2126: ST_TO_ADDR
// DialogueOn ;
2127: CALL_OW 6
// if not Say ( Pty , DSibResearch-Pty-1 ) then
2131: LD_EXP 47
2135: PPUSH
2136: LD_STRING DSibResearch-Pty-1
2138: PPUSH
2139: CALL_OW 88
2143: NOT
2144: IFFALSE 2158
// Say ( Dol , DSibResearch-Dol-1 ) ;
2146: LD_EXP 50
2150: PPUSH
2151: LD_STRING DSibResearch-Dol-1
2153: PPUSH
2154: CALL_OW 88
// Say ( Bur , DSibResearch-Bur-1 ) ;
2158: LD_EXP 44
2162: PPUSH
2163: LD_STRING DSibResearch-Bur-1
2165: PPUSH
2166: CALL_OW 88
// SayRadio ( Pla , DSibResearch-Pla-1 ) ;
2170: LD_EXP 45
2174: PPUSH
2175: LD_STRING DSibResearch-Pla-1
2177: PPUSH
2178: CALL_OW 94
// ChangeMissionObjectives ( MResearch ) ;
2182: LD_STRING MResearch
2184: PPUSH
2185: CALL_OW 337
// DialogueOff ;
2189: CALL_OW 7
// end ;
2193: LD_VAR 0 1
2197: RET
// function AnyUnitOver ( y ) ; var res , i ; begin
2198: LD_INT 0
2200: PPUSH
2201: PPUSH
2202: PPUSH
// res := false ;
2203: LD_ADDR_VAR 0 3
2207: PUSH
2208: LD_INT 0
2210: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , you ] , [ f_not , [ f_type , unit_building ] ] ] ) do
2211: LD_ADDR_VAR 0 4
2215: PUSH
2216: LD_INT 22
2218: PUSH
2219: LD_EXP 1
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: PUSH
2228: LD_INT 3
2230: PUSH
2231: LD_INT 21
2233: PUSH
2234: LD_INT 3
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: PPUSH
2249: CALL_OW 69
2253: PUSH
2254: FOR_IN
2255: IFFALSE 2286
// if GetY ( i ) < y then
2257: LD_VAR 0 4
2261: PPUSH
2262: CALL_OW 251
2266: PUSH
2267: LD_VAR 0 1
2271: LESS
2272: IFFALSE 2284
// begin res := true ;
2274: LD_ADDR_VAR 0 3
2278: PUSH
2279: LD_INT 1
2281: ST_TO_ADDR
// break ;
2282: GO 2286
// end ;
2284: GO 2254
2286: POP
2287: POP
// result := res ;
2288: LD_ADDR_VAR 0 2
2292: PUSH
2293: LD_VAR 0 3
2297: ST_TO_ADDR
// end ;
2298: LD_VAR 0 2
2302: RET
// every 0 0$4 trigger ( OvsyenkoTaken and GetTechProgress ( tech_SibDet , you ) > 50 ) or AnyUnitOver ( 30 ) do var i ;
2303: LD_EXP 14
2307: PUSH
2308: LD_INT 20
2310: PPUSH
2311: LD_EXP 1
2315: PPUSH
2316: CALL_OW 326
2320: PUSH
2321: LD_INT 50
2323: GREATER
2324: AND
2325: PUSH
2326: LD_INT 30
2328: PPUSH
2329: CALL 2198 0 1
2333: OR
2334: IFFALSE 2735
2336: GO 2338
2338: DISABLE
2339: LD_INT 0
2341: PPUSH
// begin PlaceUnitArea ( Vsevolod , vsevolod_in , false ) ;
2342: LD_EXP 70
2346: PPUSH
2347: LD_INT 16
2349: PPUSH
2350: LD_INT 0
2352: PPUSH
2353: CALL_OW 49
// for i in Vsevolod_uderna_group do
2357: LD_ADDR_VAR 0 1
2361: PUSH
2362: LD_EXP 12
2366: PUSH
2367: FOR_IN
2368: IFFALSE 2387
// PlaceUnitArea ( i , vsevolod_in , false ) ;
2370: LD_VAR 0 1
2374: PPUSH
2375: LD_INT 16
2377: PPUSH
2378: LD_INT 0
2380: PPUSH
2381: CALL_OW 49
2385: GO 2367
2387: POP
2388: POP
// ComAgressiveMove ( Vsevolod_uderna_group ^ [ vsevolod ] , 51 , 11 ) ;
2389: LD_EXP 12
2393: PUSH
2394: LD_EXP 70
2398: PUSH
2399: EMPTY
2400: LIST
2401: ADD
2402: PPUSH
2403: LD_INT 51
2405: PPUSH
2406: LD_INT 11
2408: PPUSH
2409: CALL_OW 114
// DoNotAttack ( ai , Vsevolod ) ;
2413: LD_EXP 6
2417: PPUSH
2418: LD_EXP 70
2422: PPUSH
2423: CALL_OW 471
// for i in UnitFilter ( vsevolod_uderna_group , [ [ f_class , class_engineer ] ] ) do
2427: LD_ADDR_VAR 0 1
2431: PUSH
2432: LD_EXP 12
2436: PPUSH
2437: LD_INT 25
2439: PUSH
2440: LD_INT 2
2442: PUSH
2443: EMPTY
2444: LIST
2445: LIST
2446: PUSH
2447: EMPTY
2448: LIST
2449: PPUSH
2450: CALL_OW 72
2454: PUSH
2455: FOR_IN
2456: IFFALSE 2474
// DoNotAttack ( ai , i ) ;
2458: LD_EXP 6
2462: PPUSH
2463: LD_VAR 0 1
2467: PPUSH
2468: CALL_OW 471
2472: GO 2455
2474: POP
2475: POP
// wait ( 0 0$5 ) ;
2476: LD_INT 175
2478: PPUSH
2479: CALL_OW 67
// ComAgressiveMove ( FilterHumansInArea ( near_base2 , [ [ f_side , ai ] ] ) , 51 , 11 ) ;
2483: LD_INT 3
2485: PPUSH
2486: LD_INT 22
2488: PUSH
2489: LD_EXP 6
2493: PUSH
2494: EMPTY
2495: LIST
2496: LIST
2497: PUSH
2498: EMPTY
2499: LIST
2500: PPUSH
2501: CALL 11017 0 2
2505: PPUSH
2506: LD_INT 51
2508: PPUSH
2509: LD_INT 11
2511: PPUSH
2512: CALL_OW 114
// wait ( 0 0$10 ) ;
2516: LD_INT 350
2518: PPUSH
2519: CALL_OW 67
// ComMoveXY ( FilterHumansInArea ( near_base2 , [ [ f_side , ai ] ] ) , 23 , 28 ) ;
2523: LD_INT 3
2525: PPUSH
2526: LD_INT 22
2528: PUSH
2529: LD_EXP 6
2533: PUSH
2534: EMPTY
2535: LIST
2536: LIST
2537: PUSH
2538: EMPTY
2539: LIST
2540: PPUSH
2541: CALL 11017 0 2
2545: PPUSH
2546: LD_INT 23
2548: PPUSH
2549: LD_INT 28
2551: PPUSH
2552: CALL_OW 111
// SetSideBase ( GetBase ( vsevd1 ) , you2 ) ;
2556: LD_INT 182
2558: PPUSH
2559: CALL_OW 274
2563: PPUSH
2564: LD_EXP 2
2568: PPUSH
2569: CALL_OW 236
// SetBName ( vsevd1 , gorkij ) ;
2573: LD_INT 182
2575: PPUSH
2576: LD_STRING gorkij
2578: PPUSH
2579: CALL_OW 500
// ComEnterUnit ( Vsevolod , vseva1 ) ;
2583: LD_EXP 70
2587: PPUSH
2588: LD_INT 190
2590: PPUSH
2591: CALL_OW 120
// ComEnterUnit ( vsevolod_uderna_group , vseva1 ) ;
2595: LD_EXP 12
2599: PPUSH
2600: LD_INT 190
2602: PPUSH
2603: CALL_OW 120
// ComEnterUnit ( UnitFilter ( vsevolod_uderna_group , [ [ f_class , class_engineer ] ] ) , vseva1 ) ;
2607: LD_EXP 12
2611: PPUSH
2612: LD_INT 25
2614: PUSH
2615: LD_INT 2
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: PUSH
2622: EMPTY
2623: LIST
2624: PPUSH
2625: CALL_OW 72
2629: PPUSH
2630: LD_INT 190
2632: PPUSH
2633: CALL_OW 120
// for i in vsevolod_uderna_group do
2637: LD_ADDR_VAR 0 1
2641: PUSH
2642: LD_EXP 12
2646: PUSH
2647: FOR_IN
2648: IFFALSE 2666
// NormalAttack ( ai , i ) ;
2650: LD_EXP 6
2654: PPUSH
2655: LD_VAR 0 1
2659: PPUSH
2660: CALL_OW 472
2664: GO 2647
2666: POP
2667: POP
// AddComChangeProfession ( UnitFilter ( vsevolod_uderna_group , [ [ f_class , class_engineer ] ] ) , class_soldier ) ;
2668: LD_EXP 12
2672: PPUSH
2673: LD_INT 25
2675: PUSH
2676: LD_INT 2
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: EMPTY
2684: LIST
2685: PPUSH
2686: CALL_OW 72
2690: PPUSH
2691: LD_INT 1
2693: PPUSH
2694: CALL_OW 183
// ComEnterUnit ( vsevolod_uderna_group [ 2 ] , vsevb1 ) ;
2698: LD_EXP 12
2702: PUSH
2703: LD_INT 2
2705: ARRAY
2706: PPUSH
2707: LD_INT 193
2709: PPUSH
2710: CALL_OW 120
// wait ( 0 0$5 ) ;
2714: LD_INT 175
2716: PPUSH
2717: CALL_OW 67
// Vsevolod_vstoupil := tick ;
2721: LD_ADDR_EXP 11
2725: PUSH
2726: LD_OWVAR 1
2730: ST_TO_ADDR
// DVsevolod ;
2731: CALL 2738 0 0
// end ;
2735: PPOPN 1
2737: END
// export function DVsevolod ; var who ; begin
2738: LD_INT 0
2740: PPUSH
2741: PPUSH
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 0 ) ;
2742: LD_ADDR_VAR 0 2
2746: PUSH
2747: LD_EXP 52
2751: PPUSH
2752: LD_EXP 1
2756: PPUSH
2757: LD_INT 1
2759: PPUSH
2760: LD_INT 0
2762: PPUSH
2763: LD_INT 0
2765: PPUSH
2766: CALL 10726 0 5
2770: ST_TO_ADDR
// DialogueOn ;
2771: CALL_OW 6
// Say ( Dol , DVsevolod-Dol-1 ) ;
2775: LD_EXP 50
2779: PPUSH
2780: LD_STRING DVsevolod-Dol-1
2782: PPUSH
2783: CALL_OW 88
// SayRadio ( Vse , DVsevolod-Vse-1 ) ;
2787: LD_EXP 51
2791: PPUSH
2792: LD_STRING DVsevolod-Vse-1
2794: PPUSH
2795: CALL_OW 94
// Say ( Bur , DVsevolod-Bur-1 ) ;
2799: LD_EXP 44
2803: PPUSH
2804: LD_STRING DVsevolod-Bur-1
2806: PPUSH
2807: CALL_OW 88
// Say ( Glb , DVsevolod-Glb-1 ) ;
2811: LD_EXP 48
2815: PPUSH
2816: LD_STRING DVsevolod-Glb-1
2818: PPUSH
2819: CALL_OW 88
// SayRadio ( Vse , DVsevolod-Vse-2 ) ;
2823: LD_EXP 51
2827: PPUSH
2828: LD_STRING DVsevolod-Vse-2
2830: PPUSH
2831: CALL_OW 94
// Say ( Bur , DVsevolod-Bur-2 ) ;
2835: LD_EXP 44
2839: PPUSH
2840: LD_STRING DVsevolod-Bur-2
2842: PPUSH
2843: CALL_OW 88
// SayRadio ( Vse , DVsevolod-Vse-3 ) ;
2847: LD_EXP 51
2851: PPUSH
2852: LD_STRING DVsevolod-Vse-3
2854: PPUSH
2855: CALL_OW 94
// Say ( Bur , DVsevolod-Bur-3 ) ;
2859: LD_EXP 44
2863: PPUSH
2864: LD_STRING DVsevolod-Bur-3
2866: PPUSH
2867: CALL_OW 88
// SayRadio ( Vse , DVsevolod-Vse-4 ) ;
2871: LD_EXP 51
2875: PPUSH
2876: LD_STRING DVsevolod-Vse-4
2878: PPUSH
2879: CALL_OW 94
// Say ( Bur , DVsevolod-Bur-4 ) ;
2883: LD_EXP 44
2887: PPUSH
2888: LD_STRING DVsevolod-Bur-4
2890: PPUSH
2891: CALL_OW 88
// if Say ( Glb , DVsevolod-Glb-4 ) then
2895: LD_EXP 48
2899: PPUSH
2900: LD_STRING DVsevolod-Glb-4
2902: PPUSH
2903: CALL_OW 88
2907: IFFALSE 2921
// Say ( Bur , DVsevolod-Bur-5 ) ;
2909: LD_EXP 44
2913: PPUSH
2914: LD_STRING DVsevolod-Bur-5
2916: PPUSH
2917: CALL_OW 88
// if not IsOk ( Glb ) then
2921: LD_EXP 48
2925: PPUSH
2926: CALL_OW 302
2930: NOT
2931: IFFALSE 2945
// Say ( who , DVsevolod-RSol1-5 ) ;
2933: LD_VAR 0 2
2937: PPUSH
2938: LD_STRING DVsevolod-RSol1-5
2940: PPUSH
2941: CALL_OW 88
// Say ( Bur , DVsevolod-Bur-6 ) ;
2945: LD_EXP 44
2949: PPUSH
2950: LD_STRING DVsevolod-Bur-6
2952: PPUSH
2953: CALL_OW 88
// Say ( Dol , DVsevolod-Dol-6 ) ;
2957: LD_EXP 50
2961: PPUSH
2962: LD_STRING DVsevolod-Dol-6
2964: PPUSH
2965: CALL_OW 88
// RevealFogArea ( you , near_base2 ) ;
2969: LD_EXP 1
2973: PPUSH
2974: LD_INT 3
2976: PPUSH
2977: CALL_OW 332
// CenterNowOnXY ( 51 , 13 ) ;
2981: LD_INT 51
2983: PPUSH
2984: LD_INT 13
2986: PPUSH
2987: CALL_OW 86
// dwait ( 0 0$1 ) ;
2991: LD_INT 35
2993: PPUSH
2994: CALL_OW 68
// Say ( Bur , DVsevolod-Bur-7 ) ;
2998: LD_EXP 44
3002: PPUSH
3003: LD_STRING DVsevolod-Bur-7
3005: PPUSH
3006: CALL_OW 88
// SayRadio ( Vse , DVsevolod-Vse-7 ) ;
3010: LD_EXP 51
3014: PPUSH
3015: LD_STRING DVsevolod-Vse-7
3017: PPUSH
3018: CALL_OW 94
// Say ( Bur , DVsevolod-Bur-8 ) ;
3022: LD_EXP 44
3026: PPUSH
3027: LD_STRING DVsevolod-Bur-8
3029: PPUSH
3030: CALL_OW 88
// DialogueOff ;
3034: CALL_OW 7
// ChangeMissionObjectives ( MVsevolod ) ;
3038: LD_STRING MVsevolod
3040: PPUSH
3041: CALL_OW 337
// end ;
3045: LD_VAR 0 1
3049: RET
// every 0 0$2 trigger vsevolod_vstoupil and tick > ( vsevolod_vstoupil + 0 0$6 ) do
3050: LD_EXP 11
3054: PUSH
3055: LD_OWVAR 1
3059: PUSH
3060: LD_EXP 11
3064: PUSH
3065: LD_INT 210
3067: PLUS
3068: GREATER
3069: AND
3070: IFFALSE 3095
3072: GO 3074
3074: DISABLE
// begin if belkovfreed then
3075: LD_EXP 13
3079: IFFALSE 3087
// DHelp1 else
3081: CALL 3096 0 0
3085: GO 3091
// DHelp2 ;
3087: CALL 3208 0 0
// DHelp3 ;
3091: CALL 3350 0 0
// end ;
3095: END
// export function DHelp1 ; var who ; begin
3096: LD_INT 0
3098: PPUSH
3099: PPUSH
// DialogueOn ;
3100: CALL_OW 6
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 0 ) ;
3104: LD_ADDR_VAR 0 2
3108: PUSH
3109: LD_EXP 52
3113: PPUSH
3114: LD_EXP 1
3118: PPUSH
3119: LD_INT 1
3121: PPUSH
3122: LD_INT 0
3124: PPUSH
3125: LD_INT 0
3127: PPUSH
3128: CALL 10726 0 5
3132: ST_TO_ADDR
// if ( not Say ( Glb , DHelp1-Glb-1 ) ) and ( not Say ( Dol , DHelp1-Dol-1 ) ) then
3133: LD_EXP 48
3137: PPUSH
3138: LD_STRING DHelp1-Glb-1
3140: PPUSH
3141: CALL_OW 88
3145: NOT
3146: PUSH
3147: LD_EXP 50
3151: PPUSH
3152: LD_STRING DHelp1-Dol-1
3154: PPUSH
3155: CALL_OW 88
3159: NOT
3160: AND
3161: IFFALSE 3175
// Say ( who , DHelp1-RSol1-1 ) ;
3163: LD_VAR 0 2
3167: PPUSH
3168: LD_STRING DHelp1-RSol1-1
3170: PPUSH
3171: CALL_OW 88
// Say ( Tit , DHelp1-Tit-1 ) ;
3175: LD_EXP 49
3179: PPUSH
3180: LD_STRING DHelp1-Tit-1
3182: PPUSH
3183: CALL_OW 88
// Say ( Glb , DHelp1-Glb-2 ) ;
3187: LD_EXP 48
3191: PPUSH
3192: LD_STRING DHelp1-Glb-2
3194: PPUSH
3195: CALL_OW 88
// DialogueOff ;
3199: CALL_OW 7
// end ;
3203: LD_VAR 0 1
3207: RET
// export function DHelp2 ; var who , who2 ; begin
3208: LD_INT 0
3210: PPUSH
3211: PPUSH
3212: PPUSH
// DialogueOn ;
3213: CALL_OW 6
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 1 ) ;
3217: LD_ADDR_VAR 0 2
3221: PUSH
3222: LD_EXP 52
3226: PPUSH
3227: LD_EXP 1
3231: PPUSH
3232: LD_INT 1
3234: PPUSH
3235: LD_INT 0
3237: PPUSH
3238: LD_INT 1
3240: PPUSH
3241: CALL 10726 0 5
3245: ST_TO_ADDR
// who2 := WhoSayAny ( donttalk , you , sex_male , 0 , 2 ) ;
3246: LD_ADDR_VAR 0 3
3250: PUSH
3251: LD_EXP 52
3255: PPUSH
3256: LD_EXP 1
3260: PPUSH
3261: LD_INT 1
3263: PPUSH
3264: LD_INT 0
3266: PPUSH
3267: LD_INT 2
3269: PPUSH
3270: CALL 10726 0 5
3274: ST_TO_ADDR
// if not Say ( Tit , DHelp2-Tit-1 ) then
3275: LD_EXP 49
3279: PPUSH
3280: LD_STRING DHelp2-Tit-1
3282: PPUSH
3283: CALL_OW 88
3287: NOT
3288: IFFALSE 3302
// Say ( who , DHelp2-RSol1-1 ) ;
3290: LD_VAR 0 2
3294: PPUSH
3295: LD_STRING DHelp2-RSol1-1
3297: PPUSH
3298: CALL_OW 88
// if not Say ( Glb , DHelp2-Glb-1 ) then
3302: LD_EXP 48
3306: PPUSH
3307: LD_STRING DHelp2-Glb-1
3309: PPUSH
3310: CALL_OW 88
3314: NOT
3315: IFFALSE 3329
// Say ( who2 , DHelp2-RSol2-1 ) ;
3317: LD_VAR 0 3
3321: PPUSH
3322: LD_STRING DHelp2-RSol2-1
3324: PPUSH
3325: CALL_OW 88
// Say ( Tit , DHelp2-Tit-2 ) ;
3329: LD_EXP 49
3333: PPUSH
3334: LD_STRING DHelp2-Tit-2
3336: PPUSH
3337: CALL_OW 88
// DialogueOff ;
3341: CALL_OW 7
// end ;
3345: LD_VAR 0 1
3349: RET
// export function DHelp3 ; var who ; begin
3350: LD_INT 0
3352: PPUSH
3353: PPUSH
// DialogueOn ;
3354: CALL_OW 6
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 0 ) ;
3358: LD_ADDR_VAR 0 2
3362: PUSH
3363: LD_EXP 52
3367: PPUSH
3368: LD_EXP 1
3372: PPUSH
3373: LD_INT 1
3375: PPUSH
3376: LD_INT 0
3378: PPUSH
3379: LD_INT 0
3381: PPUSH
3382: CALL 10726 0 5
3386: ST_TO_ADDR
// Say ( Bur , DHelp3-Bur-1 ) ;
3387: LD_EXP 44
3391: PPUSH
3392: LD_STRING DHelp3-Bur-1
3394: PPUSH
3395: CALL_OW 88
// if not Say ( Lip , DHelp3-Lip-1 ) then
3399: LD_EXP 43
3403: PPUSH
3404: LD_STRING DHelp3-Lip-1
3406: PPUSH
3407: CALL_OW 88
3411: NOT
3412: IFFALSE 3426
// Say ( who , DHelp3-RSol1-1 ) ;
3414: LD_VAR 0 2
3418: PPUSH
3419: LD_STRING DHelp3-RSol1-1
3421: PPUSH
3422: CALL_OW 88
// Say ( Bur , DHelp3-Bur-2 ) ;
3426: LD_EXP 44
3430: PPUSH
3431: LD_STRING DHelp3-Bur-2
3433: PPUSH
3434: CALL_OW 88
// DialogueOff ;
3438: CALL_OW 7
// end ;
3442: LD_VAR 0 1
3446: RET
// every 0 0$5 trigger vsevolod_vstoupil and not FilterHumansInArea ( ovsyenko_base , [ [ f_side , you ] ] ) do var b , i ;
3447: LD_EXP 11
3451: PUSH
3452: LD_INT 14
3454: PPUSH
3455: LD_INT 22
3457: PUSH
3458: LD_EXP 1
3462: PUSH
3463: EMPTY
3464: LIST
3465: LIST
3466: PUSH
3467: EMPTY
3468: LIST
3469: PPUSH
3470: CALL 11017 0 2
3474: NOT
3475: AND
3476: IFFALSE 3614
3478: GO 3480
3480: DISABLE
3481: LD_INT 0
3483: PPUSH
3484: PPUSH
// begin if FilterUnitsInArea ( ovsyenko_base , [ [ f_side , ai ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) >= 1 then
3485: LD_INT 14
3487: PPUSH
3488: LD_INT 22
3490: PUSH
3491: LD_EXP 6
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: LD_INT 2
3502: PUSH
3503: LD_INT 21
3505: PUSH
3506: LD_INT 1
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PUSH
3513: LD_INT 21
3515: PUSH
3516: LD_INT 2
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: LIST
3527: PUSH
3528: EMPTY
3529: LIST
3530: LIST
3531: PPUSH
3532: CALL_OW 70
3536: PUSH
3537: LD_INT 1
3539: GREATEREQUAL
3540: IFFALSE 3613
// begin DOvsyenkoCaptured ;
3542: CALL 3617 0 0
// OvsyenkoCaptured := true ;
3546: LD_ADDR_EXP 15
3550: PUSH
3551: LD_INT 1
3553: ST_TO_ADDR
// b := FilterUnitsInArea ( ovsyenko_base , [ [ f_type , unit_building ] ] ) ;
3554: LD_ADDR_VAR 0 1
3558: PUSH
3559: LD_INT 14
3561: PPUSH
3562: LD_INT 21
3564: PUSH
3565: LD_INT 3
3567: PUSH
3568: EMPTY
3569: LIST
3570: LIST
3571: PUSH
3572: EMPTY
3573: LIST
3574: PPUSH
3575: CALL_OW 70
3579: ST_TO_ADDR
// for i in b do
3580: LD_ADDR_VAR 0 2
3584: PUSH
3585: LD_VAR 0 1
3589: PUSH
3590: FOR_IN
3591: IFFALSE 3609
// begin SetSide ( i , ai ) ;
3593: LD_VAR 0 2
3597: PPUSH
3598: LD_EXP 6
3602: PPUSH
3603: CALL_OW 235
// end ;
3607: GO 3590
3609: POP
3610: POP
// end else
3611: GO 3614
// enable ;
3613: ENABLE
// end ;
3614: PPOPN 2
3616: END
// export function DOvsyenkoCaptured ; var who ; begin
3617: LD_INT 0
3619: PPUSH
3620: PPUSH
// DialogueOn ;
3621: CALL_OW 6
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 0 ) ;
3625: LD_ADDR_VAR 0 2
3629: PUSH
3630: LD_EXP 52
3634: PPUSH
3635: LD_EXP 1
3639: PPUSH
3640: LD_INT 1
3642: PPUSH
3643: LD_INT 0
3645: PPUSH
3646: LD_INT 0
3648: PPUSH
3649: CALL 10726 0 5
3653: ST_TO_ADDR
// if Say ( Glb , DOvsyenkoCaptured-Glb-1 ) then
3654: LD_EXP 48
3658: PPUSH
3659: LD_STRING DOvsyenkoCaptured-Glb-1
3661: PPUSH
3662: CALL_OW 88
3666: IFFALSE 3682
// Say ( Bur , DOvsyenkoCaptured-Bur-1 ) else
3668: LD_EXP 44
3672: PPUSH
3673: LD_STRING DOvsyenkoCaptured-Bur-1
3675: PPUSH
3676: CALL_OW 88
3680: GO 3694
// Say ( who , DOvsyenkoCaptured-RSol1-1 ) ;
3682: LD_VAR 0 2
3686: PPUSH
3687: LD_STRING DOvsyenkoCaptured-RSol1-1
3689: PPUSH
3690: CALL_OW 88
// DialogueOff ;
3694: CALL_OW 7
// end ;
3698: LD_VAR 0 1
3702: RET
// every 0 0$2 trigger FilterUnitsInArea ( to_north , [ [ f_side , you ] , [ f_nation , 3 ] , [ f_or , [ f_distxy , 67 , 37 , 10 ] , [ f_distxy , 83 , 38 , 10 ] ] ] ) do
3703: LD_INT 15
3705: PPUSH
3706: LD_INT 22
3708: PUSH
3709: LD_EXP 1
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: PUSH
3718: LD_INT 23
3720: PUSH
3721: LD_INT 3
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: PUSH
3728: LD_INT 2
3730: PUSH
3731: LD_INT 92
3733: PUSH
3734: LD_INT 67
3736: PUSH
3737: LD_INT 37
3739: PUSH
3740: LD_INT 10
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: PUSH
3749: LD_INT 92
3751: PUSH
3752: LD_INT 83
3754: PUSH
3755: LD_INT 38
3757: PUSH
3758: LD_INT 10
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: LIST
3771: PUSH
3772: EMPTY
3773: LIST
3774: LIST
3775: LIST
3776: PPUSH
3777: CALL_OW 70
3781: IFFALSE 3790
3783: GO 3785
3785: DISABLE
// begin DPartyAttacked ;
3786: CALL 3791 0 0
// end ;
3790: END
// export function DPartyAttacked ; var who , un , i , attc ; begin
3791: LD_INT 0
3793: PPUSH
3794: PPUSH
3795: PPUSH
3796: PPUSH
3797: PPUSH
// uc_side := 1 ;
3798: LD_ADDR_OWVAR 20
3802: PUSH
3803: LD_INT 1
3805: ST_TO_ADDR
// uc_nation := 1 ;
3806: LD_ADDR_OWVAR 21
3810: PUSH
3811: LD_INT 1
3813: ST_TO_ADDR
// attc := [ ] ;
3814: LD_ADDR_VAR 0 5
3818: PUSH
3819: EMPTY
3820: ST_TO_ADDR
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
3821: LD_ADDR_VAR 0 4
3825: PUSH
3826: DOUBLE
3827: LD_INT 1
3829: DEC
3830: ST_TO_ADDR
3831: LD_INT 2
3833: PUSH
3834: LD_INT 3
3836: PUSH
3837: LD_INT 3
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: LIST
3844: PUSH
3845: LD_OWVAR 67
3849: ARRAY
3850: PUSH
3851: FOR_TO
3852: IFFALSE 3937
// begin PrepareSoldier ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3854: LD_INT 0
3856: PPUSH
3857: LD_INT 3
3859: PUSH
3860: LD_INT 4
3862: PUSH
3863: LD_INT 5
3865: PUSH
3866: EMPTY
3867: LIST
3868: LIST
3869: LIST
3870: PUSH
3871: LD_OWVAR 67
3875: ARRAY
3876: PPUSH
3877: CALL_OW 381
// un := CreateHuman ;
3881: LD_ADDR_VAR 0 3
3885: PUSH
3886: CALL_OW 44
3890: ST_TO_ADDR
// PlaceUnitXYR ( un , 84 , 35 , 3 , false ) ;
3891: LD_VAR 0 3
3895: PPUSH
3896: LD_INT 84
3898: PPUSH
3899: LD_INT 35
3901: PPUSH
3902: LD_INT 3
3904: PPUSH
3905: LD_INT 0
3907: PPUSH
3908: CALL_OW 50
// attc := Insert ( attc , 1 , un ) ;
3912: LD_ADDR_VAR 0 5
3916: PUSH
3917: LD_VAR 0 5
3921: PPUSH
3922: LD_INT 1
3924: PPUSH
3925: LD_VAR 0 3
3929: PPUSH
3930: CALL_OW 2
3934: ST_TO_ADDR
// end ;
3935: GO 3851
3937: POP
3938: POP
// ComAgressiveMove ( attc , 80 , 46 ) ;
3939: LD_VAR 0 5
3943: PPUSH
3944: LD_INT 80
3946: PPUSH
3947: LD_INT 46
3949: PPUSH
3950: CALL_OW 114
// wait ( 0 0$2 ) ;
3954: LD_INT 70
3956: PPUSH
3957: CALL_OW 67
// DialogueOn ;
3961: CALL_OW 6
// PlaceSeeing ( 75 , 37 , you , - 10 ) ;
3965: LD_INT 75
3967: PPUSH
3968: LD_INT 37
3970: PPUSH
3971: LD_EXP 1
3975: PPUSH
3976: LD_INT 10
3978: NEG
3979: PPUSH
3980: CALL_OW 330
// CenterNowOnXY ( 75 , 37 ) ;
3984: LD_INT 75
3986: PPUSH
3987: LD_INT 37
3989: PPUSH
3990: CALL_OW 86
// who := FilterAllUnits ( [ [ f_side , you ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Gleb ] ;
3994: LD_ADDR_VAR 0 2
3998: PUSH
3999: LD_INT 22
4001: PUSH
4002: LD_EXP 1
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: PUSH
4011: LD_INT 26
4013: PUSH
4014: LD_INT 1
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: PUSH
4021: LD_INT 23
4023: PUSH
4024: LD_INT 3
4026: PUSH
4027: EMPTY
4028: LIST
4029: LIST
4030: PUSH
4031: EMPTY
4032: LIST
4033: LIST
4034: LIST
4035: PPUSH
4036: CALL_OW 69
4040: PUSH
4041: LD_EXP 61
4045: PUSH
4046: LD_EXP 65
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: DIFF
4055: ST_TO_ADDR
// if who then
4056: LD_VAR 0 2
4060: IFFALSE 4078
// Say ( who [ 1 ] , DPartyAttacked-RSol1-1 ) ;
4062: LD_VAR 0 2
4066: PUSH
4067: LD_INT 1
4069: ARRAY
4070: PPUSH
4071: LD_STRING DPartyAttacked-RSol1-1
4073: PPUSH
4074: CALL_OW 88
// if IsOk ( Glb ) then
4078: LD_EXP 48
4082: PPUSH
4083: CALL_OW 302
4087: IFFALSE 4101
// Say ( Glb , DPartyAttacked-Glb-1 ) ;
4089: LD_EXP 48
4093: PPUSH
4094: LD_STRING DPartyAttacked-Glb-1
4096: PPUSH
4097: CALL_OW 88
// if who > 1 and GetSide ( RuDepot ) = 3 then
4101: LD_VAR 0 2
4105: PUSH
4106: LD_INT 1
4108: GREATER
4109: PUSH
4110: LD_INT 58
4112: PPUSH
4113: CALL_OW 255
4117: PUSH
4118: LD_INT 3
4120: EQUAL
4121: AND
4122: IFFALSE 4140
// Say ( who [ 2 ] , DPartyAttacked-RSol2-1 ) ;
4124: LD_VAR 0 2
4128: PUSH
4129: LD_INT 2
4131: ARRAY
4132: PPUSH
4133: LD_STRING DPartyAttacked-RSol2-1
4135: PPUSH
4136: CALL_OW 88
// DialogueOff ;
4140: CALL_OW 7
// RemoveSeeing ( 75 , 37 , you ) ;
4144: LD_INT 75
4146: PPUSH
4147: LD_INT 37
4149: PPUSH
4150: LD_EXP 1
4154: PPUSH
4155: CALL_OW 331
// end ;
4159: LD_VAR 0 1
4163: RET
// export kecali ; export otherkecali ; export VsevolodSaved ; every 0 0$3 trigger FilterAllUnits ( [ [ f_side , you ] , [ f_dist , Vsevolod , 10 ] ] ) do var mt , i ;
4164: LD_INT 22
4166: PUSH
4167: LD_EXP 1
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PUSH
4176: LD_INT 91
4178: PUSH
4179: LD_EXP 70
4183: PUSH
4184: LD_INT 10
4186: PUSH
4187: EMPTY
4188: LIST
4189: LIST
4190: LIST
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PPUSH
4196: CALL_OW 69
4200: IFFALSE 4644
4202: GO 4204
4204: DISABLE
4205: LD_INT 0
4207: PPUSH
4208: PPUSH
// begin if IsLive ( vsevolod ) and GetDistUnits ( Vsevolod , Burlak ) <= 10 and not kecali then
4209: LD_EXP 70
4213: PPUSH
4214: CALL_OW 300
4218: PUSH
4219: LD_EXP 70
4223: PPUSH
4224: LD_EXP 61
4228: PPUSH
4229: CALL_OW 296
4233: PUSH
4234: LD_INT 10
4236: LESSEQUAL
4237: AND
4238: PUSH
4239: LD_EXP 54
4243: NOT
4244: AND
4245: IFFALSE 4488
// begin mt := tick + 0 0$20 ;
4247: LD_ADDR_VAR 0 1
4251: PUSH
4252: LD_OWVAR 1
4256: PUSH
4257: LD_INT 700
4259: PLUS
4260: ST_TO_ADDR
// while IsInUnit ( Vsevolod ) = vseva1 and mt < tick do
4261: LD_EXP 70
4265: PPUSH
4266: CALL_OW 310
4270: PUSH
4271: LD_INT 190
4273: EQUAL
4274: PUSH
4275: LD_VAR 0 1
4279: PUSH
4280: LD_OWVAR 1
4284: LESS
4285: AND
4286: IFFALSE 4309
// begin ComExitBuilding ( UnitsInside ( vseva1 ) ) ;
4288: LD_INT 190
4290: PPUSH
4291: CALL_OW 313
4295: PPUSH
4296: CALL_OW 122
// wait ( 0 0$1 ) ;
4300: LD_INT 35
4302: PPUSH
4303: CALL_OW 67
// end ;
4307: GO 4261
// wait ( 0 0$2 ) ;
4309: LD_INT 70
4311: PPUSH
4312: CALL_OW 67
// ComStop ( FilterAllUnits ( [ [ f_side , you2 ] ] ) ) ;
4316: LD_INT 22
4318: PUSH
4319: LD_EXP 2
4323: PUSH
4324: EMPTY
4325: LIST
4326: LIST
4327: PUSH
4328: EMPTY
4329: LIST
4330: PPUSH
4331: CALL_OW 69
4335: PPUSH
4336: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , you2 ] ] ) , you ) ;
4340: LD_INT 22
4342: PUSH
4343: LD_EXP 2
4347: PUSH
4348: EMPTY
4349: LIST
4350: LIST
4351: PUSH
4352: EMPTY
4353: LIST
4354: PPUSH
4355: CALL_OW 69
4359: PPUSH
4360: LD_EXP 1
4364: PPUSH
4365: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , you ] ] ) do
4369: LD_ADDR_VAR 0 2
4373: PUSH
4374: LD_INT 22
4376: PUSH
4377: LD_EXP 1
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: PUSH
4386: EMPTY
4387: LIST
4388: PPUSH
4389: CALL_OW 69
4393: PUSH
4394: FOR_IN
4395: IFFALSE 4413
// NormalAttack ( ai , i ) ;
4397: LD_EXP 6
4401: PPUSH
4402: LD_VAR 0 2
4406: PPUSH
4407: CALL_OW 472
4411: GO 4394
4413: POP
4414: POP
// DMeetVsev ;
4415: CALL 4719 0 0
// if OvsyenkoCaptured then
4419: LD_EXP 15
4423: IFFALSE 4431
// DMeetVsev2 else
4425: CALL 4761 0 0
4429: GO 4435
// DMeetVsev2a ;
4431: CALL 4817 0 0
// DMeetVsev3 ;
4435: CALL 4873 0 0
// if stevens_Killed then
4439: LD_EXP 76
4443: IFFALSE 4451
// DMeetVsev4 else
4445: CALL 4957 0 0
4449: GO 4455
// DMeetVsev5 ;
4451: CALL 4985 0 0
// DMeetVsev6 ;
4455: CALL 5041 0 0
// kecali := true ;
4459: LD_ADDR_EXP 54
4463: PUSH
4464: LD_INT 1
4466: ST_TO_ADDR
// VsevolodSaved := true ;
4467: LD_ADDR_EXP 56
4471: PUSH
4472: LD_INT 1
4474: ST_TO_ADDR
// SA_SaveVsevolod ;
4475: CALL 33172 0 0
// ChangeMissionObjectives ( MVsevolodOut ) ;
4479: LD_STRING MVsevolodOut
4481: PPUSH
4482: CALL_OW 337
// end else
4486: GO 4644
// begin if IsLive ( vsevolod ) and not otherkecali then
4488: LD_EXP 70
4492: PPUSH
4493: CALL_OW 300
4497: PUSH
4498: LD_EXP 55
4502: NOT
4503: AND
4504: IFFALSE 4643
// begin ComStop ( FilterAllUnits ( [ [ f_side , you2 ] ] ) ) ;
4506: LD_INT 22
4508: PUSH
4509: LD_EXP 2
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: EMPTY
4519: LIST
4520: PPUSH
4521: CALL_OW 69
4525: PPUSH
4526: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , you2 ] ] ) , you ) ;
4530: LD_INT 22
4532: PUSH
4533: LD_EXP 2
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: PUSH
4542: EMPTY
4543: LIST
4544: PPUSH
4545: CALL_OW 69
4549: PPUSH
4550: LD_EXP 1
4554: PPUSH
4555: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , you ] ] ) do
4559: LD_ADDR_VAR 0 2
4563: PUSH
4564: LD_INT 22
4566: PUSH
4567: LD_EXP 1
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PUSH
4576: EMPTY
4577: LIST
4578: PPUSH
4579: CALL_OW 69
4583: PUSH
4584: FOR_IN
4585: IFFALSE 4603
// NormalAttack ( ai , i ) ;
4587: LD_EXP 6
4591: PPUSH
4592: LD_VAR 0 2
4596: PPUSH
4597: CALL_OW 472
4601: GO 4584
4603: POP
4604: POP
// DOtherMeetVsev ;
4605: CALL 4647 0 0
// ComExitBuilding ( vseva1 ) ;
4609: LD_INT 190
4611: PPUSH
4612: CALL_OW 122
// VsevolodSaved := true ;
4616: LD_ADDR_EXP 56
4620: PUSH
4621: LD_INT 1
4623: ST_TO_ADDR
// SA_SaveVsevolod ;
4624: CALL 33172 0 0
// otherkecali := true ;
4628: LD_ADDR_EXP 55
4632: PUSH
4633: LD_INT 1
4635: ST_TO_ADDR
// ChangeMissionObjectives ( MVsevolodOut ) ;
4636: LD_STRING MVsevolodOut
4638: PPUSH
4639: CALL_OW 337
// end ; enable ;
4643: ENABLE
// end ; end ;
4644: PPOPN 2
4646: END
// export function DOtherMeetVsev ; var who ; begin
4647: LD_INT 0
4649: PPUSH
4650: PPUSH
// DialogueOn ;
4651: CALL_OW 6
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 0 ) ;
4655: LD_ADDR_VAR 0 2
4659: PUSH
4660: LD_EXP 52
4664: PPUSH
4665: LD_EXP 1
4669: PPUSH
4670: LD_INT 1
4672: PPUSH
4673: LD_INT 0
4675: PPUSH
4676: LD_INT 0
4678: PPUSH
4679: CALL 10726 0 5
4683: ST_TO_ADDR
// if Say ( Vse , DOtherMeetVsev-Vse-1 ) then
4684: LD_EXP 51
4688: PPUSH
4689: LD_STRING DOtherMeetVsev-Vse-1
4691: PPUSH
4692: CALL_OW 88
4696: IFFALSE 4710
// Say ( who , DOtherMeetVsev-RSol1-1 ) ;
4698: LD_VAR 0 2
4702: PPUSH
4703: LD_STRING DOtherMeetVsev-RSol1-1
4705: PPUSH
4706: CALL_OW 88
// DialogueOff ;
4710: CALL_OW 7
// end ;
4714: LD_VAR 0 1
4718: RET
// export function DMeetVsev ; begin
4719: LD_INT 0
4721: PPUSH
// DialogueOn ;
4722: CALL_OW 6
// if Say ( Vse , DMeetVsev-Vse-1 ) then
4726: LD_EXP 51
4730: PPUSH
4731: LD_STRING DMeetVsev-Vse-1
4733: PPUSH
4734: CALL_OW 88
4738: IFFALSE 4752
// Say ( Bur , DMeetVsev-Bur-1 ) ;
4740: LD_EXP 44
4744: PPUSH
4745: LD_STRING DMeetVsev-Bur-1
4747: PPUSH
4748: CALL_OW 88
// DialogueOff ;
4752: CALL_OW 7
// end ;
4756: LD_VAR 0 1
4760: RET
// export function DMeetVsev2 ; begin
4761: LD_INT 0
4763: PPUSH
// DialogueOn ;
4764: CALL_OW 6
// if Say ( Vse , DMeetVsev2-Vse-1 ) then
4768: LD_EXP 51
4772: PPUSH
4773: LD_STRING DMeetVsev2-Vse-1
4775: PPUSH
4776: CALL_OW 88
4780: IFFALSE 4808
// if Say ( Bur , DMeetVsev2-Bur-1 ) then
4782: LD_EXP 44
4786: PPUSH
4787: LD_STRING DMeetVsev2-Bur-1
4789: PPUSH
4790: CALL_OW 88
4794: IFFALSE 4808
// Say ( Vse , DMeetVsev2-Vse-2 ) ;
4796: LD_EXP 51
4800: PPUSH
4801: LD_STRING DMeetVsev2-Vse-2
4803: PPUSH
4804: CALL_OW 88
// DialogueOff ;
4808: CALL_OW 7
// end ;
4812: LD_VAR 0 1
4816: RET
// export function DMeetVsev2a ; begin
4817: LD_INT 0
4819: PPUSH
// DialogueOn ;
4820: CALL_OW 6
// if Say ( Vse , DMeetVsev2-Vse-2a ) then
4824: LD_EXP 51
4828: PPUSH
4829: LD_STRING DMeetVsev2-Vse-2a
4831: PPUSH
4832: CALL_OW 88
4836: IFFALSE 4864
// if Say ( Bur , DMeetVsev2-Bur-2 ) then
4838: LD_EXP 44
4842: PPUSH
4843: LD_STRING DMeetVsev2-Bur-2
4845: PPUSH
4846: CALL_OW 88
4850: IFFALSE 4864
// Say ( Vse , DMeetVsev2-Vse-3 ) ;
4852: LD_EXP 51
4856: PPUSH
4857: LD_STRING DMeetVsev2-Vse-3
4859: PPUSH
4860: CALL_OW 88
// DialogueOff ;
4864: CALL_OW 7
// end ;
4868: LD_VAR 0 1
4872: RET
// export function DMeetVsev3 ; begin
4873: LD_INT 0
4875: PPUSH
// DialogueOn ;
4876: CALL_OW 6
// if Say ( Bur , DMeetVsev3-Bur-1 ) then
4880: LD_EXP 44
4884: PPUSH
4885: LD_STRING DMeetVsev3-Bur-1
4887: PPUSH
4888: CALL_OW 88
4892: IFFALSE 4948
// if Say ( Vse , DMeetVsev3-Vse-1 ) then
4894: LD_EXP 51
4898: PPUSH
4899: LD_STRING DMeetVsev3-Vse-1
4901: PPUSH
4902: CALL_OW 88
4906: IFFALSE 4948
// if Say ( Bur , DMeetVsev3-Bur-2 ) then
4908: LD_EXP 44
4912: PPUSH
4913: LD_STRING DMeetVsev3-Bur-2
4915: PPUSH
4916: CALL_OW 88
4920: IFFALSE 4948
// if Say ( Vse , DMeetVsev3-Vse-2 ) then
4922: LD_EXP 51
4926: PPUSH
4927: LD_STRING DMeetVsev3-Vse-2
4929: PPUSH
4930: CALL_OW 88
4934: IFFALSE 4948
// Say ( Bur , DMeetVsev3-Bur-3 ) ;
4936: LD_EXP 44
4940: PPUSH
4941: LD_STRING DMeetVsev3-Bur-3
4943: PPUSH
4944: CALL_OW 88
// DialogueOff ;
4948: CALL_OW 7
// end ;
4952: LD_VAR 0 1
4956: RET
// export function DMeetVsev4 ; begin
4957: LD_INT 0
4959: PPUSH
// DialogueOn ;
4960: CALL_OW 6
// Say ( Bur , DMeetVsev4-Bur-1 ) ;
4964: LD_EXP 44
4968: PPUSH
4969: LD_STRING DMeetVsev4-Bur-1
4971: PPUSH
4972: CALL_OW 88
// DialogueOff ;
4976: CALL_OW 7
// end ;
4980: LD_VAR 0 1
4984: RET
// export function DMeetVsev5 ; begin
4985: LD_INT 0
4987: PPUSH
// DialogueOn ;
4988: CALL_OW 6
// if Say ( Bur , DMeetVsev5-Bur-1 ) then
4992: LD_EXP 44
4996: PPUSH
4997: LD_STRING DMeetVsev5-Bur-1
4999: PPUSH
5000: CALL_OW 88
5004: IFFALSE 5032
// if Say ( Vse , DMeetVsev5-Vse-1 ) then
5006: LD_EXP 51
5010: PPUSH
5011: LD_STRING DMeetVsev5-Vse-1
5013: PPUSH
5014: CALL_OW 88
5018: IFFALSE 5032
// Say ( Bur , DMeetVsev5-Bur-2 ) ;
5020: LD_EXP 44
5024: PPUSH
5025: LD_STRING DMeetVsev5-Bur-2
5027: PPUSH
5028: CALL_OW 88
// DialogueOff ;
5032: CALL_OW 7
// end ;
5036: LD_VAR 0 1
5040: RET
// export function DMeetVsev6 ; begin
5041: LD_INT 0
5043: PPUSH
// DialogueOn ;
5044: CALL_OW 6
// if Say ( Vse , DMeetVsev6-Vse-1 ) then
5048: LD_EXP 51
5052: PPUSH
5053: LD_STRING DMeetVsev6-Vse-1
5055: PPUSH
5056: CALL_OW 88
5060: IFFALSE 5074
// Say ( Bur , DMeetVsev6-Bur-1 ) ;
5062: LD_EXP 44
5066: PPUSH
5067: LD_STRING DMeetVsev6-Bur-1
5069: PPUSH
5070: CALL_OW 88
// DialogueOff ;
5074: CALL_OW 7
// end ;
5078: LD_VAR 0 1
5082: RET
// every 0 0$5 trigger kecali and FilterUnitsInArea ( north_base , [ [ f_side , you ] ] ) do
5083: LD_EXP 54
5087: PUSH
5088: LD_INT 22
5090: PPUSH
5091: LD_INT 22
5093: PUSH
5094: LD_EXP 1
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: EMPTY
5104: LIST
5105: PPUSH
5106: CALL_OW 70
5110: AND
5111: IFFALSE 5337
5113: GO 5115
5115: DISABLE
// begin wait ( 0 0$10 ) ;
5116: LD_INT 350
5118: PPUSH
5119: CALL_OW 67
// nakladaky ;
5123: CALL 9880 0 0
// ComMoveXY ( [ accar1 , accar2 ] , 53 , 8 ) ;
5127: LD_EXP 80
5131: PUSH
5132: LD_EXP 81
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: PPUSH
5141: LD_INT 53
5143: PPUSH
5144: LD_INT 8
5146: PPUSH
5147: CALL_OW 111
// DTruck ;
5151: CALL 5338 0 0
// AddComMoveXY ( [ accar1 , accar2 ] , 45 , 14 ) ;
5155: LD_EXP 80
5159: PUSH
5160: LD_EXP 81
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PPUSH
5169: LD_INT 45
5171: PPUSH
5172: LD_INT 14
5174: PPUSH
5175: CALL_OW 171
// AddComMoveXY ( [ accar1 , accar2 ] , 33 , 14 ) ;
5179: LD_EXP 80
5183: PUSH
5184: LD_EXP 81
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: PPUSH
5193: LD_INT 33
5195: PPUSH
5196: LD_INT 14
5198: PPUSH
5199: CALL_OW 171
// AddComMoveXY ( [ accar1 , accar2 ] , 27 , 32 ) ;
5203: LD_EXP 80
5207: PUSH
5208: LD_EXP 81
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PPUSH
5217: LD_INT 27
5219: PPUSH
5220: LD_INT 32
5222: PPUSH
5223: CALL_OW 171
// AddComUnload ( [ accar1 , accar2 ] ) ;
5227: LD_EXP 80
5231: PUSH
5232: LD_EXP 81
5236: PUSH
5237: EMPTY
5238: LIST
5239: LIST
5240: PPUSH
5241: CALL_OW 219
// AddComMoveXY ( [ accar1 , accar2 ] , 42 , 79 ) ;
5245: LD_EXP 80
5249: PUSH
5250: LD_EXP 81
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: PPUSH
5259: LD_INT 42
5261: PPUSH
5262: LD_INT 79
5264: PPUSH
5265: CALL_OW 171
// AddComExitVehicle ( [ acman1 , acman2 ] ) ;
5269: LD_EXP 82
5273: PUSH
5274: LD_EXP 83
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: PPUSH
5283: CALL_OW 181
// sol := sol union [ acman1 , acman2 ] ;
5287: LD_ADDR_EXP 121
5291: PUSH
5292: LD_EXP 121
5296: PUSH
5297: LD_EXP 82
5301: PUSH
5302: LD_EXP 83
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: UNION
5311: ST_TO_ADDR
// a3 := a3 union [ acman1 , acman2 ] ;
5312: LD_ADDR_EXP 135
5316: PUSH
5317: LD_EXP 135
5321: PUSH
5322: LD_EXP 82
5326: PUSH
5327: LD_EXP 83
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: UNION
5336: ST_TO_ADDR
// end ;
5337: END
// export function DTruck ; var who ; begin
5338: LD_INT 0
5340: PPUSH
5341: PPUSH
// who := acman1 ;
5342: LD_ADDR_VAR 0 2
5346: PUSH
5347: LD_EXP 82
5351: ST_TO_ADDR
// DialogueOn ;
5352: CALL_OW 6
// if Say ( who , DTruck-Sol1-1 ) then
5356: LD_VAR 0 2
5360: PPUSH
5361: LD_STRING DTruck-Sol1-1
5363: PPUSH
5364: CALL_OW 88
5368: IFFALSE 5382
// Say ( Bur , DTruck-Bur-1 ) ;
5370: LD_EXP 44
5374: PPUSH
5375: LD_STRING DTruck-Bur-1
5377: PPUSH
5378: CALL_OW 88
// DialogueOff ;
5382: CALL_OW 7
// end ;
5386: LD_VAR 0 1
5390: RET
// export function DDieVsev1 ; begin
5391: LD_INT 0
5393: PPUSH
// SetLives ( vsevd1 , 0 ) ;
5394: LD_INT 182
5396: PPUSH
5397: LD_INT 0
5399: PPUSH
5400: CALL_OW 234
// ChangeMissionObjectives ( MVsevolodDel ) ;
5404: LD_STRING MVsevolodDel
5406: PPUSH
5407: CALL_OW 337
// DialogueOn ;
5411: CALL_OW 6
// Say ( Vsevolod2 , DDieVsev1-Vse-1 ) ;
5415: LD_EXP 71
5419: PPUSH
5420: LD_STRING DDieVsev1-Vse-1
5422: PPUSH
5423: CALL_OW 88
// DialogueOff ;
5427: CALL_OW 7
// end ;
5431: LD_VAR 0 1
5435: RET
// export function DDieVsev2 ; begin
5436: LD_INT 0
5438: PPUSH
// DialogueOn ;
5439: CALL_OW 6
// Say ( Vsevolod2 , DDieVsev2-Vse-1 ) ;
5443: LD_EXP 71
5447: PPUSH
5448: LD_STRING DDieVsev2-Vse-1
5450: PPUSH
5451: CALL_OW 88
// DialogueOff ;
5455: CALL_OW 7
// end ;
5459: LD_VAR 0 1
5463: RET
// export function DStasis ; var who ; begin
5464: LD_INT 0
5466: PPUSH
5467: PPUSH
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 0 ) ;
5468: LD_ADDR_VAR 0 2
5472: PUSH
5473: LD_EXP 52
5477: PPUSH
5478: LD_EXP 1
5482: PPUSH
5483: LD_INT 1
5485: PPUSH
5486: LD_INT 0
5488: PPUSH
5489: LD_INT 0
5491: PPUSH
5492: CALL 10726 0 5
5496: ST_TO_ADDR
// DialogueOn ;
5497: CALL_OW 6
// if not Say ( Pty , DStasis-Pty-1 ) then
5501: LD_EXP 47
5505: PPUSH
5506: LD_STRING DStasis-Pty-1
5508: PPUSH
5509: CALL_OW 88
5513: NOT
5514: IFFALSE 5543
// if not Say ( Dol , DStasis-Dol-1 ) then
5516: LD_EXP 50
5520: PPUSH
5521: LD_STRING DStasis-Dol-1
5523: PPUSH
5524: CALL_OW 88
5528: NOT
5529: IFFALSE 5543
// Say ( who , DStasis-RSol1-1 ) ;
5531: LD_VAR 0 2
5535: PPUSH
5536: LD_STRING DStasis-RSol1-1
5538: PPUSH
5539: CALL_OW 88
// Say ( Bur , DStasis-Bur-1 ) ;
5543: LD_EXP 44
5547: PPUSH
5548: LD_STRING DStasis-Bur-1
5550: PPUSH
5551: CALL_OW 88
// if not Say ( Pty , DStasis-Pty-2 ) then
5555: LD_EXP 47
5559: PPUSH
5560: LD_STRING DStasis-Pty-2
5562: PPUSH
5563: CALL_OW 88
5567: NOT
5568: IFFALSE 5597
// if not Say ( Dol , DStasis-Dol-2 ) then
5570: LD_EXP 50
5574: PPUSH
5575: LD_STRING DStasis-Dol-2
5577: PPUSH
5578: CALL_OW 88
5582: NOT
5583: IFFALSE 5597
// Say ( who , DStasis-RSol1-2 ) ;
5585: LD_VAR 0 2
5589: PPUSH
5590: LD_STRING DStasis-RSol1-2
5592: PPUSH
5593: CALL_OW 88
// Say ( Bur , DStasis-Bur-2 ) ;
5597: LD_EXP 44
5601: PPUSH
5602: LD_STRING DStasis-Bur-2
5604: PPUSH
5605: CALL_OW 88
// DialogueOff ;
5609: CALL_OW 7
// MyHint ( Stasis ) ;
5613: LD_STRING Stasis
5615: PPUSH
5616: CALL 12040 0 1
// end ;
5620: LD_VAR 0 1
5624: RET
// every 0 0$2 trigger GetTech ( tech_TauField , you ) = state_researched and GetTech ( tech_SibDet , you ) = state_researched and GetTech ( tech_SibPow , you ) = state_researched and GetTech ( tech_SibEng , you ) = state_researched do
5625: LD_INT 30
5627: PPUSH
5628: LD_EXP 1
5632: PPUSH
5633: CALL_OW 321
5637: PUSH
5638: LD_INT 2
5640: EQUAL
5641: PUSH
5642: LD_INT 20
5644: PPUSH
5645: LD_EXP 1
5649: PPUSH
5650: CALL_OW 321
5654: PUSH
5655: LD_INT 2
5657: EQUAL
5658: AND
5659: PUSH
5660: LD_INT 21
5662: PPUSH
5663: LD_EXP 1
5667: PPUSH
5668: CALL_OW 321
5672: PUSH
5673: LD_INT 2
5675: EQUAL
5676: AND
5677: PUSH
5678: LD_INT 22
5680: PPUSH
5681: LD_EXP 1
5685: PPUSH
5686: CALL_OW 321
5690: PUSH
5691: LD_INT 2
5693: EQUAL
5694: AND
5695: IFFALSE 5707
5697: GO 5699
5699: DISABLE
// begin ChangeMissionObjectives ( MOutResearch ) ;
5700: LD_STRING MOutResearch
5702: PPUSH
5703: CALL_OW 337
// end ;
5707: END
// export exit_enabled ; every 0 0$2 trigger GetTech ( tech_TauField , you ) = state_researched and GetTech ( tech_SibDet , you ) = state_researched and GetTech ( tech_SibPow , you ) = state_researched and GetTech ( tech_SibEng , you ) = state_researched and mine_obj_completed do var plidi , lidi , min , max , i , go_pryc , go_pryc_tmp , zustavaj , utek , povol_povol , mt ;
5708: LD_INT 30
5710: PPUSH
5711: LD_EXP 1
5715: PPUSH
5716: CALL_OW 321
5720: PUSH
5721: LD_INT 2
5723: EQUAL
5724: PUSH
5725: LD_INT 20
5727: PPUSH
5728: LD_EXP 1
5732: PPUSH
5733: CALL_OW 321
5737: PUSH
5738: LD_INT 2
5740: EQUAL
5741: AND
5742: PUSH
5743: LD_INT 21
5745: PPUSH
5746: LD_EXP 1
5750: PPUSH
5751: CALL_OW 321
5755: PUSH
5756: LD_INT 2
5758: EQUAL
5759: AND
5760: PUSH
5761: LD_INT 22
5763: PPUSH
5764: LD_EXP 1
5768: PPUSH
5769: CALL_OW 321
5773: PUSH
5774: LD_INT 2
5776: EQUAL
5777: AND
5778: PUSH
5779: LD_EXP 30
5783: AND
5784: IFFALSE 6669
5786: GO 5788
5788: DISABLE
5789: LD_INT 0
5791: PPUSH
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
5796: PPUSH
5797: PPUSH
5798: PPUSH
5799: PPUSH
5800: PPUSH
5801: PPUSH
// begin if IsLive ( Vsevolod ) and GetSide ( Vsevolod ) = you2 then
5802: LD_EXP 70
5806: PPUSH
5807: CALL_OW 300
5811: PUSH
5812: LD_EXP 70
5816: PPUSH
5817: CALL_OW 255
5821: PUSH
5822: LD_EXP 2
5826: EQUAL
5827: AND
5828: IFFALSE 6104
// begin kolik_ma_vsevolod_casu := 0 ;
5830: LD_ADDR_EXP 33
5834: PUSH
5835: LD_INT 0
5837: ST_TO_ADDR
// utek := [ Vsevolod ] union vsevolod_uderna_group ;
5838: LD_ADDR_VAR 0 9
5842: PUSH
5843: LD_EXP 70
5847: PUSH
5848: EMPTY
5849: LIST
5850: PUSH
5851: LD_EXP 12
5855: UNION
5856: ST_TO_ADDR
// utek := UnitFilter ( utek , [ [ f_placed ] , [ f_side , you2 ] ] ) ;
5857: LD_ADDR_VAR 0 9
5861: PUSH
5862: LD_VAR 0 9
5866: PPUSH
5867: LD_INT 52
5869: PUSH
5870: EMPTY
5871: LIST
5872: PUSH
5873: LD_INT 22
5875: PUSH
5876: LD_EXP 2
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PPUSH
5889: CALL_OW 72
5893: ST_TO_ADDR
// mt := tick + 0 0$20 ;
5894: LD_ADDR_VAR 0 11
5898: PUSH
5899: LD_OWVAR 1
5903: PUSH
5904: LD_INT 700
5906: PLUS
5907: ST_TO_ADDR
// while utek and tick < mt do
5908: LD_VAR 0 9
5912: PUSH
5913: LD_OWVAR 1
5917: PUSH
5918: LD_VAR 0 11
5922: LESS
5923: AND
5924: IFFALSE 6063
// begin for i in utek do
5926: LD_ADDR_VAR 0 5
5930: PUSH
5931: LD_VAR 0 9
5935: PUSH
5936: FOR_IN
5937: IFFALSE 5992
// if IsInArea ( i , vsevolod_in ) or not IsPlaced ( i ) then
5939: LD_VAR 0 5
5943: PPUSH
5944: LD_INT 16
5946: PPUSH
5947: CALL_OW 308
5951: PUSH
5952: LD_VAR 0 5
5956: PPUSH
5957: CALL_OW 305
5961: NOT
5962: OR
5963: IFFALSE 5990
// begin RemoveUnit ( i ) ;
5965: LD_VAR 0 5
5969: PPUSH
5970: CALL_OW 64
// utek := utek diff i ;
5974: LD_ADDR_VAR 0 9
5978: PUSH
5979: LD_VAR 0 9
5983: PUSH
5984: LD_VAR 0 5
5988: DIFF
5989: ST_TO_ADDR
// end ;
5990: GO 5936
5992: POP
5993: POP
// utek := UnitFilter ( utek , [ [ f_placed ] ] ) ;
5994: LD_ADDR_VAR 0 9
5998: PUSH
5999: LD_VAR 0 9
6003: PPUSH
6004: LD_INT 52
6006: PUSH
6007: EMPTY
6008: LIST
6009: PUSH
6010: EMPTY
6011: LIST
6012: PPUSH
6013: CALL_OW 72
6017: ST_TO_ADDR
// wait ( 0 0$1 ) ;
6018: LD_INT 35
6020: PPUSH
6021: CALL_OW 67
// ComExitVehicle ( utek ) ;
6025: LD_VAR 0 9
6029: PPUSH
6030: CALL_OW 121
// AddComMoveToArea ( utek , vsevolod_in ) ;
6034: LD_VAR 0 9
6038: PPUSH
6039: LD_INT 16
6041: PPUSH
6042: CALL_OW 173
// AddComMoveXY ( utek , 53 , 1 ) ;
6046: LD_VAR 0 9
6050: PPUSH
6051: LD_INT 53
6053: PPUSH
6054: LD_INT 1
6056: PPUSH
6057: CALL_OW 171
// end ;
6061: GO 5908
// SetLives ( Vsevolod , 0 ) ;
6063: LD_EXP 70
6067: PPUSH
6068: LD_INT 0
6070: PPUSH
6071: CALL_OW 234
// for i in vsevolod_uderna_group do
6075: LD_ADDR_VAR 0 5
6079: PUSH
6080: LD_EXP 12
6084: PUSH
6085: FOR_IN
6086: IFFALSE 6102
// SetLives ( i , 0 ) ;
6088: LD_VAR 0 5
6092: PPUSH
6093: LD_INT 0
6095: PPUSH
6096: CALL_OW 234
6100: GO 6085
6102: POP
6103: POP
// end ; wait ( 0 0$15 ) ;
6104: LD_INT 525
6106: PPUSH
6107: CALL_OW 67
// DNextMiss1 ;
6111: CALL 6693 0 0
// if IsLive ( Vsevolod ) and kecali then
6115: LD_EXP 70
6119: PPUSH
6120: CALL_OW 300
6124: PUSH
6125: LD_EXP 54
6129: AND
6130: IFFALSE 6138
// DNextMiss3 else
6132: CALL 6749 0 0
6136: GO 6146
// begin DNextMiss2 ;
6138: CALL 6721 0 0
// VyhraResearch ;
6142: CALL 301 0 0
// end ; DNextMiss4 ;
6146: CALL 6789 0 0
// ChangeMissionObjectives ( MCars ) ;
6150: LD_STRING MCars
6152: PPUSH
6153: CALL_OW 337
// SetAreaMapShow ( ru_exit , 1 ) ;
6157: LD_INT 21
6159: PPUSH
6160: LD_INT 1
6162: PPUSH
6163: CALL_OW 424
// exit_enabled := true ;
6167: LD_ADDR_EXP 57
6171: PUSH
6172: LD_INT 1
6174: ST_TO_ADDR
// convoy_can_go := true ;
6175: LD_ADDR_EXP 58
6179: PUSH
6180: LD_INT 1
6182: ST_TO_ADDR
// if IsLive ( Vsevolod ) then
6183: LD_EXP 70
6187: PPUSH
6188: CALL_OW 300
6192: IFFALSE 6669
// begin lidi := FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Vsevolod , Burlak ] ;
6194: LD_ADDR_VAR 0 2
6198: PUSH
6199: LD_INT 22
6201: PUSH
6202: LD_EXP 1
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: LD_INT 21
6213: PUSH
6214: LD_INT 1
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: PUSH
6221: LD_INT 23
6223: PUSH
6224: LD_INT 3
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: LIST
6235: PPUSH
6236: CALL_OW 69
6240: PUSH
6241: LD_EXP 70
6245: PUSH
6246: LD_EXP 61
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: DIFF
6255: ST_TO_ADDR
// max := lidi div 2 + lidi mod 2 ;
6256: LD_ADDR_VAR 0 4
6260: PUSH
6261: LD_VAR 0 2
6265: PUSH
6266: LD_INT 2
6268: DIV
6269: PUSH
6270: LD_VAR 0 2
6274: PUSH
6275: LD_INT 2
6277: MOD
6278: PLUS
6279: ST_TO_ADDR
// min := 0 ;
6280: LD_ADDR_VAR 0 3
6284: PUSH
6285: LD_INT 0
6287: ST_TO_ADDR
// povol_povol := [ class_soldier , class_engineer , class_mechanic , class_scientistic ] ;
6288: LD_ADDR_VAR 0 10
6292: PUSH
6293: LD_INT 1
6295: PUSH
6296: LD_INT 2
6298: PUSH
6299: LD_INT 3
6301: PUSH
6302: LD_INT 4
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: ST_TO_ADDR
// if max > 1 then
6311: LD_VAR 0 4
6315: PUSH
6316: LD_INT 1
6318: GREATER
6319: IFFALSE 6439
// begin zustavaj := [ Burlak ] ^ CharacterSelection ( 1 , min , max , [ Burlak , sel_changeable , sel_change_class ] ^ ( lidi diff vsevolod_uderna_group ) ^ [ sel_not_hired ] ^ vsevolod_uderna_group ^ [ sel_not_changeable , Vsevolod ] , povol_povol ) ;
6321: LD_ADDR_VAR 0 8
6325: PUSH
6326: LD_EXP 61
6330: PUSH
6331: EMPTY
6332: LIST
6333: PUSH
6334: LD_STRING 1
6336: PPUSH
6337: LD_VAR 0 3
6341: PPUSH
6342: LD_VAR 0 4
6346: PPUSH
6347: LD_EXP 61
6351: PUSH
6352: LD_INT -3
6354: PUSH
6355: LD_INT -5
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: LIST
6362: PUSH
6363: LD_VAR 0 2
6367: PUSH
6368: LD_EXP 12
6372: DIFF
6373: ADD
6374: PUSH
6375: LD_INT -2
6377: PUSH
6378: EMPTY
6379: LIST
6380: ADD
6381: PUSH
6382: LD_EXP 12
6386: ADD
6387: PUSH
6388: LD_INT -4
6390: PUSH
6391: LD_EXP 70
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: ADD
6400: PPUSH
6401: LD_VAR 0 10
6405: PPUSH
6406: CALL_OW 42
6410: ADD
6411: ST_TO_ADDR
// go_pryc := [ Vsevolod ] ^ ( lidi diff zustavaj ) ;
6412: LD_ADDR_VAR 0 6
6416: PUSH
6417: LD_EXP 70
6421: PUSH
6422: EMPTY
6423: LIST
6424: PUSH
6425: LD_VAR 0 2
6429: PUSH
6430: LD_VAR 0 8
6434: DIFF
6435: ADD
6436: ST_TO_ADDR
// end else
6437: GO 6471
// begin zustavaj := [ Burlak ] ;
6439: LD_ADDR_VAR 0 8
6443: PUSH
6444: LD_EXP 61
6448: PUSH
6449: EMPTY
6450: LIST
6451: ST_TO_ADDR
// go_pryc := [ Vsevolod ] ^ lidi ;
6452: LD_ADDR_VAR 0 6
6456: PUSH
6457: LD_EXP 70
6461: PUSH
6462: EMPTY
6463: LIST
6464: PUSH
6465: LD_VAR 0 2
6469: ADD
6470: ST_TO_ADDR
// end ; SetSide ( go_pryc , you2 ) ;
6471: LD_VAR 0 6
6475: PPUSH
6476: LD_EXP 2
6480: PPUSH
6481: CALL_OW 235
// for i in go_pryc do
6485: LD_ADDR_VAR 0 5
6489: PUSH
6490: LD_VAR 0 6
6494: PUSH
6495: FOR_IN
6496: IFFALSE 6514
// DoNotAttack ( ai , i ) ;
6498: LD_EXP 6
6502: PPUSH
6503: LD_VAR 0 5
6507: PPUSH
6508: CALL_OW 471
6512: GO 6495
6514: POP
6515: POP
// sli_pryc := [ ] ;
6516: LD_ADDR_EXP 77
6520: PUSH
6521: EMPTY
6522: ST_TO_ADDR
// go_pryc_tmp := go_pryc ;
6523: LD_ADDR_VAR 0 7
6527: PUSH
6528: LD_VAR 0 6
6532: ST_TO_ADDR
// while go_pryc_tmp do
6533: LD_VAR 0 7
6537: IFFALSE 6662
// begin for i in go_pryc_tmp do
6539: LD_ADDR_VAR 0 5
6543: PUSH
6544: LD_VAR 0 7
6548: PUSH
6549: FOR_IN
6550: IFFALSE 6615
// if IsInArea ( i , exit_a ) then
6552: LD_VAR 0 5
6556: PPUSH
6557: LD_INT 20
6559: PPUSH
6560: CALL_OW 308
6564: IFFALSE 6613
// begin RemoveUnit ( i ) ;
6566: LD_VAR 0 5
6570: PPUSH
6571: CALL_OW 64
// go_pryc_tmp := go_pryc_tmp diff [ i ] ;
6575: LD_ADDR_VAR 0 7
6579: PUSH
6580: LD_VAR 0 7
6584: PUSH
6585: LD_VAR 0 5
6589: PUSH
6590: EMPTY
6591: LIST
6592: DIFF
6593: ST_TO_ADDR
// sli_pryc := sli_pryc union [ i ] ;
6594: LD_ADDR_EXP 77
6598: PUSH
6599: LD_EXP 77
6603: PUSH
6604: LD_VAR 0 5
6608: PUSH
6609: EMPTY
6610: LIST
6611: UNION
6612: ST_TO_ADDR
// end ;
6613: GO 6549
6615: POP
6616: POP
// wait ( 0 0$1 ) ;
6617: LD_INT 35
6619: PPUSH
6620: CALL_OW 67
// ComExitVehicle ( go_pryc_tmp ) ;
6624: LD_VAR 0 7
6628: PPUSH
6629: CALL_OW 121
// AddComMoveToArea ( go_pryc_tmp , exit_a ) ;
6633: LD_VAR 0 7
6637: PPUSH
6638: LD_INT 20
6640: PPUSH
6641: CALL_OW 173
// AddComMoveXY ( go_pryc_tmp , 104 , 71 ) ;
6645: LD_VAR 0 7
6649: PPUSH
6650: LD_INT 104
6652: PPUSH
6653: LD_INT 71
6655: PPUSH
6656: CALL_OW 171
// end ;
6660: GO 6533
// wait ( 0 0$3 ) ;
6662: LD_INT 105
6664: PPUSH
6665: CALL_OW 67
// end ; end ;
6669: PPOPN 11
6671: END
// export convoy_can_go ; every 0 0$10 trigger convoy_can_go do
6672: LD_EXP 58
6676: IFFALSE 6692
6678: GO 6680
6680: DISABLE
// begin wait ( 0 0$25 ) ;
6681: LD_INT 875
6683: PPUSH
6684: CALL_OW 67
// convoy ;
6688: CALL 10098 0 0
// end ;
6692: END
// export function DNextMiss1 ; begin
6693: LD_INT 0
6695: PPUSH
// DialogueOn ;
6696: CALL_OW 6
// SayRadio ( Pla , DNextMiss1-Pla-1 ) ;
6700: LD_EXP 45
6704: PPUSH
6705: LD_STRING DNextMiss1-Pla-1
6707: PPUSH
6708: CALL_OW 94
// DialogueOff ;
6712: CALL_OW 7
// end ;
6716: LD_VAR 0 1
6720: RET
// export function DNextMiss2 ; begin
6721: LD_INT 0
6723: PPUSH
// DialogueOn ;
6724: CALL_OW 6
// SayRadio ( Pla , DNextMiss2-Pla-1 ) ;
6728: LD_EXP 45
6732: PPUSH
6733: LD_STRING DNextMiss2-Pla-1
6735: PPUSH
6736: CALL_OW 94
// DialogueOff ;
6740: CALL_OW 7
// end ;
6744: LD_VAR 0 1
6748: RET
// export function DNextMiss3 ; begin
6749: LD_INT 0
6751: PPUSH
// DialogueOn ;
6752: CALL_OW 6
// SayRadio ( Pla , DNextMiss3-Pla-1 ) ;
6756: LD_EXP 45
6760: PPUSH
6761: LD_STRING DNextMiss3-Pla-1
6763: PPUSH
6764: CALL_OW 94
// SayRadio ( Pla , DNextMiss3-Pla-1a ) ;
6768: LD_EXP 45
6772: PPUSH
6773: LD_STRING DNextMiss3-Pla-1a
6775: PPUSH
6776: CALL_OW 94
// DialogueOff ;
6780: CALL_OW 7
// end ;
6784: LD_VAR 0 1
6788: RET
// export function DNextMiss4 ; begin
6789: LD_INT 0
6791: PPUSH
// DialogueOn ;
6792: CALL_OW 6
// Say ( Bur , DNextMiss4-Bur-1 ) ;
6796: LD_EXP 44
6800: PPUSH
6801: LD_STRING DNextMiss4-Bur-1
6803: PPUSH
6804: CALL_OW 88
// DialogueOff ;
6808: CALL_OW 7
// end ;
6812: LD_VAR 0 1
6816: RET
// var was_end_query ; every 0 0$5 trigger exit_enabled do var a , qr ;
6817: LD_EXP 57
6821: IFFALSE 6939
6823: GO 6825
6825: DISABLE
6826: LD_INT 0
6828: PPUSH
6829: PPUSH
// begin a := FilterHumansInArea ( ru_exit , [ [ f_side , you ] ] ) ;
6830: LD_ADDR_VAR 0 1
6834: PUSH
6835: LD_INT 21
6837: PPUSH
6838: LD_INT 22
6840: PUSH
6841: LD_EXP 1
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PUSH
6850: EMPTY
6851: LIST
6852: PPUSH
6853: CALL 11017 0 2
6857: ST_TO_ADDR
// if ( Burlak in a ) then
6858: LD_EXP 61
6862: PUSH
6863: LD_VAR 0 1
6867: IN
6868: IFFALSE 6922
// begin end_the_mission_allowed := true ;
6870: LD_ADDR_OWVAR 57
6874: PUSH
6875: LD_INT 1
6877: ST_TO_ADDR
// if not was_end_query then
6878: LD_LOC 2
6882: NOT
6883: IFFALSE 6920
// begin qr := Query ( QEndGame ) ;
6885: LD_ADDR_VAR 0 2
6889: PUSH
6890: LD_STRING QEndGame
6892: PPUSH
6893: CALL_OW 97
6897: ST_TO_ADDR
// was_end_query := true ;
6898: LD_ADDR_LOC 2
6902: PUSH
6903: LD_INT 1
6905: ST_TO_ADDR
// if qr = 1 then
6906: LD_VAR 0 2
6910: PUSH
6911: LD_INT 1
6913: EQUAL
6914: IFFALSE 6920
// VyhraExit ;
6916: CALL 374 0 0
// end ; end else
6920: GO 6938
// begin end_the_mission_allowed := false ;
6922: LD_ADDR_OWVAR 57
6926: PUSH
6927: LD_INT 0
6929: ST_TO_ADDR
// was_end_query := false ;
6930: LD_ADDR_LOC 2
6934: PUSH
6935: LD_INT 0
6937: ST_TO_ADDR
// end ; enable ;
6938: ENABLE
// end ;
6939: PPOPN 2
6941: END
// export gleb_lives , utok_na_gleba ; every 0 0$1 trigger gleb and gleb_lives <> GetLives ( gleb ) do var i ;
6942: LD_EXP 65
6946: PUSH
6947: LD_EXP 59
6951: PUSH
6952: LD_EXP 65
6956: PPUSH
6957: CALL_OW 256
6961: NONEQUAL
6962: AND
6963: IFFALSE 7029
6965: GO 6967
6967: DISABLE
6968: LD_INT 0
6970: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , you ] ] ) do
6971: LD_ADDR_VAR 0 1
6975: PUSH
6976: LD_INT 22
6978: PUSH
6979: LD_EXP 1
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: EMPTY
6989: LIST
6990: PPUSH
6991: CALL_OW 69
6995: PUSH
6996: FOR_IN
6997: IFFALSE 7026
// if WantsToAttack ( i ) = Gleb then
6999: LD_VAR 0 1
7003: PPUSH
7004: CALL_OW 319
7008: PUSH
7009: LD_EXP 65
7013: EQUAL
7014: IFFALSE 7024
// utok_na_gleba := true ;
7016: LD_ADDR_EXP 60
7020: PUSH
7021: LD_INT 1
7023: ST_TO_ADDR
7024: GO 6996
7026: POP
7027: POP
// enable ;
7028: ENABLE
// end ;
7029: PPOPN 1
7031: END
// export function DKillGleb ; begin
7032: LD_INT 0
7034: PPUSH
// DialogueOn ;
7035: CALL_OW 6
// SayRadio ( Pla , DKillGleb-Pla-1 ) ;
7039: LD_EXP 45
7043: PPUSH
7044: LD_STRING DKillGleb-Pla-1
7046: PPUSH
7047: CALL_OW 94
// DialogueOff ;
7051: CALL_OW 7
// end ;
7055: LD_VAR 0 1
7059: RET
// every 0 0$5 do var i , a ;
7060: GO 7062
7062: DISABLE
7063: LD_INT 0
7065: PPUSH
7066: PPUSH
// begin a := 0 ;
7067: LD_ADDR_VAR 0 2
7071: PUSH
7072: LD_INT 0
7074: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_side , you ] ] ) do
7075: LD_ADDR_VAR 0 1
7079: PUSH
7080: LD_INT 2
7082: PUSH
7083: LD_INT 30
7085: PUSH
7086: LD_INT 0
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: PUSH
7093: LD_INT 30
7095: PUSH
7096: LD_INT 1
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: LIST
7107: PUSH
7108: LD_INT 22
7110: PUSH
7111: LD_EXP 1
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PPUSH
7124: CALL_OW 69
7128: PUSH
7129: FOR_IN
7130: IFFALSE 7163
// a := a + GetResourceType ( Getbase ( i ) , mat_siberit ) ;
7132: LD_ADDR_VAR 0 2
7136: PUSH
7137: LD_VAR 0 2
7141: PUSH
7142: LD_VAR 0 1
7146: PPUSH
7147: CALL_OW 274
7151: PPUSH
7152: LD_INT 3
7154: PPUSH
7155: CALL_OW 275
7159: PLUS
7160: ST_TO_ADDR
7161: GO 7129
7163: POP
7164: POP
// if a >= 100 then
7165: LD_VAR 0 2
7169: PUSH
7170: LD_INT 100
7172: GREATEREQUAL
7173: IFFALSE 7192
// begin ChangeMissionObjectives ( MOutMine ) ;
7175: LD_STRING MOutMine
7177: PPUSH
7178: CALL_OW 337
// mine_obj_completed := true ;
7182: LD_ADDR_EXP 30
7186: PUSH
7187: LD_INT 1
7189: ST_TO_ADDR
// end else
7190: GO 7193
// enable ;
7192: ENABLE
// end ;
7193: PPOPN 2
7195: END
// every 0 0$5 trigger GetResourceType ( GetBase ( RuDepot ) , mat_siberit ) > 15 do
7196: LD_INT 58
7198: PPUSH
7199: CALL_OW 274
7203: PPUSH
7204: LD_INT 3
7206: PPUSH
7207: CALL_OW 275
7211: PUSH
7212: LD_INT 15
7214: GREATER
7215: IFFALSE 7261
7217: GO 7219
7219: DISABLE
// begin if not Ovsyenkotaken then
7220: LD_EXP 14
7224: NOT
7225: IFFALSE 7261
// begin if GetSide ( RuDepot ) <> you then
7227: LD_INT 58
7229: PPUSH
7230: CALL_OW 255
7234: PUSH
7235: LD_EXP 1
7239: NONEQUAL
7240: IFFALSE 7260
// SetResourceType ( GetBase ( RuDepot ) , mat_siberit , 5 ) ;
7242: LD_INT 58
7244: PPUSH
7245: CALL_OW 274
7249: PPUSH
7250: LD_INT 3
7252: PPUSH
7253: LD_INT 5
7255: PPUSH
7256: CALL_OW 277
// enable ;
7260: ENABLE
// end ; end ;
7261: END
// every 0 0$10 trigger UnitFilter ( zbytek , [ [ f_see , you ] ] ) do
7262: LD_EXP 91
7266: PPUSH
7267: LD_INT 101
7269: PUSH
7270: LD_EXP 1
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: EMPTY
7280: LIST
7281: PPUSH
7282: CALL_OW 72
7286: IFFALSE 7305
7288: GO 7290
7290: DISABLE
// begin wait ( 0 0$10 ) ;
7291: LD_INT 350
7293: PPUSH
7294: CALL_OW 67
// MyHint ( RemoteControl ) ;
7298: LD_STRING RemoteControl
7300: PPUSH
7301: CALL 12040 0 1
// end ; end_of_file
7305: END
// export Burlak , Platonov , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Vsevolod , Vsevolod2 ; export used , ru_cars , cars , other_ru_5_6 , stevens_killed , sli_pryc ; export fast_braketrough ; export function Load ; var i , k1 , k2 ; begin
7306: LD_INT 0
7308: PPUSH
7309: PPUSH
7310: PPUSH
7311: PPUSH
// belkovfreed := LoadVariable ( belkovfreed , true ) ;
7312: LD_ADDR_EXP 13
7316: PUSH
7317: LD_STRING belkovfreed
7319: PPUSH
7320: LD_INT 1
7322: PPUSH
7323: CALL_OW 30
7327: ST_TO_ADDR
// cars := LoadVariable ( cars_ru_6 , [ [ ru_heavy_wheeled , ru_gatling_gun , nation_russian , 0 , 0 ] , [ ru_heavy_wheeled , ru_heavy_gun , nation_russian , 0 , 0 ] , [ ru_heavy_wheeled , ru_heavy_gun , nation_russian , 0 , 0 ] , [ ru_heavy_tracked , ru_heavy_gun , nation_russian , 0 , 0 ] , [ ru_heavy_tracked , ru_gatling_gun , nation_russian , 0 , 0 ] , [ ru_heavy_tracked , ru_gatling_gun , nation_russian , 0 , 0 ] , [ ru_heavy_tracked , ru_gatling_gun , nation_russian , 0 , 0 ] , [ ru_heavy_tracked , ru_gatling_gun , nation_russian , 0 , 0 ] ] ) ;
7328: LD_ADDR_EXP 74
7332: PUSH
7333: LD_STRING cars_ru_6
7335: PPUSH
7336: LD_INT 23
7338: PUSH
7339: LD_INT 43
7341: PUSH
7342: LD_INT 3
7344: PUSH
7345: LD_INT 0
7347: PUSH
7348: LD_INT 0
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: PUSH
7358: LD_INT 23
7360: PUSH
7361: LD_INT 46
7363: PUSH
7364: LD_INT 3
7366: PUSH
7367: LD_INT 0
7369: PUSH
7370: LD_INT 0
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: PUSH
7380: LD_INT 23
7382: PUSH
7383: LD_INT 46
7385: PUSH
7386: LD_INT 3
7388: PUSH
7389: LD_INT 0
7391: PUSH
7392: LD_INT 0
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 24
7404: PUSH
7405: LD_INT 46
7407: PUSH
7408: LD_INT 3
7410: PUSH
7411: LD_INT 0
7413: PUSH
7414: LD_INT 0
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: PUSH
7424: LD_INT 24
7426: PUSH
7427: LD_INT 43
7429: PUSH
7430: LD_INT 3
7432: PUSH
7433: LD_INT 0
7435: PUSH
7436: LD_INT 0
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 24
7448: PUSH
7449: LD_INT 43
7451: PUSH
7452: LD_INT 3
7454: PUSH
7455: LD_INT 0
7457: PUSH
7458: LD_INT 0
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: PUSH
7468: LD_INT 24
7470: PUSH
7471: LD_INT 43
7473: PUSH
7474: LD_INT 3
7476: PUSH
7477: LD_INT 0
7479: PUSH
7480: LD_INT 0
7482: PUSH
7483: EMPTY
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: PUSH
7490: LD_INT 24
7492: PUSH
7493: LD_INT 43
7495: PUSH
7496: LD_INT 3
7498: PUSH
7499: LD_INT 0
7501: PUSH
7502: LD_INT 0
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: PPUSH
7522: CALL_OW 30
7526: ST_TO_ADDR
// stevens_killed := LoadVariable ( stevens_killed , false ) ;
7527: LD_ADDR_EXP 76
7531: PUSH
7532: LD_STRING stevens_killed
7534: PPUSH
7535: LD_INT 0
7537: PPUSH
7538: CALL_OW 30
7542: ST_TO_ADDR
// fast_braketrough := LoadVariable ( OvesyenkoTime , false ) ;
7543: LD_ADDR_EXP 78
7547: PUSH
7548: LD_STRING OvesyenkoTime
7550: PPUSH
7551: LD_INT 0
7553: PPUSH
7554: CALL_OW 30
7558: ST_TO_ADDR
// InitUc ;
7559: CALL_OW 18
// InitHc ;
7563: CALL_OW 19
// uc_side := you ;
7567: LD_ADDR_OWVAR 20
7571: PUSH
7572: LD_EXP 1
7576: ST_TO_ADDR
// uc_nation := nation_russian ;
7577: LD_ADDR_OWVAR 21
7581: PUSH
7582: LD_INT 3
7584: ST_TO_ADDR
// Platonov := MyCreateCharacter ( Platonov , 0 , class_soldier , true ) ;
7585: LD_ADDR_EXP 62
7589: PUSH
7590: LD_STRING Platonov
7592: PPUSH
7593: LD_INT 0
7595: PPUSH
7596: LD_INT 1
7598: PPUSH
7599: LD_INT 1
7601: PPUSH
7602: CALL 8612 0 4
7606: ST_TO_ADDR
// if difficulty = 3 then
7607: LD_OWVAR 67
7611: PUSH
7612: LD_INT 3
7614: EQUAL
7615: IFFALSE 7639
// Burlak := MyCreateCharacter ( Burlak , 0 , class_mechanic , false ) ;
7617: LD_ADDR_EXP 61
7621: PUSH
7622: LD_STRING Burlak
7624: PPUSH
7625: LD_INT 0
7627: PPUSH
7628: LD_INT 3
7630: PPUSH
7631: LD_INT 0
7633: PPUSH
7634: CALL 8612 0 4
7638: ST_TO_ADDR
// Titov := MyCreateCharacter ( Titov , 0 , class_soldier , false ) ;
7639: LD_ADDR_EXP 67
7643: PUSH
7644: LD_STRING Titov
7646: PPUSH
7647: LD_INT 0
7649: PPUSH
7650: LD_INT 1
7652: PPUSH
7653: LD_INT 0
7655: PPUSH
7656: CALL 8612 0 4
7660: ST_TO_ADDR
// Dolgov := MyCreateCharacter ( Dolgov , 0 , class_scientistic , false ) ;
7661: LD_ADDR_EXP 68
7665: PUSH
7666: LD_STRING Dolgov
7668: PPUSH
7669: LD_INT 0
7671: PPUSH
7672: LD_INT 4
7674: PPUSH
7675: LD_INT 0
7677: PPUSH
7678: CALL 8612 0 4
7682: ST_TO_ADDR
// Lipshchin := MyCreateCharacter ( Lipshchin , 0 , class_soldier , false ) ;
7683: LD_ADDR_EXP 69
7687: PUSH
7688: LD_STRING Lipshchin
7690: PPUSH
7691: LD_INT 0
7693: PPUSH
7694: LD_INT 1
7696: PPUSH
7697: LD_INT 0
7699: PPUSH
7700: CALL 8612 0 4
7704: ST_TO_ADDR
// Karamazov := MyCreateCharacter ( Karamazov , 0 , class_engineer , false ) ;
7705: LD_ADDR_EXP 63
7709: PUSH
7710: LD_STRING Karamazov
7712: PPUSH
7713: LD_INT 0
7715: PPUSH
7716: LD_INT 2
7718: PPUSH
7719: LD_INT 0
7721: PPUSH
7722: CALL 8612 0 4
7726: ST_TO_ADDR
// Petrovova := MyCreateCharacter ( Petrovova , 0 , class_soldier , false ) ;
7727: LD_ADDR_EXP 64
7731: PUSH
7732: LD_STRING Petrovova
7734: PPUSH
7735: LD_INT 0
7737: PPUSH
7738: LD_INT 1
7740: PPUSH
7741: LD_INT 0
7743: PPUSH
7744: CALL 8612 0 4
7748: ST_TO_ADDR
// Gleb := MyCreateCharacter ( Gleb , 0 , class_soldier , false ) ;
7749: LD_ADDR_EXP 65
7753: PUSH
7754: LD_STRING Gleb
7756: PPUSH
7757: LD_INT 0
7759: PPUSH
7760: LD_INT 1
7762: PPUSH
7763: LD_INT 0
7765: PPUSH
7766: CALL 8612 0 4
7770: ST_TO_ADDR
// Petrosyan := MyCreateCharacter ( Petrosyan , 0 , class_scientistic , false ) ;
7771: LD_ADDR_EXP 66
7775: PUSH
7776: LD_STRING Petrosyan
7778: PPUSH
7779: LD_INT 0
7781: PPUSH
7782: LD_INT 4
7784: PPUSH
7785: LD_INT 0
7787: PPUSH
7788: CALL 8612 0 4
7792: ST_TO_ADDR
// if difficulty < 3 then
7793: LD_OWVAR 67
7797: PUSH
7798: LD_INT 3
7800: LESS
7801: IFFALSE 7825
// Burlak := MyCreateCharacter ( Burlak , 0 , class_mechanic , false ) ;
7803: LD_ADDR_EXP 61
7807: PUSH
7808: LD_STRING Burlak
7810: PPUSH
7811: LD_INT 0
7813: PPUSH
7814: LD_INT 3
7816: PPUSH
7817: LD_INT 0
7819: PPUSH
7820: CALL 8612 0 4
7824: ST_TO_ADDR
// used := [ Burlak , Lipshchin , Titov , Dolgov , Karamazov , Petrovova , Gleb , Petrosyan ] diff 0 ;
7825: LD_ADDR_EXP 72
7829: PUSH
7830: LD_EXP 61
7834: PUSH
7835: LD_EXP 69
7839: PUSH
7840: LD_EXP 67
7844: PUSH
7845: LD_EXP 68
7849: PUSH
7850: LD_EXP 63
7854: PUSH
7855: LD_EXP 64
7859: PUSH
7860: LD_EXP 65
7864: PUSH
7865: LD_EXP 66
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: PUSH
7880: LD_INT 0
7882: DIFF
7883: ST_TO_ADDR
// other_ru_5_6 := CreateCharacterSet ( other_ru_5_6 ) ;
7884: LD_ADDR_EXP 75
7888: PUSH
7889: LD_STRING other_ru_5_6
7891: PPUSH
7892: CALL_OW 31
7896: ST_TO_ADDR
// used := used ^ other_ru_5_6 ;
7897: LD_ADDR_EXP 72
7901: PUSH
7902: LD_EXP 72
7906: PUSH
7907: LD_EXP 75
7911: ADD
7912: ST_TO_ADDR
// rulive := used ;
7913: LD_ADDR_EXP 9
7917: PUSH
7918: LD_EXP 72
7922: ST_TO_ADDR
// k1 := Rand ( 1 , used ) ;
7923: LD_ADDR_VAR 0 3
7927: PUSH
7928: LD_INT 1
7930: PPUSH
7931: LD_EXP 72
7935: PPUSH
7936: CALL_OW 12
7940: ST_TO_ADDR
// if not UnitFilter ( used , [ [ f_class , class_engineer ] ] ) then
7941: LD_EXP 72
7945: PPUSH
7946: LD_INT 25
7948: PUSH
7949: LD_INT 2
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: EMPTY
7957: LIST
7958: PPUSH
7959: CALL_OW 72
7963: NOT
7964: IFFALSE 7984
// SetClass ( used [ k1 ] , class_engineer ) ;
7966: LD_EXP 72
7970: PUSH
7971: LD_VAR 0 3
7975: ARRAY
7976: PPUSH
7977: LD_INT 2
7979: PPUSH
7980: CALL_OW 336
// k2 := Rand ( 1 , used ) ;
7984: LD_ADDR_VAR 0 4
7988: PUSH
7989: LD_INT 1
7991: PPUSH
7992: LD_EXP 72
7996: PPUSH
7997: CALL_OW 12
8001: ST_TO_ADDR
// while k1 = k2 do
8002: LD_VAR 0 3
8006: PUSH
8007: LD_VAR 0 4
8011: EQUAL
8012: IFFALSE 8034
// k2 := Rand ( 1 , used ) ;
8014: LD_ADDR_VAR 0 4
8018: PUSH
8019: LD_INT 1
8021: PPUSH
8022: LD_EXP 72
8026: PPUSH
8027: CALL_OW 12
8031: ST_TO_ADDR
8032: GO 8002
// if difficulty = 1 and not UnitFilter ( used , [ [ f_class , class_scientistic ] ] ) then
8034: LD_OWVAR 67
8038: PUSH
8039: LD_INT 1
8041: EQUAL
8042: PUSH
8043: LD_EXP 72
8047: PPUSH
8048: LD_INT 25
8050: PUSH
8051: LD_INT 4
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: PUSH
8058: EMPTY
8059: LIST
8060: PPUSH
8061: CALL_OW 72
8065: NOT
8066: AND
8067: IFFALSE 8087
// SetClass ( used [ k2 ] , class_scientistic ) ;
8069: LD_EXP 72
8073: PUSH
8074: LD_VAR 0 4
8078: ARRAY
8079: PPUSH
8080: LD_INT 4
8082: PPUSH
8083: CALL_OW 336
// uc_side := you2 ;
8087: LD_ADDR_OWVAR 20
8091: PUSH
8092: LD_EXP 2
8096: ST_TO_ADDR
// Vsevolod := MyCreateCharacter ( Vsevolod , 0 , class_soldier , true ) ;
8097: LD_ADDR_EXP 70
8101: PUSH
8102: LD_STRING Vsevolod
8104: PPUSH
8105: LD_INT 0
8107: PPUSH
8108: LD_INT 1
8110: PPUSH
8111: LD_INT 1
8113: PPUSH
8114: CALL 8612 0 4
8118: ST_TO_ADDR
// Vsevolod2 := MyCreateCharacter ( Vsevolod , 0 , class_soldier , true ) ;
8119: LD_ADDR_EXP 71
8123: PUSH
8124: LD_STRING Vsevolod
8126: PPUSH
8127: LD_INT 0
8129: PPUSH
8130: LD_INT 1
8132: PPUSH
8133: LD_INT 1
8135: PPUSH
8136: CALL 8612 0 4
8140: ST_TO_ADDR
// for i := 1 to 3 do
8141: LD_ADDR_VAR 0 2
8145: PUSH
8146: DOUBLE
8147: LD_INT 1
8149: DEC
8150: ST_TO_ADDR
8151: LD_INT 3
8153: PUSH
8154: FOR_TO
8155: IFFALSE 8188
// begin PrepareSoldier ( sex_male , 3 ) ;
8157: LD_INT 1
8159: PPUSH
8160: LD_INT 3
8162: PPUSH
8163: CALL_OW 381
// vsevolod_uderna_group := vsevolod_uderna_group ^ [ CreateHuman ] ;
8167: LD_ADDR_EXP 12
8171: PUSH
8172: LD_EXP 12
8176: PUSH
8177: CALL_OW 44
8181: PUSH
8182: EMPTY
8183: LIST
8184: ADD
8185: ST_TO_ADDR
// end ;
8186: GO 8154
8188: POP
8189: POP
// SetClass ( vsevolod_uderna_group [ 1 ] , class_engineer ) ;
8190: LD_EXP 12
8194: PUSH
8195: LD_INT 1
8197: ARRAY
8198: PPUSH
8199: LD_INT 2
8201: PPUSH
8202: CALL_OW 336
// vsevolod_uderna_group := vsevolod_uderna_group ;
8206: LD_ADDR_EXP 12
8210: PUSH
8211: LD_EXP 12
8215: ST_TO_ADDR
// end ;
8216: LD_VAR 0 1
8220: RET
// export function place_in_ru_cars ; var car , i ; begin
8221: LD_INT 0
8223: PPUSH
8224: PPUSH
8225: PPUSH
// InitUc ;
8226: CALL_OW 18
// InitVc ;
8230: CALL_OW 20
// vc_control := control_manual ;
8234: LD_ADDR_OWVAR 38
8238: PUSH
8239: LD_INT 1
8241: ST_TO_ADDR
// vc_engine := engine_combustion ;
8242: LD_ADDR_OWVAR 39
8246: PUSH
8247: LD_INT 1
8249: ST_TO_ADDR
// uc_side := you ;
8250: LD_ADDR_OWVAR 20
8254: PUSH
8255: LD_EXP 1
8259: ST_TO_ADDR
// ru_cars := [ ] ;
8260: LD_ADDR_EXP 73
8264: PUSH
8265: EMPTY
8266: ST_TO_ADDR
// if ( ( cars + 0 ) < ( used + 0 ) ) or ( ( used + 0 ) < 6 ) then
8267: LD_EXP 74
8271: PUSH
8272: LD_INT 0
8274: PLUS
8275: PUSH
8276: LD_EXP 72
8280: PUSH
8281: LD_INT 0
8283: PLUS
8284: LESS
8285: PUSH
8286: LD_EXP 72
8290: PUSH
8291: LD_INT 0
8293: PLUS
8294: PUSH
8295: LD_INT 6
8297: LESS
8298: OR
8299: IFFALSE 8308
// begin Msg ( spatny save ) ;
8301: LD_STRING spatny save
8303: PPUSH
8304: CALL_OW 100
// end ; for i := 1 to used do
8308: LD_ADDR_VAR 0 3
8312: PUSH
8313: DOUBLE
8314: LD_INT 1
8316: DEC
8317: ST_TO_ADDR
8318: LD_EXP 72
8322: PUSH
8323: FOR_TO
8324: IFFALSE 8564
// begin uc_nation := cars [ i ] [ 3 ] ;
8326: LD_ADDR_OWVAR 21
8330: PUSH
8331: LD_EXP 74
8335: PUSH
8336: LD_VAR 0 3
8340: ARRAY
8341: PUSH
8342: LD_INT 3
8344: ARRAY
8345: ST_TO_ADDR
// vc_chassis := cars [ i ] [ 1 ] ;
8346: LD_ADDR_OWVAR 37
8350: PUSH
8351: LD_EXP 74
8355: PUSH
8356: LD_VAR 0 3
8360: ARRAY
8361: PUSH
8362: LD_INT 1
8364: ARRAY
8365: ST_TO_ADDR
// vc_weapon := cars [ i ] [ 2 ] ;
8366: LD_ADDR_OWVAR 40
8370: PUSH
8371: LD_EXP 74
8375: PUSH
8376: LD_VAR 0 3
8380: ARRAY
8381: PUSH
8382: LD_INT 2
8384: ARRAY
8385: ST_TO_ADDR
// uc_direction := Rand ( 3 , 4 ) ;
8386: LD_ADDR_OWVAR 24
8390: PUSH
8391: LD_INT 3
8393: PPUSH
8394: LD_INT 4
8396: PPUSH
8397: CALL_OW 12
8401: ST_TO_ADDR
// vc_fuel_battery := Rand ( 3 , 6 ) ;
8402: LD_ADDR_OWVAR 41
8406: PUSH
8407: LD_INT 3
8409: PPUSH
8410: LD_INT 6
8412: PPUSH
8413: CALL_OW 12
8417: ST_TO_ADDR
// uc_direction := 5 ;
8418: LD_ADDR_OWVAR 24
8422: PUSH
8423: LD_INT 5
8425: ST_TO_ADDR
// car := CreateVehicle ;
8426: LD_ADDR_VAR 0 2
8430: PUSH
8431: CALL_OW 45
8435: ST_TO_ADDR
// if ( cars [ i ] [ 2 ] in [ ar_cargo_bay , ru_cargo_bay , us_cargo_bay ] ) then
8436: LD_EXP 74
8440: PUSH
8441: LD_VAR 0 3
8445: ARRAY
8446: PUSH
8447: LD_INT 2
8449: ARRAY
8450: PUSH
8451: LD_INT 32
8453: PUSH
8454: LD_INT 51
8456: PUSH
8457: LD_INT 12
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: LIST
8464: IN
8465: IFFALSE 8526
// if ( cars [ i ] [ 4 ] <> 0 ) then
8467: LD_EXP 74
8471: PUSH
8472: LD_VAR 0 3
8476: ARRAY
8477: PUSH
8478: LD_INT 4
8480: ARRAY
8481: PUSH
8482: LD_INT 0
8484: NONEQUAL
8485: IFFALSE 8526
// SetCargo ( car , cars [ i ] [ 4 ] , cars [ i ] [ 5 ] ) ;
8487: LD_VAR 0 2
8491: PPUSH
8492: LD_EXP 74
8496: PUSH
8497: LD_VAR 0 3
8501: ARRAY
8502: PUSH
8503: LD_INT 4
8505: ARRAY
8506: PPUSH
8507: LD_EXP 74
8511: PUSH
8512: LD_VAR 0 3
8516: ARRAY
8517: PUSH
8518: LD_INT 5
8520: ARRAY
8521: PPUSH
8522: CALL_OW 290
// ru_cars := ru_cars ^ car ;
8526: LD_ADDR_EXP 73
8530: PUSH
8531: LD_EXP 73
8535: PUSH
8536: LD_VAR 0 2
8540: ADD
8541: ST_TO_ADDR
// PlaceHumanInUnit ( used [ i ] , car ) ;
8542: LD_EXP 72
8546: PUSH
8547: LD_VAR 0 3
8551: ARRAY
8552: PPUSH
8553: LD_VAR 0 2
8557: PPUSH
8558: CALL_OW 52
// end ;
8562: GO 8323
8564: POP
8565: POP
// end ;
8566: LD_VAR 0 1
8570: RET
// export function place_ru_cars ; var i ; begin
8571: LD_INT 0
8573: PPUSH
8574: PPUSH
// for i in ru_cars do
8575: LD_ADDR_VAR 0 2
8579: PUSH
8580: LD_EXP 73
8584: PUSH
8585: FOR_IN
8586: IFFALSE 8605
// PlaceUnitArea ( i , ru_place , false ) ;
8588: LD_VAR 0 2
8592: PPUSH
8593: LD_INT 5
8595: PPUSH
8596: LD_INT 0
8598: PPUSH
8599: CALL_OW 49
8603: GO 8585
8605: POP
8606: POP
// end ;
8607: LD_VAR 0 1
8611: RET
// function MyCreateCharacter ( name , unclass , unclass_gen , new ) ; begin
8612: LD_INT 0
8614: PPUSH
// if new or TestCharacters ( name ) then
8615: LD_VAR 0 4
8619: PUSH
8620: LD_VAR 0 1
8624: PPUSH
8625: CALL_OW 28
8629: OR
8630: IFFALSE 8713
// begin if new then
8632: LD_VAR 0 4
8636: IFFALSE 8655
// result := NewCharacter ( name ) else
8638: LD_ADDR_VAR 0 5
8642: PUSH
8643: LD_VAR 0 1
8647: PPUSH
8648: CALL_OW 25
8652: ST_TO_ADDR
8653: GO 8691
// begin if CheckCharacterSet ( name ) then
8655: LD_VAR 0 1
8659: PPUSH
8660: CALL_OW 29
8664: IFFALSE 8683
// result := CreateCharacter ( name ) else
8666: LD_ADDR_VAR 0 5
8670: PUSH
8671: LD_VAR 0 1
8675: PPUSH
8676: CALL_OW 34
8680: ST_TO_ADDR
8681: GO 8691
// result := 0 ;
8683: LD_ADDR_VAR 0 5
8687: PUSH
8688: LD_INT 0
8690: ST_TO_ADDR
// end ; if unclass then
8691: LD_VAR 0 2
8695: IFFALSE 8711
// SetClass ( result , unclass ) ;
8697: LD_VAR 0 5
8701: PPUSH
8702: LD_VAR 0 2
8706: PPUSH
8707: CALL_OW 336
// end else
8711: GO 8789
// begin Msg ( Chybi  & name & ! ) ;
8713: LD_STRING Chybi 
8715: PUSH
8716: LD_VAR 0 1
8720: STR
8721: PUSH
8722: LD_STRING !
8724: STR
8725: PPUSH
8726: CALL_OW 100
// hc_name := name ;
8730: LD_ADDR_OWVAR 26
8734: PUSH
8735: LD_VAR 0 1
8739: ST_TO_ADDR
// PrepareHuman ( sex_male , 0 , 3 ) ;
8740: LD_INT 1
8742: PPUSH
8743: LD_INT 0
8745: PPUSH
8746: LD_INT 3
8748: PPUSH
8749: CALL_OW 380
// if unclass_gen then
8753: LD_VAR 0 3
8757: IFFALSE 8771
// hc_class := unclass_gen else
8759: LD_ADDR_OWVAR 28
8763: PUSH
8764: LD_VAR 0 3
8768: ST_TO_ADDR
8769: GO 8779
// hc_class := class_soldier ;
8771: LD_ADDR_OWVAR 28
8775: PUSH
8776: LD_INT 1
8778: ST_TO_ADDR
// result := CreateHuman ;
8779: LD_ADDR_VAR 0 5
8783: PUSH
8784: CALL_OW 44
8788: ST_TO_ADDR
// end ; end ;
8789: LD_VAR 0 5
8793: RET
// export convoy_06 ; export function Save ; var i , zustali , tmp_conv ; begin
8794: LD_INT 0
8796: PPUSH
8797: PPUSH
8798: PPUSH
8799: PPUSH
// DeleteVariable ( cars_ru_6 ) ;
8800: LD_STRING cars_ru_6
8802: PPUSH
8803: CALL_OW 41
// DeleteVariable ( other_ru_5_6 ) ;
8807: LD_STRING other_ru_5_6
8809: PPUSH
8810: CALL_OW 41
// SaveCharacters ( Burlak , Burlak ) ;
8814: LD_EXP 61
8818: PPUSH
8819: LD_STRING Burlak
8821: PPUSH
8822: CALL_OW 38
// if Titov then
8826: LD_EXP 67
8830: IFFALSE 8890
// if IsDead ( titov ) then
8832: LD_EXP 67
8836: PPUSH
8837: CALL_OW 301
8841: IFFALSE 8855
// SaveVariable ( 0 , TitovLoc ) else
8843: LD_INT 0
8845: PPUSH
8846: LD_STRING TitovLoc
8848: PPUSH
8849: CALL_OW 39
8853: GO 8890
// if titov in sli_pryc then
8855: LD_EXP 67
8859: PUSH
8860: LD_EXP 77
8864: IN
8865: IFFALSE 8880
// SaveVariable ( - 7 , TitovLoc ) else
8867: LD_INT 7
8869: NEG
8870: PPUSH
8871: LD_STRING TitovLoc
8873: PPUSH
8874: CALL_OW 39
8878: GO 8890
// SaveVariable ( 7 , TitovLoc ) ;
8880: LD_INT 7
8882: PPUSH
8883: LD_STRING TitovLoc
8885: PPUSH
8886: CALL_OW 39
// SaveCharacters ( Titov , Titov ) ;
8890: LD_EXP 67
8894: PPUSH
8895: LD_STRING Titov
8897: PPUSH
8898: CALL_OW 38
// if Dolgov then
8902: LD_EXP 68
8906: IFFALSE 8966
// if IsDead ( Dolgov ) then
8908: LD_EXP 68
8912: PPUSH
8913: CALL_OW 301
8917: IFFALSE 8931
// SaveVariable ( 0 , DolgovLoc ) else
8919: LD_INT 0
8921: PPUSH
8922: LD_STRING DolgovLoc
8924: PPUSH
8925: CALL_OW 39
8929: GO 8966
// if Dolgov in sli_pryc then
8931: LD_EXP 68
8935: PUSH
8936: LD_EXP 77
8940: IN
8941: IFFALSE 8956
// SaveVariable ( - 7 , DolgovLoc ) else
8943: LD_INT 7
8945: NEG
8946: PPUSH
8947: LD_STRING DolgovLoc
8949: PPUSH
8950: CALL_OW 39
8954: GO 8966
// SaveVariable ( 7 , DolgovLoc ) ;
8956: LD_INT 7
8958: PPUSH
8959: LD_STRING DolgovLoc
8961: PPUSH
8962: CALL_OW 39
// if Dolgov then
8966: LD_EXP 68
8970: IFFALSE 8984
// SaveCharacters ( Dolgov , Dolgov ) ;
8972: LD_EXP 68
8976: PPUSH
8977: LD_STRING Dolgov
8979: PPUSH
8980: CALL_OW 38
// if Lipshchin then
8984: LD_EXP 69
8988: IFFALSE 9048
// if IsDead ( Lipshchin ) then
8990: LD_EXP 69
8994: PPUSH
8995: CALL_OW 301
8999: IFFALSE 9013
// SaveVariable ( 0 , LipshchinLoc ) else
9001: LD_INT 0
9003: PPUSH
9004: LD_STRING LipshchinLoc
9006: PPUSH
9007: CALL_OW 39
9011: GO 9048
// if Lipshchin in sli_pryc then
9013: LD_EXP 69
9017: PUSH
9018: LD_EXP 77
9022: IN
9023: IFFALSE 9038
// SaveVariable ( - 7 , LipshchinLoc ) else
9025: LD_INT 7
9027: NEG
9028: PPUSH
9029: LD_STRING LipshchinLoc
9031: PPUSH
9032: CALL_OW 39
9036: GO 9048
// SaveVariable ( 7 , LipshchinLoc ) ;
9038: LD_INT 7
9040: PPUSH
9041: LD_STRING LipshchinLoc
9043: PPUSH
9044: CALL_OW 39
// if Lipshchin then
9048: LD_EXP 69
9052: IFFALSE 9066
// SaveCharacters ( Lipshchin , Lipshchin ) ;
9054: LD_EXP 69
9058: PPUSH
9059: LD_STRING Lipshchin
9061: PPUSH
9062: CALL_OW 38
// if Karamazov then
9066: LD_EXP 63
9070: IFFALSE 9130
// if IsDead ( Karamazov ) then
9072: LD_EXP 63
9076: PPUSH
9077: CALL_OW 301
9081: IFFALSE 9095
// SaveVariable ( 0 , KaramazovLoc ) else
9083: LD_INT 0
9085: PPUSH
9086: LD_STRING KaramazovLoc
9088: PPUSH
9089: CALL_OW 39
9093: GO 9130
// if Karamazov in sli_pryc then
9095: LD_EXP 63
9099: PUSH
9100: LD_EXP 77
9104: IN
9105: IFFALSE 9120
// SaveVariable ( - 7 , KaramazovLoc ) else
9107: LD_INT 7
9109: NEG
9110: PPUSH
9111: LD_STRING KaramazovLoc
9113: PPUSH
9114: CALL_OW 39
9118: GO 9130
// SaveVariable ( 7 , KaramazovLoc ) ;
9120: LD_INT 7
9122: PPUSH
9123: LD_STRING KaramazovLoc
9125: PPUSH
9126: CALL_OW 39
// if Karamazov then
9130: LD_EXP 63
9134: IFFALSE 9148
// SaveCharacters ( Karamazov , Karamazov ) ;
9136: LD_EXP 63
9140: PPUSH
9141: LD_STRING Karamazov
9143: PPUSH
9144: CALL_OW 38
// if Petrovova then
9148: LD_EXP 64
9152: IFFALSE 9212
// if IsDead ( Petrovova ) then
9154: LD_EXP 64
9158: PPUSH
9159: CALL_OW 301
9163: IFFALSE 9177
// SaveVariable ( 0 , PetrovovaLoc ) else
9165: LD_INT 0
9167: PPUSH
9168: LD_STRING PetrovovaLoc
9170: PPUSH
9171: CALL_OW 39
9175: GO 9212
// if Petrovova in sli_pryc then
9177: LD_EXP 64
9181: PUSH
9182: LD_EXP 77
9186: IN
9187: IFFALSE 9202
// SaveVariable ( - 7 , PetrovovaLoc ) else
9189: LD_INT 7
9191: NEG
9192: PPUSH
9193: LD_STRING PetrovovaLoc
9195: PPUSH
9196: CALL_OW 39
9200: GO 9212
// SaveVariable ( 7 , PetrovovaLoc ) ;
9202: LD_INT 7
9204: PPUSH
9205: LD_STRING PetrovovaLoc
9207: PPUSH
9208: CALL_OW 39
// if Petrovova then
9212: LD_EXP 64
9216: IFFALSE 9230
// SaveCharacters ( Petrovova , Petrovova ) ;
9218: LD_EXP 64
9222: PPUSH
9223: LD_STRING Petrovova
9225: PPUSH
9226: CALL_OW 38
// if Gleb then
9230: LD_EXP 65
9234: IFFALSE 9294
// if IsDead ( Gleb ) then
9236: LD_EXP 65
9240: PPUSH
9241: CALL_OW 301
9245: IFFALSE 9259
// SaveVariable ( 0 , GlebLoc ) else
9247: LD_INT 0
9249: PPUSH
9250: LD_STRING GlebLoc
9252: PPUSH
9253: CALL_OW 39
9257: GO 9294
// if Gleb in sli_pryc then
9259: LD_EXP 65
9263: PUSH
9264: LD_EXP 77
9268: IN
9269: IFFALSE 9284
// SaveVariable ( - 7 , GlebLoc ) else
9271: LD_INT 7
9273: NEG
9274: PPUSH
9275: LD_STRING GlebLoc
9277: PPUSH
9278: CALL_OW 39
9282: GO 9294
// SaveVariable ( 7 , GlebLoc ) ;
9284: LD_INT 7
9286: PPUSH
9287: LD_STRING GlebLoc
9289: PPUSH
9290: CALL_OW 39
// if Gleb then
9294: LD_EXP 65
9298: IFFALSE 9312
// SaveCharacters ( Gleb , Gleb ) ;
9300: LD_EXP 65
9304: PPUSH
9305: LD_STRING Gleb
9307: PPUSH
9308: CALL_OW 38
// if Petrosyan then
9312: LD_EXP 66
9316: IFFALSE 9376
// if IsDead ( Petrosyan ) then
9318: LD_EXP 66
9322: PPUSH
9323: CALL_OW 301
9327: IFFALSE 9341
// SaveVariable ( 0 , PetrosyanLoc ) else
9329: LD_INT 0
9331: PPUSH
9332: LD_STRING PetrosyanLoc
9334: PPUSH
9335: CALL_OW 39
9339: GO 9376
// if Petrosyan in sli_pryc then
9341: LD_EXP 66
9345: PUSH
9346: LD_EXP 77
9350: IN
9351: IFFALSE 9366
// SaveVariable ( - 7 , PetrosyanLoc ) else
9353: LD_INT 7
9355: NEG
9356: PPUSH
9357: LD_STRING PetrosyanLoc
9359: PPUSH
9360: CALL_OW 39
9364: GO 9376
// SaveVariable ( 7 , PetrosyanLoc ) ;
9366: LD_INT 7
9368: PPUSH
9369: LD_STRING PetrosyanLoc
9371: PPUSH
9372: CALL_OW 39
// if Petrosyan then
9376: LD_EXP 66
9380: IFFALSE 9394
// SaveCharacters ( Petrosyan , Petrosyan ) ;
9382: LD_EXP 66
9386: PPUSH
9387: LD_STRING Petrosyan
9389: PPUSH
9390: CALL_OW 38
// SaveCharacters ( Vsevolod , Vsevolod ) ;
9394: LD_EXP 70
9398: PPUSH
9399: LD_STRING Vsevolod
9401: PPUSH
9402: CALL_OW 38
// SaveVariable ( not IsDead ( vsevolod ) , VsevSaved ) ;
9406: LD_EXP 70
9410: PPUSH
9411: CALL_OW 301
9415: NOT
9416: PPUSH
9417: LD_STRING VsevSaved
9419: PPUSH
9420: CALL_OW 39
// zustali := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , you ] , [ f_nation , nation_russian ] ] ) ;
9424: LD_ADDR_VAR 0 3
9428: PUSH
9429: LD_INT 21
9431: PUSH
9432: LD_INT 1
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: PUSH
9439: LD_INT 22
9441: PUSH
9442: LD_EXP 1
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: PUSH
9451: LD_INT 23
9453: PUSH
9454: LD_INT 3
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: LIST
9465: PPUSH
9466: CALL_OW 69
9470: ST_TO_ADDR
// SaveCharacters ( zustali diff [ Burlak , Titov , Dolgov , Lipshchin , Karamazov , Petrovova , Gleb , Petrosyan , Vsevolod ] , survivors2 ) ;
9471: LD_VAR 0 3
9475: PUSH
9476: LD_EXP 61
9480: PUSH
9481: LD_EXP 67
9485: PUSH
9486: LD_EXP 68
9490: PUSH
9491: LD_EXP 69
9495: PUSH
9496: LD_EXP 63
9500: PUSH
9501: LD_EXP 64
9505: PUSH
9506: LD_EXP 65
9510: PUSH
9511: LD_EXP 66
9515: PUSH
9516: LD_EXP 70
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: DIFF
9532: PPUSH
9533: LD_STRING survivors2
9535: PPUSH
9536: CALL_OW 38
// SaveCharacters ( sli_pryc diff [ Burlak , Titov , Dolgov , Lipshchin , Karamazov , Petrovova , Gleb , Petrosyan , Vsevolod ] , WithVsevolod ) ;
9540: LD_EXP 77
9544: PUSH
9545: LD_EXP 61
9549: PUSH
9550: LD_EXP 67
9554: PUSH
9555: LD_EXP 68
9559: PUSH
9560: LD_EXP 69
9564: PUSH
9565: LD_EXP 63
9569: PUSH
9570: LD_EXP 64
9574: PUSH
9575: LD_EXP 65
9579: PUSH
9580: LD_EXP 66
9584: PUSH
9585: LD_EXP 70
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: DIFF
9601: PPUSH
9602: LD_STRING WithVsevolod
9604: PPUSH
9605: CALL_OW 38
// convoy_06 := [ ] ;
9609: LD_ADDR_EXP 79
9613: PUSH
9614: EMPTY
9615: ST_TO_ADDR
// tmp_conv := FilterUnitsInArea ( ru_exit , [ [ f_occupied ] , [ f_type , unit_vehicle ] , [ f_side , you ] ] ) ^ FilterUnitsInArea ( ru_exit , [ [ f_not , [ f_occupied ] ] , [ f_type , unit_vehicle ] , [ f_side , you ] ] ) ;
9616: LD_ADDR_VAR 0 4
9620: PUSH
9621: LD_INT 21
9623: PPUSH
9624: LD_INT 59
9626: PUSH
9627: EMPTY
9628: LIST
9629: PUSH
9630: LD_INT 21
9632: PUSH
9633: LD_INT 2
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: LD_INT 22
9642: PUSH
9643: LD_EXP 1
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: LIST
9656: PPUSH
9657: CALL_OW 70
9661: PUSH
9662: LD_INT 21
9664: PPUSH
9665: LD_INT 3
9667: PUSH
9668: LD_INT 59
9670: PUSH
9671: EMPTY
9672: LIST
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 21
9680: PUSH
9681: LD_INT 2
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: LD_INT 22
9690: PUSH
9691: LD_EXP 1
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: LIST
9704: PPUSH
9705: CALL_OW 70
9709: ADD
9710: ST_TO_ADDR
// for i in tmp_conv do
9711: LD_ADDR_VAR 0 2
9715: PUSH
9716: LD_VAR 0 4
9720: PUSH
9721: FOR_IN
9722: IFFALSE 9861
// begin convoy_06 := convoy_06 ^ [ [ GetNation ( i ) , GetWeapon ( i ) , GetControl ( i ) , GetEngine ( i ) , GetChassis ( i ) , GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) , GetCargo ( i , mat_siberit ) ] ] ;
9724: LD_ADDR_EXP 79
9728: PUSH
9729: LD_EXP 79
9733: PUSH
9734: LD_VAR 0 2
9738: PPUSH
9739: CALL_OW 248
9743: PUSH
9744: LD_VAR 0 2
9748: PPUSH
9749: CALL_OW 264
9753: PUSH
9754: LD_VAR 0 2
9758: PPUSH
9759: CALL_OW 263
9763: PUSH
9764: LD_VAR 0 2
9768: PPUSH
9769: CALL_OW 262
9773: PUSH
9774: LD_VAR 0 2
9778: PPUSH
9779: CALL_OW 265
9783: PUSH
9784: LD_VAR 0 2
9788: PPUSH
9789: LD_INT 1
9791: PPUSH
9792: CALL_OW 289
9796: PUSH
9797: LD_VAR 0 2
9801: PPUSH
9802: LD_INT 2
9804: PPUSH
9805: CALL_OW 289
9809: PUSH
9810: LD_VAR 0 2
9814: PPUSH
9815: LD_INT 3
9817: PPUSH
9818: CALL_OW 289
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: PUSH
9833: EMPTY
9834: LIST
9835: ADD
9836: ST_TO_ADDR
// if ( convoy_06 + 0 ) = ( zustali + 0 ) then
9837: LD_EXP 79
9841: PUSH
9842: LD_INT 0
9844: PLUS
9845: PUSH
9846: LD_VAR 0 3
9850: PUSH
9851: LD_INT 0
9853: PLUS
9854: EQUAL
9855: IFFALSE 9859
// break ;
9857: GO 9861
// end ;
9859: GO 9721
9861: POP
9862: POP
// SaveVariable ( convoy_06 , Convoy_06 ) ;
9863: LD_EXP 79
9867: PPUSH
9868: LD_STRING Convoy_06
9870: PPUSH
9871: CALL_OW 39
// end ;
9875: LD_VAR 0 1
9879: RET
// export accar1 , accar2 , acman1 , acman2 ; export function nakladaky ; begin
9880: LD_INT 0
9882: PPUSH
// InitUc ;
9883: CALL_OW 18
// InitHc ;
9887: CALL_OW 19
// InitVc ;
9891: CALL_OW 20
// uc_side := ai ;
9895: LD_ADDR_OWVAR 20
9899: PUSH
9900: LD_EXP 6
9904: ST_TO_ADDR
// uc_nation := nation_american ;
9905: LD_ADDR_OWVAR 21
9909: PUSH
9910: LD_INT 1
9912: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
9913: LD_ADDR_OWVAR 37
9917: PUSH
9918: LD_INT 3
9920: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
9921: LD_ADDR_OWVAR 40
9925: PUSH
9926: LD_INT 12
9928: ST_TO_ADDR
// vc_control := control_manual ;
9929: LD_ADDR_OWVAR 38
9933: PUSH
9934: LD_INT 1
9936: ST_TO_ADDR
// vc_engine := engine_solar ;
9937: LD_ADDR_OWVAR 39
9941: PUSH
9942: LD_INT 2
9944: ST_TO_ADDR
// uc_direction := 3 ;
9945: LD_ADDR_OWVAR 24
9949: PUSH
9950: LD_INT 3
9952: ST_TO_ADDR
// vc_fuel_battery := 80 ;
9953: LD_ADDR_OWVAR 41
9957: PUSH
9958: LD_INT 80
9960: ST_TO_ADDR
// accar1 := CreateVehicle ;
9961: LD_ADDR_EXP 80
9965: PUSH
9966: CALL_OW 45
9970: ST_TO_ADDR
// accar2 := CreateVehicle ;
9971: LD_ADDR_EXP 81
9975: PUSH
9976: CALL_OW 45
9980: ST_TO_ADDR
// PrepareSoldier ( sex_male , 2 ) ;
9981: LD_INT 1
9983: PPUSH
9984: LD_INT 2
9986: PPUSH
9987: CALL_OW 381
// acman1 := CreateHuman ;
9991: LD_ADDR_EXP 82
9995: PUSH
9996: CALL_OW 44
10000: ST_TO_ADDR
// acman2 := CreateHuman ;
10001: LD_ADDR_EXP 83
10005: PUSH
10006: CALL_OW 44
10010: ST_TO_ADDR
// PlaceHumanInUnit ( acman1 , accar1 ) ;
10011: LD_EXP 82
10015: PPUSH
10016: LD_EXP 80
10020: PPUSH
10021: CALL_OW 52
// PlaceHumanInUnit ( acman2 , accar2 ) ;
10025: LD_EXP 83
10029: PPUSH
10030: LD_EXP 81
10034: PPUSH
10035: CALL_OW 52
// SetCargo ( [ accar1 , accar2 ] , mat_cans , 100 ) ;
10039: LD_EXP 80
10043: PUSH
10044: LD_EXP 81
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PPUSH
10053: LD_INT 1
10055: PPUSH
10056: LD_INT 100
10058: PPUSH
10059: CALL_OW 290
// PlaceUnitArea ( accar1 , vsevolod_in , false ) ;
10063: LD_EXP 80
10067: PPUSH
10068: LD_INT 16
10070: PPUSH
10071: LD_INT 0
10073: PPUSH
10074: CALL_OW 49
// PlaceUnitArea ( accar2 , vsevolod_in , false ) ;
10078: LD_EXP 81
10082: PPUSH
10083: LD_INT 16
10085: PPUSH
10086: LD_INT 0
10088: PPUSH
10089: CALL_OW 49
// end ;
10093: LD_VAR 0 1
10097: RET
// export rccar1 , rccar2 , rccar3 , rcman1 , rcman2 , rcman3 ; export function convoy ; begin
10098: LD_INT 0
10100: PPUSH
// InitUc ;
10101: CALL_OW 18
// InitHc ;
10105: CALL_OW 19
// InitVc ;
10109: CALL_OW 20
// uc_side := you ;
10113: LD_ADDR_OWVAR 20
10117: PUSH
10118: LD_EXP 1
10122: ST_TO_ADDR
// uc_nation := nation_russian ;
10123: LD_ADDR_OWVAR 21
10127: PUSH
10128: LD_INT 3
10130: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10131: LD_ADDR_OWVAR 37
10135: PUSH
10136: LD_INT 22
10138: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
10139: LD_ADDR_OWVAR 40
10143: PUSH
10144: LD_INT 51
10146: ST_TO_ADDR
// vc_control := control_manual ;
10147: LD_ADDR_OWVAR 38
10151: PUSH
10152: LD_INT 1
10154: ST_TO_ADDR
// vc_engine := engine_combustion ;
10155: LD_ADDR_OWVAR 39
10159: PUSH
10160: LD_INT 1
10162: ST_TO_ADDR
// uc_direction := 3 ;
10163: LD_ADDR_OWVAR 24
10167: PUSH
10168: LD_INT 3
10170: ST_TO_ADDR
// vc_fuel_battery := 60 ;
10171: LD_ADDR_OWVAR 41
10175: PUSH
10176: LD_INT 60
10178: ST_TO_ADDR
// rccar1 := CreateVehicle ;
10179: LD_ADDR_EXP 84
10183: PUSH
10184: CALL_OW 45
10188: ST_TO_ADDR
// rccar2 := CreateVehicle ;
10189: LD_ADDR_EXP 85
10193: PUSH
10194: CALL_OW 45
10198: ST_TO_ADDR
// rccar2 := CreateVehicle ;
10199: LD_ADDR_EXP 85
10203: PUSH
10204: CALL_OW 45
10208: ST_TO_ADDR
// PrepareSoldier ( sex_male , 3 ) ;
10209: LD_INT 1
10211: PPUSH
10212: LD_INT 3
10214: PPUSH
10215: CALL_OW 381
// rcman1 := CreateHuman ;
10219: LD_ADDR_EXP 87
10223: PUSH
10224: CALL_OW 44
10228: ST_TO_ADDR
// rcman2 := CreateHuman ;
10229: LD_ADDR_EXP 88
10233: PUSH
10234: CALL_OW 44
10238: ST_TO_ADDR
// rcman2 := CreateHuman ;
10239: LD_ADDR_EXP 88
10243: PUSH
10244: CALL_OW 44
10248: ST_TO_ADDR
// PlaceHumanInUnit ( rcman1 , rccar1 ) ;
10249: LD_EXP 87
10253: PPUSH
10254: LD_EXP 84
10258: PPUSH
10259: CALL_OW 52
// PlaceHumanInUnit ( rcman2 , rccar2 ) ;
10263: LD_EXP 88
10267: PPUSH
10268: LD_EXP 85
10272: PPUSH
10273: CALL_OW 52
// PlaceHumanInUnit ( rcman3 , rccar3 ) ;
10277: LD_EXP 89
10281: PPUSH
10282: LD_EXP 86
10286: PPUSH
10287: CALL_OW 52
// SetCargo ( [ rccar1 , rccar2 , rccar3 ] , mat_cans , 90 ) ;
10291: LD_EXP 84
10295: PUSH
10296: LD_EXP 85
10300: PUSH
10301: LD_EXP 86
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: LIST
10310: PPUSH
10311: LD_INT 1
10313: PPUSH
10314: LD_INT 90
10316: PPUSH
10317: CALL_OW 290
// PlaceUnitArea ( rccar1 , exit_a , false ) ;
10321: LD_EXP 84
10325: PPUSH
10326: LD_INT 20
10328: PPUSH
10329: LD_INT 0
10331: PPUSH
10332: CALL_OW 49
// PlaceUnitArea ( rccar2 , exit_a , false ) ;
10336: LD_EXP 85
10340: PPUSH
10341: LD_INT 20
10343: PPUSH
10344: LD_INT 0
10346: PPUSH
10347: CALL_OW 49
// PlaceUnitArea ( rccar3 , exit_a , false ) ;
10351: LD_EXP 86
10355: PPUSH
10356: LD_INT 20
10358: PPUSH
10359: LD_INT 0
10361: PPUSH
10362: CALL_OW 49
// end ; end_of_file
10366: LD_VAR 0 1
10370: RET
// export function get_x_best ( lidi , num , skill , mclass , idle ) ; var i , skills ; begin
10371: LD_INT 0
10373: PPUSH
10374: PPUSH
10375: PPUSH
// if mclass then
10376: LD_VAR 0 4
10380: IFFALSE 10412
// lidi := UnitFilter ( lidi , [ [ f_class , mclass ] ] ) ;
10382: LD_ADDR_VAR 0 1
10386: PUSH
10387: LD_VAR 0 1
10391: PPUSH
10392: LD_INT 25
10394: PUSH
10395: LD_VAR 0 4
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PUSH
10404: EMPTY
10405: LIST
10406: PPUSH
10407: CALL_OW 72
10411: ST_TO_ADDR
// skills := [ ] ;
10412: LD_ADDR_VAR 0 8
10416: PUSH
10417: EMPTY
10418: ST_TO_ADDR
// for i in lidi do
10419: LD_ADDR_VAR 0 7
10423: PUSH
10424: LD_VAR 0 1
10428: PUSH
10429: FOR_IN
10430: IFFALSE 10463
// skills := skills ^ [ GetSkill ( i , skill ) ] ;
10432: LD_ADDR_VAR 0 8
10436: PUSH
10437: LD_VAR 0 8
10441: PUSH
10442: LD_VAR 0 7
10446: PPUSH
10447: LD_VAR 0 3
10451: PPUSH
10452: CALL_OW 259
10456: PUSH
10457: EMPTY
10458: LIST
10459: ADD
10460: ST_TO_ADDR
10461: GO 10429
10463: POP
10464: POP
// lidi := SortListByListDesc ( lidi , skills ) ;
10465: LD_ADDR_VAR 0 1
10469: PUSH
10470: LD_VAR 0 1
10474: PPUSH
10475: LD_VAR 0 8
10479: PPUSH
10480: CALL_OW 77
10484: ST_TO_ADDR
// if num > lidi then
10485: LD_VAR 0 2
10489: PUSH
10490: LD_VAR 0 1
10494: GREATER
10495: IFFALSE 10511
// num := lidi + 0 ;
10497: LD_ADDR_VAR 0 2
10501: PUSH
10502: LD_VAR 0 1
10506: PUSH
10507: LD_INT 0
10509: PLUS
10510: ST_TO_ADDR
// i := 1 ;
10511: LD_ADDR_VAR 0 7
10515: PUSH
10516: LD_INT 1
10518: ST_TO_ADDR
// result := [ ] ;
10519: LD_ADDR_VAR 0 6
10523: PUSH
10524: EMPTY
10525: ST_TO_ADDR
// while i <= lidi and result < num do
10526: LD_VAR 0 7
10530: PUSH
10531: LD_VAR 0 1
10535: LESSEQUAL
10536: PUSH
10537: LD_VAR 0 6
10541: PUSH
10542: LD_VAR 0 2
10546: LESS
10547: AND
10548: IFFALSE 10641
// begin if idle then
10550: LD_VAR 0 5
10554: IFFALSE 10600
// begin if IsIdle ( lidi [ i ] ) then
10556: LD_VAR 0 1
10560: PUSH
10561: LD_VAR 0 7
10565: ARRAY
10566: PPUSH
10567: CALL_OW 316
10571: IFFALSE 10598
// result := result ^ [ lidi [ i ] ] ;
10573: LD_ADDR_VAR 0 6
10577: PUSH
10578: LD_VAR 0 6
10582: PUSH
10583: LD_VAR 0 1
10587: PUSH
10588: LD_VAR 0 7
10592: ARRAY
10593: PUSH
10594: EMPTY
10595: LIST
10596: ADD
10597: ST_TO_ADDR
// end else
10598: GO 10625
// result := result ^ [ lidi [ i ] ] ;
10600: LD_ADDR_VAR 0 6
10604: PUSH
10605: LD_VAR 0 6
10609: PUSH
10610: LD_VAR 0 1
10614: PUSH
10615: LD_VAR 0 7
10619: ARRAY
10620: PUSH
10621: EMPTY
10622: LIST
10623: ADD
10624: ST_TO_ADDR
// i := i + 1 ;
10625: LD_ADDR_VAR 0 7
10629: PUSH
10630: LD_VAR 0 7
10634: PUSH
10635: LD_INT 1
10637: PLUS
10638: ST_TO_ADDR
// end ;
10639: GO 10526
// end ;
10641: LD_VAR 0 6
10645: RET
// export function SayAny ( lidi , ident , side , sex , Hclass , index ) ; var kdo ; begin
10646: LD_INT 0
10648: PPUSH
10649: PPUSH
// kdo := WhoSayAny ( lidi , side , sex , Hclass , index ) ;
10650: LD_ADDR_VAR 0 8
10654: PUSH
10655: LD_VAR 0 1
10659: PPUSH
10660: LD_VAR 0 3
10664: PPUSH
10665: LD_VAR 0 4
10669: PPUSH
10670: LD_VAR 0 5
10674: PPUSH
10675: LD_VAR 0 6
10679: PPUSH
10680: CALL 10726 0 5
10684: ST_TO_ADDR
// if kdo then
10685: LD_VAR 0 8
10689: IFFALSE 10713
// result := Say ( kdo , ident ) else
10691: LD_ADDR_VAR 0 7
10695: PUSH
10696: LD_VAR 0 8
10700: PPUSH
10701: LD_VAR 0 2
10705: PPUSH
10706: CALL_OW 88
10710: ST_TO_ADDR
10711: GO 10721
// result := false ;
10713: LD_ADDR_VAR 0 7
10717: PUSH
10718: LD_INT 0
10720: ST_TO_ADDR
// end ;
10721: LD_VAR 0 7
10725: RET
// export function WhoSayAny ( lidi , side , sex , Hclass , index ) ; begin
10726: LD_INT 0
10728: PPUSH
// lidi := UnitFilter ( lidi , [ [ f_type , unit_human ] , [ f_side , side ] , f_not , [ f_nation , nation_nature ] ] ) ;
10729: LD_ADDR_VAR 0 1
10733: PUSH
10734: LD_VAR 0 1
10738: PPUSH
10739: LD_INT 21
10741: PUSH
10742: LD_INT 1
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PUSH
10749: LD_INT 22
10751: PUSH
10752: LD_VAR 0 2
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 3
10763: PUSH
10764: LD_INT 23
10766: PUSH
10767: LD_INT 0
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: PPUSH
10780: CALL_OW 72
10784: ST_TO_ADDR
// if sex <> 0 then
10785: LD_VAR 0 3
10789: PUSH
10790: LD_INT 0
10792: NONEQUAL
10793: IFFALSE 10822
// lidi := UnitFilter ( lidi , [ f_sex , sex ] ) ;
10795: LD_ADDR_VAR 0 1
10799: PUSH
10800: LD_VAR 0 1
10804: PPUSH
10805: LD_INT 26
10807: PUSH
10808: LD_VAR 0 3
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PPUSH
10817: CALL_OW 72
10821: ST_TO_ADDR
// if Hclass <> 0 then
10822: LD_VAR 0 4
10826: PUSH
10827: LD_INT 0
10829: NONEQUAL
10830: IFFALSE 10859
// lidi := UnitFilter ( lidi , [ f_class , Hclass ] ) ;
10832: LD_ADDR_VAR 0 1
10836: PUSH
10837: LD_VAR 0 1
10841: PPUSH
10842: LD_INT 25
10844: PUSH
10845: LD_VAR 0 4
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PPUSH
10854: CALL_OW 72
10858: ST_TO_ADDR
// if index <= 0 then
10859: LD_VAR 0 5
10863: PUSH
10864: LD_INT 0
10866: LESSEQUAL
10867: IFFALSE 10877
// index := 1 ;
10869: LD_ADDR_VAR 0 5
10873: PUSH
10874: LD_INT 1
10876: ST_TO_ADDR
// if lidi >= index then
10877: LD_VAR 0 1
10881: PUSH
10882: LD_VAR 0 5
10886: GREATEREQUAL
10887: IFFALSE 10907
// result := lidi [ index ] else
10889: LD_ADDR_VAR 0 6
10893: PUSH
10894: LD_VAR 0 1
10898: PUSH
10899: LD_VAR 0 5
10903: ARRAY
10904: ST_TO_ADDR
10905: GO 10915
// result := 0 ;
10907: LD_ADDR_VAR 0 6
10911: PUSH
10912: LD_INT 0
10914: ST_TO_ADDR
// end ;
10915: LD_VAR 0 6
10919: RET
// export function see_any ( strana , sez ) ; var i ; begin
10920: LD_INT 0
10922: PPUSH
10923: PPUSH
// result := [ ] ;
10924: LD_ADDR_VAR 0 3
10928: PUSH
10929: EMPTY
10930: ST_TO_ADDR
// for i in sez do
10931: LD_ADDR_VAR 0 4
10935: PUSH
10936: LD_VAR 0 2
10940: PUSH
10941: FOR_IN
10942: IFFALSE 10978
// if See ( strana , i ) then
10944: LD_VAR 0 1
10948: PPUSH
10949: LD_VAR 0 4
10953: PPUSH
10954: CALL_OW 292
10958: IFFALSE 10976
// begin result := result ^ i ;
10960: LD_ADDR_VAR 0 3
10964: PUSH
10965: LD_VAR 0 3
10969: PUSH
10970: LD_VAR 0 4
10974: ADD
10975: ST_TO_ADDR
// end ;
10976: GO 10941
10978: POP
10979: POP
// ; end ;
10980: LD_VAR 0 3
10984: RET
// export function TalkOn ; begin
10985: LD_INT 0
10987: PPUSH
// stop_talking := true ;
10988: LD_ADDR_OWVAR 56
10992: PUSH
10993: LD_INT 1
10995: ST_TO_ADDR
// end ;
10996: LD_VAR 0 1
11000: RET
// export function TalkOff ; begin
11001: LD_INT 0
11003: PPUSH
// stop_talking := false ;
11004: LD_ADDR_OWVAR 56
11008: PUSH
11009: LD_INT 0
11011: ST_TO_ADDR
// end ;
11012: LD_VAR 0 1
11016: RET
// export function FilterHumansInArea ( area , filter ) ; var inbase , i ; begin
11017: LD_INT 0
11019: PPUSH
11020: PPUSH
11021: PPUSH
// result := [ ] ;
11022: LD_ADDR_VAR 0 3
11026: PUSH
11027: EMPTY
11028: ST_TO_ADDR
// inbase := FilterUnitsInArea ( area , [ ] ) ;
11029: LD_ADDR_VAR 0 4
11033: PUSH
11034: LD_VAR 0 1
11038: PPUSH
11039: EMPTY
11040: PPUSH
11041: CALL_OW 70
11045: ST_TO_ADDR
// for i in inbase do
11046: LD_ADDR_VAR 0 5
11050: PUSH
11051: LD_VAR 0 4
11055: PUSH
11056: FOR_IN
11057: IFFALSE 11133
// begin if GetType ( i ) = unit_building or GetType ( i ) = unit_vehicle then
11059: LD_VAR 0 5
11063: PPUSH
11064: CALL_OW 247
11068: PUSH
11069: LD_INT 3
11071: EQUAL
11072: PUSH
11073: LD_VAR 0 5
11077: PPUSH
11078: CALL_OW 247
11082: PUSH
11083: LD_INT 2
11085: EQUAL
11086: OR
11087: IFFALSE 11112
// begin result := result ^ UnitsInside ( i ) ;
11089: LD_ADDR_VAR 0 3
11093: PUSH
11094: LD_VAR 0 3
11098: PUSH
11099: LD_VAR 0 5
11103: PPUSH
11104: CALL_OW 313
11108: ADD
11109: ST_TO_ADDR
// end else
11110: GO 11131
// begin result := result ^ [ i ] ;
11112: LD_ADDR_VAR 0 3
11116: PUSH
11117: LD_VAR 0 3
11121: PUSH
11122: LD_VAR 0 5
11126: PUSH
11127: EMPTY
11128: LIST
11129: ADD
11130: ST_TO_ADDR
// end ; end ;
11131: GO 11056
11133: POP
11134: POP
// result := UnitFilter ( result , filter ) ;
11135: LD_ADDR_VAR 0 3
11139: PUSH
11140: LD_VAR 0 3
11144: PPUSH
11145: LD_VAR 0 2
11149: PPUSH
11150: CALL_OW 72
11154: ST_TO_ADDR
// end ;
11155: LD_VAR 0 3
11159: RET
// export function inside_units ( uns ) ; var i ; begin
11160: LD_INT 0
11162: PPUSH
11163: PPUSH
// result := [ ] ;
11164: LD_ADDR_VAR 0 2
11168: PUSH
11169: EMPTY
11170: ST_TO_ADDR
// for i in uns do
11171: LD_ADDR_VAR 0 3
11175: PUSH
11176: LD_VAR 0 1
11180: PUSH
11181: FOR_IN
11182: IFFALSE 11207
// result := result ^ UnitsInside ( i ) ;
11184: LD_ADDR_VAR 0 2
11188: PUSH
11189: LD_VAR 0 2
11193: PUSH
11194: LD_VAR 0 3
11198: PPUSH
11199: CALL_OW 313
11203: ADD
11204: ST_TO_ADDR
11205: GO 11181
11207: POP
11208: POP
// end ;
11209: LD_VAR 0 2
11213: RET
// export function find_drivers ( cars , drivers , take_out ) ; var empty , free , i , konec ; begin
11214: LD_INT 0
11216: PPUSH
11217: PPUSH
11218: PPUSH
11219: PPUSH
11220: PPUSH
// cars := UnitFilter ( cars , [ f_alive ] ) union [ ] ;
11221: LD_ADDR_VAR 0 1
11225: PUSH
11226: LD_VAR 0 1
11230: PPUSH
11231: LD_INT 51
11233: PUSH
11234: EMPTY
11235: LIST
11236: PPUSH
11237: CALL_OW 72
11241: PUSH
11242: EMPTY
11243: UNION
11244: ST_TO_ADDR
// drivers := UnitFilter ( drivers , [ f_alive ] ) union [ ] ;
11245: LD_ADDR_VAR 0 2
11249: PUSH
11250: LD_VAR 0 2
11254: PPUSH
11255: LD_INT 51
11257: PUSH
11258: EMPTY
11259: LIST
11260: PPUSH
11261: CALL_OW 72
11265: PUSH
11266: EMPTY
11267: UNION
11268: ST_TO_ADDR
// for i in cars do
11269: LD_ADDR_VAR 0 7
11273: PUSH
11274: LD_VAR 0 1
11278: PUSH
11279: FOR_IN
11280: IFFALSE 11316
// if not IsDrivenBy ( i ) then
11282: LD_VAR 0 7
11286: PPUSH
11287: CALL_OW 311
11291: NOT
11292: IFFALSE 11314
// empty := add ( empty , i ) ;
11294: LD_ADDR_VAR 0 5
11298: PUSH
11299: LD_VAR 0 5
11303: PPUSH
11304: LD_VAR 0 7
11308: PPUSH
11309: CALL 11908 0 2
11313: ST_TO_ADDR
11314: GO 11279
11316: POP
11317: POP
// if take_out then
11318: LD_VAR 0 3
11322: IFFALSE 11381
// begin for i in drivers do
11324: LD_ADDR_VAR 0 7
11328: PUSH
11329: LD_VAR 0 2
11333: PUSH
11334: FOR_IN
11335: IFFALSE 11377
// if not ( IsInUnit ( i ) in cars ) then
11337: LD_VAR 0 7
11341: PPUSH
11342: CALL_OW 310
11346: PUSH
11347: LD_VAR 0 1
11351: IN
11352: NOT
11353: IFFALSE 11375
// free := add ( free , i ) ;
11355: LD_ADDR_VAR 0 6
11359: PUSH
11360: LD_VAR 0 6
11364: PPUSH
11365: LD_VAR 0 7
11369: PPUSH
11370: CALL 11908 0 2
11374: ST_TO_ADDR
11375: GO 11334
11377: POP
11378: POP
// end else
11379: GO 11430
// begin for i in drivers do
11381: LD_ADDR_VAR 0 7
11385: PUSH
11386: LD_VAR 0 2
11390: PUSH
11391: FOR_IN
11392: IFFALSE 11428
// if not IsInUnit ( i ) then
11394: LD_VAR 0 7
11398: PPUSH
11399: CALL_OW 310
11403: NOT
11404: IFFALSE 11426
// free := add ( free , i ) ;
11406: LD_ADDR_VAR 0 6
11410: PUSH
11411: LD_VAR 0 6
11415: PPUSH
11416: LD_VAR 0 7
11420: PPUSH
11421: CALL 11908 0 2
11425: ST_TO_ADDR
11426: GO 11391
11428: POP
11429: POP
// end ; result := cars diff empty ;
11430: LD_ADDR_VAR 0 4
11434: PUSH
11435: LD_VAR 0 1
11439: PUSH
11440: LD_VAR 0 5
11444: DIFF
11445: ST_TO_ADDR
// if empty <= free then
11446: LD_VAR 0 5
11450: PUSH
11451: LD_VAR 0 6
11455: LESSEQUAL
11456: IFFALSE 11470
// konec := empty else
11458: LD_ADDR_VAR 0 8
11462: PUSH
11463: LD_VAR 0 5
11467: ST_TO_ADDR
11468: GO 11480
// konec := free ;
11470: LD_ADDR_VAR 0 8
11474: PUSH
11475: LD_VAR 0 6
11479: ST_TO_ADDR
// for i := 1 to konec do
11480: LD_ADDR_VAR 0 7
11484: PUSH
11485: DOUBLE
11486: LD_INT 1
11488: DEC
11489: ST_TO_ADDR
11490: LD_VAR 0 8
11494: PUSH
11495: FOR_TO
11496: IFFALSE 11552
// begin ComEnterUnit ( free [ i ] , empty [ i ] ) ;
11498: LD_VAR 0 6
11502: PUSH
11503: LD_VAR 0 7
11507: ARRAY
11508: PPUSH
11509: LD_VAR 0 5
11513: PUSH
11514: LD_VAR 0 7
11518: ARRAY
11519: PPUSH
11520: CALL_OW 120
// result := add ( result , empty [ i ] ) ;
11524: LD_ADDR_VAR 0 4
11528: PUSH
11529: LD_VAR 0 4
11533: PPUSH
11534: LD_VAR 0 5
11538: PUSH
11539: LD_VAR 0 7
11543: ARRAY
11544: PPUSH
11545: CALL 11908 0 2
11549: ST_TO_ADDR
// end ;
11550: GO 11495
11552: POP
11553: POP
// end ;
11554: LD_VAR 0 4
11558: RET
// export function find_remotes ( cars , mechs , remotes ) ; var cas , i ; begin
11559: LD_INT 0
11561: PPUSH
11562: PPUSH
11563: PPUSH
// while remotes > mechs do
11564: LD_VAR 0 3
11568: PUSH
11569: LD_VAR 0 2
11573: GREATER
11574: IFFALSE 11590
// delete ( remotes , 1 ) ;
11576: LD_VAR 0 3
11580: PPUSH
11581: LD_INT 1
11583: PPUSH
11584: CALL_OW 3
11588: GO 11564
// for i := 1 to remotes do
11590: LD_ADDR_VAR 0 6
11594: PUSH
11595: DOUBLE
11596: LD_INT 1
11598: DEC
11599: ST_TO_ADDR
11600: LD_VAR 0 3
11604: PUSH
11605: FOR_TO
11606: IFFALSE 11636
// ComEnterUnit ( mechs [ i ] , remotes [ i ] ) ;
11608: LD_VAR 0 2
11612: PUSH
11613: LD_VAR 0 6
11617: ARRAY
11618: PPUSH
11619: LD_VAR 0 3
11623: PUSH
11624: LD_VAR 0 6
11628: ARRAY
11629: PPUSH
11630: CALL_OW 120
11634: GO 11605
11636: POP
11637: POP
// end ;
11638: LD_VAR 0 4
11642: RET
// export function wait_for_remotes ( cars , remotes , cas ) ; var c , unlinked , i ; begin
11643: LD_INT 0
11645: PPUSH
11646: PPUSH
11647: PPUSH
11648: PPUSH
// c := tick + cas ;
11649: LD_ADDR_VAR 0 5
11653: PUSH
11654: LD_OWVAR 1
11658: PUSH
11659: LD_VAR 0 3
11663: PLUS
11664: ST_TO_ADDR
// while tick < c and ( not ( inside_units ( remotes ) + 0 ) = remotes ) do
11665: LD_OWVAR 1
11669: PUSH
11670: LD_VAR 0 5
11674: LESS
11675: PUSH
11676: LD_VAR 0 2
11680: PPUSH
11681: CALL 11160 0 1
11685: PUSH
11686: LD_INT 0
11688: PLUS
11689: PUSH
11690: LD_VAR 0 2
11694: EQUAL
11695: NOT
11696: AND
11697: IFFALSE 11708
// wait ( 0 0$1 ) ;
11699: LD_INT 35
11701: PPUSH
11702: CALL_OW 67
11706: GO 11665
// unlinked := cars ;
11708: LD_ADDR_VAR 0 6
11712: PUSH
11713: LD_VAR 0 1
11717: ST_TO_ADDR
// for i in remotes do
11718: LD_ADDR_VAR 0 7
11722: PUSH
11723: LD_VAR 0 2
11727: PUSH
11728: FOR_IN
11729: IFFALSE 11778
// begin ComLinkTo ( unlinked , UnitsInside ( i ) ) ;
11731: LD_VAR 0 6
11735: PPUSH
11736: LD_VAR 0 7
11740: PPUSH
11741: CALL_OW 313
11745: PPUSH
11746: CALL_OW 135
// unlinked := unlinked diff UnitsLinked ( UnitsInside ( i ) ) ;
11750: LD_ADDR_VAR 0 6
11754: PUSH
11755: LD_VAR 0 6
11759: PUSH
11760: LD_VAR 0 7
11764: PPUSH
11765: CALL_OW 313
11769: PPUSH
11770: CALL_OW 432
11774: DIFF
11775: ST_TO_ADDR
// end ;
11776: GO 11728
11778: POP
11779: POP
// end ;
11780: LD_VAR 0 4
11784: RET
// export function wait_for_drivers ( cars , cas ) ; var i , vsichni_ready , k , pockat ; begin
11785: LD_INT 0
11787: PPUSH
11788: PPUSH
11789: PPUSH
11790: PPUSH
11791: PPUSH
// k := 0 ;
11792: LD_ADDR_VAR 0 6
11796: PUSH
11797: LD_INT 0
11799: ST_TO_ADDR
// pockat := tick + cas ;
11800: LD_ADDR_VAR 0 7
11804: PUSH
11805: LD_OWVAR 1
11809: PUSH
11810: LD_VAR 0 2
11814: PLUS
11815: ST_TO_ADDR
// while not vsichni_ready and tick < pockat do
11816: LD_VAR 0 5
11820: NOT
11821: PUSH
11822: LD_OWVAR 1
11826: PUSH
11827: LD_VAR 0 7
11831: LESS
11832: AND
11833: IFFALSE 11903
// begin vsichni_ready := true ;
11835: LD_ADDR_VAR 0 5
11839: PUSH
11840: LD_INT 1
11842: ST_TO_ADDR
// k := k + 1 ;
11843: LD_ADDR_VAR 0 6
11847: PUSH
11848: LD_VAR 0 6
11852: PUSH
11853: LD_INT 1
11855: PLUS
11856: ST_TO_ADDR
// for i in cars do
11857: LD_ADDR_VAR 0 4
11861: PUSH
11862: LD_VAR 0 1
11866: PUSH
11867: FOR_IN
11868: IFFALSE 11892
// if not IsDrivenBy ( i ) then
11870: LD_VAR 0 4
11874: PPUSH
11875: CALL_OW 311
11879: NOT
11880: IFFALSE 11890
// vsichni_ready := false ;
11882: LD_ADDR_VAR 0 5
11886: PUSH
11887: LD_INT 0
11889: ST_TO_ADDR
11890: GO 11867
11892: POP
11893: POP
// wait ( 0 0$1.0 ) ;
11894: LD_INT 35
11896: PPUSH
11897: CALL_OW 67
// end ;
11901: GO 11816
// end ;
11903: LD_VAR 0 3
11907: RET
// export function add ( list , list1 ) ; begin
11908: LD_INT 0
11910: PPUSH
// if list = 0 then
11911: LD_VAR 0 1
11915: PUSH
11916: LD_INT 0
11918: EQUAL
11919: IFFALSE 11928
// list := [ ] ;
11921: LD_ADDR_VAR 0 1
11925: PUSH
11926: EMPTY
11927: ST_TO_ADDR
// if list1 = 0 then
11928: LD_VAR 0 2
11932: PUSH
11933: LD_INT 0
11935: EQUAL
11936: IFFALSE 11945
// list1 := [ ] ;
11938: LD_ADDR_VAR 0 2
11942: PUSH
11943: EMPTY
11944: ST_TO_ADDR
// result := list ^ list1 ;
11945: LD_ADDR_VAR 0 3
11949: PUSH
11950: LD_VAR 0 1
11954: PUSH
11955: LD_VAR 0 2
11959: ADD
11960: ST_TO_ADDR
// end ;
11961: LD_VAR 0 3
11965: RET
// export function take_x ( list , x ) ; var i , r ; begin
11966: LD_INT 0
11968: PPUSH
11969: PPUSH
11970: PPUSH
// r := [ ] ;
11971: LD_ADDR_VAR 0 5
11975: PUSH
11976: EMPTY
11977: ST_TO_ADDR
// for i := 1 to x do
11978: LD_ADDR_VAR 0 4
11982: PUSH
11983: DOUBLE
11984: LD_INT 1
11986: DEC
11987: ST_TO_ADDR
11988: LD_VAR 0 2
11992: PUSH
11993: FOR_TO
11994: IFFALSE 12023
// r := r ^ [ list [ i ] ] ;
11996: LD_ADDR_VAR 0 5
12000: PUSH
12001: LD_VAR 0 5
12005: PUSH
12006: LD_VAR 0 1
12010: PUSH
12011: LD_VAR 0 4
12015: ARRAY
12016: PUSH
12017: EMPTY
12018: LIST
12019: ADD
12020: ST_TO_ADDR
12021: GO 11993
12023: POP
12024: POP
// result := r ;
12025: LD_ADDR_VAR 0 3
12029: PUSH
12030: LD_VAR 0 5
12034: ST_TO_ADDR
// end ;
12035: LD_VAR 0 3
12039: RET
// export hinty_co_byli ; export function MyHint ( ident ) ; begin
12040: LD_INT 0
12042: PPUSH
// if not hinty_co_byli then
12043: LD_EXP 90
12047: NOT
12048: IFFALSE 12057
// hinty_co_byli := [ ] ;
12050: LD_ADDR_EXP 90
12054: PUSH
12055: EMPTY
12056: ST_TO_ADDR
// if not ( ident in hinty_co_byli ) then
12057: LD_VAR 0 1
12061: PUSH
12062: LD_EXP 90
12066: IN
12067: NOT
12068: IFFALSE 12095
// begin hinty_co_byli := hinty_co_byli ^ ident ;
12070: LD_ADDR_EXP 90
12074: PUSH
12075: LD_EXP 90
12079: PUSH
12080: LD_VAR 0 1
12084: ADD
12085: ST_TO_ADDR
// Hint ( ident ) ;
12086: LD_VAR 0 1
12090: PPUSH
12091: CALL_OW 339
// end ; end ;
12095: LD_VAR 0 2
12099: RET
// export function BlockMarchNorth ; var i , x , y ; begin
12100: LD_INT 0
12102: PPUSH
12103: PPUSH
12104: PPUSH
12105: PPUSH
// for i in FilterUnitsInArea ( block_march , [ f_side , you ] ) do
12106: LD_ADDR_VAR 0 2
12110: PUSH
12111: LD_INT 30
12113: PPUSH
12114: LD_INT 22
12116: PUSH
12117: LD_EXP 1
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PPUSH
12126: CALL_OW 70
12130: PUSH
12131: FOR_IN
12132: IFFALSE 12193
// begin x = GetX ( i ) ;
12134: LD_ADDR_VAR 0 3
12138: PUSH
12139: LD_VAR 0 2
12143: PPUSH
12144: CALL_OW 250
12148: ST_TO_ADDR
// y = GetY ( i ) ;
12149: LD_ADDR_VAR 0 4
12153: PUSH
12154: LD_VAR 0 2
12158: PPUSH
12159: CALL_OW 251
12163: ST_TO_ADDR
// ComMoveXY ( i , x + 3 , y + 5 ) ;
12164: LD_VAR 0 2
12168: PPUSH
12169: LD_VAR 0 3
12173: PUSH
12174: LD_INT 3
12176: PLUS
12177: PPUSH
12178: LD_VAR 0 4
12182: PUSH
12183: LD_INT 5
12185: PLUS
12186: PPUSH
12187: CALL_OW 111
// end ;
12191: GO 12131
12193: POP
12194: POP
// end ;
12195: LD_VAR 0 1
12199: RET
// export function DepotWithSiberite ; var i , your_depots ; begin
12200: LD_INT 0
12202: PPUSH
12203: PPUSH
12204: PPUSH
// your_depots = FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12205: LD_ADDR_VAR 0 3
12209: PUSH
12210: LD_INT 22
12212: PUSH
12213: LD_EXP 1
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PUSH
12222: LD_INT 2
12224: PUSH
12225: LD_INT 30
12227: PUSH
12228: LD_INT 0
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PUSH
12235: LD_INT 30
12237: PUSH
12238: LD_INT 1
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: LIST
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PPUSH
12254: CALL_OW 69
12258: ST_TO_ADDR
// for i in your_depots do
12259: LD_ADDR_VAR 0 2
12263: PUSH
12264: LD_VAR 0 3
12268: PUSH
12269: FOR_IN
12270: IFFALSE 12305
// begin if GetResourceType ( GetBase ( i ) , mat_siberit ) > 0 then
12272: LD_VAR 0 2
12276: PPUSH
12277: CALL_OW 274
12281: PPUSH
12282: LD_INT 3
12284: PPUSH
12285: CALL_OW 275
12289: PUSH
12290: LD_INT 0
12292: GREATER
12293: IFFALSE 12303
// begin result = true ;
12295: LD_ADDR_VAR 0 1
12299: PUSH
12300: LD_INT 1
12302: ST_TO_ADDR
// end ; end ;
12303: GO 12269
12305: POP
12306: POP
// end ;
12307: LD_VAR 0 1
12311: RET
// export function AttackVehicles ( side , vehicles ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
12312: LD_INT 0
12314: PPUSH
12315: PPUSH
12316: PPUSH
12317: PPUSH
12318: PPUSH
12319: PPUSH
12320: PPUSH
// if vehicles > 0 then
12321: LD_VAR 0 2
12325: PUSH
12326: LD_INT 0
12328: GREATER
12329: IFFALSE 12565
// repeat wait ( 0 0$1 ) ;
12331: LD_INT 35
12333: PPUSH
12334: CALL_OW 67
// vehiclesOK = UnitFilter ( vehicles , [ f_lives , 600 ] ) ;
12338: LD_ADDR_VAR 0 6
12342: PUSH
12343: LD_VAR 0 2
12347: PPUSH
12348: LD_INT 24
12350: PUSH
12351: LD_INT 600
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PPUSH
12358: CALL_OW 72
12362: ST_TO_ADDR
// for j in vehiclesOK do
12363: LD_ADDR_VAR 0 5
12367: PUSH
12368: LD_VAR 0 6
12372: PUSH
12373: FOR_IN
12374: IFFALSE 12553
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , side ] ] ) , j ) ;
12376: LD_ADDR_VAR 0 7
12380: PUSH
12381: LD_INT 22
12383: PUSH
12384: LD_VAR 0 1
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: EMPTY
12394: LIST
12395: PPUSH
12396: CALL_OW 69
12400: PPUSH
12401: LD_VAR 0 5
12405: PPUSH
12406: CALL_OW 74
12410: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
12411: LD_ADDR_VAR 0 8
12415: PUSH
12416: LD_INT 22
12418: PUSH
12419: LD_VAR 0 1
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PUSH
12428: LD_INT 2
12430: PUSH
12431: LD_INT 59
12433: PUSH
12434: EMPTY
12435: LIST
12436: PUSH
12437: LD_INT 21
12439: PUSH
12440: LD_INT 1
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: LD_INT 21
12449: PUSH
12450: LD_INT 2
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PUSH
12467: EMPTY
12468: LIST
12469: PPUSH
12470: CALL_OW 69
12474: PPUSH
12475: LD_VAR 0 5
12479: PPUSH
12480: CALL_OW 74
12484: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
12485: LD_VAR 0 5
12489: PPUSH
12490: LD_VAR 0 7
12494: PPUSH
12495: CALL_OW 296
12499: PUSH
12500: LD_INT 8
12502: PLUS
12503: PUSH
12504: LD_VAR 0 5
12508: PPUSH
12509: LD_VAR 0 8
12513: PPUSH
12514: CALL_OW 296
12518: LESS
12519: IFFALSE 12537
// ComAttackUnit ( j , target1 ) else
12521: LD_VAR 0 5
12525: PPUSH
12526: LD_VAR 0 7
12530: PPUSH
12531: CALL_OW 115
12535: GO 12551
// ComAttackUnit ( j , target2 ) ;
12537: LD_VAR 0 5
12541: PPUSH
12542: LD_VAR 0 8
12546: PPUSH
12547: CALL_OW 115
// end ;
12551: GO 12373
12553: POP
12554: POP
// until vehiclesOK = 0 ;
12555: LD_VAR 0 6
12559: PUSH
12560: LD_INT 0
12562: EQUAL
12563: IFFALSE 12331
// end ; end_of_file
12565: LD_VAR 0 3
12569: RET
// every 0 0$55 trigger vsevolod_vstoupil and not VsevolodSaved do var tmp ;
12570: LD_EXP 11
12574: PUSH
12575: LD_EXP 56
12579: NOT
12580: AND
12581: IFFALSE 12793
12583: GO 12585
12585: DISABLE
12586: LD_INT 0
12588: PPUSH
// begin while tmp <= 2 do
12589: LD_VAR 0 1
12593: PUSH
12594: LD_INT 2
12596: LESSEQUAL
12597: IFFALSE 12660
// begin tmp := UnitFilter ( attack , [ [ f_inarea , top_attack ] , [ f_side , ai ] , [ f_control , control_remote ] ] ) ;
12599: LD_ADDR_VAR 0 1
12603: PUSH
12604: LD_EXP 138
12608: PPUSH
12609: LD_INT 95
12611: PUSH
12612: LD_INT 23
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: PUSH
12619: LD_INT 22
12621: PUSH
12622: LD_EXP 6
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 33
12633: PUSH
12634: LD_INT 2
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: LIST
12645: PPUSH
12646: CALL_OW 72
12650: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12651: LD_INT 35
12653: PPUSH
12654: CALL_OW 67
// end ;
12658: GO 12589
// if tmp > 1 then
12660: LD_VAR 0 1
12664: PUSH
12665: LD_INT 1
12667: GREATER
12668: IFFALSE 12722
// if difficulty > 1 then
12670: LD_OWVAR 67
12674: PUSH
12675: LD_INT 1
12677: GREATER
12678: IFFALSE 12706
// zbytek := tmp [ 1 ] ^ tmp [ 2 ] else
12680: LD_ADDR_EXP 91
12684: PUSH
12685: LD_VAR 0 1
12689: PUSH
12690: LD_INT 1
12692: ARRAY
12693: PUSH
12694: LD_VAR 0 1
12698: PUSH
12699: LD_INT 2
12701: ARRAY
12702: ADD
12703: ST_TO_ADDR
12704: GO 12720
// zbytek := tmp [ 1 ] else
12706: LD_ADDR_EXP 91
12710: PUSH
12711: LD_VAR 0 1
12715: PUSH
12716: LD_INT 1
12718: ARRAY
12719: ST_TO_ADDR
12720: GO 12732
// zbytek := tmp ;
12722: LD_ADDR_EXP 91
12726: PUSH
12727: LD_VAR 0 1
12731: ST_TO_ADDR
// if tick > ( ( vsevolod_vstoupil + kolik_ma_vsevolod_casu ) - ( 2 2$0 * Vsevolod_uderna_group ) ) then
12732: LD_OWVAR 1
12736: PUSH
12737: LD_EXP 11
12741: PUSH
12742: LD_EXP 33
12746: PLUS
12747: PUSH
12748: LD_INT 4200
12750: PUSH
12751: LD_EXP 12
12755: MUL
12756: MINUS
12757: GREATER
12758: IFFALSE 12783
// ComExitBuilding ( Vsevolod_uderna_group [ Rand ( 1 , Vsevolod_uderna_group ) ] ) ;
12760: LD_EXP 12
12764: PUSH
12765: LD_INT 1
12767: PPUSH
12768: LD_EXP 12
12772: PPUSH
12773: CALL_OW 12
12777: ARRAY
12778: PPUSH
12779: CALL_OW 122
// RaiseSailEvent ( f_vsevolod_utok ) ;
12783: CALL 14755 0 0
12787: PPUSH
12788: CALL_OW 427
// enable ;
12792: ENABLE
// end ;
12793: PPOPN 1
12795: END
// every 0 0$2 trigger ( vsevolod_vstoupil and tick > ( vsevolod_vstoupil + kolik_ma_vsevolod_casu ) ) do var i ;
12796: LD_EXP 11
12800: PUSH
12801: LD_OWVAR 1
12805: PUSH
12806: LD_EXP 11
12810: PUSH
12811: LD_EXP 33
12815: PLUS
12816: GREATER
12817: AND
12818: IFFALSE 12965
12820: GO 12822
12822: DISABLE
12823: LD_INT 0
12825: PPUSH
// begin while IsLive ( Vsevolod ) and not VsevolodSaved do
12826: LD_EXP 70
12830: PPUSH
12831: CALL_OW 300
12835: PUSH
12836: LD_EXP 56
12840: NOT
12841: AND
12842: IFFALSE 12965
// begin ComExitBuilding ( Vsevolod_uderna_group ^ [ Vsevolod ] ) ;
12844: LD_EXP 12
12848: PUSH
12849: LD_EXP 70
12853: PUSH
12854: EMPTY
12855: LIST
12856: ADD
12857: PPUSH
12858: CALL_OW 122
// for i in Vsevolod_uderna_group ^ [ Vsevolod ] do
12862: LD_ADDR_VAR 0 1
12866: PUSH
12867: LD_EXP 12
12871: PUSH
12872: LD_EXP 70
12876: PUSH
12877: EMPTY
12878: LIST
12879: ADD
12880: PUSH
12881: FOR_IN
12882: IFFALSE 12900
// PriorityAttack ( ai , i ) ;
12884: LD_EXP 6
12888: PPUSH
12889: LD_VAR 0 1
12893: PPUSH
12894: CALL_OW 470
12898: GO 12881
12900: POP
12901: POP
// zbytek := FilterUnitsInArea ( top_attack , [ [ f_side , ai ] , [ f_control , control_remote ] ] ) isect attack ;
12902: LD_ADDR_EXP 91
12906: PUSH
12907: LD_INT 23
12909: PPUSH
12910: LD_INT 22
12912: PUSH
12913: LD_EXP 6
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: PUSH
12922: LD_INT 33
12924: PUSH
12925: LD_INT 2
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: PPUSH
12936: CALL_OW 70
12940: PUSH
12941: LD_EXP 138
12945: ISECT
12946: ST_TO_ADDR
// RaiseSailEvent ( f_vsevolod_final_utok ) ;
12947: CALL 15091 0 0
12951: PPUSH
12952: CALL_OW 427
// wait ( 0 0$30 ) ;
12956: LD_INT 1050
12958: PPUSH
12959: CALL_OW 67
// end ;
12963: GO 12826
// end ;
12965: PPOPN 1
12967: END
// export zbytek ; every 0 0$10 trigger ovsyenkotaken and tick > ( ovsyenkotaken + cas_prvniho_utoku ) and ( ( tick > 20 20$0 and attack >= 3 ) or attack >= 4 ) do var i , max ;
12968: LD_EXP 14
12972: PUSH
12973: LD_OWVAR 1
12977: PUSH
12978: LD_EXP 14
12982: PUSH
12983: LD_EXP 32
12987: PLUS
12988: GREATER
12989: AND
12990: PUSH
12991: LD_OWVAR 1
12995: PUSH
12996: LD_INT 42000
12998: GREATER
12999: PUSH
13000: LD_EXP 138
13004: PUSH
13005: LD_INT 3
13007: GREATEREQUAL
13008: AND
13009: PUSH
13010: LD_EXP 138
13014: PUSH
13015: LD_INT 4
13017: GREATEREQUAL
13018: OR
13019: AND
13020: IFFALSE 13227
13022: GO 13024
13024: DISABLE
13025: LD_INT 0
13027: PPUSH
13028: PPUSH
// begin zbytek := [ ] ;
13029: LD_ADDR_EXP 91
13033: PUSH
13034: EMPTY
13035: ST_TO_ADDR
// max := utoci_max ;
13036: LD_ADDR_VAR 0 2
13040: PUSH
13041: LD_EXP 39
13045: ST_TO_ADDR
// if max > attack then
13046: LD_VAR 0 2
13050: PUSH
13051: LD_EXP 138
13055: GREATER
13056: IFFALSE 13072
// max := attack + 0 ;
13058: LD_ADDR_VAR 0 2
13062: PUSH
13063: LD_EXP 138
13067: PUSH
13068: LD_INT 0
13070: PLUS
13071: ST_TO_ADDR
// for i := 1 to max do
13072: LD_ADDR_VAR 0 1
13076: PUSH
13077: DOUBLE
13078: LD_INT 1
13080: DEC
13081: ST_TO_ADDR
13082: LD_VAR 0 2
13086: PUSH
13087: FOR_TO
13088: IFFALSE 13114
// zbytek := zbytek ^ attack [ i ] ;
13090: LD_ADDR_EXP 91
13094: PUSH
13095: LD_EXP 91
13099: PUSH
13100: LD_EXP 138
13104: PUSH
13105: LD_VAR 0 1
13109: ARRAY
13110: ADD
13111: ST_TO_ADDR
13112: GO 13087
13114: POP
13115: POP
// ComReturn ( mec ) ;
13116: LD_EXP 125
13120: PPUSH
13121: CALL_OW 144
// case Rand ( 1 , 4 ) of 1 :
13125: LD_INT 1
13127: PPUSH
13128: LD_INT 4
13130: PPUSH
13131: CALL_OW 12
13135: PUSH
13136: LD_INT 1
13138: DOUBLE
13139: EQUAL
13140: IFTRUE 13144
13142: GO 13156
13144: POP
// RaiseSailEvent ( normal1_utok ) ; 2 :
13145: LD_EXP 24
13149: PPUSH
13150: CALL_OW 427
13154: GO 13217
13156: LD_INT 2
13158: DOUBLE
13159: EQUAL
13160: IFTRUE 13164
13162: GO 13176
13164: POP
// RaiseSailEvent ( normal2_utok ) ; 3 :
13165: LD_EXP 25
13169: PPUSH
13170: CALL_OW 427
13174: GO 13217
13176: LD_INT 3
13178: DOUBLE
13179: EQUAL
13180: IFTRUE 13184
13182: GO 13196
13184: POP
// RaiseSailEvent ( normal3_utok ) ; 4 :
13185: LD_EXP 26
13189: PPUSH
13190: CALL_OW 427
13194: GO 13217
13196: LD_INT 4
13198: DOUBLE
13199: EQUAL
13200: IFTRUE 13204
13202: GO 13216
13204: POP
// RaiseSailEvent ( normal4_utok ) ; end ;
13205: LD_EXP 27
13209: PPUSH
13210: CALL_OW 427
13214: GO 13217
13216: POP
// wait ( cas_mezi_utoky ) ;
13217: LD_EXP 31
13221: PPUSH
13222: CALL_OW 67
// enable ;
13226: ENABLE
// end ;
13227: PPOPN 2
13229: END
// export rAtt1 , idAtt1 , toAtt1 ; every 0 0$1 do var i , a ;
13230: GO 13232
13232: DISABLE
13233: LD_INT 0
13235: PPUSH
13236: PPUSH
// begin rAtt1 := McRegistry ( ai , [ [ mc_reg_refresh_time , 0 0$2 ] , [ mc_reg_area_to_guard , mc_attack ] , [ mc_reg_area_to_protect , def_base3 ] , mc_reg_only_important ] ) ;
13237: LD_ADDR_EXP 92
13241: PUSH
13242: LD_EXP 6
13246: PPUSH
13247: LD_INT 1
13249: PUSH
13250: LD_INT 70
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PUSH
13257: LD_INT 2
13259: PUSH
13260: LD_INT 26
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: LD_INT 3
13269: PUSH
13270: LD_INT 18
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PUSH
13277: LD_INT 8
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PPUSH
13286: CALL_OW 399
13290: ST_TO_ADDR
// idAtt1 := McAttack ( 5 , rAtt1 , toAtt1 , [ mc_def_advantage , mcatt_difficulty ] ) ;
13291: LD_ADDR_EXP 93
13295: PUSH
13296: LD_INT 5
13298: PPUSH
13299: LD_EXP 92
13303: PPUSH
13304: LD_EXP 94
13308: PPUSH
13309: LD_INT 1
13311: PUSH
13312: LD_EXP 17
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: PPUSH
13321: CALL_OW 402
13325: ST_TO_ADDR
// end ;
13326: PPOPN 2
13328: END
// every 0 0$2 do
13329: GO 13331
13331: DISABLE
// begin toAtt1 := UnitFilter ( attack , [ [ f_inarea , mc_attack ] , [ f_side , ai ] ] ) ;
13332: LD_ADDR_EXP 94
13336: PUSH
13337: LD_EXP 138
13341: PPUSH
13342: LD_INT 95
13344: PUSH
13345: LD_INT 26
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: PUSH
13352: LD_INT 22
13354: PUSH
13355: LD_EXP 6
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: PPUSH
13368: CALL_OW 72
13372: ST_TO_ADDR
// if OvsyenkoTaken then
13373: LD_EXP 14
13377: IFFALSE 13393
// AddMcUnits ( idAtt1 , toAtt1 ) ;
13379: LD_EXP 93
13383: PPUSH
13384: LD_EXP 94
13388: PPUSH
13389: CALL_OW 390
// enable ;
13393: ENABLE
// end ;
13394: END
// export function f_normal1_utok ; var path , i ; begin
13395: LD_INT 0
13397: PPUSH
13398: PPUSH
13399: PPUSH
// path := [ [ 66 , 86 ] , [ 91 , 95 ] ] ;
13400: LD_ADDR_VAR 0 2
13404: PUSH
13405: LD_INT 66
13407: PUSH
13408: LD_INT 86
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 91
13417: PUSH
13418: LD_INT 95
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: ST_TO_ADDR
// find_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) , false ) ;
13429: LD_EXP 91
13433: PPUSH
13434: LD_INT 3
13436: PUSH
13437: LD_INT 33
13439: PUSH
13440: LD_INT 2
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PPUSH
13451: CALL_OW 72
13455: PPUSH
13456: LD_INT 22
13458: PUSH
13459: LD_EXP 6
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: PUSH
13468: LD_INT 25
13470: PUSH
13471: LD_INT 1
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PPUSH
13482: CALL_OW 69
13486: PPUSH
13487: LD_INT 0
13489: PPUSH
13490: CALL 11214 0 3
// find_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) ) ;
13494: LD_EXP 91
13498: PPUSH
13499: LD_INT 33
13501: PUSH
13502: LD_INT 2
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: PUSH
13509: EMPTY
13510: LIST
13511: PPUSH
13512: CALL_OW 72
13516: PPUSH
13517: LD_INT 22
13519: PUSH
13520: LD_EXP 6
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: PUSH
13529: LD_INT 25
13531: PUSH
13532: LD_INT 3
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PPUSH
13543: CALL_OW 69
13547: PPUSH
13548: LD_INT 34
13550: PUSH
13551: LD_INT 30
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: PUSH
13558: EMPTY
13559: LIST
13560: PPUSH
13561: CALL_OW 69
13565: PPUSH
13566: CALL 11559 0 3
// wait_for_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , 0 0$30 ) ;
13570: LD_EXP 91
13574: PPUSH
13575: LD_INT 3
13577: PUSH
13578: LD_INT 33
13580: PUSH
13581: LD_INT 2
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PPUSH
13592: CALL_OW 72
13596: PPUSH
13597: LD_INT 1050
13599: PPUSH
13600: CALL 11785 0 2
// wait_for_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) , 0 0$30 ) ;
13604: LD_EXP 91
13608: PPUSH
13609: LD_INT 33
13611: PUSH
13612: LD_INT 2
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: PUSH
13619: EMPTY
13620: LIST
13621: PPUSH
13622: CALL_OW 72
13626: PPUSH
13627: LD_INT 34
13629: PUSH
13630: LD_INT 30
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: PUSH
13637: EMPTY
13638: LIST
13639: PPUSH
13640: CALL_OW 69
13644: PPUSH
13645: LD_INT 1050
13647: PPUSH
13648: CALL 11643 0 3
// ComStop ( zbytek ) ;
13652: LD_EXP 91
13656: PPUSH
13657: CALL_OW 141
// AttackVehicles ( 3 , zbytek ) ;
13661: LD_INT 3
13663: PPUSH
13664: LD_EXP 91
13668: PPUSH
13669: CALL 12312 0 2
// if not byl_hint_PA then
13673: LD_EXP 95
13677: NOT
13678: IFFALSE 13719
// begin while not ContactTime ( [ ai ] ) do
13680: LD_EXP 6
13684: PUSH
13685: EMPTY
13686: LIST
13687: PPUSH
13688: CALL_OW 462
13692: NOT
13693: IFFALSE 13704
// wait ( 0 0$1 ) ;
13695: LD_INT 35
13697: PPUSH
13698: CALL_OW 67
13702: GO 13680
// MyHint ( PriorityAttacks ) ;
13704: LD_STRING PriorityAttacks
13706: PPUSH
13707: CALL 12040 0 1
// byl_hint_PA := true ;
13711: LD_ADDR_EXP 95
13715: PUSH
13716: LD_INT 1
13718: ST_TO_ADDR
// end ; end ;
13719: LD_VAR 0 1
13723: RET
// export byl_hint_PA ; export function f_normal2_utok ; var path , i ; begin
13724: LD_INT 0
13726: PPUSH
13727: PPUSH
13728: PPUSH
// path := [ [ 66 , 86 ] , [ 109 , 128 ] , [ 91 , 95 ] ] ;
13729: LD_ADDR_VAR 0 2
13733: PUSH
13734: LD_INT 66
13736: PUSH
13737: LD_INT 86
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: LD_INT 109
13746: PUSH
13747: LD_INT 128
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: PUSH
13754: LD_INT 91
13756: PUSH
13757: LD_INT 95
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: LIST
13768: ST_TO_ADDR
// find_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) , false ) ;
13769: LD_EXP 91
13773: PPUSH
13774: LD_INT 3
13776: PUSH
13777: LD_INT 33
13779: PUSH
13780: LD_INT 2
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: PPUSH
13791: CALL_OW 72
13795: PPUSH
13796: LD_INT 22
13798: PUSH
13799: LD_EXP 6
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PUSH
13808: LD_INT 25
13810: PUSH
13811: LD_INT 1
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PPUSH
13822: CALL_OW 69
13826: PPUSH
13827: LD_INT 0
13829: PPUSH
13830: CALL 11214 0 3
// find_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) ) ;
13834: LD_EXP 91
13838: PPUSH
13839: LD_INT 33
13841: PUSH
13842: LD_INT 2
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: EMPTY
13850: LIST
13851: PPUSH
13852: CALL_OW 72
13856: PPUSH
13857: LD_INT 22
13859: PUSH
13860: LD_EXP 6
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: PUSH
13869: LD_INT 25
13871: PUSH
13872: LD_INT 3
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PPUSH
13883: CALL_OW 69
13887: PPUSH
13888: LD_INT 34
13890: PUSH
13891: LD_INT 30
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PUSH
13898: EMPTY
13899: LIST
13900: PPUSH
13901: CALL_OW 69
13905: PPUSH
13906: CALL 11559 0 3
// wait_for_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , 0 0$30 ) ;
13910: LD_EXP 91
13914: PPUSH
13915: LD_INT 3
13917: PUSH
13918: LD_INT 33
13920: PUSH
13921: LD_INT 2
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: PUSH
13928: EMPTY
13929: LIST
13930: LIST
13931: PPUSH
13932: CALL_OW 72
13936: PPUSH
13937: LD_INT 1050
13939: PPUSH
13940: CALL 11785 0 2
// wait_for_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) , 0 0$30 ) ;
13944: LD_EXP 91
13948: PPUSH
13949: LD_INT 33
13951: PUSH
13952: LD_INT 2
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PUSH
13959: EMPTY
13960: LIST
13961: PPUSH
13962: CALL_OW 72
13966: PPUSH
13967: LD_INT 34
13969: PUSH
13970: LD_INT 30
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: PUSH
13977: EMPTY
13978: LIST
13979: PPUSH
13980: CALL_OW 69
13984: PPUSH
13985: LD_INT 1050
13987: PPUSH
13988: CALL 11643 0 3
// ComStop ( zbytek ) ;
13992: LD_EXP 91
13996: PPUSH
13997: CALL_OW 141
// AttackVehicles ( 3 , zbytek ) ;
14001: LD_INT 3
14003: PPUSH
14004: LD_EXP 91
14008: PPUSH
14009: CALL 12312 0 2
// if not byl_hint_PA then
14013: LD_EXP 95
14017: NOT
14018: IFFALSE 14059
// begin while not ContactTime ( [ ai ] ) do
14020: LD_EXP 6
14024: PUSH
14025: EMPTY
14026: LIST
14027: PPUSH
14028: CALL_OW 462
14032: NOT
14033: IFFALSE 14044
// wait ( 0 0$1 ) ;
14035: LD_INT 35
14037: PPUSH
14038: CALL_OW 67
14042: GO 14020
// MyHint ( PriorityAttacks ) ;
14044: LD_STRING PriorityAttacks
14046: PPUSH
14047: CALL 12040 0 1
// byl_hint_PA := true ;
14051: LD_ADDR_EXP 95
14055: PUSH
14056: LD_INT 1
14058: ST_TO_ADDR
// end ; end ;
14059: LD_VAR 0 1
14063: RET
// export function f_normal3_utok ; var path , i ; begin
14064: LD_INT 0
14066: PPUSH
14067: PPUSH
14068: PPUSH
// path := [ [ 66 , 86 ] , [ 109 , 128 ] , [ 110 , 88 ] , [ 91 , 95 ] ] ;
14069: LD_ADDR_VAR 0 2
14073: PUSH
14074: LD_INT 66
14076: PUSH
14077: LD_INT 86
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: LD_INT 109
14086: PUSH
14087: LD_INT 128
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: LD_INT 110
14096: PUSH
14097: LD_INT 88
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PUSH
14104: LD_INT 91
14106: PUSH
14107: LD_INT 95
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: ST_TO_ADDR
// find_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) , false ) ;
14120: LD_EXP 91
14124: PPUSH
14125: LD_INT 3
14127: PUSH
14128: LD_INT 33
14130: PUSH
14131: LD_INT 2
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: PPUSH
14142: CALL_OW 72
14146: PPUSH
14147: LD_INT 22
14149: PUSH
14150: LD_EXP 6
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: PUSH
14159: LD_INT 25
14161: PUSH
14162: LD_INT 1
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PPUSH
14173: CALL_OW 69
14177: PPUSH
14178: LD_INT 0
14180: PPUSH
14181: CALL 11214 0 3
// find_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) ) ;
14185: LD_EXP 91
14189: PPUSH
14190: LD_INT 33
14192: PUSH
14193: LD_INT 2
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: PUSH
14200: EMPTY
14201: LIST
14202: PPUSH
14203: CALL_OW 72
14207: PPUSH
14208: LD_INT 22
14210: PUSH
14211: LD_EXP 6
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: PUSH
14220: LD_INT 25
14222: PUSH
14223: LD_INT 3
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PPUSH
14234: CALL_OW 69
14238: PPUSH
14239: LD_INT 34
14241: PUSH
14242: LD_INT 30
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: EMPTY
14250: LIST
14251: PPUSH
14252: CALL_OW 69
14256: PPUSH
14257: CALL 11559 0 3
// wait_for_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , 0 0$30 ) ;
14261: LD_EXP 91
14265: PPUSH
14266: LD_INT 3
14268: PUSH
14269: LD_INT 33
14271: PUSH
14272: LD_INT 2
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PPUSH
14283: CALL_OW 72
14287: PPUSH
14288: LD_INT 1050
14290: PPUSH
14291: CALL 11785 0 2
// wait_for_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) , 0 0$30 ) ;
14295: LD_EXP 91
14299: PPUSH
14300: LD_INT 33
14302: PUSH
14303: LD_INT 2
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: EMPTY
14311: LIST
14312: PPUSH
14313: CALL_OW 72
14317: PPUSH
14318: LD_INT 34
14320: PUSH
14321: LD_INT 30
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PUSH
14328: EMPTY
14329: LIST
14330: PPUSH
14331: CALL_OW 69
14335: PPUSH
14336: LD_INT 1050
14338: PPUSH
14339: CALL 11643 0 3
// ComStop ( zbytek ) ;
14343: LD_EXP 91
14347: PPUSH
14348: CALL_OW 141
// AttackVehicles ( 3 , zbytek ) ;
14352: LD_INT 3
14354: PPUSH
14355: LD_EXP 91
14359: PPUSH
14360: CALL 12312 0 2
// if not byl_hint_PA then
14364: LD_EXP 95
14368: NOT
14369: IFFALSE 14410
// begin while not ContactTime ( [ ai ] ) do
14371: LD_EXP 6
14375: PUSH
14376: EMPTY
14377: LIST
14378: PPUSH
14379: CALL_OW 462
14383: NOT
14384: IFFALSE 14395
// wait ( 0 0$1 ) ;
14386: LD_INT 35
14388: PPUSH
14389: CALL_OW 67
14393: GO 14371
// MyHint ( PriorityAttacks ) ;
14395: LD_STRING PriorityAttacks
14397: PPUSH
14398: CALL 12040 0 1
// byl_hint_PA := true ;
14402: LD_ADDR_EXP 95
14406: PUSH
14407: LD_INT 1
14409: ST_TO_ADDR
// end ; end ;
14410: LD_VAR 0 1
14414: RET
// export function f_normal4_utok ; var path , i ; begin
14415: LD_INT 0
14417: PPUSH
14418: PPUSH
14419: PPUSH
// path := [ [ 38 , 16 ] , [ 75 , 36 ] , [ 91 , 95 ] ] ;
14420: LD_ADDR_VAR 0 2
14424: PUSH
14425: LD_INT 38
14427: PUSH
14428: LD_INT 16
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: LD_INT 75
14437: PUSH
14438: LD_INT 36
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: LD_INT 91
14447: PUSH
14448: LD_INT 95
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: LIST
14459: ST_TO_ADDR
// find_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) , false ) ;
14460: LD_EXP 91
14464: PPUSH
14465: LD_INT 3
14467: PUSH
14468: LD_INT 33
14470: PUSH
14471: LD_INT 2
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PPUSH
14482: CALL_OW 72
14486: PPUSH
14487: LD_INT 22
14489: PUSH
14490: LD_EXP 6
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: PUSH
14499: LD_INT 25
14501: PUSH
14502: LD_INT 1
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PPUSH
14513: CALL_OW 69
14517: PPUSH
14518: LD_INT 0
14520: PPUSH
14521: CALL 11214 0 3
// find_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) ) ;
14525: LD_EXP 91
14529: PPUSH
14530: LD_INT 33
14532: PUSH
14533: LD_INT 2
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PUSH
14540: EMPTY
14541: LIST
14542: PPUSH
14543: CALL_OW 72
14547: PPUSH
14548: LD_INT 22
14550: PUSH
14551: LD_EXP 6
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: PUSH
14560: LD_INT 25
14562: PUSH
14563: LD_INT 3
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: PPUSH
14574: CALL_OW 69
14578: PPUSH
14579: LD_INT 34
14581: PUSH
14582: LD_INT 30
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PUSH
14589: EMPTY
14590: LIST
14591: PPUSH
14592: CALL_OW 69
14596: PPUSH
14597: CALL 11559 0 3
// wait_for_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , 0 0$30 ) ;
14601: LD_EXP 91
14605: PPUSH
14606: LD_INT 3
14608: PUSH
14609: LD_INT 33
14611: PUSH
14612: LD_INT 2
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PPUSH
14623: CALL_OW 72
14627: PPUSH
14628: LD_INT 1050
14630: PPUSH
14631: CALL 11785 0 2
// wait_for_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) , 0 0$30 ) ;
14635: LD_EXP 91
14639: PPUSH
14640: LD_INT 33
14642: PUSH
14643: LD_INT 2
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: PUSH
14650: EMPTY
14651: LIST
14652: PPUSH
14653: CALL_OW 72
14657: PPUSH
14658: LD_INT 34
14660: PUSH
14661: LD_INT 30
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PUSH
14668: EMPTY
14669: LIST
14670: PPUSH
14671: CALL_OW 69
14675: PPUSH
14676: LD_INT 1050
14678: PPUSH
14679: CALL 11643 0 3
// ComStop ( zbytek ) ;
14683: LD_EXP 91
14687: PPUSH
14688: CALL_OW 141
// AttackVehicles ( 3 , zbytek ) ;
14692: LD_INT 3
14694: PPUSH
14695: LD_EXP 91
14699: PPUSH
14700: CALL 12312 0 2
// if not byl_hint_PA then
14704: LD_EXP 95
14708: NOT
14709: IFFALSE 14750
// begin while not ContactTime ( [ ai ] ) do
14711: LD_EXP 6
14715: PUSH
14716: EMPTY
14717: LIST
14718: PPUSH
14719: CALL_OW 462
14723: NOT
14724: IFFALSE 14735
// wait ( 0 0$1 ) ;
14726: LD_INT 35
14728: PPUSH
14729: CALL_OW 67
14733: GO 14711
// MyHint ( PriorityAttacks ) ;
14735: LD_STRING PriorityAttacks
14737: PPUSH
14738: CALL 12040 0 1
// byl_hint_PA := true ;
14742: LD_ADDR_EXP 95
14746: PUSH
14747: LD_INT 1
14749: ST_TO_ADDR
// end ; end ;
14750: LD_VAR 0 1
14754: RET
// export function f_vsevolod_utok ; var path , i ; begin
14755: LD_INT 0
14757: PPUSH
14758: PPUSH
14759: PPUSH
// path := [ [ 43 , 17 ] , [ 41 , 7 ] ] ;
14760: LD_ADDR_VAR 0 2
14764: PUSH
14765: LD_INT 43
14767: PUSH
14768: LD_INT 17
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PUSH
14775: LD_INT 41
14777: PUSH
14778: LD_INT 7
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: ST_TO_ADDR
// find_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) , false ) ;
14789: LD_EXP 91
14793: PPUSH
14794: LD_INT 3
14796: PUSH
14797: LD_INT 33
14799: PUSH
14800: LD_INT 2
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: PPUSH
14811: CALL_OW 72
14815: PPUSH
14816: LD_INT 22
14818: PUSH
14819: LD_EXP 6
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: PUSH
14828: LD_INT 25
14830: PUSH
14831: LD_INT 1
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: PPUSH
14842: CALL_OW 69
14846: PPUSH
14847: LD_INT 0
14849: PPUSH
14850: CALL 11214 0 3
// find_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) ) ;
14854: LD_EXP 91
14858: PPUSH
14859: LD_INT 33
14861: PUSH
14862: LD_INT 2
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: EMPTY
14870: LIST
14871: PPUSH
14872: CALL_OW 72
14876: PPUSH
14877: LD_INT 22
14879: PUSH
14880: LD_EXP 6
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 25
14891: PUSH
14892: LD_INT 3
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PPUSH
14903: CALL_OW 69
14907: PPUSH
14908: LD_INT 34
14910: PUSH
14911: LD_INT 30
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: PUSH
14918: EMPTY
14919: LIST
14920: PPUSH
14921: CALL_OW 69
14925: PPUSH
14926: CALL 11559 0 3
// wait_for_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , 0 0$30 ) ;
14930: LD_EXP 91
14934: PPUSH
14935: LD_INT 3
14937: PUSH
14938: LD_INT 33
14940: PUSH
14941: LD_INT 2
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PPUSH
14952: CALL_OW 72
14956: PPUSH
14957: LD_INT 1050
14959: PPUSH
14960: CALL 11785 0 2
// wait_for_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) , 0 0$30 ) ;
14964: LD_EXP 91
14968: PPUSH
14969: LD_INT 33
14971: PUSH
14972: LD_INT 2
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: PUSH
14979: EMPTY
14980: LIST
14981: PPUSH
14982: CALL_OW 72
14986: PPUSH
14987: LD_INT 34
14989: PUSH
14990: LD_INT 30
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: EMPTY
14998: LIST
14999: PPUSH
15000: CALL_OW 69
15004: PPUSH
15005: LD_INT 1050
15007: PPUSH
15008: CALL 11643 0 3
// ComStop ( zbytek ) ;
15012: LD_EXP 91
15016: PPUSH
15017: CALL_OW 141
// for i in path do
15021: LD_ADDR_VAR 0 3
15025: PUSH
15026: LD_VAR 0 2
15030: PUSH
15031: FOR_IN
15032: IFFALSE 15063
// AddComAgressiveMove ( zbytek , i [ 1 ] , i [ 2 ] ) ;
15034: LD_EXP 91
15038: PPUSH
15039: LD_VAR 0 3
15043: PUSH
15044: LD_INT 1
15046: ARRAY
15047: PPUSH
15048: LD_VAR 0 3
15052: PUSH
15053: LD_INT 2
15055: ARRAY
15056: PPUSH
15057: CALL_OW 174
15061: GO 15031
15063: POP
15064: POP
// AddComWait ( zbytek , 0 0$5 ) ;
15065: LD_EXP 91
15069: PPUSH
15070: LD_INT 175
15072: PPUSH
15073: CALL_OW 202
// AddComReturn ( zbytek ) ;
15077: LD_EXP 91
15081: PPUSH
15082: CALL_OW 204
// end ;
15086: LD_VAR 0 1
15090: RET
// export function f_vsevolod_final_utok ; var path , i ; begin
15091: LD_INT 0
15093: PPUSH
15094: PPUSH
15095: PPUSH
// path := [ [ 43 , 17 ] , [ 41 , 7 ] , [ 52 , 7 ] ] ;
15096: LD_ADDR_VAR 0 2
15100: PUSH
15101: LD_INT 43
15103: PUSH
15104: LD_INT 17
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: LD_INT 41
15113: PUSH
15114: LD_INT 7
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: LD_INT 52
15123: PUSH
15124: LD_INT 7
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: LIST
15135: ST_TO_ADDR
// find_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) , false ) ;
15136: LD_EXP 91
15140: PPUSH
15141: LD_INT 3
15143: PUSH
15144: LD_INT 33
15146: PUSH
15147: LD_INT 2
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: PPUSH
15158: CALL_OW 72
15162: PPUSH
15163: LD_INT 22
15165: PUSH
15166: LD_EXP 6
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: PUSH
15175: LD_INT 25
15177: PUSH
15178: LD_INT 1
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: PPUSH
15189: CALL_OW 69
15193: PPUSH
15194: LD_INT 0
15196: PPUSH
15197: CALL 11214 0 3
// find_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) ) ;
15201: LD_EXP 91
15205: PPUSH
15206: LD_INT 33
15208: PUSH
15209: LD_INT 2
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: PUSH
15216: EMPTY
15217: LIST
15218: PPUSH
15219: CALL_OW 72
15223: PPUSH
15224: LD_INT 22
15226: PUSH
15227: LD_EXP 6
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: PUSH
15236: LD_INT 25
15238: PUSH
15239: LD_INT 3
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PPUSH
15250: CALL_OW 69
15254: PPUSH
15255: LD_INT 34
15257: PUSH
15258: LD_INT 30
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PUSH
15265: EMPTY
15266: LIST
15267: PPUSH
15268: CALL_OW 69
15272: PPUSH
15273: CALL 11559 0 3
// wait_for_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , 0 0$30 ) ;
15277: LD_EXP 91
15281: PPUSH
15282: LD_INT 3
15284: PUSH
15285: LD_INT 33
15287: PUSH
15288: LD_INT 2
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: PPUSH
15299: CALL_OW 72
15303: PPUSH
15304: LD_INT 1050
15306: PPUSH
15307: CALL 11785 0 2
// wait_for_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) , 0 0$30 ) ;
15311: LD_EXP 91
15315: PPUSH
15316: LD_INT 33
15318: PUSH
15319: LD_INT 2
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: EMPTY
15327: LIST
15328: PPUSH
15329: CALL_OW 72
15333: PPUSH
15334: LD_INT 34
15336: PUSH
15337: LD_INT 30
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PUSH
15344: EMPTY
15345: LIST
15346: PPUSH
15347: CALL_OW 69
15351: PPUSH
15352: LD_INT 1050
15354: PPUSH
15355: CALL 11643 0 3
// ComRemember ( zbytek ) ;
15359: LD_EXP 91
15363: PPUSH
15364: CALL_OW 143
// for i in path do
15368: LD_ADDR_VAR 0 3
15372: PUSH
15373: LD_VAR 0 2
15377: PUSH
15378: FOR_IN
15379: IFFALSE 15410
// AddComAgressiveMove ( zbytek , i [ 1 ] , i [ 2 ] ) ;
15381: LD_EXP 91
15385: PPUSH
15386: LD_VAR 0 3
15390: PUSH
15391: LD_INT 1
15393: ARRAY
15394: PPUSH
15395: LD_VAR 0 3
15399: PUSH
15400: LD_INT 2
15402: ARRAY
15403: PPUSH
15404: CALL_OW 174
15408: GO 15378
15410: POP
15411: POP
// AddComAttackUnit ( zbytek , Vsevolod ) ;
15412: LD_EXP 91
15416: PPUSH
15417: LD_EXP 70
15421: PPUSH
15422: CALL_OW 175
// end ; end_of_file
15426: LD_VAR 0 1
15430: RET
// var rDef1 , rDef2 ; export idDef1 , idDef2 ; export toDef1 , toDef2 ; every 0 0$1 do
15431: GO 15433
15433: DISABLE
// begin rDef1 := McRegistry ( ai , [ [ mc_reg_refresh_time , 0 0$2 ] , [ mc_reg_area_to_guard , def_base ] , [ mc_reg_area_to_protect , def_base ] ] ) ;
15434: LD_ADDR_LOC 3
15438: PUSH
15439: LD_EXP 6
15443: PPUSH
15444: LD_INT 1
15446: PUSH
15447: LD_INT 70
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: LD_INT 2
15456: PUSH
15457: LD_INT 19
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: LD_INT 3
15466: PUSH
15467: LD_INT 19
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: LIST
15478: PPUSH
15479: CALL_OW 399
15483: ST_TO_ADDR
// rDef2 := McRegistry ( ai , [ [ mc_reg_refresh_time , 0 0$2 ] , [ mc_reg_area_to_guard , def_base3 ] , [ mc_reg_area_to_protect , def_base3 ] ] ) ;
15484: LD_ADDR_LOC 4
15488: PUSH
15489: LD_EXP 6
15493: PPUSH
15494: LD_INT 1
15496: PUSH
15497: LD_INT 70
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: LD_INT 2
15506: PUSH
15507: LD_INT 18
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 3
15516: PUSH
15517: LD_INT 18
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: LIST
15528: PPUSH
15529: CALL_OW 399
15533: ST_TO_ADDR
// idDef1 := McDefend ( 10 , rDef1 , toDef1 , [ mc_def_advantage , mcdef_difficulty ] ) ;
15534: LD_ADDR_EXP 96
15538: PUSH
15539: LD_INT 10
15541: PPUSH
15542: LD_LOC 3
15546: PPUSH
15547: LD_EXP 98
15551: PPUSH
15552: LD_INT 1
15554: PUSH
15555: LD_EXP 16
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PPUSH
15564: CALL_OW 401
15568: ST_TO_ADDR
// idDef2 := McDefend ( 10 , rDef2 , toDef2 , [ mc_def_advantage , na_kopci_mcdef_difficulty ] ) ;
15569: LD_ADDR_EXP 97
15573: PUSH
15574: LD_INT 10
15576: PPUSH
15577: LD_LOC 4
15581: PPUSH
15582: LD_EXP 99
15586: PPUSH
15587: LD_INT 1
15589: PUSH
15590: LD_EXP 18
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PPUSH
15599: CALL_OW 401
15603: ST_TO_ADDR
// end ;
15604: END
// every 0 0$2 do var r1 , r2 ;
15605: GO 15607
15607: DISABLE
15608: LD_INT 0
15610: PPUSH
15611: PPUSH
// begin todef1 := UnitFilter ( ( fort isect ( b3 ^ b4 ) ) ^ ( ( a3 ^ a4 ) isect sol ) ^ attack ^ defence , [ [ f_side , ai ] , [ f_ok ] ] ) ;
15612: LD_ADDR_EXP 98
15616: PUSH
15617: LD_EXP 119
15621: PUSH
15622: LD_EXP 130
15626: PUSH
15627: LD_EXP 131
15631: ADD
15632: ISECT
15633: PUSH
15634: LD_EXP 135
15638: PUSH
15639: LD_EXP 136
15643: ADD
15644: PUSH
15645: LD_EXP 121
15649: ISECT
15650: ADD
15651: PUSH
15652: LD_EXP 138
15656: ADD
15657: PUSH
15658: LD_EXP 139
15662: ADD
15663: PPUSH
15664: LD_INT 22
15666: PUSH
15667: LD_EXP 6
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 50
15678: PUSH
15679: EMPTY
15680: LIST
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PPUSH
15686: CALL_OW 72
15690: ST_TO_ADDR
// todef2 := UnitFilter ( ( fort isect b1 ) ^ ( a1 isect sol ) , [ [ f_side , ai ] , [ f_ok ] ] ) ;
15691: LD_ADDR_EXP 99
15695: PUSH
15696: LD_EXP 119
15700: PUSH
15701: LD_EXP 128
15705: ISECT
15706: PUSH
15707: LD_EXP 133
15711: PUSH
15712: LD_EXP 121
15716: ISECT
15717: ADD
15718: PPUSH
15719: LD_INT 22
15721: PUSH
15722: LD_EXP 6
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PUSH
15731: LD_INT 50
15733: PUSH
15734: EMPTY
15735: LIST
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PPUSH
15741: CALL_OW 72
15745: ST_TO_ADDR
// r1 := GetMcUnits ( idDef1 ) diff todef1 ;
15746: LD_ADDR_VAR 0 1
15750: PUSH
15751: LD_EXP 96
15755: PPUSH
15756: CALL_OW 389
15760: PUSH
15761: LD_EXP 98
15765: DIFF
15766: ST_TO_ADDR
// add_to ( r1 ) ;
15767: LD_VAR 0 1
15771: PPUSH
15772: CALL 30698 0 1
// AddMcUnits ( idDef1 , todef1 ) ;
15776: LD_EXP 96
15780: PPUSH
15781: LD_EXP 98
15785: PPUSH
15786: CALL_OW 390
// r2 := GetMcUnits ( idDef2 ) diff todef2 ;
15790: LD_ADDR_VAR 0 2
15794: PUSH
15795: LD_EXP 97
15799: PPUSH
15800: CALL_OW 389
15804: PUSH
15805: LD_EXP 99
15809: DIFF
15810: ST_TO_ADDR
// add_to ( r2 ) ;
15811: LD_VAR 0 2
15815: PPUSH
15816: CALL 30698 0 1
// if not ovsyenkotaken or ovsyenkocaptured then
15820: LD_EXP 14
15824: NOT
15825: PUSH
15826: LD_EXP 15
15830: OR
15831: IFFALSE 15847
// AddMcUnits ( idDef2 , todef2 ) ;
15833: LD_EXP 97
15837: PPUSH
15838: LD_EXP 99
15842: PPUSH
15843: CALL_OW 390
// enable ;
15847: ENABLE
// end ; end_of_file
15848: PPOPN 2
15850: END
// export opravovat ; every 0 0$1.0 do var set_fuel , fuel ;
15851: GO 15853
15853: DISABLE
15854: LD_INT 0
15856: PPUSH
15857: PPUSH
// begin for set_fuel in FilterUnitsInArea ( near_base , [ [ f_type , unit_vehicle ] , [ f_side , ai ] ] ) do
15858: LD_ADDR_VAR 0 1
15862: PUSH
15863: LD_INT 2
15865: PPUSH
15866: LD_INT 21
15868: PUSH
15869: LD_INT 2
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PUSH
15876: LD_INT 22
15878: PUSH
15879: LD_EXP 6
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: PPUSH
15892: CALL_OW 70
15896: PUSH
15897: FOR_IN
15898: IFFALSE 15945
// begin fuel := GetFuel ( set_fuel ) ;
15900: LD_ADDR_VAR 0 2
15904: PUSH
15905: LD_VAR 0 1
15909: PPUSH
15910: CALL_OW 261
15914: ST_TO_ADDR
// if fuel <= 80 then
15915: LD_VAR 0 2
15919: PUSH
15920: LD_INT 80
15922: LESSEQUAL
15923: IFFALSE 15943
// SetFuel ( set_fuel , fuel + 20 ) ;
15925: LD_VAR 0 1
15929: PPUSH
15930: LD_VAR 0 2
15934: PUSH
15935: LD_INT 20
15937: PLUS
15938: PPUSH
15939: CALL_OW 240
// end ;
15943: GO 15897
15945: POP
15946: POP
// enable ;
15947: ENABLE
// end ;
15948: PPOPN 2
15950: END
// export rep_cars ; export brk_cars ; every 0 0$5 do var i ;
15951: GO 15953
15953: DISABLE
15954: LD_INT 0
15956: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , ai ] , [ f_type , unit_vehicle ] ] ) do
15957: LD_ADDR_VAR 0 1
15961: PUSH
15962: LD_INT 22
15964: PUSH
15965: LD_EXP 6
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 21
15976: PUSH
15977: LD_INT 2
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PPUSH
15988: CALL_OW 69
15992: PUSH
15993: FOR_IN
15994: IFFALSE 16077
// begin if GetLives ( i ) < 600 then
15996: LD_VAR 0 1
16000: PPUSH
16001: CALL_OW 256
16005: PUSH
16006: LD_INT 600
16008: LESS
16009: IFFALSE 16044
// begin ComMoveXY ( i , 37 , 59 ) ;
16011: LD_VAR 0 1
16015: PPUSH
16016: LD_INT 37
16018: PPUSH
16019: LD_INT 59
16021: PPUSH
16022: CALL_OW 111
// brk_cars := brk_cars union i ;
16026: LD_ADDR_EXP 102
16030: PUSH
16031: LD_EXP 102
16035: PUSH
16036: LD_VAR 0 1
16040: UNION
16041: ST_TO_ADDR
// end else
16042: GO 16075
// if GetLives ( i ) > 950 then
16044: LD_VAR 0 1
16048: PPUSH
16049: CALL_OW 256
16053: PUSH
16054: LD_INT 950
16056: GREATER
16057: IFFALSE 16075
// begin brk_cars := brk_cars diff i ;
16059: LD_ADDR_EXP 102
16063: PUSH
16064: LD_EXP 102
16068: PUSH
16069: LD_VAR 0 1
16073: DIFF
16074: ST_TO_ADDR
// end ; end ;
16075: GO 15993
16077: POP
16078: POP
// enable ;
16079: ENABLE
// end ;
16080: PPOPN 1
16082: END
// every 0 0$5 + 0 0$2 do var zivoty , i ;
16083: GO 16085
16085: DISABLE
16086: LD_INT 0
16088: PPUSH
16089: PPUSH
// begin rep_cars := [ ] ;
16090: LD_ADDR_EXP 101
16094: PUSH
16095: EMPTY
16096: ST_TO_ADDR
// for i in FilterUnitsInArea ( repair_bay1 , [ [ f_side , ai ] , [ f_type , unit_vehicle ] ] ) do
16097: LD_ADDR_VAR 0 2
16101: PUSH
16102: LD_INT 27
16104: PPUSH
16105: LD_INT 22
16107: PUSH
16108: LD_EXP 6
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: LD_INT 21
16119: PUSH
16120: LD_INT 2
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: PUSH
16127: EMPTY
16128: LIST
16129: LIST
16130: PPUSH
16131: CALL_OW 70
16135: PUSH
16136: FOR_IN
16137: IFFALSE 16193
// begin if GetLives ( i ) < 1000 then
16139: LD_VAR 0 2
16143: PPUSH
16144: CALL_OW 256
16148: PUSH
16149: LD_INT 1000
16151: LESS
16152: IFFALSE 16191
// begin rep_cars := rep_cars ^ i ;
16154: LD_ADDR_EXP 101
16158: PUSH
16159: LD_EXP 101
16163: PUSH
16164: LD_VAR 0 2
16168: ADD
16169: ST_TO_ADDR
// zivoty := zivoty ^ GetLives ( i ) ;
16170: LD_ADDR_VAR 0 1
16174: PUSH
16175: LD_VAR 0 1
16179: PUSH
16180: LD_VAR 0 2
16184: PPUSH
16185: CALL_OW 256
16189: ADD
16190: ST_TO_ADDR
// end ; end ;
16191: GO 16136
16193: POP
16194: POP
// SortListByListAsc ( rep_cars , zivoty ) ;
16195: LD_EXP 101
16199: PPUSH
16200: LD_VAR 0 1
16204: PPUSH
16205: CALL_OW 76
// enable ;
16209: ENABLE
// end ;
16210: PPOPN 2
16212: END
// export opr_mec ; every 0 0$5 + 0 0$4 trigger opravovat do var a ;
16213: LD_EXP 100
16217: IFFALSE 16392
16219: GO 16221
16221: DISABLE
16222: LD_INT 0
16224: PPUSH
// begin a := UnitFilter ( mec , [ f_not , [ f_hastask ] ] ) ;
16225: LD_ADDR_VAR 0 1
16229: PUSH
16230: LD_EXP 125
16234: PPUSH
16235: LD_INT 3
16237: PUSH
16238: LD_INT 60
16240: PUSH
16241: EMPTY
16242: LIST
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PPUSH
16248: CALL_OW 72
16252: ST_TO_ADDR
// ComStop ( a ) ;
16253: LD_VAR 0 1
16257: PPUSH
16258: CALL_OW 141
// ComReturn ( a ) ;
16262: LD_VAR 0 1
16266: PPUSH
16267: CALL_OW 144
// opr_mec := opr_mec diff a ;
16271: LD_ADDR_EXP 103
16275: PUSH
16276: LD_EXP 103
16280: PUSH
16281: LD_VAR 0 1
16285: DIFF
16286: ST_TO_ADDR
// if rep_cars then
16287: LD_EXP 101
16291: IFFALSE 16391
// begin a := get_x_best ( UnitFilter ( mec , [ [ f_dist , rep_cars [ 1 ] , 20 ] ] ) , 2 , skill_mechanical , 0 , false ) ;
16293: LD_ADDR_VAR 0 1
16297: PUSH
16298: LD_EXP 125
16302: PPUSH
16303: LD_INT 91
16305: PUSH
16306: LD_EXP 101
16310: PUSH
16311: LD_INT 1
16313: ARRAY
16314: PUSH
16315: LD_INT 20
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: LIST
16322: PUSH
16323: EMPTY
16324: LIST
16325: PPUSH
16326: CALL_OW 72
16330: PPUSH
16331: LD_INT 2
16333: PPUSH
16334: LD_INT 3
16336: PPUSH
16337: LD_INT 0
16339: PPUSH
16340: LD_INT 0
16342: PPUSH
16343: CALL 10371 0 5
16347: ST_TO_ADDR
// opr_mec := opr_mec union a ;
16348: LD_ADDR_EXP 103
16352: PUSH
16353: LD_EXP 103
16357: PUSH
16358: LD_VAR 0 1
16362: UNION
16363: ST_TO_ADDR
// ComExitBuilding ( a ) ;
16364: LD_VAR 0 1
16368: PPUSH
16369: CALL_OW 122
// AddComRepairVehicle ( a , rep_cars [ 1 ] ) ;
16373: LD_VAR 0 1
16377: PPUSH
16378: LD_EXP 101
16382: PUSH
16383: LD_INT 1
16385: ARRAY
16386: PPUSH
16387: CALL_OW 189
// end ; enable ;
16391: ENABLE
// end ; end_of_file
16392: PPOPN 1
16394: END
// var d1 , d2 , d3 , d4 , d5 , d6 , d7 , d8 , d9 , d10 ; every 0 0$2 do
16395: GO 16397
16397: DISABLE
// begin d1 := [ us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun ] ;
16398: LD_ADDR_LOC 5
16402: PUSH
16403: LD_INT 4
16405: PUSH
16406: LD_INT 1
16408: PUSH
16409: LD_INT 1
16411: PUSH
16412: LD_INT 4
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: ST_TO_ADDR
// d2 := [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] ;
16421: LD_ADDR_LOC 6
16425: PUSH
16426: LD_INT 4
16428: PUSH
16429: LD_INT 1
16431: PUSH
16432: LD_INT 1
16434: PUSH
16435: LD_INT 5
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: ST_TO_ADDR
// d3 := [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] ;
16444: LD_ADDR_LOC 7
16448: PUSH
16449: LD_INT 4
16451: PUSH
16452: LD_INT 1
16454: PUSH
16455: LD_INT 1
16457: PUSH
16458: LD_INT 6
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: ST_TO_ADDR
// d5 := [ us_heavy_tracked , engine_combustion , control_remote , us_gatling_gun ] ;
16467: LD_ADDR_LOC 9
16471: PUSH
16472: LD_INT 4
16474: PUSH
16475: LD_INT 1
16477: PUSH
16478: LD_INT 2
16480: PUSH
16481: LD_INT 4
16483: PUSH
16484: EMPTY
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: ST_TO_ADDR
// d6 := [ us_heavy_tracked , engine_combustion , control_remote , us_double_gun ] ;
16490: LD_ADDR_LOC 10
16494: PUSH
16495: LD_INT 4
16497: PUSH
16498: LD_INT 1
16500: PUSH
16501: LD_INT 2
16503: PUSH
16504: LD_INT 5
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: ST_TO_ADDR
// d7 := [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] ;
16513: LD_ADDR_LOC 11
16517: PUSH
16518: LD_INT 4
16520: PUSH
16521: LD_INT 1
16523: PUSH
16524: LD_INT 2
16526: PUSH
16527: LD_INT 6
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: ST_TO_ADDR
// end ;
16536: END
// every 0 0$10 do
16537: GO 16539
16539: DISABLE
// begin defence := FilterAllUnits ( [ [ f_side , ai ] , [ f_control , control_manual ] ] ) ;
16540: LD_ADDR_EXP 139
16544: PUSH
16545: LD_INT 22
16547: PUSH
16548: LD_EXP 6
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 33
16559: PUSH
16560: LD_INT 1
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PPUSH
16571: CALL_OW 69
16575: ST_TO_ADDR
// attack := FilterAllUnits ( [ [ f_side , ai ] , [ f_control , control_remote ] ] ) ;
16576: LD_ADDR_EXP 138
16580: PUSH
16581: LD_INT 22
16583: PUSH
16584: LD_EXP 6
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PUSH
16593: LD_INT 33
16595: PUSH
16596: LD_INT 2
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PPUSH
16607: CALL_OW 69
16611: ST_TO_ADDR
// end ;
16612: END
// var fact1 , fact2 ; every 0 0$1 do
16613: GO 16615
16615: DISABLE
// begin fact1 := fact isect b3 ;
16616: LD_ADDR_LOC 15
16620: PUSH
16621: LD_EXP 124
16625: PUSH
16626: LD_EXP 130
16630: ISECT
16631: ST_TO_ADDR
// if fact1 then
16632: LD_LOC 15
16636: IFFALSE 16652
// fact1 := fact1 [ 1 ] ;
16638: LD_ADDR_LOC 15
16642: PUSH
16643: LD_LOC 15
16647: PUSH
16648: LD_INT 1
16650: ARRAY
16651: ST_TO_ADDR
// fact2 := fact isect b4 ;
16652: LD_ADDR_LOC 16
16656: PUSH
16657: LD_EXP 124
16661: PUSH
16662: LD_EXP 131
16666: ISECT
16667: ST_TO_ADDR
// if fact2 then
16668: LD_LOC 16
16672: IFFALSE 16688
// fact2 := fact2 [ 1 ] ;
16674: LD_ADDR_LOC 16
16678: PUSH
16679: LD_LOC 16
16683: PUSH
16684: LD_INT 1
16686: ARRAY
16687: ST_TO_ADDR
// enable ;
16688: ENABLE
// end ;
16689: END
// every 0 0$5 trigger IsOk ( fact1 ) and fact1 in fact and IsIdle ( fact1 ) do var a , fact_attack ;
16690: LD_LOC 15
16694: PPUSH
16695: CALL_OW 302
16699: PUSH
16700: LD_LOC 15
16704: PUSH
16705: LD_EXP 124
16709: IN
16710: AND
16711: PUSH
16712: LD_LOC 15
16716: PPUSH
16717: CALL_OW 316
16721: AND
16722: IFFALSE 17744
16724: GO 16726
16726: DISABLE
16727: LD_INT 0
16729: PPUSH
16730: PPUSH
// begin fact_attack := FilterAllUnits ( [ [ f_side , ai ] , [ f_control , control_remote ] ] ) ;
16731: LD_ADDR_VAR 0 2
16735: PUSH
16736: LD_INT 22
16738: PUSH
16739: LD_EXP 6
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 33
16750: PUSH
16751: LD_INT 2
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PPUSH
16762: CALL_OW 69
16766: ST_TO_ADDR
// case true of ( tick < 15 15$0 and defence < 3 and CanBeConstructed ( fact1 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ) :
16767: LD_INT 1
16769: PUSH
16770: LD_OWVAR 1
16774: PUSH
16775: LD_INT 31500
16777: LESS
16778: PUSH
16779: LD_EXP 139
16783: PUSH
16784: LD_INT 3
16786: LESS
16787: AND
16788: PUSH
16789: LD_LOC 15
16793: PPUSH
16794: LD_LOC 5
16798: PUSH
16799: LD_INT 1
16801: ARRAY
16802: PPUSH
16803: LD_LOC 5
16807: PUSH
16808: LD_INT 2
16810: ARRAY
16811: PPUSH
16812: LD_LOC 5
16816: PUSH
16817: LD_INT 3
16819: ARRAY
16820: PPUSH
16821: LD_LOC 5
16825: PUSH
16826: LD_INT 4
16828: ARRAY
16829: PPUSH
16830: CALL_OW 448
16834: AND
16835: DOUBLE
16836: EQUAL
16837: IFTRUE 16841
16839: GO 16889
16841: POP
// begin ComConstruct ( fact1 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ;
16842: LD_LOC 15
16846: PPUSH
16847: LD_LOC 5
16851: PUSH
16852: LD_INT 1
16854: ARRAY
16855: PPUSH
16856: LD_LOC 5
16860: PUSH
16861: LD_INT 2
16863: ARRAY
16864: PPUSH
16865: LD_LOC 5
16869: PUSH
16870: LD_INT 3
16872: ARRAY
16873: PPUSH
16874: LD_LOC 5
16878: PUSH
16879: LD_INT 4
16881: ARRAY
16882: PPUSH
16883: CALL_OW 125
// end ; ( tick > 15 15$0 and tick < 30 30$0 and defence < 3 and CanBeConstructed ( fact1 , d2 [ 1 ] , d2 [ 2 ] , d2 [ 3 ] , d2 [ 4 ] ) ) :
16887: GO 17743
16889: LD_OWVAR 1
16893: PUSH
16894: LD_INT 31500
16896: GREATER
16897: PUSH
16898: LD_OWVAR 1
16902: PUSH
16903: LD_INT 63000
16905: LESS
16906: AND
16907: PUSH
16908: LD_EXP 139
16912: PUSH
16913: LD_INT 3
16915: LESS
16916: AND
16917: PUSH
16918: LD_LOC 15
16922: PPUSH
16923: LD_LOC 6
16927: PUSH
16928: LD_INT 1
16930: ARRAY
16931: PPUSH
16932: LD_LOC 6
16936: PUSH
16937: LD_INT 2
16939: ARRAY
16940: PPUSH
16941: LD_LOC 6
16945: PUSH
16946: LD_INT 3
16948: ARRAY
16949: PPUSH
16950: LD_LOC 6
16954: PUSH
16955: LD_INT 4
16957: ARRAY
16958: PPUSH
16959: CALL_OW 448
16963: AND
16964: DOUBLE
16965: EQUAL
16966: IFTRUE 16970
16968: GO 17018
16970: POP
// begin ComConstruct ( fact1 , d2 [ 1 ] , d2 [ 2 ] , d2 [ 3 ] , d2 [ 4 ] ) ;
16971: LD_LOC 15
16975: PPUSH
16976: LD_LOC 6
16980: PUSH
16981: LD_INT 1
16983: ARRAY
16984: PPUSH
16985: LD_LOC 6
16989: PUSH
16990: LD_INT 2
16992: ARRAY
16993: PPUSH
16994: LD_LOC 6
16998: PUSH
16999: LD_INT 3
17001: ARRAY
17002: PPUSH
17003: LD_LOC 6
17007: PUSH
17008: LD_INT 4
17010: ARRAY
17011: PPUSH
17012: CALL_OW 125
// end ; ( tick > 30 30$0 and defence < 2 and CanBeConstructed ( fact1 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ) :
17016: GO 17743
17018: LD_OWVAR 1
17022: PUSH
17023: LD_INT 63000
17025: GREATER
17026: PUSH
17027: LD_EXP 139
17031: PUSH
17032: LD_INT 2
17034: LESS
17035: AND
17036: PUSH
17037: LD_LOC 15
17041: PPUSH
17042: LD_LOC 5
17046: PUSH
17047: LD_INT 1
17049: ARRAY
17050: PPUSH
17051: LD_LOC 5
17055: PUSH
17056: LD_INT 2
17058: ARRAY
17059: PPUSH
17060: LD_LOC 5
17064: PUSH
17065: LD_INT 3
17067: ARRAY
17068: PPUSH
17069: LD_LOC 5
17073: PUSH
17074: LD_INT 4
17076: ARRAY
17077: PPUSH
17078: CALL_OW 448
17082: AND
17083: DOUBLE
17084: EQUAL
17085: IFTRUE 17089
17087: GO 17137
17089: POP
// begin ComConstruct ( fact1 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ;
17090: LD_LOC 15
17094: PPUSH
17095: LD_LOC 5
17099: PUSH
17100: LD_INT 1
17102: ARRAY
17103: PPUSH
17104: LD_LOC 5
17108: PUSH
17109: LD_INT 2
17111: ARRAY
17112: PPUSH
17113: LD_LOC 5
17117: PUSH
17118: LD_INT 3
17120: ARRAY
17121: PPUSH
17122: LD_LOC 5
17126: PUSH
17127: LD_INT 4
17129: ARRAY
17130: PPUSH
17131: CALL_OW 125
// end ; ( tick > 30 30$0 and defence < 4 and CanBeConstructed ( fact1 , d3 [ 1 ] , d3 [ 2 ] , d3 [ 3 ] , d3 [ 4 ] ) ) :
17135: GO 17743
17137: LD_OWVAR 1
17141: PUSH
17142: LD_INT 63000
17144: GREATER
17145: PUSH
17146: LD_EXP 139
17150: PUSH
17151: LD_INT 4
17153: LESS
17154: AND
17155: PUSH
17156: LD_LOC 15
17160: PPUSH
17161: LD_LOC 7
17165: PUSH
17166: LD_INT 1
17168: ARRAY
17169: PPUSH
17170: LD_LOC 7
17174: PUSH
17175: LD_INT 2
17177: ARRAY
17178: PPUSH
17179: LD_LOC 7
17183: PUSH
17184: LD_INT 3
17186: ARRAY
17187: PPUSH
17188: LD_LOC 7
17192: PUSH
17193: LD_INT 4
17195: ARRAY
17196: PPUSH
17197: CALL_OW 448
17201: AND
17202: DOUBLE
17203: EQUAL
17204: IFTRUE 17208
17206: GO 17256
17208: POP
// begin ComConstruct ( fact1 , d3 [ 1 ] , d3 [ 2 ] , d3 [ 3 ] , d3 [ 4 ] ) ;
17209: LD_LOC 15
17213: PPUSH
17214: LD_LOC 7
17218: PUSH
17219: LD_INT 1
17221: ARRAY
17222: PPUSH
17223: LD_LOC 7
17227: PUSH
17228: LD_INT 2
17230: ARRAY
17231: PPUSH
17232: LD_LOC 7
17236: PUSH
17237: LD_INT 3
17239: ARRAY
17240: PPUSH
17241: LD_LOC 7
17245: PUSH
17246: LD_INT 4
17248: ARRAY
17249: PPUSH
17250: CALL_OW 125
// end ; ( tick < 20 20$0 and fact_attack < 4 and CanBeConstructed ( fact1 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ) :
17254: GO 17743
17256: LD_OWVAR 1
17260: PUSH
17261: LD_INT 42000
17263: LESS
17264: PUSH
17265: LD_VAR 0 2
17269: PUSH
17270: LD_INT 4
17272: LESS
17273: AND
17274: PUSH
17275: LD_LOC 15
17279: PPUSH
17280: LD_LOC 10
17284: PUSH
17285: LD_INT 1
17287: ARRAY
17288: PPUSH
17289: LD_LOC 10
17293: PUSH
17294: LD_INT 2
17296: ARRAY
17297: PPUSH
17298: LD_LOC 10
17302: PUSH
17303: LD_INT 3
17305: ARRAY
17306: PPUSH
17307: LD_LOC 10
17311: PUSH
17312: LD_INT 4
17314: ARRAY
17315: PPUSH
17316: CALL_OW 448
17320: AND
17321: DOUBLE
17322: EQUAL
17323: IFTRUE 17327
17325: GO 17375
17327: POP
// begin ComConstruct ( fact1 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ;
17328: LD_LOC 15
17332: PPUSH
17333: LD_LOC 10
17337: PUSH
17338: LD_INT 1
17340: ARRAY
17341: PPUSH
17342: LD_LOC 10
17346: PUSH
17347: LD_INT 2
17349: ARRAY
17350: PPUSH
17351: LD_LOC 10
17355: PUSH
17356: LD_INT 3
17358: ARRAY
17359: PPUSH
17360: LD_LOC 10
17364: PUSH
17365: LD_INT 4
17367: ARRAY
17368: PPUSH
17369: CALL_OW 125
// end ; ( tick > 20 20$0 and tick < 30 30$0 and fact_attack < 3 and CanBeConstructed ( fact1 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ) :
17373: GO 17743
17375: LD_OWVAR 1
17379: PUSH
17380: LD_INT 42000
17382: GREATER
17383: PUSH
17384: LD_OWVAR 1
17388: PUSH
17389: LD_INT 63000
17391: LESS
17392: AND
17393: PUSH
17394: LD_VAR 0 2
17398: PUSH
17399: LD_INT 3
17401: LESS
17402: AND
17403: PUSH
17404: LD_LOC 15
17408: PPUSH
17409: LD_LOC 10
17413: PUSH
17414: LD_INT 1
17416: ARRAY
17417: PPUSH
17418: LD_LOC 10
17422: PUSH
17423: LD_INT 2
17425: ARRAY
17426: PPUSH
17427: LD_LOC 10
17431: PUSH
17432: LD_INT 3
17434: ARRAY
17435: PPUSH
17436: LD_LOC 10
17440: PUSH
17441: LD_INT 4
17443: ARRAY
17444: PPUSH
17445: CALL_OW 448
17449: AND
17450: DOUBLE
17451: EQUAL
17452: IFTRUE 17456
17454: GO 17504
17456: POP
// begin ComConstruct ( fact1 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ;
17457: LD_LOC 15
17461: PPUSH
17462: LD_LOC 10
17466: PUSH
17467: LD_INT 1
17469: ARRAY
17470: PPUSH
17471: LD_LOC 10
17475: PUSH
17476: LD_INT 2
17478: ARRAY
17479: PPUSH
17480: LD_LOC 10
17484: PUSH
17485: LD_INT 3
17487: ARRAY
17488: PPUSH
17489: LD_LOC 10
17493: PUSH
17494: LD_INT 4
17496: ARRAY
17497: PPUSH
17498: CALL_OW 125
// end ; ( tick > 30 30$0 and fact_attack < 4 and CanBeConstructed ( fact1 , d7 [ 1 ] , d7 [ 2 ] , d7 [ 3 ] , d7 [ 4 ] ) ) :
17502: GO 17743
17504: LD_OWVAR 1
17508: PUSH
17509: LD_INT 63000
17511: GREATER
17512: PUSH
17513: LD_VAR 0 2
17517: PUSH
17518: LD_INT 4
17520: LESS
17521: AND
17522: PUSH
17523: LD_LOC 15
17527: PPUSH
17528: LD_LOC 11
17532: PUSH
17533: LD_INT 1
17535: ARRAY
17536: PPUSH
17537: LD_LOC 11
17541: PUSH
17542: LD_INT 2
17544: ARRAY
17545: PPUSH
17546: LD_LOC 11
17550: PUSH
17551: LD_INT 3
17553: ARRAY
17554: PPUSH
17555: LD_LOC 11
17559: PUSH
17560: LD_INT 4
17562: ARRAY
17563: PPUSH
17564: CALL_OW 448
17568: AND
17569: DOUBLE
17570: EQUAL
17571: IFTRUE 17575
17573: GO 17623
17575: POP
// begin ComConstruct ( fact1 , d7 [ 1 ] , d7 [ 2 ] , d7 [ 3 ] , d7 [ 4 ] ) ;
17576: LD_LOC 15
17580: PPUSH
17581: LD_LOC 11
17585: PUSH
17586: LD_INT 1
17588: ARRAY
17589: PPUSH
17590: LD_LOC 11
17594: PUSH
17595: LD_INT 2
17597: ARRAY
17598: PPUSH
17599: LD_LOC 11
17603: PUSH
17604: LD_INT 3
17606: ARRAY
17607: PPUSH
17608: LD_LOC 11
17612: PUSH
17613: LD_INT 4
17615: ARRAY
17616: PPUSH
17617: CALL_OW 125
// end ; ( tick > 30 30$0 and fact_attack < 5 and CanBeConstructed ( fact1 , d5 [ 1 ] , d5 [ 2 ] , d5 [ 3 ] , d5 [ 4 ] ) ) :
17621: GO 17743
17623: LD_OWVAR 1
17627: PUSH
17628: LD_INT 63000
17630: GREATER
17631: PUSH
17632: LD_VAR 0 2
17636: PUSH
17637: LD_INT 5
17639: LESS
17640: AND
17641: PUSH
17642: LD_LOC 15
17646: PPUSH
17647: LD_LOC 9
17651: PUSH
17652: LD_INT 1
17654: ARRAY
17655: PPUSH
17656: LD_LOC 9
17660: PUSH
17661: LD_INT 2
17663: ARRAY
17664: PPUSH
17665: LD_LOC 9
17669: PUSH
17670: LD_INT 3
17672: ARRAY
17673: PPUSH
17674: LD_LOC 9
17678: PUSH
17679: LD_INT 4
17681: ARRAY
17682: PPUSH
17683: CALL_OW 448
17687: AND
17688: DOUBLE
17689: EQUAL
17690: IFTRUE 17694
17692: GO 17742
17694: POP
// begin ComConstruct ( fact1 , d5 [ 1 ] , d5 [ 2 ] , d5 [ 3 ] , d5 [ 4 ] ) ;
17695: LD_LOC 15
17699: PPUSH
17700: LD_LOC 9
17704: PUSH
17705: LD_INT 1
17707: ARRAY
17708: PPUSH
17709: LD_LOC 9
17713: PUSH
17714: LD_INT 2
17716: ARRAY
17717: PPUSH
17718: LD_LOC 9
17722: PUSH
17723: LD_INT 3
17725: ARRAY
17726: PPUSH
17727: LD_LOC 9
17731: PUSH
17732: LD_INT 4
17734: ARRAY
17735: PPUSH
17736: CALL_OW 125
// end ; end ;
17740: GO 17743
17742: POP
// enable ;
17743: ENABLE
// end ;
17744: PPOPN 2
17746: END
// every 0 0$5 trigger IsOk ( fact2 ) and fact2 in fact and IsIdle ( fact2 ) do var a , fact_attack ;
17747: LD_LOC 16
17751: PPUSH
17752: CALL_OW 302
17756: PUSH
17757: LD_LOC 16
17761: PUSH
17762: LD_EXP 124
17766: IN
17767: AND
17768: PUSH
17769: LD_LOC 16
17773: PPUSH
17774: CALL_OW 316
17778: AND
17779: IFFALSE 18801
17781: GO 17783
17783: DISABLE
17784: LD_INT 0
17786: PPUSH
17787: PPUSH
// begin fact_attack := FilterAllUnits ( [ [ f_side , ai ] , [ f_control , control_remote ] ] ) ;
17788: LD_ADDR_VAR 0 2
17792: PUSH
17793: LD_INT 22
17795: PUSH
17796: LD_EXP 6
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 33
17807: PUSH
17808: LD_INT 2
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PPUSH
17819: CALL_OW 69
17823: ST_TO_ADDR
// case true of ( tick < 15 15$0 and defence < 3 and CanBeConstructed ( fact2 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ) :
17824: LD_INT 1
17826: PUSH
17827: LD_OWVAR 1
17831: PUSH
17832: LD_INT 31500
17834: LESS
17835: PUSH
17836: LD_EXP 139
17840: PUSH
17841: LD_INT 3
17843: LESS
17844: AND
17845: PUSH
17846: LD_LOC 16
17850: PPUSH
17851: LD_LOC 5
17855: PUSH
17856: LD_INT 1
17858: ARRAY
17859: PPUSH
17860: LD_LOC 5
17864: PUSH
17865: LD_INT 2
17867: ARRAY
17868: PPUSH
17869: LD_LOC 5
17873: PUSH
17874: LD_INT 3
17876: ARRAY
17877: PPUSH
17878: LD_LOC 5
17882: PUSH
17883: LD_INT 4
17885: ARRAY
17886: PPUSH
17887: CALL_OW 448
17891: AND
17892: DOUBLE
17893: EQUAL
17894: IFTRUE 17898
17896: GO 17946
17898: POP
// begin ComConstruct ( fact2 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ;
17899: LD_LOC 16
17903: PPUSH
17904: LD_LOC 5
17908: PUSH
17909: LD_INT 1
17911: ARRAY
17912: PPUSH
17913: LD_LOC 5
17917: PUSH
17918: LD_INT 2
17920: ARRAY
17921: PPUSH
17922: LD_LOC 5
17926: PUSH
17927: LD_INT 3
17929: ARRAY
17930: PPUSH
17931: LD_LOC 5
17935: PUSH
17936: LD_INT 4
17938: ARRAY
17939: PPUSH
17940: CALL_OW 125
// end ; ( tick > 15 15$0 and tick < 30 30$0 and defence < 3 and CanBeConstructed ( fact2 , d2 [ 1 ] , d2 [ 2 ] , d2 [ 3 ] , d2 [ 4 ] ) ) :
17944: GO 18800
17946: LD_OWVAR 1
17950: PUSH
17951: LD_INT 31500
17953: GREATER
17954: PUSH
17955: LD_OWVAR 1
17959: PUSH
17960: LD_INT 63000
17962: LESS
17963: AND
17964: PUSH
17965: LD_EXP 139
17969: PUSH
17970: LD_INT 3
17972: LESS
17973: AND
17974: PUSH
17975: LD_LOC 16
17979: PPUSH
17980: LD_LOC 6
17984: PUSH
17985: LD_INT 1
17987: ARRAY
17988: PPUSH
17989: LD_LOC 6
17993: PUSH
17994: LD_INT 2
17996: ARRAY
17997: PPUSH
17998: LD_LOC 6
18002: PUSH
18003: LD_INT 3
18005: ARRAY
18006: PPUSH
18007: LD_LOC 6
18011: PUSH
18012: LD_INT 4
18014: ARRAY
18015: PPUSH
18016: CALL_OW 448
18020: AND
18021: DOUBLE
18022: EQUAL
18023: IFTRUE 18027
18025: GO 18075
18027: POP
// begin ComConstruct ( fact2 , d2 [ 1 ] , d2 [ 2 ] , d2 [ 3 ] , d2 [ 4 ] ) ;
18028: LD_LOC 16
18032: PPUSH
18033: LD_LOC 6
18037: PUSH
18038: LD_INT 1
18040: ARRAY
18041: PPUSH
18042: LD_LOC 6
18046: PUSH
18047: LD_INT 2
18049: ARRAY
18050: PPUSH
18051: LD_LOC 6
18055: PUSH
18056: LD_INT 3
18058: ARRAY
18059: PPUSH
18060: LD_LOC 6
18064: PUSH
18065: LD_INT 4
18067: ARRAY
18068: PPUSH
18069: CALL_OW 125
// end ; ( tick > 30 30$0 and defence < 2 and CanBeConstructed ( fact2 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ) :
18073: GO 18800
18075: LD_OWVAR 1
18079: PUSH
18080: LD_INT 63000
18082: GREATER
18083: PUSH
18084: LD_EXP 139
18088: PUSH
18089: LD_INT 2
18091: LESS
18092: AND
18093: PUSH
18094: LD_LOC 16
18098: PPUSH
18099: LD_LOC 5
18103: PUSH
18104: LD_INT 1
18106: ARRAY
18107: PPUSH
18108: LD_LOC 5
18112: PUSH
18113: LD_INT 2
18115: ARRAY
18116: PPUSH
18117: LD_LOC 5
18121: PUSH
18122: LD_INT 3
18124: ARRAY
18125: PPUSH
18126: LD_LOC 5
18130: PUSH
18131: LD_INT 4
18133: ARRAY
18134: PPUSH
18135: CALL_OW 448
18139: AND
18140: DOUBLE
18141: EQUAL
18142: IFTRUE 18146
18144: GO 18194
18146: POP
// begin ComConstruct ( fact2 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ;
18147: LD_LOC 16
18151: PPUSH
18152: LD_LOC 5
18156: PUSH
18157: LD_INT 1
18159: ARRAY
18160: PPUSH
18161: LD_LOC 5
18165: PUSH
18166: LD_INT 2
18168: ARRAY
18169: PPUSH
18170: LD_LOC 5
18174: PUSH
18175: LD_INT 3
18177: ARRAY
18178: PPUSH
18179: LD_LOC 5
18183: PUSH
18184: LD_INT 4
18186: ARRAY
18187: PPUSH
18188: CALL_OW 125
// end ; ( tick > 30 30$0 and defence < 4 and CanBeConstructed ( fact2 , d3 [ 1 ] , d3 [ 2 ] , d3 [ 3 ] , d3 [ 4 ] ) ) :
18192: GO 18800
18194: LD_OWVAR 1
18198: PUSH
18199: LD_INT 63000
18201: GREATER
18202: PUSH
18203: LD_EXP 139
18207: PUSH
18208: LD_INT 4
18210: LESS
18211: AND
18212: PUSH
18213: LD_LOC 16
18217: PPUSH
18218: LD_LOC 7
18222: PUSH
18223: LD_INT 1
18225: ARRAY
18226: PPUSH
18227: LD_LOC 7
18231: PUSH
18232: LD_INT 2
18234: ARRAY
18235: PPUSH
18236: LD_LOC 7
18240: PUSH
18241: LD_INT 3
18243: ARRAY
18244: PPUSH
18245: LD_LOC 7
18249: PUSH
18250: LD_INT 4
18252: ARRAY
18253: PPUSH
18254: CALL_OW 448
18258: AND
18259: DOUBLE
18260: EQUAL
18261: IFTRUE 18265
18263: GO 18313
18265: POP
// begin ComConstruct ( fact2 , d3 [ 1 ] , d3 [ 2 ] , d3 [ 3 ] , d3 [ 4 ] ) ;
18266: LD_LOC 16
18270: PPUSH
18271: LD_LOC 7
18275: PUSH
18276: LD_INT 1
18278: ARRAY
18279: PPUSH
18280: LD_LOC 7
18284: PUSH
18285: LD_INT 2
18287: ARRAY
18288: PPUSH
18289: LD_LOC 7
18293: PUSH
18294: LD_INT 3
18296: ARRAY
18297: PPUSH
18298: LD_LOC 7
18302: PUSH
18303: LD_INT 4
18305: ARRAY
18306: PPUSH
18307: CALL_OW 125
// end ; ( tick < 15 15$0 and fact_attack < 4 and CanBeConstructed ( fact2 , d5 [ 1 ] , d5 [ 2 ] , d5 [ 3 ] , d5 [ 4 ] ) ) :
18311: GO 18800
18313: LD_OWVAR 1
18317: PUSH
18318: LD_INT 31500
18320: LESS
18321: PUSH
18322: LD_VAR 0 2
18326: PUSH
18327: LD_INT 4
18329: LESS
18330: AND
18331: PUSH
18332: LD_LOC 16
18336: PPUSH
18337: LD_LOC 9
18341: PUSH
18342: LD_INT 1
18344: ARRAY
18345: PPUSH
18346: LD_LOC 9
18350: PUSH
18351: LD_INT 2
18353: ARRAY
18354: PPUSH
18355: LD_LOC 9
18359: PUSH
18360: LD_INT 3
18362: ARRAY
18363: PPUSH
18364: LD_LOC 9
18368: PUSH
18369: LD_INT 4
18371: ARRAY
18372: PPUSH
18373: CALL_OW 448
18377: AND
18378: DOUBLE
18379: EQUAL
18380: IFTRUE 18384
18382: GO 18432
18384: POP
// begin ComConstruct ( fact2 , d5 [ 1 ] , d5 [ 2 ] , d5 [ 3 ] , d5 [ 4 ] ) ;
18385: LD_LOC 16
18389: PPUSH
18390: LD_LOC 9
18394: PUSH
18395: LD_INT 1
18397: ARRAY
18398: PPUSH
18399: LD_LOC 9
18403: PUSH
18404: LD_INT 2
18406: ARRAY
18407: PPUSH
18408: LD_LOC 9
18412: PUSH
18413: LD_INT 3
18415: ARRAY
18416: PPUSH
18417: LD_LOC 9
18421: PUSH
18422: LD_INT 4
18424: ARRAY
18425: PPUSH
18426: CALL_OW 125
// end ; ( tick > 15 15$0 and tick < 30 30$0 and fact_attack < 3 and CanBeConstructed ( fact2 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ) :
18430: GO 18800
18432: LD_OWVAR 1
18436: PUSH
18437: LD_INT 31500
18439: GREATER
18440: PUSH
18441: LD_OWVAR 1
18445: PUSH
18446: LD_INT 63000
18448: LESS
18449: AND
18450: PUSH
18451: LD_VAR 0 2
18455: PUSH
18456: LD_INT 3
18458: LESS
18459: AND
18460: PUSH
18461: LD_LOC 16
18465: PPUSH
18466: LD_LOC 10
18470: PUSH
18471: LD_INT 1
18473: ARRAY
18474: PPUSH
18475: LD_LOC 10
18479: PUSH
18480: LD_INT 2
18482: ARRAY
18483: PPUSH
18484: LD_LOC 10
18488: PUSH
18489: LD_INT 3
18491: ARRAY
18492: PPUSH
18493: LD_LOC 10
18497: PUSH
18498: LD_INT 4
18500: ARRAY
18501: PPUSH
18502: CALL_OW 448
18506: AND
18507: DOUBLE
18508: EQUAL
18509: IFTRUE 18513
18511: GO 18561
18513: POP
// begin ComConstruct ( fact2 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ;
18514: LD_LOC 16
18518: PPUSH
18519: LD_LOC 10
18523: PUSH
18524: LD_INT 1
18526: ARRAY
18527: PPUSH
18528: LD_LOC 10
18532: PUSH
18533: LD_INT 2
18535: ARRAY
18536: PPUSH
18537: LD_LOC 10
18541: PUSH
18542: LD_INT 3
18544: ARRAY
18545: PPUSH
18546: LD_LOC 10
18550: PUSH
18551: LD_INT 4
18553: ARRAY
18554: PPUSH
18555: CALL_OW 125
// end ; ( tick > 30 30$0 and fact_attack < 2 and CanBeConstructed ( fact2 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ) :
18559: GO 18800
18561: LD_OWVAR 1
18565: PUSH
18566: LD_INT 63000
18568: GREATER
18569: PUSH
18570: LD_VAR 0 2
18574: PUSH
18575: LD_INT 2
18577: LESS
18578: AND
18579: PUSH
18580: LD_LOC 16
18584: PPUSH
18585: LD_LOC 10
18589: PUSH
18590: LD_INT 1
18592: ARRAY
18593: PPUSH
18594: LD_LOC 10
18598: PUSH
18599: LD_INT 2
18601: ARRAY
18602: PPUSH
18603: LD_LOC 10
18607: PUSH
18608: LD_INT 3
18610: ARRAY
18611: PPUSH
18612: LD_LOC 10
18616: PUSH
18617: LD_INT 4
18619: ARRAY
18620: PPUSH
18621: CALL_OW 448
18625: AND
18626: DOUBLE
18627: EQUAL
18628: IFTRUE 18632
18630: GO 18680
18632: POP
// begin ComConstruct ( fact2 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ;
18633: LD_LOC 16
18637: PPUSH
18638: LD_LOC 10
18642: PUSH
18643: LD_INT 1
18645: ARRAY
18646: PPUSH
18647: LD_LOC 10
18651: PUSH
18652: LD_INT 2
18654: ARRAY
18655: PPUSH
18656: LD_LOC 10
18660: PUSH
18661: LD_INT 3
18663: ARRAY
18664: PPUSH
18665: LD_LOC 10
18669: PUSH
18670: LD_INT 4
18672: ARRAY
18673: PPUSH
18674: CALL_OW 125
// end ; ( tick > 30 30$0 and fact_attack < 4 and CanBeConstructed ( fact2 , d7 [ 1 ] , d7 [ 2 ] , d7 [ 3 ] , d7 [ 4 ] ) ) :
18678: GO 18800
18680: LD_OWVAR 1
18684: PUSH
18685: LD_INT 63000
18687: GREATER
18688: PUSH
18689: LD_VAR 0 2
18693: PUSH
18694: LD_INT 4
18696: LESS
18697: AND
18698: PUSH
18699: LD_LOC 16
18703: PPUSH
18704: LD_LOC 11
18708: PUSH
18709: LD_INT 1
18711: ARRAY
18712: PPUSH
18713: LD_LOC 11
18717: PUSH
18718: LD_INT 2
18720: ARRAY
18721: PPUSH
18722: LD_LOC 11
18726: PUSH
18727: LD_INT 3
18729: ARRAY
18730: PPUSH
18731: LD_LOC 11
18735: PUSH
18736: LD_INT 4
18738: ARRAY
18739: PPUSH
18740: CALL_OW 448
18744: AND
18745: DOUBLE
18746: EQUAL
18747: IFTRUE 18751
18749: GO 18799
18751: POP
// begin ComConstruct ( fact2 , d7 [ 1 ] , d7 [ 2 ] , d7 [ 3 ] , d7 [ 4 ] ) ;
18752: LD_LOC 16
18756: PPUSH
18757: LD_LOC 11
18761: PUSH
18762: LD_INT 1
18764: ARRAY
18765: PPUSH
18766: LD_LOC 11
18770: PUSH
18771: LD_INT 2
18773: ARRAY
18774: PPUSH
18775: LD_LOC 11
18779: PUSH
18780: LD_INT 3
18782: ARRAY
18783: PPUSH
18784: LD_LOC 11
18788: PUSH
18789: LD_INT 4
18791: ARRAY
18792: PPUSH
18793: CALL_OW 125
// end ; end ;
18797: GO 18800
18799: POP
// enable ;
18800: ENABLE
// end ; end_of_file
18801: PPOPN 2
18803: END
// export builds1 , builds2 , builds3 , builds4 , builds5 ; export aici1 , aici2 , aici3 , aici4 , aici5 ; export a1eng ; export can_rebuild ; export can_repair ; export aici ; export stavi ; var upgradeable ; var trough_upgrade ; function UpgradeableTo ( b , up ) ; var i ; begin
18804: LD_INT 0
18806: PPUSH
18807: PPUSH
// result := 0 ;
18808: LD_ADDR_VAR 0 3
18812: PUSH
18813: LD_INT 0
18815: ST_TO_ADDR
// for i := 1 to upgradeable do
18816: LD_ADDR_VAR 0 4
18820: PUSH
18821: DOUBLE
18822: LD_INT 1
18824: DEC
18825: ST_TO_ADDR
18826: LD_LOC 17
18830: PUSH
18831: FOR_TO
18832: IFFALSE 18884
// if b = upgradeable [ i ] and up = trough_upgrade [ i ] then
18834: LD_VAR 0 1
18838: PUSH
18839: LD_LOC 17
18843: PUSH
18844: LD_VAR 0 4
18848: ARRAY
18849: EQUAL
18850: PUSH
18851: LD_VAR 0 2
18855: PUSH
18856: LD_LOC 18
18860: PUSH
18861: LD_VAR 0 4
18865: ARRAY
18866: EQUAL
18867: AND
18868: IFFALSE 18882
// begin result := up ;
18870: LD_ADDR_VAR 0 3
18874: PUSH
18875: LD_VAR 0 2
18879: ST_TO_ADDR
// break ;
18880: GO 18884
// end ;
18882: GO 18831
18884: POP
18885: POP
// end ;
18886: LD_VAR 0 3
18890: RET
// function IsUpgraded ( b ) ; begin
18891: LD_INT 0
18893: PPUSH
// result := 0 ;
18894: LD_ADDR_VAR 0 2
18898: PUSH
18899: LD_INT 0
18901: ST_TO_ADDR
// case b of trough_upgrade [ 1 ] :
18902: LD_VAR 0 1
18906: PUSH
18907: LD_LOC 18
18911: PUSH
18912: LD_INT 1
18914: ARRAY
18915: DOUBLE
18916: EQUAL
18917: IFTRUE 18921
18919: GO 18938
18921: POP
// result := upgradeable [ 1 ] ; trough_upgrade [ 2 ] :
18922: LD_ADDR_VAR 0 2
18926: PUSH
18927: LD_LOC 17
18931: PUSH
18932: LD_INT 1
18934: ARRAY
18935: ST_TO_ADDR
18936: GO 19063
18938: LD_LOC 18
18942: PUSH
18943: LD_INT 2
18945: ARRAY
18946: DOUBLE
18947: EQUAL
18948: IFTRUE 18952
18950: GO 18969
18952: POP
// result := upgradeable [ 2 ] ; trough_upgrade [ 3 ] :
18953: LD_ADDR_VAR 0 2
18957: PUSH
18958: LD_LOC 17
18962: PUSH
18963: LD_INT 2
18965: ARRAY
18966: ST_TO_ADDR
18967: GO 19063
18969: LD_LOC 18
18973: PUSH
18974: LD_INT 3
18976: ARRAY
18977: DOUBLE
18978: EQUAL
18979: IFTRUE 18983
18981: GO 19000
18983: POP
// result := upgradeable [ 3 ] ; trough_upgrade [ 4 ] :
18984: LD_ADDR_VAR 0 2
18988: PUSH
18989: LD_LOC 17
18993: PUSH
18994: LD_INT 3
18996: ARRAY
18997: ST_TO_ADDR
18998: GO 19063
19000: LD_LOC 18
19004: PUSH
19005: LD_INT 4
19007: ARRAY
19008: DOUBLE
19009: EQUAL
19010: IFTRUE 19014
19012: GO 19031
19014: POP
// result := upgradeable [ 4 ] ; trough_upgrade [ 5 ] :
19015: LD_ADDR_VAR 0 2
19019: PUSH
19020: LD_LOC 17
19024: PUSH
19025: LD_INT 4
19027: ARRAY
19028: ST_TO_ADDR
19029: GO 19063
19031: LD_LOC 18
19035: PUSH
19036: LD_INT 5
19038: ARRAY
19039: DOUBLE
19040: EQUAL
19041: IFTRUE 19045
19043: GO 19062
19045: POP
// result := upgradeable [ 5 ] ; end ;
19046: LD_ADDR_VAR 0 2
19050: PUSH
19051: LD_LOC 17
19055: PUSH
19056: LD_INT 5
19058: ARRAY
19059: ST_TO_ADDR
19060: GO 19063
19062: POP
// end ;
19063: LD_VAR 0 2
19067: RET
// function BasicFrom ( b ) ; begin
19068: LD_INT 0
19070: PPUSH
// result := b ;
19071: LD_ADDR_VAR 0 2
19075: PUSH
19076: LD_VAR 0 1
19080: ST_TO_ADDR
// case b of trough_upgrade [ 1 ] :
19081: LD_VAR 0 1
19085: PUSH
19086: LD_LOC 18
19090: PUSH
19091: LD_INT 1
19093: ARRAY
19094: DOUBLE
19095: EQUAL
19096: IFTRUE 19100
19098: GO 19117
19100: POP
// result := upgradeable [ 1 ] ; trough_upgrade [ 2 ] :
19101: LD_ADDR_VAR 0 2
19105: PUSH
19106: LD_LOC 17
19110: PUSH
19111: LD_INT 1
19113: ARRAY
19114: ST_TO_ADDR
19115: GO 19242
19117: LD_LOC 18
19121: PUSH
19122: LD_INT 2
19124: ARRAY
19125: DOUBLE
19126: EQUAL
19127: IFTRUE 19131
19129: GO 19148
19131: POP
// result := upgradeable [ 2 ] ; trough_upgrade [ 3 ] :
19132: LD_ADDR_VAR 0 2
19136: PUSH
19137: LD_LOC 17
19141: PUSH
19142: LD_INT 2
19144: ARRAY
19145: ST_TO_ADDR
19146: GO 19242
19148: LD_LOC 18
19152: PUSH
19153: LD_INT 3
19155: ARRAY
19156: DOUBLE
19157: EQUAL
19158: IFTRUE 19162
19160: GO 19179
19162: POP
// result := upgradeable [ 3 ] ; trough_upgrade [ 4 ] :
19163: LD_ADDR_VAR 0 2
19167: PUSH
19168: LD_LOC 17
19172: PUSH
19173: LD_INT 3
19175: ARRAY
19176: ST_TO_ADDR
19177: GO 19242
19179: LD_LOC 18
19183: PUSH
19184: LD_INT 4
19186: ARRAY
19187: DOUBLE
19188: EQUAL
19189: IFTRUE 19193
19191: GO 19210
19193: POP
// result := upgradeable [ 4 ] ; trough_upgrade [ 6 ] :
19194: LD_ADDR_VAR 0 2
19198: PUSH
19199: LD_LOC 17
19203: PUSH
19204: LD_INT 4
19206: ARRAY
19207: ST_TO_ADDR
19208: GO 19242
19210: LD_LOC 18
19214: PUSH
19215: LD_INT 6
19217: ARRAY
19218: DOUBLE
19219: EQUAL
19220: IFTRUE 19224
19222: GO 19241
19224: POP
// result := upgradeable [ 6 ] ; end ;
19225: LD_ADDR_VAR 0 2
19229: PUSH
19230: LD_LOC 17
19234: PUSH
19235: LD_INT 6
19237: ARRAY
19238: ST_TO_ADDR
19239: GO 19242
19241: POP
// end ;
19242: LD_VAR 0 2
19246: RET
// export function place_b ; var i ; begin
19247: LD_INT 0
19249: PPUSH
19250: PPUSH
// upgradeable := [ b_depot , b_workshop , b_armoury , b_lab , b_lab_half , b_lab ] ;
19251: LD_ADDR_LOC 17
19255: PUSH
19256: LD_INT 0
19258: PUSH
19259: LD_INT 2
19261: PUSH
19262: LD_INT 4
19264: PUSH
19265: LD_INT 6
19267: PUSH
19268: LD_INT 7
19270: PUSH
19271: LD_INT 6
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: ST_TO_ADDR
// trough_upgrade := [ b_warehouse , b_factory , b_barracks , b_lab_half , b_lab_full , b_lab_full ] ;
19282: LD_ADDR_LOC 18
19286: PUSH
19287: LD_INT 1
19289: PUSH
19290: LD_INT 3
19292: PUSH
19293: LD_INT 5
19295: PUSH
19296: LD_INT 7
19298: PUSH
19299: LD_INT 8
19301: PUSH
19302: LD_INT 8
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: ST_TO_ADDR
// aici1 := [ [ [ 0 , class_engineer , 1 ] , [ 1 , class_scientistic , 3 ] , [ 2 , class_soldier , 2 ] , [ 0 , class_mechanic , 0 ] ] , [ [ 1 , class_engineer , 1 ] , [ 1 , class_scientistic , 3 ] , [ 2 , class_soldier , 3 ] , [ 0 , class_mechanic , 0 ] ] , [ [ 1 , class_engineer , 4 ] , [ 1 , class_scientistic , 3 ] , [ 3 , class_soldier , 5 ] , [ 0 , class_mechanic , 0 ] ] ] [ difficulty ] ;
19313: LD_ADDR_EXP 109
19317: PUSH
19318: LD_INT 0
19320: PUSH
19321: LD_INT 2
19323: PUSH
19324: LD_INT 1
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 1
19334: PUSH
19335: LD_INT 4
19337: PUSH
19338: LD_INT 3
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 2
19348: PUSH
19349: LD_INT 1
19351: PUSH
19352: LD_INT 2
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: LIST
19359: PUSH
19360: LD_INT 0
19362: PUSH
19363: LD_INT 3
19365: PUSH
19366: LD_INT 0
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: LIST
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 1
19382: PUSH
19383: LD_INT 2
19385: PUSH
19386: LD_INT 1
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 1
19396: PUSH
19397: LD_INT 4
19399: PUSH
19400: LD_INT 3
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 2
19410: PUSH
19411: LD_INT 1
19413: PUSH
19414: LD_INT 3
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 0
19424: PUSH
19425: LD_INT 3
19427: PUSH
19428: LD_INT 0
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: LIST
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 1
19444: PUSH
19445: LD_INT 2
19447: PUSH
19448: LD_INT 4
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: LIST
19455: PUSH
19456: LD_INT 1
19458: PUSH
19459: LD_INT 4
19461: PUSH
19462: LD_INT 3
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 3
19472: PUSH
19473: LD_INT 1
19475: PUSH
19476: LD_INT 5
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 0
19486: PUSH
19487: LD_INT 3
19489: PUSH
19490: LD_INT 0
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: LIST
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: LIST
19508: PUSH
19509: LD_OWVAR 67
19513: ARRAY
19514: ST_TO_ADDR
// aici2 := [ [ [ 1 , class_engineer , 6 ] , [ 0 , class_scientistic , 4 ] , [ 2 , class_soldier , 3 ] , [ 0 , class_mechanic , 3 ] ] , [ [ 1 , class_engineer , 6 ] , [ 0 , class_scientistic , 5 ] , [ 2 , class_soldier , 3 ] , [ 0 , class_mechanic , 3 ] ] , [ [ 1 , class_engineer , 7 ] , [ 0 , class_scientistic , 5 ] , [ 2 , class_soldier , 3 ] , [ 0 , class_mechanic , 3 ] ] ] [ difficulty ] ;
19515: LD_ADDR_EXP 110
19519: PUSH
19520: LD_INT 1
19522: PUSH
19523: LD_INT 2
19525: PUSH
19526: LD_INT 6
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 0
19536: PUSH
19537: LD_INT 4
19539: PUSH
19540: LD_INT 4
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 2
19550: PUSH
19551: LD_INT 1
19553: PUSH
19554: LD_INT 3
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 0
19564: PUSH
19565: LD_INT 3
19567: PUSH
19568: LD_INT 3
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: LIST
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 1
19584: PUSH
19585: LD_INT 2
19587: PUSH
19588: LD_INT 6
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 0
19598: PUSH
19599: LD_INT 4
19601: PUSH
19602: LD_INT 5
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 2
19612: PUSH
19613: LD_INT 1
19615: PUSH
19616: LD_INT 3
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: LIST
19623: PUSH
19624: LD_INT 0
19626: PUSH
19627: LD_INT 3
19629: PUSH
19630: LD_INT 3
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: LIST
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 1
19646: PUSH
19647: LD_INT 2
19649: PUSH
19650: LD_INT 7
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 0
19660: PUSH
19661: LD_INT 4
19663: PUSH
19664: LD_INT 5
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 2
19674: PUSH
19675: LD_INT 1
19677: PUSH
19678: LD_INT 3
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 0
19688: PUSH
19689: LD_INT 3
19691: PUSH
19692: LD_INT 3
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: LIST
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: LIST
19710: PUSH
19711: LD_OWVAR 67
19715: ARRAY
19716: ST_TO_ADDR
// aici3 := [ [ [ 2 , class_engineer , 5 ] , [ 3 , class_scientistic , 3 ] , [ 6 , class_soldier , 4 ] , [ 5 , class_mechanic , 5 ] ] , [ [ 2 , class_engineer , 6 ] , [ 3 , class_scientistic , 4 ] , [ 6 , class_soldier , 5 ] , [ 5 , class_mechanic , 6 ] ] , [ [ 2 , class_engineer , 6 ] , [ 3 , class_scientistic , 4 ] , [ 6 , class_soldier , 6 ] , [ 5 , class_mechanic , 7 ] ] ] [ difficulty ] ;
19717: LD_ADDR_EXP 111
19721: PUSH
19722: LD_INT 2
19724: PUSH
19725: LD_INT 2
19727: PUSH
19728: LD_INT 5
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 3
19738: PUSH
19739: LD_INT 4
19741: PUSH
19742: LD_INT 3
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 6
19752: PUSH
19753: LD_INT 1
19755: PUSH
19756: LD_INT 4
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 5
19766: PUSH
19767: LD_INT 3
19769: PUSH
19770: LD_INT 5
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: LIST
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 2
19786: PUSH
19787: LD_INT 2
19789: PUSH
19790: LD_INT 6
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 3
19800: PUSH
19801: LD_INT 4
19803: PUSH
19804: LD_INT 4
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 6
19814: PUSH
19815: LD_INT 1
19817: PUSH
19818: LD_INT 5
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 5
19828: PUSH
19829: LD_INT 3
19831: PUSH
19832: LD_INT 6
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: LIST
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 2
19848: PUSH
19849: LD_INT 2
19851: PUSH
19852: LD_INT 6
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 3
19862: PUSH
19863: LD_INT 4
19865: PUSH
19866: LD_INT 4
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 6
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: LD_INT 6
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 5
19890: PUSH
19891: LD_INT 3
19893: PUSH
19894: LD_INT 7
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: LIST
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: LIST
19912: PUSH
19913: LD_OWVAR 67
19917: ARRAY
19918: ST_TO_ADDR
// aici4 := [ [ [ 0 , class_engineer , 5 ] , [ 0 , class_scientistic , 3 ] , [ 8 , class_soldier , 3 ] , [ 3 , class_mechanic , 3 ] ] , [ [ 0 , class_engineer , 6 ] , [ 0 , class_scientistic , 4 ] , [ 8 , class_soldier , 4 ] , [ 3 , class_mechanic , 4 ] ] , [ [ 0 , class_engineer , 6 ] , [ 0 , class_scientistic , 5 ] , [ 8 , class_soldier , 5 ] , [ 3 , class_mechanic , 5 ] ] ] [ difficulty ] ;
19919: LD_ADDR_EXP 112
19923: PUSH
19924: LD_INT 0
19926: PUSH
19927: LD_INT 2
19929: PUSH
19930: LD_INT 5
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 0
19940: PUSH
19941: LD_INT 4
19943: PUSH
19944: LD_INT 3
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 8
19954: PUSH
19955: LD_INT 1
19957: PUSH
19958: LD_INT 3
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 3
19968: PUSH
19969: LD_INT 3
19971: PUSH
19972: LD_INT 3
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: LIST
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: PUSH
19986: LD_INT 0
19988: PUSH
19989: LD_INT 2
19991: PUSH
19992: LD_INT 6
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: LIST
19999: PUSH
20000: LD_INT 0
20002: PUSH
20003: LD_INT 4
20005: PUSH
20006: LD_INT 4
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 8
20016: PUSH
20017: LD_INT 1
20019: PUSH
20020: LD_INT 4
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 3
20030: PUSH
20031: LD_INT 3
20033: PUSH
20034: LD_INT 4
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: LIST
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 0
20050: PUSH
20051: LD_INT 2
20053: PUSH
20054: LD_INT 6
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: LIST
20061: PUSH
20062: LD_INT 0
20064: PUSH
20065: LD_INT 4
20067: PUSH
20068: LD_INT 5
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 8
20078: PUSH
20079: LD_INT 1
20081: PUSH
20082: LD_INT 5
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: LIST
20089: PUSH
20090: LD_INT 3
20092: PUSH
20093: LD_INT 3
20095: PUSH
20096: LD_INT 5
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: LIST
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: LIST
20114: PUSH
20115: LD_OWVAR 67
20119: ARRAY
20120: ST_TO_ADDR
// aici5 := [ [ [ 2 , class_soldier , 5 ] ] , [ [ 2 , class_soldier , 6 ] ] , [ [ 2 , class_soldier , 7 ] ] ] [ difficulty ] ;
20121: LD_ADDR_EXP 113
20125: PUSH
20126: LD_INT 2
20128: PUSH
20129: LD_INT 1
20131: PUSH
20132: LD_INT 5
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: LIST
20139: PUSH
20140: EMPTY
20141: LIST
20142: PUSH
20143: LD_INT 2
20145: PUSH
20146: LD_INT 1
20148: PUSH
20149: LD_INT 6
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: LIST
20156: PUSH
20157: EMPTY
20158: LIST
20159: PUSH
20160: LD_INT 2
20162: PUSH
20163: LD_INT 1
20165: PUSH
20166: LD_INT 7
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: LIST
20173: PUSH
20174: EMPTY
20175: LIST
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: LIST
20181: PUSH
20182: LD_OWVAR 67
20186: ARRAY
20187: ST_TO_ADDR
// builds1 := [ [ [ b_depot , 85 , 86 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_breastwork , 100 , 104 , 0 , [ ] , 0 , 0 , 0 , 0 , 1 ] , [ b_breastwork , 85 , 91 , 1 , [ ] , 0 , 0 , 0 , 0 , 1 ] , [ b_bunker , 91 , 101 , 0 , [ us_double_gun ] , 1 , 1 , 1 , 1 , 1 ] , [ b_armoury , 91 , 86 , 3 , [ ] , 1 , 0 , 0 , 0 , 1 ] , [ b_siberite_mine , 101 , 93 , 3 , [ ] , 0 , 0 , 0 , 0 , 0 ] , [ b_oil_mine , 87 , 84 , 0 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_power , 101 , 96 , 3 , [ ] , 1 , 1 , 1 , 0 , 0 ] ] , [ [ b_depot , 85 , 86 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_breastwork , 100 , 104 , 0 , [ ] , 1 , 1 , 1 , 1 , 1 ] , [ b_breastwork , 85 , 91 , 1 , [ ] , 0 , 0 , 0 , 0 , 1 ] , [ b_bunker , 91 , 101 , 0 , [ us_light_gun ] , 1 , 1 , 1 , 1 , 1 ] , [ b_armoury , 91 , 86 , 3 , [ ] , 1 , 1 , 0 , 0 , 1 ] , [ b_siberite_mine , 101 , 93 , 3 , [ ] , 1 , 1 , 1 , 1 , 0 ] , [ b_oil_mine , 87 , 84 , 0 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_power , 101 , 96 , 3 , [ ] , 1 , 1 , 1 , 0 , 0 ] ] , [ [ b_depot , 85 , 86 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_breastwork , 100 , 104 , 0 , [ ] , 1 , 1 , 1 , 1 , 1 ] , [ b_breastwork , 85 , 91 , 1 , [ ] , 1 , 1 , 1 , 1 , 1 ] , [ b_bunker , 91 , 101 , 0 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 1 ] , [ b_armoury , 91 , 86 , 3 , [ ] , 1 , 1 , 1 , 1 , 1 ] , [ b_siberite_mine , 101 , 93 , 3 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_mine , 87 , 84 , 0 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_power , 101 , 96 , 3 , [ ] , 1 , 1 , 1 , 0 , 0 ] ] ] [ difficulty ] ;
20188: LD_ADDR_EXP 104
20192: PUSH
20193: LD_INT 0
20195: PUSH
20196: LD_INT 85
20198: PUSH
20199: LD_INT 86
20201: PUSH
20202: LD_INT 2
20204: PUSH
20205: EMPTY
20206: PUSH
20207: LD_INT 1
20209: PUSH
20210: LD_INT 1
20212: PUSH
20213: LD_INT 1
20215: PUSH
20216: LD_INT 0
20218: PUSH
20219: LD_INT 0
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 31
20236: PUSH
20237: LD_INT 100
20239: PUSH
20240: LD_INT 104
20242: PUSH
20243: LD_INT 0
20245: PUSH
20246: EMPTY
20247: PUSH
20248: LD_INT 0
20250: PUSH
20251: LD_INT 0
20253: PUSH
20254: LD_INT 0
20256: PUSH
20257: LD_INT 0
20259: PUSH
20260: LD_INT 1
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 31
20277: PUSH
20278: LD_INT 85
20280: PUSH
20281: LD_INT 91
20283: PUSH
20284: LD_INT 1
20286: PUSH
20287: EMPTY
20288: PUSH
20289: LD_INT 0
20291: PUSH
20292: LD_INT 0
20294: PUSH
20295: LD_INT 0
20297: PUSH
20298: LD_INT 0
20300: PUSH
20301: LD_INT 1
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 32
20318: PUSH
20319: LD_INT 91
20321: PUSH
20322: LD_INT 101
20324: PUSH
20325: LD_INT 0
20327: PUSH
20328: LD_INT 5
20330: PUSH
20331: EMPTY
20332: LIST
20333: PUSH
20334: LD_INT 1
20336: PUSH
20337: LD_INT 1
20339: PUSH
20340: LD_INT 1
20342: PUSH
20343: LD_INT 1
20345: PUSH
20346: LD_INT 1
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 4
20363: PUSH
20364: LD_INT 91
20366: PUSH
20367: LD_INT 86
20369: PUSH
20370: LD_INT 3
20372: PUSH
20373: EMPTY
20374: PUSH
20375: LD_INT 1
20377: PUSH
20378: LD_INT 0
20380: PUSH
20381: LD_INT 0
20383: PUSH
20384: LD_INT 0
20386: PUSH
20387: LD_INT 1
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 30
20404: PUSH
20405: LD_INT 101
20407: PUSH
20408: LD_INT 93
20410: PUSH
20411: LD_INT 3
20413: PUSH
20414: EMPTY
20415: PUSH
20416: LD_INT 0
20418: PUSH
20419: LD_INT 0
20421: PUSH
20422: LD_INT 0
20424: PUSH
20425: LD_INT 0
20427: PUSH
20428: LD_INT 0
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 29
20445: PUSH
20446: LD_INT 87
20448: PUSH
20449: LD_INT 84
20451: PUSH
20452: LD_INT 0
20454: PUSH
20455: EMPTY
20456: PUSH
20457: LD_INT 1
20459: PUSH
20460: LD_INT 1
20462: PUSH
20463: LD_INT 1
20465: PUSH
20466: LD_INT 0
20468: PUSH
20469: LD_INT 0
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 26
20486: PUSH
20487: LD_INT 101
20489: PUSH
20490: LD_INT 96
20492: PUSH
20493: LD_INT 3
20495: PUSH
20496: EMPTY
20497: PUSH
20498: LD_INT 1
20500: PUSH
20501: LD_INT 1
20503: PUSH
20504: LD_INT 1
20506: PUSH
20507: LD_INT 0
20509: PUSH
20510: LD_INT 0
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 0
20537: PUSH
20538: LD_INT 85
20540: PUSH
20541: LD_INT 86
20543: PUSH
20544: LD_INT 2
20546: PUSH
20547: EMPTY
20548: PUSH
20549: LD_INT 1
20551: PUSH
20552: LD_INT 1
20554: PUSH
20555: LD_INT 1
20557: PUSH
20558: LD_INT 0
20560: PUSH
20561: LD_INT 0
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 31
20578: PUSH
20579: LD_INT 100
20581: PUSH
20582: LD_INT 104
20584: PUSH
20585: LD_INT 0
20587: PUSH
20588: EMPTY
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: LD_INT 1
20595: PUSH
20596: LD_INT 1
20598: PUSH
20599: LD_INT 1
20601: PUSH
20602: LD_INT 1
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 31
20619: PUSH
20620: LD_INT 85
20622: PUSH
20623: LD_INT 91
20625: PUSH
20626: LD_INT 1
20628: PUSH
20629: EMPTY
20630: PUSH
20631: LD_INT 0
20633: PUSH
20634: LD_INT 0
20636: PUSH
20637: LD_INT 0
20639: PUSH
20640: LD_INT 0
20642: PUSH
20643: LD_INT 1
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 32
20660: PUSH
20661: LD_INT 91
20663: PUSH
20664: LD_INT 101
20666: PUSH
20667: LD_INT 0
20669: PUSH
20670: LD_INT 3
20672: PUSH
20673: EMPTY
20674: LIST
20675: PUSH
20676: LD_INT 1
20678: PUSH
20679: LD_INT 1
20681: PUSH
20682: LD_INT 1
20684: PUSH
20685: LD_INT 1
20687: PUSH
20688: LD_INT 1
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 4
20705: PUSH
20706: LD_INT 91
20708: PUSH
20709: LD_INT 86
20711: PUSH
20712: LD_INT 3
20714: PUSH
20715: EMPTY
20716: PUSH
20717: LD_INT 1
20719: PUSH
20720: LD_INT 1
20722: PUSH
20723: LD_INT 0
20725: PUSH
20726: LD_INT 0
20728: PUSH
20729: LD_INT 1
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 30
20746: PUSH
20747: LD_INT 101
20749: PUSH
20750: LD_INT 93
20752: PUSH
20753: LD_INT 3
20755: PUSH
20756: EMPTY
20757: PUSH
20758: LD_INT 1
20760: PUSH
20761: LD_INT 1
20763: PUSH
20764: LD_INT 1
20766: PUSH
20767: LD_INT 1
20769: PUSH
20770: LD_INT 0
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 29
20787: PUSH
20788: LD_INT 87
20790: PUSH
20791: LD_INT 84
20793: PUSH
20794: LD_INT 0
20796: PUSH
20797: EMPTY
20798: PUSH
20799: LD_INT 1
20801: PUSH
20802: LD_INT 1
20804: PUSH
20805: LD_INT 1
20807: PUSH
20808: LD_INT 0
20810: PUSH
20811: LD_INT 0
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 26
20828: PUSH
20829: LD_INT 101
20831: PUSH
20832: LD_INT 96
20834: PUSH
20835: LD_INT 3
20837: PUSH
20838: EMPTY
20839: PUSH
20840: LD_INT 1
20842: PUSH
20843: LD_INT 1
20845: PUSH
20846: LD_INT 1
20848: PUSH
20849: LD_INT 0
20851: PUSH
20852: LD_INT 0
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 0
20879: PUSH
20880: LD_INT 85
20882: PUSH
20883: LD_INT 86
20885: PUSH
20886: LD_INT 2
20888: PUSH
20889: EMPTY
20890: PUSH
20891: LD_INT 1
20893: PUSH
20894: LD_INT 1
20896: PUSH
20897: LD_INT 1
20899: PUSH
20900: LD_INT 0
20902: PUSH
20903: LD_INT 0
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 31
20920: PUSH
20921: LD_INT 100
20923: PUSH
20924: LD_INT 104
20926: PUSH
20927: LD_INT 0
20929: PUSH
20930: EMPTY
20931: PUSH
20932: LD_INT 1
20934: PUSH
20935: LD_INT 1
20937: PUSH
20938: LD_INT 1
20940: PUSH
20941: LD_INT 1
20943: PUSH
20944: LD_INT 1
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 31
20961: PUSH
20962: LD_INT 85
20964: PUSH
20965: LD_INT 91
20967: PUSH
20968: LD_INT 1
20970: PUSH
20971: EMPTY
20972: PUSH
20973: LD_INT 1
20975: PUSH
20976: LD_INT 1
20978: PUSH
20979: LD_INT 1
20981: PUSH
20982: LD_INT 1
20984: PUSH
20985: LD_INT 1
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 32
21002: PUSH
21003: LD_INT 91
21005: PUSH
21006: LD_INT 101
21008: PUSH
21009: LD_INT 0
21011: PUSH
21012: LD_INT 4
21014: PUSH
21015: EMPTY
21016: LIST
21017: PUSH
21018: LD_INT 1
21020: PUSH
21021: LD_INT 1
21023: PUSH
21024: LD_INT 1
21026: PUSH
21027: LD_INT 1
21029: PUSH
21030: LD_INT 1
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 4
21047: PUSH
21048: LD_INT 91
21050: PUSH
21051: LD_INT 86
21053: PUSH
21054: LD_INT 3
21056: PUSH
21057: EMPTY
21058: PUSH
21059: LD_INT 1
21061: PUSH
21062: LD_INT 1
21064: PUSH
21065: LD_INT 1
21067: PUSH
21068: LD_INT 1
21070: PUSH
21071: LD_INT 1
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: PUSH
21086: LD_INT 30
21088: PUSH
21089: LD_INT 101
21091: PUSH
21092: LD_INT 93
21094: PUSH
21095: LD_INT 3
21097: PUSH
21098: EMPTY
21099: PUSH
21100: LD_INT 1
21102: PUSH
21103: LD_INT 1
21105: PUSH
21106: LD_INT 1
21108: PUSH
21109: LD_INT 0
21111: PUSH
21112: LD_INT 0
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: PUSH
21127: LD_INT 29
21129: PUSH
21130: LD_INT 87
21132: PUSH
21133: LD_INT 84
21135: PUSH
21136: LD_INT 0
21138: PUSH
21139: EMPTY
21140: PUSH
21141: LD_INT 1
21143: PUSH
21144: LD_INT 1
21146: PUSH
21147: LD_INT 1
21149: PUSH
21150: LD_INT 0
21152: PUSH
21153: LD_INT 0
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 26
21170: PUSH
21171: LD_INT 101
21173: PUSH
21174: LD_INT 96
21176: PUSH
21177: LD_INT 3
21179: PUSH
21180: EMPTY
21181: PUSH
21182: LD_INT 1
21184: PUSH
21185: LD_INT 1
21187: PUSH
21188: LD_INT 1
21190: PUSH
21191: LD_INT 0
21193: PUSH
21194: LD_INT 0
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: LIST
21223: PUSH
21224: LD_OWVAR 67
21228: ARRAY
21229: ST_TO_ADDR
// builds2 := [ [ b_workshop , 60 , 9 , 4 , [ ] , 1 , 0 , 0 , 0 , 0 ] , [ b_oil_mine , 53 , 13 , 2 , [ ] , 1 , 0 , 0 , 0 , 0 ] , [ b_oil_power , 50 , 3 , 4 , [ ] , 1 , 0 , 0 , 0 , 0 ] , [ b_depot , 46 , 5 , 2 , [ ] , 1 , 0 , 0 , 0 , 0 ] , [ b_armoury , 59 , 9 , 4 , [ ] , 1 , 0 , 0 , 1 , 1 ] , [ b_breastwork , 50 , 14 , 0 , [ ] , 1 , 0 , 0 , 1 , 1 ] ] ;
21230: LD_ADDR_EXP 105
21234: PUSH
21235: LD_INT 2
21237: PUSH
21238: LD_INT 60
21240: PUSH
21241: LD_INT 9
21243: PUSH
21244: LD_INT 4
21246: PUSH
21247: EMPTY
21248: PUSH
21249: LD_INT 1
21251: PUSH
21252: LD_INT 0
21254: PUSH
21255: LD_INT 0
21257: PUSH
21258: LD_INT 0
21260: PUSH
21261: LD_INT 0
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 29
21278: PUSH
21279: LD_INT 53
21281: PUSH
21282: LD_INT 13
21284: PUSH
21285: LD_INT 2
21287: PUSH
21288: EMPTY
21289: PUSH
21290: LD_INT 1
21292: PUSH
21293: LD_INT 0
21295: PUSH
21296: LD_INT 0
21298: PUSH
21299: LD_INT 0
21301: PUSH
21302: LD_INT 0
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 26
21319: PUSH
21320: LD_INT 50
21322: PUSH
21323: LD_INT 3
21325: PUSH
21326: LD_INT 4
21328: PUSH
21329: EMPTY
21330: PUSH
21331: LD_INT 1
21333: PUSH
21334: LD_INT 0
21336: PUSH
21337: LD_INT 0
21339: PUSH
21340: LD_INT 0
21342: PUSH
21343: LD_INT 0
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 0
21360: PUSH
21361: LD_INT 46
21363: PUSH
21364: LD_INT 5
21366: PUSH
21367: LD_INT 2
21369: PUSH
21370: EMPTY
21371: PUSH
21372: LD_INT 1
21374: PUSH
21375: LD_INT 0
21377: PUSH
21378: LD_INT 0
21380: PUSH
21381: LD_INT 0
21383: PUSH
21384: LD_INT 0
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 4
21401: PUSH
21402: LD_INT 59
21404: PUSH
21405: LD_INT 9
21407: PUSH
21408: LD_INT 4
21410: PUSH
21411: EMPTY
21412: PUSH
21413: LD_INT 1
21415: PUSH
21416: LD_INT 0
21418: PUSH
21419: LD_INT 0
21421: PUSH
21422: LD_INT 1
21424: PUSH
21425: LD_INT 1
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: PUSH
21440: LD_INT 31
21442: PUSH
21443: LD_INT 50
21445: PUSH
21446: LD_INT 14
21448: PUSH
21449: LD_INT 0
21451: PUSH
21452: EMPTY
21453: PUSH
21454: LD_INT 1
21456: PUSH
21457: LD_INT 0
21459: PUSH
21460: LD_INT 0
21462: PUSH
21463: LD_INT 1
21465: PUSH
21466: LD_INT 1
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: ST_TO_ADDR
// if difficulty = 1 then
21489: LD_OWVAR 67
21493: PUSH
21494: LD_INT 1
21496: EQUAL
21497: IFFALSE 22296
// builds3 := [ [ b_breastwork , 41 , 23 , 5 , [ ] , 1 , 0 , 0 , 1 , 1 ] , [ b_bunker , 18 , 8 , 4 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 25 , 13 , 4 , [ us_double_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 17 , 18 , 4 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 31 , 49 , 5 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 35 , 44 , 5 , [ us_double_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 34 , 26 , 0 , [ us_radar ] , 1 , 1 , 1 , 1 , 0 ] , [ b_siberite_mine , 29 , 30 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_mine , 39 , 37 , 1 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_siberite_power , 24 , 44 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_siberite_power , 27 , 26 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_warehouse , 32 , 35 , 4 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_lab_full , 21 , 35 , 1 , [ b_lab_opto , b_lab_weapon ] , 1 , 1 , 1 , 0 , 0 ] , [ b_factory , 18 , 25 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_control_tower , 22 , 40 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_track , 14 , 21 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_gun , 15 , 25 , 1 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_radar , 18 , 29 , 0 , [ ] , 1 , 1 , 1 , 0 , 0 ] ] else
21499: LD_ADDR_EXP 106
21503: PUSH
21504: LD_INT 31
21506: PUSH
21507: LD_INT 41
21509: PUSH
21510: LD_INT 23
21512: PUSH
21513: LD_INT 5
21515: PUSH
21516: EMPTY
21517: PUSH
21518: LD_INT 1
21520: PUSH
21521: LD_INT 0
21523: PUSH
21524: LD_INT 0
21526: PUSH
21527: LD_INT 1
21529: PUSH
21530: LD_INT 1
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 32
21547: PUSH
21548: LD_INT 18
21550: PUSH
21551: LD_INT 8
21553: PUSH
21554: LD_INT 4
21556: PUSH
21557: LD_INT 4
21559: PUSH
21560: EMPTY
21561: LIST
21562: PUSH
21563: LD_INT 1
21565: PUSH
21566: LD_INT 1
21568: PUSH
21569: LD_INT 1
21571: PUSH
21572: LD_INT 1
21574: PUSH
21575: LD_INT 0
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: PUSH
21590: LD_INT 32
21592: PUSH
21593: LD_INT 25
21595: PUSH
21596: LD_INT 13
21598: PUSH
21599: LD_INT 4
21601: PUSH
21602: LD_INT 5
21604: PUSH
21605: EMPTY
21606: LIST
21607: PUSH
21608: LD_INT 1
21610: PUSH
21611: LD_INT 1
21613: PUSH
21614: LD_INT 1
21616: PUSH
21617: LD_INT 1
21619: PUSH
21620: LD_INT 0
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 32
21637: PUSH
21638: LD_INT 17
21640: PUSH
21641: LD_INT 18
21643: PUSH
21644: LD_INT 4
21646: PUSH
21647: LD_INT 4
21649: PUSH
21650: EMPTY
21651: LIST
21652: PUSH
21653: LD_INT 1
21655: PUSH
21656: LD_INT 1
21658: PUSH
21659: LD_INT 1
21661: PUSH
21662: LD_INT 1
21664: PUSH
21665: LD_INT 0
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 32
21682: PUSH
21683: LD_INT 31
21685: PUSH
21686: LD_INT 49
21688: PUSH
21689: LD_INT 5
21691: PUSH
21692: LD_INT 4
21694: PUSH
21695: EMPTY
21696: LIST
21697: PUSH
21698: LD_INT 1
21700: PUSH
21701: LD_INT 1
21703: PUSH
21704: LD_INT 1
21706: PUSH
21707: LD_INT 1
21709: PUSH
21710: LD_INT 0
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 32
21727: PUSH
21728: LD_INT 35
21730: PUSH
21731: LD_INT 44
21733: PUSH
21734: LD_INT 5
21736: PUSH
21737: LD_INT 5
21739: PUSH
21740: EMPTY
21741: LIST
21742: PUSH
21743: LD_INT 1
21745: PUSH
21746: LD_INT 1
21748: PUSH
21749: LD_INT 1
21751: PUSH
21752: LD_INT 1
21754: PUSH
21755: LD_INT 0
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 32
21772: PUSH
21773: LD_INT 34
21775: PUSH
21776: LD_INT 26
21778: PUSH
21779: LD_INT 0
21781: PUSH
21782: LD_INT 11
21784: PUSH
21785: EMPTY
21786: LIST
21787: PUSH
21788: LD_INT 1
21790: PUSH
21791: LD_INT 1
21793: PUSH
21794: LD_INT 1
21796: PUSH
21797: LD_INT 1
21799: PUSH
21800: LD_INT 0
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 30
21817: PUSH
21818: LD_INT 29
21820: PUSH
21821: LD_INT 30
21823: PUSH
21824: LD_INT 2
21826: PUSH
21827: EMPTY
21828: PUSH
21829: LD_INT 1
21831: PUSH
21832: LD_INT 1
21834: PUSH
21835: LD_INT 1
21837: PUSH
21838: LD_INT 0
21840: PUSH
21841: LD_INT 0
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 29
21858: PUSH
21859: LD_INT 39
21861: PUSH
21862: LD_INT 37
21864: PUSH
21865: LD_INT 1
21867: PUSH
21868: EMPTY
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: LD_INT 1
21875: PUSH
21876: LD_INT 1
21878: PUSH
21879: LD_INT 0
21881: PUSH
21882: LD_INT 0
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 28
21899: PUSH
21900: LD_INT 24
21902: PUSH
21903: LD_INT 44
21905: PUSH
21906: LD_INT 2
21908: PUSH
21909: EMPTY
21910: PUSH
21911: LD_INT 1
21913: PUSH
21914: LD_INT 1
21916: PUSH
21917: LD_INT 1
21919: PUSH
21920: LD_INT 0
21922: PUSH
21923: LD_INT 0
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 28
21940: PUSH
21941: LD_INT 27
21943: PUSH
21944: LD_INT 26
21946: PUSH
21947: LD_INT 2
21949: PUSH
21950: EMPTY
21951: PUSH
21952: LD_INT 1
21954: PUSH
21955: LD_INT 1
21957: PUSH
21958: LD_INT 1
21960: PUSH
21961: LD_INT 0
21963: PUSH
21964: LD_INT 0
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 1
21981: PUSH
21982: LD_INT 32
21984: PUSH
21985: LD_INT 35
21987: PUSH
21988: LD_INT 4
21990: PUSH
21991: EMPTY
21992: PUSH
21993: LD_INT 1
21995: PUSH
21996: LD_INT 1
21998: PUSH
21999: LD_INT 1
22001: PUSH
22002: LD_INT 0
22004: PUSH
22005: LD_INT 0
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 8
22022: PUSH
22023: LD_INT 21
22025: PUSH
22026: LD_INT 35
22028: PUSH
22029: LD_INT 1
22031: PUSH
22032: LD_INT 15
22034: PUSH
22035: LD_INT 10
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 1
22044: PUSH
22045: LD_INT 1
22047: PUSH
22048: LD_INT 1
22050: PUSH
22051: LD_INT 0
22053: PUSH
22054: LD_INT 0
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 3
22071: PUSH
22072: LD_INT 18
22074: PUSH
22075: LD_INT 25
22077: PUSH
22078: LD_INT 2
22080: PUSH
22081: EMPTY
22082: PUSH
22083: LD_INT 1
22085: PUSH
22086: LD_INT 1
22088: PUSH
22089: LD_INT 1
22091: PUSH
22092: LD_INT 0
22094: PUSH
22095: LD_INT 0
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 36
22112: PUSH
22113: LD_INT 22
22115: PUSH
22116: LD_INT 40
22118: PUSH
22119: LD_INT 2
22121: PUSH
22122: EMPTY
22123: PUSH
22124: LD_INT 1
22126: PUSH
22127: LD_INT 1
22129: PUSH
22130: LD_INT 1
22132: PUSH
22133: LD_INT 0
22135: PUSH
22136: LD_INT 0
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 16
22153: PUSH
22154: LD_INT 14
22156: PUSH
22157: LD_INT 21
22159: PUSH
22160: LD_INT 2
22162: PUSH
22163: EMPTY
22164: PUSH
22165: LD_INT 1
22167: PUSH
22168: LD_INT 1
22170: PUSH
22171: LD_INT 1
22173: PUSH
22174: LD_INT 0
22176: PUSH
22177: LD_INT 0
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 17
22194: PUSH
22195: LD_INT 15
22197: PUSH
22198: LD_INT 25
22200: PUSH
22201: LD_INT 1
22203: PUSH
22204: EMPTY
22205: PUSH
22206: LD_INT 1
22208: PUSH
22209: LD_INT 1
22211: PUSH
22212: LD_INT 1
22214: PUSH
22215: LD_INT 0
22217: PUSH
22218: LD_INT 0
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 20
22235: PUSH
22236: LD_INT 18
22238: PUSH
22239: LD_INT 29
22241: PUSH
22242: LD_INT 0
22244: PUSH
22245: EMPTY
22246: PUSH
22247: LD_INT 1
22249: PUSH
22250: LD_INT 1
22252: PUSH
22253: LD_INT 1
22255: PUSH
22256: LD_INT 0
22258: PUSH
22259: LD_INT 0
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: ST_TO_ADDR
22294: GO 23091
// builds3 := [ [ b_breastwork , 41 , 23 , 5 , [ ] , 1 , 1 , 1 , 1 , 1 ] , [ b_bunker , 18 , 8 , 4 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 25 , 13 , 4 , [ us_double_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 17 , 18 , 4 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 31 , 49 , 5 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 35 , 44 , 5 , [ us_double_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 34 , 26 , 0 , [ us_radar ] , 1 , 1 , 1 , 1 , 0 ] , [ b_siberite_mine , 29 , 30 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_mine , 39 , 37 , 1 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_siberite_power , 24 , 44 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_siberite_power , 27 , 26 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_warehouse , 32 , 35 , 4 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_lab_full , 21 , 35 , 1 , [ b_lab_opto , b_lab_weapon ] , 1 , 1 , 1 , 0 , 0 ] , [ b_factory , 18 , 25 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_control_tower , 22 , 40 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_track , 14 , 21 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_gun , 15 , 25 , 1 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_radar , 18 , 29 , 0 , [ ] , 1 , 1 , 1 , 0 , 0 ] ] ;
22296: LD_ADDR_EXP 106
22300: PUSH
22301: LD_INT 31
22303: PUSH
22304: LD_INT 41
22306: PUSH
22307: LD_INT 23
22309: PUSH
22310: LD_INT 5
22312: PUSH
22313: EMPTY
22314: PUSH
22315: LD_INT 1
22317: PUSH
22318: LD_INT 1
22320: PUSH
22321: LD_INT 1
22323: PUSH
22324: LD_INT 1
22326: PUSH
22327: LD_INT 1
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 32
22344: PUSH
22345: LD_INT 18
22347: PUSH
22348: LD_INT 8
22350: PUSH
22351: LD_INT 4
22353: PUSH
22354: LD_INT 4
22356: PUSH
22357: EMPTY
22358: LIST
22359: PUSH
22360: LD_INT 1
22362: PUSH
22363: LD_INT 1
22365: PUSH
22366: LD_INT 1
22368: PUSH
22369: LD_INT 1
22371: PUSH
22372: LD_INT 0
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 32
22389: PUSH
22390: LD_INT 25
22392: PUSH
22393: LD_INT 13
22395: PUSH
22396: LD_INT 4
22398: PUSH
22399: LD_INT 5
22401: PUSH
22402: EMPTY
22403: LIST
22404: PUSH
22405: LD_INT 1
22407: PUSH
22408: LD_INT 1
22410: PUSH
22411: LD_INT 1
22413: PUSH
22414: LD_INT 1
22416: PUSH
22417: LD_INT 0
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 32
22434: PUSH
22435: LD_INT 17
22437: PUSH
22438: LD_INT 18
22440: PUSH
22441: LD_INT 4
22443: PUSH
22444: LD_INT 4
22446: PUSH
22447: EMPTY
22448: LIST
22449: PUSH
22450: LD_INT 1
22452: PUSH
22453: LD_INT 1
22455: PUSH
22456: LD_INT 1
22458: PUSH
22459: LD_INT 1
22461: PUSH
22462: LD_INT 0
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 32
22479: PUSH
22480: LD_INT 31
22482: PUSH
22483: LD_INT 49
22485: PUSH
22486: LD_INT 5
22488: PUSH
22489: LD_INT 4
22491: PUSH
22492: EMPTY
22493: LIST
22494: PUSH
22495: LD_INT 1
22497: PUSH
22498: LD_INT 1
22500: PUSH
22501: LD_INT 1
22503: PUSH
22504: LD_INT 1
22506: PUSH
22507: LD_INT 0
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 32
22524: PUSH
22525: LD_INT 35
22527: PUSH
22528: LD_INT 44
22530: PUSH
22531: LD_INT 5
22533: PUSH
22534: LD_INT 5
22536: PUSH
22537: EMPTY
22538: LIST
22539: PUSH
22540: LD_INT 1
22542: PUSH
22543: LD_INT 1
22545: PUSH
22546: LD_INT 1
22548: PUSH
22549: LD_INT 1
22551: PUSH
22552: LD_INT 0
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 32
22569: PUSH
22570: LD_INT 34
22572: PUSH
22573: LD_INT 26
22575: PUSH
22576: LD_INT 0
22578: PUSH
22579: LD_INT 11
22581: PUSH
22582: EMPTY
22583: LIST
22584: PUSH
22585: LD_INT 1
22587: PUSH
22588: LD_INT 1
22590: PUSH
22591: LD_INT 1
22593: PUSH
22594: LD_INT 1
22596: PUSH
22597: LD_INT 0
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 30
22614: PUSH
22615: LD_INT 29
22617: PUSH
22618: LD_INT 30
22620: PUSH
22621: LD_INT 2
22623: PUSH
22624: EMPTY
22625: PUSH
22626: LD_INT 1
22628: PUSH
22629: LD_INT 1
22631: PUSH
22632: LD_INT 1
22634: PUSH
22635: LD_INT 0
22637: PUSH
22638: LD_INT 0
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 29
22655: PUSH
22656: LD_INT 39
22658: PUSH
22659: LD_INT 37
22661: PUSH
22662: LD_INT 1
22664: PUSH
22665: EMPTY
22666: PUSH
22667: LD_INT 1
22669: PUSH
22670: LD_INT 1
22672: PUSH
22673: LD_INT 1
22675: PUSH
22676: LD_INT 0
22678: PUSH
22679: LD_INT 0
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 28
22696: PUSH
22697: LD_INT 24
22699: PUSH
22700: LD_INT 44
22702: PUSH
22703: LD_INT 2
22705: PUSH
22706: EMPTY
22707: PUSH
22708: LD_INT 1
22710: PUSH
22711: LD_INT 1
22713: PUSH
22714: LD_INT 1
22716: PUSH
22717: LD_INT 0
22719: PUSH
22720: LD_INT 0
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 28
22737: PUSH
22738: LD_INT 27
22740: PUSH
22741: LD_INT 26
22743: PUSH
22744: LD_INT 2
22746: PUSH
22747: EMPTY
22748: PUSH
22749: LD_INT 1
22751: PUSH
22752: LD_INT 1
22754: PUSH
22755: LD_INT 1
22757: PUSH
22758: LD_INT 0
22760: PUSH
22761: LD_INT 0
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 1
22778: PUSH
22779: LD_INT 32
22781: PUSH
22782: LD_INT 35
22784: PUSH
22785: LD_INT 4
22787: PUSH
22788: EMPTY
22789: PUSH
22790: LD_INT 1
22792: PUSH
22793: LD_INT 1
22795: PUSH
22796: LD_INT 1
22798: PUSH
22799: LD_INT 0
22801: PUSH
22802: LD_INT 0
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: PUSH
22817: LD_INT 8
22819: PUSH
22820: LD_INT 21
22822: PUSH
22823: LD_INT 35
22825: PUSH
22826: LD_INT 1
22828: PUSH
22829: LD_INT 15
22831: PUSH
22832: LD_INT 10
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 1
22841: PUSH
22842: LD_INT 1
22844: PUSH
22845: LD_INT 1
22847: PUSH
22848: LD_INT 0
22850: PUSH
22851: LD_INT 0
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 3
22868: PUSH
22869: LD_INT 18
22871: PUSH
22872: LD_INT 25
22874: PUSH
22875: LD_INT 2
22877: PUSH
22878: EMPTY
22879: PUSH
22880: LD_INT 1
22882: PUSH
22883: LD_INT 1
22885: PUSH
22886: LD_INT 1
22888: PUSH
22889: LD_INT 0
22891: PUSH
22892: LD_INT 0
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 36
22909: PUSH
22910: LD_INT 22
22912: PUSH
22913: LD_INT 40
22915: PUSH
22916: LD_INT 2
22918: PUSH
22919: EMPTY
22920: PUSH
22921: LD_INT 1
22923: PUSH
22924: LD_INT 1
22926: PUSH
22927: LD_INT 1
22929: PUSH
22930: LD_INT 0
22932: PUSH
22933: LD_INT 0
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 16
22950: PUSH
22951: LD_INT 14
22953: PUSH
22954: LD_INT 21
22956: PUSH
22957: LD_INT 2
22959: PUSH
22960: EMPTY
22961: PUSH
22962: LD_INT 1
22964: PUSH
22965: LD_INT 1
22967: PUSH
22968: LD_INT 1
22970: PUSH
22971: LD_INT 0
22973: PUSH
22974: LD_INT 0
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 17
22991: PUSH
22992: LD_INT 15
22994: PUSH
22995: LD_INT 25
22997: PUSH
22998: LD_INT 1
23000: PUSH
23001: EMPTY
23002: PUSH
23003: LD_INT 1
23005: PUSH
23006: LD_INT 1
23008: PUSH
23009: LD_INT 1
23011: PUSH
23012: LD_INT 0
23014: PUSH
23015: LD_INT 0
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 20
23032: PUSH
23033: LD_INT 18
23035: PUSH
23036: LD_INT 29
23038: PUSH
23039: LD_INT 0
23041: PUSH
23042: EMPTY
23043: PUSH
23044: LD_INT 1
23046: PUSH
23047: LD_INT 1
23049: PUSH
23050: LD_INT 1
23052: PUSH
23053: LD_INT 0
23055: PUSH
23056: LD_INT 0
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: ST_TO_ADDR
// builds4 := [ [ b_factory , 45 , 57 , 3 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_track , 42 , 54 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_gun , 45 , 53 , 3 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_noncombat , 48 , 57 , 4 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_radar , 49 , 61 , 5 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_power , 39 , 50 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_barracks , 53 , 67 , 5 , [ ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 57 , 65 , 5 , [ us_radar ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 57 , 68 , 5 , [ us_double_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 52 , 47 , 3 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 60 , 59 , 4 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] ] ;
23091: LD_ADDR_EXP 107
23095: PUSH
23096: LD_INT 3
23098: PUSH
23099: LD_INT 45
23101: PUSH
23102: LD_INT 57
23104: PUSH
23105: LD_INT 3
23107: PUSH
23108: EMPTY
23109: PUSH
23110: LD_INT 1
23112: PUSH
23113: LD_INT 1
23115: PUSH
23116: LD_INT 1
23118: PUSH
23119: LD_INT 0
23121: PUSH
23122: LD_INT 0
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: PUSH
23137: LD_INT 16
23139: PUSH
23140: LD_INT 42
23142: PUSH
23143: LD_INT 54
23145: PUSH
23146: LD_INT 2
23148: PUSH
23149: EMPTY
23150: PUSH
23151: LD_INT 1
23153: PUSH
23154: LD_INT 1
23156: PUSH
23157: LD_INT 1
23159: PUSH
23160: LD_INT 0
23162: PUSH
23163: LD_INT 0
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 17
23180: PUSH
23181: LD_INT 45
23183: PUSH
23184: LD_INT 53
23186: PUSH
23187: LD_INT 3
23189: PUSH
23190: EMPTY
23191: PUSH
23192: LD_INT 1
23194: PUSH
23195: LD_INT 1
23197: PUSH
23198: LD_INT 1
23200: PUSH
23201: LD_INT 0
23203: PUSH
23204: LD_INT 0
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: PUSH
23219: LD_INT 19
23221: PUSH
23222: LD_INT 48
23224: PUSH
23225: LD_INT 57
23227: PUSH
23228: LD_INT 4
23230: PUSH
23231: EMPTY
23232: PUSH
23233: LD_INT 1
23235: PUSH
23236: LD_INT 1
23238: PUSH
23239: LD_INT 1
23241: PUSH
23242: LD_INT 0
23244: PUSH
23245: LD_INT 0
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 20
23262: PUSH
23263: LD_INT 49
23265: PUSH
23266: LD_INT 61
23268: PUSH
23269: LD_INT 5
23271: PUSH
23272: EMPTY
23273: PUSH
23274: LD_INT 1
23276: PUSH
23277: LD_INT 1
23279: PUSH
23280: LD_INT 1
23282: PUSH
23283: LD_INT 0
23285: PUSH
23286: LD_INT 0
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 26
23303: PUSH
23304: LD_INT 39
23306: PUSH
23307: LD_INT 50
23309: PUSH
23310: LD_INT 2
23312: PUSH
23313: EMPTY
23314: PUSH
23315: LD_INT 1
23317: PUSH
23318: LD_INT 1
23320: PUSH
23321: LD_INT 1
23323: PUSH
23324: LD_INT 0
23326: PUSH
23327: LD_INT 0
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 5
23344: PUSH
23345: LD_INT 53
23347: PUSH
23348: LD_INT 67
23350: PUSH
23351: LD_INT 5
23353: PUSH
23354: EMPTY
23355: PUSH
23356: LD_INT 1
23358: PUSH
23359: LD_INT 1
23361: PUSH
23362: LD_INT 1
23364: PUSH
23365: LD_INT 1
23367: PUSH
23368: LD_INT 0
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: PUSH
23383: LD_INT 32
23385: PUSH
23386: LD_INT 57
23388: PUSH
23389: LD_INT 65
23391: PUSH
23392: LD_INT 5
23394: PUSH
23395: LD_INT 11
23397: PUSH
23398: EMPTY
23399: LIST
23400: PUSH
23401: LD_INT 1
23403: PUSH
23404: LD_INT 1
23406: PUSH
23407: LD_INT 1
23409: PUSH
23410: LD_INT 1
23412: PUSH
23413: LD_INT 0
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 32
23430: PUSH
23431: LD_INT 57
23433: PUSH
23434: LD_INT 68
23436: PUSH
23437: LD_INT 5
23439: PUSH
23440: LD_INT 5
23442: PUSH
23443: EMPTY
23444: LIST
23445: PUSH
23446: LD_INT 1
23448: PUSH
23449: LD_INT 1
23451: PUSH
23452: LD_INT 1
23454: PUSH
23455: LD_INT 1
23457: PUSH
23458: LD_INT 0
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 32
23475: PUSH
23476: LD_INT 52
23478: PUSH
23479: LD_INT 47
23481: PUSH
23482: LD_INT 3
23484: PUSH
23485: LD_INT 4
23487: PUSH
23488: EMPTY
23489: LIST
23490: PUSH
23491: LD_INT 1
23493: PUSH
23494: LD_INT 1
23496: PUSH
23497: LD_INT 1
23499: PUSH
23500: LD_INT 1
23502: PUSH
23503: LD_INT 0
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 32
23520: PUSH
23521: LD_INT 60
23523: PUSH
23524: LD_INT 59
23526: PUSH
23527: LD_INT 4
23529: PUSH
23530: LD_INT 4
23532: PUSH
23533: EMPTY
23534: LIST
23535: PUSH
23536: LD_INT 1
23538: PUSH
23539: LD_INT 1
23541: PUSH
23542: LD_INT 1
23544: PUSH
23545: LD_INT 1
23547: PUSH
23548: LD_INT 0
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: ST_TO_ADDR
// builds5 := [ [ b_breastwork , 67 , 34 , 5 , [ ] , 1 , 0 , 0 , 1 , 1 ] , [ b_breastwork , 83 , 38 , 1 , [ ] , 1 , 0 , 0 , 1 , 0 ] ] ;
23576: LD_ADDR_EXP 108
23580: PUSH
23581: LD_INT 31
23583: PUSH
23584: LD_INT 67
23586: PUSH
23587: LD_INT 34
23589: PUSH
23590: LD_INT 5
23592: PUSH
23593: EMPTY
23594: PUSH
23595: LD_INT 1
23597: PUSH
23598: LD_INT 0
23600: PUSH
23601: LD_INT 0
23603: PUSH
23604: LD_INT 1
23606: PUSH
23607: LD_INT 1
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 31
23624: PUSH
23625: LD_INT 83
23627: PUSH
23628: LD_INT 38
23630: PUSH
23631: LD_INT 1
23633: PUSH
23634: EMPTY
23635: PUSH
23636: LD_INT 1
23638: PUSH
23639: LD_INT 0
23641: PUSH
23642: LD_INT 0
23644: PUSH
23645: LD_INT 1
23647: PUSH
23648: LD_INT 0
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: ST_TO_ADDR
// can_repair := [ ] ;
23667: LD_ADDR_EXP 116
23671: PUSH
23672: EMPTY
23673: ST_TO_ADDR
// can_rebuild := [ ] ;
23674: LD_ADDR_EXP 115
23678: PUSH
23679: EMPTY
23680: ST_TO_ADDR
// fort := [ ] ;
23681: LD_ADDR_EXP 119
23685: PUSH
23686: EMPTY
23687: ST_TO_ADDR
// SetResourceVisibility ( 101 , 93 , ai ) ;
23688: LD_INT 101
23690: PPUSH
23691: LD_INT 93
23693: PPUSH
23694: LD_EXP 6
23698: PPUSH
23699: CALL_OW 441
// b1 := place_base ( builds1 , kolik_je_v_depotu , 11 , 0 , b1_levels ) ;
23703: LD_ADDR_EXP 128
23707: PUSH
23708: LD_EXP 104
23712: PPUSH
23713: LD_EXP 35
23717: PPUSH
23718: LD_INT 11
23720: PPUSH
23721: LD_INT 0
23723: PPUSH
23724: LD_EXP 19
23728: PPUSH
23729: CALL 24244 0 5
23733: ST_TO_ADDR
// b2 := place_base ( builds2 , 250 , 94 , kolik_je_sib_v_hornim , b2_levels ) ;
23734: LD_ADDR_EXP 129
23738: PUSH
23739: LD_EXP 105
23743: PPUSH
23744: LD_INT 250
23746: PPUSH
23747: LD_INT 94
23749: PPUSH
23750: LD_EXP 36
23754: PPUSH
23755: LD_EXP 20
23759: PPUSH
23760: CALL 24244 0 5
23764: ST_TO_ADDR
// b3 := place_base ( builds3 , 4180 , 6400 , 500 , b3_levels ) ;
23765: LD_ADDR_EXP 130
23769: PUSH
23770: LD_EXP 106
23774: PPUSH
23775: LD_INT 4180
23777: PPUSH
23778: LD_INT 6400
23780: PPUSH
23781: LD_INT 500
23783: PPUSH
23784: LD_EXP 21
23788: PPUSH
23789: CALL 24244 0 5
23793: ST_TO_ADDR
// b4 := place_base ( builds4 , 0 , 0 , 0 , b4_levels ) ;
23794: LD_ADDR_EXP 131
23798: PUSH
23799: LD_EXP 107
23803: PPUSH
23804: LD_INT 0
23806: PPUSH
23807: LD_INT 0
23809: PPUSH
23810: LD_INT 0
23812: PPUSH
23813: LD_EXP 22
23817: PPUSH
23818: CALL 24244 0 5
23822: ST_TO_ADDR
// b5 := place_base ( builds5 , 0 , 0 , 0 , b5_levels ) ;
23823: LD_ADDR_EXP 132
23827: PUSH
23828: LD_EXP 108
23832: PPUSH
23833: LD_INT 0
23835: PPUSH
23836: LD_INT 0
23838: PPUSH
23839: LD_INT 0
23841: PPUSH
23842: LD_EXP 23
23846: PPUSH
23847: CALL 24244 0 5
23851: ST_TO_ADDR
// if fast_braketrough then
23852: LD_EXP 78
23856: IFFALSE 23889
// SetLives ( UnitFilter ( b1 , [ f_btype , b_armoury ] ) , zivoty_armoury ) else
23858: LD_EXP 128
23862: PPUSH
23863: LD_INT 30
23865: PUSH
23866: LD_INT 4
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PPUSH
23873: CALL_OW 72
23877: PPUSH
23878: LD_EXP 37
23882: PPUSH
23883: CALL_OW 234
23887: GO 23918
// SetLives ( UnitFilter ( b1 , [ f_btype , b_armoury ] ) , zivoty_armoury2 ) ;
23889: LD_EXP 128
23893: PPUSH
23894: LD_INT 30
23896: PUSH
23897: LD_INT 4
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PPUSH
23904: CALL_OW 72
23908: PPUSH
23909: LD_EXP 38
23913: PPUSH
23914: CALL_OW 234
// a1 := place_amici ( aici1 , abase1 ) ;
23918: LD_ADDR_EXP 133
23922: PUSH
23923: LD_EXP 109
23927: PPUSH
23928: LD_INT 9
23930: PPUSH
23931: CALL 24833 0 2
23935: ST_TO_ADDR
// for i in a1 do
23936: LD_ADDR_VAR 0 2
23940: PUSH
23941: LD_EXP 133
23945: PUSH
23946: FOR_IN
23947: IFFALSE 23963
// SetTag ( i , 1 ) ;
23949: LD_VAR 0 2
23953: PPUSH
23954: LD_INT 1
23956: PPUSH
23957: CALL_OW 109
23961: GO 23946
23963: POP
23964: POP
// a2 := place_amici ( aici2 , abase2 ) ;
23965: LD_ADDR_EXP 134
23969: PUSH
23970: LD_EXP 110
23974: PPUSH
23975: LD_INT 8
23977: PPUSH
23978: CALL 24833 0 2
23982: ST_TO_ADDR
// for i in a2 do
23983: LD_ADDR_VAR 0 2
23987: PUSH
23988: LD_EXP 134
23992: PUSH
23993: FOR_IN
23994: IFFALSE 24010
// SetTag ( i , 2 ) ;
23996: LD_VAR 0 2
24000: PPUSH
24001: LD_INT 2
24003: PPUSH
24004: CALL_OW 109
24008: GO 23993
24010: POP
24011: POP
// a3 := place_amici ( aici3 , abase3 ) ;
24012: LD_ADDR_EXP 135
24016: PUSH
24017: LD_EXP 111
24021: PPUSH
24022: LD_INT 6
24024: PPUSH
24025: CALL 24833 0 2
24029: ST_TO_ADDR
// for i in a3 do
24030: LD_ADDR_VAR 0 2
24034: PUSH
24035: LD_EXP 135
24039: PUSH
24040: FOR_IN
24041: IFFALSE 24057
// SetTag ( i , 3 ) ;
24043: LD_VAR 0 2
24047: PPUSH
24048: LD_INT 3
24050: PPUSH
24051: CALL_OW 109
24055: GO 24040
24057: POP
24058: POP
// a4 := place_amici ( aici4 , abase4 ) ;
24059: LD_ADDR_EXP 136
24063: PUSH
24064: LD_EXP 112
24068: PPUSH
24069: LD_INT 7
24071: PPUSH
24072: CALL 24833 0 2
24076: ST_TO_ADDR
// for i in a4 do
24077: LD_ADDR_VAR 0 2
24081: PUSH
24082: LD_EXP 136
24086: PUSH
24087: FOR_IN
24088: IFFALSE 24104
// SetTag ( i , 4 ) ;
24090: LD_VAR 0 2
24094: PPUSH
24095: LD_INT 4
24097: PPUSH
24098: CALL_OW 109
24102: GO 24087
24104: POP
24105: POP
// a5 := place_amici ( aici5 , abase5 ) ;
24106: LD_ADDR_EXP 137
24110: PUSH
24111: LD_EXP 113
24115: PPUSH
24116: LD_INT 10
24118: PPUSH
24119: CALL 24833 0 2
24123: ST_TO_ADDR
// for i in a5 do
24124: LD_ADDR_VAR 0 2
24128: PUSH
24129: LD_EXP 137
24133: PUSH
24134: FOR_IN
24135: IFFALSE 24151
// SetTag ( i , 5 ) ;
24137: LD_VAR 0 2
24141: PPUSH
24142: LD_INT 5
24144: PPUSH
24145: CALL_OW 109
24149: GO 24134
24151: POP
24152: POP
// a1eng := UnitFilter ( a1 , [ [ f_class , class_engineer ] ] ) ;
24153: LD_ADDR_EXP 114
24157: PUSH
24158: LD_EXP 133
24162: PPUSH
24163: LD_INT 25
24165: PUSH
24166: LD_INT 2
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: EMPTY
24174: LIST
24175: PPUSH
24176: CALL_OW 72
24180: ST_TO_ADDR
// if a1eng then
24181: LD_EXP 114
24185: IFFALSE 24201
// a1eng := a1eng [ 1 ] ;
24187: LD_ADDR_EXP 114
24191: PUSH
24192: LD_EXP 114
24196: PUSH
24197: LD_INT 1
24199: ARRAY
24200: ST_TO_ADDR
// InitUc ;
24201: CALL_OW 18
// InitHc ;
24205: CALL_OW 19
// uc_side := ai ;
24209: LD_ADDR_OWVAR 20
24213: PUSH
24214: LD_EXP 6
24218: ST_TO_ADDR
// uc_nation := americans ;
24219: LD_ADDR_OWVAR 21
24223: PUSH
24224: LD_EXP 3
24228: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
24229: LD_INT 1
24231: PPUSH
24232: LD_INT 10
24234: PPUSH
24235: CALL_OW 381
// end ;
24239: LD_VAR 0 1
24243: RET
// function place_base ( builds , cans , oil , sib , levels ) ; var i , base , b , tb , bb ; begin
24244: LD_INT 0
24246: PPUSH
24247: PPUSH
24248: PPUSH
24249: PPUSH
24250: PPUSH
24251: PPUSH
// InitUc ;
24252: CALL_OW 18
// InitBc ;
24256: CALL_OW 21
// uc_side := americans ;
24260: LD_ADDR_OWVAR 20
24264: PUSH
24265: LD_EXP 3
24269: ST_TO_ADDR
// uc_nation := nation_american ;
24270: LD_ADDR_OWVAR 21
24274: PUSH
24275: LD_INT 1
24277: ST_TO_ADDR
// b := [ ] ;
24278: LD_ADDR_VAR 0 9
24282: PUSH
24283: EMPTY
24284: ST_TO_ADDR
// for i in builds do
24285: LD_ADDR_VAR 0 7
24289: PUSH
24290: LD_VAR 0 1
24294: PUSH
24295: FOR_IN
24296: IFFALSE 24697
// begin tb := get_build ( i [ 2 ] , i [ 3 ] , 0 ) ;
24298: LD_ADDR_VAR 0 10
24302: PUSH
24303: LD_VAR 0 7
24307: PUSH
24308: LD_INT 2
24310: ARRAY
24311: PPUSH
24312: LD_VAR 0 7
24316: PUSH
24317: LD_INT 3
24319: ARRAY
24320: PPUSH
24321: LD_INT 0
24323: PPUSH
24324: CALL 26179 0 3
24328: ST_TO_ADDR
// if tb and not i [ 6 ] then
24329: LD_VAR 0 10
24333: PUSH
24334: LD_VAR 0 7
24338: PUSH
24339: LD_INT 6
24341: ARRAY
24342: NOT
24343: AND
24344: IFFALSE 24355
// RemoveUnit ( tb ) ;
24346: LD_VAR 0 10
24350: PPUSH
24351: CALL_OW 64
// if not tb and i [ 6 ] then
24355: LD_VAR 0 10
24359: NOT
24360: PUSH
24361: LD_VAR 0 7
24365: PUSH
24366: LD_INT 6
24368: ARRAY
24369: AND
24370: IFFALSE 24531
// begin bc_type := i [ 1 ] ;
24372: LD_ADDR_OWVAR 42
24376: PUSH
24377: LD_VAR 0 7
24381: PUSH
24382: LD_INT 1
24384: ARRAY
24385: ST_TO_ADDR
// if bc_type = b_lab or bc_type = b_lab_half or bc_type = b_lab_full then
24386: LD_OWVAR 42
24390: PUSH
24391: LD_INT 6
24393: EQUAL
24394: PUSH
24395: LD_OWVAR 42
24399: PUSH
24400: LD_INT 7
24402: EQUAL
24403: OR
24404: PUSH
24405: LD_OWVAR 42
24409: PUSH
24410: LD_INT 8
24412: EQUAL
24413: OR
24414: IFFALSE 24452
// begin bc_kind1 := i [ 5 ] [ 1 ] ;
24416: LD_ADDR_OWVAR 44
24420: PUSH
24421: LD_VAR 0 7
24425: PUSH
24426: LD_INT 5
24428: ARRAY
24429: PUSH
24430: LD_INT 1
24432: ARRAY
24433: ST_TO_ADDR
// bc_kind2 := i [ 5 ] [ 2 ] ;
24434: LD_ADDR_OWVAR 45
24438: PUSH
24439: LD_VAR 0 7
24443: PUSH
24444: LD_INT 5
24446: ARRAY
24447: PUSH
24448: LD_INT 2
24450: ARRAY
24451: ST_TO_ADDR
// end ; tb := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
24452: LD_ADDR_VAR 0 10
24456: PUSH
24457: LD_VAR 0 7
24461: PUSH
24462: LD_INT 2
24464: ARRAY
24465: PPUSH
24466: LD_VAR 0 7
24470: PUSH
24471: LD_INT 3
24473: ARRAY
24474: PPUSH
24475: LD_VAR 0 7
24479: PUSH
24480: LD_INT 4
24482: ARRAY
24483: PPUSH
24484: CALL_OW 47
24488: ST_TO_ADDR
// if bc_type = b_bunker or bc_type = b_turret then
24489: LD_OWVAR 42
24493: PUSH
24494: LD_INT 32
24496: EQUAL
24497: PUSH
24498: LD_OWVAR 42
24502: PUSH
24503: LD_INT 33
24505: EQUAL
24506: OR
24507: IFFALSE 24531
// PlaceWeaponTurret ( tb , i [ 5 ] [ 1 ] ) ;
24509: LD_VAR 0 10
24513: PPUSH
24514: LD_VAR 0 7
24518: PUSH
24519: LD_INT 5
24521: ARRAY
24522: PUSH
24523: LD_INT 1
24525: ARRAY
24526: PPUSH
24527: CALL_OW 431
// end ; if i [ 6 ] then
24531: LD_VAR 0 7
24535: PUSH
24536: LD_INT 6
24538: ARRAY
24539: IFFALSE 24560
// b := b ^ [ tb ] ;
24541: LD_ADDR_VAR 0 9
24545: PUSH
24546: LD_VAR 0 9
24550: PUSH
24551: LD_VAR 0 10
24555: PUSH
24556: EMPTY
24557: LIST
24558: ADD
24559: ST_TO_ADDR
// if i [ 7 ] then
24560: LD_VAR 0 7
24564: PUSH
24565: LD_INT 7
24567: ARRAY
24568: IFFALSE 24589
// can_rebuild := can_rebuild ^ [ tb ] ;
24570: LD_ADDR_EXP 115
24574: PUSH
24575: LD_EXP 115
24579: PUSH
24580: LD_VAR 0 10
24584: PUSH
24585: EMPTY
24586: LIST
24587: ADD
24588: ST_TO_ADDR
// if i [ 8 ] then
24589: LD_VAR 0 7
24593: PUSH
24594: LD_INT 8
24596: ARRAY
24597: IFFALSE 24618
// can_repair := can_rebuild ^ [ tb ] ;
24599: LD_ADDR_EXP 116
24603: PUSH
24604: LD_EXP 115
24608: PUSH
24609: LD_VAR 0 10
24613: PUSH
24614: EMPTY
24615: LIST
24616: ADD
24617: ST_TO_ADDR
// if i [ 9 ] then
24618: LD_VAR 0 7
24622: PUSH
24623: LD_INT 9
24625: ARRAY
24626: IFFALSE 24647
// fort := fort ^ [ tb ] ;
24628: LD_ADDR_EXP 119
24632: PUSH
24633: LD_EXP 119
24637: PUSH
24638: LD_VAR 0 10
24642: PUSH
24643: EMPTY
24644: LIST
24645: ADD
24646: ST_TO_ADDR
// if i [ 10 ] then
24647: LD_VAR 0 7
24651: PUSH
24652: LD_INT 10
24654: ARRAY
24655: IFFALSE 24677
// SetBLevel ( tb , levels [ 1 ] ) else
24657: LD_VAR 0 10
24661: PPUSH
24662: LD_VAR 0 5
24666: PUSH
24667: LD_INT 1
24669: ARRAY
24670: PPUSH
24671: CALL_OW 241
24675: GO 24695
// SetBLevel ( tb , levels [ 2 ] ) ;
24677: LD_VAR 0 10
24681: PPUSH
24682: LD_VAR 0 5
24686: PUSH
24687: LD_INT 2
24689: ARRAY
24690: PPUSH
24691: CALL_OW 241
// end ;
24695: GO 24295
24697: POP
24698: POP
// bb := UnitFilter ( b , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
24699: LD_ADDR_VAR 0 11
24703: PUSH
24704: LD_VAR 0 9
24708: PPUSH
24709: LD_INT 2
24711: PUSH
24712: LD_INT 30
24714: PUSH
24715: LD_INT 0
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 30
24724: PUSH
24725: LD_INT 1
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: LIST
24736: PPUSH
24737: CALL_OW 72
24741: ST_TO_ADDR
// if bb then
24742: LD_VAR 0 11
24746: IFFALSE 24818
// begin base := GetBase ( bb [ 1 ] ) ;
24748: LD_ADDR_VAR 0 8
24752: PUSH
24753: LD_VAR 0 11
24757: PUSH
24758: LD_INT 1
24760: ARRAY
24761: PPUSH
24762: CALL_OW 274
24766: ST_TO_ADDR
// SetResourceType ( base , mat_cans , cans ) ;
24767: LD_VAR 0 8
24771: PPUSH
24772: LD_INT 1
24774: PPUSH
24775: LD_VAR 0 2
24779: PPUSH
24780: CALL_OW 277
// SetResourceType ( base , mat_oil , oil ) ;
24784: LD_VAR 0 8
24788: PPUSH
24789: LD_INT 2
24791: PPUSH
24792: LD_VAR 0 3
24796: PPUSH
24797: CALL_OW 277
// SetResourceType ( base , mat_siberit , sib ) ;
24801: LD_VAR 0 8
24805: PPUSH
24806: LD_INT 3
24808: PPUSH
24809: LD_VAR 0 4
24813: PPUSH
24814: CALL_OW 277
// end ; result := b ;
24818: LD_ADDR_VAR 0 6
24822: PUSH
24823: LD_VAR 0 9
24827: ST_TO_ADDR
// end ;
24828: LD_VAR 0 6
24832: RET
// function place_amici ( amici , area ) ; var i , j , a ; begin
24833: LD_INT 0
24835: PPUSH
24836: PPUSH
24837: PPUSH
24838: PPUSH
// InitUc ;
24839: CALL_OW 18
// InitHc ;
24843: CALL_OW 19
// uc_side := americans ;
24847: LD_ADDR_OWVAR 20
24851: PUSH
24852: LD_EXP 3
24856: ST_TO_ADDR
// uc_nation := nation_american ;
24857: LD_ADDR_OWVAR 21
24861: PUSH
24862: LD_INT 1
24864: ST_TO_ADDR
// a := [ ] ;
24865: LD_ADDR_VAR 0 6
24869: PUSH
24870: EMPTY
24871: ST_TO_ADDR
// for i in amici do
24872: LD_ADDR_VAR 0 4
24876: PUSH
24877: LD_VAR 0 1
24881: PUSH
24882: FOR_IN
24883: IFFALSE 24957
// begin PrepareHuman ( 0 , i [ 2 ] , i [ 3 ] ) ;
24885: LD_INT 0
24887: PPUSH
24888: LD_VAR 0 4
24892: PUSH
24893: LD_INT 2
24895: ARRAY
24896: PPUSH
24897: LD_VAR 0 4
24901: PUSH
24902: LD_INT 3
24904: ARRAY
24905: PPUSH
24906: CALL_OW 380
// for j := 1 to i [ 1 ] do
24910: LD_ADDR_VAR 0 5
24914: PUSH
24915: DOUBLE
24916: LD_INT 1
24918: DEC
24919: ST_TO_ADDR
24920: LD_VAR 0 4
24924: PUSH
24925: LD_INT 1
24927: ARRAY
24928: PUSH
24929: FOR_TO
24930: IFFALSE 24953
// begin a := a ^ [ CreateHuman ] ;
24932: LD_ADDR_VAR 0 6
24936: PUSH
24937: LD_VAR 0 6
24941: PUSH
24942: CALL_OW 44
24946: PUSH
24947: EMPTY
24948: LIST
24949: ADD
24950: ST_TO_ADDR
// end ;
24951: GO 24929
24953: POP
24954: POP
// end ;
24955: GO 24882
24957: POP
24958: POP
// for i in a do
24959: LD_ADDR_VAR 0 4
24963: PUSH
24964: LD_VAR 0 6
24968: PUSH
24969: FOR_IN
24970: IFFALSE 24991
// PlaceUnitArea ( i , area , false ) ;
24972: LD_VAR 0 4
24976: PPUSH
24977: LD_VAR 0 2
24981: PPUSH
24982: LD_INT 0
24984: PPUSH
24985: CALL_OW 49
24989: GO 24969
24991: POP
24992: POP
// result := a ;
24993: LD_ADDR_VAR 0 3
24997: PUSH
24998: LD_VAR 0 6
25002: ST_TO_ADDR
// end ;
25003: LD_VAR 0 3
25007: RET
// every 0 0$4 + 0 0$3.5 do var i , j , weap , builds ;
25008: GO 25010
25010: DISABLE
25011: LD_INT 0
25013: PPUSH
25014: PPUSH
25015: PPUSH
25016: PPUSH
// begin for i in UnitFilter ( can_rebuild , [ [ f_side , ai ] , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ] ) do
25017: LD_ADDR_VAR 0 1
25021: PUSH
25022: LD_EXP 115
25026: PPUSH
25027: LD_INT 22
25029: PUSH
25030: LD_EXP 6
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 2
25041: PUSH
25042: LD_INT 30
25044: PUSH
25045: LD_INT 33
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 30
25054: PUSH
25055: LD_INT 32
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: LIST
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PPUSH
25071: CALL_OW 72
25075: PUSH
25076: FOR_IN
25077: IFFALSE 25221
// if not GetBWeapon ( i ) then
25079: LD_VAR 0 1
25083: PPUSH
25084: CALL_OW 269
25088: NOT
25089: IFFALSE 25219
// begin weap := 0 ;
25091: LD_ADDR_VAR 0 3
25095: PUSH
25096: LD_INT 0
25098: ST_TO_ADDR
// for j in builds do
25099: LD_ADDR_VAR 0 2
25103: PUSH
25104: LD_VAR 0 4
25108: PUSH
25109: FOR_IN
25110: IFFALSE 25197
// if GetX ( i ) = j [ 2 ] and GetY ( i ) = j [ 3 ] and GetBType ( i ) = j [ 1 ] then
25112: LD_VAR 0 1
25116: PPUSH
25117: CALL_OW 250
25121: PUSH
25122: LD_VAR 0 2
25126: PUSH
25127: LD_INT 2
25129: ARRAY
25130: EQUAL
25131: PUSH
25132: LD_VAR 0 1
25136: PPUSH
25137: CALL_OW 251
25141: PUSH
25142: LD_VAR 0 2
25146: PUSH
25147: LD_INT 3
25149: ARRAY
25150: EQUAL
25151: AND
25152: PUSH
25153: LD_VAR 0 1
25157: PPUSH
25158: CALL_OW 266
25162: PUSH
25163: LD_VAR 0 2
25167: PUSH
25168: LD_INT 1
25170: ARRAY
25171: EQUAL
25172: AND
25173: IFFALSE 25195
// begin weap := j [ 5 ] [ 1 ] ;
25175: LD_ADDR_VAR 0 3
25179: PUSH
25180: LD_VAR 0 2
25184: PUSH
25185: LD_INT 5
25187: ARRAY
25188: PUSH
25189: LD_INT 1
25191: ARRAY
25192: ST_TO_ADDR
// break ;
25193: GO 25197
// end ;
25195: GO 25109
25197: POP
25198: POP
// if weap then
25199: LD_VAR 0 3
25203: IFFALSE 25219
// ComPlaceWeapon ( j , weap ) ;
25205: LD_VAR 0 2
25209: PPUSH
25210: LD_VAR 0 3
25214: PPUSH
25215: CALL_OW 148
// end ;
25219: GO 25076
25221: POP
25222: POP
// enable ;
25223: ENABLE
// end ;
25224: PPOPN 4
25226: END
// every 0 0$4 + 0 0$0.5 do var i , j , to_up , to_b , builds , weap , co_tam_stoji ;
25227: GO 25229
25229: DISABLE
25230: LD_INT 0
25232: PPUSH
25233: PPUSH
25234: PPUSH
25235: PPUSH
25236: PPUSH
25237: PPUSH
25238: PPUSH
// begin for i in builds3 do
25239: LD_ADDR_VAR 0 1
25243: PUSH
25244: LD_EXP 106
25248: PUSH
25249: FOR_IN
25250: IFFALSE 25422
// begin if i [ 7 ] then
25252: LD_VAR 0 1
25256: PUSH
25257: LD_INT 7
25259: ARRAY
25260: IFFALSE 25420
// begin co_tam_stoji := GetBType ( get_build ( i [ 2 ] , i [ 3 ] , 0 ) ) ;
25262: LD_ADDR_VAR 0 7
25266: PUSH
25267: LD_VAR 0 1
25271: PUSH
25272: LD_INT 2
25274: ARRAY
25275: PPUSH
25276: LD_VAR 0 1
25280: PUSH
25281: LD_INT 3
25283: ARRAY
25284: PPUSH
25285: LD_INT 0
25287: PPUSH
25288: CALL 26179 0 3
25292: PPUSH
25293: CALL_OW 266
25297: ST_TO_ADDR
// if GetSide ( co_tam_stoji ) = ai then
25298: LD_VAR 0 7
25302: PPUSH
25303: CALL_OW 255
25307: PUSH
25308: LD_EXP 6
25312: EQUAL
25313: IFFALSE 25420
// if co_tam_stoji = - 1 then
25315: LD_VAR 0 7
25319: PUSH
25320: LD_INT 1
25322: NEG
25323: EQUAL
25324: IFFALSE 25390
// begin to_b := [ BasicFrom ( i [ 1 ] ) , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 5 ] ] ;
25326: LD_ADDR_VAR 0 4
25330: PUSH
25331: LD_VAR 0 1
25335: PUSH
25336: LD_INT 1
25338: ARRAY
25339: PPUSH
25340: CALL 19068 0 1
25344: PUSH
25345: LD_VAR 0 1
25349: PUSH
25350: LD_INT 2
25352: ARRAY
25353: PUSH
25354: LD_VAR 0 1
25358: PUSH
25359: LD_INT 3
25361: ARRAY
25362: PUSH
25363: LD_VAR 0 1
25367: PUSH
25368: LD_INT 4
25370: ARRAY
25371: PUSH
25372: LD_VAR 0 1
25376: PUSH
25377: LD_INT 5
25379: ARRAY
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: ST_TO_ADDR
// end else
25388: GO 25420
// if UpgradeableTo ( co_tam_stoji , i [ 1 ] ) then
25390: LD_VAR 0 7
25394: PPUSH
25395: LD_VAR 0 1
25399: PUSH
25400: LD_INT 1
25402: ARRAY
25403: PPUSH
25404: CALL 18804 0 2
25408: IFFALSE 25420
// begin to_up := i ;
25410: LD_ADDR_VAR 0 3
25414: PUSH
25415: LD_VAR 0 1
25419: ST_TO_ADDR
// end ; end ; end ;
25420: GO 25249
25422: POP
25423: POP
// if to_b then
25424: LD_VAR 0 4
25428: IFFALSE 25500
// ComBuild ( NearestUnitToXY ( eng , to_b [ 2 ] , to_b [ 3 ] ) , to_b [ 1 ] , to_b [ 2 ] , to_b [ 3 ] , to_b [ 4 ] ) else
25430: LD_EXP 123
25434: PPUSH
25435: LD_VAR 0 4
25439: PUSH
25440: LD_INT 2
25442: ARRAY
25443: PPUSH
25444: LD_VAR 0 4
25448: PUSH
25449: LD_INT 3
25451: ARRAY
25452: PPUSH
25453: CALL_OW 73
25457: PPUSH
25458: LD_VAR 0 4
25462: PUSH
25463: LD_INT 1
25465: ARRAY
25466: PPUSH
25467: LD_VAR 0 4
25471: PUSH
25472: LD_INT 2
25474: ARRAY
25475: PPUSH
25476: LD_VAR 0 4
25480: PUSH
25481: LD_INT 3
25483: ARRAY
25484: PPUSH
25485: LD_VAR 0 4
25489: PUSH
25490: LD_INT 4
25492: ARRAY
25493: PPUSH
25494: CALL_OW 145
25498: GO 25536
// if to_up then
25500: LD_VAR 0 3
25504: IFFALSE 25536
// ComUpgrade ( get_build ( i [ 2 ] , i [ 3 ] , 0 ) ) ;
25506: LD_VAR 0 1
25510: PUSH
25511: LD_INT 2
25513: ARRAY
25514: PPUSH
25515: LD_VAR 0 1
25519: PUSH
25520: LD_INT 3
25522: ARRAY
25523: PPUSH
25524: LD_INT 0
25526: PPUSH
25527: CALL 26179 0 3
25531: PPUSH
25532: CALL_OW 146
// enable ;
25536: ENABLE
// end ;
25537: PPOPN 7
25539: END
// every 0 0$4 + 0 0$1.5 do var i , j , to_up , to_b , builds , weap , co_tam_stoji ;
25540: GO 25542
25542: DISABLE
25543: LD_INT 0
25545: PPUSH
25546: PPUSH
25547: PPUSH
25548: PPUSH
25549: PPUSH
25550: PPUSH
25551: PPUSH
// begin for i in builds4 do
25552: LD_ADDR_VAR 0 1
25556: PUSH
25557: LD_EXP 107
25561: PUSH
25562: FOR_IN
25563: IFFALSE 25735
// begin if i [ 7 ] then
25565: LD_VAR 0 1
25569: PUSH
25570: LD_INT 7
25572: ARRAY
25573: IFFALSE 25733
// begin co_tam_stoji := GetBType ( get_build ( i [ 2 ] , i [ 3 ] , 0 ) ) ;
25575: LD_ADDR_VAR 0 7
25579: PUSH
25580: LD_VAR 0 1
25584: PUSH
25585: LD_INT 2
25587: ARRAY
25588: PPUSH
25589: LD_VAR 0 1
25593: PUSH
25594: LD_INT 3
25596: ARRAY
25597: PPUSH
25598: LD_INT 0
25600: PPUSH
25601: CALL 26179 0 3
25605: PPUSH
25606: CALL_OW 266
25610: ST_TO_ADDR
// if GetSide ( co_tam_stoji ) = ai then
25611: LD_VAR 0 7
25615: PPUSH
25616: CALL_OW 255
25620: PUSH
25621: LD_EXP 6
25625: EQUAL
25626: IFFALSE 25733
// if co_tam_stoji = - 1 then
25628: LD_VAR 0 7
25632: PUSH
25633: LD_INT 1
25635: NEG
25636: EQUAL
25637: IFFALSE 25703
// begin to_b := [ BasicFrom ( i [ 1 ] ) , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 5 ] ] ;
25639: LD_ADDR_VAR 0 4
25643: PUSH
25644: LD_VAR 0 1
25648: PUSH
25649: LD_INT 1
25651: ARRAY
25652: PPUSH
25653: CALL 19068 0 1
25657: PUSH
25658: LD_VAR 0 1
25662: PUSH
25663: LD_INT 2
25665: ARRAY
25666: PUSH
25667: LD_VAR 0 1
25671: PUSH
25672: LD_INT 3
25674: ARRAY
25675: PUSH
25676: LD_VAR 0 1
25680: PUSH
25681: LD_INT 4
25683: ARRAY
25684: PUSH
25685: LD_VAR 0 1
25689: PUSH
25690: LD_INT 5
25692: ARRAY
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: ST_TO_ADDR
// end else
25701: GO 25733
// if UpgradeableTo ( co_tam_stoji , i [ 1 ] ) then
25703: LD_VAR 0 7
25707: PPUSH
25708: LD_VAR 0 1
25712: PUSH
25713: LD_INT 1
25715: ARRAY
25716: PPUSH
25717: CALL 18804 0 2
25721: IFFALSE 25733
// begin to_up := i ;
25723: LD_ADDR_VAR 0 3
25727: PUSH
25728: LD_VAR 0 1
25732: ST_TO_ADDR
// end ; end ; end ;
25733: GO 25562
25735: POP
25736: POP
// if to_b then
25737: LD_VAR 0 4
25741: IFFALSE 25813
// ComBuild ( NearestUnitToXY ( eng , to_b [ 2 ] , to_b [ 3 ] ) , to_b [ 1 ] , to_b [ 2 ] , to_b [ 3 ] , to_b [ 4 ] ) else
25743: LD_EXP 123
25747: PPUSH
25748: LD_VAR 0 4
25752: PUSH
25753: LD_INT 2
25755: ARRAY
25756: PPUSH
25757: LD_VAR 0 4
25761: PUSH
25762: LD_INT 3
25764: ARRAY
25765: PPUSH
25766: CALL_OW 73
25770: PPUSH
25771: LD_VAR 0 4
25775: PUSH
25776: LD_INT 1
25778: ARRAY
25779: PPUSH
25780: LD_VAR 0 4
25784: PUSH
25785: LD_INT 2
25787: ARRAY
25788: PPUSH
25789: LD_VAR 0 4
25793: PUSH
25794: LD_INT 3
25796: ARRAY
25797: PPUSH
25798: LD_VAR 0 4
25802: PUSH
25803: LD_INT 4
25805: ARRAY
25806: PPUSH
25807: CALL_OW 145
25811: GO 25849
// if to_up then
25813: LD_VAR 0 3
25817: IFFALSE 25849
// ComUpgrade ( get_build ( i [ 2 ] , i [ 3 ] , 0 ) ) ;
25819: LD_VAR 0 1
25823: PUSH
25824: LD_INT 2
25826: ARRAY
25827: PPUSH
25828: LD_VAR 0 1
25832: PUSH
25833: LD_INT 3
25835: ARRAY
25836: PPUSH
25837: LD_INT 0
25839: PPUSH
25840: CALL 26179 0 3
25844: PPUSH
25845: CALL_OW 146
// enable ;
25849: ENABLE
// end ;
25850: PPOPN 7
25852: END
// every 0 0$4 + 0 0$2.5 trigger ( not OvsyenkoTaken ) or ( OvsyenkoCaptured ) do var i , j , to_up , to_b , builds , weap , co_tam_stoji ;
25853: LD_EXP 14
25857: NOT
25858: PUSH
25859: LD_EXP 15
25863: OR
25864: IFFALSE 26176
25866: GO 25868
25868: DISABLE
25869: LD_INT 0
25871: PPUSH
25872: PPUSH
25873: PPUSH
25874: PPUSH
25875: PPUSH
25876: PPUSH
25877: PPUSH
// begin for i in builds1 do
25878: LD_ADDR_VAR 0 1
25882: PUSH
25883: LD_EXP 104
25887: PUSH
25888: FOR_IN
25889: IFFALSE 26061
// begin if i [ 7 ] then
25891: LD_VAR 0 1
25895: PUSH
25896: LD_INT 7
25898: ARRAY
25899: IFFALSE 26059
// begin co_tam_stoji := GetBType ( get_build ( i [ 2 ] , i [ 3 ] , 0 ) ) ;
25901: LD_ADDR_VAR 0 7
25905: PUSH
25906: LD_VAR 0 1
25910: PUSH
25911: LD_INT 2
25913: ARRAY
25914: PPUSH
25915: LD_VAR 0 1
25919: PUSH
25920: LD_INT 3
25922: ARRAY
25923: PPUSH
25924: LD_INT 0
25926: PPUSH
25927: CALL 26179 0 3
25931: PPUSH
25932: CALL_OW 266
25936: ST_TO_ADDR
// if GetSide ( co_tam_stoji ) = ai then
25937: LD_VAR 0 7
25941: PPUSH
25942: CALL_OW 255
25946: PUSH
25947: LD_EXP 6
25951: EQUAL
25952: IFFALSE 26059
// if co_tam_stoji = - 1 then
25954: LD_VAR 0 7
25958: PUSH
25959: LD_INT 1
25961: NEG
25962: EQUAL
25963: IFFALSE 26029
// begin to_b := [ BasicFrom ( i [ 1 ] ) , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 5 ] ] ;
25965: LD_ADDR_VAR 0 4
25969: PUSH
25970: LD_VAR 0 1
25974: PUSH
25975: LD_INT 1
25977: ARRAY
25978: PPUSH
25979: CALL 19068 0 1
25983: PUSH
25984: LD_VAR 0 1
25988: PUSH
25989: LD_INT 2
25991: ARRAY
25992: PUSH
25993: LD_VAR 0 1
25997: PUSH
25998: LD_INT 3
26000: ARRAY
26001: PUSH
26002: LD_VAR 0 1
26006: PUSH
26007: LD_INT 4
26009: ARRAY
26010: PUSH
26011: LD_VAR 0 1
26015: PUSH
26016: LD_INT 5
26018: ARRAY
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: ST_TO_ADDR
// end else
26027: GO 26059
// if UpgradeableTo ( co_tam_stoji , i [ 1 ] ) then
26029: LD_VAR 0 7
26033: PPUSH
26034: LD_VAR 0 1
26038: PUSH
26039: LD_INT 1
26041: ARRAY
26042: PPUSH
26043: CALL 18804 0 2
26047: IFFALSE 26059
// begin to_up := i ;
26049: LD_ADDR_VAR 0 3
26053: PUSH
26054: LD_VAR 0 1
26058: ST_TO_ADDR
// end ; end ; end ;
26059: GO 25888
26061: POP
26062: POP
// if to_b then
26063: LD_VAR 0 4
26067: IFFALSE 26139
// ComBuild ( NearestUnitToXY ( eng , to_b [ 2 ] , to_b [ 3 ] ) , to_b [ 1 ] , to_b [ 2 ] , to_b [ 3 ] , to_b [ 4 ] ) else
26069: LD_EXP 123
26073: PPUSH
26074: LD_VAR 0 4
26078: PUSH
26079: LD_INT 2
26081: ARRAY
26082: PPUSH
26083: LD_VAR 0 4
26087: PUSH
26088: LD_INT 3
26090: ARRAY
26091: PPUSH
26092: CALL_OW 73
26096: PPUSH
26097: LD_VAR 0 4
26101: PUSH
26102: LD_INT 1
26104: ARRAY
26105: PPUSH
26106: LD_VAR 0 4
26110: PUSH
26111: LD_INT 2
26113: ARRAY
26114: PPUSH
26115: LD_VAR 0 4
26119: PUSH
26120: LD_INT 3
26122: ARRAY
26123: PPUSH
26124: LD_VAR 0 4
26128: PUSH
26129: LD_INT 4
26131: ARRAY
26132: PPUSH
26133: CALL_OW 145
26137: GO 26175
// if to_up then
26139: LD_VAR 0 3
26143: IFFALSE 26175
// ComUpgrade ( get_build ( i [ 2 ] , i [ 3 ] , 0 ) ) ;
26145: LD_VAR 0 1
26149: PUSH
26150: LD_INT 2
26152: ARRAY
26153: PPUSH
26154: LD_VAR 0 1
26158: PUSH
26159: LD_INT 3
26161: ARRAY
26162: PPUSH
26163: LD_INT 0
26165: PPUSH
26166: CALL 26179 0 3
26170: PPUSH
26171: CALL_OW 146
// enable ;
26175: ENABLE
// end ;
26176: PPOPN 7
26178: END
// function get_build ( x , y , btype ) ; begin
26179: LD_INT 0
26181: PPUSH
// result := HexInfo ( x , y ) ;
26182: LD_ADDR_VAR 0 4
26186: PUSH
26187: LD_VAR 0 1
26191: PPUSH
26192: LD_VAR 0 2
26196: PPUSH
26197: CALL_OW 428
26201: ST_TO_ADDR
// if result < 1 then
26202: LD_VAR 0 4
26206: PUSH
26207: LD_INT 1
26209: LESS
26210: IFFALSE 26220
// result := 0 ;
26212: LD_ADDR_VAR 0 4
26216: PUSH
26217: LD_INT 0
26219: ST_TO_ADDR
// if btype then
26220: LD_VAR 0 3
26224: IFFALSE 26276
// if btype <> GetBType ( result ) then
26226: LD_VAR 0 3
26230: PUSH
26231: LD_VAR 0 4
26235: PPUSH
26236: CALL_OW 266
26240: NONEQUAL
26241: IFFALSE 26253
// result := 0 else
26243: LD_ADDR_VAR 0 4
26247: PUSH
26248: LD_INT 0
26250: ST_TO_ADDR
26251: GO 26276
// if unit_building <> GetType ( result ) then
26253: LD_INT 3
26255: PUSH
26256: LD_VAR 0 4
26260: PPUSH
26261: CALL_OW 247
26265: NONEQUAL
26266: IFFALSE 26276
// result := 0 ;
26268: LD_ADDR_VAR 0 4
26272: PUSH
26273: LD_INT 0
26275: ST_TO_ADDR
// end ; end_of_file
26276: LD_VAR 0 4
26280: RET
// var opravit ; var opravari ; every 0 0$3 trigger not under_attack do var zivoty , i , bb ;
26281: LD_EXP 140
26285: NOT
26286: IFFALSE 26469
26288: GO 26290
26290: DISABLE
26291: LD_INT 0
26293: PPUSH
26294: PPUSH
26295: PPUSH
// begin opravit := [ ] ;
26296: LD_ADDR_LOC 19
26300: PUSH
26301: EMPTY
26302: ST_TO_ADDR
// zivoty := [ ] ;
26303: LD_ADDR_VAR 0 1
26307: PUSH
26308: EMPTY
26309: ST_TO_ADDR
// for i in UnitFilter ( can_repair , [ f_side , ai ] ) do
26310: LD_ADDR_VAR 0 2
26314: PUSH
26315: LD_EXP 116
26319: PPUSH
26320: LD_INT 22
26322: PUSH
26323: LD_EXP 6
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PPUSH
26332: CALL_OW 72
26336: PUSH
26337: FOR_IN
26338: IFFALSE 26440
// begin if GetLives ( i ) < 1000 and ( difficulty > 2 and GetX ( i ) = 41 and GetX ( i ) = 23 ) then
26340: LD_VAR 0 2
26344: PPUSH
26345: CALL_OW 256
26349: PUSH
26350: LD_INT 1000
26352: LESS
26353: PUSH
26354: LD_OWVAR 67
26358: PUSH
26359: LD_INT 2
26361: GREATER
26362: PUSH
26363: LD_VAR 0 2
26367: PPUSH
26368: CALL_OW 250
26372: PUSH
26373: LD_INT 41
26375: EQUAL
26376: AND
26377: PUSH
26378: LD_VAR 0 2
26382: PPUSH
26383: CALL_OW 250
26387: PUSH
26388: LD_INT 23
26390: EQUAL
26391: AND
26392: AND
26393: IFFALSE 26438
// begin opravit := opravit ^ [ i ] ;
26395: LD_ADDR_LOC 19
26399: PUSH
26400: LD_LOC 19
26404: PUSH
26405: LD_VAR 0 2
26409: PUSH
26410: EMPTY
26411: LIST
26412: ADD
26413: ST_TO_ADDR
// zivoty := zivoty ^ [ GetLives ( i ) ] ;
26414: LD_ADDR_VAR 0 1
26418: PUSH
26419: LD_VAR 0 1
26423: PUSH
26424: LD_VAR 0 2
26428: PPUSH
26429: CALL_OW 256
26433: PUSH
26434: EMPTY
26435: LIST
26436: ADD
26437: ST_TO_ADDR
// end ; end ;
26438: GO 26337
26440: POP
26441: POP
// if opravit then
26442: LD_LOC 19
26446: IFFALSE 26468
// begin opravit := SortListByListAsc ( opravit , zivoty ) ;
26448: LD_ADDR_LOC 19
26452: PUSH
26453: LD_LOC 19
26457: PPUSH
26458: LD_VAR 0 1
26462: PPUSH
26463: CALL_OW 76
26467: ST_TO_ADDR
// end ; enable ;
26468: ENABLE
// end ;
26469: PPOPN 3
26471: END
// every 0 0$3 trigger not under_attack do
26472: LD_EXP 140
26476: NOT
26477: IFFALSE 26571
26479: GO 26481
26481: DISABLE
// begin if opravit then
26482: LD_LOC 19
26486: IFFALSE 26570
// begin if opravit [ 1 ] in can_repair then
26488: LD_LOC 19
26492: PUSH
26493: LD_INT 1
26495: ARRAY
26496: PUSH
26497: LD_EXP 116
26501: IN
26502: IFFALSE 26570
// ComRepairBuilding ( UnitFilter ( eng , [ f_dist , opravit [ 1 ] , ( 5 - GetLives ( opravit [ 1 ] ) div 200 ) * 7 ] ) , opravit [ 1 ] ) ;
26504: LD_EXP 123
26508: PPUSH
26509: LD_INT 91
26511: PUSH
26512: LD_LOC 19
26516: PUSH
26517: LD_INT 1
26519: ARRAY
26520: PUSH
26521: LD_INT 5
26523: PUSH
26524: LD_LOC 19
26528: PUSH
26529: LD_INT 1
26531: ARRAY
26532: PPUSH
26533: CALL_OW 256
26537: PUSH
26538: LD_INT 200
26540: DIV
26541: MINUS
26542: PUSH
26543: LD_INT 7
26545: MUL
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: LIST
26551: PPUSH
26552: CALL_OW 72
26556: PPUSH
26557: LD_LOC 19
26561: PUSH
26562: LD_INT 1
26564: ARRAY
26565: PPUSH
26566: CALL_OW 130
// end ; enable ;
26570: ENABLE
// end ; end_of_file
26571: END
// export fort , ctrl , sol , dep , eng , fact , mec , lab , sci ; export b1 , b2 , b3 , b4 , b5 ; export a1 , a2 , a3 , a4 , a5 ; export attack , defence ; export under_attack ; export mcdef ; export ct ; export sib_dul ; every 3 do
26572: GO 26574
26574: DISABLE
// begin sol := FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) ;
26575: LD_ADDR_EXP 121
26579: PUSH
26580: LD_INT 22
26582: PUSH
26583: LD_EXP 6
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 25
26594: PUSH
26595: LD_INT 1
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PPUSH
26606: CALL_OW 69
26610: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , ai ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26611: LD_ADDR_EXP 122
26615: PUSH
26616: LD_INT 22
26618: PUSH
26619: LD_EXP 6
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 2
26630: PUSH
26631: LD_INT 30
26633: PUSH
26634: LD_INT 0
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 30
26643: PUSH
26644: LD_INT 1
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: LIST
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PPUSH
26660: CALL_OW 69
26664: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_engineer ] ] ) ;
26665: LD_ADDR_EXP 123
26669: PUSH
26670: LD_INT 22
26672: PUSH
26673: LD_EXP 6
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 25
26684: PUSH
26685: LD_INT 2
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PPUSH
26696: CALL_OW 69
26700: ST_TO_ADDR
// fact := FilterAllUnits ( [ [ f_side , ai ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_workshop ] ] ] ) ;
26701: LD_ADDR_EXP 124
26705: PUSH
26706: LD_INT 22
26708: PUSH
26709: LD_EXP 6
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 2
26720: PUSH
26721: LD_INT 30
26723: PUSH
26724: LD_INT 3
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 30
26733: PUSH
26734: LD_INT 2
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: LIST
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PPUSH
26750: CALL_OW 69
26754: ST_TO_ADDR
// ctrl := FilterAllUnits ( [ [ f_side , ai ] , [ f_btype , b_control_tower ] ] ) ;
26755: LD_ADDR_EXP 120
26759: PUSH
26760: LD_INT 22
26762: PUSH
26763: LD_EXP 6
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: LD_INT 30
26774: PUSH
26775: LD_INT 36
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PPUSH
26786: CALL_OW 69
26790: ST_TO_ADDR
// mec := FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) ;
26791: LD_ADDR_EXP 125
26795: PUSH
26796: LD_INT 22
26798: PUSH
26799: LD_EXP 6
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 25
26810: PUSH
26811: LD_INT 3
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PPUSH
26822: CALL_OW 69
26826: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , ai ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
26827: LD_ADDR_EXP 126
26831: PUSH
26832: LD_INT 22
26834: PUSH
26835: LD_EXP 6
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: LD_INT 2
26846: PUSH
26847: LD_INT 30
26849: PUSH
26850: LD_INT 6
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 30
26859: PUSH
26860: LD_INT 7
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 30
26869: PUSH
26870: LD_INT 8
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PPUSH
26887: CALL_OW 69
26891: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_scientistic ] ] ) ;
26892: LD_ADDR_EXP 127
26896: PUSH
26897: LD_INT 22
26899: PUSH
26900: LD_EXP 6
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 25
26911: PUSH
26912: LD_INT 4
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PPUSH
26923: CALL_OW 69
26927: ST_TO_ADDR
// sib_dul := FilterAllUnits ( [ [ f_side , ai ] , [ f_btype , b_siberite_mine ] , [ f_distxy , 101 , 93 , 5 ] ] ) ;
26928: LD_ADDR_EXP 143
26932: PUSH
26933: LD_INT 22
26935: PUSH
26936: LD_EXP 6
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 30
26947: PUSH
26948: LD_INT 30
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 92
26957: PUSH
26958: LD_INT 101
26960: PUSH
26961: LD_INT 93
26963: PUSH
26964: LD_INT 5
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: LIST
26977: PPUSH
26978: CALL_OW 69
26982: ST_TO_ADDR
// if sib_dul then
26983: LD_EXP 143
26987: IFFALSE 27003
// sib_dul := sib_dul [ 1 ] ;
26989: LD_ADDR_EXP 143
26993: PUSH
26994: LD_EXP 143
26998: PUSH
26999: LD_INT 1
27001: ARRAY
27002: ST_TO_ADDR
// end ;
27003: END
// every 20 20$0 do var a , i ;
27004: GO 27006
27006: DISABLE
27007: LD_INT 0
27009: PPUSH
27010: PPUSH
// begin InitUc ;
27011: CALL_OW 18
// InitHc ;
27015: CALL_OW 19
// uc_nation := nation_american ;
27019: LD_ADDR_OWVAR 21
27023: PUSH
27024: LD_INT 1
27026: ST_TO_ADDR
// uc_side := americans ;
27027: LD_ADDR_OWVAR 20
27031: PUSH
27032: LD_EXP 3
27036: ST_TO_ADDR
// for i := 1 to 5 do
27037: LD_ADDR_VAR 0 2
27041: PUSH
27042: DOUBLE
27043: LD_INT 1
27045: DEC
27046: ST_TO_ADDR
27047: LD_INT 5
27049: PUSH
27050: FOR_TO
27051: IFFALSE 27135
// begin PrepareMechanic ( 0 , 5 ) ;
27053: LD_INT 0
27055: PPUSH
27056: LD_INT 5
27058: PPUSH
27059: CALL_OW 383
// hc_class := class_soldier ;
27063: LD_ADDR_OWVAR 28
27067: PUSH
27068: LD_INT 1
27070: ST_TO_ADDR
// a := CreateHuman ;
27071: LD_ADDR_VAR 0 1
27075: PUSH
27076: CALL_OW 44
27080: ST_TO_ADDR
// PlaceUnitXYR ( a , 21 , 2 , 5 , false ) ;
27081: LD_VAR 0 1
27085: PPUSH
27086: LD_INT 21
27088: PPUSH
27089: LD_INT 2
27091: PPUSH
27092: LD_INT 5
27094: PPUSH
27095: LD_INT 0
27097: PPUSH
27098: CALL_OW 50
// ComMoveXY ( a , 25 , 32 ) ;
27102: LD_VAR 0 1
27106: PPUSH
27107: LD_INT 25
27109: PPUSH
27110: LD_INT 32
27112: PPUSH
27113: CALL_OW 111
// sol := sol ^ a ;
27117: LD_ADDR_EXP 121
27121: PUSH
27122: LD_EXP 121
27126: PUSH
27127: LD_VAR 0 1
27131: ADD
27132: ST_TO_ADDR
// end ;
27133: GO 27050
27135: POP
27136: POP
// end ;
27137: PPOPN 2
27139: END
// every 0 0$3 do var i , cm ;
27140: GO 27142
27142: DISABLE
27143: LD_INT 0
27145: PPUSH
27146: PPUSH
// begin if ctrl then
27147: LD_EXP 120
27151: IFFALSE 27570
// begin cm := UnitFilter ( UnitsInside ( ctrl [ 1 ] ) , [ [ f_class , class_mechanic ] ] ) ;
27153: LD_ADDR_VAR 0 2
27157: PUSH
27158: LD_EXP 120
27162: PUSH
27163: LD_INT 1
27165: ARRAY
27166: PPUSH
27167: CALL_OW 313
27171: PPUSH
27172: LD_INT 25
27174: PUSH
27175: LD_INT 3
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: EMPTY
27183: LIST
27184: PPUSH
27185: CALL_OW 72
27189: ST_TO_ADDR
// for i in cm do
27190: LD_ADDR_VAR 0 1
27194: PUSH
27195: LD_VAR 0 2
27199: PUSH
27200: FOR_IN
27201: IFFALSE 27246
// if UnitsLinked ( i ) >= GetSkill ( i , skill_mechanical ) then
27203: LD_VAR 0 1
27207: PPUSH
27208: CALL_OW 432
27212: PUSH
27213: LD_VAR 0 1
27217: PPUSH
27218: LD_INT 3
27220: PPUSH
27221: CALL_OW 259
27225: GREATEREQUAL
27226: IFFALSE 27244
// cm := cm diff i ;
27228: LD_ADDR_VAR 0 2
27232: PUSH
27233: LD_VAR 0 2
27237: PUSH
27238: LD_VAR 0 1
27242: DIFF
27243: ST_TO_ADDR
27244: GO 27200
27246: POP
27247: POP
// for i in attack do
27248: LD_ADDR_VAR 0 1
27252: PUSH
27253: LD_EXP 138
27257: PUSH
27258: FOR_IN
27259: IFFALSE 27568
// begin if not IsControledBy ( i ) then
27261: LD_VAR 0 1
27265: PPUSH
27266: CALL_OW 312
27270: NOT
27271: IFFALSE 27566
// case cm of 1 :
27273: LD_VAR 0 2
27277: PUSH
27278: LD_INT 1
27280: DOUBLE
27281: EQUAL
27282: IFTRUE 27286
27284: GO 27307
27286: POP
// ComLinkTo ( i , cm [ 1 ] ) ; 2 :
27287: LD_VAR 0 1
27291: PPUSH
27292: LD_VAR 0 2
27296: PUSH
27297: LD_INT 1
27299: ARRAY
27300: PPUSH
27301: CALL_OW 135
27305: GO 27566
27307: LD_INT 2
27309: DOUBLE
27310: EQUAL
27311: IFTRUE 27315
27313: GO 27386
27315: POP
// if UnitsLinked ( cm [ 1 ] ) <= UnitsLinked ( cm [ 2 ] ) then
27316: LD_VAR 0 2
27320: PUSH
27321: LD_INT 1
27323: ARRAY
27324: PPUSH
27325: CALL_OW 432
27329: PUSH
27330: LD_VAR 0 2
27334: PUSH
27335: LD_INT 2
27337: ARRAY
27338: PPUSH
27339: CALL_OW 432
27343: LESSEQUAL
27344: IFFALSE 27366
// ComLinkTo ( i , cm [ 1 ] ) else
27346: LD_VAR 0 1
27350: PPUSH
27351: LD_VAR 0 2
27355: PUSH
27356: LD_INT 1
27358: ARRAY
27359: PPUSH
27360: CALL_OW 135
27364: GO 27384
// ComLinkTo ( i , cm [ 2 ] ) ; 3 :
27366: LD_VAR 0 1
27370: PPUSH
27371: LD_VAR 0 2
27375: PUSH
27376: LD_INT 2
27378: ARRAY
27379: PPUSH
27380: CALL_OW 135
27384: GO 27566
27386: LD_INT 3
27388: DOUBLE
27389: EQUAL
27390: IFTRUE 27394
27392: GO 27565
27394: POP
// if UnitsLinked ( cm [ 1 ] ) <= UnitsLinked ( cm [ 2 ] ) then
27395: LD_VAR 0 2
27399: PUSH
27400: LD_INT 1
27402: ARRAY
27403: PPUSH
27404: CALL_OW 432
27408: PUSH
27409: LD_VAR 0 2
27413: PUSH
27414: LD_INT 2
27416: ARRAY
27417: PPUSH
27418: CALL_OW 432
27422: LESSEQUAL
27423: IFFALSE 27495
// if UnitsLinked ( cm [ 1 ] ) <= UnitsLinked ( cm [ 3 ] ) then
27425: LD_VAR 0 2
27429: PUSH
27430: LD_INT 1
27432: ARRAY
27433: PPUSH
27434: CALL_OW 432
27438: PUSH
27439: LD_VAR 0 2
27443: PUSH
27444: LD_INT 3
27446: ARRAY
27447: PPUSH
27448: CALL_OW 432
27452: LESSEQUAL
27453: IFFALSE 27475
// ComLinkTo ( i , cm [ 1 ] ) else
27455: LD_VAR 0 1
27459: PPUSH
27460: LD_VAR 0 2
27464: PUSH
27465: LD_INT 1
27467: ARRAY
27468: PPUSH
27469: CALL_OW 135
27473: GO 27493
// ComLinkTo ( i , cm [ 3 ] ) else
27475: LD_VAR 0 1
27479: PPUSH
27480: LD_VAR 0 2
27484: PUSH
27485: LD_INT 3
27487: ARRAY
27488: PPUSH
27489: CALL_OW 135
27493: GO 27563
// if UnitsLinked ( cm [ 2 ] ) <= UnitsLinked ( cm [ 3 ] ) then
27495: LD_VAR 0 2
27499: PUSH
27500: LD_INT 2
27502: ARRAY
27503: PPUSH
27504: CALL_OW 432
27508: PUSH
27509: LD_VAR 0 2
27513: PUSH
27514: LD_INT 3
27516: ARRAY
27517: PPUSH
27518: CALL_OW 432
27522: LESSEQUAL
27523: IFFALSE 27545
// ComLinkTo ( i , cm [ 2 ] ) else
27525: LD_VAR 0 1
27529: PPUSH
27530: LD_VAR 0 2
27534: PUSH
27535: LD_INT 2
27537: ARRAY
27538: PPUSH
27539: CALL_OW 135
27543: GO 27563
// ComLinkTo ( i , cm [ 3 ] ) ; end ;
27545: LD_VAR 0 1
27549: PPUSH
27550: LD_VAR 0 2
27554: PUSH
27555: LD_INT 3
27557: ARRAY
27558: PPUSH
27559: CALL_OW 135
27563: GO 27566
27565: POP
// end ;
27566: GO 27258
27568: POP
27569: POP
// end ; enable ;
27570: ENABLE
// end ;
27571: PPOPN 2
27573: END
// every 0 0$2 + 0 0$0.1 do var i , j , blds , hums , cars ;
27574: GO 27576
27576: DISABLE
27577: LD_INT 0
27579: PPUSH
27580: PPUSH
27581: PPUSH
27582: PPUSH
27583: PPUSH
// begin blds := UnitFilter ( fort , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_not , [ f_occupied ] ] ] ) ;
27584: LD_ADDR_VAR 0 3
27588: PUSH
27589: LD_EXP 119
27593: PPUSH
27594: LD_INT 2
27596: PUSH
27597: LD_INT 30
27599: PUSH
27600: LD_INT 32
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 30
27609: PUSH
27610: LD_INT 31
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 3
27624: PUSH
27625: LD_INT 59
27627: PUSH
27628: EMPTY
27629: LIST
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PPUSH
27639: CALL_OW 72
27643: ST_TO_ADDR
// hums := [ ] ;
27644: LD_ADDR_VAR 0 4
27648: PUSH
27649: EMPTY
27650: ST_TO_ADDR
// for i in sol do
27651: LD_ADDR_VAR 0 1
27655: PUSH
27656: LD_EXP 121
27660: PUSH
27661: FOR_IN
27662: IFFALSE 27776
// if ( IsIdle ( i ) and GetBType ( IsInUnit ( i ) ) <> b_bunker and GetBType ( IsInUnit ( i ) ) <> b_breastwork ) or GetBType ( IsInUnit ( i ) ) = b_barracks or GetBType ( IsInUnit ( i ) ) = b_armoury then
27664: LD_VAR 0 1
27668: PPUSH
27669: CALL_OW 316
27673: PUSH
27674: LD_VAR 0 1
27678: PPUSH
27679: CALL_OW 310
27683: PPUSH
27684: CALL_OW 266
27688: PUSH
27689: LD_INT 32
27691: NONEQUAL
27692: AND
27693: PUSH
27694: LD_VAR 0 1
27698: PPUSH
27699: CALL_OW 310
27703: PPUSH
27704: CALL_OW 266
27708: PUSH
27709: LD_INT 31
27711: NONEQUAL
27712: AND
27713: PUSH
27714: LD_VAR 0 1
27718: PPUSH
27719: CALL_OW 310
27723: PPUSH
27724: CALL_OW 266
27728: PUSH
27729: LD_INT 5
27731: EQUAL
27732: OR
27733: PUSH
27734: LD_VAR 0 1
27738: PPUSH
27739: CALL_OW 310
27743: PPUSH
27744: CALL_OW 266
27748: PUSH
27749: LD_INT 4
27751: EQUAL
27752: OR
27753: IFFALSE 27774
// hums := hums ^ [ i ] ;
27755: LD_ADDR_VAR 0 4
27759: PUSH
27760: LD_VAR 0 4
27764: PUSH
27765: LD_VAR 0 1
27769: PUSH
27770: EMPTY
27771: LIST
27772: ADD
27773: ST_TO_ADDR
27774: GO 27661
27776: POP
27777: POP
// for i in blds do
27778: LD_ADDR_VAR 0 1
27782: PUSH
27783: LD_VAR 0 3
27787: PUSH
27788: FOR_IN
27789: IFFALSE 27894
// begin j := NearestUnitToUnit ( UnitFilter ( hums , [ [ f_side , Getside ( i ) ] , [ f_dist , i , 30 ] ] ) , i ) ;
27791: LD_ADDR_VAR 0 2
27795: PUSH
27796: LD_VAR 0 4
27800: PPUSH
27801: LD_INT 22
27803: PUSH
27804: LD_VAR 0 1
27808: PPUSH
27809: CALL_OW 255
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 91
27820: PUSH
27821: LD_VAR 0 1
27825: PUSH
27826: LD_INT 30
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: LIST
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PPUSH
27838: CALL_OW 72
27842: PPUSH
27843: LD_VAR 0 1
27847: PPUSH
27848: CALL_OW 74
27852: ST_TO_ADDR
// ComExitBuilding ( j ) ;
27853: LD_VAR 0 2
27857: PPUSH
27858: CALL_OW 122
// AddComEnterUnit ( j , i ) ;
27862: LD_VAR 0 2
27866: PPUSH
27867: LD_VAR 0 1
27871: PPUSH
27872: CALL_OW 180
// hums := hums diff j ;
27876: LD_ADDR_VAR 0 4
27880: PUSH
27881: LD_VAR 0 4
27885: PUSH
27886: LD_VAR 0 2
27890: DIFF
27891: ST_TO_ADDR
// end ;
27892: GO 27788
27894: POP
27895: POP
// cars := UnitFilter ( defence , [ f_not , [ f_occupied ] ] ) ;
27896: LD_ADDR_VAR 0 5
27900: PUSH
27901: LD_EXP 139
27905: PPUSH
27906: LD_INT 3
27908: PUSH
27909: LD_INT 59
27911: PUSH
27912: EMPTY
27913: LIST
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PPUSH
27919: CALL_OW 72
27923: ST_TO_ADDR
// for i in cars do
27924: LD_ADDR_VAR 0 1
27928: PUSH
27929: LD_VAR 0 5
27933: PUSH
27934: FOR_IN
27935: IFFALSE 28040
// begin j := NearestUnitToUnit ( UnitFilter ( hums , [ [ f_side , Getside ( i ) ] , [ f_dist , i , 20 ] ] ) , i ) ;
27937: LD_ADDR_VAR 0 2
27941: PUSH
27942: LD_VAR 0 4
27946: PPUSH
27947: LD_INT 22
27949: PUSH
27950: LD_VAR 0 1
27954: PPUSH
27955: CALL_OW 255
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 91
27966: PUSH
27967: LD_VAR 0 1
27971: PUSH
27972: LD_INT 20
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: LIST
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PPUSH
27984: CALL_OW 72
27988: PPUSH
27989: LD_VAR 0 1
27993: PPUSH
27994: CALL_OW 74
27998: ST_TO_ADDR
// ComExitBuilding ( j ) ;
27999: LD_VAR 0 2
28003: PPUSH
28004: CALL_OW 122
// AddComEnterUnit ( j , i ) ;
28008: LD_VAR 0 2
28012: PPUSH
28013: LD_VAR 0 1
28017: PPUSH
28018: CALL_OW 180
// hums := hums diff j ;
28022: LD_ADDR_VAR 0 4
28026: PUSH
28027: LD_VAR 0 4
28031: PUSH
28032: LD_VAR 0 2
28036: DIFF
28037: ST_TO_ADDR
// end ;
28038: GO 27934
28040: POP
28041: POP
// blds := UnitFilter ( fort diff blds , [ f_not , [ f_occupied ] ] ) ;
28042: LD_ADDR_VAR 0 3
28046: PUSH
28047: LD_EXP 119
28051: PUSH
28052: LD_VAR 0 3
28056: DIFF
28057: PPUSH
28058: LD_INT 3
28060: PUSH
28061: LD_INT 59
28063: PUSH
28064: EMPTY
28065: LIST
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PPUSH
28071: CALL_OW 72
28075: ST_TO_ADDR
// for i in blds do
28076: LD_ADDR_VAR 0 1
28080: PUSH
28081: LD_VAR 0 3
28085: PUSH
28086: FOR_IN
28087: IFFALSE 28147
// ComEnterUnit ( UnitFilter ( hums , [ [ f_side , Getside ( i ) ] , [ f_dist , i , 30 ] ] ) , i ) ;
28089: LD_VAR 0 4
28093: PPUSH
28094: LD_INT 22
28096: PUSH
28097: LD_VAR 0 1
28101: PPUSH
28102: CALL_OW 255
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 91
28113: PUSH
28114: LD_VAR 0 1
28118: PUSH
28119: LD_INT 30
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: LIST
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PPUSH
28131: CALL_OW 72
28135: PPUSH
28136: LD_VAR 0 1
28140: PPUSH
28141: CALL_OW 120
28145: GO 28086
28147: POP
28148: POP
// enable ;
28149: ENABLE
// end ;
28150: PPOPN 5
28152: END
// every 0 0$2 + 0 0$0.5 do var i , j , blds , hums ;
28153: GO 28155
28155: DISABLE
28156: LD_INT 0
28158: PPUSH
28159: PPUSH
28160: PPUSH
28161: PPUSH
// begin blds := dep ;
28162: LD_ADDR_VAR 0 3
28166: PUSH
28167: LD_EXP 122
28171: ST_TO_ADDR
// hums := [ ] ;
28172: LD_ADDR_VAR 0 4
28176: PUSH
28177: EMPTY
28178: ST_TO_ADDR
// for i in eng do
28179: LD_ADDR_VAR 0 1
28183: PUSH
28184: LD_EXP 123
28188: PUSH
28189: FOR_IN
28190: IFFALSE 28236
// if IsIdle ( i ) and not IsInUnit ( i ) then
28192: LD_VAR 0 1
28196: PPUSH
28197: CALL_OW 316
28201: PUSH
28202: LD_VAR 0 1
28206: PPUSH
28207: CALL_OW 310
28211: NOT
28212: AND
28213: IFFALSE 28234
// hums := hums ^ [ i ] ;
28215: LD_ADDR_VAR 0 4
28219: PUSH
28220: LD_VAR 0 4
28224: PUSH
28225: LD_VAR 0 1
28229: PUSH
28230: EMPTY
28231: LIST
28232: ADD
28233: ST_TO_ADDR
28234: GO 28189
28236: POP
28237: POP
// for i in blds do
28238: LD_ADDR_VAR 0 1
28242: PUSH
28243: LD_VAR 0 3
28247: PUSH
28248: FOR_IN
28249: IFFALSE 28309
// ComEnterUnit ( UnitFilter ( hums , [ [ f_side , Getside ( i ) ] , [ f_dist , i , 30 ] ] ) , i ) ;
28251: LD_VAR 0 4
28255: PPUSH
28256: LD_INT 22
28258: PUSH
28259: LD_VAR 0 1
28263: PPUSH
28264: CALL_OW 255
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 91
28275: PUSH
28276: LD_VAR 0 1
28280: PUSH
28281: LD_INT 30
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: LIST
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PPUSH
28293: CALL_OW 72
28297: PPUSH
28298: LD_VAR 0 1
28302: PPUSH
28303: CALL_OW 120
28307: GO 28248
28309: POP
28310: POP
// enable ;
28311: ENABLE
// end ;
28312: PPOPN 4
28314: END
// every 0 0$2 + 0 0$0.7 do var i , j , blds , hums ;
28315: GO 28317
28317: DISABLE
28318: LD_INT 0
28320: PPUSH
28321: PPUSH
28322: PPUSH
28323: PPUSH
// begin blds := fact ;
28324: LD_ADDR_VAR 0 3
28328: PUSH
28329: LD_EXP 124
28333: ST_TO_ADDR
// hums := [ ] ;
28334: LD_ADDR_VAR 0 4
28338: PUSH
28339: EMPTY
28340: ST_TO_ADDR
// for i in mec do
28341: LD_ADDR_VAR 0 1
28345: PUSH
28346: LD_EXP 125
28350: PUSH
28351: FOR_IN
28352: IFFALSE 28413
// if ( IsIdle ( i ) and not IsInUnit ( i ) ) or not IsInArea ( i , def_base ) then
28354: LD_VAR 0 1
28358: PPUSH
28359: CALL_OW 316
28363: PUSH
28364: LD_VAR 0 1
28368: PPUSH
28369: CALL_OW 310
28373: NOT
28374: AND
28375: PUSH
28376: LD_VAR 0 1
28380: PPUSH
28381: LD_INT 19
28383: PPUSH
28384: CALL_OW 308
28388: NOT
28389: OR
28390: IFFALSE 28411
// hums := hums ^ [ i ] ;
28392: LD_ADDR_VAR 0 4
28396: PUSH
28397: LD_VAR 0 4
28401: PUSH
28402: LD_VAR 0 1
28406: PUSH
28407: EMPTY
28408: LIST
28409: ADD
28410: ST_TO_ADDR
28411: GO 28351
28413: POP
28414: POP
// for i in blds do
28415: LD_ADDR_VAR 0 1
28419: PUSH
28420: LD_VAR 0 3
28424: PUSH
28425: FOR_IN
28426: IFFALSE 28486
// ComEnterUnit ( UnitFilter ( hums , [ [ f_side , Getside ( i ) ] , [ f_dist , i , 30 ] ] ) , i ) ;
28428: LD_VAR 0 4
28432: PPUSH
28433: LD_INT 22
28435: PUSH
28436: LD_VAR 0 1
28440: PPUSH
28441: CALL_OW 255
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 91
28452: PUSH
28453: LD_VAR 0 1
28457: PUSH
28458: LD_INT 30
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: LIST
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PPUSH
28470: CALL_OW 72
28474: PPUSH
28475: LD_VAR 0 1
28479: PPUSH
28480: CALL_OW 120
28484: GO 28425
28486: POP
28487: POP
// enable ;
28488: ENABLE
// end ;
28489: PPOPN 4
28491: END
// every 0 0$2 + 0 0$0.35 do var i , j , bld , hums ;
28492: GO 28494
28494: DISABLE
28495: LD_INT 0
28497: PPUSH
28498: PPUSH
28499: PPUSH
28500: PPUSH
// begin if ct < 2 then
28501: LD_EXP 142
28505: PUSH
28506: LD_INT 2
28508: LESS
28509: IFFALSE 28713
// if ctrl then
28511: LD_EXP 120
28515: IFFALSE 28713
// begin bld := ctrl [ 1 ] ;
28517: LD_ADDR_VAR 0 3
28521: PUSH
28522: LD_EXP 120
28526: PUSH
28527: LD_INT 1
28529: ARRAY
28530: ST_TO_ADDR
// hums := [ ] ;
28531: LD_ADDR_VAR 0 4
28535: PUSH
28536: EMPTY
28537: ST_TO_ADDR
// for i in get_x_best ( mec , mec , skill_mechanical , 0 , false ) do
28538: LD_ADDR_VAR 0 1
28542: PUSH
28543: LD_EXP 125
28547: PPUSH
28548: LD_EXP 125
28552: PPUSH
28553: LD_INT 3
28555: PPUSH
28556: LD_INT 0
28558: PPUSH
28559: LD_INT 0
28561: PPUSH
28562: CALL 10371 0 5
28566: PUSH
28567: FOR_IN
28568: IFFALSE 28631
// if GetBType ( IsInUnit ( i ) ) <> b_control_tower and GetType ( IsInUnit ( i ) ) <> unit_vehicle then
28570: LD_VAR 0 1
28574: PPUSH
28575: CALL_OW 310
28579: PPUSH
28580: CALL_OW 266
28584: PUSH
28585: LD_INT 36
28587: NONEQUAL
28588: PUSH
28589: LD_VAR 0 1
28593: PPUSH
28594: CALL_OW 310
28598: PPUSH
28599: CALL_OW 247
28603: PUSH
28604: LD_INT 2
28606: NONEQUAL
28607: AND
28608: IFFALSE 28629
// hums := hums ^ [ i ] ;
28610: LD_ADDR_VAR 0 4
28614: PUSH
28615: LD_VAR 0 4
28619: PUSH
28620: LD_VAR 0 1
28624: PUSH
28625: EMPTY
28626: LIST
28627: ADD
28628: ST_TO_ADDR
28629: GO 28567
28631: POP
28632: POP
// ct := ct union get_x_best ( UnitFilter ( mec , [ [ f_dist , bld , 50 ] ] ) , 2 , skill_mechanical , 0 , false ) ;
28633: LD_ADDR_EXP 142
28637: PUSH
28638: LD_EXP 142
28642: PUSH
28643: LD_EXP 125
28647: PPUSH
28648: LD_INT 91
28650: PUSH
28651: LD_VAR 0 3
28655: PUSH
28656: LD_INT 50
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: LIST
28663: PUSH
28664: EMPTY
28665: LIST
28666: PPUSH
28667: CALL_OW 72
28671: PPUSH
28672: LD_INT 2
28674: PPUSH
28675: LD_INT 3
28677: PPUSH
28678: LD_INT 0
28680: PPUSH
28681: LD_INT 0
28683: PPUSH
28684: CALL 10371 0 5
28688: UNION
28689: ST_TO_ADDR
// remove_from_humans ( ct ) ;
28690: LD_EXP 142
28694: PPUSH
28695: CALL 32115 0 1
// ComEnterUnit ( ct , bld ) ;
28699: LD_EXP 142
28703: PPUSH
28704: LD_VAR 0 3
28708: PPUSH
28709: CALL_OW 120
// end ; enable ;
28713: ENABLE
// end ;
28714: PPOPN 4
28716: END
// every 0 0$2 + 0 0$0.9 do var i , j , blds , hums ;
28717: GO 28719
28719: DISABLE
28720: LD_INT 0
28722: PPUSH
28723: PPUSH
28724: PPUSH
28725: PPUSH
// begin blds := lab ;
28726: LD_ADDR_VAR 0 3
28730: PUSH
28731: LD_EXP 126
28735: ST_TO_ADDR
// hums := [ ] ;
28736: LD_ADDR_VAR 0 4
28740: PUSH
28741: EMPTY
28742: ST_TO_ADDR
// for i in sci do
28743: LD_ADDR_VAR 0 1
28747: PUSH
28748: LD_EXP 127
28752: PUSH
28753: FOR_IN
28754: IFFALSE 28800
// if IsIdle ( i ) and not IsInUnit ( i ) then
28756: LD_VAR 0 1
28760: PPUSH
28761: CALL_OW 316
28765: PUSH
28766: LD_VAR 0 1
28770: PPUSH
28771: CALL_OW 310
28775: NOT
28776: AND
28777: IFFALSE 28798
// hums := hums ^ [ i ] ;
28779: LD_ADDR_VAR 0 4
28783: PUSH
28784: LD_VAR 0 4
28788: PUSH
28789: LD_VAR 0 1
28793: PUSH
28794: EMPTY
28795: LIST
28796: ADD
28797: ST_TO_ADDR
28798: GO 28753
28800: POP
28801: POP
// for i in blds do
28802: LD_ADDR_VAR 0 1
28806: PUSH
28807: LD_VAR 0 3
28811: PUSH
28812: FOR_IN
28813: IFFALSE 28873
// ComEnterUnit ( UnitFilter ( hums , [ [ f_side , Getside ( i ) ] , [ f_dist , i , 30 ] ] ) , i ) ;
28815: LD_VAR 0 4
28819: PPUSH
28820: LD_INT 22
28822: PUSH
28823: LD_VAR 0 1
28827: PPUSH
28828: CALL_OW 255
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 91
28839: PUSH
28840: LD_VAR 0 1
28844: PUSH
28845: LD_INT 30
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: LIST
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PPUSH
28857: CALL_OW 72
28861: PPUSH
28862: LD_VAR 0 1
28866: PPUSH
28867: CALL_OW 120
28871: GO 28812
28873: POP
28874: POP
// enable ;
28875: ENABLE
// end ;
28876: PPOPN 4
28878: END
// every 0 0$2 + 0 0$0.8 do var i , j , blds , hums ;
28879: GO 28881
28881: DISABLE
28882: LD_INT 0
28884: PPUSH
28885: PPUSH
28886: PPUSH
28887: PPUSH
// begin for i in a3 ^ a4 do
28888: LD_ADDR_VAR 0 1
28892: PUSH
28893: LD_EXP 135
28897: PUSH
28898: LD_EXP 136
28902: ADD
28903: PUSH
28904: FOR_IN
28905: IFFALSE 29122
// begin if IsIdle ( i ) and not IsInArea ( i , def_base ) and not IsInUnit ( i ) then
28907: LD_VAR 0 1
28911: PPUSH
28912: CALL_OW 316
28916: PUSH
28917: LD_VAR 0 1
28921: PPUSH
28922: LD_INT 19
28924: PPUSH
28925: CALL_OW 308
28929: NOT
28930: AND
28931: PUSH
28932: LD_VAR 0 1
28936: PPUSH
28937: CALL_OW 310
28941: NOT
28942: AND
28943: IFFALSE 28999
// if GetDistUnitArea ( i , abase3 ) < GetDistUnitArea ( i , abase4 ) then
28945: LD_VAR 0 1
28949: PPUSH
28950: LD_INT 6
28952: PPUSH
28953: CALL_OW 299
28957: PUSH
28958: LD_VAR 0 1
28962: PPUSH
28963: LD_INT 7
28965: PPUSH
28966: CALL_OW 299
28970: LESS
28971: IFFALSE 28987
// ComMoveToArea ( i , abase3 ) else
28973: LD_VAR 0 1
28977: PPUSH
28978: LD_INT 6
28980: PPUSH
28981: CALL_OW 113
28985: GO 28999
// ComMoveToArea ( i , abase4 ) ;
28987: LD_VAR 0 1
28991: PPUSH
28992: LD_INT 7
28994: PPUSH
28995: CALL_OW 113
// if IsIdle ( IsInUnit ( i ) ) and not IsInArea ( IsInUnit ( i ) , def_base ) and IsInUnit ( i ) then
28999: LD_VAR 0 1
29003: PPUSH
29004: CALL_OW 310
29008: PPUSH
29009: CALL_OW 316
29013: PUSH
29014: LD_VAR 0 1
29018: PPUSH
29019: CALL_OW 310
29023: PPUSH
29024: LD_INT 19
29026: PPUSH
29027: CALL_OW 308
29031: NOT
29032: AND
29033: PUSH
29034: LD_VAR 0 1
29038: PPUSH
29039: CALL_OW 310
29043: AND
29044: IFFALSE 29120
// if GetDistUnitArea ( IsInUnit ( i ) , abase3 ) < GetDistUnitArea ( IsInUnit ( i ) , abase4 ) then
29046: LD_VAR 0 1
29050: PPUSH
29051: CALL_OW 310
29055: PPUSH
29056: LD_INT 6
29058: PPUSH
29059: CALL_OW 299
29063: PUSH
29064: LD_VAR 0 1
29068: PPUSH
29069: CALL_OW 310
29073: PPUSH
29074: LD_INT 7
29076: PPUSH
29077: CALL_OW 299
29081: LESS
29082: IFFALSE 29103
// ComMoveToArea ( IsInUnit ( i ) , abase3 ) else
29084: LD_VAR 0 1
29088: PPUSH
29089: CALL_OW 310
29093: PPUSH
29094: LD_INT 6
29096: PPUSH
29097: CALL_OW 113
29101: GO 29120
// ComMoveToArea ( IsInUnit ( i ) , abase4 ) ;
29103: LD_VAR 0 1
29107: PPUSH
29108: CALL_OW 310
29112: PPUSH
29113: LD_INT 7
29115: PPUSH
29116: CALL_OW 113
// end ;
29120: GO 28904
29122: POP
29123: POP
// enable ;
29124: ENABLE
// end ; end_of_file
29125: PPOPN 4
29127: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = you then
29128: LD_VAR 0 2
29132: PPUSH
29133: CALL_OW 255
29137: PUSH
29138: LD_EXP 1
29142: EQUAL
29143: IFFALSE 29181
// case tech of tech_MatPred :
29145: LD_VAR 0 1
29149: PUSH
29150: LD_INT 9
29152: DOUBLE
29153: EQUAL
29154: IFTRUE 29158
29156: GO 29165
29158: POP
// DNoMaterial ; tech_TauField :
29159: CALL 1907 0 0
29163: GO 29181
29165: LD_INT 30
29167: DOUBLE
29168: EQUAL
29169: IFTRUE 29173
29171: GO 29180
29173: POP
// DStasis ; end ;
29174: CALL 5464 0 0
29178: GO 29181
29180: POP
// end ;
29181: PPOPN 2
29183: END
// on EndTheMissionRaised ( aa ) do begin end_the_mission_allowed := false ;
29184: LD_ADDR_OWVAR 57
29188: PUSH
29189: LD_INT 0
29191: ST_TO_ADDR
// VyhraExit ;
29192: CALL 374 0 0
// end ;
29196: PPOPN 1
29198: END
// on UnitDestroyed ( un ) do begin remove_from_vehicles ( un ) ;
29199: LD_VAR 0 1
29203: PPUSH
29204: CALL 32285 0 1
// remove_from_humans ( un ) ;
29208: LD_VAR 0 1
29212: PPUSH
29213: CALL 32115 0 1
// remove_from_builds ( un ) ;
29217: LD_VAR 0 1
29221: PPUSH
29222: CALL 31929 0 1
// if un = Burlak then
29226: LD_VAR 0 1
29230: PUSH
29231: LD_EXP 61
29235: EQUAL
29236: IFFALSE 29245
// YouLost ( Burlak ) ;
29238: LD_STRING Burlak
29240: PPUSH
29241: CALL_OW 104
// if un = Gleb and utok_na_gleba then
29245: LD_VAR 0 1
29249: PUSH
29250: LD_EXP 65
29254: EQUAL
29255: PUSH
29256: LD_EXP 60
29260: AND
29261: IFFALSE 29270
// YouLost ( Gleb ) ;
29263: LD_STRING Gleb
29265: PPUSH
29266: CALL_OW 104
// if un = Vsevolod then
29270: LD_VAR 0 1
29274: PUSH
29275: LD_EXP 70
29279: EQUAL
29280: IFFALSE 29353
// begin if GetSide ( un ) = 6 then
29282: LD_VAR 0 1
29286: PPUSH
29287: CALL_OW 255
29291: PUSH
29292: LD_INT 6
29294: EQUAL
29295: IFFALSE 29301
// SA_NotSaveVsevolod ;
29297: CALL 33187 0 0
// mrtvi_vsevolodaci := mrtvi_vsevolodaci ^ [ Vsevolod ] ;
29301: LD_ADDR_EXP 41
29305: PUSH
29306: LD_EXP 41
29310: PUSH
29311: LD_STRING Vsevolod
29313: PUSH
29314: EMPTY
29315: LIST
29316: ADD
29317: ST_TO_ADDR
// SetSide ( Vsevolod2 , GetSide ( Vsevolod ) ) ;
29318: LD_EXP 71
29322: PPUSH
29323: LD_EXP 70
29327: PPUSH
29328: CALL_OW 255
29332: PPUSH
29333: CALL_OW 235
// if kecali then
29337: LD_EXP 54
29341: IFFALSE 29349
// DDieVsev2 else
29343: CALL 5436 0 0
29347: GO 29353
// DDieVsev1 ;
29349: CALL 5391 0 0
// end ; if un in Vsevolod_uderna_group then
29353: LD_VAR 0 1
29357: PUSH
29358: LD_EXP 12
29362: IN
29363: IFFALSE 29408
// begin Vsevolod_uderna_group := Vsevolod_uderna_group diff un ;
29365: LD_ADDR_EXP 12
29369: PUSH
29370: LD_EXP 12
29374: PUSH
29375: LD_VAR 0 1
29379: DIFF
29380: ST_TO_ADDR
// mrtvi_vsevolodaci := mrtvi_vsevolodaci ^ [ vsev_g_ & ( mrtvi_vsevolodaci + 1 ) ] ;
29381: LD_ADDR_EXP 41
29385: PUSH
29386: LD_EXP 41
29390: PUSH
29391: LD_STRING vsev_g_
29393: PUSH
29394: LD_EXP 41
29398: PUSH
29399: LD_INT 1
29401: PLUS
29402: STR
29403: PUSH
29404: EMPTY
29405: LIST
29406: ADD
29407: ST_TO_ADDR
// end ; end ;
29408: PPOPN 1
29410: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = ai then
29411: LD_VAR 0 1
29415: PPUSH
29416: CALL_OW 255
29420: PUSH
29421: LD_EXP 6
29425: EQUAL
29426: IFFALSE 29481
// begin case GetType ( un ) of unit_vehicle :
29428: LD_VAR 0 1
29432: PPUSH
29433: CALL_OW 247
29437: PUSH
29438: LD_INT 2
29440: DOUBLE
29441: EQUAL
29442: IFTRUE 29446
29444: GO 29449
29446: POP
// ; unit_human :
29447: GO 29481
29449: LD_INT 1
29451: DOUBLE
29452: EQUAL
29453: IFTRUE 29457
29455: GO 29469
29457: POP
// begin zachranka ( un ) ;
29458: LD_VAR 0 1
29462: PPUSH
29463: CALL 32343 0 1
// end ; unit_building :
29467: GO 29481
29469: LD_INT 3
29471: DOUBLE
29472: EQUAL
29473: IFTRUE 29477
29475: GO 29480
29477: POP
// begin end ; end ;
29478: GO 29481
29480: POP
// end ; if MyGodMode and GetSide ( un ) = you then
29481: LD_EXP 144
29485: PUSH
29486: LD_VAR 0 1
29490: PPUSH
29491: CALL_OW 255
29495: PUSH
29496: LD_EXP 1
29500: EQUAL
29501: AND
29502: IFFALSE 29516
// SetLives ( un , 1000 ) ;
29504: LD_VAR 0 1
29508: PPUSH
29509: LD_INT 1000
29511: PPUSH
29512: CALL_OW 234
// end ;
29516: PPOPN 1
29518: END
// export MyGodMode ; on VehicleCaptured ( vehnew , vehold , origside , hum ) do begin if origside = ai then
29519: LD_VAR 0 3
29523: PUSH
29524: LD_EXP 6
29528: EQUAL
29529: IFFALSE 29540
// begin remove_from_vehicles ( vehold ) ;
29531: LD_VAR 0 2
29535: PPUSH
29536: CALL 32285 0 1
// end ; end ;
29540: PPOPN 4
29542: END
// on BuildingCaptured ( build , origside , eng ) do begin if origside = ai then
29543: LD_VAR 0 2
29547: PUSH
29548: LD_EXP 6
29552: EQUAL
29553: IFFALSE 29608
// begin remove_from_builds ( build ) ;
29555: LD_VAR 0 1
29559: PPUSH
29560: CALL 31929 0 1
// if GetBType ( build ) = b_siberite_mine then
29564: LD_VAR 0 1
29568: PPUSH
29569: CALL_OW 266
29573: PUSH
29574: LD_INT 30
29576: EQUAL
29577: IFFALSE 29608
// SetResourceVisibility ( GetX ( build ) , GetY ( build ) , you ) ;
29579: LD_VAR 0 1
29583: PPUSH
29584: CALL_OW 250
29588: PPUSH
29589: LD_VAR 0 1
29593: PPUSH
29594: CALL_OW 251
29598: PPUSH
29599: LD_EXP 1
29603: PPUSH
29604: CALL_OW 441
// end ; if origside = you then
29608: LD_VAR 0 2
29612: PUSH
29613: LD_EXP 1
29617: EQUAL
29618: IFFALSE 29629
// begin add_to_builds ( build ) ;
29620: LD_VAR 0 1
29624: PPUSH
29625: CALL 31223 0 1
// end ; end ;
29629: PPOPN 3
29631: END
// export was_DMatPrediction ; on BuildingComplete ( build ) do begin if GetSide ( build ) = ai then
29632: LD_VAR 0 1
29636: PPUSH
29637: CALL_OW 255
29641: PUSH
29642: LD_EXP 6
29646: EQUAL
29647: IFFALSE 29658
// begin add_to_builds ( build ) ;
29649: LD_VAR 0 1
29653: PPUSH
29654: CALL 31223 0 1
// end ; if GetSide ( build ) = you then
29658: LD_VAR 0 1
29662: PPUSH
29663: CALL_OW 255
29667: PUSH
29668: LD_EXP 1
29672: EQUAL
29673: IFFALSE 29709
// begin if not was_DMatPrediction and GetBType ( build ) = b_lab then
29675: LD_EXP 145
29679: NOT
29680: PUSH
29681: LD_VAR 0 1
29685: PPUSH
29686: CALL_OW 266
29690: PUSH
29691: LD_INT 6
29693: EQUAL
29694: AND
29695: IFFALSE 29709
// begin was_DMatPrediction := true ;
29697: LD_ADDR_EXP 145
29701: PUSH
29702: LD_INT 1
29704: ST_TO_ADDR
// DMatPrediction ;
29705: CALL 1757 0 0
// end ; end ; end ;
29709: PPOPN 1
29711: END
// on UpgradeComplete ( build ) do begin if GetSide ( build ) = you and GetBType ( build ) in all_labs then
29712: LD_VAR 0 1
29716: PPUSH
29717: CALL_OW 255
29721: PUSH
29722: LD_EXP 1
29726: EQUAL
29727: PUSH
29728: LD_VAR 0 1
29732: PPUSH
29733: CALL_OW 266
29737: PUSH
29738: LD_EXP 40
29742: IN
29743: AND
29744: IFFALSE 29796
// if not byl_sib_research and ( ( GetLabKind ( build , 1 ) = b_lab_spacetime or GetLabKind ( build , 2 ) = b_lab_spacetime ) ) then
29746: LD_EXP 53
29750: NOT
29751: PUSH
29752: LD_VAR 0 1
29756: PPUSH
29757: LD_INT 1
29759: PPUSH
29760: CALL_OW 268
29764: PUSH
29765: LD_INT 14
29767: EQUAL
29768: PUSH
29769: LD_VAR 0 1
29773: PPUSH
29774: LD_INT 2
29776: PPUSH
29777: CALL_OW 268
29781: PUSH
29782: LD_INT 14
29784: EQUAL
29785: OR
29786: AND
29787: IFFALSE 29796
// begin DSibResearch ;
29789: CALL 2116 0 0
// disable ( 66 ) ;
29793: LD_INT 66
29795: DISABLE_MARKED
// end ; end ;
29796: PPOPN 1
29798: END
// on VehicleConstructed ( veh , fact ) do begin if GetSide ( veh ) = ai then
29799: LD_VAR 0 1
29803: PPUSH
29804: CALL_OW 255
29808: PUSH
29809: LD_EXP 6
29813: EQUAL
29814: IFFALSE 29872
// begin if veh in attack then
29816: LD_VAR 0 1
29820: PUSH
29821: LD_EXP 138
29825: IN
29826: IFFALSE 29842
// ComMoveToArea ( veh , pro_att ) else
29828: LD_VAR 0 1
29832: PPUSH
29833: LD_INT 13
29835: PPUSH
29836: CALL_OW 113
29840: GO 29854
// ComMoveToArea ( veh , pro_def ) ;
29842: LD_VAR 0 1
29846: PPUSH
29847: LD_INT 12
29849: PPUSH
29850: CALL_OW 113
// AddComExitVehicle ( veh ) ;
29854: LD_VAR 0 1
29858: PPUSH
29859: CALL_OW 181
// add_to_vehicles ( veh ) ;
29863: LD_VAR 0 1
29867: PPUSH
29868: CALL 31131 0 1
// end ; end ;
29872: PPOPN 2
29874: END
// on LeaveBuilding ( b , un ) do begin if GetSide ( un ) = you and GetBType ( b ) = b_control_tower then
29875: LD_VAR 0 2
29879: PPUSH
29880: CALL_OW 255
29884: PUSH
29885: LD_EXP 1
29889: EQUAL
29890: PUSH
29891: LD_VAR 0 1
29895: PPUSH
29896: CALL_OW 266
29900: PUSH
29901: LD_INT 36
29903: EQUAL
29904: AND
29905: IFFALSE 29916
// add_to_humans ( un ) ;
29907: LD_VAR 0 2
29911: PPUSH
29912: CALL 30795 0 1
// end ;
29916: PPOPN 2
29918: END
// on SailEvent ( num ) do begin case num of 0 :
29919: LD_VAR 0 1
29923: PUSH
29924: LD_INT 0
29926: DOUBLE
29927: EQUAL
29928: IFTRUE 29932
29930: GO 29935
29932: POP
// begin end ; normal1_utok :
29933: GO 30038
29935: LD_EXP 24
29939: DOUBLE
29940: EQUAL
29941: IFTRUE 29945
29943: GO 29952
29945: POP
// begin f_normal1_utok ;
29946: CALL 13395 0 0
// end ; normal2_utok :
29950: GO 30038
29952: LD_EXP 25
29956: DOUBLE
29957: EQUAL
29958: IFTRUE 29962
29960: GO 29969
29962: POP
// begin f_normal2_utok ;
29963: CALL 13724 0 0
// end ; normal3_utok :
29967: GO 30038
29969: LD_EXP 26
29973: DOUBLE
29974: EQUAL
29975: IFTRUE 29979
29977: GO 29986
29979: POP
// begin f_normal3_utok ;
29980: CALL 14064 0 0
// end ; normal4_utok :
29984: GO 30038
29986: LD_EXP 27
29990: DOUBLE
29991: EQUAL
29992: IFTRUE 29996
29994: GO 30003
29996: POP
// begin f_normal4_utok ;
29997: CALL 14415 0 0
// end ; vsevolod_attack :
30001: GO 30038
30003: LD_EXP 28
30007: DOUBLE
30008: EQUAL
30009: IFTRUE 30013
30011: GO 30020
30013: POP
// begin f_vsevolod_utok ;
30014: CALL 14755 0 0
// end ; vsevolod_final_attack :
30018: GO 30038
30020: LD_EXP 29
30024: DOUBLE
30025: EQUAL
30026: IFTRUE 30030
30028: GO 30037
30030: POP
// begin f_vsevolod_final_utok ;
30031: CALL 15091 0 0
// end ; end ;
30035: GO 30038
30037: POP
// end ;
30038: PPOPN 1
30040: END
// on Contact ( side1 , side2 ) do var a ;
30041: LD_INT 0
30043: PPUSH
// begin if IsLive ( a1eng ) then
30044: LD_EXP 114
30048: PPUSH
30049: CALL_OW 300
30053: IFFALSE 30273
// if ( side1 = you and side2 = ai ) or ( side2 = you and side1 = ai ) then
30055: LD_VAR 0 1
30059: PUSH
30060: LD_EXP 1
30064: EQUAL
30065: PUSH
30066: LD_VAR 0 2
30070: PUSH
30071: LD_EXP 6
30075: EQUAL
30076: AND
30077: PUSH
30078: LD_VAR 0 2
30082: PUSH
30083: LD_EXP 1
30087: EQUAL
30088: PUSH
30089: LD_VAR 0 1
30093: PUSH
30094: LD_EXP 6
30098: EQUAL
30099: AND
30100: OR
30101: IFFALSE 30273
// begin if a1eng then
30103: LD_EXP 114
30107: IFFALSE 30273
// begin remove_from_humans ( a1eng ) ;
30109: LD_EXP 114
30113: PPUSH
30114: CALL 32115 0 1
// while IsInUnit ( a1eng ) and IsLive ( a1eng ) do
30118: LD_EXP 114
30122: PPUSH
30123: CALL_OW 310
30127: PUSH
30128: LD_EXP 114
30132: PPUSH
30133: CALL_OW 300
30137: AND
30138: IFFALSE 30158
// begin ComExitBuilding ( a1eng ) ;
30140: LD_EXP 114
30144: PPUSH
30145: CALL_OW 122
// wait ( 0 0$1 ) ;
30149: LD_INT 35
30151: PPUSH
30152: CALL_OW 67
// end ;
30156: GO 30118
// while IsLive ( sib_dul ) and IsLive ( a1eng ) do
30158: LD_EXP 143
30162: PPUSH
30163: CALL_OW 300
30167: PUSH
30168: LD_EXP 114
30172: PPUSH
30173: CALL_OW 300
30177: AND
30178: IFFALSE 30252
// begin a := GetLives ( sib_dul ) - 25 * difficulty ;
30180: LD_ADDR_VAR 0 3
30184: PUSH
30185: LD_EXP 143
30189: PPUSH
30190: CALL_OW 256
30194: PUSH
30195: LD_INT 25
30197: PUSH
30198: LD_OWVAR 67
30202: MUL
30203: MINUS
30204: ST_TO_ADDR
// if a > 1 then
30205: LD_VAR 0 3
30209: PUSH
30210: LD_INT 1
30212: GREATER
30213: IFFALSE 30229
// SetLives ( sib_dul , a ) ;
30215: LD_EXP 143
30219: PPUSH
30220: LD_VAR 0 3
30224: PPUSH
30225: CALL_OW 234
// ComDismantle ( a1eng , sib_dul ) ;
30229: LD_EXP 114
30233: PPUSH
30234: LD_EXP 143
30238: PPUSH
30239: CALL_OW 167
// wait ( 0 0$1 ) ;
30243: LD_INT 35
30245: PPUSH
30246: CALL_OW 67
// end ;
30250: GO 30158
// AddComEnterUnit ( a1eng , Rudepot ) ;
30252: LD_EXP 114
30256: PPUSH
30257: LD_INT 58
30259: PPUSH
30260: CALL_OW 180
// add_to_humans ( a1eng ) ;
30264: LD_EXP 114
30268: PPUSH
30269: CALL 30795 0 1
// end ; end ; end ;
30273: PPOPN 3
30275: END
// var mcdef1 , mcdef2 , mcatt1 ; on McDefendTakesUnit ( mcid , un ) do begin if mcid = idDef1 then
30276: LD_VAR 0 1
30280: PUSH
30281: LD_EXP 96
30285: EQUAL
30286: IFFALSE 30304
// mcdef1 := mcdef1 union un ;
30288: LD_ADDR_LOC 21
30292: PUSH
30293: LD_LOC 21
30297: PUSH
30298: LD_VAR 0 2
30302: UNION
30303: ST_TO_ADDR
// if mcid = idDef2 then
30304: LD_VAR 0 1
30308: PUSH
30309: LD_EXP 97
30313: EQUAL
30314: IFFALSE 30332
// mcdef2 := mcdef2 union un ;
30316: LD_ADDR_LOC 22
30320: PUSH
30321: LD_LOC 22
30325: PUSH
30326: LD_VAR 0 2
30330: UNION
30331: ST_TO_ADDR
// if mcid = idAtt1 then
30332: LD_VAR 0 1
30336: PUSH
30337: LD_EXP 93
30341: EQUAL
30342: IFFALSE 30360
// mcatt1 := mcatt1 union un ;
30344: LD_ADDR_LOC 23
30348: PUSH
30349: LD_LOC 23
30353: PUSH
30354: LD_VAR 0 2
30358: UNION
30359: ST_TO_ADDR
// Remove_From_Humans ( un ) ;
30360: LD_VAR 0 2
30364: PPUSH
30365: CALL 32115 0 1
// Remove_From_Vehicles ( un ) ;
30369: LD_VAR 0 2
30373: PPUSH
30374: CALL 32285 0 1
// Remove_From_Builds ( un ) ;
30378: LD_VAR 0 2
30382: PPUSH
30383: CALL 31929 0 1
// end ;
30387: PPOPN 2
30389: END
// on McDefendReturnsUnit ( mcid , un ) do begin if mcid = idDef1 then
30390: LD_VAR 0 1
30394: PUSH
30395: LD_EXP 96
30399: EQUAL
30400: IFFALSE 30418
// mcdef1 := mcdef1 diff un ;
30402: LD_ADDR_LOC 21
30406: PUSH
30407: LD_LOC 21
30411: PUSH
30412: LD_VAR 0 2
30416: DIFF
30417: ST_TO_ADDR
// if mcid = idDef2 then
30418: LD_VAR 0 1
30422: PUSH
30423: LD_EXP 97
30427: EQUAL
30428: IFFALSE 30446
// mcdef2 := mcdef2 diff un ;
30430: LD_ADDR_LOC 22
30434: PUSH
30435: LD_LOC 22
30439: PUSH
30440: LD_VAR 0 2
30444: DIFF
30445: ST_TO_ADDR
// if mcid = idAtt1 then
30446: LD_VAR 0 1
30450: PUSH
30451: LD_EXP 93
30455: EQUAL
30456: IFFALSE 30474
// mcatt1 := mcatt1 diff un ;
30458: LD_ADDR_LOC 23
30462: PUSH
30463: LD_LOC 23
30467: PUSH
30468: LD_VAR 0 2
30472: DIFF
30473: ST_TO_ADDR
// add_to_Humans ( un ) ;
30474: LD_VAR 0 2
30478: PPUSH
30479: CALL 30795 0 1
// add_to_Vehicles ( un ) ;
30483: LD_VAR 0 2
30487: PPUSH
30488: CALL 31131 0 1
// add_to_Builds ( un ) ;
30492: LD_VAR 0 2
30496: PPUSH
30497: CALL 31223 0 1
// end ;
30501: PPOPN 2
30503: END
// on McRegistryResultChanges ( mcid , count , strength ) do var i ;
30504: LD_INT 0
30506: PPUSH
// begin if mcid = idAtt1 then
30507: LD_VAR 0 1
30511: PUSH
30512: LD_EXP 93
30516: EQUAL
30517: IFFALSE 30629
// begin if count = 0 then
30519: LD_VAR 0 2
30523: PUSH
30524: LD_INT 0
30526: EQUAL
30527: IFFALSE 30580
// begin for i in FilterUnitsInArea ( mc_attack , [ [ f_side , you ] ] ) do
30529: LD_ADDR_VAR 0 4
30533: PUSH
30534: LD_INT 26
30536: PPUSH
30537: LD_INT 22
30539: PUSH
30540: LD_EXP 1
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: EMPTY
30550: LIST
30551: PPUSH
30552: CALL_OW 70
30556: PUSH
30557: FOR_IN
30558: IFFALSE 30576
// PriorityAttack ( ai , i ) ;
30560: LD_EXP 6
30564: PPUSH
30565: LD_VAR 0 4
30569: PPUSH
30570: CALL_OW 470
30574: GO 30557
30576: POP
30577: POP
// end else
30578: GO 30629
// begin for i in FilterUnitsInArea ( mc_attack , [ [ f_side , you ] ] ) do
30580: LD_ADDR_VAR 0 4
30584: PUSH
30585: LD_INT 26
30587: PPUSH
30588: LD_INT 22
30590: PUSH
30591: LD_EXP 1
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: EMPTY
30601: LIST
30602: PPUSH
30603: CALL_OW 70
30607: PUSH
30608: FOR_IN
30609: IFFALSE 30627
// NormalAttack ( ai , i ) ;
30611: LD_EXP 6
30615: PPUSH
30616: LD_VAR 0 4
30620: PPUSH
30621: CALL_OW 472
30625: GO 30608
30627: POP
30628: POP
// end ; end ; end ;
30629: PPOPN 4
30631: END
// on McAttackOutOfFuel ( mcid , un ) do begin Attack := Attack diff un ;
30632: LD_ADDR_EXP 138
30636: PUSH
30637: LD_EXP 138
30641: PUSH
30642: LD_VAR 0 2
30646: DIFF
30647: ST_TO_ADDR
// while IsLive ( un ) and not IsInArea ( un , near_base ) do
30648: LD_VAR 0 2
30652: PPUSH
30653: CALL_OW 300
30657: PUSH
30658: LD_VAR 0 2
30662: PPUSH
30663: LD_INT 2
30665: PPUSH
30666: CALL_OW 308
30670: NOT
30671: AND
30672: IFFALSE 30695
// begin ComMoveToArea ( un , near_base ) ;
30674: LD_VAR 0 2
30678: PPUSH
30679: LD_INT 2
30681: PPUSH
30682: CALL_OW 113
// wait ( 0 0$2 ) ;
30686: LD_INT 70
30688: PPUSH
30689: CALL_OW 67
// end ;
30693: GO 30648
// end ;
30695: PPOPN 2
30697: END
// export function add_to ( un ) ; var i ; begin
30698: LD_INT 0
30700: PPUSH
30701: PPUSH
// for i in un do
30702: LD_ADDR_VAR 0 3
30706: PUSH
30707: LD_VAR 0 1
30711: PUSH
30712: FOR_IN
30713: IFFALSE 30788
// case GetType ( i ) of unit_human :
30715: LD_VAR 0 3
30719: PPUSH
30720: CALL_OW 247
30724: PUSH
30725: LD_INT 1
30727: DOUBLE
30728: EQUAL
30729: IFTRUE 30733
30731: GO 30745
30733: POP
// add_to_humans ( i ) ; unit_vehicle :
30734: LD_VAR 0 3
30738: PPUSH
30739: CALL 30795 0 1
30743: GO 30786
30745: LD_INT 2
30747: DOUBLE
30748: EQUAL
30749: IFTRUE 30753
30751: GO 30765
30753: POP
// add_to_vehicles ( i ) ; unit_building :
30754: LD_VAR 0 3
30758: PPUSH
30759: CALL 31131 0 1
30763: GO 30786
30765: LD_INT 3
30767: DOUBLE
30768: EQUAL
30769: IFTRUE 30773
30771: GO 30785
30773: POP
// add_to_builds ( i ) ; end ;
30774: LD_VAR 0 3
30778: PPUSH
30779: CALL 31223 0 1
30783: GO 30786
30785: POP
30786: GO 30712
30788: POP
30789: POP
// end ;
30790: LD_VAR 0 2
30794: RET
// export function add_to_humans ( un ) ; var i ; begin
30795: LD_INT 0
30797: PPUSH
30798: PPUSH
// if GetSide ( un ) = ai then
30799: LD_VAR 0 1
30803: PPUSH
30804: CALL_OW 255
30808: PUSH
30809: LD_EXP 6
30813: EQUAL
30814: IFFALSE 31126
// for i in un do
30816: LD_ADDR_VAR 0 3
30820: PUSH
30821: LD_VAR 0 1
30825: PUSH
30826: FOR_IN
30827: IFFALSE 31124
// begin case Getclass ( i ) of class_soldier :
30829: LD_VAR 0 3
30833: PPUSH
30834: CALL_OW 257
30838: PUSH
30839: LD_INT 1
30841: DOUBLE
30842: EQUAL
30843: IFTRUE 30847
30845: GO 30866
30847: POP
// sol := sol union i ; class_engineer :
30848: LD_ADDR_EXP 121
30852: PUSH
30853: LD_EXP 121
30857: PUSH
30858: LD_VAR 0 3
30862: UNION
30863: ST_TO_ADDR
30864: GO 30948
30866: LD_INT 2
30868: DOUBLE
30869: EQUAL
30870: IFTRUE 30874
30872: GO 30893
30874: POP
// eng := eng union i ; class_mechanic :
30875: LD_ADDR_EXP 123
30879: PUSH
30880: LD_EXP 123
30884: PUSH
30885: LD_VAR 0 3
30889: UNION
30890: ST_TO_ADDR
30891: GO 30948
30893: LD_INT 3
30895: DOUBLE
30896: EQUAL
30897: IFTRUE 30901
30899: GO 30920
30901: POP
// mec := mec union i ; class_scientistic :
30902: LD_ADDR_EXP 125
30906: PUSH
30907: LD_EXP 125
30911: PUSH
30912: LD_VAR 0 3
30916: UNION
30917: ST_TO_ADDR
30918: GO 30948
30920: LD_INT 4
30922: DOUBLE
30923: EQUAL
30924: IFTRUE 30928
30926: GO 30947
30928: POP
// sci := sci union i ; end ;
30929: LD_ADDR_EXP 127
30933: PUSH
30934: LD_EXP 127
30938: PUSH
30939: LD_VAR 0 3
30943: UNION
30944: ST_TO_ADDR
30945: GO 30948
30947: POP
// case GetTag ( i ) of 1 :
30948: LD_VAR 0 3
30952: PPUSH
30953: CALL_OW 110
30957: PUSH
30958: LD_INT 1
30960: DOUBLE
30961: EQUAL
30962: IFTRUE 30966
30964: GO 30985
30966: POP
// a1 := a1 union i ; 2 :
30967: LD_ADDR_EXP 133
30971: PUSH
30972: LD_EXP 133
30976: PUSH
30977: LD_VAR 0 3
30981: UNION
30982: ST_TO_ADDR
30983: GO 31122
30985: LD_INT 2
30987: DOUBLE
30988: EQUAL
30989: IFTRUE 30993
30991: GO 31012
30993: POP
// a2 := a2 union i ; 3 :
30994: LD_ADDR_EXP 134
30998: PUSH
30999: LD_EXP 134
31003: PUSH
31004: LD_VAR 0 3
31008: UNION
31009: ST_TO_ADDR
31010: GO 31122
31012: LD_INT 3
31014: DOUBLE
31015: EQUAL
31016: IFTRUE 31020
31018: GO 31039
31020: POP
// a3 := a3 union i ; 4 :
31021: LD_ADDR_EXP 135
31025: PUSH
31026: LD_EXP 135
31030: PUSH
31031: LD_VAR 0 3
31035: UNION
31036: ST_TO_ADDR
31037: GO 31122
31039: LD_INT 4
31041: DOUBLE
31042: EQUAL
31043: IFTRUE 31047
31045: GO 31066
31047: POP
// a4 := a4 union i ; 5 :
31048: LD_ADDR_EXP 136
31052: PUSH
31053: LD_EXP 136
31057: PUSH
31058: LD_VAR 0 3
31062: UNION
31063: ST_TO_ADDR
31064: GO 31122
31066: LD_INT 5
31068: DOUBLE
31069: EQUAL
31070: IFTRUE 31074
31072: GO 31093
31074: POP
// a5 := a5 union i ; else
31075: LD_ADDR_EXP 137
31079: PUSH
31080: LD_EXP 137
31084: PUSH
31085: LD_VAR 0 3
31089: UNION
31090: ST_TO_ADDR
31091: GO 31122
31093: POP
// begin a3 := a3 union i ;
31094: LD_ADDR_EXP 135
31098: PUSH
31099: LD_EXP 135
31103: PUSH
31104: LD_VAR 0 3
31108: UNION
31109: ST_TO_ADDR
// SetTag ( i , 3 ) ;
31110: LD_VAR 0 3
31114: PPUSH
31115: LD_INT 3
31117: PPUSH
31118: CALL_OW 109
// end ; end ; end ;
31122: GO 30826
31124: POP
31125: POP
// end ;
31126: LD_VAR 0 2
31130: RET
// export function add_to_vehicles ( un ) ; var i ; begin
31131: LD_INT 0
31133: PPUSH
31134: PPUSH
// for i in un do
31135: LD_ADDR_VAR 0 3
31139: PUSH
31140: LD_VAR 0 1
31144: PUSH
31145: FOR_IN
31146: IFFALSE 31216
// begin if GetSide ( un ) = ai then
31148: LD_VAR 0 1
31152: PPUSH
31153: CALL_OW 255
31157: PUSH
31158: LD_EXP 6
31162: EQUAL
31163: IFFALSE 31214
// if GetControl ( i ) = control_remote then
31165: LD_VAR 0 3
31169: PPUSH
31170: CALL_OW 263
31174: PUSH
31175: LD_INT 2
31177: EQUAL
31178: IFFALSE 31198
// begin attack := attack union i ;
31180: LD_ADDR_EXP 138
31184: PUSH
31185: LD_EXP 138
31189: PUSH
31190: LD_VAR 0 3
31194: UNION
31195: ST_TO_ADDR
// end else
31196: GO 31214
// begin defence := defence union i ;
31198: LD_ADDR_EXP 139
31202: PUSH
31203: LD_EXP 139
31207: PUSH
31208: LD_VAR 0 3
31212: UNION
31213: ST_TO_ADDR
// end ; end ;
31214: GO 31145
31216: POP
31217: POP
// end ;
31218: LD_VAR 0 2
31222: RET
// export function add_to_builds ( un ) ; var i , j , bt ; begin
31223: LD_INT 0
31225: PPUSH
31226: PPUSH
31227: PPUSH
31228: PPUSH
// for i in un do
31229: LD_ADDR_VAR 0 3
31233: PUSH
31234: LD_VAR 0 1
31238: PUSH
31239: FOR_IN
31240: IFFALSE 31825
// begin if GetSide ( un ) = ai then
31242: LD_VAR 0 1
31246: PPUSH
31247: CALL_OW 255
31251: PUSH
31252: LD_EXP 6
31256: EQUAL
31257: IFFALSE 31334
// for j in builds1 do
31259: LD_ADDR_VAR 0 4
31263: PUSH
31264: LD_EXP 104
31268: PUSH
31269: FOR_IN
31270: IFFALSE 31332
// if GetX ( i ) = j [ 2 ] and GetY ( i ) = j [ 3 ] then
31272: LD_VAR 0 3
31276: PPUSH
31277: CALL_OW 250
31281: PUSH
31282: LD_VAR 0 4
31286: PUSH
31287: LD_INT 2
31289: ARRAY
31290: EQUAL
31291: PUSH
31292: LD_VAR 0 3
31296: PPUSH
31297: CALL_OW 251
31301: PUSH
31302: LD_VAR 0 4
31306: PUSH
31307: LD_INT 3
31309: ARRAY
31310: EQUAL
31311: AND
31312: IFFALSE 31330
// b1 := b1 union i ;
31314: LD_ADDR_EXP 128
31318: PUSH
31319: LD_EXP 128
31323: PUSH
31324: LD_VAR 0 3
31328: UNION
31329: ST_TO_ADDR
31330: GO 31269
31332: POP
31333: POP
// for j in builds2 do
31334: LD_ADDR_VAR 0 4
31338: PUSH
31339: LD_EXP 105
31343: PUSH
31344: FOR_IN
31345: IFFALSE 31407
// if GetX ( i ) = j [ 2 ] and GetY ( i ) = j [ 3 ] then
31347: LD_VAR 0 3
31351: PPUSH
31352: CALL_OW 250
31356: PUSH
31357: LD_VAR 0 4
31361: PUSH
31362: LD_INT 2
31364: ARRAY
31365: EQUAL
31366: PUSH
31367: LD_VAR 0 3
31371: PPUSH
31372: CALL_OW 251
31376: PUSH
31377: LD_VAR 0 4
31381: PUSH
31382: LD_INT 3
31384: ARRAY
31385: EQUAL
31386: AND
31387: IFFALSE 31405
// b2 := b2 union i ;
31389: LD_ADDR_EXP 129
31393: PUSH
31394: LD_EXP 129
31398: PUSH
31399: LD_VAR 0 3
31403: UNION
31404: ST_TO_ADDR
31405: GO 31344
31407: POP
31408: POP
// for j in builds3 do
31409: LD_ADDR_VAR 0 4
31413: PUSH
31414: LD_EXP 106
31418: PUSH
31419: FOR_IN
31420: IFFALSE 31482
// if GetX ( i ) = j [ 2 ] and GetY ( i ) = j [ 3 ] then
31422: LD_VAR 0 3
31426: PPUSH
31427: CALL_OW 250
31431: PUSH
31432: LD_VAR 0 4
31436: PUSH
31437: LD_INT 2
31439: ARRAY
31440: EQUAL
31441: PUSH
31442: LD_VAR 0 3
31446: PPUSH
31447: CALL_OW 251
31451: PUSH
31452: LD_VAR 0 4
31456: PUSH
31457: LD_INT 3
31459: ARRAY
31460: EQUAL
31461: AND
31462: IFFALSE 31480
// b3 := b3 union i ;
31464: LD_ADDR_EXP 130
31468: PUSH
31469: LD_EXP 130
31473: PUSH
31474: LD_VAR 0 3
31478: UNION
31479: ST_TO_ADDR
31480: GO 31419
31482: POP
31483: POP
// for j in builds4 do
31484: LD_ADDR_VAR 0 4
31488: PUSH
31489: LD_EXP 107
31493: PUSH
31494: FOR_IN
31495: IFFALSE 31557
// if GetX ( i ) = j [ 2 ] and GetY ( i ) = j [ 3 ] then
31497: LD_VAR 0 3
31501: PPUSH
31502: CALL_OW 250
31506: PUSH
31507: LD_VAR 0 4
31511: PUSH
31512: LD_INT 2
31514: ARRAY
31515: EQUAL
31516: PUSH
31517: LD_VAR 0 3
31521: PPUSH
31522: CALL_OW 251
31526: PUSH
31527: LD_VAR 0 4
31531: PUSH
31532: LD_INT 3
31534: ARRAY
31535: EQUAL
31536: AND
31537: IFFALSE 31555
// b4 := b4 union i ;
31539: LD_ADDR_EXP 131
31543: PUSH
31544: LD_EXP 131
31548: PUSH
31549: LD_VAR 0 3
31553: UNION
31554: ST_TO_ADDR
31555: GO 31494
31557: POP
31558: POP
// for j in builds5 do
31559: LD_ADDR_VAR 0 4
31563: PUSH
31564: LD_EXP 108
31568: PUSH
31569: FOR_IN
31570: IFFALSE 31632
// if GetX ( i ) = j [ 2 ] and GetY ( i ) = j [ 3 ] then
31572: LD_VAR 0 3
31576: PPUSH
31577: CALL_OW 250
31581: PUSH
31582: LD_VAR 0 4
31586: PUSH
31587: LD_INT 2
31589: ARRAY
31590: EQUAL
31591: PUSH
31592: LD_VAR 0 3
31596: PPUSH
31597: CALL_OW 251
31601: PUSH
31602: LD_VAR 0 4
31606: PUSH
31607: LD_INT 3
31609: ARRAY
31610: EQUAL
31611: AND
31612: IFFALSE 31630
// b5 := b5 union i ;
31614: LD_ADDR_EXP 132
31618: PUSH
31619: LD_EXP 132
31623: PUSH
31624: LD_VAR 0 3
31628: UNION
31629: ST_TO_ADDR
31630: GO 31569
31632: POP
31633: POP
// bt := GetBType ( i ) ;
31634: LD_ADDR_VAR 0 5
31638: PUSH
31639: LD_VAR 0 3
31643: PPUSH
31644: CALL_OW 266
31648: ST_TO_ADDR
// if bt = b_barracks or bt = b_armoury or bt = b_bunker or bt = b_breastwork then
31649: LD_VAR 0 5
31653: PUSH
31654: LD_INT 5
31656: EQUAL
31657: PUSH
31658: LD_VAR 0 5
31662: PUSH
31663: LD_INT 4
31665: EQUAL
31666: OR
31667: PUSH
31668: LD_VAR 0 5
31672: PUSH
31673: LD_INT 32
31675: EQUAL
31676: OR
31677: PUSH
31678: LD_VAR 0 5
31682: PUSH
31683: LD_INT 31
31685: EQUAL
31686: OR
31687: IFFALSE 31705
// fort := fort union i ;
31689: LD_ADDR_EXP 119
31693: PUSH
31694: LD_EXP 119
31698: PUSH
31699: LD_VAR 0 3
31703: UNION
31704: ST_TO_ADDR
// if bt = b_lab or bt = b_lab_full or bt = b_lab_half then
31705: LD_VAR 0 5
31709: PUSH
31710: LD_INT 6
31712: EQUAL
31713: PUSH
31714: LD_VAR 0 5
31718: PUSH
31719: LD_INT 8
31721: EQUAL
31722: OR
31723: PUSH
31724: LD_VAR 0 5
31728: PUSH
31729: LD_INT 7
31731: EQUAL
31732: OR
31733: IFFALSE 31751
// lab := lab union i ;
31735: LD_ADDR_EXP 126
31739: PUSH
31740: LD_EXP 126
31744: PUSH
31745: LD_VAR 0 3
31749: UNION
31750: ST_TO_ADDR
// if bt = b_workshop or bt = b_factory then
31751: LD_VAR 0 5
31755: PUSH
31756: LD_INT 2
31758: EQUAL
31759: PUSH
31760: LD_VAR 0 5
31764: PUSH
31765: LD_INT 3
31767: EQUAL
31768: OR
31769: IFFALSE 31787
// fact := fact union i ;
31771: LD_ADDR_EXP 124
31775: PUSH
31776: LD_EXP 124
31780: PUSH
31781: LD_VAR 0 3
31785: UNION
31786: ST_TO_ADDR
// if bt = b_depot or bt = b_warehouse then
31787: LD_VAR 0 5
31791: PUSH
31792: LD_INT 0
31794: EQUAL
31795: PUSH
31796: LD_VAR 0 5
31800: PUSH
31801: LD_INT 1
31803: EQUAL
31804: OR
31805: IFFALSE 31823
// dep := dep union i ;
31807: LD_ADDR_EXP 122
31811: PUSH
31812: LD_EXP 122
31816: PUSH
31817: LD_VAR 0 3
31821: UNION
31822: ST_TO_ADDR
// end ;
31823: GO 31239
31825: POP
31826: POP
// end ;
31827: LD_VAR 0 2
31831: RET
// export function remove_from ( un ) ; var i ; begin
31832: LD_INT 0
31834: PPUSH
31835: PPUSH
// for i in un do
31836: LD_ADDR_VAR 0 3
31840: PUSH
31841: LD_VAR 0 1
31845: PUSH
31846: FOR_IN
31847: IFFALSE 31922
// case GetType ( i ) of unit_human :
31849: LD_VAR 0 3
31853: PPUSH
31854: CALL_OW 247
31858: PUSH
31859: LD_INT 1
31861: DOUBLE
31862: EQUAL
31863: IFTRUE 31867
31865: GO 31879
31867: POP
// remove_from_humans ( i ) ; unit_vehicle :
31868: LD_VAR 0 3
31872: PPUSH
31873: CALL 32115 0 1
31877: GO 31920
31879: LD_INT 2
31881: DOUBLE
31882: EQUAL
31883: IFTRUE 31887
31885: GO 31899
31887: POP
// remove_from_vehicles ( i ) ; unit_building :
31888: LD_VAR 0 3
31892: PPUSH
31893: CALL 32285 0 1
31897: GO 31920
31899: LD_INT 3
31901: DOUBLE
31902: EQUAL
31903: IFTRUE 31907
31905: GO 31919
31907: POP
// remove_from_builds ( i ) ; end ;
31908: LD_VAR 0 3
31912: PPUSH
31913: CALL 31929 0 1
31917: GO 31920
31919: POP
31920: GO 31846
31922: POP
31923: POP
// end ;
31924: LD_VAR 0 2
31928: RET
// export function remove_from_builds ( un ) ; var i ; begin
31929: LD_INT 0
31931: PPUSH
31932: PPUSH
// for i in un do
31933: LD_ADDR_VAR 0 3
31937: PUSH
31938: LD_VAR 0 1
31942: PUSH
31943: FOR_IN
31944: IFFALSE 32108
// begin fact := fact diff i ;
31946: LD_ADDR_EXP 124
31950: PUSH
31951: LD_EXP 124
31955: PUSH
31956: LD_VAR 0 3
31960: DIFF
31961: ST_TO_ADDR
// fort := fort diff i ;
31962: LD_ADDR_EXP 119
31966: PUSH
31967: LD_EXP 119
31971: PUSH
31972: LD_VAR 0 3
31976: DIFF
31977: ST_TO_ADDR
// lab := lab diff i ;
31978: LD_ADDR_EXP 126
31982: PUSH
31983: LD_EXP 126
31987: PUSH
31988: LD_VAR 0 3
31992: DIFF
31993: ST_TO_ADDR
// dep := dep diff i ;
31994: LD_ADDR_EXP 122
31998: PUSH
31999: LD_EXP 122
32003: PUSH
32004: LD_VAR 0 3
32008: DIFF
32009: ST_TO_ADDR
// ctrl := ctrl diff i ;
32010: LD_ADDR_EXP 120
32014: PUSH
32015: LD_EXP 120
32019: PUSH
32020: LD_VAR 0 3
32024: DIFF
32025: ST_TO_ADDR
// b1 := b1 diff i ;
32026: LD_ADDR_EXP 128
32030: PUSH
32031: LD_EXP 128
32035: PUSH
32036: LD_VAR 0 3
32040: DIFF
32041: ST_TO_ADDR
// b2 := b2 diff i ;
32042: LD_ADDR_EXP 129
32046: PUSH
32047: LD_EXP 129
32051: PUSH
32052: LD_VAR 0 3
32056: DIFF
32057: ST_TO_ADDR
// b3 := b3 diff i ;
32058: LD_ADDR_EXP 130
32062: PUSH
32063: LD_EXP 130
32067: PUSH
32068: LD_VAR 0 3
32072: DIFF
32073: ST_TO_ADDR
// b4 := b4 diff i ;
32074: LD_ADDR_EXP 131
32078: PUSH
32079: LD_EXP 131
32083: PUSH
32084: LD_VAR 0 3
32088: DIFF
32089: ST_TO_ADDR
// b5 := b5 diff i ;
32090: LD_ADDR_EXP 132
32094: PUSH
32095: LD_EXP 132
32099: PUSH
32100: LD_VAR 0 3
32104: DIFF
32105: ST_TO_ADDR
// end ;
32106: GO 31943
32108: POP
32109: POP
// end ;
32110: LD_VAR 0 2
32114: RET
// export function remove_from_humans ( un ) ; var i ; begin
32115: LD_INT 0
32117: PPUSH
32118: PPUSH
// for i in un do
32119: LD_ADDR_VAR 0 3
32123: PUSH
32124: LD_VAR 0 1
32128: PUSH
32129: FOR_IN
32130: IFFALSE 32278
// begin sol := sol diff i ;
32132: LD_ADDR_EXP 121
32136: PUSH
32137: LD_EXP 121
32141: PUSH
32142: LD_VAR 0 3
32146: DIFF
32147: ST_TO_ADDR
// eng := eng diff i ;
32148: LD_ADDR_EXP 123
32152: PUSH
32153: LD_EXP 123
32157: PUSH
32158: LD_VAR 0 3
32162: DIFF
32163: ST_TO_ADDR
// mec := mec diff i ;
32164: LD_ADDR_EXP 125
32168: PUSH
32169: LD_EXP 125
32173: PUSH
32174: LD_VAR 0 3
32178: DIFF
32179: ST_TO_ADDR
// sci := sci diff i ;
32180: LD_ADDR_EXP 127
32184: PUSH
32185: LD_EXP 127
32189: PUSH
32190: LD_VAR 0 3
32194: DIFF
32195: ST_TO_ADDR
// a1 := a1 diff i ;
32196: LD_ADDR_EXP 133
32200: PUSH
32201: LD_EXP 133
32205: PUSH
32206: LD_VAR 0 3
32210: DIFF
32211: ST_TO_ADDR
// a2 := a2 diff i ;
32212: LD_ADDR_EXP 134
32216: PUSH
32217: LD_EXP 134
32221: PUSH
32222: LD_VAR 0 3
32226: DIFF
32227: ST_TO_ADDR
// a3 := a3 diff i ;
32228: LD_ADDR_EXP 135
32232: PUSH
32233: LD_EXP 135
32237: PUSH
32238: LD_VAR 0 3
32242: DIFF
32243: ST_TO_ADDR
// a4 := a4 diff i ;
32244: LD_ADDR_EXP 136
32248: PUSH
32249: LD_EXP 136
32253: PUSH
32254: LD_VAR 0 3
32258: DIFF
32259: ST_TO_ADDR
// a5 := a5 diff i ;
32260: LD_ADDR_EXP 137
32264: PUSH
32265: LD_EXP 137
32269: PUSH
32270: LD_VAR 0 3
32274: DIFF
32275: ST_TO_ADDR
// end ;
32276: GO 32129
32278: POP
32279: POP
// end ;
32280: LD_VAR 0 2
32284: RET
// export function remove_from_vehicles ( un ) ; var i ; begin
32285: LD_INT 0
32287: PPUSH
32288: PPUSH
// for i in un do
32289: LD_ADDR_VAR 0 3
32293: PUSH
32294: LD_VAR 0 1
32298: PUSH
32299: FOR_IN
32300: IFFALSE 32336
// begin attack := attack diff i ;
32302: LD_ADDR_EXP 138
32306: PUSH
32307: LD_EXP 138
32311: PUSH
32312: LD_VAR 0 3
32316: DIFF
32317: ST_TO_ADDR
// defence := defence diff i ;
32318: LD_ADDR_EXP 139
32322: PUSH
32323: LD_EXP 139
32327: PUSH
32328: LD_VAR 0 3
32332: DIFF
32333: ST_TO_ADDR
// end ;
32334: GO 32299
32336: POP
32337: POP
// end ; end_of_file
32338: LD_VAR 0 2
32342: RET
// export function zachranka ( un ) ; begin
32343: LD_INT 0
32345: PPUSH
// if not FilterAllUnits ( [ [ f_not , [ f_side , ai ] ] , [ f_dist , un , 24 ] ] ) then
32346: LD_INT 3
32348: PUSH
32349: LD_INT 22
32351: PUSH
32352: LD_EXP 6
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 91
32367: PUSH
32368: LD_VAR 0 1
32372: PUSH
32373: LD_INT 24
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: LIST
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PPUSH
32385: CALL_OW 69
32389: NOT
32390: IFFALSE 32463
// begin ComHeal ( UnitFilter ( sci , [ [ f_dist , un , 30 ] ] ) , un ) ;
32392: LD_EXP 127
32396: PPUSH
32397: LD_INT 91
32399: PUSH
32400: LD_VAR 0 1
32404: PUSH
32405: LD_INT 30
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: LIST
32412: PUSH
32413: EMPTY
32414: LIST
32415: PPUSH
32416: CALL_OW 72
32420: PPUSH
32421: LD_VAR 0 1
32425: PPUSH
32426: CALL_OW 128
// AddComReturn ( UnitFilter ( sci , [ [ f_dist , un , 30 ] ] ) ) ;
32430: LD_EXP 127
32434: PPUSH
32435: LD_INT 91
32437: PUSH
32438: LD_VAR 0 1
32442: PUSH
32443: LD_INT 30
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: LIST
32450: PUSH
32451: EMPTY
32452: LIST
32453: PPUSH
32454: CALL_OW 72
32458: PPUSH
32459: CALL_OW 204
// end ; end ; end_of_file
32463: LD_VAR 0 2
32467: RET
// var padlo ; function buch_crate ; var a , h , c ; begin
32468: LD_INT 0
32470: PPUSH
32471: PPUSH
32472: PPUSH
32473: PPUSH
// a := IsInUnit ( Burlak ) ;
32474: LD_ADDR_VAR 0 2
32478: PUSH
32479: LD_EXP 61
32483: PPUSH
32484: CALL_OW 310
32488: ST_TO_ADDR
// if not a then
32489: LD_VAR 0 2
32493: NOT
32494: IFFALSE 32506
// a := Burlak ;
32496: LD_ADDR_VAR 0 2
32500: PUSH
32501: LD_EXP 61
32505: ST_TO_ADDR
// repeat c := c + 1 ;
32506: LD_ADDR_VAR 0 4
32510: PUSH
32511: LD_VAR 0 4
32515: PUSH
32516: LD_INT 1
32518: PLUS
32519: ST_TO_ADDR
// h := RandHexArea ( bedny , false ) ;
32520: LD_ADDR_VAR 0 3
32524: PUSH
32525: LD_INT 29
32527: PPUSH
32528: LD_INT 0
32530: PPUSH
32531: CALL_OW 16
32535: ST_TO_ADDR
// until c > 100 or GetDistUnitXY ( Burlak , h [ 1 ] , h [ 2 ] ) < 25 or GetDistUnitArea ( Burlak , bedny ) > 15 ;
32536: LD_VAR 0 4
32540: PUSH
32541: LD_INT 100
32543: GREATER
32544: PUSH
32545: LD_EXP 61
32549: PPUSH
32550: LD_VAR 0 3
32554: PUSH
32555: LD_INT 1
32557: ARRAY
32558: PPUSH
32559: LD_VAR 0 3
32563: PUSH
32564: LD_INT 2
32566: ARRAY
32567: PPUSH
32568: CALL_OW 297
32572: PUSH
32573: LD_INT 25
32575: LESS
32576: OR
32577: PUSH
32578: LD_EXP 61
32582: PPUSH
32583: LD_INT 29
32585: PPUSH
32586: CALL_OW 299
32590: PUSH
32591: LD_INT 15
32593: GREATER
32594: OR
32595: IFFALSE 32506
// CreateCratesXY ( 5 , h [ 1 ] , h [ 2 ] , true ) ;
32597: LD_INT 5
32599: PPUSH
32600: LD_VAR 0 3
32604: PUSH
32605: LD_INT 1
32607: ARRAY
32608: PPUSH
32609: LD_VAR 0 3
32613: PUSH
32614: LD_INT 2
32616: ARRAY
32617: PPUSH
32618: LD_INT 1
32620: PPUSH
32621: CALL_OW 54
// padlo := padlo + 1 ;
32625: LD_ADDR_LOC 24
32629: PUSH
32630: LD_LOC 24
32634: PUSH
32635: LD_INT 1
32637: PLUS
32638: ST_TO_ADDR
// end ;
32639: LD_VAR 0 1
32643: RET
// every 0 0$53 do
32644: GO 32646
32646: DISABLE
// begin if [ ( padlo < 4 ) , ( padlo < 4 ) , ( padlo < 3 ) ] [ difficulty ] then
32647: LD_LOC 24
32651: PUSH
32652: LD_INT 4
32654: LESS
32655: PUSH
32656: LD_LOC 24
32660: PUSH
32661: LD_INT 4
32663: LESS
32664: PUSH
32665: LD_LOC 24
32669: PUSH
32670: LD_INT 3
32672: LESS
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: LIST
32678: PUSH
32679: LD_OWVAR 67
32683: ARRAY
32684: IFFALSE 32756
// case ( tick div 1 1$0 ) of 0 :
32686: LD_OWVAR 1
32690: PUSH
32691: LD_INT 2100
32693: DIV
32694: PUSH
32695: LD_INT 0
32697: DOUBLE
32698: EQUAL
32699: IFTRUE 32703
32701: GO 32710
32703: POP
// buch_crate ; 3 :
32704: CALL 32468 0 0
32708: GO 32756
32710: LD_INT 3
32712: DOUBLE
32713: EQUAL
32714: IFTRUE 32718
32716: GO 32725
32718: POP
// buch_crate ; 7 :
32719: CALL 32468 0 0
32723: GO 32756
32725: LD_INT 7
32727: DOUBLE
32728: EQUAL
32729: IFTRUE 32733
32731: GO 32740
32733: POP
// buch_crate ; 12 :
32734: CALL 32468 0 0
32738: GO 32756
32740: LD_INT 12
32742: DOUBLE
32743: EQUAL
32744: IFTRUE 32748
32746: GO 32755
32748: POP
// buch_crate ; end ;
32749: CALL 32468 0 0
32753: GO 32756
32755: POP
// if [ ( padlo < 4 ) , ( padlo < 4 ) , ( padlo < 3 ) ] [ difficulty ] then
32756: LD_LOC 24
32760: PUSH
32761: LD_INT 4
32763: LESS
32764: PUSH
32765: LD_LOC 24
32769: PUSH
32770: LD_INT 4
32772: LESS
32773: PUSH
32774: LD_LOC 24
32778: PUSH
32779: LD_INT 3
32781: LESS
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: LIST
32787: PUSH
32788: LD_OWVAR 67
32792: ARRAY
32793: IFFALSE 32796
// enable ;
32795: ENABLE
// end ;
32796: END
// every 0 0$5 do
32797: GO 32799
32799: DISABLE
// begin if [ ( padlo < 4 ) , ( padlo < 4 ) , ( padlo < 3 ) ] [ difficulty ] then
32800: LD_LOC 24
32804: PUSH
32805: LD_INT 4
32807: LESS
32808: PUSH
32809: LD_LOC 24
32813: PUSH
32814: LD_INT 4
32816: LESS
32817: PUSH
32818: LD_LOC 24
32822: PUSH
32823: LD_INT 3
32825: LESS
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: LIST
32831: PUSH
32832: LD_OWVAR 67
32836: ARRAY
32837: IFFALSE 32959
// case true of GetTechProgress ( tech_MatPred , you ) > 95 :
32839: LD_INT 1
32841: PUSH
32842: LD_INT 9
32844: PPUSH
32845: LD_EXP 1
32849: PPUSH
32850: CALL_OW 326
32854: PUSH
32855: LD_INT 95
32857: GREATER
32858: DOUBLE
32859: EQUAL
32860: IFTRUE 32864
32862: GO 32871
32864: POP
// buch_crate ; GetTechProgress ( tech_MatPred , you ) > 70 :
32865: CALL 32468 0 0
32869: GO 32959
32871: LD_INT 9
32873: PPUSH
32874: LD_EXP 1
32878: PPUSH
32879: CALL_OW 326
32883: PUSH
32884: LD_INT 70
32886: GREATER
32887: DOUBLE
32888: EQUAL
32889: IFTRUE 32893
32891: GO 32900
32893: POP
// buch_crate ; GetTechProgress ( tech_MatPred , you ) > 40 :
32894: CALL 32468 0 0
32898: GO 32959
32900: LD_INT 9
32902: PPUSH
32903: LD_EXP 1
32907: PPUSH
32908: CALL_OW 326
32912: PUSH
32913: LD_INT 40
32915: GREATER
32916: DOUBLE
32917: EQUAL
32918: IFTRUE 32922
32920: GO 32929
32922: POP
// buch_crate ; GetTechProgress ( tech_MatPred , you ) > 1 :
32923: CALL 32468 0 0
32927: GO 32959
32929: LD_INT 9
32931: PPUSH
32932: LD_EXP 1
32936: PPUSH
32937: CALL_OW 326
32941: PUSH
32942: LD_INT 1
32944: GREATER
32945: DOUBLE
32946: EQUAL
32947: IFTRUE 32951
32949: GO 32958
32951: POP
// buch_crate ; end ;
32952: CALL 32468 0 0
32956: GO 32959
32958: POP
// if [ ( padlo < 4 ) , ( padlo < 4 ) , ( padlo < 3 ) ] [ difficulty ] then
32959: LD_LOC 24
32963: PUSH
32964: LD_INT 4
32966: LESS
32967: PUSH
32968: LD_LOC 24
32972: PUSH
32973: LD_INT 4
32975: LESS
32976: PUSH
32977: LD_LOC 24
32981: PUSH
32982: LD_INT 3
32984: LESS
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: LIST
32990: PUSH
32991: LD_OWVAR 67
32995: ARRAY
32996: IFFALSE 32999
// enable ;
32998: ENABLE
// end ; end_of_file
32999: END
// every 0 0$2 + 0 0$0.1 do
33000: GO 33002
33002: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) > FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) then
33003: LD_INT 22
33005: PUSH
33006: LD_INT 3
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 2
33015: PUSH
33016: LD_INT 25
33018: PUSH
33019: LD_INT 12
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 25
33028: PUSH
33029: LD_INT 16
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 25
33038: PUSH
33039: LD_INT 15
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 25
33048: PUSH
33049: LD_INT 17
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PPUSH
33067: CALL_OW 69
33071: PUSH
33072: LD_INT 22
33074: PUSH
33075: LD_INT 3
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 21
33084: PUSH
33085: LD_INT 1
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 3
33094: PUSH
33095: LD_INT 2
33097: PUSH
33098: LD_INT 25
33100: PUSH
33101: LD_INT 12
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 25
33110: PUSH
33111: LD_INT 16
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 25
33120: PUSH
33121: LD_INT 15
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 25
33130: PUSH
33131: LD_INT 17
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: LIST
33153: PPUSH
33154: CALL_OW 69
33158: GREATER
33159: IFFALSE 33170
// begin SetAchievement ( ACH_POTA ) ;
33161: LD_STRING ACH_POTA
33163: PPUSH
33164: CALL_OW 543
// exit ;
33168: GO 33171
// end ; enable ;
33170: ENABLE
// end ;
33171: END
// export function SA_SaveVsevolod ; begin
33172: LD_INT 0
33174: PPUSH
// SetAchievement ( ACH_BIA ) ;
33175: LD_STRING ACH_BIA
33177: PPUSH
33178: CALL_OW 543
// end ;
33182: LD_VAR 0 1
33186: RET
// export function SA_NotSaveVsevolod ; begin
33187: LD_INT 0
33189: PPUSH
// SetAchievement ( ACH_BLO ) ;
33190: LD_STRING ACH_BLO
33192: PPUSH
33193: CALL_OW 543
// end ; end_of_file
33197: LD_VAR 0 1
33201: RET
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
33202: LD_INT 0
33204: PPUSH
33205: PPUSH
// if not missionNumber then
33206: LD_VAR 0 2
33210: NOT
33211: IFFALSE 33215
// exit ;
33213: GO 33345
// achiv := false ;
33215: LD_ADDR_VAR 0 7
33219: PUSH
33220: LD_INT 0
33222: ST_TO_ADDR
// case campaignNumber of 1 :
33223: LD_VAR 0 1
33227: PUSH
33228: LD_INT 1
33230: DOUBLE
33231: EQUAL
33232: IFTRUE 33236
33234: GO 33247
33236: POP
// achiv := ACH_GOTA ; 2 :
33237: LD_ADDR_VAR 0 7
33241: PUSH
33242: LD_STRING ACH_GOTA
33244: ST_TO_ADDR
33245: GO 33297
33247: LD_INT 2
33249: DOUBLE
33250: EQUAL
33251: IFTRUE 33255
33253: GO 33258
33255: POP
// ; 3 :
33256: GO 33297
33258: LD_INT 3
33260: DOUBLE
33261: EQUAL
33262: IFTRUE 33266
33264: GO 33277
33266: POP
// achiv := ACH_MOTSU ; 4 :
33267: LD_ADDR_VAR 0 7
33271: PUSH
33272: LD_STRING ACH_MOTSU
33274: ST_TO_ADDR
33275: GO 33297
33277: LD_INT 4
33279: DOUBLE
33280: EQUAL
33281: IFTRUE 33285
33283: GO 33296
33285: POP
// achiv := ACH_LOP ; end ;
33286: LD_ADDR_VAR 0 7
33290: PUSH
33291: LD_STRING ACH_LOP
33293: ST_TO_ADDR
33294: GO 33297
33296: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
33297: LD_OWVAR 67
33301: PUSH
33302: LD_INT 3
33304: EQUAL
33305: PUSH
33306: LD_VAR 0 7
33310: AND
33311: PUSH
33312: LD_VAR 0 3
33316: AND
33317: PUSH
33318: LD_VAR 0 4
33322: AND
33323: PUSH
33324: LD_VAR 0 5
33328: AND
33329: IFFALSE 33345
// SetAchievementEX ( achiv , missionNumber ) ;
33331: LD_VAR 0 7
33335: PPUSH
33336: LD_VAR 0 2
33340: PPUSH
33341: CALL_OW 564
// end ;
33345: LD_VAR 0 6
33349: RET
// export function SA_BehemothConstructed ; begin
33350: LD_INT 0
33352: PPUSH
// SetAchievement ( ACH_SMC ) ;
33353: LD_STRING ACH_SMC
33355: PPUSH
33356: CALL_OW 543
// end ;
33360: LD_VAR 0 1
33364: RET
