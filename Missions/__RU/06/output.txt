// export you , you2 , americans , arabians , neutral ; export ai , ai_nation ; export apemans , rulive ; export cargo_am ; export Vsevolod_vstoupil ; export Vsevolod_uderna_group ; export belkovfreed ; export OvsyenkoTaken ; export OvsyenkoCaptured ; export mcdef_difficulty ; export mcatt_difficulty ; export na_kopci_mcdef_difficulty ; export b1_levels , b2_levels , b3_levels , b4_levels , b5_levels ; export normal1_utok , normal2_utok , normal3_utok , normal4_utok , vsevolod_attack , vsevolod_final_attack ; export mine_obj_completed ; export bulldozer_used ; export cas_mezi_utoky ; export cas_prvniho_utoku ; export kolik_ma_vsevolod_casu ; export kolik_ma_vsevolod_mezi_utoky ; export kolik_je_v_depotu ; export kolik_je_sib_v_hornim ; export zivoty_armoury , zivoty_armoury2 ; export utoci_max ; export all_labs ; export function Vyhra ; begin
   0: LD_INT 0
   2: PPUSH
// end ;
   3: LD_VAR 0 1
   7: RET
// function set_sides ; begin
   8: LD_INT 0
  10: PPUSH
// you := 3 ;
  11: LD_ADDR_EXP 1
  15: PUSH
  16: LD_INT 3
  18: ST_TO_ADDR
// you2 := 6 ;
  19: LD_ADDR_EXP 2
  23: PUSH
  24: LD_INT 6
  26: ST_TO_ADDR
// americans := 1 ;
  27: LD_ADDR_EXP 3
  31: PUSH
  32: LD_INT 1
  34: ST_TO_ADDR
// arabians := 2 ;
  35: LD_ADDR_EXP 4
  39: PUSH
  40: LD_INT 2
  42: ST_TO_ADDR
// neutral := 0 ;
  43: LD_ADDR_EXP 5
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// OvsyenkoTaken = 0 ;
  51: LD_ADDR_EXP 14
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// ai := americans ;
  59: LD_ADDR_EXP 6
  63: PUSH
  64: LD_EXP 3
  68: ST_TO_ADDR
// ai_nation := nation_american ;
  69: LD_ADDR_EXP 7
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// end ;
  77: LD_VAR 0 1
  81: RET
// var gleb_lives ; every 0 0$1 trigger gleb_lives <> GetLives ( gleb ) do var i ;
  82: LD_LOC 1
  86: PUSH
  87: LD_EXP 66
  91: PPUSH
  92: CALL_OW 256
  96: NONEQUAL
  97: IFFALSE 173
  99: GO 101
 101: DISABLE
 102: LD_INT 0
 104: PPUSH
// begin for i in FilterAllUnits ( [ f_side , you ] ) do
 105: LD_ADDR_VAR 0 1
 109: PUSH
 110: LD_INT 22
 112: PUSH
 113: LD_EXP 1
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PPUSH
 122: CALL_OW 69
 126: PUSH
 127: FOR_IN
 128: IFFALSE 156
// if WantsToAttack ( i ) = Gleb then
 130: LD_VAR 0 1
 134: PPUSH
 135: CALL_OW 319
 139: PUSH
 140: LD_EXP 66
 144: EQUAL
 145: IFFALSE 154
// YouLost ( Gleb ) ;
 147: LD_STRING Gleb
 149: PPUSH
 150: CALL_OW 104
 154: GO 127
 156: POP
 157: POP
// gleb_lives := GetLives ( gleb ) ;
 158: LD_ADDR_LOC 1
 162: PUSH
 163: LD_EXP 66
 167: PPUSH
 168: CALL_OW 256
 172: ST_TO_ADDR
// end ;
 173: PPOPN 1
 175: END
// every 0 0$5 trigger not FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_class , class_engineer ] , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
 176: LD_INT 22
 178: PUSH
 179: LD_EXP 1
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 2
 190: PUSH
 191: LD_INT 25
 193: PUSH
 194: LD_INT 2
 196: PUSH
 197: EMPTY
 198: LIST
 199: LIST
 200: PUSH
 201: LD_INT 30
 203: PUSH
 204: LD_INT 1
 206: PUSH
 207: EMPTY
 208: LIST
 209: LIST
 210: PUSH
 211: LD_INT 30
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: PUSH
 221: LD_INT 30
 223: PUSH
 224: LD_INT 6
 226: PUSH
 227: EMPTY
 228: LIST
 229: LIST
 230: PUSH
 231: LD_INT 30
 233: PUSH
 234: LD_INT 7
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 30
 243: PUSH
 244: LD_INT 8
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PPUSH
 264: CALL_OW 69
 268: NOT
 269: IFFALSE 281
 271: GO 273
 273: DISABLE
// begin YouLost ( NoDepotNoEngineerNoLab ) ;
 274: LD_STRING NoDepotNoEngineerNoLab
 276: PPUSH
 277: CALL_OW 104
// end ;
 281: END
// export function VyhraResearch ; begin
 282: LD_INT 0
 284: PPUSH
// set_medals ;
 285: CALL 428 0 0
// GiveMedals ( Research ) ;
 289: LD_STRING Research
 291: PPUSH
 292: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) ) ;
 296: LD_INT 22
 298: PUSH
 299: LD_EXP 1
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PUSH
 308: LD_INT 21
 310: PUSH
 311: LD_INT 1
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: LD_INT 23
 320: PUSH
 321: LD_INT 3
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: LIST
 332: PPUSH
 333: CALL_OW 69
 337: PPUSH
 338: CALL_OW 43
// Save ;
 342: CALL 8790 0 0
// YouWin ;
 346: CALL_OW 103
// end ;
 350: LD_VAR 0 1
 354: RET
// export function VyhraExit ; begin
 355: LD_INT 0
 357: PPUSH
// set_medals ;
 358: CALL 428 0 0
// GiveMedals ( Exit ) ;
 362: LD_STRING Exit
 364: PPUSH
 365: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) ) ;
 369: LD_INT 22
 371: PUSH
 372: LD_EXP 1
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: PUSH
 381: LD_INT 21
 383: PUSH
 384: LD_INT 1
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: PUSH
 391: LD_INT 23
 393: PUSH
 394: LD_INT 3
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: PPUSH
 406: CALL_OW 69
 410: PPUSH
 411: CALL_OW 43
// Save ;
 415: CALL 8790 0 0
// YouWin ;
 419: CALL_OW 103
// end ;
 423: LD_VAR 0 1
 427: RET
// export function set_medals ; begin
 428: LD_INT 0
 430: PPUSH
// if not VsevolodSaved then
 431: LD_EXP 57
 435: NOT
 436: IFFALSE 442
// SA_NotSaveVsevolod ;
 438: CALL 33539 0 0
// SA_EndMission ( 3 , 6 , VsevolodSaved , OvsyenkoTaken and not OvsyenkoCaptured , GetTech ( tech_MatPred , you ) = state_researched ) ;
 442: LD_INT 3
 444: PPUSH
 445: LD_INT 6
 447: PPUSH
 448: LD_EXP 57
 452: PPUSH
 453: LD_EXP 14
 457: PUSH
 458: LD_EXP 15
 462: NOT
 463: AND
 464: PPUSH
 465: LD_INT 9
 467: PPUSH
 468: LD_EXP 1
 472: PPUSH
 473: CALL_OW 321
 477: PUSH
 478: LD_INT 2
 480: EQUAL
 481: PPUSH
 482: CALL 33554 0 5
// AddMedal ( Vsevolod , VsevolodSaved ) ;
 486: LD_STRING Vsevolod
 488: PPUSH
 489: LD_EXP 57
 493: PPUSH
 494: CALL_OW 101
// AddMedal ( Ovsyenko , OvsyenkoTaken and not OvsyenkoCaptured ) ;
 498: LD_STRING Ovsyenko
 500: PPUSH
 501: LD_EXP 14
 505: PUSH
 506: LD_EXP 15
 510: NOT
 511: AND
 512: PPUSH
 513: CALL_OW 101
// AddMedal ( Prediction , GetTech ( tech_MatPred , you ) = state_researched ) ;
 517: LD_STRING Prediction
 519: PPUSH
 520: LD_INT 9
 522: PPUSH
 523: LD_EXP 1
 527: PPUSH
 528: CALL_OW 321
 532: PUSH
 533: LD_INT 2
 535: EQUAL
 536: PPUSH
 537: CALL_OW 101
// end ;
 541: LD_VAR 0 1
 545: RET
// export function set_difficulty ; var d ; begin
 546: LD_INT 0
 548: PPUSH
 549: PPUSH
// d := difficulty ;
 550: LD_ADDR_VAR 0 2
 554: PUSH
 555: LD_OWVAR 67
 559: ST_TO_ADDR
// b1_levels := [ [ 1 , 3 , 5 ] [ d ] , [ 2 , 3 , 5 ] [ d ] ] ;
 560: LD_ADDR_EXP 19
 564: PUSH
 565: LD_INT 1
 567: PUSH
 568: LD_INT 3
 570: PUSH
 571: LD_INT 5
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: LD_VAR 0 2
 583: ARRAY
 584: PUSH
 585: LD_INT 2
 587: PUSH
 588: LD_INT 3
 590: PUSH
 591: LD_INT 5
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: PUSH
 599: LD_VAR 0 2
 603: ARRAY
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: ST_TO_ADDR
// b2_levels := [ [ 2 , 3 , 5 ] [ d ] , [ 3 , 4 , 6 ] [ d ] ] ;
 609: LD_ADDR_EXP 20
 613: PUSH
 614: LD_INT 2
 616: PUSH
 617: LD_INT 3
 619: PUSH
 620: LD_INT 5
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: LIST
 627: PUSH
 628: LD_VAR 0 2
 632: ARRAY
 633: PUSH
 634: LD_INT 3
 636: PUSH
 637: LD_INT 4
 639: PUSH
 640: LD_INT 6
 642: PUSH
 643: EMPTY
 644: LIST
 645: LIST
 646: LIST
 647: PUSH
 648: LD_VAR 0 2
 652: ARRAY
 653: PUSH
 654: EMPTY
 655: LIST
 656: LIST
 657: ST_TO_ADDR
// b3_levels := [ [ 2 , 5 , 8 ] [ d ] , [ 7 , 8 , 10 ] [ d ] ] ;
 658: LD_ADDR_EXP 21
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 5
 668: PUSH
 669: LD_INT 8
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: LIST
 676: PUSH
 677: LD_VAR 0 2
 681: ARRAY
 682: PUSH
 683: LD_INT 7
 685: PUSH
 686: LD_INT 8
 688: PUSH
 689: LD_INT 10
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PUSH
 697: LD_VAR 0 2
 701: ARRAY
 702: PUSH
 703: EMPTY
 704: LIST
 705: LIST
 706: ST_TO_ADDR
// b4_levels := [ [ 5 , 7 , 10 ] [ d ] , [ 7 , 8 , 10 ] [ d ] ] ;
 707: LD_ADDR_EXP 22
 711: PUSH
 712: LD_INT 5
 714: PUSH
 715: LD_INT 7
 717: PUSH
 718: LD_INT 10
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: LIST
 725: PUSH
 726: LD_VAR 0 2
 730: ARRAY
 731: PUSH
 732: LD_INT 7
 734: PUSH
 735: LD_INT 8
 737: PUSH
 738: LD_INT 10
 740: PUSH
 741: EMPTY
 742: LIST
 743: LIST
 744: LIST
 745: PUSH
 746: LD_VAR 0 2
 750: ARRAY
 751: PUSH
 752: EMPTY
 753: LIST
 754: LIST
 755: ST_TO_ADDR
// b5_levels := [ [ 3 , 6 , 9 ] [ d ] , [ 3 , 6 , 9 ] [ d ] ] ;
 756: LD_ADDR_EXP 23
 760: PUSH
 761: LD_INT 3
 763: PUSH
 764: LD_INT 6
 766: PUSH
 767: LD_INT 9
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: LIST
 774: PUSH
 775: LD_VAR 0 2
 779: ARRAY
 780: PUSH
 781: LD_INT 3
 783: PUSH
 784: LD_INT 6
 786: PUSH
 787: LD_INT 9
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: LIST
 794: PUSH
 795: LD_VAR 0 2
 799: ARRAY
 800: PUSH
 801: EMPTY
 802: LIST
 803: LIST
 804: ST_TO_ADDR
// mcatt_difficulty := [ 200 , 250 , 300 ] [ d ] ;
 805: LD_ADDR_EXP 17
 809: PUSH
 810: LD_INT 200
 812: PUSH
 813: LD_INT 250
 815: PUSH
 816: LD_INT 300
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: LIST
 823: PUSH
 824: LD_VAR 0 2
 828: ARRAY
 829: ST_TO_ADDR
// mcdef_difficulty := [ 270 , 350 , 380 ] [ d ] ;
 830: LD_ADDR_EXP 16
 834: PUSH
 835: LD_INT 270
 837: PUSH
 838: LD_INT 350
 840: PUSH
 841: LD_INT 380
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: LIST
 848: PUSH
 849: LD_VAR 0 2
 853: ARRAY
 854: ST_TO_ADDR
// na_kopci_mcdef_difficulty := [ 200 , 230 , 260 ] [ d ] ;
 855: LD_ADDR_EXP 18
 859: PUSH
 860: LD_INT 200
 862: PUSH
 863: LD_INT 230
 865: PUSH
 866: LD_INT 260
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: PUSH
 874: LD_VAR 0 2
 878: ARRAY
 879: ST_TO_ADDR
// kolik_ma_vsevolod_casu := [ 46 46$0 , 39 39$0 , 32 32$0 ] [ d ] ;
 880: LD_ADDR_EXP 34
 884: PUSH
 885: LD_INT 96600
 887: PUSH
 888: LD_INT 81900
 890: PUSH
 891: LD_INT 67200
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: LIST
 898: PUSH
 899: LD_VAR 0 2
 903: ARRAY
 904: ST_TO_ADDR
// kolik_ma_vsevolod_mezi_utoky := [ 10 10$0 , 8 8$0 , 5 5$0 ] [ d ] ;
 905: LD_ADDR_EXP 35
 909: PUSH
 910: LD_INT 21000
 912: PUSH
 913: LD_INT 16800
 915: PUSH
 916: LD_INT 10500
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_VAR 0 2
 928: ARRAY
 929: ST_TO_ADDR
// kolik_je_v_depotu := [ 220 , 180 , 120 ] [ d ] ;
 930: LD_ADDR_EXP 36
 934: PUSH
 935: LD_INT 220
 937: PUSH
 938: LD_INT 180
 940: PUSH
 941: LD_INT 120
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: LIST
 948: PUSH
 949: LD_VAR 0 2
 953: ARRAY
 954: ST_TO_ADDR
// kolik_je_sib_v_hornim := [ 130 , 90 , 65 ] [ d ] ;
 955: LD_ADDR_EXP 37
 959: PUSH
 960: LD_INT 130
 962: PUSH
 963: LD_INT 90
 965: PUSH
 966: LD_INT 65
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: PUSH
 974: LD_VAR 0 2
 978: ARRAY
 979: ST_TO_ADDR
// zivoty_armoury := [ hranice_umirani + 50 , hranice_umirani + 150 , hranice_umirani + 350 ] [ d ] ;
 980: LD_ADDR_EXP 38
 984: PUSH
 985: LD_INT 250
 987: PUSH
 988: LD_INT 50
 990: PLUS
 991: PUSH
 992: LD_INT 250
 994: PUSH
 995: LD_INT 150
 997: PLUS
 998: PUSH
 999: LD_INT 250
1001: PUSH
1002: LD_INT 350
1004: PLUS
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: LIST
1010: PUSH
1011: LD_VAR 0 2
1015: ARRAY
1016: ST_TO_ADDR
// zivoty_armoury2 := [ hranice_umirani + 150 , hranice_umirani + 350 , hranice_umirani + 550 ] [ d ] ;
1017: LD_ADDR_EXP 39
1021: PUSH
1022: LD_INT 250
1024: PUSH
1025: LD_INT 150
1027: PLUS
1028: PUSH
1029: LD_INT 250
1031: PUSH
1032: LD_INT 350
1034: PLUS
1035: PUSH
1036: LD_INT 250
1038: PUSH
1039: LD_INT 550
1041: PLUS
1042: PUSH
1043: EMPTY
1044: LIST
1045: LIST
1046: LIST
1047: PUSH
1048: LD_VAR 0 2
1052: ARRAY
1053: ST_TO_ADDR
// cas_mezi_utoky := [ 6 6$0 , 3 3$0 , 0 0$30 ] [ d ] ;
1054: LD_ADDR_EXP 32
1058: PUSH
1059: LD_INT 12600
1061: PUSH
1062: LD_INT 6300
1064: PUSH
1065: LD_INT 1050
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: PUSH
1073: LD_VAR 0 2
1077: ARRAY
1078: ST_TO_ADDR
// utoci_max := [ 3 , 6 , 9 ] [ d ] ;
1079: LD_ADDR_EXP 40
1083: PUSH
1084: LD_INT 3
1086: PUSH
1087: LD_INT 6
1089: PUSH
1090: LD_INT 9
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: PUSH
1098: LD_VAR 0 2
1102: ARRAY
1103: ST_TO_ADDR
// cas_prvniho_utoku := [ 5 5$0 , 3 3$30 , 1 1$0 ] [ d ] ;
1104: LD_ADDR_EXP 33
1108: PUSH
1109: LD_INT 10500
1111: PUSH
1112: LD_INT 7350
1114: PUSH
1115: LD_INT 2100
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: LIST
1122: PUSH
1123: LD_VAR 0 2
1127: ARRAY
1128: ST_TO_ADDR
// end ;
1129: LD_VAR 0 1
1133: RET
// export mrtvi_vsevolodaci ; every 0 0$1 do
1134: GO 1136
1136: DISABLE
// begin debug_strings := [ mrtvi_vsevolodaci , [ ( tick div 0 0$1 ) div 60 , ( tick div 0 0$1 ) mod 60 ] ] ;
1137: LD_ADDR_OWVAR 48
1141: PUSH
1142: LD_EXP 42
1146: PUSH
1147: LD_OWVAR 1
1151: PUSH
1152: LD_INT 35
1154: DIV
1155: PUSH
1156: LD_INT 60
1158: DIV
1159: PUSH
1160: LD_OWVAR 1
1164: PUSH
1165: LD_INT 35
1167: DIV
1168: PUSH
1169: LD_INT 60
1171: MOD
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: ST_TO_ADDR
// enable ;
1181: ENABLE
// end ;
1182: END
// starting begin all_labs := [ b_lab , b_lab_half , b_lab_full ] ;
1183: LD_ADDR_EXP 41
1187: PUSH
1188: LD_INT 6
1190: PUSH
1191: LD_INT 7
1193: PUSH
1194: LD_INT 8
1196: PUSH
1197: EMPTY
1198: LIST
1199: LIST
1200: LIST
1201: ST_TO_ADDR
// normal1_utok := 7001 ;
1202: LD_ADDR_EXP 24
1206: PUSH
1207: LD_INT 7001
1209: ST_TO_ADDR
// normal2_utok := 7002 ;
1210: LD_ADDR_EXP 25
1214: PUSH
1215: LD_INT 7002
1217: ST_TO_ADDR
// normal3_utok := 7003 ;
1218: LD_ADDR_EXP 26
1222: PUSH
1223: LD_INT 7003
1225: ST_TO_ADDR
// normal4_utok := 7004 ;
1226: LD_ADDR_EXP 27
1230: PUSH
1231: LD_INT 7004
1233: ST_TO_ADDR
// vsevolod_attack := 7005 ;
1234: LD_ADDR_EXP 28
1238: PUSH
1239: LD_INT 7005
1241: ST_TO_ADDR
// vsevolod_final_attack := 7006 ;
1242: LD_ADDR_EXP 29
1246: PUSH
1247: LD_INT 7006
1249: ST_TO_ADDR
// bulldozer_used := false ;
1250: LD_ADDR_EXP 31
1254: PUSH
1255: LD_INT 0
1257: ST_TO_ADDR
// SetBName ( RuDepot , ovsyenko ) ;
1258: LD_INT 58
1260: PPUSH
1261: LD_STRING ovsyenko
1263: PPUSH
1264: CALL_OW 500
// set_difficulty ;
1268: CALL 546 0 0
// set_sides ;
1272: CALL 8 0 0
// load ;
1276: CALL 7302 0 0
// place_b ;
1280: CALL 19530 0 0
// place_in_ru_cars ;
1284: CALL 8217 0 0
// place_ru_cars ;
1288: CALL 8567 0 0
// apemans := FilterAllUnits ( [ [ f_nation , nation_nature ] , [ f_type , unit_human ] ] ) ;
1292: LD_ADDR_EXP 8
1296: PUSH
1297: LD_INT 23
1299: PUSH
1300: LD_INT 0
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: LD_INT 21
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PPUSH
1321: CALL_OW 69
1325: ST_TO_ADDR
// set_shorts ;
1326: CALL 1335 0 0
// DStart ;
1330: CALL 1443 0 0
// end ; end_of_file
1334: END
// export Kar , Lip , Bur , Pla , Ptr , Pty , Glb , Tit , Dol , Vse ; export donttalk ; export function set_shorts ; begin
1335: LD_INT 0
1337: PPUSH
// Kar := Karamazov ;
1338: LD_ADDR_EXP 43
1342: PUSH
1343: LD_EXP 64
1347: ST_TO_ADDR
// Lip := Lipshchin ;
1348: LD_ADDR_EXP 44
1352: PUSH
1353: LD_EXP 70
1357: ST_TO_ADDR
// Bur := Burlak ;
1358: LD_ADDR_EXP 45
1362: PUSH
1363: LD_EXP 62
1367: ST_TO_ADDR
// Pla := Platonov ;
1368: LD_ADDR_EXP 46
1372: PUSH
1373: LD_EXP 63
1377: ST_TO_ADDR
// Ptr := Petrovova ;
1378: LD_ADDR_EXP 47
1382: PUSH
1383: LD_EXP 65
1387: ST_TO_ADDR
// Pty := Petrosyan ;
1388: LD_ADDR_EXP 48
1392: PUSH
1393: LD_EXP 67
1397: ST_TO_ADDR
// Glb := Gleb ;
1398: LD_ADDR_EXP 49
1402: PUSH
1403: LD_EXP 66
1407: ST_TO_ADDR
// Tit := Titov ;
1408: LD_ADDR_EXP 50
1412: PUSH
1413: LD_EXP 68
1417: ST_TO_ADDR
// Dol := Dolgov ;
1418: LD_ADDR_EXP 51
1422: PUSH
1423: LD_EXP 69
1427: ST_TO_ADDR
// Vse := Vsevolod ;
1428: LD_ADDR_EXP 52
1432: PUSH
1433: LD_EXP 71
1437: ST_TO_ADDR
// end ;
1438: LD_VAR 0 1
1442: RET
// export function DStart ; begin
1443: LD_INT 0
1445: PPUSH
// CenterNowOnXY ( 120 , 140 ) ;
1446: LD_INT 120
1448: PPUSH
1449: LD_INT 140
1451: PPUSH
1452: CALL_OW 86
// CenterNowOnXY ( 120 , 140 ) ;
1456: LD_INT 120
1458: PPUSH
1459: LD_INT 140
1461: PPUSH
1462: CALL_OW 86
// DialogueOn ;
1466: CALL_OW 6
// if not Say ( Kar , DStart-Kar-1 ) then
1470: LD_EXP 43
1474: PPUSH
1475: LD_STRING DStart-Kar-1
1477: PPUSH
1478: CALL_OW 88
1482: NOT
1483: IFFALSE 1497
// Say ( Lip , DStart-Lip-1 ) ;
1485: LD_EXP 44
1489: PPUSH
1490: LD_STRING DStart-Lip-1
1492: PPUSH
1493: CALL_OW 88
// Say ( Bur , DStart-Bur-1 ) ;
1497: LD_EXP 45
1501: PPUSH
1502: LD_STRING DStart-Bur-1
1504: PPUSH
1505: CALL_OW 88
// Dwait ( 0 0$3 ) ;
1509: LD_INT 105
1511: PPUSH
1512: CALL_OW 68
// SayRadio ( Pla , DStart-Pla-1 ) ;
1516: LD_EXP 46
1520: PPUSH
1521: LD_STRING DStart-Pla-1
1523: PPUSH
1524: CALL_OW 94
// Say ( Bur , DStart-Bur-2 ) ;
1528: LD_EXP 45
1532: PPUSH
1533: LD_STRING DStart-Bur-2
1535: PPUSH
1536: CALL_OW 88
// Say ( Ptr , DStart-Ptr-2 ) ;
1540: LD_EXP 47
1544: PPUSH
1545: LD_STRING DStart-Ptr-2
1547: PPUSH
1548: CALL_OW 88
// SaveForQuickRestart ;
1552: CALL_OW 22
// ChangeMissionObjectives ( MStart ) ;
1556: LD_STRING MStart
1558: PPUSH
1559: CALL_OW 337
// DialogueOff ;
1563: CALL_OW 7
// end ;
1567: LD_VAR 0 1
1571: RET
// every 0 0$2 trigger GetSide ( RuDepot ) = you or not FilterHumansInArea ( ovsyenko_base , [ [ f_side , ai ] ] ) do
1572: LD_INT 58
1574: PPUSH
1575: CALL_OW 255
1579: PUSH
1580: LD_EXP 1
1584: EQUAL
1585: PUSH
1586: LD_INT 14
1588: PPUSH
1589: LD_INT 22
1591: PUSH
1592: LD_EXP 6
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: PUSH
1601: EMPTY
1602: LIST
1603: PPUSH
1604: CALL 11013 0 2
1608: NOT
1609: OR
1610: IFFALSE 1627
1612: GO 1614
1614: DISABLE
// begin DOvsyenkoTaken ;
1615: CALL 1628 0 0
// OvsyenkoTaken := 1 ;
1619: LD_ADDR_EXP 14
1623: PUSH
1624: LD_INT 1
1626: ST_TO_ADDR
// end ;
1627: END
// export function DOvsyenkoTaken ; begin
1628: LD_INT 0
1630: PPUSH
// DialogueOn ;
1631: CALL_OW 6
// Say ( Bur , DOvsyenkoTaken-Bur-1 ) ;
1635: LD_EXP 45
1639: PPUSH
1640: LD_STRING DOvsyenkoTaken-Bur-1
1642: PPUSH
1643: CALL_OW 88
// SayRadio ( Pla , DOvsyenkoTaken-Pla-1 ) ;
1647: LD_EXP 46
1651: PPUSH
1652: LD_STRING DOvsyenkoTaken-Pla-1
1654: PPUSH
1655: CALL_OW 94
// Say ( Kar , DOvsyenkoTaken-Kar-1 ) ;
1659: LD_EXP 43
1663: PPUSH
1664: LD_STRING DOvsyenkoTaken-Kar-1
1666: PPUSH
1667: CALL_OW 88
// Say ( Tit , DOvsyenkoTaken-Tit-1 ) ;
1671: LD_EXP 50
1675: PPUSH
1676: LD_STRING DOvsyenkoTaken-Tit-1
1678: PPUSH
1679: CALL_OW 88
// if Say ( Lip , DOvsyenkoTaken-Lip-1 ) then
1683: LD_EXP 44
1687: PPUSH
1688: LD_STRING DOvsyenkoTaken-Lip-1
1690: PPUSH
1691: CALL_OW 88
1695: IFFALSE 1709
// Say ( Glb , DOvsyenkoTaken-Glb-1 ) ;
1697: LD_EXP 49
1701: PPUSH
1702: LD_STRING DOvsyenkoTaken-Glb-1
1704: PPUSH
1705: CALL_OW 88
// ChangeMissionObjectives ( MOutCapture ) ;
1709: LD_STRING MOutCapture
1711: PPUSH
1712: CALL_OW 337
// ChangeMissionObjectives ( MAddMine ) ;
1716: LD_STRING MAddMine
1718: PPUSH
1719: CALL_OW 337
// DialogueOff ;
1723: CALL_OW 7
// MyHint ( Capturing ) ;
1727: LD_STRING Capturing
1729: PPUSH
1730: CALL 12036 0 1
// MyHint ( SibDet ) ;
1734: LD_STRING SibDet
1736: PPUSH
1737: CALL 12036 0 1
// end ;
1741: LD_VAR 0 1
1745: RET
// export function DMatPrediction ; begin
1746: LD_INT 0
1748: PPUSH
// DialogueOn ;
1749: CALL_OW 6
// if IsOK ( Pty ) or IsOk ( Dol ) then
1753: LD_EXP 48
1757: PPUSH
1758: CALL_OW 302
1762: PUSH
1763: LD_EXP 51
1767: PPUSH
1768: CALL_OW 302
1772: OR
1773: IFFALSE 1880
// begin if not Say ( Pty , DMatPrediction-Pty-1 ) then
1775: LD_EXP 48
1779: PPUSH
1780: LD_STRING DMatPrediction-Pty-1
1782: PPUSH
1783: CALL_OW 88
1787: NOT
1788: IFFALSE 1802
// Say ( Dol , DMatPrediction-Dol-1 ) ;
1790: LD_EXP 51
1794: PPUSH
1795: LD_STRING DMatPrediction-Dol-1
1797: PPUSH
1798: CALL_OW 88
// Say ( Bur , DMatPrediction-Bur-1 ) ;
1802: LD_EXP 45
1806: PPUSH
1807: LD_STRING DMatPrediction-Bur-1
1809: PPUSH
1810: CALL_OW 88
// if not Say ( Pty , DMatPrediction-Pty-2 ) then
1814: LD_EXP 48
1818: PPUSH
1819: LD_STRING DMatPrediction-Pty-2
1821: PPUSH
1822: CALL_OW 88
1826: NOT
1827: IFFALSE 1841
// Say ( Dol , DMatPrediction-Dol-2 ) ;
1829: LD_EXP 51
1833: PPUSH
1834: LD_STRING DMatPrediction-Dol-2
1836: PPUSH
1837: CALL_OW 88
// Say ( Bur , DMatPrediction-Bur-2 ) ;
1841: LD_EXP 45
1845: PPUSH
1846: LD_STRING DMatPrediction-Bur-2
1848: PPUSH
1849: CALL_OW 88
// if not Say ( Pty , DMatPrediction-Pty-3 ) then
1853: LD_EXP 48
1857: PPUSH
1858: LD_STRING DMatPrediction-Pty-3
1860: PPUSH
1861: CALL_OW 88
1865: NOT
1866: IFFALSE 1880
// Say ( Dol , DMatPrediction-Dol-3 ) ;
1868: LD_EXP 51
1872: PPUSH
1873: LD_STRING DMatPrediction-Dol-3
1875: PPUSH
1876: CALL_OW 88
// end ; ChangeMissionObjectives ( MPred ) ;
1880: LD_STRING MPred
1882: PPUSH
1883: CALL_OW 337
// DialogueOff ;
1887: CALL_OW 7
// end ;
1891: LD_VAR 0 1
1895: RET
// export function DNoMaterial ; begin
1896: LD_INT 0
1898: PPUSH
// DialogueOn ;
1899: CALL_OW 6
// if not Say ( Pty , DNoMaterial-Pty-1 ) then
1903: LD_EXP 48
1907: PPUSH
1908: LD_STRING DNoMaterial-Pty-1
1910: PPUSH
1911: CALL_OW 88
1915: NOT
1916: IFFALSE 1930
// Say ( Dol , DNoMaterial-Dol-1 ) ;
1918: LD_EXP 51
1922: PPUSH
1923: LD_STRING DNoMaterial-Dol-1
1925: PPUSH
1926: CALL_OW 88
// Say ( Bur , DNoMaterial-Bur-1 ) ;
1930: LD_EXP 45
1934: PPUSH
1935: LD_STRING DNoMaterial-Bur-1
1937: PPUSH
1938: CALL_OW 88
// if not Say ( Pty , DNoMaterial-Pty-2 ) then
1942: LD_EXP 48
1946: PPUSH
1947: LD_STRING DNoMaterial-Pty-2
1949: PPUSH
1950: CALL_OW 88
1954: NOT
1955: IFFALSE 1969
// Say ( Dol , DNoMaterial-Dol-2 ) ;
1957: LD_EXP 51
1961: PPUSH
1962: LD_STRING DNoMaterial-Dol-2
1964: PPUSH
1965: CALL_OW 88
// Say ( Bur , DNoMaterial-Bur-2 ) ;
1969: LD_EXP 45
1973: PPUSH
1974: LD_STRING DNoMaterial-Bur-2
1976: PPUSH
1977: CALL_OW 88
// ChangeMissionObjectives ( MOutPred ) ;
1981: LD_STRING MOutPred
1983: PPUSH
1984: CALL_OW 337
// DialogueOff ;
1988: CALL_OW 7
// MyHint ( Prediction ) ;
1992: LD_STRING Prediction
1994: PPUSH
1995: CALL 12036 0 1
// end ;
1999: LD_VAR 0 1
2003: RET
// export byl_sib_research ; every 0 0$2 trigger GetResourceVisibility ( 101 , 93 , you ) or GetResourceVisibility ( 53 , 55 , you ) or GetResourceVisibility ( 29 , 30 , you ) or FilterAllUnits ( [ [ f_side , you ] , [ f_btype , b_siberite_mine ] ] ) > 0 or DepotWithSiberite marked 66 do
2004: LD_INT 101
2006: PPUSH
2007: LD_INT 93
2009: PPUSH
2010: LD_EXP 1
2014: PPUSH
2015: CALL_OW 440
2019: PUSH
2020: LD_INT 53
2022: PPUSH
2023: LD_INT 55
2025: PPUSH
2026: LD_EXP 1
2030: PPUSH
2031: CALL_OW 440
2035: OR
2036: PUSH
2037: LD_INT 29
2039: PPUSH
2040: LD_INT 30
2042: PPUSH
2043: LD_EXP 1
2047: PPUSH
2048: CALL_OW 440
2052: OR
2053: PUSH
2054: LD_INT 22
2056: PUSH
2057: LD_EXP 1
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: PUSH
2066: LD_INT 30
2068: PUSH
2069: LD_INT 30
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: PPUSH
2080: CALL_OW 69
2084: PUSH
2085: LD_INT 0
2087: GREATER
2088: OR
2089: PUSH
2090: CALL 12196 0 0
2094: OR
2095: IFFALSE 2104
2097: GO 2099
2099: DISABLE
// begin DSibResearch ;
2100: CALL 2105 0 0
// end ;
2104: END
// export function DSibResearch ; begin
2105: LD_INT 0
2107: PPUSH
// byl_sib_research := true ;
2108: LD_ADDR_EXP 54
2112: PUSH
2113: LD_INT 1
2115: ST_TO_ADDR
// DialogueOn ;
2116: CALL_OW 6
// if not Say ( Pty , DSibResearch-Pty-1 ) then
2120: LD_EXP 48
2124: PPUSH
2125: LD_STRING DSibResearch-Pty-1
2127: PPUSH
2128: CALL_OW 88
2132: NOT
2133: IFFALSE 2147
// Say ( Dol , DSibResearch-Dol-1 ) ;
2135: LD_EXP 51
2139: PPUSH
2140: LD_STRING DSibResearch-Dol-1
2142: PPUSH
2143: CALL_OW 88
// Say ( Bur , DSibResearch-Bur-1 ) ;
2147: LD_EXP 45
2151: PPUSH
2152: LD_STRING DSibResearch-Bur-1
2154: PPUSH
2155: CALL_OW 88
// SayRadio ( Pla , DSibResearch-Pla-1 ) ;
2159: LD_EXP 46
2163: PPUSH
2164: LD_STRING DSibResearch-Pla-1
2166: PPUSH
2167: CALL_OW 94
// ChangeMissionObjectives ( MResearch ) ;
2171: LD_STRING MResearch
2173: PPUSH
2174: CALL_OW 337
// DialogueOff ;
2178: CALL_OW 7
// end ;
2182: LD_VAR 0 1
2186: RET
// function AnyUnitOver ( y ) ; var res , i ; begin
2187: LD_INT 0
2189: PPUSH
2190: PPUSH
2191: PPUSH
// res := false ;
2192: LD_ADDR_VAR 0 3
2196: PUSH
2197: LD_INT 0
2199: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , you ] , [ f_not , [ f_type , unit_building ] ] ] ) do
2200: LD_ADDR_VAR 0 4
2204: PUSH
2205: LD_INT 22
2207: PUSH
2208: LD_EXP 1
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: PUSH
2217: LD_INT 3
2219: PUSH
2220: LD_INT 21
2222: PUSH
2223: LD_INT 3
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: PPUSH
2238: CALL_OW 69
2242: PUSH
2243: FOR_IN
2244: IFFALSE 2275
// if GetY ( i ) < y then
2246: LD_VAR 0 4
2250: PPUSH
2251: CALL_OW 251
2255: PUSH
2256: LD_VAR 0 1
2260: LESS
2261: IFFALSE 2273
// begin res := true ;
2263: LD_ADDR_VAR 0 3
2267: PUSH
2268: LD_INT 1
2270: ST_TO_ADDR
// break ;
2271: GO 2275
// end ;
2273: GO 2243
2275: POP
2276: POP
// result := res ;
2277: LD_ADDR_VAR 0 2
2281: PUSH
2282: LD_VAR 0 3
2286: ST_TO_ADDR
// end ;
2287: LD_VAR 0 2
2291: RET
// every 0 0$4 trigger ( OvsyenkoTaken and GetTechProgress ( tech_SibDet , you ) > 50 ) or AnyUnitOver ( 30 ) do var i ;
2292: LD_EXP 14
2296: PUSH
2297: LD_INT 20
2299: PPUSH
2300: LD_EXP 1
2304: PPUSH
2305: CALL_OW 326
2309: PUSH
2310: LD_INT 50
2312: GREATER
2313: AND
2314: PUSH
2315: LD_INT 30
2317: PPUSH
2318: CALL 2187 0 1
2322: OR
2323: IFFALSE 2724
2325: GO 2327
2327: DISABLE
2328: LD_INT 0
2330: PPUSH
// begin PlaceUnitArea ( Vsevolod , vsevolod_in , false ) ;
2331: LD_EXP 71
2335: PPUSH
2336: LD_INT 16
2338: PPUSH
2339: LD_INT 0
2341: PPUSH
2342: CALL_OW 49
// for i in Vsevolod_uderna_group do
2346: LD_ADDR_VAR 0 1
2350: PUSH
2351: LD_EXP 12
2355: PUSH
2356: FOR_IN
2357: IFFALSE 2376
// PlaceUnitArea ( i , vsevolod_in , false ) ;
2359: LD_VAR 0 1
2363: PPUSH
2364: LD_INT 16
2366: PPUSH
2367: LD_INT 0
2369: PPUSH
2370: CALL_OW 49
2374: GO 2356
2376: POP
2377: POP
// ComAgressiveMove ( Vsevolod_uderna_group ^ [ vsevolod ] , 51 , 11 ) ;
2378: LD_EXP 12
2382: PUSH
2383: LD_EXP 71
2387: PUSH
2388: EMPTY
2389: LIST
2390: ADD
2391: PPUSH
2392: LD_INT 51
2394: PPUSH
2395: LD_INT 11
2397: PPUSH
2398: CALL_OW 114
// DoNotAttack ( ai , Vsevolod ) ;
2402: LD_EXP 6
2406: PPUSH
2407: LD_EXP 71
2411: PPUSH
2412: CALL_OW 471
// for i in UnitFilter ( vsevolod_uderna_group , [ [ f_class , class_engineer ] ] ) do
2416: LD_ADDR_VAR 0 1
2420: PUSH
2421: LD_EXP 12
2425: PPUSH
2426: LD_INT 25
2428: PUSH
2429: LD_INT 2
2431: PUSH
2432: EMPTY
2433: LIST
2434: LIST
2435: PUSH
2436: EMPTY
2437: LIST
2438: PPUSH
2439: CALL_OW 72
2443: PUSH
2444: FOR_IN
2445: IFFALSE 2463
// DoNotAttack ( ai , i ) ;
2447: LD_EXP 6
2451: PPUSH
2452: LD_VAR 0 1
2456: PPUSH
2457: CALL_OW 471
2461: GO 2444
2463: POP
2464: POP
// wait ( 0 0$5 ) ;
2465: LD_INT 175
2467: PPUSH
2468: CALL_OW 67
// ComAgressiveMove ( FilterHumansInArea ( near_base2 , [ [ f_side , ai ] ] ) , 51 , 11 ) ;
2472: LD_INT 3
2474: PPUSH
2475: LD_INT 22
2477: PUSH
2478: LD_EXP 6
2482: PUSH
2483: EMPTY
2484: LIST
2485: LIST
2486: PUSH
2487: EMPTY
2488: LIST
2489: PPUSH
2490: CALL 11013 0 2
2494: PPUSH
2495: LD_INT 51
2497: PPUSH
2498: LD_INT 11
2500: PPUSH
2501: CALL_OW 114
// wait ( 0 0$10 ) ;
2505: LD_INT 350
2507: PPUSH
2508: CALL_OW 67
// ComMoveXY ( FilterHumansInArea ( near_base2 , [ [ f_side , ai ] ] ) , 23 , 28 ) ;
2512: LD_INT 3
2514: PPUSH
2515: LD_INT 22
2517: PUSH
2518: LD_EXP 6
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: PUSH
2527: EMPTY
2528: LIST
2529: PPUSH
2530: CALL 11013 0 2
2534: PPUSH
2535: LD_INT 23
2537: PPUSH
2538: LD_INT 28
2540: PPUSH
2541: CALL_OW 111
// SetSideBase ( GetBase ( vsevd1 ) , you2 ) ;
2545: LD_INT 182
2547: PPUSH
2548: CALL_OW 274
2552: PPUSH
2553: LD_EXP 2
2557: PPUSH
2558: CALL_OW 236
// SetBName ( vsevd1 , gorkij ) ;
2562: LD_INT 182
2564: PPUSH
2565: LD_STRING gorkij
2567: PPUSH
2568: CALL_OW 500
// ComEnterUnit ( Vsevolod , vseva1 ) ;
2572: LD_EXP 71
2576: PPUSH
2577: LD_INT 190
2579: PPUSH
2580: CALL_OW 120
// ComEnterUnit ( vsevolod_uderna_group , vseva1 ) ;
2584: LD_EXP 12
2588: PPUSH
2589: LD_INT 190
2591: PPUSH
2592: CALL_OW 120
// ComEnterUnit ( UnitFilter ( vsevolod_uderna_group , [ [ f_class , class_engineer ] ] ) , vseva1 ) ;
2596: LD_EXP 12
2600: PPUSH
2601: LD_INT 25
2603: PUSH
2604: LD_INT 2
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: PUSH
2611: EMPTY
2612: LIST
2613: PPUSH
2614: CALL_OW 72
2618: PPUSH
2619: LD_INT 190
2621: PPUSH
2622: CALL_OW 120
// for i in vsevolod_uderna_group do
2626: LD_ADDR_VAR 0 1
2630: PUSH
2631: LD_EXP 12
2635: PUSH
2636: FOR_IN
2637: IFFALSE 2655
// NormalAttack ( ai , i ) ;
2639: LD_EXP 6
2643: PPUSH
2644: LD_VAR 0 1
2648: PPUSH
2649: CALL_OW 472
2653: GO 2636
2655: POP
2656: POP
// AddComChangeProfession ( UnitFilter ( vsevolod_uderna_group , [ [ f_class , class_engineer ] ] ) , class_soldier ) ;
2657: LD_EXP 12
2661: PPUSH
2662: LD_INT 25
2664: PUSH
2665: LD_INT 2
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: EMPTY
2673: LIST
2674: PPUSH
2675: CALL_OW 72
2679: PPUSH
2680: LD_INT 1
2682: PPUSH
2683: CALL_OW 183
// ComEnterUnit ( vsevolod_uderna_group [ 2 ] , vsevb1 ) ;
2687: LD_EXP 12
2691: PUSH
2692: LD_INT 2
2694: ARRAY
2695: PPUSH
2696: LD_INT 193
2698: PPUSH
2699: CALL_OW 120
// wait ( 0 0$5 ) ;
2703: LD_INT 175
2705: PPUSH
2706: CALL_OW 67
// Vsevolod_vstoupil := tick ;
2710: LD_ADDR_EXP 11
2714: PUSH
2715: LD_OWVAR 1
2719: ST_TO_ADDR
// DVsevolod ;
2720: CALL 2727 0 0
// end ;
2724: PPOPN 1
2726: END
// export function DVsevolod ; var who ; begin
2727: LD_INT 0
2729: PPUSH
2730: PPUSH
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 0 ) ;
2731: LD_ADDR_VAR 0 2
2735: PUSH
2736: LD_EXP 53
2740: PPUSH
2741: LD_EXP 1
2745: PPUSH
2746: LD_INT 1
2748: PPUSH
2749: LD_INT 0
2751: PPUSH
2752: LD_INT 0
2754: PPUSH
2755: CALL 10722 0 5
2759: ST_TO_ADDR
// DialogueOn ;
2760: CALL_OW 6
// Say ( Dol , DVsevolod-Dol-1 ) ;
2764: LD_EXP 51
2768: PPUSH
2769: LD_STRING DVsevolod-Dol-1
2771: PPUSH
2772: CALL_OW 88
// SayRadio ( Vse , DVsevolod-Vse-1 ) ;
2776: LD_EXP 52
2780: PPUSH
2781: LD_STRING DVsevolod-Vse-1
2783: PPUSH
2784: CALL_OW 94
// Say ( Bur , DVsevolod-Bur-1 ) ;
2788: LD_EXP 45
2792: PPUSH
2793: LD_STRING DVsevolod-Bur-1
2795: PPUSH
2796: CALL_OW 88
// Say ( Glb , DVsevolod-Glb-1 ) ;
2800: LD_EXP 49
2804: PPUSH
2805: LD_STRING DVsevolod-Glb-1
2807: PPUSH
2808: CALL_OW 88
// SayRadio ( Vse , DVsevolod-Vse-2 ) ;
2812: LD_EXP 52
2816: PPUSH
2817: LD_STRING DVsevolod-Vse-2
2819: PPUSH
2820: CALL_OW 94
// Say ( Bur , DVsevolod-Bur-2 ) ;
2824: LD_EXP 45
2828: PPUSH
2829: LD_STRING DVsevolod-Bur-2
2831: PPUSH
2832: CALL_OW 88
// SayRadio ( Vse , DVsevolod-Vse-3 ) ;
2836: LD_EXP 52
2840: PPUSH
2841: LD_STRING DVsevolod-Vse-3
2843: PPUSH
2844: CALL_OW 94
// Say ( Bur , DVsevolod-Bur-3 ) ;
2848: LD_EXP 45
2852: PPUSH
2853: LD_STRING DVsevolod-Bur-3
2855: PPUSH
2856: CALL_OW 88
// SayRadio ( Vse , DVsevolod-Vse-4 ) ;
2860: LD_EXP 52
2864: PPUSH
2865: LD_STRING DVsevolod-Vse-4
2867: PPUSH
2868: CALL_OW 94
// Say ( Bur , DVsevolod-Bur-4 ) ;
2872: LD_EXP 45
2876: PPUSH
2877: LD_STRING DVsevolod-Bur-4
2879: PPUSH
2880: CALL_OW 88
// if Say ( Glb , DVsevolod-Glb-4 ) then
2884: LD_EXP 49
2888: PPUSH
2889: LD_STRING DVsevolod-Glb-4
2891: PPUSH
2892: CALL_OW 88
2896: IFFALSE 2910
// Say ( Bur , DVsevolod-Bur-5 ) ;
2898: LD_EXP 45
2902: PPUSH
2903: LD_STRING DVsevolod-Bur-5
2905: PPUSH
2906: CALL_OW 88
// if not IsOk ( Glb ) then
2910: LD_EXP 49
2914: PPUSH
2915: CALL_OW 302
2919: NOT
2920: IFFALSE 2934
// Say ( who , DVsevolod-RSol1-5 ) ;
2922: LD_VAR 0 2
2926: PPUSH
2927: LD_STRING DVsevolod-RSol1-5
2929: PPUSH
2930: CALL_OW 88
// Say ( Bur , DVsevolod-Bur-6 ) ;
2934: LD_EXP 45
2938: PPUSH
2939: LD_STRING DVsevolod-Bur-6
2941: PPUSH
2942: CALL_OW 88
// Say ( Dol , DVsevolod-Dol-6 ) ;
2946: LD_EXP 51
2950: PPUSH
2951: LD_STRING DVsevolod-Dol-6
2953: PPUSH
2954: CALL_OW 88
// RevealFogArea ( you , near_base2 ) ;
2958: LD_EXP 1
2962: PPUSH
2963: LD_INT 3
2965: PPUSH
2966: CALL_OW 332
// CenterNowOnXY ( 51 , 13 ) ;
2970: LD_INT 51
2972: PPUSH
2973: LD_INT 13
2975: PPUSH
2976: CALL_OW 86
// dwait ( 0 0$1 ) ;
2980: LD_INT 35
2982: PPUSH
2983: CALL_OW 68
// Say ( Bur , DVsevolod-Bur-7 ) ;
2987: LD_EXP 45
2991: PPUSH
2992: LD_STRING DVsevolod-Bur-7
2994: PPUSH
2995: CALL_OW 88
// SayRadio ( Vse , DVsevolod-Vse-7 ) ;
2999: LD_EXP 52
3003: PPUSH
3004: LD_STRING DVsevolod-Vse-7
3006: PPUSH
3007: CALL_OW 94
// Say ( Bur , DVsevolod-Bur-8 ) ;
3011: LD_EXP 45
3015: PPUSH
3016: LD_STRING DVsevolod-Bur-8
3018: PPUSH
3019: CALL_OW 88
// DialogueOff ;
3023: CALL_OW 7
// ChangeMissionObjectives ( MVsevolod ) ;
3027: LD_STRING MVsevolod
3029: PPUSH
3030: CALL_OW 337
// end ;
3034: LD_VAR 0 1
3038: RET
// every 0 0$2 trigger vsevolod_vstoupil and tick > ( vsevolod_vstoupil + 0 0$6 ) do
3039: LD_EXP 11
3043: PUSH
3044: LD_OWVAR 1
3048: PUSH
3049: LD_EXP 11
3053: PUSH
3054: LD_INT 210
3056: PLUS
3057: GREATER
3058: AND
3059: IFFALSE 3084
3061: GO 3063
3063: DISABLE
// begin if belkovfreed then
3064: LD_EXP 13
3068: IFFALSE 3076
// DHelp1 else
3070: CALL 3085 0 0
3074: GO 3080
// DHelp2 ;
3076: CALL 3197 0 0
// DHelp3 ;
3080: CALL 3339 0 0
// end ;
3084: END
// export function DHelp1 ; var who ; begin
3085: LD_INT 0
3087: PPUSH
3088: PPUSH
// DialogueOn ;
3089: CALL_OW 6
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 0 ) ;
3093: LD_ADDR_VAR 0 2
3097: PUSH
3098: LD_EXP 53
3102: PPUSH
3103: LD_EXP 1
3107: PPUSH
3108: LD_INT 1
3110: PPUSH
3111: LD_INT 0
3113: PPUSH
3114: LD_INT 0
3116: PPUSH
3117: CALL 10722 0 5
3121: ST_TO_ADDR
// if ( not Say ( Glb , DHelp1-Glb-1 ) ) and ( not Say ( Dol , DHelp1-Dol-1 ) ) then
3122: LD_EXP 49
3126: PPUSH
3127: LD_STRING DHelp1-Glb-1
3129: PPUSH
3130: CALL_OW 88
3134: NOT
3135: PUSH
3136: LD_EXP 51
3140: PPUSH
3141: LD_STRING DHelp1-Dol-1
3143: PPUSH
3144: CALL_OW 88
3148: NOT
3149: AND
3150: IFFALSE 3164
// Say ( who , DHelp1-RSol1-1 ) ;
3152: LD_VAR 0 2
3156: PPUSH
3157: LD_STRING DHelp1-RSol1-1
3159: PPUSH
3160: CALL_OW 88
// Say ( Tit , DHelp1-Tit-1 ) ;
3164: LD_EXP 50
3168: PPUSH
3169: LD_STRING DHelp1-Tit-1
3171: PPUSH
3172: CALL_OW 88
// Say ( Glb , DHelp1-Glb-2 ) ;
3176: LD_EXP 49
3180: PPUSH
3181: LD_STRING DHelp1-Glb-2
3183: PPUSH
3184: CALL_OW 88
// DialogueOff ;
3188: CALL_OW 7
// end ;
3192: LD_VAR 0 1
3196: RET
// export function DHelp2 ; var who , who2 ; begin
3197: LD_INT 0
3199: PPUSH
3200: PPUSH
3201: PPUSH
// DialogueOn ;
3202: CALL_OW 6
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 1 ) ;
3206: LD_ADDR_VAR 0 2
3210: PUSH
3211: LD_EXP 53
3215: PPUSH
3216: LD_EXP 1
3220: PPUSH
3221: LD_INT 1
3223: PPUSH
3224: LD_INT 0
3226: PPUSH
3227: LD_INT 1
3229: PPUSH
3230: CALL 10722 0 5
3234: ST_TO_ADDR
// who2 := WhoSayAny ( donttalk , you , sex_male , 0 , 2 ) ;
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: LD_EXP 53
3244: PPUSH
3245: LD_EXP 1
3249: PPUSH
3250: LD_INT 1
3252: PPUSH
3253: LD_INT 0
3255: PPUSH
3256: LD_INT 2
3258: PPUSH
3259: CALL 10722 0 5
3263: ST_TO_ADDR
// if not Say ( Tit , DHelp2-Tit-1 ) then
3264: LD_EXP 50
3268: PPUSH
3269: LD_STRING DHelp2-Tit-1
3271: PPUSH
3272: CALL_OW 88
3276: NOT
3277: IFFALSE 3291
// Say ( who , DHelp2-RSol1-1 ) ;
3279: LD_VAR 0 2
3283: PPUSH
3284: LD_STRING DHelp2-RSol1-1
3286: PPUSH
3287: CALL_OW 88
// if not Say ( Glb , DHelp2-Glb-1 ) then
3291: LD_EXP 49
3295: PPUSH
3296: LD_STRING DHelp2-Glb-1
3298: PPUSH
3299: CALL_OW 88
3303: NOT
3304: IFFALSE 3318
// Say ( who2 , DHelp2-RSol2-1 ) ;
3306: LD_VAR 0 3
3310: PPUSH
3311: LD_STRING DHelp2-RSol2-1
3313: PPUSH
3314: CALL_OW 88
// Say ( Tit , DHelp2-Tit-2 ) ;
3318: LD_EXP 50
3322: PPUSH
3323: LD_STRING DHelp2-Tit-2
3325: PPUSH
3326: CALL_OW 88
// DialogueOff ;
3330: CALL_OW 7
// end ;
3334: LD_VAR 0 1
3338: RET
// export function DHelp3 ; var who ; begin
3339: LD_INT 0
3341: PPUSH
3342: PPUSH
// DialogueOn ;
3343: CALL_OW 6
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 0 ) ;
3347: LD_ADDR_VAR 0 2
3351: PUSH
3352: LD_EXP 53
3356: PPUSH
3357: LD_EXP 1
3361: PPUSH
3362: LD_INT 1
3364: PPUSH
3365: LD_INT 0
3367: PPUSH
3368: LD_INT 0
3370: PPUSH
3371: CALL 10722 0 5
3375: ST_TO_ADDR
// Say ( Bur , DHelp3-Bur-1 ) ;
3376: LD_EXP 45
3380: PPUSH
3381: LD_STRING DHelp3-Bur-1
3383: PPUSH
3384: CALL_OW 88
// if not Say ( Lip , DHelp3-Lip-1 ) then
3388: LD_EXP 44
3392: PPUSH
3393: LD_STRING DHelp3-Lip-1
3395: PPUSH
3396: CALL_OW 88
3400: NOT
3401: IFFALSE 3415
// Say ( who , DHelp3-RSol1-1 ) ;
3403: LD_VAR 0 2
3407: PPUSH
3408: LD_STRING DHelp3-RSol1-1
3410: PPUSH
3411: CALL_OW 88
// Say ( Bur , DHelp3-Bur-2 ) ;
3415: LD_EXP 45
3419: PPUSH
3420: LD_STRING DHelp3-Bur-2
3422: PPUSH
3423: CALL_OW 88
// DialogueOff ;
3427: CALL_OW 7
// end ;
3431: LD_VAR 0 1
3435: RET
// every 0 0$5 trigger vsevolod_vstoupil and not FilterHumansInArea ( ovsyenko_base , [ [ f_side , you ] ] ) do var b , i ;
3436: LD_EXP 11
3440: PUSH
3441: LD_INT 14
3443: PPUSH
3444: LD_INT 22
3446: PUSH
3447: LD_EXP 1
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: PUSH
3456: EMPTY
3457: LIST
3458: PPUSH
3459: CALL 11013 0 2
3463: NOT
3464: AND
3465: IFFALSE 3603
3467: GO 3469
3469: DISABLE
3470: LD_INT 0
3472: PPUSH
3473: PPUSH
// begin if FilterUnitsInArea ( ovsyenko_base , [ [ f_side , ai ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) >= 1 then
3474: LD_INT 14
3476: PPUSH
3477: LD_INT 22
3479: PUSH
3480: LD_EXP 6
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: PUSH
3489: LD_INT 2
3491: PUSH
3492: LD_INT 21
3494: PUSH
3495: LD_INT 1
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: PUSH
3502: LD_INT 21
3504: PUSH
3505: LD_INT 2
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: PUSH
3512: EMPTY
3513: LIST
3514: LIST
3515: LIST
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PPUSH
3521: CALL_OW 70
3525: PUSH
3526: LD_INT 1
3528: GREATEREQUAL
3529: IFFALSE 3602
// begin DOvsyenkoCaptured ;
3531: CALL 3606 0 0
// OvsyenkoCaptured := true ;
3535: LD_ADDR_EXP 15
3539: PUSH
3540: LD_INT 1
3542: ST_TO_ADDR
// b := FilterUnitsInArea ( ovsyenko_base , [ [ f_type , unit_building ] ] ) ;
3543: LD_ADDR_VAR 0 1
3547: PUSH
3548: LD_INT 14
3550: PPUSH
3551: LD_INT 21
3553: PUSH
3554: LD_INT 3
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PUSH
3561: EMPTY
3562: LIST
3563: PPUSH
3564: CALL_OW 70
3568: ST_TO_ADDR
// for i in b do
3569: LD_ADDR_VAR 0 2
3573: PUSH
3574: LD_VAR 0 1
3578: PUSH
3579: FOR_IN
3580: IFFALSE 3598
// begin SetSide ( i , ai ) ;
3582: LD_VAR 0 2
3586: PPUSH
3587: LD_EXP 6
3591: PPUSH
3592: CALL_OW 235
// end ;
3596: GO 3579
3598: POP
3599: POP
// end else
3600: GO 3603
// enable ;
3602: ENABLE
// end ;
3603: PPOPN 2
3605: END
// export function DOvsyenkoCaptured ; var who ; begin
3606: LD_INT 0
3608: PPUSH
3609: PPUSH
// DialogueOn ;
3610: CALL_OW 6
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 0 ) ;
3614: LD_ADDR_VAR 0 2
3618: PUSH
3619: LD_EXP 53
3623: PPUSH
3624: LD_EXP 1
3628: PPUSH
3629: LD_INT 1
3631: PPUSH
3632: LD_INT 0
3634: PPUSH
3635: LD_INT 0
3637: PPUSH
3638: CALL 10722 0 5
3642: ST_TO_ADDR
// if Say ( Glb , DOvsyenkoCaptured-Glb-1 ) then
3643: LD_EXP 49
3647: PPUSH
3648: LD_STRING DOvsyenkoCaptured-Glb-1
3650: PPUSH
3651: CALL_OW 88
3655: IFFALSE 3671
// Say ( Bur , DOvsyenkoCaptured-Bur-1 ) else
3657: LD_EXP 45
3661: PPUSH
3662: LD_STRING DOvsyenkoCaptured-Bur-1
3664: PPUSH
3665: CALL_OW 88
3669: GO 3683
// Say ( who , DOvsyenkoCaptured-RSol1-1 ) ;
3671: LD_VAR 0 2
3675: PPUSH
3676: LD_STRING DOvsyenkoCaptured-RSol1-1
3678: PPUSH
3679: CALL_OW 88
// DialogueOff ;
3683: CALL_OW 7
// end ;
3687: LD_VAR 0 1
3691: RET
// every 0 0$4 trigger FilterUnitsInArea ( to_north , [ [ f_side , you ] , [ f_nation , 3 ] , [ f_or , [ f_distxy , 67 , 37 , 10 ] , [ f_distxy , 83 , 38 , 10 ] ] ] ) do
3692: LD_INT 15
3694: PPUSH
3695: LD_INT 22
3697: PUSH
3698: LD_EXP 1
3702: PUSH
3703: EMPTY
3704: LIST
3705: LIST
3706: PUSH
3707: LD_INT 23
3709: PUSH
3710: LD_INT 3
3712: PUSH
3713: EMPTY
3714: LIST
3715: LIST
3716: PUSH
3717: LD_INT 2
3719: PUSH
3720: LD_INT 92
3722: PUSH
3723: LD_INT 67
3725: PUSH
3726: LD_INT 37
3728: PUSH
3729: LD_INT 10
3731: PUSH
3732: EMPTY
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: PUSH
3738: LD_INT 92
3740: PUSH
3741: LD_INT 83
3743: PUSH
3744: LD_INT 38
3746: PUSH
3747: LD_INT 10
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: LIST
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: PPUSH
3766: CALL_OW 70
3770: IFFALSE 3786
3772: GO 3774
3774: DISABLE
// begin wait ( 0 0$3 ) ;
3775: LD_INT 105
3777: PPUSH
3778: CALL_OW 67
// DPartyAttacked ;
3782: CALL 3787 0 0
// end ;
3786: END
// export function DPartyAttacked ; var who , un , i , attc ; begin
3787: LD_INT 0
3789: PPUSH
3790: PPUSH
3791: PPUSH
3792: PPUSH
3793: PPUSH
// uc_side := 1 ;
3794: LD_ADDR_OWVAR 20
3798: PUSH
3799: LD_INT 1
3801: ST_TO_ADDR
// uc_nation := 1 ;
3802: LD_ADDR_OWVAR 21
3806: PUSH
3807: LD_INT 1
3809: ST_TO_ADDR
// attc := [ ] ;
3810: LD_ADDR_VAR 0 5
3814: PUSH
3815: EMPTY
3816: ST_TO_ADDR
// for i = 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
3817: LD_ADDR_VAR 0 4
3821: PUSH
3822: DOUBLE
3823: LD_INT 1
3825: DEC
3826: ST_TO_ADDR
3827: LD_INT 2
3829: PUSH
3830: LD_INT 2
3832: PUSH
3833: LD_INT 3
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: LIST
3840: PUSH
3841: LD_OWVAR 67
3845: ARRAY
3846: PUSH
3847: FOR_TO
3848: IFFALSE 3933
// begin PrepareSoldier ( false , [ 3 , 4 , 4 ] [ Difficulty ] ) ;
3850: LD_INT 0
3852: PPUSH
3853: LD_INT 3
3855: PUSH
3856: LD_INT 4
3858: PUSH
3859: LD_INT 4
3861: PUSH
3862: EMPTY
3863: LIST
3864: LIST
3865: LIST
3866: PUSH
3867: LD_OWVAR 67
3871: ARRAY
3872: PPUSH
3873: CALL_OW 381
// un := CreateHuman ;
3877: LD_ADDR_VAR 0 3
3881: PUSH
3882: CALL_OW 44
3886: ST_TO_ADDR
// PlaceUnitXYR ( un , 84 , 35 , 3 , false ) ;
3887: LD_VAR 0 3
3891: PPUSH
3892: LD_INT 84
3894: PPUSH
3895: LD_INT 35
3897: PPUSH
3898: LD_INT 3
3900: PPUSH
3901: LD_INT 0
3903: PPUSH
3904: CALL_OW 50
// attc := Insert ( attc , 1 , un ) ;
3908: LD_ADDR_VAR 0 5
3912: PUSH
3913: LD_VAR 0 5
3917: PPUSH
3918: LD_INT 1
3920: PPUSH
3921: LD_VAR 0 3
3925: PPUSH
3926: CALL_OW 2
3930: ST_TO_ADDR
// end ;
3931: GO 3847
3933: POP
3934: POP
// ComAgressiveMove ( attc , 80 , 46 ) ;
3935: LD_VAR 0 5
3939: PPUSH
3940: LD_INT 80
3942: PPUSH
3943: LD_INT 46
3945: PPUSH
3946: CALL_OW 114
// wait ( 0 0$3 ) ;
3950: LD_INT 105
3952: PPUSH
3953: CALL_OW 67
// DialogueOn ;
3957: CALL_OW 6
// PlaceSeeing ( 81 , 40 , you , - 10 ) ;
3961: LD_INT 81
3963: PPUSH
3964: LD_INT 40
3966: PPUSH
3967: LD_EXP 1
3971: PPUSH
3972: LD_INT 10
3974: NEG
3975: PPUSH
3976: CALL_OW 330
// CenterNowOnXY ( 81 , 40 ) ;
3980: LD_INT 81
3982: PPUSH
3983: LD_INT 40
3985: PPUSH
3986: CALL_OW 86
// who := FilterAllUnits ( [ [ f_side , you ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Gleb ] ;
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: LD_INT 22
3997: PUSH
3998: LD_EXP 1
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PUSH
4007: LD_INT 26
4009: PUSH
4010: LD_INT 1
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PUSH
4017: LD_INT 23
4019: PUSH
4020: LD_INT 3
4022: PUSH
4023: EMPTY
4024: LIST
4025: LIST
4026: PUSH
4027: EMPTY
4028: LIST
4029: LIST
4030: LIST
4031: PPUSH
4032: CALL_OW 69
4036: PUSH
4037: LD_EXP 62
4041: PUSH
4042: LD_EXP 66
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: DIFF
4051: ST_TO_ADDR
// if who then
4052: LD_VAR 0 2
4056: IFFALSE 4074
// Say ( who [ 1 ] , DPartyAttacked-RSol1-1 ) ;
4058: LD_VAR 0 2
4062: PUSH
4063: LD_INT 1
4065: ARRAY
4066: PPUSH
4067: LD_STRING DPartyAttacked-RSol1-1
4069: PPUSH
4070: CALL_OW 88
// if IsOk ( Glb ) then
4074: LD_EXP 49
4078: PPUSH
4079: CALL_OW 302
4083: IFFALSE 4097
// Say ( Glb , DPartyAttacked-Glb-1 ) ;
4085: LD_EXP 49
4089: PPUSH
4090: LD_STRING DPartyAttacked-Glb-1
4092: PPUSH
4093: CALL_OW 88
// if who > 1 and GetSide ( RuDepot ) = 3 then
4097: LD_VAR 0 2
4101: PUSH
4102: LD_INT 1
4104: GREATER
4105: PUSH
4106: LD_INT 58
4108: PPUSH
4109: CALL_OW 255
4113: PUSH
4114: LD_INT 3
4116: EQUAL
4117: AND
4118: IFFALSE 4136
// Say ( who [ 2 ] , DPartyAttacked-RSol2-1 ) ;
4120: LD_VAR 0 2
4124: PUSH
4125: LD_INT 2
4127: ARRAY
4128: PPUSH
4129: LD_STRING DPartyAttacked-RSol2-1
4131: PPUSH
4132: CALL_OW 88
// DialogueOff ;
4136: CALL_OW 7
// RemoveSeeing ( 81 , 40 , you ) ;
4140: LD_INT 81
4142: PPUSH
4143: LD_INT 40
4145: PPUSH
4146: LD_EXP 1
4150: PPUSH
4151: CALL_OW 331
// end ;
4155: LD_VAR 0 1
4159: RET
// export kecali ; export otherkecali ; export VsevolodSaved ; every 0 0$3 trigger FilterAllUnits ( [ [ f_side , you ] , [ f_dist , Vsevolod , 10 ] ] ) do var mt , i ;
4160: LD_INT 22
4162: PUSH
4163: LD_EXP 1
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: LD_INT 91
4174: PUSH
4175: LD_EXP 71
4179: PUSH
4180: LD_INT 10
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PPUSH
4192: CALL_OW 69
4196: IFFALSE 4640
4198: GO 4200
4200: DISABLE
4201: LD_INT 0
4203: PPUSH
4204: PPUSH
// begin if IsLive ( vsevolod ) and GetDistUnits ( Vsevolod , Burlak ) <= 10 and not kecali then
4205: LD_EXP 71
4209: PPUSH
4210: CALL_OW 300
4214: PUSH
4215: LD_EXP 71
4219: PPUSH
4220: LD_EXP 62
4224: PPUSH
4225: CALL_OW 296
4229: PUSH
4230: LD_INT 10
4232: LESSEQUAL
4233: AND
4234: PUSH
4235: LD_EXP 55
4239: NOT
4240: AND
4241: IFFALSE 4484
// begin mt := tick + 0 0$20 ;
4243: LD_ADDR_VAR 0 1
4247: PUSH
4248: LD_OWVAR 1
4252: PUSH
4253: LD_INT 700
4255: PLUS
4256: ST_TO_ADDR
// while IsInUnit ( Vsevolod ) = vseva1 and mt < tick do
4257: LD_EXP 71
4261: PPUSH
4262: CALL_OW 310
4266: PUSH
4267: LD_INT 190
4269: EQUAL
4270: PUSH
4271: LD_VAR 0 1
4275: PUSH
4276: LD_OWVAR 1
4280: LESS
4281: AND
4282: IFFALSE 4305
// begin ComExitBuilding ( UnitsInside ( vseva1 ) ) ;
4284: LD_INT 190
4286: PPUSH
4287: CALL_OW 313
4291: PPUSH
4292: CALL_OW 122
// wait ( 0 0$1 ) ;
4296: LD_INT 35
4298: PPUSH
4299: CALL_OW 67
// end ;
4303: GO 4257
// wait ( 0 0$2 ) ;
4305: LD_INT 70
4307: PPUSH
4308: CALL_OW 67
// ComStop ( FilterAllUnits ( [ [ f_side , you2 ] ] ) ) ;
4312: LD_INT 22
4314: PUSH
4315: LD_EXP 2
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: PUSH
4324: EMPTY
4325: LIST
4326: PPUSH
4327: CALL_OW 69
4331: PPUSH
4332: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , you2 ] ] ) , you ) ;
4336: LD_INT 22
4338: PUSH
4339: LD_EXP 2
4343: PUSH
4344: EMPTY
4345: LIST
4346: LIST
4347: PUSH
4348: EMPTY
4349: LIST
4350: PPUSH
4351: CALL_OW 69
4355: PPUSH
4356: LD_EXP 1
4360: PPUSH
4361: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , you ] ] ) do
4365: LD_ADDR_VAR 0 2
4369: PUSH
4370: LD_INT 22
4372: PUSH
4373: LD_EXP 1
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: PUSH
4382: EMPTY
4383: LIST
4384: PPUSH
4385: CALL_OW 69
4389: PUSH
4390: FOR_IN
4391: IFFALSE 4409
// NormalAttack ( ai , i ) ;
4393: LD_EXP 6
4397: PPUSH
4398: LD_VAR 0 2
4402: PPUSH
4403: CALL_OW 472
4407: GO 4390
4409: POP
4410: POP
// DMeetVsev ;
4411: CALL 4715 0 0
// if OvsyenkoCaptured then
4415: LD_EXP 15
4419: IFFALSE 4427
// DMeetVsev2 else
4421: CALL 4757 0 0
4425: GO 4431
// DMeetVsev2a ;
4427: CALL 4813 0 0
// DMeetVsev3 ;
4431: CALL 4869 0 0
// if stevens_Killed then
4435: LD_EXP 77
4439: IFFALSE 4447
// DMeetVsev4 else
4441: CALL 4953 0 0
4445: GO 4451
// DMeetVsev5 ;
4447: CALL 4981 0 0
// DMeetVsev6 ;
4451: CALL 5037 0 0
// kecali := true ;
4455: LD_ADDR_EXP 55
4459: PUSH
4460: LD_INT 1
4462: ST_TO_ADDR
// VsevolodSaved := true ;
4463: LD_ADDR_EXP 57
4467: PUSH
4468: LD_INT 1
4470: ST_TO_ADDR
// SA_SaveVsevolod ;
4471: CALL 33524 0 0
// ChangeMissionObjectives ( MVsevolodOut ) ;
4475: LD_STRING MVsevolodOut
4477: PPUSH
4478: CALL_OW 337
// end else
4482: GO 4640
// begin if IsLive ( vsevolod ) and not otherkecali then
4484: LD_EXP 71
4488: PPUSH
4489: CALL_OW 300
4493: PUSH
4494: LD_EXP 56
4498: NOT
4499: AND
4500: IFFALSE 4639
// begin ComStop ( FilterAllUnits ( [ [ f_side , you2 ] ] ) ) ;
4502: LD_INT 22
4504: PUSH
4505: LD_EXP 2
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: EMPTY
4515: LIST
4516: PPUSH
4517: CALL_OW 69
4521: PPUSH
4522: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , you2 ] ] ) , you ) ;
4526: LD_INT 22
4528: PUSH
4529: LD_EXP 2
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: PPUSH
4541: CALL_OW 69
4545: PPUSH
4546: LD_EXP 1
4550: PPUSH
4551: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , you ] ] ) do
4555: LD_ADDR_VAR 0 2
4559: PUSH
4560: LD_INT 22
4562: PUSH
4563: LD_EXP 1
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: PUSH
4572: EMPTY
4573: LIST
4574: PPUSH
4575: CALL_OW 69
4579: PUSH
4580: FOR_IN
4581: IFFALSE 4599
// NormalAttack ( ai , i ) ;
4583: LD_EXP 6
4587: PPUSH
4588: LD_VAR 0 2
4592: PPUSH
4593: CALL_OW 472
4597: GO 4580
4599: POP
4600: POP
// DOtherMeetVsev ;
4601: CALL 4643 0 0
// ComExitBuilding ( vseva1 ) ;
4605: LD_INT 190
4607: PPUSH
4608: CALL_OW 122
// VsevolodSaved := true ;
4612: LD_ADDR_EXP 57
4616: PUSH
4617: LD_INT 1
4619: ST_TO_ADDR
// SA_SaveVsevolod ;
4620: CALL 33524 0 0
// otherkecali := true ;
4624: LD_ADDR_EXP 56
4628: PUSH
4629: LD_INT 1
4631: ST_TO_ADDR
// ChangeMissionObjectives ( MVsevolodOut ) ;
4632: LD_STRING MVsevolodOut
4634: PPUSH
4635: CALL_OW 337
// end ; enable ;
4639: ENABLE
// end ; end ;
4640: PPOPN 2
4642: END
// export function DOtherMeetVsev ; var who ; begin
4643: LD_INT 0
4645: PPUSH
4646: PPUSH
// DialogueOn ;
4647: CALL_OW 6
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 0 ) ;
4651: LD_ADDR_VAR 0 2
4655: PUSH
4656: LD_EXP 53
4660: PPUSH
4661: LD_EXP 1
4665: PPUSH
4666: LD_INT 1
4668: PPUSH
4669: LD_INT 0
4671: PPUSH
4672: LD_INT 0
4674: PPUSH
4675: CALL 10722 0 5
4679: ST_TO_ADDR
// if Say ( Vse , DOtherMeetVsev-Vse-1 ) then
4680: LD_EXP 52
4684: PPUSH
4685: LD_STRING DOtherMeetVsev-Vse-1
4687: PPUSH
4688: CALL_OW 88
4692: IFFALSE 4706
// Say ( who , DOtherMeetVsev-RSol1-1 ) ;
4694: LD_VAR 0 2
4698: PPUSH
4699: LD_STRING DOtherMeetVsev-RSol1-1
4701: PPUSH
4702: CALL_OW 88
// DialogueOff ;
4706: CALL_OW 7
// end ;
4710: LD_VAR 0 1
4714: RET
// export function DMeetVsev ; begin
4715: LD_INT 0
4717: PPUSH
// DialogueOn ;
4718: CALL_OW 6
// if Say ( Vse , DMeetVsev-Vse-1 ) then
4722: LD_EXP 52
4726: PPUSH
4727: LD_STRING DMeetVsev-Vse-1
4729: PPUSH
4730: CALL_OW 88
4734: IFFALSE 4748
// Say ( Bur , DMeetVsev-Bur-1 ) ;
4736: LD_EXP 45
4740: PPUSH
4741: LD_STRING DMeetVsev-Bur-1
4743: PPUSH
4744: CALL_OW 88
// DialogueOff ;
4748: CALL_OW 7
// end ;
4752: LD_VAR 0 1
4756: RET
// export function DMeetVsev2 ; begin
4757: LD_INT 0
4759: PPUSH
// DialogueOn ;
4760: CALL_OW 6
// if Say ( Vse , DMeetVsev2-Vse-1 ) then
4764: LD_EXP 52
4768: PPUSH
4769: LD_STRING DMeetVsev2-Vse-1
4771: PPUSH
4772: CALL_OW 88
4776: IFFALSE 4804
// if Say ( Bur , DMeetVsev2-Bur-1 ) then
4778: LD_EXP 45
4782: PPUSH
4783: LD_STRING DMeetVsev2-Bur-1
4785: PPUSH
4786: CALL_OW 88
4790: IFFALSE 4804
// Say ( Vse , DMeetVsev2-Vse-2 ) ;
4792: LD_EXP 52
4796: PPUSH
4797: LD_STRING DMeetVsev2-Vse-2
4799: PPUSH
4800: CALL_OW 88
// DialogueOff ;
4804: CALL_OW 7
// end ;
4808: LD_VAR 0 1
4812: RET
// export function DMeetVsev2a ; begin
4813: LD_INT 0
4815: PPUSH
// DialogueOn ;
4816: CALL_OW 6
// if Say ( Vse , DMeetVsev2-Vse-2a ) then
4820: LD_EXP 52
4824: PPUSH
4825: LD_STRING DMeetVsev2-Vse-2a
4827: PPUSH
4828: CALL_OW 88
4832: IFFALSE 4860
// if Say ( Bur , DMeetVsev2-Bur-2 ) then
4834: LD_EXP 45
4838: PPUSH
4839: LD_STRING DMeetVsev2-Bur-2
4841: PPUSH
4842: CALL_OW 88
4846: IFFALSE 4860
// Say ( Vse , DMeetVsev2-Vse-3 ) ;
4848: LD_EXP 52
4852: PPUSH
4853: LD_STRING DMeetVsev2-Vse-3
4855: PPUSH
4856: CALL_OW 88
// DialogueOff ;
4860: CALL_OW 7
// end ;
4864: LD_VAR 0 1
4868: RET
// export function DMeetVsev3 ; begin
4869: LD_INT 0
4871: PPUSH
// DialogueOn ;
4872: CALL_OW 6
// if Say ( Bur , DMeetVsev3-Bur-1 ) then
4876: LD_EXP 45
4880: PPUSH
4881: LD_STRING DMeetVsev3-Bur-1
4883: PPUSH
4884: CALL_OW 88
4888: IFFALSE 4944
// if Say ( Vse , DMeetVsev3-Vse-1 ) then
4890: LD_EXP 52
4894: PPUSH
4895: LD_STRING DMeetVsev3-Vse-1
4897: PPUSH
4898: CALL_OW 88
4902: IFFALSE 4944
// if Say ( Bur , DMeetVsev3-Bur-2 ) then
4904: LD_EXP 45
4908: PPUSH
4909: LD_STRING DMeetVsev3-Bur-2
4911: PPUSH
4912: CALL_OW 88
4916: IFFALSE 4944
// if Say ( Vse , DMeetVsev3-Vse-2 ) then
4918: LD_EXP 52
4922: PPUSH
4923: LD_STRING DMeetVsev3-Vse-2
4925: PPUSH
4926: CALL_OW 88
4930: IFFALSE 4944
// Say ( Bur , DMeetVsev3-Bur-3 ) ;
4932: LD_EXP 45
4936: PPUSH
4937: LD_STRING DMeetVsev3-Bur-3
4939: PPUSH
4940: CALL_OW 88
// DialogueOff ;
4944: CALL_OW 7
// end ;
4948: LD_VAR 0 1
4952: RET
// export function DMeetVsev4 ; begin
4953: LD_INT 0
4955: PPUSH
// DialogueOn ;
4956: CALL_OW 6
// Say ( Bur , DMeetVsev4-Bur-1 ) ;
4960: LD_EXP 45
4964: PPUSH
4965: LD_STRING DMeetVsev4-Bur-1
4967: PPUSH
4968: CALL_OW 88
// DialogueOff ;
4972: CALL_OW 7
// end ;
4976: LD_VAR 0 1
4980: RET
// export function DMeetVsev5 ; begin
4981: LD_INT 0
4983: PPUSH
// DialogueOn ;
4984: CALL_OW 6
// if Say ( Bur , DMeetVsev5-Bur-1 ) then
4988: LD_EXP 45
4992: PPUSH
4993: LD_STRING DMeetVsev5-Bur-1
4995: PPUSH
4996: CALL_OW 88
5000: IFFALSE 5028
// if Say ( Vse , DMeetVsev5-Vse-1 ) then
5002: LD_EXP 52
5006: PPUSH
5007: LD_STRING DMeetVsev5-Vse-1
5009: PPUSH
5010: CALL_OW 88
5014: IFFALSE 5028
// Say ( Bur , DMeetVsev5-Bur-2 ) ;
5016: LD_EXP 45
5020: PPUSH
5021: LD_STRING DMeetVsev5-Bur-2
5023: PPUSH
5024: CALL_OW 88
// DialogueOff ;
5028: CALL_OW 7
// end ;
5032: LD_VAR 0 1
5036: RET
// export function DMeetVsev6 ; begin
5037: LD_INT 0
5039: PPUSH
// DialogueOn ;
5040: CALL_OW 6
// if Say ( Vse , DMeetVsev6-Vse-1 ) then
5044: LD_EXP 52
5048: PPUSH
5049: LD_STRING DMeetVsev6-Vse-1
5051: PPUSH
5052: CALL_OW 88
5056: IFFALSE 5070
// Say ( Bur , DMeetVsev6-Bur-1 ) ;
5058: LD_EXP 45
5062: PPUSH
5063: LD_STRING DMeetVsev6-Bur-1
5065: PPUSH
5066: CALL_OW 88
// DialogueOff ;
5070: CALL_OW 7
// end ;
5074: LD_VAR 0 1
5078: RET
// every 0 0$5 trigger kecali and FilterUnitsInArea ( north_base , [ [ f_side , you ] ] ) do
5079: LD_EXP 55
5083: PUSH
5084: LD_INT 22
5086: PPUSH
5087: LD_INT 22
5089: PUSH
5090: LD_EXP 1
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: PUSH
5099: EMPTY
5100: LIST
5101: PPUSH
5102: CALL_OW 70
5106: AND
5107: IFFALSE 5333
5109: GO 5111
5111: DISABLE
// begin wait ( 0 0$10 ) ;
5112: LD_INT 350
5114: PPUSH
5115: CALL_OW 67
// nakladaky ;
5119: CALL 9876 0 0
// ComMoveXY ( [ accar1 , accar2 ] , 53 , 8 ) ;
5123: LD_EXP 81
5127: PUSH
5128: LD_EXP 82
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PPUSH
5137: LD_INT 53
5139: PPUSH
5140: LD_INT 8
5142: PPUSH
5143: CALL_OW 111
// DTruck ;
5147: CALL 5334 0 0
// AddComMoveXY ( [ accar1 , accar2 ] , 45 , 14 ) ;
5151: LD_EXP 81
5155: PUSH
5156: LD_EXP 82
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: PPUSH
5165: LD_INT 45
5167: PPUSH
5168: LD_INT 14
5170: PPUSH
5171: CALL_OW 171
// AddComMoveXY ( [ accar1 , accar2 ] , 33 , 14 ) ;
5175: LD_EXP 81
5179: PUSH
5180: LD_EXP 82
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PPUSH
5189: LD_INT 33
5191: PPUSH
5192: LD_INT 14
5194: PPUSH
5195: CALL_OW 171
// AddComMoveXY ( [ accar1 , accar2 ] , 27 , 32 ) ;
5199: LD_EXP 81
5203: PUSH
5204: LD_EXP 82
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: PPUSH
5213: LD_INT 27
5215: PPUSH
5216: LD_INT 32
5218: PPUSH
5219: CALL_OW 171
// AddComUnload ( [ accar1 , accar2 ] ) ;
5223: LD_EXP 81
5227: PUSH
5228: LD_EXP 82
5232: PUSH
5233: EMPTY
5234: LIST
5235: LIST
5236: PPUSH
5237: CALL_OW 219
// AddComMoveXY ( [ accar1 , accar2 ] , 42 , 79 ) ;
5241: LD_EXP 81
5245: PUSH
5246: LD_EXP 82
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PPUSH
5255: LD_INT 42
5257: PPUSH
5258: LD_INT 79
5260: PPUSH
5261: CALL_OW 171
// AddComExitVehicle ( [ acman1 , acman2 ] ) ;
5265: LD_EXP 83
5269: PUSH
5270: LD_EXP 84
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: PPUSH
5279: CALL_OW 181
// sol := sol union [ acman1 , acman2 ] ;
5283: LD_ADDR_EXP 122
5287: PUSH
5288: LD_EXP 122
5292: PUSH
5293: LD_EXP 83
5297: PUSH
5298: LD_EXP 84
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: UNION
5307: ST_TO_ADDR
// a3 := a3 union [ acman1 , acman2 ] ;
5308: LD_ADDR_EXP 136
5312: PUSH
5313: LD_EXP 136
5317: PUSH
5318: LD_EXP 83
5322: PUSH
5323: LD_EXP 84
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: UNION
5332: ST_TO_ADDR
// end ;
5333: END
// export function DTruck ; var who ; begin
5334: LD_INT 0
5336: PPUSH
5337: PPUSH
// who := acman1 ;
5338: LD_ADDR_VAR 0 2
5342: PUSH
5343: LD_EXP 83
5347: ST_TO_ADDR
// DialogueOn ;
5348: CALL_OW 6
// if Say ( who , DTruck-Sol1-1 ) then
5352: LD_VAR 0 2
5356: PPUSH
5357: LD_STRING DTruck-Sol1-1
5359: PPUSH
5360: CALL_OW 88
5364: IFFALSE 5378
// Say ( Bur , DTruck-Bur-1 ) ;
5366: LD_EXP 45
5370: PPUSH
5371: LD_STRING DTruck-Bur-1
5373: PPUSH
5374: CALL_OW 88
// DialogueOff ;
5378: CALL_OW 7
// end ;
5382: LD_VAR 0 1
5386: RET
// export function DDieVsev1 ; begin
5387: LD_INT 0
5389: PPUSH
// SetLives ( vsevd1 , 0 ) ;
5390: LD_INT 182
5392: PPUSH
5393: LD_INT 0
5395: PPUSH
5396: CALL_OW 234
// ChangeMissionObjectives ( MVsevolodDel ) ;
5400: LD_STRING MVsevolodDel
5402: PPUSH
5403: CALL_OW 337
// DialogueOn ;
5407: CALL_OW 6
// Say ( Vsevolod2 , DDieVsev1-Vse-1 ) ;
5411: LD_EXP 72
5415: PPUSH
5416: LD_STRING DDieVsev1-Vse-1
5418: PPUSH
5419: CALL_OW 88
// DialogueOff ;
5423: CALL_OW 7
// end ;
5427: LD_VAR 0 1
5431: RET
// export function DDieVsev2 ; begin
5432: LD_INT 0
5434: PPUSH
// DialogueOn ;
5435: CALL_OW 6
// Say ( Vsevolod2 , DDieVsev2-Vse-1 ) ;
5439: LD_EXP 72
5443: PPUSH
5444: LD_STRING DDieVsev2-Vse-1
5446: PPUSH
5447: CALL_OW 88
// DialogueOff ;
5451: CALL_OW 7
// end ;
5455: LD_VAR 0 1
5459: RET
// export function DStasis ; var who ; begin
5460: LD_INT 0
5462: PPUSH
5463: PPUSH
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 0 ) ;
5464: LD_ADDR_VAR 0 2
5468: PUSH
5469: LD_EXP 53
5473: PPUSH
5474: LD_EXP 1
5478: PPUSH
5479: LD_INT 1
5481: PPUSH
5482: LD_INT 0
5484: PPUSH
5485: LD_INT 0
5487: PPUSH
5488: CALL 10722 0 5
5492: ST_TO_ADDR
// DialogueOn ;
5493: CALL_OW 6
// if not Say ( Pty , DStasis-Pty-1 ) then
5497: LD_EXP 48
5501: PPUSH
5502: LD_STRING DStasis-Pty-1
5504: PPUSH
5505: CALL_OW 88
5509: NOT
5510: IFFALSE 5539
// if not Say ( Dol , DStasis-Dol-1 ) then
5512: LD_EXP 51
5516: PPUSH
5517: LD_STRING DStasis-Dol-1
5519: PPUSH
5520: CALL_OW 88
5524: NOT
5525: IFFALSE 5539
// Say ( who , DStasis-RSol1-1 ) ;
5527: LD_VAR 0 2
5531: PPUSH
5532: LD_STRING DStasis-RSol1-1
5534: PPUSH
5535: CALL_OW 88
// Say ( Bur , DStasis-Bur-1 ) ;
5539: LD_EXP 45
5543: PPUSH
5544: LD_STRING DStasis-Bur-1
5546: PPUSH
5547: CALL_OW 88
// if not Say ( Pty , DStasis-Pty-2 ) then
5551: LD_EXP 48
5555: PPUSH
5556: LD_STRING DStasis-Pty-2
5558: PPUSH
5559: CALL_OW 88
5563: NOT
5564: IFFALSE 5593
// if not Say ( Dol , DStasis-Dol-2 ) then
5566: LD_EXP 51
5570: PPUSH
5571: LD_STRING DStasis-Dol-2
5573: PPUSH
5574: CALL_OW 88
5578: NOT
5579: IFFALSE 5593
// Say ( who , DStasis-RSol1-2 ) ;
5581: LD_VAR 0 2
5585: PPUSH
5586: LD_STRING DStasis-RSol1-2
5588: PPUSH
5589: CALL_OW 88
// Say ( Bur , DStasis-Bur-2 ) ;
5593: LD_EXP 45
5597: PPUSH
5598: LD_STRING DStasis-Bur-2
5600: PPUSH
5601: CALL_OW 88
// DialogueOff ;
5605: CALL_OW 7
// MyHint ( Stasis ) ;
5609: LD_STRING Stasis
5611: PPUSH
5612: CALL 12036 0 1
// end ;
5616: LD_VAR 0 1
5620: RET
// every 0 0$2 trigger GetTech ( tech_TauField , you ) = state_researched and GetTech ( tech_SibDet , you ) = state_researched and GetTech ( tech_SibPow , you ) = state_researched and GetTech ( tech_SibEng , you ) = state_researched do
5621: LD_INT 30
5623: PPUSH
5624: LD_EXP 1
5628: PPUSH
5629: CALL_OW 321
5633: PUSH
5634: LD_INT 2
5636: EQUAL
5637: PUSH
5638: LD_INT 20
5640: PPUSH
5641: LD_EXP 1
5645: PPUSH
5646: CALL_OW 321
5650: PUSH
5651: LD_INT 2
5653: EQUAL
5654: AND
5655: PUSH
5656: LD_INT 21
5658: PPUSH
5659: LD_EXP 1
5663: PPUSH
5664: CALL_OW 321
5668: PUSH
5669: LD_INT 2
5671: EQUAL
5672: AND
5673: PUSH
5674: LD_INT 22
5676: PPUSH
5677: LD_EXP 1
5681: PPUSH
5682: CALL_OW 321
5686: PUSH
5687: LD_INT 2
5689: EQUAL
5690: AND
5691: IFFALSE 5703
5693: GO 5695
5695: DISABLE
// begin ChangeMissionObjectives ( MOutResearch ) ;
5696: LD_STRING MOutResearch
5698: PPUSH
5699: CALL_OW 337
// end ;
5703: END
// export exit_enabled ; every 0 0$2 trigger GetTech ( tech_TauField , you ) = state_researched and GetTech ( tech_SibDet , you ) = state_researched and GetTech ( tech_SibPow , you ) = state_researched and GetTech ( tech_SibEng , you ) = state_researched and mine_obj_completed do var plidi , lidi , min , max , i , go_pryc , go_pryc_tmp , zustavaj , utek , povol_povol , mt ;
5704: LD_INT 30
5706: PPUSH
5707: LD_EXP 1
5711: PPUSH
5712: CALL_OW 321
5716: PUSH
5717: LD_INT 2
5719: EQUAL
5720: PUSH
5721: LD_INT 20
5723: PPUSH
5724: LD_EXP 1
5728: PPUSH
5729: CALL_OW 321
5733: PUSH
5734: LD_INT 2
5736: EQUAL
5737: AND
5738: PUSH
5739: LD_INT 21
5741: PPUSH
5742: LD_EXP 1
5746: PPUSH
5747: CALL_OW 321
5751: PUSH
5752: LD_INT 2
5754: EQUAL
5755: AND
5756: PUSH
5757: LD_INT 22
5759: PPUSH
5760: LD_EXP 1
5764: PPUSH
5765: CALL_OW 321
5769: PUSH
5770: LD_INT 2
5772: EQUAL
5773: AND
5774: PUSH
5775: LD_EXP 30
5779: AND
5780: IFFALSE 6665
5782: GO 5784
5784: DISABLE
5785: LD_INT 0
5787: PPUSH
5788: PPUSH
5789: PPUSH
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
5796: PPUSH
5797: PPUSH
// begin if IsLive ( Vsevolod ) and GetSide ( Vsevolod ) = you2 then
5798: LD_EXP 71
5802: PPUSH
5803: CALL_OW 300
5807: PUSH
5808: LD_EXP 71
5812: PPUSH
5813: CALL_OW 255
5817: PUSH
5818: LD_EXP 2
5822: EQUAL
5823: AND
5824: IFFALSE 6100
// begin kolik_ma_vsevolod_casu := 0 ;
5826: LD_ADDR_EXP 34
5830: PUSH
5831: LD_INT 0
5833: ST_TO_ADDR
// utek := [ Vsevolod ] union vsevolod_uderna_group ;
5834: LD_ADDR_VAR 0 9
5838: PUSH
5839: LD_EXP 71
5843: PUSH
5844: EMPTY
5845: LIST
5846: PUSH
5847: LD_EXP 12
5851: UNION
5852: ST_TO_ADDR
// utek := UnitFilter ( utek , [ [ f_placed ] , [ f_side , you2 ] ] ) ;
5853: LD_ADDR_VAR 0 9
5857: PUSH
5858: LD_VAR 0 9
5862: PPUSH
5863: LD_INT 52
5865: PUSH
5866: EMPTY
5867: LIST
5868: PUSH
5869: LD_INT 22
5871: PUSH
5872: LD_EXP 2
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PPUSH
5885: CALL_OW 72
5889: ST_TO_ADDR
// mt := tick + 0 0$20 ;
5890: LD_ADDR_VAR 0 11
5894: PUSH
5895: LD_OWVAR 1
5899: PUSH
5900: LD_INT 700
5902: PLUS
5903: ST_TO_ADDR
// while utek and tick < mt do
5904: LD_VAR 0 9
5908: PUSH
5909: LD_OWVAR 1
5913: PUSH
5914: LD_VAR 0 11
5918: LESS
5919: AND
5920: IFFALSE 6059
// begin for i in utek do
5922: LD_ADDR_VAR 0 5
5926: PUSH
5927: LD_VAR 0 9
5931: PUSH
5932: FOR_IN
5933: IFFALSE 5988
// if IsInArea ( i , vsevolod_in ) or not IsPlaced ( i ) then
5935: LD_VAR 0 5
5939: PPUSH
5940: LD_INT 16
5942: PPUSH
5943: CALL_OW 308
5947: PUSH
5948: LD_VAR 0 5
5952: PPUSH
5953: CALL_OW 305
5957: NOT
5958: OR
5959: IFFALSE 5986
// begin RemoveUnit ( i ) ;
5961: LD_VAR 0 5
5965: PPUSH
5966: CALL_OW 64
// utek := utek diff i ;
5970: LD_ADDR_VAR 0 9
5974: PUSH
5975: LD_VAR 0 9
5979: PUSH
5980: LD_VAR 0 5
5984: DIFF
5985: ST_TO_ADDR
// end ;
5986: GO 5932
5988: POP
5989: POP
// utek := UnitFilter ( utek , [ [ f_placed ] ] ) ;
5990: LD_ADDR_VAR 0 9
5994: PUSH
5995: LD_VAR 0 9
5999: PPUSH
6000: LD_INT 52
6002: PUSH
6003: EMPTY
6004: LIST
6005: PUSH
6006: EMPTY
6007: LIST
6008: PPUSH
6009: CALL_OW 72
6013: ST_TO_ADDR
// wait ( 0 0$1 ) ;
6014: LD_INT 35
6016: PPUSH
6017: CALL_OW 67
// ComExitVehicle ( utek ) ;
6021: LD_VAR 0 9
6025: PPUSH
6026: CALL_OW 121
// AddComMoveToArea ( utek , vsevolod_in ) ;
6030: LD_VAR 0 9
6034: PPUSH
6035: LD_INT 16
6037: PPUSH
6038: CALL_OW 173
// AddComMoveXY ( utek , 53 , 1 ) ;
6042: LD_VAR 0 9
6046: PPUSH
6047: LD_INT 53
6049: PPUSH
6050: LD_INT 1
6052: PPUSH
6053: CALL_OW 171
// end ;
6057: GO 5904
// SetLives ( Vsevolod , 0 ) ;
6059: LD_EXP 71
6063: PPUSH
6064: LD_INT 0
6066: PPUSH
6067: CALL_OW 234
// for i in vsevolod_uderna_group do
6071: LD_ADDR_VAR 0 5
6075: PUSH
6076: LD_EXP 12
6080: PUSH
6081: FOR_IN
6082: IFFALSE 6098
// SetLives ( i , 0 ) ;
6084: LD_VAR 0 5
6088: PPUSH
6089: LD_INT 0
6091: PPUSH
6092: CALL_OW 234
6096: GO 6081
6098: POP
6099: POP
// end ; wait ( 0 0$15 ) ;
6100: LD_INT 525
6102: PPUSH
6103: CALL_OW 67
// DNextMiss1 ;
6107: CALL 6689 0 0
// if IsLive ( Vsevolod ) and kecali then
6111: LD_EXP 71
6115: PPUSH
6116: CALL_OW 300
6120: PUSH
6121: LD_EXP 55
6125: AND
6126: IFFALSE 6134
// DNextMiss3 else
6128: CALL 6745 0 0
6132: GO 6142
// begin DNextMiss2 ;
6134: CALL 6717 0 0
// VyhraResearch ;
6138: CALL 282 0 0
// end ; DNextMiss4 ;
6142: CALL 6785 0 0
// ChangeMissionObjectives ( MCars ) ;
6146: LD_STRING MCars
6148: PPUSH
6149: CALL_OW 337
// SetAreaMapShow ( ru_exit , 1 ) ;
6153: LD_INT 21
6155: PPUSH
6156: LD_INT 1
6158: PPUSH
6159: CALL_OW 424
// exit_enabled := true ;
6163: LD_ADDR_EXP 58
6167: PUSH
6168: LD_INT 1
6170: ST_TO_ADDR
// convoy_can_go := true ;
6171: LD_ADDR_EXP 59
6175: PUSH
6176: LD_INT 1
6178: ST_TO_ADDR
// if IsLive ( Vsevolod ) then
6179: LD_EXP 71
6183: PPUSH
6184: CALL_OW 300
6188: IFFALSE 6665
// begin lidi := FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Vsevolod , Burlak ] ;
6190: LD_ADDR_VAR 0 2
6194: PUSH
6195: LD_INT 22
6197: PUSH
6198: LD_EXP 1
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: PUSH
6207: LD_INT 21
6209: PUSH
6210: LD_INT 1
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: PUSH
6217: LD_INT 23
6219: PUSH
6220: LD_INT 3
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: PPUSH
6232: CALL_OW 69
6236: PUSH
6237: LD_EXP 71
6241: PUSH
6242: LD_EXP 62
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: DIFF
6251: ST_TO_ADDR
// max := lidi div 2 + lidi mod 2 ;
6252: LD_ADDR_VAR 0 4
6256: PUSH
6257: LD_VAR 0 2
6261: PUSH
6262: LD_INT 2
6264: DIV
6265: PUSH
6266: LD_VAR 0 2
6270: PUSH
6271: LD_INT 2
6273: MOD
6274: PLUS
6275: ST_TO_ADDR
// min := 0 ;
6276: LD_ADDR_VAR 0 3
6280: PUSH
6281: LD_INT 0
6283: ST_TO_ADDR
// povol_povol := [ class_soldier , class_engineer , class_mechanic , class_scientistic ] ;
6284: LD_ADDR_VAR 0 10
6288: PUSH
6289: LD_INT 1
6291: PUSH
6292: LD_INT 2
6294: PUSH
6295: LD_INT 3
6297: PUSH
6298: LD_INT 4
6300: PUSH
6301: EMPTY
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: ST_TO_ADDR
// if max > 1 then
6307: LD_VAR 0 4
6311: PUSH
6312: LD_INT 1
6314: GREATER
6315: IFFALSE 6435
// begin zustavaj := [ Burlak ] ^ CharacterSelection ( 1 , min , max , [ Burlak , sel_changeable , sel_change_class ] ^ ( lidi diff vsevolod_uderna_group ) ^ [ sel_not_hired ] ^ vsevolod_uderna_group ^ [ sel_not_changeable , Vsevolod ] , povol_povol ) ;
6317: LD_ADDR_VAR 0 8
6321: PUSH
6322: LD_EXP 62
6326: PUSH
6327: EMPTY
6328: LIST
6329: PUSH
6330: LD_STRING 1
6332: PPUSH
6333: LD_VAR 0 3
6337: PPUSH
6338: LD_VAR 0 4
6342: PPUSH
6343: LD_EXP 62
6347: PUSH
6348: LD_INT -3
6350: PUSH
6351: LD_INT -5
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: LIST
6358: PUSH
6359: LD_VAR 0 2
6363: PUSH
6364: LD_EXP 12
6368: DIFF
6369: ADD
6370: PUSH
6371: LD_INT -2
6373: PUSH
6374: EMPTY
6375: LIST
6376: ADD
6377: PUSH
6378: LD_EXP 12
6382: ADD
6383: PUSH
6384: LD_INT -4
6386: PUSH
6387: LD_EXP 71
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: ADD
6396: PPUSH
6397: LD_VAR 0 10
6401: PPUSH
6402: CALL_OW 42
6406: ADD
6407: ST_TO_ADDR
// go_pryc := [ Vsevolod ] ^ ( lidi diff zustavaj ) ;
6408: LD_ADDR_VAR 0 6
6412: PUSH
6413: LD_EXP 71
6417: PUSH
6418: EMPTY
6419: LIST
6420: PUSH
6421: LD_VAR 0 2
6425: PUSH
6426: LD_VAR 0 8
6430: DIFF
6431: ADD
6432: ST_TO_ADDR
// end else
6433: GO 6467
// begin zustavaj := [ Burlak ] ;
6435: LD_ADDR_VAR 0 8
6439: PUSH
6440: LD_EXP 62
6444: PUSH
6445: EMPTY
6446: LIST
6447: ST_TO_ADDR
// go_pryc := [ Vsevolod ] ^ lidi ;
6448: LD_ADDR_VAR 0 6
6452: PUSH
6453: LD_EXP 71
6457: PUSH
6458: EMPTY
6459: LIST
6460: PUSH
6461: LD_VAR 0 2
6465: ADD
6466: ST_TO_ADDR
// end ; SetSide ( go_pryc , you2 ) ;
6467: LD_VAR 0 6
6471: PPUSH
6472: LD_EXP 2
6476: PPUSH
6477: CALL_OW 235
// for i in go_pryc do
6481: LD_ADDR_VAR 0 5
6485: PUSH
6486: LD_VAR 0 6
6490: PUSH
6491: FOR_IN
6492: IFFALSE 6510
// DoNotAttack ( ai , i ) ;
6494: LD_EXP 6
6498: PPUSH
6499: LD_VAR 0 5
6503: PPUSH
6504: CALL_OW 471
6508: GO 6491
6510: POP
6511: POP
// sli_pryc := [ ] ;
6512: LD_ADDR_EXP 78
6516: PUSH
6517: EMPTY
6518: ST_TO_ADDR
// go_pryc_tmp := go_pryc ;
6519: LD_ADDR_VAR 0 7
6523: PUSH
6524: LD_VAR 0 6
6528: ST_TO_ADDR
// while go_pryc_tmp do
6529: LD_VAR 0 7
6533: IFFALSE 6658
// begin for i in go_pryc_tmp do
6535: LD_ADDR_VAR 0 5
6539: PUSH
6540: LD_VAR 0 7
6544: PUSH
6545: FOR_IN
6546: IFFALSE 6611
// if IsInArea ( i , exit_a ) then
6548: LD_VAR 0 5
6552: PPUSH
6553: LD_INT 20
6555: PPUSH
6556: CALL_OW 308
6560: IFFALSE 6609
// begin RemoveUnit ( i ) ;
6562: LD_VAR 0 5
6566: PPUSH
6567: CALL_OW 64
// go_pryc_tmp := go_pryc_tmp diff [ i ] ;
6571: LD_ADDR_VAR 0 7
6575: PUSH
6576: LD_VAR 0 7
6580: PUSH
6581: LD_VAR 0 5
6585: PUSH
6586: EMPTY
6587: LIST
6588: DIFF
6589: ST_TO_ADDR
// sli_pryc := sli_pryc union [ i ] ;
6590: LD_ADDR_EXP 78
6594: PUSH
6595: LD_EXP 78
6599: PUSH
6600: LD_VAR 0 5
6604: PUSH
6605: EMPTY
6606: LIST
6607: UNION
6608: ST_TO_ADDR
// end ;
6609: GO 6545
6611: POP
6612: POP
// wait ( 0 0$1 ) ;
6613: LD_INT 35
6615: PPUSH
6616: CALL_OW 67
// ComExitVehicle ( go_pryc_tmp ) ;
6620: LD_VAR 0 7
6624: PPUSH
6625: CALL_OW 121
// AddComMoveToArea ( go_pryc_tmp , exit_a ) ;
6629: LD_VAR 0 7
6633: PPUSH
6634: LD_INT 20
6636: PPUSH
6637: CALL_OW 173
// AddComMoveXY ( go_pryc_tmp , 104 , 71 ) ;
6641: LD_VAR 0 7
6645: PPUSH
6646: LD_INT 104
6648: PPUSH
6649: LD_INT 71
6651: PPUSH
6652: CALL_OW 171
// end ;
6656: GO 6529
// wait ( 0 0$3 ) ;
6658: LD_INT 105
6660: PPUSH
6661: CALL_OW 67
// end ; end ;
6665: PPOPN 11
6667: END
// export convoy_can_go ; every 0 0$10 trigger convoy_can_go do
6668: LD_EXP 59
6672: IFFALSE 6688
6674: GO 6676
6676: DISABLE
// begin wait ( 0 0$25 ) ;
6677: LD_INT 875
6679: PPUSH
6680: CALL_OW 67
// convoy ;
6684: CALL 10094 0 0
// end ;
6688: END
// export function DNextMiss1 ; begin
6689: LD_INT 0
6691: PPUSH
// DialogueOn ;
6692: CALL_OW 6
// SayRadio ( Pla , DNextMiss1-Pla-1 ) ;
6696: LD_EXP 46
6700: PPUSH
6701: LD_STRING DNextMiss1-Pla-1
6703: PPUSH
6704: CALL_OW 94
// DialogueOff ;
6708: CALL_OW 7
// end ;
6712: LD_VAR 0 1
6716: RET
// export function DNextMiss2 ; begin
6717: LD_INT 0
6719: PPUSH
// DialogueOn ;
6720: CALL_OW 6
// SayRadio ( Pla , DNextMiss2-Pla-1 ) ;
6724: LD_EXP 46
6728: PPUSH
6729: LD_STRING DNextMiss2-Pla-1
6731: PPUSH
6732: CALL_OW 94
// DialogueOff ;
6736: CALL_OW 7
// end ;
6740: LD_VAR 0 1
6744: RET
// export function DNextMiss3 ; begin
6745: LD_INT 0
6747: PPUSH
// DialogueOn ;
6748: CALL_OW 6
// SayRadio ( Pla , DNextMiss3-Pla-1 ) ;
6752: LD_EXP 46
6756: PPUSH
6757: LD_STRING DNextMiss3-Pla-1
6759: PPUSH
6760: CALL_OW 94
// SayRadio ( Pla , DNextMiss3-Pla-1a ) ;
6764: LD_EXP 46
6768: PPUSH
6769: LD_STRING DNextMiss3-Pla-1a
6771: PPUSH
6772: CALL_OW 94
// DialogueOff ;
6776: CALL_OW 7
// end ;
6780: LD_VAR 0 1
6784: RET
// export function DNextMiss4 ; begin
6785: LD_INT 0
6787: PPUSH
// DialogueOn ;
6788: CALL_OW 6
// Say ( Bur , DNextMiss4-Bur-1 ) ;
6792: LD_EXP 45
6796: PPUSH
6797: LD_STRING DNextMiss4-Bur-1
6799: PPUSH
6800: CALL_OW 88
// DialogueOff ;
6804: CALL_OW 7
// end ;
6808: LD_VAR 0 1
6812: RET
// var was_end_query ; every 0 0$5 trigger exit_enabled do var a , qr ;
6813: LD_EXP 58
6817: IFFALSE 6935
6819: GO 6821
6821: DISABLE
6822: LD_INT 0
6824: PPUSH
6825: PPUSH
// begin a := FilterHumansInArea ( ru_exit , [ [ f_side , you ] ] ) ;
6826: LD_ADDR_VAR 0 1
6830: PUSH
6831: LD_INT 21
6833: PPUSH
6834: LD_INT 22
6836: PUSH
6837: LD_EXP 1
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: EMPTY
6847: LIST
6848: PPUSH
6849: CALL 11013 0 2
6853: ST_TO_ADDR
// if ( Burlak in a ) then
6854: LD_EXP 62
6858: PUSH
6859: LD_VAR 0 1
6863: IN
6864: IFFALSE 6918
// begin end_the_mission_allowed := true ;
6866: LD_ADDR_OWVAR 57
6870: PUSH
6871: LD_INT 1
6873: ST_TO_ADDR
// if not was_end_query then
6874: LD_LOC 2
6878: NOT
6879: IFFALSE 6916
// begin qr := Query ( QEndGame ) ;
6881: LD_ADDR_VAR 0 2
6885: PUSH
6886: LD_STRING QEndGame
6888: PPUSH
6889: CALL_OW 97
6893: ST_TO_ADDR
// was_end_query := true ;
6894: LD_ADDR_LOC 2
6898: PUSH
6899: LD_INT 1
6901: ST_TO_ADDR
// if qr = 1 then
6902: LD_VAR 0 2
6906: PUSH
6907: LD_INT 1
6909: EQUAL
6910: IFFALSE 6916
// VyhraExit ;
6912: CALL 355 0 0
// end ; end else
6916: GO 6934
// begin end_the_mission_allowed := false ;
6918: LD_ADDR_OWVAR 57
6922: PUSH
6923: LD_INT 0
6925: ST_TO_ADDR
// was_end_query := false ;
6926: LD_ADDR_LOC 2
6930: PUSH
6931: LD_INT 0
6933: ST_TO_ADDR
// end ; enable ;
6934: ENABLE
// end ;
6935: PPOPN 2
6937: END
// export gleb_lives , utok_na_gleba ; every 0 0$1 trigger gleb and gleb_lives <> GetLives ( gleb ) do var i ;
6938: LD_EXP 66
6942: PUSH
6943: LD_EXP 60
6947: PUSH
6948: LD_EXP 66
6952: PPUSH
6953: CALL_OW 256
6957: NONEQUAL
6958: AND
6959: IFFALSE 7025
6961: GO 6963
6963: DISABLE
6964: LD_INT 0
6966: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , you ] ] ) do
6967: LD_ADDR_VAR 0 1
6971: PUSH
6972: LD_INT 22
6974: PUSH
6975: LD_EXP 1
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: EMPTY
6985: LIST
6986: PPUSH
6987: CALL_OW 69
6991: PUSH
6992: FOR_IN
6993: IFFALSE 7022
// if WantsToAttack ( i ) = Gleb then
6995: LD_VAR 0 1
6999: PPUSH
7000: CALL_OW 319
7004: PUSH
7005: LD_EXP 66
7009: EQUAL
7010: IFFALSE 7020
// utok_na_gleba := true ;
7012: LD_ADDR_EXP 61
7016: PUSH
7017: LD_INT 1
7019: ST_TO_ADDR
7020: GO 6992
7022: POP
7023: POP
// enable ;
7024: ENABLE
// end ;
7025: PPOPN 1
7027: END
// export function DKillGleb ; begin
7028: LD_INT 0
7030: PPUSH
// DialogueOn ;
7031: CALL_OW 6
// SayRadio ( Pla , DKillGleb-Pla-1 ) ;
7035: LD_EXP 46
7039: PPUSH
7040: LD_STRING DKillGleb-Pla-1
7042: PPUSH
7043: CALL_OW 94
// DialogueOff ;
7047: CALL_OW 7
// end ;
7051: LD_VAR 0 1
7055: RET
// every 0 0$5 do var i , a ;
7056: GO 7058
7058: DISABLE
7059: LD_INT 0
7061: PPUSH
7062: PPUSH
// begin a := 0 ;
7063: LD_ADDR_VAR 0 2
7067: PUSH
7068: LD_INT 0
7070: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_side , you ] ] ) do
7071: LD_ADDR_VAR 0 1
7075: PUSH
7076: LD_INT 2
7078: PUSH
7079: LD_INT 30
7081: PUSH
7082: LD_INT 0
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PUSH
7089: LD_INT 30
7091: PUSH
7092: LD_INT 1
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: LIST
7103: PUSH
7104: LD_INT 22
7106: PUSH
7107: LD_EXP 1
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PPUSH
7120: CALL_OW 69
7124: PUSH
7125: FOR_IN
7126: IFFALSE 7159
// a := a + GetResourceType ( Getbase ( i ) , mat_siberit ) ;
7128: LD_ADDR_VAR 0 2
7132: PUSH
7133: LD_VAR 0 2
7137: PUSH
7138: LD_VAR 0 1
7142: PPUSH
7143: CALL_OW 274
7147: PPUSH
7148: LD_INT 3
7150: PPUSH
7151: CALL_OW 275
7155: PLUS
7156: ST_TO_ADDR
7157: GO 7125
7159: POP
7160: POP
// if a >= 100 then
7161: LD_VAR 0 2
7165: PUSH
7166: LD_INT 100
7168: GREATEREQUAL
7169: IFFALSE 7188
// begin ChangeMissionObjectives ( MOutMine ) ;
7171: LD_STRING MOutMine
7173: PPUSH
7174: CALL_OW 337
// mine_obj_completed := true ;
7178: LD_ADDR_EXP 30
7182: PUSH
7183: LD_INT 1
7185: ST_TO_ADDR
// end else
7186: GO 7189
// enable ;
7188: ENABLE
// end ;
7189: PPOPN 2
7191: END
// every 0 0$5 trigger GetResourceType ( GetBase ( RuDepot ) , mat_siberit ) > 15 do
7192: LD_INT 58
7194: PPUSH
7195: CALL_OW 274
7199: PPUSH
7200: LD_INT 3
7202: PPUSH
7203: CALL_OW 275
7207: PUSH
7208: LD_INT 15
7210: GREATER
7211: IFFALSE 7257
7213: GO 7215
7215: DISABLE
// begin if not Ovsyenkotaken then
7216: LD_EXP 14
7220: NOT
7221: IFFALSE 7257
// begin if GetSide ( RuDepot ) <> you then
7223: LD_INT 58
7225: PPUSH
7226: CALL_OW 255
7230: PUSH
7231: LD_EXP 1
7235: NONEQUAL
7236: IFFALSE 7256
// SetResourceType ( GetBase ( RuDepot ) , mat_siberit , 5 ) ;
7238: LD_INT 58
7240: PPUSH
7241: CALL_OW 274
7245: PPUSH
7246: LD_INT 3
7248: PPUSH
7249: LD_INT 5
7251: PPUSH
7252: CALL_OW 277
// enable ;
7256: ENABLE
// end ; end ;
7257: END
// every 0 0$10 trigger UnitFilter ( zbytek , [ [ f_see , you ] ] ) do
7258: LD_EXP 92
7262: PPUSH
7263: LD_INT 101
7265: PUSH
7266: LD_EXP 1
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: PUSH
7275: EMPTY
7276: LIST
7277: PPUSH
7278: CALL_OW 72
7282: IFFALSE 7301
7284: GO 7286
7286: DISABLE
// begin wait ( 0 0$10 ) ;
7287: LD_INT 350
7289: PPUSH
7290: CALL_OW 67
// MyHint ( RemoteControl ) ;
7294: LD_STRING RemoteControl
7296: PPUSH
7297: CALL 12036 0 1
// end ; end_of_file
7301: END
// export Burlak , Platonov , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Vsevolod , Vsevolod2 ; export used , ru_cars , cars , other_ru_5_6 , stevens_killed , sli_pryc ; export fast_braketrough ; export function Load ; var i , k1 , k2 ; begin
7302: LD_INT 0
7304: PPUSH
7305: PPUSH
7306: PPUSH
7307: PPUSH
// belkovfreed := LoadVariable ( belkovfreed , true ) ;
7308: LD_ADDR_EXP 13
7312: PUSH
7313: LD_STRING belkovfreed
7315: PPUSH
7316: LD_INT 1
7318: PPUSH
7319: CALL_OW 30
7323: ST_TO_ADDR
// cars := LoadVariable ( cars_ru_6 , [ [ ru_heavy_wheeled , ru_gatling_gun , nation_russian , 0 , 0 ] , [ ru_heavy_wheeled , ru_heavy_gun , nation_russian , 0 , 0 ] , [ ru_heavy_wheeled , ru_heavy_gun , nation_russian , 0 , 0 ] , [ ru_heavy_tracked , ru_heavy_gun , nation_russian , 0 , 0 ] , [ ru_heavy_tracked , ru_gatling_gun , nation_russian , 0 , 0 ] , [ ru_heavy_tracked , ru_gatling_gun , nation_russian , 0 , 0 ] , [ ru_heavy_tracked , ru_gatling_gun , nation_russian , 0 , 0 ] , [ ru_heavy_tracked , ru_gatling_gun , nation_russian , 0 , 0 ] ] ) ;
7324: LD_ADDR_EXP 75
7328: PUSH
7329: LD_STRING cars_ru_6
7331: PPUSH
7332: LD_INT 23
7334: PUSH
7335: LD_INT 43
7337: PUSH
7338: LD_INT 3
7340: PUSH
7341: LD_INT 0
7343: PUSH
7344: LD_INT 0
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: PUSH
7354: LD_INT 23
7356: PUSH
7357: LD_INT 46
7359: PUSH
7360: LD_INT 3
7362: PUSH
7363: LD_INT 0
7365: PUSH
7366: LD_INT 0
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: PUSH
7376: LD_INT 23
7378: PUSH
7379: LD_INT 46
7381: PUSH
7382: LD_INT 3
7384: PUSH
7385: LD_INT 0
7387: PUSH
7388: LD_INT 0
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: PUSH
7398: LD_INT 24
7400: PUSH
7401: LD_INT 46
7403: PUSH
7404: LD_INT 3
7406: PUSH
7407: LD_INT 0
7409: PUSH
7410: LD_INT 0
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: PUSH
7420: LD_INT 24
7422: PUSH
7423: LD_INT 43
7425: PUSH
7426: LD_INT 3
7428: PUSH
7429: LD_INT 0
7431: PUSH
7432: LD_INT 0
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: PUSH
7442: LD_INT 24
7444: PUSH
7445: LD_INT 43
7447: PUSH
7448: LD_INT 3
7450: PUSH
7451: LD_INT 0
7453: PUSH
7454: LD_INT 0
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: PUSH
7464: LD_INT 24
7466: PUSH
7467: LD_INT 43
7469: PUSH
7470: LD_INT 3
7472: PUSH
7473: LD_INT 0
7475: PUSH
7476: LD_INT 0
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: PUSH
7486: LD_INT 24
7488: PUSH
7489: LD_INT 43
7491: PUSH
7492: LD_INT 3
7494: PUSH
7495: LD_INT 0
7497: PUSH
7498: LD_INT 0
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: PPUSH
7518: CALL_OW 30
7522: ST_TO_ADDR
// stevens_killed := LoadVariable ( stevens_killed , false ) ;
7523: LD_ADDR_EXP 77
7527: PUSH
7528: LD_STRING stevens_killed
7530: PPUSH
7531: LD_INT 0
7533: PPUSH
7534: CALL_OW 30
7538: ST_TO_ADDR
// fast_braketrough := LoadVariable ( OvesyenkoTime , false ) ;
7539: LD_ADDR_EXP 79
7543: PUSH
7544: LD_STRING OvesyenkoTime
7546: PPUSH
7547: LD_INT 0
7549: PPUSH
7550: CALL_OW 30
7554: ST_TO_ADDR
// InitUc ;
7555: CALL_OW 18
// InitHc ;
7559: CALL_OW 19
// uc_side := you ;
7563: LD_ADDR_OWVAR 20
7567: PUSH
7568: LD_EXP 1
7572: ST_TO_ADDR
// uc_nation := nation_russian ;
7573: LD_ADDR_OWVAR 21
7577: PUSH
7578: LD_INT 3
7580: ST_TO_ADDR
// Platonov := MyCreateCharacter ( Platonov , 0 , class_soldier , true ) ;
7581: LD_ADDR_EXP 63
7585: PUSH
7586: LD_STRING Platonov
7588: PPUSH
7589: LD_INT 0
7591: PPUSH
7592: LD_INT 1
7594: PPUSH
7595: LD_INT 1
7597: PPUSH
7598: CALL 8608 0 4
7602: ST_TO_ADDR
// if difficulty = 3 then
7603: LD_OWVAR 67
7607: PUSH
7608: LD_INT 3
7610: EQUAL
7611: IFFALSE 7635
// Burlak := MyCreateCharacter ( Burlak , 0 , class_mechanic , false ) ;
7613: LD_ADDR_EXP 62
7617: PUSH
7618: LD_STRING Burlak
7620: PPUSH
7621: LD_INT 0
7623: PPUSH
7624: LD_INT 3
7626: PPUSH
7627: LD_INT 0
7629: PPUSH
7630: CALL 8608 0 4
7634: ST_TO_ADDR
// Titov := MyCreateCharacter ( Titov , 0 , class_soldier , false ) ;
7635: LD_ADDR_EXP 68
7639: PUSH
7640: LD_STRING Titov
7642: PPUSH
7643: LD_INT 0
7645: PPUSH
7646: LD_INT 1
7648: PPUSH
7649: LD_INT 0
7651: PPUSH
7652: CALL 8608 0 4
7656: ST_TO_ADDR
// Dolgov := MyCreateCharacter ( Dolgov , 0 , class_scientistic , false ) ;
7657: LD_ADDR_EXP 69
7661: PUSH
7662: LD_STRING Dolgov
7664: PPUSH
7665: LD_INT 0
7667: PPUSH
7668: LD_INT 4
7670: PPUSH
7671: LD_INT 0
7673: PPUSH
7674: CALL 8608 0 4
7678: ST_TO_ADDR
// Lipshchin := MyCreateCharacter ( Lipshchin , 0 , class_soldier , false ) ;
7679: LD_ADDR_EXP 70
7683: PUSH
7684: LD_STRING Lipshchin
7686: PPUSH
7687: LD_INT 0
7689: PPUSH
7690: LD_INT 1
7692: PPUSH
7693: LD_INT 0
7695: PPUSH
7696: CALL 8608 0 4
7700: ST_TO_ADDR
// Karamazov := MyCreateCharacter ( Karamazov , 0 , class_engineer , false ) ;
7701: LD_ADDR_EXP 64
7705: PUSH
7706: LD_STRING Karamazov
7708: PPUSH
7709: LD_INT 0
7711: PPUSH
7712: LD_INT 2
7714: PPUSH
7715: LD_INT 0
7717: PPUSH
7718: CALL 8608 0 4
7722: ST_TO_ADDR
// Petrovova := MyCreateCharacter ( Petrovova , 0 , class_soldier , false ) ;
7723: LD_ADDR_EXP 65
7727: PUSH
7728: LD_STRING Petrovova
7730: PPUSH
7731: LD_INT 0
7733: PPUSH
7734: LD_INT 1
7736: PPUSH
7737: LD_INT 0
7739: PPUSH
7740: CALL 8608 0 4
7744: ST_TO_ADDR
// Gleb := MyCreateCharacter ( Gleb , 0 , class_soldier , false ) ;
7745: LD_ADDR_EXP 66
7749: PUSH
7750: LD_STRING Gleb
7752: PPUSH
7753: LD_INT 0
7755: PPUSH
7756: LD_INT 1
7758: PPUSH
7759: LD_INT 0
7761: PPUSH
7762: CALL 8608 0 4
7766: ST_TO_ADDR
// Petrosyan := MyCreateCharacter ( Petrosyan , 0 , class_scientistic , false ) ;
7767: LD_ADDR_EXP 67
7771: PUSH
7772: LD_STRING Petrosyan
7774: PPUSH
7775: LD_INT 0
7777: PPUSH
7778: LD_INT 4
7780: PPUSH
7781: LD_INT 0
7783: PPUSH
7784: CALL 8608 0 4
7788: ST_TO_ADDR
// if difficulty < 3 then
7789: LD_OWVAR 67
7793: PUSH
7794: LD_INT 3
7796: LESS
7797: IFFALSE 7821
// Burlak := MyCreateCharacter ( Burlak , 0 , class_mechanic , false ) ;
7799: LD_ADDR_EXP 62
7803: PUSH
7804: LD_STRING Burlak
7806: PPUSH
7807: LD_INT 0
7809: PPUSH
7810: LD_INT 3
7812: PPUSH
7813: LD_INT 0
7815: PPUSH
7816: CALL 8608 0 4
7820: ST_TO_ADDR
// used := [ Burlak , Lipshchin , Titov , Dolgov , Karamazov , Petrovova , Gleb , Petrosyan ] diff 0 ;
7821: LD_ADDR_EXP 73
7825: PUSH
7826: LD_EXP 62
7830: PUSH
7831: LD_EXP 70
7835: PUSH
7836: LD_EXP 68
7840: PUSH
7841: LD_EXP 69
7845: PUSH
7846: LD_EXP 64
7850: PUSH
7851: LD_EXP 65
7855: PUSH
7856: LD_EXP 66
7860: PUSH
7861: LD_EXP 67
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: PUSH
7876: LD_INT 0
7878: DIFF
7879: ST_TO_ADDR
// other_ru_5_6 := CreateCharacterSet ( other_ru_5_6 ) ;
7880: LD_ADDR_EXP 76
7884: PUSH
7885: LD_STRING other_ru_5_6
7887: PPUSH
7888: CALL_OW 31
7892: ST_TO_ADDR
// used := used ^ other_ru_5_6 ;
7893: LD_ADDR_EXP 73
7897: PUSH
7898: LD_EXP 73
7902: PUSH
7903: LD_EXP 76
7907: ADD
7908: ST_TO_ADDR
// rulive := used ;
7909: LD_ADDR_EXP 9
7913: PUSH
7914: LD_EXP 73
7918: ST_TO_ADDR
// k1 := Rand ( 1 , used ) ;
7919: LD_ADDR_VAR 0 3
7923: PUSH
7924: LD_INT 1
7926: PPUSH
7927: LD_EXP 73
7931: PPUSH
7932: CALL_OW 12
7936: ST_TO_ADDR
// if not UnitFilter ( used , [ [ f_class , class_engineer ] ] ) then
7937: LD_EXP 73
7941: PPUSH
7942: LD_INT 25
7944: PUSH
7945: LD_INT 2
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: PUSH
7952: EMPTY
7953: LIST
7954: PPUSH
7955: CALL_OW 72
7959: NOT
7960: IFFALSE 7980
// SetClass ( used [ k1 ] , class_engineer ) ;
7962: LD_EXP 73
7966: PUSH
7967: LD_VAR 0 3
7971: ARRAY
7972: PPUSH
7973: LD_INT 2
7975: PPUSH
7976: CALL_OW 336
// k2 := Rand ( 1 , used ) ;
7980: LD_ADDR_VAR 0 4
7984: PUSH
7985: LD_INT 1
7987: PPUSH
7988: LD_EXP 73
7992: PPUSH
7993: CALL_OW 12
7997: ST_TO_ADDR
// while k1 = k2 do
7998: LD_VAR 0 3
8002: PUSH
8003: LD_VAR 0 4
8007: EQUAL
8008: IFFALSE 8030
// k2 := Rand ( 1 , used ) ;
8010: LD_ADDR_VAR 0 4
8014: PUSH
8015: LD_INT 1
8017: PPUSH
8018: LD_EXP 73
8022: PPUSH
8023: CALL_OW 12
8027: ST_TO_ADDR
8028: GO 7998
// if difficulty = 1 and not UnitFilter ( used , [ [ f_class , class_scientistic ] ] ) then
8030: LD_OWVAR 67
8034: PUSH
8035: LD_INT 1
8037: EQUAL
8038: PUSH
8039: LD_EXP 73
8043: PPUSH
8044: LD_INT 25
8046: PUSH
8047: LD_INT 4
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: EMPTY
8055: LIST
8056: PPUSH
8057: CALL_OW 72
8061: NOT
8062: AND
8063: IFFALSE 8083
// SetClass ( used [ k2 ] , class_scientistic ) ;
8065: LD_EXP 73
8069: PUSH
8070: LD_VAR 0 4
8074: ARRAY
8075: PPUSH
8076: LD_INT 4
8078: PPUSH
8079: CALL_OW 336
// uc_side := you2 ;
8083: LD_ADDR_OWVAR 20
8087: PUSH
8088: LD_EXP 2
8092: ST_TO_ADDR
// Vsevolod := MyCreateCharacter ( Vsevolod , 0 , class_soldier , true ) ;
8093: LD_ADDR_EXP 71
8097: PUSH
8098: LD_STRING Vsevolod
8100: PPUSH
8101: LD_INT 0
8103: PPUSH
8104: LD_INT 1
8106: PPUSH
8107: LD_INT 1
8109: PPUSH
8110: CALL 8608 0 4
8114: ST_TO_ADDR
// Vsevolod2 := MyCreateCharacter ( Vsevolod , 0 , class_soldier , true ) ;
8115: LD_ADDR_EXP 72
8119: PUSH
8120: LD_STRING Vsevolod
8122: PPUSH
8123: LD_INT 0
8125: PPUSH
8126: LD_INT 1
8128: PPUSH
8129: LD_INT 1
8131: PPUSH
8132: CALL 8608 0 4
8136: ST_TO_ADDR
// for i := 1 to 3 do
8137: LD_ADDR_VAR 0 2
8141: PUSH
8142: DOUBLE
8143: LD_INT 1
8145: DEC
8146: ST_TO_ADDR
8147: LD_INT 3
8149: PUSH
8150: FOR_TO
8151: IFFALSE 8184
// begin PrepareSoldier ( sex_male , 3 ) ;
8153: LD_INT 1
8155: PPUSH
8156: LD_INT 3
8158: PPUSH
8159: CALL_OW 381
// vsevolod_uderna_group := vsevolod_uderna_group ^ [ CreateHuman ] ;
8163: LD_ADDR_EXP 12
8167: PUSH
8168: LD_EXP 12
8172: PUSH
8173: CALL_OW 44
8177: PUSH
8178: EMPTY
8179: LIST
8180: ADD
8181: ST_TO_ADDR
// end ;
8182: GO 8150
8184: POP
8185: POP
// SetClass ( vsevolod_uderna_group [ 1 ] , class_engineer ) ;
8186: LD_EXP 12
8190: PUSH
8191: LD_INT 1
8193: ARRAY
8194: PPUSH
8195: LD_INT 2
8197: PPUSH
8198: CALL_OW 336
// vsevolod_uderna_group := vsevolod_uderna_group ;
8202: LD_ADDR_EXP 12
8206: PUSH
8207: LD_EXP 12
8211: ST_TO_ADDR
// end ;
8212: LD_VAR 0 1
8216: RET
// export function place_in_ru_cars ; var car , i ; begin
8217: LD_INT 0
8219: PPUSH
8220: PPUSH
8221: PPUSH
// InitUc ;
8222: CALL_OW 18
// InitVc ;
8226: CALL_OW 20
// vc_control := control_manual ;
8230: LD_ADDR_OWVAR 38
8234: PUSH
8235: LD_INT 1
8237: ST_TO_ADDR
// vc_engine := engine_combustion ;
8238: LD_ADDR_OWVAR 39
8242: PUSH
8243: LD_INT 1
8245: ST_TO_ADDR
// uc_side := you ;
8246: LD_ADDR_OWVAR 20
8250: PUSH
8251: LD_EXP 1
8255: ST_TO_ADDR
// ru_cars := [ ] ;
8256: LD_ADDR_EXP 74
8260: PUSH
8261: EMPTY
8262: ST_TO_ADDR
// if ( ( cars + 0 ) < ( used + 0 ) ) or ( ( used + 0 ) < 6 ) then
8263: LD_EXP 75
8267: PUSH
8268: LD_INT 0
8270: PLUS
8271: PUSH
8272: LD_EXP 73
8276: PUSH
8277: LD_INT 0
8279: PLUS
8280: LESS
8281: PUSH
8282: LD_EXP 73
8286: PUSH
8287: LD_INT 0
8289: PLUS
8290: PUSH
8291: LD_INT 6
8293: LESS
8294: OR
8295: IFFALSE 8304
// begin Msg ( spatny save ) ;
8297: LD_STRING spatny save
8299: PPUSH
8300: CALL_OW 100
// end ; for i := 1 to used do
8304: LD_ADDR_VAR 0 3
8308: PUSH
8309: DOUBLE
8310: LD_INT 1
8312: DEC
8313: ST_TO_ADDR
8314: LD_EXP 73
8318: PUSH
8319: FOR_TO
8320: IFFALSE 8560
// begin uc_nation := cars [ i ] [ 3 ] ;
8322: LD_ADDR_OWVAR 21
8326: PUSH
8327: LD_EXP 75
8331: PUSH
8332: LD_VAR 0 3
8336: ARRAY
8337: PUSH
8338: LD_INT 3
8340: ARRAY
8341: ST_TO_ADDR
// vc_chassis := cars [ i ] [ 1 ] ;
8342: LD_ADDR_OWVAR 37
8346: PUSH
8347: LD_EXP 75
8351: PUSH
8352: LD_VAR 0 3
8356: ARRAY
8357: PUSH
8358: LD_INT 1
8360: ARRAY
8361: ST_TO_ADDR
// vc_weapon := cars [ i ] [ 2 ] ;
8362: LD_ADDR_OWVAR 40
8366: PUSH
8367: LD_EXP 75
8371: PUSH
8372: LD_VAR 0 3
8376: ARRAY
8377: PUSH
8378: LD_INT 2
8380: ARRAY
8381: ST_TO_ADDR
// uc_direction := Rand ( 3 , 4 ) ;
8382: LD_ADDR_OWVAR 24
8386: PUSH
8387: LD_INT 3
8389: PPUSH
8390: LD_INT 4
8392: PPUSH
8393: CALL_OW 12
8397: ST_TO_ADDR
// vc_fuel_battery := Rand ( 3 , 6 ) ;
8398: LD_ADDR_OWVAR 41
8402: PUSH
8403: LD_INT 3
8405: PPUSH
8406: LD_INT 6
8408: PPUSH
8409: CALL_OW 12
8413: ST_TO_ADDR
// uc_direction := 5 ;
8414: LD_ADDR_OWVAR 24
8418: PUSH
8419: LD_INT 5
8421: ST_TO_ADDR
// car := CreateVehicle ;
8422: LD_ADDR_VAR 0 2
8426: PUSH
8427: CALL_OW 45
8431: ST_TO_ADDR
// if ( cars [ i ] [ 2 ] in [ ar_cargo_bay , ru_cargo_bay , us_cargo_bay ] ) then
8432: LD_EXP 75
8436: PUSH
8437: LD_VAR 0 3
8441: ARRAY
8442: PUSH
8443: LD_INT 2
8445: ARRAY
8446: PUSH
8447: LD_INT 32
8449: PUSH
8450: LD_INT 51
8452: PUSH
8453: LD_INT 12
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: LIST
8460: IN
8461: IFFALSE 8522
// if ( cars [ i ] [ 4 ] <> 0 ) then
8463: LD_EXP 75
8467: PUSH
8468: LD_VAR 0 3
8472: ARRAY
8473: PUSH
8474: LD_INT 4
8476: ARRAY
8477: PUSH
8478: LD_INT 0
8480: NONEQUAL
8481: IFFALSE 8522
// SetCargo ( car , cars [ i ] [ 4 ] , cars [ i ] [ 5 ] ) ;
8483: LD_VAR 0 2
8487: PPUSH
8488: LD_EXP 75
8492: PUSH
8493: LD_VAR 0 3
8497: ARRAY
8498: PUSH
8499: LD_INT 4
8501: ARRAY
8502: PPUSH
8503: LD_EXP 75
8507: PUSH
8508: LD_VAR 0 3
8512: ARRAY
8513: PUSH
8514: LD_INT 5
8516: ARRAY
8517: PPUSH
8518: CALL_OW 290
// ru_cars := ru_cars ^ car ;
8522: LD_ADDR_EXP 74
8526: PUSH
8527: LD_EXP 74
8531: PUSH
8532: LD_VAR 0 2
8536: ADD
8537: ST_TO_ADDR
// PlaceHumanInUnit ( used [ i ] , car ) ;
8538: LD_EXP 73
8542: PUSH
8543: LD_VAR 0 3
8547: ARRAY
8548: PPUSH
8549: LD_VAR 0 2
8553: PPUSH
8554: CALL_OW 52
// end ;
8558: GO 8319
8560: POP
8561: POP
// end ;
8562: LD_VAR 0 1
8566: RET
// export function place_ru_cars ; var i ; begin
8567: LD_INT 0
8569: PPUSH
8570: PPUSH
// for i in ru_cars do
8571: LD_ADDR_VAR 0 2
8575: PUSH
8576: LD_EXP 74
8580: PUSH
8581: FOR_IN
8582: IFFALSE 8601
// PlaceUnitArea ( i , ru_place , false ) ;
8584: LD_VAR 0 2
8588: PPUSH
8589: LD_INT 5
8591: PPUSH
8592: LD_INT 0
8594: PPUSH
8595: CALL_OW 49
8599: GO 8581
8601: POP
8602: POP
// end ;
8603: LD_VAR 0 1
8607: RET
// function MyCreateCharacter ( name , unclass , unclass_gen , new ) ; begin
8608: LD_INT 0
8610: PPUSH
// if new or TestCharacters ( name ) then
8611: LD_VAR 0 4
8615: PUSH
8616: LD_VAR 0 1
8620: PPUSH
8621: CALL_OW 28
8625: OR
8626: IFFALSE 8709
// begin if new then
8628: LD_VAR 0 4
8632: IFFALSE 8651
// result := NewCharacter ( name ) else
8634: LD_ADDR_VAR 0 5
8638: PUSH
8639: LD_VAR 0 1
8643: PPUSH
8644: CALL_OW 25
8648: ST_TO_ADDR
8649: GO 8687
// begin if CheckCharacterSet ( name ) then
8651: LD_VAR 0 1
8655: PPUSH
8656: CALL_OW 29
8660: IFFALSE 8679
// result := CreateCharacter ( name ) else
8662: LD_ADDR_VAR 0 5
8666: PUSH
8667: LD_VAR 0 1
8671: PPUSH
8672: CALL_OW 34
8676: ST_TO_ADDR
8677: GO 8687
// result := 0 ;
8679: LD_ADDR_VAR 0 5
8683: PUSH
8684: LD_INT 0
8686: ST_TO_ADDR
// end ; if unclass then
8687: LD_VAR 0 2
8691: IFFALSE 8707
// SetClass ( result , unclass ) ;
8693: LD_VAR 0 5
8697: PPUSH
8698: LD_VAR 0 2
8702: PPUSH
8703: CALL_OW 336
// end else
8707: GO 8785
// begin Msg ( Chybi  & name & ! ) ;
8709: LD_STRING Chybi 
8711: PUSH
8712: LD_VAR 0 1
8716: STR
8717: PUSH
8718: LD_STRING !
8720: STR
8721: PPUSH
8722: CALL_OW 100
// hc_name := name ;
8726: LD_ADDR_OWVAR 26
8730: PUSH
8731: LD_VAR 0 1
8735: ST_TO_ADDR
// PrepareHuman ( sex_male , 0 , 3 ) ;
8736: LD_INT 1
8738: PPUSH
8739: LD_INT 0
8741: PPUSH
8742: LD_INT 3
8744: PPUSH
8745: CALL_OW 380
// if unclass_gen then
8749: LD_VAR 0 3
8753: IFFALSE 8767
// hc_class := unclass_gen else
8755: LD_ADDR_OWVAR 28
8759: PUSH
8760: LD_VAR 0 3
8764: ST_TO_ADDR
8765: GO 8775
// hc_class := class_soldier ;
8767: LD_ADDR_OWVAR 28
8771: PUSH
8772: LD_INT 1
8774: ST_TO_ADDR
// result := CreateHuman ;
8775: LD_ADDR_VAR 0 5
8779: PUSH
8780: CALL_OW 44
8784: ST_TO_ADDR
// end ; end ;
8785: LD_VAR 0 5
8789: RET
// export convoy_06 ; export function Save ; var i , zustali , tmp_conv ; begin
8790: LD_INT 0
8792: PPUSH
8793: PPUSH
8794: PPUSH
8795: PPUSH
// DeleteVariable ( cars_ru_6 ) ;
8796: LD_STRING cars_ru_6
8798: PPUSH
8799: CALL_OW 41
// DeleteVariable ( other_ru_5_6 ) ;
8803: LD_STRING other_ru_5_6
8805: PPUSH
8806: CALL_OW 41
// SaveCharacters ( Burlak , Burlak ) ;
8810: LD_EXP 62
8814: PPUSH
8815: LD_STRING Burlak
8817: PPUSH
8818: CALL_OW 38
// if Titov then
8822: LD_EXP 68
8826: IFFALSE 8886
// if IsDead ( titov ) then
8828: LD_EXP 68
8832: PPUSH
8833: CALL_OW 301
8837: IFFALSE 8851
// SaveVariable ( 0 , TitovLoc ) else
8839: LD_INT 0
8841: PPUSH
8842: LD_STRING TitovLoc
8844: PPUSH
8845: CALL_OW 39
8849: GO 8886
// if titov in sli_pryc then
8851: LD_EXP 68
8855: PUSH
8856: LD_EXP 78
8860: IN
8861: IFFALSE 8876
// SaveVariable ( - 7 , TitovLoc ) else
8863: LD_INT 7
8865: NEG
8866: PPUSH
8867: LD_STRING TitovLoc
8869: PPUSH
8870: CALL_OW 39
8874: GO 8886
// SaveVariable ( 7 , TitovLoc ) ;
8876: LD_INT 7
8878: PPUSH
8879: LD_STRING TitovLoc
8881: PPUSH
8882: CALL_OW 39
// SaveCharacters ( Titov , Titov ) ;
8886: LD_EXP 68
8890: PPUSH
8891: LD_STRING Titov
8893: PPUSH
8894: CALL_OW 38
// if Dolgov then
8898: LD_EXP 69
8902: IFFALSE 8962
// if IsDead ( Dolgov ) then
8904: LD_EXP 69
8908: PPUSH
8909: CALL_OW 301
8913: IFFALSE 8927
// SaveVariable ( 0 , DolgovLoc ) else
8915: LD_INT 0
8917: PPUSH
8918: LD_STRING DolgovLoc
8920: PPUSH
8921: CALL_OW 39
8925: GO 8962
// if Dolgov in sli_pryc then
8927: LD_EXP 69
8931: PUSH
8932: LD_EXP 78
8936: IN
8937: IFFALSE 8952
// SaveVariable ( - 7 , DolgovLoc ) else
8939: LD_INT 7
8941: NEG
8942: PPUSH
8943: LD_STRING DolgovLoc
8945: PPUSH
8946: CALL_OW 39
8950: GO 8962
// SaveVariable ( 7 , DolgovLoc ) ;
8952: LD_INT 7
8954: PPUSH
8955: LD_STRING DolgovLoc
8957: PPUSH
8958: CALL_OW 39
// if Dolgov then
8962: LD_EXP 69
8966: IFFALSE 8980
// SaveCharacters ( Dolgov , Dolgov ) ;
8968: LD_EXP 69
8972: PPUSH
8973: LD_STRING Dolgov
8975: PPUSH
8976: CALL_OW 38
// if Lipshchin then
8980: LD_EXP 70
8984: IFFALSE 9044
// if IsDead ( Lipshchin ) then
8986: LD_EXP 70
8990: PPUSH
8991: CALL_OW 301
8995: IFFALSE 9009
// SaveVariable ( 0 , LipshchinLoc ) else
8997: LD_INT 0
8999: PPUSH
9000: LD_STRING LipshchinLoc
9002: PPUSH
9003: CALL_OW 39
9007: GO 9044
// if Lipshchin in sli_pryc then
9009: LD_EXP 70
9013: PUSH
9014: LD_EXP 78
9018: IN
9019: IFFALSE 9034
// SaveVariable ( - 7 , LipshchinLoc ) else
9021: LD_INT 7
9023: NEG
9024: PPUSH
9025: LD_STRING LipshchinLoc
9027: PPUSH
9028: CALL_OW 39
9032: GO 9044
// SaveVariable ( 7 , LipshchinLoc ) ;
9034: LD_INT 7
9036: PPUSH
9037: LD_STRING LipshchinLoc
9039: PPUSH
9040: CALL_OW 39
// if Lipshchin then
9044: LD_EXP 70
9048: IFFALSE 9062
// SaveCharacters ( Lipshchin , Lipshchin ) ;
9050: LD_EXP 70
9054: PPUSH
9055: LD_STRING Lipshchin
9057: PPUSH
9058: CALL_OW 38
// if Karamazov then
9062: LD_EXP 64
9066: IFFALSE 9126
// if IsDead ( Karamazov ) then
9068: LD_EXP 64
9072: PPUSH
9073: CALL_OW 301
9077: IFFALSE 9091
// SaveVariable ( 0 , KaramazovLoc ) else
9079: LD_INT 0
9081: PPUSH
9082: LD_STRING KaramazovLoc
9084: PPUSH
9085: CALL_OW 39
9089: GO 9126
// if Karamazov in sli_pryc then
9091: LD_EXP 64
9095: PUSH
9096: LD_EXP 78
9100: IN
9101: IFFALSE 9116
// SaveVariable ( - 7 , KaramazovLoc ) else
9103: LD_INT 7
9105: NEG
9106: PPUSH
9107: LD_STRING KaramazovLoc
9109: PPUSH
9110: CALL_OW 39
9114: GO 9126
// SaveVariable ( 7 , KaramazovLoc ) ;
9116: LD_INT 7
9118: PPUSH
9119: LD_STRING KaramazovLoc
9121: PPUSH
9122: CALL_OW 39
// if Karamazov then
9126: LD_EXP 64
9130: IFFALSE 9144
// SaveCharacters ( Karamazov , Karamazov ) ;
9132: LD_EXP 64
9136: PPUSH
9137: LD_STRING Karamazov
9139: PPUSH
9140: CALL_OW 38
// if Petrovova then
9144: LD_EXP 65
9148: IFFALSE 9208
// if IsDead ( Petrovova ) then
9150: LD_EXP 65
9154: PPUSH
9155: CALL_OW 301
9159: IFFALSE 9173
// SaveVariable ( 0 , PetrovovaLoc ) else
9161: LD_INT 0
9163: PPUSH
9164: LD_STRING PetrovovaLoc
9166: PPUSH
9167: CALL_OW 39
9171: GO 9208
// if Petrovova in sli_pryc then
9173: LD_EXP 65
9177: PUSH
9178: LD_EXP 78
9182: IN
9183: IFFALSE 9198
// SaveVariable ( - 7 , PetrovovaLoc ) else
9185: LD_INT 7
9187: NEG
9188: PPUSH
9189: LD_STRING PetrovovaLoc
9191: PPUSH
9192: CALL_OW 39
9196: GO 9208
// SaveVariable ( 7 , PetrovovaLoc ) ;
9198: LD_INT 7
9200: PPUSH
9201: LD_STRING PetrovovaLoc
9203: PPUSH
9204: CALL_OW 39
// if Petrovova then
9208: LD_EXP 65
9212: IFFALSE 9226
// SaveCharacters ( Petrovova , Petrovova ) ;
9214: LD_EXP 65
9218: PPUSH
9219: LD_STRING Petrovova
9221: PPUSH
9222: CALL_OW 38
// if Gleb then
9226: LD_EXP 66
9230: IFFALSE 9290
// if IsDead ( Gleb ) then
9232: LD_EXP 66
9236: PPUSH
9237: CALL_OW 301
9241: IFFALSE 9255
// SaveVariable ( 0 , GlebLoc ) else
9243: LD_INT 0
9245: PPUSH
9246: LD_STRING GlebLoc
9248: PPUSH
9249: CALL_OW 39
9253: GO 9290
// if Gleb in sli_pryc then
9255: LD_EXP 66
9259: PUSH
9260: LD_EXP 78
9264: IN
9265: IFFALSE 9280
// SaveVariable ( - 7 , GlebLoc ) else
9267: LD_INT 7
9269: NEG
9270: PPUSH
9271: LD_STRING GlebLoc
9273: PPUSH
9274: CALL_OW 39
9278: GO 9290
// SaveVariable ( 7 , GlebLoc ) ;
9280: LD_INT 7
9282: PPUSH
9283: LD_STRING GlebLoc
9285: PPUSH
9286: CALL_OW 39
// if Gleb then
9290: LD_EXP 66
9294: IFFALSE 9308
// SaveCharacters ( Gleb , Gleb ) ;
9296: LD_EXP 66
9300: PPUSH
9301: LD_STRING Gleb
9303: PPUSH
9304: CALL_OW 38
// if Petrosyan then
9308: LD_EXP 67
9312: IFFALSE 9372
// if IsDead ( Petrosyan ) then
9314: LD_EXP 67
9318: PPUSH
9319: CALL_OW 301
9323: IFFALSE 9337
// SaveVariable ( 0 , PetrosyanLoc ) else
9325: LD_INT 0
9327: PPUSH
9328: LD_STRING PetrosyanLoc
9330: PPUSH
9331: CALL_OW 39
9335: GO 9372
// if Petrosyan in sli_pryc then
9337: LD_EXP 67
9341: PUSH
9342: LD_EXP 78
9346: IN
9347: IFFALSE 9362
// SaveVariable ( - 7 , PetrosyanLoc ) else
9349: LD_INT 7
9351: NEG
9352: PPUSH
9353: LD_STRING PetrosyanLoc
9355: PPUSH
9356: CALL_OW 39
9360: GO 9372
// SaveVariable ( 7 , PetrosyanLoc ) ;
9362: LD_INT 7
9364: PPUSH
9365: LD_STRING PetrosyanLoc
9367: PPUSH
9368: CALL_OW 39
// if Petrosyan then
9372: LD_EXP 67
9376: IFFALSE 9390
// SaveCharacters ( Petrosyan , Petrosyan ) ;
9378: LD_EXP 67
9382: PPUSH
9383: LD_STRING Petrosyan
9385: PPUSH
9386: CALL_OW 38
// SaveCharacters ( Vsevolod , Vsevolod ) ;
9390: LD_EXP 71
9394: PPUSH
9395: LD_STRING Vsevolod
9397: PPUSH
9398: CALL_OW 38
// SaveVariable ( not IsDead ( vsevolod ) , VsevSaved ) ;
9402: LD_EXP 71
9406: PPUSH
9407: CALL_OW 301
9411: NOT
9412: PPUSH
9413: LD_STRING VsevSaved
9415: PPUSH
9416: CALL_OW 39
// zustali := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , you ] , [ f_nation , nation_russian ] ] ) ;
9420: LD_ADDR_VAR 0 3
9424: PUSH
9425: LD_INT 21
9427: PUSH
9428: LD_INT 1
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: LD_INT 22
9437: PUSH
9438: LD_EXP 1
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: PUSH
9447: LD_INT 23
9449: PUSH
9450: LD_INT 3
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: LIST
9461: PPUSH
9462: CALL_OW 69
9466: ST_TO_ADDR
// SaveCharacters ( zustali diff [ Burlak , Titov , Dolgov , Lipshchin , Karamazov , Petrovova , Gleb , Petrosyan , Vsevolod ] , survivors2 ) ;
9467: LD_VAR 0 3
9471: PUSH
9472: LD_EXP 62
9476: PUSH
9477: LD_EXP 68
9481: PUSH
9482: LD_EXP 69
9486: PUSH
9487: LD_EXP 70
9491: PUSH
9492: LD_EXP 64
9496: PUSH
9497: LD_EXP 65
9501: PUSH
9502: LD_EXP 66
9506: PUSH
9507: LD_EXP 67
9511: PUSH
9512: LD_EXP 71
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: DIFF
9528: PPUSH
9529: LD_STRING survivors2
9531: PPUSH
9532: CALL_OW 38
// SaveCharacters ( sli_pryc diff [ Burlak , Titov , Dolgov , Lipshchin , Karamazov , Petrovova , Gleb , Petrosyan , Vsevolod ] , WithVsevolod ) ;
9536: LD_EXP 78
9540: PUSH
9541: LD_EXP 62
9545: PUSH
9546: LD_EXP 68
9550: PUSH
9551: LD_EXP 69
9555: PUSH
9556: LD_EXP 70
9560: PUSH
9561: LD_EXP 64
9565: PUSH
9566: LD_EXP 65
9570: PUSH
9571: LD_EXP 66
9575: PUSH
9576: LD_EXP 67
9580: PUSH
9581: LD_EXP 71
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: DIFF
9597: PPUSH
9598: LD_STRING WithVsevolod
9600: PPUSH
9601: CALL_OW 38
// convoy_06 := [ ] ;
9605: LD_ADDR_EXP 80
9609: PUSH
9610: EMPTY
9611: ST_TO_ADDR
// tmp_conv := FilterUnitsInArea ( ru_exit , [ [ f_occupied ] , [ f_type , unit_vehicle ] , [ f_side , you ] ] ) ^ FilterUnitsInArea ( ru_exit , [ [ f_not , [ f_occupied ] ] , [ f_type , unit_vehicle ] , [ f_side , you ] ] ) ;
9612: LD_ADDR_VAR 0 4
9616: PUSH
9617: LD_INT 21
9619: PPUSH
9620: LD_INT 59
9622: PUSH
9623: EMPTY
9624: LIST
9625: PUSH
9626: LD_INT 21
9628: PUSH
9629: LD_INT 2
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: PUSH
9636: LD_INT 22
9638: PUSH
9639: LD_EXP 1
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: LIST
9652: PPUSH
9653: CALL_OW 70
9657: PUSH
9658: LD_INT 21
9660: PPUSH
9661: LD_INT 3
9663: PUSH
9664: LD_INT 59
9666: PUSH
9667: EMPTY
9668: LIST
9669: PUSH
9670: EMPTY
9671: LIST
9672: LIST
9673: PUSH
9674: LD_INT 21
9676: PUSH
9677: LD_INT 2
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PUSH
9684: LD_INT 22
9686: PUSH
9687: LD_EXP 1
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: LIST
9700: PPUSH
9701: CALL_OW 70
9705: ADD
9706: ST_TO_ADDR
// for i in tmp_conv do
9707: LD_ADDR_VAR 0 2
9711: PUSH
9712: LD_VAR 0 4
9716: PUSH
9717: FOR_IN
9718: IFFALSE 9857
// begin convoy_06 := convoy_06 ^ [ [ GetNation ( i ) , GetWeapon ( i ) , GetControl ( i ) , GetEngine ( i ) , GetChassis ( i ) , GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) , GetCargo ( i , mat_siberit ) ] ] ;
9720: LD_ADDR_EXP 80
9724: PUSH
9725: LD_EXP 80
9729: PUSH
9730: LD_VAR 0 2
9734: PPUSH
9735: CALL_OW 248
9739: PUSH
9740: LD_VAR 0 2
9744: PPUSH
9745: CALL_OW 264
9749: PUSH
9750: LD_VAR 0 2
9754: PPUSH
9755: CALL_OW 263
9759: PUSH
9760: LD_VAR 0 2
9764: PPUSH
9765: CALL_OW 262
9769: PUSH
9770: LD_VAR 0 2
9774: PPUSH
9775: CALL_OW 265
9779: PUSH
9780: LD_VAR 0 2
9784: PPUSH
9785: LD_INT 1
9787: PPUSH
9788: CALL_OW 289
9792: PUSH
9793: LD_VAR 0 2
9797: PPUSH
9798: LD_INT 2
9800: PPUSH
9801: CALL_OW 289
9805: PUSH
9806: LD_VAR 0 2
9810: PPUSH
9811: LD_INT 3
9813: PPUSH
9814: CALL_OW 289
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: PUSH
9829: EMPTY
9830: LIST
9831: ADD
9832: ST_TO_ADDR
// if ( convoy_06 + 0 ) = ( zustali + 0 ) then
9833: LD_EXP 80
9837: PUSH
9838: LD_INT 0
9840: PLUS
9841: PUSH
9842: LD_VAR 0 3
9846: PUSH
9847: LD_INT 0
9849: PLUS
9850: EQUAL
9851: IFFALSE 9855
// break ;
9853: GO 9857
// end ;
9855: GO 9717
9857: POP
9858: POP
// SaveVariable ( convoy_06 , Convoy_06 ) ;
9859: LD_EXP 80
9863: PPUSH
9864: LD_STRING Convoy_06
9866: PPUSH
9867: CALL_OW 39
// end ;
9871: LD_VAR 0 1
9875: RET
// export accar1 , accar2 , acman1 , acman2 ; export function nakladaky ; begin
9876: LD_INT 0
9878: PPUSH
// InitUc ;
9879: CALL_OW 18
// InitHc ;
9883: CALL_OW 19
// InitVc ;
9887: CALL_OW 20
// uc_side := ai ;
9891: LD_ADDR_OWVAR 20
9895: PUSH
9896: LD_EXP 6
9900: ST_TO_ADDR
// uc_nation := nation_american ;
9901: LD_ADDR_OWVAR 21
9905: PUSH
9906: LD_INT 1
9908: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
9909: LD_ADDR_OWVAR 37
9913: PUSH
9914: LD_INT 3
9916: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
9917: LD_ADDR_OWVAR 40
9921: PUSH
9922: LD_INT 12
9924: ST_TO_ADDR
// vc_control := control_manual ;
9925: LD_ADDR_OWVAR 38
9929: PUSH
9930: LD_INT 1
9932: ST_TO_ADDR
// vc_engine := engine_solar ;
9933: LD_ADDR_OWVAR 39
9937: PUSH
9938: LD_INT 2
9940: ST_TO_ADDR
// uc_direction := 3 ;
9941: LD_ADDR_OWVAR 24
9945: PUSH
9946: LD_INT 3
9948: ST_TO_ADDR
// vc_fuel_battery := 80 ;
9949: LD_ADDR_OWVAR 41
9953: PUSH
9954: LD_INT 80
9956: ST_TO_ADDR
// accar1 := CreateVehicle ;
9957: LD_ADDR_EXP 81
9961: PUSH
9962: CALL_OW 45
9966: ST_TO_ADDR
// accar2 := CreateVehicle ;
9967: LD_ADDR_EXP 82
9971: PUSH
9972: CALL_OW 45
9976: ST_TO_ADDR
// PrepareSoldier ( sex_male , 2 ) ;
9977: LD_INT 1
9979: PPUSH
9980: LD_INT 2
9982: PPUSH
9983: CALL_OW 381
// acman1 := CreateHuman ;
9987: LD_ADDR_EXP 83
9991: PUSH
9992: CALL_OW 44
9996: ST_TO_ADDR
// acman2 := CreateHuman ;
9997: LD_ADDR_EXP 84
10001: PUSH
10002: CALL_OW 44
10006: ST_TO_ADDR
// PlaceHumanInUnit ( acman1 , accar1 ) ;
10007: LD_EXP 83
10011: PPUSH
10012: LD_EXP 81
10016: PPUSH
10017: CALL_OW 52
// PlaceHumanInUnit ( acman2 , accar2 ) ;
10021: LD_EXP 84
10025: PPUSH
10026: LD_EXP 82
10030: PPUSH
10031: CALL_OW 52
// SetCargo ( [ accar1 , accar2 ] , mat_cans , 100 ) ;
10035: LD_EXP 81
10039: PUSH
10040: LD_EXP 82
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PPUSH
10049: LD_INT 1
10051: PPUSH
10052: LD_INT 100
10054: PPUSH
10055: CALL_OW 290
// PlaceUnitArea ( accar1 , vsevolod_in , false ) ;
10059: LD_EXP 81
10063: PPUSH
10064: LD_INT 16
10066: PPUSH
10067: LD_INT 0
10069: PPUSH
10070: CALL_OW 49
// PlaceUnitArea ( accar2 , vsevolod_in , false ) ;
10074: LD_EXP 82
10078: PPUSH
10079: LD_INT 16
10081: PPUSH
10082: LD_INT 0
10084: PPUSH
10085: CALL_OW 49
// end ;
10089: LD_VAR 0 1
10093: RET
// export rccar1 , rccar2 , rccar3 , rcman1 , rcman2 , rcman3 ; export function convoy ; begin
10094: LD_INT 0
10096: PPUSH
// InitUc ;
10097: CALL_OW 18
// InitHc ;
10101: CALL_OW 19
// InitVc ;
10105: CALL_OW 20
// uc_side := you ;
10109: LD_ADDR_OWVAR 20
10113: PUSH
10114: LD_EXP 1
10118: ST_TO_ADDR
// uc_nation := nation_russian ;
10119: LD_ADDR_OWVAR 21
10123: PUSH
10124: LD_INT 3
10126: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10127: LD_ADDR_OWVAR 37
10131: PUSH
10132: LD_INT 22
10134: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
10135: LD_ADDR_OWVAR 40
10139: PUSH
10140: LD_INT 51
10142: ST_TO_ADDR
// vc_control := control_manual ;
10143: LD_ADDR_OWVAR 38
10147: PUSH
10148: LD_INT 1
10150: ST_TO_ADDR
// vc_engine := engine_combustion ;
10151: LD_ADDR_OWVAR 39
10155: PUSH
10156: LD_INT 1
10158: ST_TO_ADDR
// uc_direction := 3 ;
10159: LD_ADDR_OWVAR 24
10163: PUSH
10164: LD_INT 3
10166: ST_TO_ADDR
// vc_fuel_battery := 60 ;
10167: LD_ADDR_OWVAR 41
10171: PUSH
10172: LD_INT 60
10174: ST_TO_ADDR
// rccar1 := CreateVehicle ;
10175: LD_ADDR_EXP 85
10179: PUSH
10180: CALL_OW 45
10184: ST_TO_ADDR
// rccar2 := CreateVehicle ;
10185: LD_ADDR_EXP 86
10189: PUSH
10190: CALL_OW 45
10194: ST_TO_ADDR
// rccar2 := CreateVehicle ;
10195: LD_ADDR_EXP 86
10199: PUSH
10200: CALL_OW 45
10204: ST_TO_ADDR
// PrepareSoldier ( sex_male , 3 ) ;
10205: LD_INT 1
10207: PPUSH
10208: LD_INT 3
10210: PPUSH
10211: CALL_OW 381
// rcman1 := CreateHuman ;
10215: LD_ADDR_EXP 88
10219: PUSH
10220: CALL_OW 44
10224: ST_TO_ADDR
// rcman2 := CreateHuman ;
10225: LD_ADDR_EXP 89
10229: PUSH
10230: CALL_OW 44
10234: ST_TO_ADDR
// rcman2 := CreateHuman ;
10235: LD_ADDR_EXP 89
10239: PUSH
10240: CALL_OW 44
10244: ST_TO_ADDR
// PlaceHumanInUnit ( rcman1 , rccar1 ) ;
10245: LD_EXP 88
10249: PPUSH
10250: LD_EXP 85
10254: PPUSH
10255: CALL_OW 52
// PlaceHumanInUnit ( rcman2 , rccar2 ) ;
10259: LD_EXP 89
10263: PPUSH
10264: LD_EXP 86
10268: PPUSH
10269: CALL_OW 52
// PlaceHumanInUnit ( rcman3 , rccar3 ) ;
10273: LD_EXP 90
10277: PPUSH
10278: LD_EXP 87
10282: PPUSH
10283: CALL_OW 52
// SetCargo ( [ rccar1 , rccar2 , rccar3 ] , mat_cans , 90 ) ;
10287: LD_EXP 85
10291: PUSH
10292: LD_EXP 86
10296: PUSH
10297: LD_EXP 87
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: LIST
10306: PPUSH
10307: LD_INT 1
10309: PPUSH
10310: LD_INT 90
10312: PPUSH
10313: CALL_OW 290
// PlaceUnitArea ( rccar1 , exit_a , false ) ;
10317: LD_EXP 85
10321: PPUSH
10322: LD_INT 20
10324: PPUSH
10325: LD_INT 0
10327: PPUSH
10328: CALL_OW 49
// PlaceUnitArea ( rccar2 , exit_a , false ) ;
10332: LD_EXP 86
10336: PPUSH
10337: LD_INT 20
10339: PPUSH
10340: LD_INT 0
10342: PPUSH
10343: CALL_OW 49
// PlaceUnitArea ( rccar3 , exit_a , false ) ;
10347: LD_EXP 87
10351: PPUSH
10352: LD_INT 20
10354: PPUSH
10355: LD_INT 0
10357: PPUSH
10358: CALL_OW 49
// end ; end_of_file
10362: LD_VAR 0 1
10366: RET
// export function get_x_best ( lidi , num , skill , mclass , idle ) ; var i , skills ; begin
10367: LD_INT 0
10369: PPUSH
10370: PPUSH
10371: PPUSH
// if mclass then
10372: LD_VAR 0 4
10376: IFFALSE 10408
// lidi := UnitFilter ( lidi , [ [ f_class , mclass ] ] ) ;
10378: LD_ADDR_VAR 0 1
10382: PUSH
10383: LD_VAR 0 1
10387: PPUSH
10388: LD_INT 25
10390: PUSH
10391: LD_VAR 0 4
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: EMPTY
10401: LIST
10402: PPUSH
10403: CALL_OW 72
10407: ST_TO_ADDR
// skills := [ ] ;
10408: LD_ADDR_VAR 0 8
10412: PUSH
10413: EMPTY
10414: ST_TO_ADDR
// for i in lidi do
10415: LD_ADDR_VAR 0 7
10419: PUSH
10420: LD_VAR 0 1
10424: PUSH
10425: FOR_IN
10426: IFFALSE 10459
// skills := skills ^ [ GetSkill ( i , skill ) ] ;
10428: LD_ADDR_VAR 0 8
10432: PUSH
10433: LD_VAR 0 8
10437: PUSH
10438: LD_VAR 0 7
10442: PPUSH
10443: LD_VAR 0 3
10447: PPUSH
10448: CALL_OW 259
10452: PUSH
10453: EMPTY
10454: LIST
10455: ADD
10456: ST_TO_ADDR
10457: GO 10425
10459: POP
10460: POP
// lidi := SortListByListDesc ( lidi , skills ) ;
10461: LD_ADDR_VAR 0 1
10465: PUSH
10466: LD_VAR 0 1
10470: PPUSH
10471: LD_VAR 0 8
10475: PPUSH
10476: CALL_OW 77
10480: ST_TO_ADDR
// if num > lidi then
10481: LD_VAR 0 2
10485: PUSH
10486: LD_VAR 0 1
10490: GREATER
10491: IFFALSE 10507
// num := lidi + 0 ;
10493: LD_ADDR_VAR 0 2
10497: PUSH
10498: LD_VAR 0 1
10502: PUSH
10503: LD_INT 0
10505: PLUS
10506: ST_TO_ADDR
// i := 1 ;
10507: LD_ADDR_VAR 0 7
10511: PUSH
10512: LD_INT 1
10514: ST_TO_ADDR
// result := [ ] ;
10515: LD_ADDR_VAR 0 6
10519: PUSH
10520: EMPTY
10521: ST_TO_ADDR
// while i <= lidi and result < num do
10522: LD_VAR 0 7
10526: PUSH
10527: LD_VAR 0 1
10531: LESSEQUAL
10532: PUSH
10533: LD_VAR 0 6
10537: PUSH
10538: LD_VAR 0 2
10542: LESS
10543: AND
10544: IFFALSE 10637
// begin if idle then
10546: LD_VAR 0 5
10550: IFFALSE 10596
// begin if IsIdle ( lidi [ i ] ) then
10552: LD_VAR 0 1
10556: PUSH
10557: LD_VAR 0 7
10561: ARRAY
10562: PPUSH
10563: CALL_OW 316
10567: IFFALSE 10594
// result := result ^ [ lidi [ i ] ] ;
10569: LD_ADDR_VAR 0 6
10573: PUSH
10574: LD_VAR 0 6
10578: PUSH
10579: LD_VAR 0 1
10583: PUSH
10584: LD_VAR 0 7
10588: ARRAY
10589: PUSH
10590: EMPTY
10591: LIST
10592: ADD
10593: ST_TO_ADDR
// end else
10594: GO 10621
// result := result ^ [ lidi [ i ] ] ;
10596: LD_ADDR_VAR 0 6
10600: PUSH
10601: LD_VAR 0 6
10605: PUSH
10606: LD_VAR 0 1
10610: PUSH
10611: LD_VAR 0 7
10615: ARRAY
10616: PUSH
10617: EMPTY
10618: LIST
10619: ADD
10620: ST_TO_ADDR
// i := i + 1 ;
10621: LD_ADDR_VAR 0 7
10625: PUSH
10626: LD_VAR 0 7
10630: PUSH
10631: LD_INT 1
10633: PLUS
10634: ST_TO_ADDR
// end ;
10635: GO 10522
// end ;
10637: LD_VAR 0 6
10641: RET
// export function SayAny ( lidi , ident , side , sex , Hclass , index ) ; var kdo ; begin
10642: LD_INT 0
10644: PPUSH
10645: PPUSH
// kdo := WhoSayAny ( lidi , side , sex , Hclass , index ) ;
10646: LD_ADDR_VAR 0 8
10650: PUSH
10651: LD_VAR 0 1
10655: PPUSH
10656: LD_VAR 0 3
10660: PPUSH
10661: LD_VAR 0 4
10665: PPUSH
10666: LD_VAR 0 5
10670: PPUSH
10671: LD_VAR 0 6
10675: PPUSH
10676: CALL 10722 0 5
10680: ST_TO_ADDR
// if kdo then
10681: LD_VAR 0 8
10685: IFFALSE 10709
// result := Say ( kdo , ident ) else
10687: LD_ADDR_VAR 0 7
10691: PUSH
10692: LD_VAR 0 8
10696: PPUSH
10697: LD_VAR 0 2
10701: PPUSH
10702: CALL_OW 88
10706: ST_TO_ADDR
10707: GO 10717
// result := false ;
10709: LD_ADDR_VAR 0 7
10713: PUSH
10714: LD_INT 0
10716: ST_TO_ADDR
// end ;
10717: LD_VAR 0 7
10721: RET
// export function WhoSayAny ( lidi , side , sex , Hclass , index ) ; begin
10722: LD_INT 0
10724: PPUSH
// lidi := UnitFilter ( lidi , [ [ f_type , unit_human ] , [ f_side , side ] , f_not , [ f_nation , nation_nature ] ] ) ;
10725: LD_ADDR_VAR 0 1
10729: PUSH
10730: LD_VAR 0 1
10734: PPUSH
10735: LD_INT 21
10737: PUSH
10738: LD_INT 1
10740: PUSH
10741: EMPTY
10742: LIST
10743: LIST
10744: PUSH
10745: LD_INT 22
10747: PUSH
10748: LD_VAR 0 2
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 3
10759: PUSH
10760: LD_INT 23
10762: PUSH
10763: LD_INT 0
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: PPUSH
10776: CALL_OW 72
10780: ST_TO_ADDR
// if sex <> 0 then
10781: LD_VAR 0 3
10785: PUSH
10786: LD_INT 0
10788: NONEQUAL
10789: IFFALSE 10818
// lidi := UnitFilter ( lidi , [ f_sex , sex ] ) ;
10791: LD_ADDR_VAR 0 1
10795: PUSH
10796: LD_VAR 0 1
10800: PPUSH
10801: LD_INT 26
10803: PUSH
10804: LD_VAR 0 3
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PPUSH
10813: CALL_OW 72
10817: ST_TO_ADDR
// if Hclass <> 0 then
10818: LD_VAR 0 4
10822: PUSH
10823: LD_INT 0
10825: NONEQUAL
10826: IFFALSE 10855
// lidi := UnitFilter ( lidi , [ f_class , Hclass ] ) ;
10828: LD_ADDR_VAR 0 1
10832: PUSH
10833: LD_VAR 0 1
10837: PPUSH
10838: LD_INT 25
10840: PUSH
10841: LD_VAR 0 4
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PPUSH
10850: CALL_OW 72
10854: ST_TO_ADDR
// if index <= 0 then
10855: LD_VAR 0 5
10859: PUSH
10860: LD_INT 0
10862: LESSEQUAL
10863: IFFALSE 10873
// index := 1 ;
10865: LD_ADDR_VAR 0 5
10869: PUSH
10870: LD_INT 1
10872: ST_TO_ADDR
// if lidi >= index then
10873: LD_VAR 0 1
10877: PUSH
10878: LD_VAR 0 5
10882: GREATEREQUAL
10883: IFFALSE 10903
// result := lidi [ index ] else
10885: LD_ADDR_VAR 0 6
10889: PUSH
10890: LD_VAR 0 1
10894: PUSH
10895: LD_VAR 0 5
10899: ARRAY
10900: ST_TO_ADDR
10901: GO 10911
// result := 0 ;
10903: LD_ADDR_VAR 0 6
10907: PUSH
10908: LD_INT 0
10910: ST_TO_ADDR
// end ;
10911: LD_VAR 0 6
10915: RET
// export function see_any ( strana , sez ) ; var i ; begin
10916: LD_INT 0
10918: PPUSH
10919: PPUSH
// result := [ ] ;
10920: LD_ADDR_VAR 0 3
10924: PUSH
10925: EMPTY
10926: ST_TO_ADDR
// for i in sez do
10927: LD_ADDR_VAR 0 4
10931: PUSH
10932: LD_VAR 0 2
10936: PUSH
10937: FOR_IN
10938: IFFALSE 10974
// if See ( strana , i ) then
10940: LD_VAR 0 1
10944: PPUSH
10945: LD_VAR 0 4
10949: PPUSH
10950: CALL_OW 292
10954: IFFALSE 10972
// begin result := result ^ i ;
10956: LD_ADDR_VAR 0 3
10960: PUSH
10961: LD_VAR 0 3
10965: PUSH
10966: LD_VAR 0 4
10970: ADD
10971: ST_TO_ADDR
// end ;
10972: GO 10937
10974: POP
10975: POP
// ; end ;
10976: LD_VAR 0 3
10980: RET
// export function TalkOn ; begin
10981: LD_INT 0
10983: PPUSH
// stop_talking := true ;
10984: LD_ADDR_OWVAR 56
10988: PUSH
10989: LD_INT 1
10991: ST_TO_ADDR
// end ;
10992: LD_VAR 0 1
10996: RET
// export function TalkOff ; begin
10997: LD_INT 0
10999: PPUSH
// stop_talking := false ;
11000: LD_ADDR_OWVAR 56
11004: PUSH
11005: LD_INT 0
11007: ST_TO_ADDR
// end ;
11008: LD_VAR 0 1
11012: RET
// export function FilterHumansInArea ( area , filter ) ; var inbase , i ; begin
11013: LD_INT 0
11015: PPUSH
11016: PPUSH
11017: PPUSH
// result := [ ] ;
11018: LD_ADDR_VAR 0 3
11022: PUSH
11023: EMPTY
11024: ST_TO_ADDR
// inbase := FilterUnitsInArea ( area , [ ] ) ;
11025: LD_ADDR_VAR 0 4
11029: PUSH
11030: LD_VAR 0 1
11034: PPUSH
11035: EMPTY
11036: PPUSH
11037: CALL_OW 70
11041: ST_TO_ADDR
// for i in inbase do
11042: LD_ADDR_VAR 0 5
11046: PUSH
11047: LD_VAR 0 4
11051: PUSH
11052: FOR_IN
11053: IFFALSE 11129
// begin if GetType ( i ) = unit_building or GetType ( i ) = unit_vehicle then
11055: LD_VAR 0 5
11059: PPUSH
11060: CALL_OW 247
11064: PUSH
11065: LD_INT 3
11067: EQUAL
11068: PUSH
11069: LD_VAR 0 5
11073: PPUSH
11074: CALL_OW 247
11078: PUSH
11079: LD_INT 2
11081: EQUAL
11082: OR
11083: IFFALSE 11108
// begin result := result ^ UnitsInside ( i ) ;
11085: LD_ADDR_VAR 0 3
11089: PUSH
11090: LD_VAR 0 3
11094: PUSH
11095: LD_VAR 0 5
11099: PPUSH
11100: CALL_OW 313
11104: ADD
11105: ST_TO_ADDR
// end else
11106: GO 11127
// begin result := result ^ [ i ] ;
11108: LD_ADDR_VAR 0 3
11112: PUSH
11113: LD_VAR 0 3
11117: PUSH
11118: LD_VAR 0 5
11122: PUSH
11123: EMPTY
11124: LIST
11125: ADD
11126: ST_TO_ADDR
// end ; end ;
11127: GO 11052
11129: POP
11130: POP
// result := UnitFilter ( result , filter ) ;
11131: LD_ADDR_VAR 0 3
11135: PUSH
11136: LD_VAR 0 3
11140: PPUSH
11141: LD_VAR 0 2
11145: PPUSH
11146: CALL_OW 72
11150: ST_TO_ADDR
// end ;
11151: LD_VAR 0 3
11155: RET
// export function inside_units ( uns ) ; var i ; begin
11156: LD_INT 0
11158: PPUSH
11159: PPUSH
// result := [ ] ;
11160: LD_ADDR_VAR 0 2
11164: PUSH
11165: EMPTY
11166: ST_TO_ADDR
// for i in uns do
11167: LD_ADDR_VAR 0 3
11171: PUSH
11172: LD_VAR 0 1
11176: PUSH
11177: FOR_IN
11178: IFFALSE 11203
// result := result ^ UnitsInside ( i ) ;
11180: LD_ADDR_VAR 0 2
11184: PUSH
11185: LD_VAR 0 2
11189: PUSH
11190: LD_VAR 0 3
11194: PPUSH
11195: CALL_OW 313
11199: ADD
11200: ST_TO_ADDR
11201: GO 11177
11203: POP
11204: POP
// end ;
11205: LD_VAR 0 2
11209: RET
// export function find_drivers ( cars , drivers , take_out ) ; var empty , free , i , konec ; begin
11210: LD_INT 0
11212: PPUSH
11213: PPUSH
11214: PPUSH
11215: PPUSH
11216: PPUSH
// cars := UnitFilter ( cars , [ f_alive ] ) union [ ] ;
11217: LD_ADDR_VAR 0 1
11221: PUSH
11222: LD_VAR 0 1
11226: PPUSH
11227: LD_INT 51
11229: PUSH
11230: EMPTY
11231: LIST
11232: PPUSH
11233: CALL_OW 72
11237: PUSH
11238: EMPTY
11239: UNION
11240: ST_TO_ADDR
// drivers := UnitFilter ( drivers , [ f_alive ] ) union [ ] ;
11241: LD_ADDR_VAR 0 2
11245: PUSH
11246: LD_VAR 0 2
11250: PPUSH
11251: LD_INT 51
11253: PUSH
11254: EMPTY
11255: LIST
11256: PPUSH
11257: CALL_OW 72
11261: PUSH
11262: EMPTY
11263: UNION
11264: ST_TO_ADDR
// for i in cars do
11265: LD_ADDR_VAR 0 7
11269: PUSH
11270: LD_VAR 0 1
11274: PUSH
11275: FOR_IN
11276: IFFALSE 11312
// if not IsDrivenBy ( i ) then
11278: LD_VAR 0 7
11282: PPUSH
11283: CALL_OW 311
11287: NOT
11288: IFFALSE 11310
// empty := add ( empty , i ) ;
11290: LD_ADDR_VAR 0 5
11294: PUSH
11295: LD_VAR 0 5
11299: PPUSH
11300: LD_VAR 0 7
11304: PPUSH
11305: CALL 11904 0 2
11309: ST_TO_ADDR
11310: GO 11275
11312: POP
11313: POP
// if take_out then
11314: LD_VAR 0 3
11318: IFFALSE 11377
// begin for i in drivers do
11320: LD_ADDR_VAR 0 7
11324: PUSH
11325: LD_VAR 0 2
11329: PUSH
11330: FOR_IN
11331: IFFALSE 11373
// if not ( IsInUnit ( i ) in cars ) then
11333: LD_VAR 0 7
11337: PPUSH
11338: CALL_OW 310
11342: PUSH
11343: LD_VAR 0 1
11347: IN
11348: NOT
11349: IFFALSE 11371
// free := add ( free , i ) ;
11351: LD_ADDR_VAR 0 6
11355: PUSH
11356: LD_VAR 0 6
11360: PPUSH
11361: LD_VAR 0 7
11365: PPUSH
11366: CALL 11904 0 2
11370: ST_TO_ADDR
11371: GO 11330
11373: POP
11374: POP
// end else
11375: GO 11426
// begin for i in drivers do
11377: LD_ADDR_VAR 0 7
11381: PUSH
11382: LD_VAR 0 2
11386: PUSH
11387: FOR_IN
11388: IFFALSE 11424
// if not IsInUnit ( i ) then
11390: LD_VAR 0 7
11394: PPUSH
11395: CALL_OW 310
11399: NOT
11400: IFFALSE 11422
// free := add ( free , i ) ;
11402: LD_ADDR_VAR 0 6
11406: PUSH
11407: LD_VAR 0 6
11411: PPUSH
11412: LD_VAR 0 7
11416: PPUSH
11417: CALL 11904 0 2
11421: ST_TO_ADDR
11422: GO 11387
11424: POP
11425: POP
// end ; result := cars diff empty ;
11426: LD_ADDR_VAR 0 4
11430: PUSH
11431: LD_VAR 0 1
11435: PUSH
11436: LD_VAR 0 5
11440: DIFF
11441: ST_TO_ADDR
// if empty <= free then
11442: LD_VAR 0 5
11446: PUSH
11447: LD_VAR 0 6
11451: LESSEQUAL
11452: IFFALSE 11466
// konec := empty else
11454: LD_ADDR_VAR 0 8
11458: PUSH
11459: LD_VAR 0 5
11463: ST_TO_ADDR
11464: GO 11476
// konec := free ;
11466: LD_ADDR_VAR 0 8
11470: PUSH
11471: LD_VAR 0 6
11475: ST_TO_ADDR
// for i := 1 to konec do
11476: LD_ADDR_VAR 0 7
11480: PUSH
11481: DOUBLE
11482: LD_INT 1
11484: DEC
11485: ST_TO_ADDR
11486: LD_VAR 0 8
11490: PUSH
11491: FOR_TO
11492: IFFALSE 11548
// begin ComEnterUnit ( free [ i ] , empty [ i ] ) ;
11494: LD_VAR 0 6
11498: PUSH
11499: LD_VAR 0 7
11503: ARRAY
11504: PPUSH
11505: LD_VAR 0 5
11509: PUSH
11510: LD_VAR 0 7
11514: ARRAY
11515: PPUSH
11516: CALL_OW 120
// result := add ( result , empty [ i ] ) ;
11520: LD_ADDR_VAR 0 4
11524: PUSH
11525: LD_VAR 0 4
11529: PPUSH
11530: LD_VAR 0 5
11534: PUSH
11535: LD_VAR 0 7
11539: ARRAY
11540: PPUSH
11541: CALL 11904 0 2
11545: ST_TO_ADDR
// end ;
11546: GO 11491
11548: POP
11549: POP
// end ;
11550: LD_VAR 0 4
11554: RET
// export function find_remotes ( cars , mechs , remotes ) ; var cas , i ; begin
11555: LD_INT 0
11557: PPUSH
11558: PPUSH
11559: PPUSH
// while remotes > mechs do
11560: LD_VAR 0 3
11564: PUSH
11565: LD_VAR 0 2
11569: GREATER
11570: IFFALSE 11586
// delete ( remotes , 1 ) ;
11572: LD_VAR 0 3
11576: PPUSH
11577: LD_INT 1
11579: PPUSH
11580: CALL_OW 3
11584: GO 11560
// for i := 1 to remotes do
11586: LD_ADDR_VAR 0 6
11590: PUSH
11591: DOUBLE
11592: LD_INT 1
11594: DEC
11595: ST_TO_ADDR
11596: LD_VAR 0 3
11600: PUSH
11601: FOR_TO
11602: IFFALSE 11632
// ComEnterUnit ( mechs [ i ] , remotes [ i ] ) ;
11604: LD_VAR 0 2
11608: PUSH
11609: LD_VAR 0 6
11613: ARRAY
11614: PPUSH
11615: LD_VAR 0 3
11619: PUSH
11620: LD_VAR 0 6
11624: ARRAY
11625: PPUSH
11626: CALL_OW 120
11630: GO 11601
11632: POP
11633: POP
// end ;
11634: LD_VAR 0 4
11638: RET
// export function wait_for_remotes ( cars , remotes , cas ) ; var c , unlinked , i ; begin
11639: LD_INT 0
11641: PPUSH
11642: PPUSH
11643: PPUSH
11644: PPUSH
// c := tick + cas ;
11645: LD_ADDR_VAR 0 5
11649: PUSH
11650: LD_OWVAR 1
11654: PUSH
11655: LD_VAR 0 3
11659: PLUS
11660: ST_TO_ADDR
// while tick < c and ( not ( inside_units ( remotes ) + 0 ) = remotes ) do
11661: LD_OWVAR 1
11665: PUSH
11666: LD_VAR 0 5
11670: LESS
11671: PUSH
11672: LD_VAR 0 2
11676: PPUSH
11677: CALL 11156 0 1
11681: PUSH
11682: LD_INT 0
11684: PLUS
11685: PUSH
11686: LD_VAR 0 2
11690: EQUAL
11691: NOT
11692: AND
11693: IFFALSE 11704
// wait ( 0 0$1 ) ;
11695: LD_INT 35
11697: PPUSH
11698: CALL_OW 67
11702: GO 11661
// unlinked := cars ;
11704: LD_ADDR_VAR 0 6
11708: PUSH
11709: LD_VAR 0 1
11713: ST_TO_ADDR
// for i in remotes do
11714: LD_ADDR_VAR 0 7
11718: PUSH
11719: LD_VAR 0 2
11723: PUSH
11724: FOR_IN
11725: IFFALSE 11774
// begin ComLinkTo ( unlinked , UnitsInside ( i ) ) ;
11727: LD_VAR 0 6
11731: PPUSH
11732: LD_VAR 0 7
11736: PPUSH
11737: CALL_OW 313
11741: PPUSH
11742: CALL_OW 135
// unlinked := unlinked diff UnitsLinked ( UnitsInside ( i ) ) ;
11746: LD_ADDR_VAR 0 6
11750: PUSH
11751: LD_VAR 0 6
11755: PUSH
11756: LD_VAR 0 7
11760: PPUSH
11761: CALL_OW 313
11765: PPUSH
11766: CALL_OW 432
11770: DIFF
11771: ST_TO_ADDR
// end ;
11772: GO 11724
11774: POP
11775: POP
// end ;
11776: LD_VAR 0 4
11780: RET
// export function wait_for_drivers ( cars , cas ) ; var i , vsichni_ready , k , pockat ; begin
11781: LD_INT 0
11783: PPUSH
11784: PPUSH
11785: PPUSH
11786: PPUSH
11787: PPUSH
// k := 0 ;
11788: LD_ADDR_VAR 0 6
11792: PUSH
11793: LD_INT 0
11795: ST_TO_ADDR
// pockat := tick + cas ;
11796: LD_ADDR_VAR 0 7
11800: PUSH
11801: LD_OWVAR 1
11805: PUSH
11806: LD_VAR 0 2
11810: PLUS
11811: ST_TO_ADDR
// while not vsichni_ready and tick < pockat do
11812: LD_VAR 0 5
11816: NOT
11817: PUSH
11818: LD_OWVAR 1
11822: PUSH
11823: LD_VAR 0 7
11827: LESS
11828: AND
11829: IFFALSE 11899
// begin vsichni_ready := true ;
11831: LD_ADDR_VAR 0 5
11835: PUSH
11836: LD_INT 1
11838: ST_TO_ADDR
// k := k + 1 ;
11839: LD_ADDR_VAR 0 6
11843: PUSH
11844: LD_VAR 0 6
11848: PUSH
11849: LD_INT 1
11851: PLUS
11852: ST_TO_ADDR
// for i in cars do
11853: LD_ADDR_VAR 0 4
11857: PUSH
11858: LD_VAR 0 1
11862: PUSH
11863: FOR_IN
11864: IFFALSE 11888
// if not IsDrivenBy ( i ) then
11866: LD_VAR 0 4
11870: PPUSH
11871: CALL_OW 311
11875: NOT
11876: IFFALSE 11886
// vsichni_ready := false ;
11878: LD_ADDR_VAR 0 5
11882: PUSH
11883: LD_INT 0
11885: ST_TO_ADDR
11886: GO 11863
11888: POP
11889: POP
// wait ( 0 0$1.0 ) ;
11890: LD_INT 35
11892: PPUSH
11893: CALL_OW 67
// end ;
11897: GO 11812
// end ;
11899: LD_VAR 0 3
11903: RET
// export function add ( list , list1 ) ; begin
11904: LD_INT 0
11906: PPUSH
// if list = 0 then
11907: LD_VAR 0 1
11911: PUSH
11912: LD_INT 0
11914: EQUAL
11915: IFFALSE 11924
// list := [ ] ;
11917: LD_ADDR_VAR 0 1
11921: PUSH
11922: EMPTY
11923: ST_TO_ADDR
// if list1 = 0 then
11924: LD_VAR 0 2
11928: PUSH
11929: LD_INT 0
11931: EQUAL
11932: IFFALSE 11941
// list1 := [ ] ;
11934: LD_ADDR_VAR 0 2
11938: PUSH
11939: EMPTY
11940: ST_TO_ADDR
// result := list ^ list1 ;
11941: LD_ADDR_VAR 0 3
11945: PUSH
11946: LD_VAR 0 1
11950: PUSH
11951: LD_VAR 0 2
11955: ADD
11956: ST_TO_ADDR
// end ;
11957: LD_VAR 0 3
11961: RET
// export function take_x ( list , x ) ; var i , r ; begin
11962: LD_INT 0
11964: PPUSH
11965: PPUSH
11966: PPUSH
// r := [ ] ;
11967: LD_ADDR_VAR 0 5
11971: PUSH
11972: EMPTY
11973: ST_TO_ADDR
// for i := 1 to x do
11974: LD_ADDR_VAR 0 4
11978: PUSH
11979: DOUBLE
11980: LD_INT 1
11982: DEC
11983: ST_TO_ADDR
11984: LD_VAR 0 2
11988: PUSH
11989: FOR_TO
11990: IFFALSE 12019
// r := r ^ [ list [ i ] ] ;
11992: LD_ADDR_VAR 0 5
11996: PUSH
11997: LD_VAR 0 5
12001: PUSH
12002: LD_VAR 0 1
12006: PUSH
12007: LD_VAR 0 4
12011: ARRAY
12012: PUSH
12013: EMPTY
12014: LIST
12015: ADD
12016: ST_TO_ADDR
12017: GO 11989
12019: POP
12020: POP
// result := r ;
12021: LD_ADDR_VAR 0 3
12025: PUSH
12026: LD_VAR 0 5
12030: ST_TO_ADDR
// end ;
12031: LD_VAR 0 3
12035: RET
// export hinty_co_byli ; export function MyHint ( ident ) ; begin
12036: LD_INT 0
12038: PPUSH
// if not hinty_co_byli then
12039: LD_EXP 91
12043: NOT
12044: IFFALSE 12053
// hinty_co_byli := [ ] ;
12046: LD_ADDR_EXP 91
12050: PUSH
12051: EMPTY
12052: ST_TO_ADDR
// if not ( ident in hinty_co_byli ) then
12053: LD_VAR 0 1
12057: PUSH
12058: LD_EXP 91
12062: IN
12063: NOT
12064: IFFALSE 12091
// begin hinty_co_byli := hinty_co_byli ^ ident ;
12066: LD_ADDR_EXP 91
12070: PUSH
12071: LD_EXP 91
12075: PUSH
12076: LD_VAR 0 1
12080: ADD
12081: ST_TO_ADDR
// Hint ( ident ) ;
12082: LD_VAR 0 1
12086: PPUSH
12087: CALL_OW 339
// end ; end ;
12091: LD_VAR 0 2
12095: RET
// export function BlockMarchNorth ; var i , x , y ; begin
12096: LD_INT 0
12098: PPUSH
12099: PPUSH
12100: PPUSH
12101: PPUSH
// for i in FilterUnitsInArea ( block_march , [ f_side , you ] ) do
12102: LD_ADDR_VAR 0 2
12106: PUSH
12107: LD_INT 30
12109: PPUSH
12110: LD_INT 22
12112: PUSH
12113: LD_EXP 1
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PPUSH
12122: CALL_OW 70
12126: PUSH
12127: FOR_IN
12128: IFFALSE 12189
// begin x = GetX ( i ) ;
12130: LD_ADDR_VAR 0 3
12134: PUSH
12135: LD_VAR 0 2
12139: PPUSH
12140: CALL_OW 250
12144: ST_TO_ADDR
// y = GetY ( i ) ;
12145: LD_ADDR_VAR 0 4
12149: PUSH
12150: LD_VAR 0 2
12154: PPUSH
12155: CALL_OW 251
12159: ST_TO_ADDR
// ComMoveXY ( i , x + 3 , y + 5 ) ;
12160: LD_VAR 0 2
12164: PPUSH
12165: LD_VAR 0 3
12169: PUSH
12170: LD_INT 3
12172: PLUS
12173: PPUSH
12174: LD_VAR 0 4
12178: PUSH
12179: LD_INT 5
12181: PLUS
12182: PPUSH
12183: CALL_OW 111
// end ;
12187: GO 12127
12189: POP
12190: POP
// end ;
12191: LD_VAR 0 1
12195: RET
// export function DepotWithSiberite ; var i , your_depots ; begin
12196: LD_INT 0
12198: PPUSH
12199: PPUSH
12200: PPUSH
// your_depots = FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12201: LD_ADDR_VAR 0 3
12205: PUSH
12206: LD_INT 22
12208: PUSH
12209: LD_EXP 1
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: LD_INT 2
12220: PUSH
12221: LD_INT 30
12223: PUSH
12224: LD_INT 0
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: PUSH
12231: LD_INT 30
12233: PUSH
12234: LD_INT 1
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: LIST
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PPUSH
12250: CALL_OW 69
12254: ST_TO_ADDR
// for i in your_depots do
12255: LD_ADDR_VAR 0 2
12259: PUSH
12260: LD_VAR 0 3
12264: PUSH
12265: FOR_IN
12266: IFFALSE 12301
// begin if GetResourceType ( GetBase ( i ) , mat_siberit ) > 0 then
12268: LD_VAR 0 2
12272: PPUSH
12273: CALL_OW 274
12277: PPUSH
12278: LD_INT 3
12280: PPUSH
12281: CALL_OW 275
12285: PUSH
12286: LD_INT 0
12288: GREATER
12289: IFFALSE 12299
// begin result = true ;
12291: LD_ADDR_VAR 0 1
12295: PUSH
12296: LD_INT 1
12298: ST_TO_ADDR
// end ; end ;
12299: GO 12265
12301: POP
12302: POP
// end ;
12303: LD_VAR 0 1
12307: RET
// export function BulldozerScript ; var bulldozer , i , path ; begin
12308: LD_INT 0
12310: PPUSH
12311: PPUSH
12312: PPUSH
12313: PPUSH
// if bulldozer_used then
12314: LD_EXP 31
12318: IFFALSE 12322
// exit ;
12320: GO 12534
// bulldozer := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_bulldozer ] , [ f_lives , 1000 ] ] ) ;
12322: LD_ADDR_VAR 0 2
12326: PUSH
12327: LD_INT 22
12329: PUSH
12330: LD_INT 1
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PUSH
12337: LD_INT 34
12339: PUSH
12340: LD_INT 14
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PUSH
12347: LD_INT 24
12349: PUSH
12350: LD_INT 1000
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: LIST
12361: PPUSH
12362: CALL_OW 69
12366: ST_TO_ADDR
// if not bulldozer then
12367: LD_VAR 0 2
12371: NOT
12372: IFFALSE 12376
// exit ;
12374: GO 12534
// if not IsDrivenBy ( bulldozer [ 1 ] ) then
12376: LD_VAR 0 2
12380: PUSH
12381: LD_INT 1
12383: ARRAY
12384: PPUSH
12385: CALL_OW 311
12389: NOT
12390: IFFALSE 12394
// exit ;
12392: GO 12534
// path := [ [ 75 , 55 ] , [ 81 , 67 ] , [ 79 , 67 ] , [ 83 , 76 ] , [ 87 , 80 ] , [ 90 , 80 ] , [ 42 , 49 ] ] ;
12394: LD_ADDR_VAR 0 4
12398: PUSH
12399: LD_INT 75
12401: PUSH
12402: LD_INT 55
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PUSH
12409: LD_INT 81
12411: PUSH
12412: LD_INT 67
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PUSH
12419: LD_INT 79
12421: PUSH
12422: LD_INT 67
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: PUSH
12429: LD_INT 83
12431: PUSH
12432: LD_INT 76
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: LD_INT 87
12441: PUSH
12442: LD_INT 80
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PUSH
12449: LD_INT 90
12451: PUSH
12452: LD_INT 80
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: PUSH
12459: LD_INT 42
12461: PUSH
12462: LD_INT 49
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: ST_TO_ADDR
// for i in path do
12478: LD_ADDR_VAR 0 3
12482: PUSH
12483: LD_VAR 0 4
12487: PUSH
12488: FOR_IN
12489: IFFALSE 12524
// AddComMoveXY ( bulldozer [ 1 ] , i [ 1 ] , i [ 2 ] ) ;
12491: LD_VAR 0 2
12495: PUSH
12496: LD_INT 1
12498: ARRAY
12499: PPUSH
12500: LD_VAR 0 3
12504: PUSH
12505: LD_INT 1
12507: ARRAY
12508: PPUSH
12509: LD_VAR 0 3
12513: PUSH
12514: LD_INT 2
12516: ARRAY
12517: PPUSH
12518: CALL_OW 171
12522: GO 12488
12524: POP
12525: POP
// bulldozer_used := true ;
12526: LD_ADDR_EXP 31
12530: PUSH
12531: LD_INT 1
12533: ST_TO_ADDR
// end ;
12534: LD_VAR 0 1
12538: RET
// export function AttackEvent ( side , vehicles ) ; var i , j , target ; begin
12539: LD_INT 0
12541: PPUSH
12542: PPUSH
12543: PPUSH
12544: PPUSH
// if vehicles then
12545: LD_VAR 0 2
12549: IFFALSE 12701
// repeat wait ( 0 0$1 ) ;
12551: LD_INT 35
12553: PPUSH
12554: CALL_OW 67
// vehicles := UnitFilter ( vehicles , [ f_lives , 600 ] ) ;
12558: LD_ADDR_VAR 0 2
12562: PUSH
12563: LD_VAR 0 2
12567: PPUSH
12568: LD_INT 24
12570: PUSH
12571: LD_INT 600
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: PPUSH
12578: CALL_OW 72
12582: ST_TO_ADDR
// if not vehicles then
12583: LD_VAR 0 2
12587: NOT
12588: IFFALSE 12592
// exit ;
12590: GO 12701
// for j in vehicles do
12592: LD_ADDR_VAR 0 5
12596: PUSH
12597: LD_VAR 0 2
12601: PUSH
12602: FOR_IN
12603: IFFALSE 12689
// begin if HasTask ( j ) then
12605: LD_VAR 0 5
12609: PPUSH
12610: CALL_OW 314
12614: IFFALSE 12618
// continue ;
12616: GO 12602
// target := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , side ] ] ) , j ) ;
12618: LD_ADDR_VAR 0 6
12622: PUSH
12623: LD_INT 22
12625: PUSH
12626: LD_VAR 0 1
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: PUSH
12635: EMPTY
12636: LIST
12637: PPUSH
12638: CALL_OW 69
12642: PPUSH
12643: LD_VAR 0 5
12647: PPUSH
12648: CALL_OW 74
12652: ST_TO_ADDR
// if GetDistUnits ( j , target ) < 12 then
12653: LD_VAR 0 5
12657: PPUSH
12658: LD_VAR 0 6
12662: PPUSH
12663: CALL_OW 296
12667: PUSH
12668: LD_INT 12
12670: LESS
12671: IFFALSE 12687
// ComAttackUnit ( j , target ) ;
12673: LD_VAR 0 5
12677: PPUSH
12678: LD_VAR 0 6
12682: PPUSH
12683: CALL_OW 115
// end ;
12687: GO 12602
12689: POP
12690: POP
// until vehicles = 0 ;
12691: LD_VAR 0 2
12695: PUSH
12696: LD_INT 0
12698: EQUAL
12699: IFFALSE 12551
// end ; end_of_file
12701: LD_VAR 0 3
12705: RET
// every 0 0$55 trigger vsevolod_vstoupil and not VsevolodSaved do var tmp ;
12706: LD_EXP 11
12710: PUSH
12711: LD_EXP 57
12715: NOT
12716: AND
12717: IFFALSE 12929
12719: GO 12721
12721: DISABLE
12722: LD_INT 0
12724: PPUSH
// begin while tmp <= 2 do
12725: LD_VAR 0 1
12729: PUSH
12730: LD_INT 2
12732: LESSEQUAL
12733: IFFALSE 12796
// begin tmp := UnitFilter ( attack , [ [ f_inarea , top_attack ] , [ f_side , ai ] , [ f_control , control_remote ] ] ) ;
12735: LD_ADDR_VAR 0 1
12739: PUSH
12740: LD_EXP 139
12744: PPUSH
12745: LD_INT 95
12747: PUSH
12748: LD_INT 23
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: LD_INT 22
12757: PUSH
12758: LD_EXP 6
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PUSH
12767: LD_INT 33
12769: PUSH
12770: LD_INT 2
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: LIST
12781: PPUSH
12782: CALL_OW 72
12786: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12787: LD_INT 35
12789: PPUSH
12790: CALL_OW 67
// end ;
12794: GO 12725
// if tmp > 1 then
12796: LD_VAR 0 1
12800: PUSH
12801: LD_INT 1
12803: GREATER
12804: IFFALSE 12858
// if difficulty > 1 then
12806: LD_OWVAR 67
12810: PUSH
12811: LD_INT 1
12813: GREATER
12814: IFFALSE 12842
// zbytek := tmp [ 1 ] ^ tmp [ 2 ] else
12816: LD_ADDR_EXP 92
12820: PUSH
12821: LD_VAR 0 1
12825: PUSH
12826: LD_INT 1
12828: ARRAY
12829: PUSH
12830: LD_VAR 0 1
12834: PUSH
12835: LD_INT 2
12837: ARRAY
12838: ADD
12839: ST_TO_ADDR
12840: GO 12856
// zbytek := tmp [ 1 ] else
12842: LD_ADDR_EXP 92
12846: PUSH
12847: LD_VAR 0 1
12851: PUSH
12852: LD_INT 1
12854: ARRAY
12855: ST_TO_ADDR
12856: GO 12868
// zbytek := tmp ;
12858: LD_ADDR_EXP 92
12862: PUSH
12863: LD_VAR 0 1
12867: ST_TO_ADDR
// if tick > ( ( vsevolod_vstoupil + kolik_ma_vsevolod_casu ) - ( 2 2$0 * Vsevolod_uderna_group ) ) then
12868: LD_OWVAR 1
12872: PUSH
12873: LD_EXP 11
12877: PUSH
12878: LD_EXP 34
12882: PLUS
12883: PUSH
12884: LD_INT 4200
12886: PUSH
12887: LD_EXP 12
12891: MUL
12892: MINUS
12893: GREATER
12894: IFFALSE 12919
// ComExitBuilding ( Vsevolod_uderna_group [ Rand ( 1 , Vsevolod_uderna_group ) ] ) ;
12896: LD_EXP 12
12900: PUSH
12901: LD_INT 1
12903: PPUSH
12904: LD_EXP 12
12908: PPUSH
12909: CALL_OW 12
12913: ARRAY
12914: PPUSH
12915: CALL_OW 122
// RaiseSailEvent ( f_vsevolod_utok ) ;
12919: CALL 15038 0 0
12923: PPUSH
12924: CALL_OW 427
// enable ;
12928: ENABLE
// end ;
12929: PPOPN 1
12931: END
// every 0 0$2 trigger ( vsevolod_vstoupil and tick > ( vsevolod_vstoupil + kolik_ma_vsevolod_casu ) ) do var i ;
12932: LD_EXP 11
12936: PUSH
12937: LD_OWVAR 1
12941: PUSH
12942: LD_EXP 11
12946: PUSH
12947: LD_EXP 34
12951: PLUS
12952: GREATER
12953: AND
12954: IFFALSE 13101
12956: GO 12958
12958: DISABLE
12959: LD_INT 0
12961: PPUSH
// begin while IsLive ( Vsevolod ) and not VsevolodSaved do
12962: LD_EXP 71
12966: PPUSH
12967: CALL_OW 300
12971: PUSH
12972: LD_EXP 57
12976: NOT
12977: AND
12978: IFFALSE 13101
// begin ComExitBuilding ( Vsevolod_uderna_group ^ [ Vsevolod ] ) ;
12980: LD_EXP 12
12984: PUSH
12985: LD_EXP 71
12989: PUSH
12990: EMPTY
12991: LIST
12992: ADD
12993: PPUSH
12994: CALL_OW 122
// for i in Vsevolod_uderna_group ^ [ Vsevolod ] do
12998: LD_ADDR_VAR 0 1
13002: PUSH
13003: LD_EXP 12
13007: PUSH
13008: LD_EXP 71
13012: PUSH
13013: EMPTY
13014: LIST
13015: ADD
13016: PUSH
13017: FOR_IN
13018: IFFALSE 13036
// PriorityAttack ( ai , i ) ;
13020: LD_EXP 6
13024: PPUSH
13025: LD_VAR 0 1
13029: PPUSH
13030: CALL_OW 470
13034: GO 13017
13036: POP
13037: POP
// zbytek := FilterUnitsInArea ( top_attack , [ [ f_side , ai ] , [ f_control , control_remote ] ] ) isect attack ;
13038: LD_ADDR_EXP 92
13042: PUSH
13043: LD_INT 23
13045: PPUSH
13046: LD_INT 22
13048: PUSH
13049: LD_EXP 6
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: LD_INT 33
13060: PUSH
13061: LD_INT 2
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PPUSH
13072: CALL_OW 70
13076: PUSH
13077: LD_EXP 139
13081: ISECT
13082: ST_TO_ADDR
// RaiseSailEvent ( f_vsevolod_final_utok ) ;
13083: CALL 15374 0 0
13087: PPUSH
13088: CALL_OW 427
// wait ( 0 0$30 ) ;
13092: LD_INT 1050
13094: PPUSH
13095: CALL_OW 67
// end ;
13099: GO 12962
// end ;
13101: PPOPN 1
13103: END
// export zbytek ; every 3 3$00 trigger ovsyenkotaken and tick > ( ovsyenkotaken + cas_prvniho_utoku ) and ( ( tick > 20 20$0 and attack >= 3 ) or attack >= 4 ) do var i , max ;
13104: LD_EXP 14
13108: PUSH
13109: LD_OWVAR 1
13113: PUSH
13114: LD_EXP 14
13118: PUSH
13119: LD_EXP 33
13123: PLUS
13124: GREATER
13125: AND
13126: PUSH
13127: LD_OWVAR 1
13131: PUSH
13132: LD_INT 42000
13134: GREATER
13135: PUSH
13136: LD_EXP 139
13140: PUSH
13141: LD_INT 3
13143: GREATEREQUAL
13144: AND
13145: PUSH
13146: LD_EXP 139
13150: PUSH
13151: LD_INT 4
13153: GREATEREQUAL
13154: OR
13155: AND
13156: IFFALSE 13354
13158: GO 13160
13160: DISABLE
13161: LD_INT 0
13163: PPUSH
13164: PPUSH
// begin zbytek := [ ] ;
13165: LD_ADDR_EXP 92
13169: PUSH
13170: EMPTY
13171: ST_TO_ADDR
// max := utoci_max ;
13172: LD_ADDR_VAR 0 2
13176: PUSH
13177: LD_EXP 40
13181: ST_TO_ADDR
// if max > attack then
13182: LD_VAR 0 2
13186: PUSH
13187: LD_EXP 139
13191: GREATER
13192: IFFALSE 13208
// max := attack + 0 ;
13194: LD_ADDR_VAR 0 2
13198: PUSH
13199: LD_EXP 139
13203: PUSH
13204: LD_INT 0
13206: PLUS
13207: ST_TO_ADDR
// for i := 1 to max do
13208: LD_ADDR_VAR 0 1
13212: PUSH
13213: DOUBLE
13214: LD_INT 1
13216: DEC
13217: ST_TO_ADDR
13218: LD_VAR 0 2
13222: PUSH
13223: FOR_TO
13224: IFFALSE 13250
// zbytek := zbytek ^ attack [ i ] ;
13226: LD_ADDR_EXP 92
13230: PUSH
13231: LD_EXP 92
13235: PUSH
13236: LD_EXP 139
13240: PUSH
13241: LD_VAR 0 1
13245: ARRAY
13246: ADD
13247: ST_TO_ADDR
13248: GO 13223
13250: POP
13251: POP
// ComReturn ( mec ) ;
13252: LD_EXP 126
13256: PPUSH
13257: CALL_OW 144
// case Rand ( 1 , 4 ) of 1 :
13261: LD_INT 1
13263: PPUSH
13264: LD_INT 4
13266: PPUSH
13267: CALL_OW 12
13271: PUSH
13272: LD_INT 1
13274: DOUBLE
13275: EQUAL
13276: IFTRUE 13280
13278: GO 13292
13280: POP
// RaiseSailEvent ( normal1_utok ) ; 2 :
13281: LD_EXP 24
13285: PPUSH
13286: CALL_OW 427
13290: GO 13353
13292: LD_INT 2
13294: DOUBLE
13295: EQUAL
13296: IFTRUE 13300
13298: GO 13312
13300: POP
// RaiseSailEvent ( normal2_utok ) ; 3 :
13301: LD_EXP 25
13305: PPUSH
13306: CALL_OW 427
13310: GO 13353
13312: LD_INT 3
13314: DOUBLE
13315: EQUAL
13316: IFTRUE 13320
13318: GO 13332
13320: POP
// RaiseSailEvent ( normal3_utok ) ; 4 :
13321: LD_EXP 26
13325: PPUSH
13326: CALL_OW 427
13330: GO 13353
13332: LD_INT 4
13334: DOUBLE
13335: EQUAL
13336: IFTRUE 13340
13338: GO 13352
13340: POP
// RaiseSailEvent ( normal4_utok ) ; end ;
13341: LD_EXP 27
13345: PPUSH
13346: CALL_OW 427
13350: GO 13353
13352: POP
// enable ;
13353: ENABLE
// end ;
13354: PPOPN 2
13356: END
// export rAtt1 , idAtt1 , toAtt1 ; every 0 0$1 do var i , a ;
13357: GO 13359
13359: DISABLE
13360: LD_INT 0
13362: PPUSH
13363: PPUSH
// begin rAtt1 := McRegistry ( ai , [ [ mc_reg_refresh_time , 0 0$2 ] , [ mc_reg_area_to_guard , mc_attack ] , [ mc_reg_area_to_protect , def_base3 ] , mc_reg_only_important ] ) ;
13364: LD_ADDR_EXP 93
13368: PUSH
13369: LD_EXP 6
13373: PPUSH
13374: LD_INT 1
13376: PUSH
13377: LD_INT 70
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PUSH
13384: LD_INT 2
13386: PUSH
13387: LD_INT 26
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 3
13396: PUSH
13397: LD_INT 18
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 8
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: PPUSH
13413: CALL_OW 399
13417: ST_TO_ADDR
// idAtt1 := McAttack ( 5 , rAtt1 , toAtt1 , [ mc_def_advantage , mcatt_difficulty ] ) ;
13418: LD_ADDR_EXP 94
13422: PUSH
13423: LD_INT 5
13425: PPUSH
13426: LD_EXP 93
13430: PPUSH
13431: LD_EXP 95
13435: PPUSH
13436: LD_INT 1
13438: PUSH
13439: LD_EXP 17
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PPUSH
13448: CALL_OW 402
13452: ST_TO_ADDR
// end ;
13453: PPOPN 2
13455: END
// every 0 0$2 do
13456: GO 13458
13458: DISABLE
// begin toAtt1 := UnitFilter ( attack , [ [ f_inarea , mc_attack ] , [ f_side , ai ] ] ) ;
13459: LD_ADDR_EXP 95
13463: PUSH
13464: LD_EXP 139
13468: PPUSH
13469: LD_INT 95
13471: PUSH
13472: LD_INT 26
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: PUSH
13479: LD_INT 22
13481: PUSH
13482: LD_EXP 6
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PPUSH
13495: CALL_OW 72
13499: ST_TO_ADDR
// if OvsyenkoTaken then
13500: LD_EXP 14
13504: IFFALSE 13520
// AddMcUnits ( idAtt1 , toAtt1 ) ;
13506: LD_EXP 94
13510: PPUSH
13511: LD_EXP 95
13515: PPUSH
13516: CALL_OW 390
// enable ;
13520: ENABLE
// end ;
13521: END
// export function f_normal1_utok ; var path , i ; begin
13522: LD_INT 0
13524: PPUSH
13525: PPUSH
13526: PPUSH
// path := [ [ 66 , 86 ] , [ 91 , 95 ] ] ;
13527: LD_ADDR_VAR 0 2
13531: PUSH
13532: LD_INT 66
13534: PUSH
13535: LD_INT 86
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: PUSH
13542: LD_INT 91
13544: PUSH
13545: LD_INT 95
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: ST_TO_ADDR
// find_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) , false ) ;
13556: LD_EXP 92
13560: PPUSH
13561: LD_INT 3
13563: PUSH
13564: LD_INT 33
13566: PUSH
13567: LD_INT 2
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PPUSH
13578: CALL_OW 72
13582: PPUSH
13583: LD_INT 22
13585: PUSH
13586: LD_EXP 6
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: PUSH
13595: LD_INT 25
13597: PUSH
13598: LD_INT 1
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: PPUSH
13609: CALL_OW 69
13613: PPUSH
13614: LD_INT 0
13616: PPUSH
13617: CALL 11210 0 3
// find_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) ) ;
13621: LD_EXP 92
13625: PPUSH
13626: LD_INT 33
13628: PUSH
13629: LD_INT 2
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PUSH
13636: EMPTY
13637: LIST
13638: PPUSH
13639: CALL_OW 72
13643: PPUSH
13644: LD_INT 22
13646: PUSH
13647: LD_EXP 6
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: PUSH
13656: LD_INT 25
13658: PUSH
13659: LD_INT 3
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: PPUSH
13670: CALL_OW 69
13674: PPUSH
13675: LD_INT 34
13677: PUSH
13678: LD_INT 30
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: EMPTY
13686: LIST
13687: PPUSH
13688: CALL_OW 69
13692: PPUSH
13693: CALL 11555 0 3
// wait_for_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , 0 0$30 ) ;
13697: LD_EXP 92
13701: PPUSH
13702: LD_INT 3
13704: PUSH
13705: LD_INT 33
13707: PUSH
13708: LD_INT 2
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PPUSH
13719: CALL_OW 72
13723: PPUSH
13724: LD_INT 1050
13726: PPUSH
13727: CALL 11781 0 2
// wait_for_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) , 0 0$30 ) ;
13731: LD_EXP 92
13735: PPUSH
13736: LD_INT 33
13738: PUSH
13739: LD_INT 2
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: EMPTY
13747: LIST
13748: PPUSH
13749: CALL_OW 72
13753: PPUSH
13754: LD_INT 34
13756: PUSH
13757: LD_INT 30
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: PUSH
13764: EMPTY
13765: LIST
13766: PPUSH
13767: CALL_OW 69
13771: PPUSH
13772: LD_INT 1050
13774: PPUSH
13775: CALL 11639 0 3
// ComStop ( zbytek ) ;
13779: LD_EXP 92
13783: PPUSH
13784: CALL_OW 141
// for i in path do
13788: LD_ADDR_VAR 0 3
13792: PUSH
13793: LD_VAR 0 2
13797: PUSH
13798: FOR_IN
13799: IFFALSE 13830
// AddComAgressiveMove ( zbytek , i [ 1 ] , i [ 2 ] ) ;
13801: LD_EXP 92
13805: PPUSH
13806: LD_VAR 0 3
13810: PUSH
13811: LD_INT 1
13813: ARRAY
13814: PPUSH
13815: LD_VAR 0 3
13819: PUSH
13820: LD_INT 2
13822: ARRAY
13823: PPUSH
13824: CALL_OW 174
13828: GO 13798
13830: POP
13831: POP
// RaiseSailEvent ( 300 ) ;
13832: LD_INT 300
13834: PPUSH
13835: CALL_OW 427
// if not byl_hint_PA then
13839: LD_EXP 96
13843: NOT
13844: IFFALSE 13885
// begin while not ContactTime ( [ ai ] ) do
13846: LD_EXP 6
13850: PUSH
13851: EMPTY
13852: LIST
13853: PPUSH
13854: CALL_OW 462
13858: NOT
13859: IFFALSE 13870
// wait ( 0 0$1 ) ;
13861: LD_INT 35
13863: PPUSH
13864: CALL_OW 67
13868: GO 13846
// MyHint ( PriorityAttacks ) ;
13870: LD_STRING PriorityAttacks
13872: PPUSH
13873: CALL 12036 0 1
// byl_hint_PA := true ;
13877: LD_ADDR_EXP 96
13881: PUSH
13882: LD_INT 1
13884: ST_TO_ADDR
// end ; end ;
13885: LD_VAR 0 1
13889: RET
// export byl_hint_PA ; export function f_normal2_utok ; var path , i ; begin
13890: LD_INT 0
13892: PPUSH
13893: PPUSH
13894: PPUSH
// path := [ [ 66 , 86 ] , [ 109 , 128 ] , [ 91 , 95 ] ] ;
13895: LD_ADDR_VAR 0 2
13899: PUSH
13900: LD_INT 66
13902: PUSH
13903: LD_INT 86
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 109
13912: PUSH
13913: LD_INT 128
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: LD_INT 91
13922: PUSH
13923: LD_INT 95
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: LIST
13934: ST_TO_ADDR
// find_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) , false ) ;
13935: LD_EXP 92
13939: PPUSH
13940: LD_INT 3
13942: PUSH
13943: LD_INT 33
13945: PUSH
13946: LD_INT 2
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: PUSH
13953: EMPTY
13954: LIST
13955: LIST
13956: PPUSH
13957: CALL_OW 72
13961: PPUSH
13962: LD_INT 22
13964: PUSH
13965: LD_EXP 6
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: LD_INT 25
13976: PUSH
13977: LD_INT 1
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PPUSH
13988: CALL_OW 69
13992: PPUSH
13993: LD_INT 0
13995: PPUSH
13996: CALL 11210 0 3
// find_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) ) ;
14000: LD_EXP 92
14004: PPUSH
14005: LD_INT 33
14007: PUSH
14008: LD_INT 2
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PUSH
14015: EMPTY
14016: LIST
14017: PPUSH
14018: CALL_OW 72
14022: PPUSH
14023: LD_INT 22
14025: PUSH
14026: LD_EXP 6
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PUSH
14035: LD_INT 25
14037: PUSH
14038: LD_INT 3
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PPUSH
14049: CALL_OW 69
14053: PPUSH
14054: LD_INT 34
14056: PUSH
14057: LD_INT 30
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PUSH
14064: EMPTY
14065: LIST
14066: PPUSH
14067: CALL_OW 69
14071: PPUSH
14072: CALL 11555 0 3
// wait_for_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , 0 0$30 ) ;
14076: LD_EXP 92
14080: PPUSH
14081: LD_INT 3
14083: PUSH
14084: LD_INT 33
14086: PUSH
14087: LD_INT 2
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PPUSH
14098: CALL_OW 72
14102: PPUSH
14103: LD_INT 1050
14105: PPUSH
14106: CALL 11781 0 2
// wait_for_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) , 0 0$30 ) ;
14110: LD_EXP 92
14114: PPUSH
14115: LD_INT 33
14117: PUSH
14118: LD_INT 2
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: PUSH
14125: EMPTY
14126: LIST
14127: PPUSH
14128: CALL_OW 72
14132: PPUSH
14133: LD_INT 34
14135: PUSH
14136: LD_INT 30
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PUSH
14143: EMPTY
14144: LIST
14145: PPUSH
14146: CALL_OW 69
14150: PPUSH
14151: LD_INT 1050
14153: PPUSH
14154: CALL 11639 0 3
// ComStop ( zbytek ) ;
14158: LD_EXP 92
14162: PPUSH
14163: CALL_OW 141
// for i in path do
14167: LD_ADDR_VAR 0 3
14171: PUSH
14172: LD_VAR 0 2
14176: PUSH
14177: FOR_IN
14178: IFFALSE 14209
// AddComAgressiveMove ( zbytek , i [ 1 ] , i [ 2 ] ) ;
14180: LD_EXP 92
14184: PPUSH
14185: LD_VAR 0 3
14189: PUSH
14190: LD_INT 1
14192: ARRAY
14193: PPUSH
14194: LD_VAR 0 3
14198: PUSH
14199: LD_INT 2
14201: ARRAY
14202: PPUSH
14203: CALL_OW 174
14207: GO 14177
14209: POP
14210: POP
// RaiseSailEvent ( 300 ) ;
14211: LD_INT 300
14213: PPUSH
14214: CALL_OW 427
// if not byl_hint_PA then
14218: LD_EXP 96
14222: NOT
14223: IFFALSE 14264
// begin while not ContactTime ( [ ai ] ) do
14225: LD_EXP 6
14229: PUSH
14230: EMPTY
14231: LIST
14232: PPUSH
14233: CALL_OW 462
14237: NOT
14238: IFFALSE 14249
// wait ( 0 0$1 ) ;
14240: LD_INT 35
14242: PPUSH
14243: CALL_OW 67
14247: GO 14225
// MyHint ( PriorityAttacks ) ;
14249: LD_STRING PriorityAttacks
14251: PPUSH
14252: CALL 12036 0 1
// byl_hint_PA := true ;
14256: LD_ADDR_EXP 96
14260: PUSH
14261: LD_INT 1
14263: ST_TO_ADDR
// end ; end ;
14264: LD_VAR 0 1
14268: RET
// export function f_normal3_utok ; var path , i ; begin
14269: LD_INT 0
14271: PPUSH
14272: PPUSH
14273: PPUSH
// path := [ [ 66 , 86 ] , [ 109 , 128 ] , [ 110 , 88 ] , [ 91 , 95 ] ] ;
14274: LD_ADDR_VAR 0 2
14278: PUSH
14279: LD_INT 66
14281: PUSH
14282: LD_INT 86
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: PUSH
14289: LD_INT 109
14291: PUSH
14292: LD_INT 128
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: LD_INT 110
14301: PUSH
14302: LD_INT 88
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 91
14311: PUSH
14312: LD_INT 95
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: ST_TO_ADDR
// find_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) , false ) ;
14325: LD_EXP 92
14329: PPUSH
14330: LD_INT 3
14332: PUSH
14333: LD_INT 33
14335: PUSH
14336: LD_INT 2
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PPUSH
14347: CALL_OW 72
14351: PPUSH
14352: LD_INT 22
14354: PUSH
14355: LD_EXP 6
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: LD_INT 25
14366: PUSH
14367: LD_INT 1
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PPUSH
14378: CALL_OW 69
14382: PPUSH
14383: LD_INT 0
14385: PPUSH
14386: CALL 11210 0 3
// find_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) ) ;
14390: LD_EXP 92
14394: PPUSH
14395: LD_INT 33
14397: PUSH
14398: LD_INT 2
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: EMPTY
14406: LIST
14407: PPUSH
14408: CALL_OW 72
14412: PPUSH
14413: LD_INT 22
14415: PUSH
14416: LD_EXP 6
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: PUSH
14425: LD_INT 25
14427: PUSH
14428: LD_INT 3
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PPUSH
14439: CALL_OW 69
14443: PPUSH
14444: LD_INT 34
14446: PUSH
14447: LD_INT 30
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: EMPTY
14455: LIST
14456: PPUSH
14457: CALL_OW 69
14461: PPUSH
14462: CALL 11555 0 3
// wait_for_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , 0 0$30 ) ;
14466: LD_EXP 92
14470: PPUSH
14471: LD_INT 3
14473: PUSH
14474: LD_INT 33
14476: PUSH
14477: LD_INT 2
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PPUSH
14488: CALL_OW 72
14492: PPUSH
14493: LD_INT 1050
14495: PPUSH
14496: CALL 11781 0 2
// wait_for_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) , 0 0$30 ) ;
14500: LD_EXP 92
14504: PPUSH
14505: LD_INT 33
14507: PUSH
14508: LD_INT 2
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: PUSH
14515: EMPTY
14516: LIST
14517: PPUSH
14518: CALL_OW 72
14522: PPUSH
14523: LD_INT 34
14525: PUSH
14526: LD_INT 30
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: PUSH
14533: EMPTY
14534: LIST
14535: PPUSH
14536: CALL_OW 69
14540: PPUSH
14541: LD_INT 1050
14543: PPUSH
14544: CALL 11639 0 3
// ComStop ( zbytek ) ;
14548: LD_EXP 92
14552: PPUSH
14553: CALL_OW 141
// for i in path do
14557: LD_ADDR_VAR 0 3
14561: PUSH
14562: LD_VAR 0 2
14566: PUSH
14567: FOR_IN
14568: IFFALSE 14599
// AddComAgressiveMove ( zbytek , i [ 1 ] , i [ 2 ] ) ;
14570: LD_EXP 92
14574: PPUSH
14575: LD_VAR 0 3
14579: PUSH
14580: LD_INT 1
14582: ARRAY
14583: PPUSH
14584: LD_VAR 0 3
14588: PUSH
14589: LD_INT 2
14591: ARRAY
14592: PPUSH
14593: CALL_OW 174
14597: GO 14567
14599: POP
14600: POP
// RaiseSailEvent ( 300 ) ;
14601: LD_INT 300
14603: PPUSH
14604: CALL_OW 427
// if not byl_hint_PA then
14608: LD_EXP 96
14612: NOT
14613: IFFALSE 14654
// begin while not ContactTime ( [ ai ] ) do
14615: LD_EXP 6
14619: PUSH
14620: EMPTY
14621: LIST
14622: PPUSH
14623: CALL_OW 462
14627: NOT
14628: IFFALSE 14639
// wait ( 0 0$1 ) ;
14630: LD_INT 35
14632: PPUSH
14633: CALL_OW 67
14637: GO 14615
// MyHint ( PriorityAttacks ) ;
14639: LD_STRING PriorityAttacks
14641: PPUSH
14642: CALL 12036 0 1
// byl_hint_PA := true ;
14646: LD_ADDR_EXP 96
14650: PUSH
14651: LD_INT 1
14653: ST_TO_ADDR
// end ; end ;
14654: LD_VAR 0 1
14658: RET
// export function f_normal4_utok ; var path , i ; begin
14659: LD_INT 0
14661: PPUSH
14662: PPUSH
14663: PPUSH
// path := [ [ 38 , 16 ] , [ 75 , 36 ] , [ 91 , 95 ] ] ;
14664: LD_ADDR_VAR 0 2
14668: PUSH
14669: LD_INT 38
14671: PUSH
14672: LD_INT 16
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: PUSH
14679: LD_INT 75
14681: PUSH
14682: LD_INT 36
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: LD_INT 91
14691: PUSH
14692: LD_INT 95
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: LIST
14703: ST_TO_ADDR
// find_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) , false ) ;
14704: LD_EXP 92
14708: PPUSH
14709: LD_INT 3
14711: PUSH
14712: LD_INT 33
14714: PUSH
14715: LD_INT 2
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: PPUSH
14726: CALL_OW 72
14730: PPUSH
14731: LD_INT 22
14733: PUSH
14734: LD_EXP 6
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PUSH
14743: LD_INT 25
14745: PUSH
14746: LD_INT 1
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PPUSH
14757: CALL_OW 69
14761: PPUSH
14762: LD_INT 0
14764: PPUSH
14765: CALL 11210 0 3
// find_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) ) ;
14769: LD_EXP 92
14773: PPUSH
14774: LD_INT 33
14776: PUSH
14777: LD_INT 2
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: EMPTY
14785: LIST
14786: PPUSH
14787: CALL_OW 72
14791: PPUSH
14792: LD_INT 22
14794: PUSH
14795: LD_EXP 6
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PUSH
14804: LD_INT 25
14806: PUSH
14807: LD_INT 3
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PPUSH
14818: CALL_OW 69
14822: PPUSH
14823: LD_INT 34
14825: PUSH
14826: LD_INT 30
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: EMPTY
14834: LIST
14835: PPUSH
14836: CALL_OW 69
14840: PPUSH
14841: CALL 11555 0 3
// wait_for_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , 0 0$30 ) ;
14845: LD_EXP 92
14849: PPUSH
14850: LD_INT 3
14852: PUSH
14853: LD_INT 33
14855: PUSH
14856: LD_INT 2
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PPUSH
14867: CALL_OW 72
14871: PPUSH
14872: LD_INT 1050
14874: PPUSH
14875: CALL 11781 0 2
// wait_for_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) , 0 0$30 ) ;
14879: LD_EXP 92
14883: PPUSH
14884: LD_INT 33
14886: PUSH
14887: LD_INT 2
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: EMPTY
14895: LIST
14896: PPUSH
14897: CALL_OW 72
14901: PPUSH
14902: LD_INT 34
14904: PUSH
14905: LD_INT 30
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PUSH
14912: EMPTY
14913: LIST
14914: PPUSH
14915: CALL_OW 69
14919: PPUSH
14920: LD_INT 1050
14922: PPUSH
14923: CALL 11639 0 3
// ComStop ( zbytek ) ;
14927: LD_EXP 92
14931: PPUSH
14932: CALL_OW 141
// for i in path do
14936: LD_ADDR_VAR 0 3
14940: PUSH
14941: LD_VAR 0 2
14945: PUSH
14946: FOR_IN
14947: IFFALSE 14978
// AddComAgressiveMove ( zbytek , i [ 1 ] , i [ 2 ] ) ;
14949: LD_EXP 92
14953: PPUSH
14954: LD_VAR 0 3
14958: PUSH
14959: LD_INT 1
14961: ARRAY
14962: PPUSH
14963: LD_VAR 0 3
14967: PUSH
14968: LD_INT 2
14970: ARRAY
14971: PPUSH
14972: CALL_OW 174
14976: GO 14946
14978: POP
14979: POP
// RaiseSailEvent ( 300 ) ;
14980: LD_INT 300
14982: PPUSH
14983: CALL_OW 427
// if not byl_hint_PA then
14987: LD_EXP 96
14991: NOT
14992: IFFALSE 15033
// begin while not ContactTime ( [ ai ] ) do
14994: LD_EXP 6
14998: PUSH
14999: EMPTY
15000: LIST
15001: PPUSH
15002: CALL_OW 462
15006: NOT
15007: IFFALSE 15018
// wait ( 0 0$1 ) ;
15009: LD_INT 35
15011: PPUSH
15012: CALL_OW 67
15016: GO 14994
// MyHint ( PriorityAttacks ) ;
15018: LD_STRING PriorityAttacks
15020: PPUSH
15021: CALL 12036 0 1
// byl_hint_PA := true ;
15025: LD_ADDR_EXP 96
15029: PUSH
15030: LD_INT 1
15032: ST_TO_ADDR
// end ; end ;
15033: LD_VAR 0 1
15037: RET
// export function f_vsevolod_utok ; var path , i ; begin
15038: LD_INT 0
15040: PPUSH
15041: PPUSH
15042: PPUSH
// path := [ [ 43 , 17 ] , [ 41 , 7 ] ] ;
15043: LD_ADDR_VAR 0 2
15047: PUSH
15048: LD_INT 43
15050: PUSH
15051: LD_INT 17
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PUSH
15058: LD_INT 41
15060: PUSH
15061: LD_INT 7
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: ST_TO_ADDR
// find_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) , false ) ;
15072: LD_EXP 92
15076: PPUSH
15077: LD_INT 3
15079: PUSH
15080: LD_INT 33
15082: PUSH
15083: LD_INT 2
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: PPUSH
15094: CALL_OW 72
15098: PPUSH
15099: LD_INT 22
15101: PUSH
15102: LD_EXP 6
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: LD_INT 25
15113: PUSH
15114: LD_INT 1
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: PPUSH
15125: CALL_OW 69
15129: PPUSH
15130: LD_INT 0
15132: PPUSH
15133: CALL 11210 0 3
// find_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) ) ;
15137: LD_EXP 92
15141: PPUSH
15142: LD_INT 33
15144: PUSH
15145: LD_INT 2
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PUSH
15152: EMPTY
15153: LIST
15154: PPUSH
15155: CALL_OW 72
15159: PPUSH
15160: LD_INT 22
15162: PUSH
15163: LD_EXP 6
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: PUSH
15172: LD_INT 25
15174: PUSH
15175: LD_INT 3
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PPUSH
15186: CALL_OW 69
15190: PPUSH
15191: LD_INT 34
15193: PUSH
15194: LD_INT 30
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: PUSH
15201: EMPTY
15202: LIST
15203: PPUSH
15204: CALL_OW 69
15208: PPUSH
15209: CALL 11555 0 3
// wait_for_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , 0 0$30 ) ;
15213: LD_EXP 92
15217: PPUSH
15218: LD_INT 3
15220: PUSH
15221: LD_INT 33
15223: PUSH
15224: LD_INT 2
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: PPUSH
15235: CALL_OW 72
15239: PPUSH
15240: LD_INT 1050
15242: PPUSH
15243: CALL 11781 0 2
// wait_for_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) , 0 0$30 ) ;
15247: LD_EXP 92
15251: PPUSH
15252: LD_INT 33
15254: PUSH
15255: LD_INT 2
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PUSH
15262: EMPTY
15263: LIST
15264: PPUSH
15265: CALL_OW 72
15269: PPUSH
15270: LD_INT 34
15272: PUSH
15273: LD_INT 30
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PUSH
15280: EMPTY
15281: LIST
15282: PPUSH
15283: CALL_OW 69
15287: PPUSH
15288: LD_INT 1050
15290: PPUSH
15291: CALL 11639 0 3
// ComStop ( zbytek ) ;
15295: LD_EXP 92
15299: PPUSH
15300: CALL_OW 141
// for i in path do
15304: LD_ADDR_VAR 0 3
15308: PUSH
15309: LD_VAR 0 2
15313: PUSH
15314: FOR_IN
15315: IFFALSE 15346
// AddComAgressiveMove ( zbytek , i [ 1 ] , i [ 2 ] ) ;
15317: LD_EXP 92
15321: PPUSH
15322: LD_VAR 0 3
15326: PUSH
15327: LD_INT 1
15329: ARRAY
15330: PPUSH
15331: LD_VAR 0 3
15335: PUSH
15336: LD_INT 2
15338: ARRAY
15339: PPUSH
15340: CALL_OW 174
15344: GO 15314
15346: POP
15347: POP
// AddComWait ( zbytek , 0 0$5 ) ;
15348: LD_EXP 92
15352: PPUSH
15353: LD_INT 175
15355: PPUSH
15356: CALL_OW 202
// AddComReturn ( zbytek ) ;
15360: LD_EXP 92
15364: PPUSH
15365: CALL_OW 204
// end ;
15369: LD_VAR 0 1
15373: RET
// export function f_vsevolod_final_utok ; var path , i ; begin
15374: LD_INT 0
15376: PPUSH
15377: PPUSH
15378: PPUSH
// path := [ [ 43 , 17 ] , [ 41 , 7 ] , [ 52 , 7 ] ] ;
15379: LD_ADDR_VAR 0 2
15383: PUSH
15384: LD_INT 43
15386: PUSH
15387: LD_INT 17
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 41
15396: PUSH
15397: LD_INT 7
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PUSH
15404: LD_INT 52
15406: PUSH
15407: LD_INT 7
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: LIST
15418: ST_TO_ADDR
// find_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) , false ) ;
15419: LD_EXP 92
15423: PPUSH
15424: LD_INT 3
15426: PUSH
15427: LD_INT 33
15429: PUSH
15430: LD_INT 2
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PPUSH
15441: CALL_OW 72
15445: PPUSH
15446: LD_INT 22
15448: PUSH
15449: LD_EXP 6
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PUSH
15458: LD_INT 25
15460: PUSH
15461: LD_INT 1
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PPUSH
15472: CALL_OW 69
15476: PPUSH
15477: LD_INT 0
15479: PPUSH
15480: CALL 11210 0 3
// find_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) ) ;
15484: LD_EXP 92
15488: PPUSH
15489: LD_INT 33
15491: PUSH
15492: LD_INT 2
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: EMPTY
15500: LIST
15501: PPUSH
15502: CALL_OW 72
15506: PPUSH
15507: LD_INT 22
15509: PUSH
15510: LD_EXP 6
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: PUSH
15519: LD_INT 25
15521: PUSH
15522: LD_INT 3
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: PPUSH
15533: CALL_OW 69
15537: PPUSH
15538: LD_INT 34
15540: PUSH
15541: LD_INT 30
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PUSH
15548: EMPTY
15549: LIST
15550: PPUSH
15551: CALL_OW 69
15555: PPUSH
15556: CALL 11555 0 3
// wait_for_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , 0 0$30 ) ;
15560: LD_EXP 92
15564: PPUSH
15565: LD_INT 3
15567: PUSH
15568: LD_INT 33
15570: PUSH
15571: LD_INT 2
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PPUSH
15582: CALL_OW 72
15586: PPUSH
15587: LD_INT 1050
15589: PPUSH
15590: CALL 11781 0 2
// wait_for_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) , 0 0$30 ) ;
15594: LD_EXP 92
15598: PPUSH
15599: LD_INT 33
15601: PUSH
15602: LD_INT 2
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: PUSH
15609: EMPTY
15610: LIST
15611: PPUSH
15612: CALL_OW 72
15616: PPUSH
15617: LD_INT 34
15619: PUSH
15620: LD_INT 30
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: PUSH
15627: EMPTY
15628: LIST
15629: PPUSH
15630: CALL_OW 69
15634: PPUSH
15635: LD_INT 1050
15637: PPUSH
15638: CALL 11639 0 3
// ComRemember ( zbytek ) ;
15642: LD_EXP 92
15646: PPUSH
15647: CALL_OW 143
// for i in path do
15651: LD_ADDR_VAR 0 3
15655: PUSH
15656: LD_VAR 0 2
15660: PUSH
15661: FOR_IN
15662: IFFALSE 15693
// AddComAgressiveMove ( zbytek , i [ 1 ] , i [ 2 ] ) ;
15664: LD_EXP 92
15668: PPUSH
15669: LD_VAR 0 3
15673: PUSH
15674: LD_INT 1
15676: ARRAY
15677: PPUSH
15678: LD_VAR 0 3
15682: PUSH
15683: LD_INT 2
15685: ARRAY
15686: PPUSH
15687: CALL_OW 174
15691: GO 15661
15693: POP
15694: POP
// AddComAttackUnit ( zbytek , Vsevolod ) ;
15695: LD_EXP 92
15699: PPUSH
15700: LD_EXP 71
15704: PPUSH
15705: CALL_OW 175
// end ; end_of_file
15709: LD_VAR 0 1
15713: RET
// var rDef1 , rDef2 ; export idDef1 , idDef2 ; export toDef1 , toDef2 ; every 0 0$1 do
15714: GO 15716
15716: DISABLE
// begin rDef1 := McRegistry ( ai , [ [ mc_reg_refresh_time , 0 0$2 ] , [ mc_reg_area_to_guard , def_base ] , [ mc_reg_area_to_protect , def_base ] ] ) ;
15717: LD_ADDR_LOC 3
15721: PUSH
15722: LD_EXP 6
15726: PPUSH
15727: LD_INT 1
15729: PUSH
15730: LD_INT 70
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PUSH
15737: LD_INT 2
15739: PUSH
15740: LD_INT 19
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: PUSH
15747: LD_INT 3
15749: PUSH
15750: LD_INT 19
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: LIST
15761: PPUSH
15762: CALL_OW 399
15766: ST_TO_ADDR
// rDef2 := McRegistry ( ai , [ [ mc_reg_refresh_time , 0 0$2 ] , [ mc_reg_area_to_guard , def_base3 ] , [ mc_reg_area_to_protect , def_base3 ] ] ) ;
15767: LD_ADDR_LOC 4
15771: PUSH
15772: LD_EXP 6
15776: PPUSH
15777: LD_INT 1
15779: PUSH
15780: LD_INT 70
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PUSH
15787: LD_INT 2
15789: PUSH
15790: LD_INT 18
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: LD_INT 3
15799: PUSH
15800: LD_INT 18
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: LIST
15811: PPUSH
15812: CALL_OW 399
15816: ST_TO_ADDR
// idDef1 := McDefend ( 10 , rDef1 , toDef1 , [ mc_def_advantage , mcdef_difficulty ] ) ;
15817: LD_ADDR_EXP 97
15821: PUSH
15822: LD_INT 10
15824: PPUSH
15825: LD_LOC 3
15829: PPUSH
15830: LD_EXP 99
15834: PPUSH
15835: LD_INT 1
15837: PUSH
15838: LD_EXP 16
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PPUSH
15847: CALL_OW 401
15851: ST_TO_ADDR
// idDef2 := McDefend ( 10 , rDef2 , toDef2 , [ mc_def_advantage , na_kopci_mcdef_difficulty ] ) ;
15852: LD_ADDR_EXP 98
15856: PUSH
15857: LD_INT 10
15859: PPUSH
15860: LD_LOC 4
15864: PPUSH
15865: LD_EXP 100
15869: PPUSH
15870: LD_INT 1
15872: PUSH
15873: LD_EXP 18
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PPUSH
15882: CALL_OW 401
15886: ST_TO_ADDR
// end ;
15887: END
// every 0 0$2 do var r1 , r2 ;
15888: GO 15890
15890: DISABLE
15891: LD_INT 0
15893: PPUSH
15894: PPUSH
// begin todef1 := UnitFilter ( ( fort isect ( b3 ^ b4 ) ) ^ ( ( a3 ^ a4 ) isect sol ) ^ attack ^ defence , [ [ f_side , ai ] , [ f_ok ] ] ) ;
15895: LD_ADDR_EXP 99
15899: PUSH
15900: LD_EXP 120
15904: PUSH
15905: LD_EXP 131
15909: PUSH
15910: LD_EXP 132
15914: ADD
15915: ISECT
15916: PUSH
15917: LD_EXP 136
15921: PUSH
15922: LD_EXP 137
15926: ADD
15927: PUSH
15928: LD_EXP 122
15932: ISECT
15933: ADD
15934: PUSH
15935: LD_EXP 139
15939: ADD
15940: PUSH
15941: LD_EXP 140
15945: ADD
15946: PPUSH
15947: LD_INT 22
15949: PUSH
15950: LD_EXP 6
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 50
15961: PUSH
15962: EMPTY
15963: LIST
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PPUSH
15969: CALL_OW 72
15973: ST_TO_ADDR
// todef2 := UnitFilter ( ( fort isect b1 ) ^ ( a1 isect sol ) , [ [ f_side , ai ] , [ f_ok ] ] ) ;
15974: LD_ADDR_EXP 100
15978: PUSH
15979: LD_EXP 120
15983: PUSH
15984: LD_EXP 129
15988: ISECT
15989: PUSH
15990: LD_EXP 134
15994: PUSH
15995: LD_EXP 122
15999: ISECT
16000: ADD
16001: PPUSH
16002: LD_INT 22
16004: PUSH
16005: LD_EXP 6
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: PUSH
16014: LD_INT 50
16016: PUSH
16017: EMPTY
16018: LIST
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PPUSH
16024: CALL_OW 72
16028: ST_TO_ADDR
// r1 := GetMcUnits ( idDef1 ) diff todef1 ;
16029: LD_ADDR_VAR 0 1
16033: PUSH
16034: LD_EXP 97
16038: PPUSH
16039: CALL_OW 389
16043: PUSH
16044: LD_EXP 99
16048: DIFF
16049: ST_TO_ADDR
// add_to ( r1 ) ;
16050: LD_VAR 0 1
16054: PPUSH
16055: CALL 31050 0 1
// AddMcUnits ( idDef1 , todef1 ) ;
16059: LD_EXP 97
16063: PPUSH
16064: LD_EXP 99
16068: PPUSH
16069: CALL_OW 390
// r2 := GetMcUnits ( idDef2 ) diff todef2 ;
16073: LD_ADDR_VAR 0 2
16077: PUSH
16078: LD_EXP 98
16082: PPUSH
16083: CALL_OW 389
16087: PUSH
16088: LD_EXP 100
16092: DIFF
16093: ST_TO_ADDR
// add_to ( r2 ) ;
16094: LD_VAR 0 2
16098: PPUSH
16099: CALL 31050 0 1
// if not ovsyenkotaken or ovsyenkocaptured then
16103: LD_EXP 14
16107: NOT
16108: PUSH
16109: LD_EXP 15
16113: OR
16114: IFFALSE 16130
// AddMcUnits ( idDef2 , todef2 ) ;
16116: LD_EXP 98
16120: PPUSH
16121: LD_EXP 100
16125: PPUSH
16126: CALL_OW 390
// enable ;
16130: ENABLE
// end ; end_of_file
16131: PPOPN 2
16133: END
// export opravovat ; every 0 0$1.0 do var set_fuel , fuel ;
16134: GO 16136
16136: DISABLE
16137: LD_INT 0
16139: PPUSH
16140: PPUSH
// begin for set_fuel in FilterUnitsInArea ( near_base , [ [ f_type , unit_vehicle ] , [ f_side , ai ] ] ) do
16141: LD_ADDR_VAR 0 1
16145: PUSH
16146: LD_INT 2
16148: PPUSH
16149: LD_INT 21
16151: PUSH
16152: LD_INT 2
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: LD_INT 22
16161: PUSH
16162: LD_EXP 6
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PPUSH
16175: CALL_OW 70
16179: PUSH
16180: FOR_IN
16181: IFFALSE 16228
// begin fuel := GetFuel ( set_fuel ) ;
16183: LD_ADDR_VAR 0 2
16187: PUSH
16188: LD_VAR 0 1
16192: PPUSH
16193: CALL_OW 261
16197: ST_TO_ADDR
// if fuel <= 80 then
16198: LD_VAR 0 2
16202: PUSH
16203: LD_INT 80
16205: LESSEQUAL
16206: IFFALSE 16226
// SetFuel ( set_fuel , fuel + 20 ) ;
16208: LD_VAR 0 1
16212: PPUSH
16213: LD_VAR 0 2
16217: PUSH
16218: LD_INT 20
16220: PLUS
16221: PPUSH
16222: CALL_OW 240
// end ;
16226: GO 16180
16228: POP
16229: POP
// enable ;
16230: ENABLE
// end ;
16231: PPOPN 2
16233: END
// export rep_cars ; export brk_cars ; every 0 0$5 do var i ;
16234: GO 16236
16236: DISABLE
16237: LD_INT 0
16239: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , ai ] , [ f_type , unit_vehicle ] ] ) do
16240: LD_ADDR_VAR 0 1
16244: PUSH
16245: LD_INT 22
16247: PUSH
16248: LD_EXP 6
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 21
16259: PUSH
16260: LD_INT 2
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: PPUSH
16271: CALL_OW 69
16275: PUSH
16276: FOR_IN
16277: IFFALSE 16360
// begin if GetLives ( i ) < 600 then
16279: LD_VAR 0 1
16283: PPUSH
16284: CALL_OW 256
16288: PUSH
16289: LD_INT 600
16291: LESS
16292: IFFALSE 16327
// begin ComMoveXY ( i , 37 , 59 ) ;
16294: LD_VAR 0 1
16298: PPUSH
16299: LD_INT 37
16301: PPUSH
16302: LD_INT 59
16304: PPUSH
16305: CALL_OW 111
// brk_cars := brk_cars union i ;
16309: LD_ADDR_EXP 103
16313: PUSH
16314: LD_EXP 103
16318: PUSH
16319: LD_VAR 0 1
16323: UNION
16324: ST_TO_ADDR
// end else
16325: GO 16358
// if GetLives ( i ) > 950 then
16327: LD_VAR 0 1
16331: PPUSH
16332: CALL_OW 256
16336: PUSH
16337: LD_INT 950
16339: GREATER
16340: IFFALSE 16358
// begin brk_cars := brk_cars diff i ;
16342: LD_ADDR_EXP 103
16346: PUSH
16347: LD_EXP 103
16351: PUSH
16352: LD_VAR 0 1
16356: DIFF
16357: ST_TO_ADDR
// end ; end ;
16358: GO 16276
16360: POP
16361: POP
// enable ;
16362: ENABLE
// end ;
16363: PPOPN 1
16365: END
// every 0 0$5 + 0 0$2 do var zivoty , i ;
16366: GO 16368
16368: DISABLE
16369: LD_INT 0
16371: PPUSH
16372: PPUSH
// begin rep_cars := [ ] ;
16373: LD_ADDR_EXP 102
16377: PUSH
16378: EMPTY
16379: ST_TO_ADDR
// for i in FilterUnitsInArea ( repair_bay1 , [ [ f_side , ai ] , [ f_type , unit_vehicle ] ] ) do
16380: LD_ADDR_VAR 0 2
16384: PUSH
16385: LD_INT 27
16387: PPUSH
16388: LD_INT 22
16390: PUSH
16391: LD_EXP 6
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: LD_INT 21
16402: PUSH
16403: LD_INT 2
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: PPUSH
16414: CALL_OW 70
16418: PUSH
16419: FOR_IN
16420: IFFALSE 16476
// begin if GetLives ( i ) < 1000 then
16422: LD_VAR 0 2
16426: PPUSH
16427: CALL_OW 256
16431: PUSH
16432: LD_INT 1000
16434: LESS
16435: IFFALSE 16474
// begin rep_cars := rep_cars ^ i ;
16437: LD_ADDR_EXP 102
16441: PUSH
16442: LD_EXP 102
16446: PUSH
16447: LD_VAR 0 2
16451: ADD
16452: ST_TO_ADDR
// zivoty := zivoty ^ GetLives ( i ) ;
16453: LD_ADDR_VAR 0 1
16457: PUSH
16458: LD_VAR 0 1
16462: PUSH
16463: LD_VAR 0 2
16467: PPUSH
16468: CALL_OW 256
16472: ADD
16473: ST_TO_ADDR
// end ; end ;
16474: GO 16419
16476: POP
16477: POP
// SortListByListAsc ( rep_cars , zivoty ) ;
16478: LD_EXP 102
16482: PPUSH
16483: LD_VAR 0 1
16487: PPUSH
16488: CALL_OW 76
// enable ;
16492: ENABLE
// end ;
16493: PPOPN 2
16495: END
// export opr_mec ; every 0 0$5 + 0 0$4 trigger opravovat do var a ;
16496: LD_EXP 101
16500: IFFALSE 16675
16502: GO 16504
16504: DISABLE
16505: LD_INT 0
16507: PPUSH
// begin a := UnitFilter ( mec , [ f_not , [ f_hastask ] ] ) ;
16508: LD_ADDR_VAR 0 1
16512: PUSH
16513: LD_EXP 126
16517: PPUSH
16518: LD_INT 3
16520: PUSH
16521: LD_INT 60
16523: PUSH
16524: EMPTY
16525: LIST
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PPUSH
16531: CALL_OW 72
16535: ST_TO_ADDR
// ComStop ( a ) ;
16536: LD_VAR 0 1
16540: PPUSH
16541: CALL_OW 141
// ComReturn ( a ) ;
16545: LD_VAR 0 1
16549: PPUSH
16550: CALL_OW 144
// opr_mec := opr_mec diff a ;
16554: LD_ADDR_EXP 104
16558: PUSH
16559: LD_EXP 104
16563: PUSH
16564: LD_VAR 0 1
16568: DIFF
16569: ST_TO_ADDR
// if rep_cars then
16570: LD_EXP 102
16574: IFFALSE 16674
// begin a := get_x_best ( UnitFilter ( mec , [ [ f_dist , rep_cars [ 1 ] , 20 ] ] ) , 2 , skill_mechanical , 0 , false ) ;
16576: LD_ADDR_VAR 0 1
16580: PUSH
16581: LD_EXP 126
16585: PPUSH
16586: LD_INT 91
16588: PUSH
16589: LD_EXP 102
16593: PUSH
16594: LD_INT 1
16596: ARRAY
16597: PUSH
16598: LD_INT 20
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: LIST
16605: PUSH
16606: EMPTY
16607: LIST
16608: PPUSH
16609: CALL_OW 72
16613: PPUSH
16614: LD_INT 2
16616: PPUSH
16617: LD_INT 3
16619: PPUSH
16620: LD_INT 0
16622: PPUSH
16623: LD_INT 0
16625: PPUSH
16626: CALL 10367 0 5
16630: ST_TO_ADDR
// opr_mec := opr_mec union a ;
16631: LD_ADDR_EXP 104
16635: PUSH
16636: LD_EXP 104
16640: PUSH
16641: LD_VAR 0 1
16645: UNION
16646: ST_TO_ADDR
// ComExitBuilding ( a ) ;
16647: LD_VAR 0 1
16651: PPUSH
16652: CALL_OW 122
// AddComRepairVehicle ( a , rep_cars [ 1 ] ) ;
16656: LD_VAR 0 1
16660: PPUSH
16661: LD_EXP 102
16665: PUSH
16666: LD_INT 1
16668: ARRAY
16669: PPUSH
16670: CALL_OW 189
// end ; enable ;
16674: ENABLE
// end ; end_of_file
16675: PPOPN 1
16677: END
// var d1 , d2 , d3 , d4 , d5 , d6 , d7 , d8 , d9 , d10 ; every 0 0$1 do
16678: GO 16680
16680: DISABLE
// begin d1 := [ us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun ] ;
16681: LD_ADDR_LOC 5
16685: PUSH
16686: LD_INT 4
16688: PUSH
16689: LD_INT 1
16691: PUSH
16692: LD_INT 1
16694: PUSH
16695: LD_INT 4
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: ST_TO_ADDR
// d2 := [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] ;
16704: LD_ADDR_LOC 6
16708: PUSH
16709: LD_INT 4
16711: PUSH
16712: LD_INT 1
16714: PUSH
16715: LD_INT 1
16717: PUSH
16718: LD_INT 5
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: ST_TO_ADDR
// d3 := [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] ;
16727: LD_ADDR_LOC 7
16731: PUSH
16732: LD_INT 4
16734: PUSH
16735: LD_INT 1
16737: PUSH
16738: LD_INT 1
16740: PUSH
16741: LD_INT 6
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: ST_TO_ADDR
// d5 := [ us_heavy_tracked , engine_combustion , control_remote , us_gatling_gun ] ;
16750: LD_ADDR_LOC 9
16754: PUSH
16755: LD_INT 4
16757: PUSH
16758: LD_INT 1
16760: PUSH
16761: LD_INT 2
16763: PUSH
16764: LD_INT 4
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: ST_TO_ADDR
// d6 := [ us_heavy_tracked , engine_combustion , control_remote , us_double_gun ] ;
16773: LD_ADDR_LOC 10
16777: PUSH
16778: LD_INT 4
16780: PUSH
16781: LD_INT 1
16783: PUSH
16784: LD_INT 2
16786: PUSH
16787: LD_INT 5
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: ST_TO_ADDR
// d7 := [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] ;
16796: LD_ADDR_LOC 11
16800: PUSH
16801: LD_INT 4
16803: PUSH
16804: LD_INT 1
16806: PUSH
16807: LD_INT 2
16809: PUSH
16810: LD_INT 6
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: ST_TO_ADDR
// end ;
16819: END
// every 0 0$10 do
16820: GO 16822
16822: DISABLE
// begin defence := FilterAllUnits ( [ [ f_side , ai ] , [ f_control , control_manual ] ] ) ;
16823: LD_ADDR_EXP 140
16827: PUSH
16828: LD_INT 22
16830: PUSH
16831: LD_EXP 6
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PUSH
16840: LD_INT 33
16842: PUSH
16843: LD_INT 1
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PPUSH
16854: CALL_OW 69
16858: ST_TO_ADDR
// attack := FilterAllUnits ( [ [ f_side , ai ] , [ f_control , control_remote ] ] ) ;
16859: LD_ADDR_EXP 139
16863: PUSH
16864: LD_INT 22
16866: PUSH
16867: LD_EXP 6
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: PUSH
16876: LD_INT 33
16878: PUSH
16879: LD_INT 2
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PPUSH
16890: CALL_OW 69
16894: ST_TO_ADDR
// end ;
16895: END
// var fact1 , fact2 ; every 0 0$1 do
16896: GO 16898
16898: DISABLE
// begin fact1 := fact isect b3 ;
16899: LD_ADDR_LOC 15
16903: PUSH
16904: LD_EXP 125
16908: PUSH
16909: LD_EXP 131
16913: ISECT
16914: ST_TO_ADDR
// if fact1 then
16915: LD_LOC 15
16919: IFFALSE 16935
// fact1 := fact1 [ 1 ] ;
16921: LD_ADDR_LOC 15
16925: PUSH
16926: LD_LOC 15
16930: PUSH
16931: LD_INT 1
16933: ARRAY
16934: ST_TO_ADDR
// fact2 := fact isect b4 ;
16935: LD_ADDR_LOC 16
16939: PUSH
16940: LD_EXP 125
16944: PUSH
16945: LD_EXP 132
16949: ISECT
16950: ST_TO_ADDR
// if fact2 then
16951: LD_LOC 16
16955: IFFALSE 16971
// fact2 := fact2 [ 1 ] ;
16957: LD_ADDR_LOC 16
16961: PUSH
16962: LD_LOC 16
16966: PUSH
16967: LD_INT 1
16969: ARRAY
16970: ST_TO_ADDR
// enable ;
16971: ENABLE
// end ;
16972: END
// every 0 0$20 trigger IsOk ( fact1 ) and fact1 in fact and IsIdle ( fact1 ) do var a , fact_attack ;
16973: LD_LOC 15
16977: PPUSH
16978: CALL_OW 302
16982: PUSH
16983: LD_LOC 15
16987: PUSH
16988: LD_EXP 125
16992: IN
16993: AND
16994: PUSH
16995: LD_LOC 15
16999: PPUSH
17000: CALL_OW 316
17004: AND
17005: IFFALSE 18027
17007: GO 17009
17009: DISABLE
17010: LD_INT 0
17012: PPUSH
17013: PPUSH
// begin fact_attack := FilterAllUnits ( [ [ f_side , ai ] , [ f_control , control_remote ] ] ) ;
17014: LD_ADDR_VAR 0 2
17018: PUSH
17019: LD_INT 22
17021: PUSH
17022: LD_EXP 6
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 33
17033: PUSH
17034: LD_INT 2
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PPUSH
17045: CALL_OW 69
17049: ST_TO_ADDR
// case true of ( tick < 15 15$0 and defence < 3 and CanBeConstructed ( fact1 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ) :
17050: LD_INT 1
17052: PUSH
17053: LD_OWVAR 1
17057: PUSH
17058: LD_INT 31500
17060: LESS
17061: PUSH
17062: LD_EXP 140
17066: PUSH
17067: LD_INT 3
17069: LESS
17070: AND
17071: PUSH
17072: LD_LOC 15
17076: PPUSH
17077: LD_LOC 5
17081: PUSH
17082: LD_INT 1
17084: ARRAY
17085: PPUSH
17086: LD_LOC 5
17090: PUSH
17091: LD_INT 2
17093: ARRAY
17094: PPUSH
17095: LD_LOC 5
17099: PUSH
17100: LD_INT 3
17102: ARRAY
17103: PPUSH
17104: LD_LOC 5
17108: PUSH
17109: LD_INT 4
17111: ARRAY
17112: PPUSH
17113: CALL_OW 448
17117: AND
17118: DOUBLE
17119: EQUAL
17120: IFTRUE 17124
17122: GO 17172
17124: POP
// begin ComConstruct ( fact1 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ;
17125: LD_LOC 15
17129: PPUSH
17130: LD_LOC 5
17134: PUSH
17135: LD_INT 1
17137: ARRAY
17138: PPUSH
17139: LD_LOC 5
17143: PUSH
17144: LD_INT 2
17146: ARRAY
17147: PPUSH
17148: LD_LOC 5
17152: PUSH
17153: LD_INT 3
17155: ARRAY
17156: PPUSH
17157: LD_LOC 5
17161: PUSH
17162: LD_INT 4
17164: ARRAY
17165: PPUSH
17166: CALL_OW 125
// end ; ( tick > 15 15$0 and tick < 30 30$0 and defence < 3 and CanBeConstructed ( fact1 , d2 [ 1 ] , d2 [ 2 ] , d2 [ 3 ] , d2 [ 4 ] ) ) :
17170: GO 18026
17172: LD_OWVAR 1
17176: PUSH
17177: LD_INT 31500
17179: GREATER
17180: PUSH
17181: LD_OWVAR 1
17185: PUSH
17186: LD_INT 63000
17188: LESS
17189: AND
17190: PUSH
17191: LD_EXP 140
17195: PUSH
17196: LD_INT 3
17198: LESS
17199: AND
17200: PUSH
17201: LD_LOC 15
17205: PPUSH
17206: LD_LOC 6
17210: PUSH
17211: LD_INT 1
17213: ARRAY
17214: PPUSH
17215: LD_LOC 6
17219: PUSH
17220: LD_INT 2
17222: ARRAY
17223: PPUSH
17224: LD_LOC 6
17228: PUSH
17229: LD_INT 3
17231: ARRAY
17232: PPUSH
17233: LD_LOC 6
17237: PUSH
17238: LD_INT 4
17240: ARRAY
17241: PPUSH
17242: CALL_OW 448
17246: AND
17247: DOUBLE
17248: EQUAL
17249: IFTRUE 17253
17251: GO 17301
17253: POP
// begin ComConstruct ( fact1 , d2 [ 1 ] , d2 [ 2 ] , d2 [ 3 ] , d2 [ 4 ] ) ;
17254: LD_LOC 15
17258: PPUSH
17259: LD_LOC 6
17263: PUSH
17264: LD_INT 1
17266: ARRAY
17267: PPUSH
17268: LD_LOC 6
17272: PUSH
17273: LD_INT 2
17275: ARRAY
17276: PPUSH
17277: LD_LOC 6
17281: PUSH
17282: LD_INT 3
17284: ARRAY
17285: PPUSH
17286: LD_LOC 6
17290: PUSH
17291: LD_INT 4
17293: ARRAY
17294: PPUSH
17295: CALL_OW 125
// end ; ( tick > 30 30$0 and defence < 2 and CanBeConstructed ( fact1 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ) :
17299: GO 18026
17301: LD_OWVAR 1
17305: PUSH
17306: LD_INT 63000
17308: GREATER
17309: PUSH
17310: LD_EXP 140
17314: PUSH
17315: LD_INT 2
17317: LESS
17318: AND
17319: PUSH
17320: LD_LOC 15
17324: PPUSH
17325: LD_LOC 5
17329: PUSH
17330: LD_INT 1
17332: ARRAY
17333: PPUSH
17334: LD_LOC 5
17338: PUSH
17339: LD_INT 2
17341: ARRAY
17342: PPUSH
17343: LD_LOC 5
17347: PUSH
17348: LD_INT 3
17350: ARRAY
17351: PPUSH
17352: LD_LOC 5
17356: PUSH
17357: LD_INT 4
17359: ARRAY
17360: PPUSH
17361: CALL_OW 448
17365: AND
17366: DOUBLE
17367: EQUAL
17368: IFTRUE 17372
17370: GO 17420
17372: POP
// begin ComConstruct ( fact1 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ;
17373: LD_LOC 15
17377: PPUSH
17378: LD_LOC 5
17382: PUSH
17383: LD_INT 1
17385: ARRAY
17386: PPUSH
17387: LD_LOC 5
17391: PUSH
17392: LD_INT 2
17394: ARRAY
17395: PPUSH
17396: LD_LOC 5
17400: PUSH
17401: LD_INT 3
17403: ARRAY
17404: PPUSH
17405: LD_LOC 5
17409: PUSH
17410: LD_INT 4
17412: ARRAY
17413: PPUSH
17414: CALL_OW 125
// end ; ( tick > 30 30$0 and defence < 4 and CanBeConstructed ( fact1 , d3 [ 1 ] , d3 [ 2 ] , d3 [ 3 ] , d3 [ 4 ] ) ) :
17418: GO 18026
17420: LD_OWVAR 1
17424: PUSH
17425: LD_INT 63000
17427: GREATER
17428: PUSH
17429: LD_EXP 140
17433: PUSH
17434: LD_INT 4
17436: LESS
17437: AND
17438: PUSH
17439: LD_LOC 15
17443: PPUSH
17444: LD_LOC 7
17448: PUSH
17449: LD_INT 1
17451: ARRAY
17452: PPUSH
17453: LD_LOC 7
17457: PUSH
17458: LD_INT 2
17460: ARRAY
17461: PPUSH
17462: LD_LOC 7
17466: PUSH
17467: LD_INT 3
17469: ARRAY
17470: PPUSH
17471: LD_LOC 7
17475: PUSH
17476: LD_INT 4
17478: ARRAY
17479: PPUSH
17480: CALL_OW 448
17484: AND
17485: DOUBLE
17486: EQUAL
17487: IFTRUE 17491
17489: GO 17539
17491: POP
// begin ComConstruct ( fact1 , d3 [ 1 ] , d3 [ 2 ] , d3 [ 3 ] , d3 [ 4 ] ) ;
17492: LD_LOC 15
17496: PPUSH
17497: LD_LOC 7
17501: PUSH
17502: LD_INT 1
17504: ARRAY
17505: PPUSH
17506: LD_LOC 7
17510: PUSH
17511: LD_INT 2
17513: ARRAY
17514: PPUSH
17515: LD_LOC 7
17519: PUSH
17520: LD_INT 3
17522: ARRAY
17523: PPUSH
17524: LD_LOC 7
17528: PUSH
17529: LD_INT 4
17531: ARRAY
17532: PPUSH
17533: CALL_OW 125
// end ; ( tick < 20 20$0 and fact_attack < 4 and CanBeConstructed ( fact1 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ) :
17537: GO 18026
17539: LD_OWVAR 1
17543: PUSH
17544: LD_INT 42000
17546: LESS
17547: PUSH
17548: LD_VAR 0 2
17552: PUSH
17553: LD_INT 4
17555: LESS
17556: AND
17557: PUSH
17558: LD_LOC 15
17562: PPUSH
17563: LD_LOC 10
17567: PUSH
17568: LD_INT 1
17570: ARRAY
17571: PPUSH
17572: LD_LOC 10
17576: PUSH
17577: LD_INT 2
17579: ARRAY
17580: PPUSH
17581: LD_LOC 10
17585: PUSH
17586: LD_INT 3
17588: ARRAY
17589: PPUSH
17590: LD_LOC 10
17594: PUSH
17595: LD_INT 4
17597: ARRAY
17598: PPUSH
17599: CALL_OW 448
17603: AND
17604: DOUBLE
17605: EQUAL
17606: IFTRUE 17610
17608: GO 17658
17610: POP
// begin ComConstruct ( fact1 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ;
17611: LD_LOC 15
17615: PPUSH
17616: LD_LOC 10
17620: PUSH
17621: LD_INT 1
17623: ARRAY
17624: PPUSH
17625: LD_LOC 10
17629: PUSH
17630: LD_INT 2
17632: ARRAY
17633: PPUSH
17634: LD_LOC 10
17638: PUSH
17639: LD_INT 3
17641: ARRAY
17642: PPUSH
17643: LD_LOC 10
17647: PUSH
17648: LD_INT 4
17650: ARRAY
17651: PPUSH
17652: CALL_OW 125
// end ; ( tick > 20 20$0 and tick < 30 30$0 and fact_attack < 3 and CanBeConstructed ( fact1 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ) :
17656: GO 18026
17658: LD_OWVAR 1
17662: PUSH
17663: LD_INT 42000
17665: GREATER
17666: PUSH
17667: LD_OWVAR 1
17671: PUSH
17672: LD_INT 63000
17674: LESS
17675: AND
17676: PUSH
17677: LD_VAR 0 2
17681: PUSH
17682: LD_INT 3
17684: LESS
17685: AND
17686: PUSH
17687: LD_LOC 15
17691: PPUSH
17692: LD_LOC 10
17696: PUSH
17697: LD_INT 1
17699: ARRAY
17700: PPUSH
17701: LD_LOC 10
17705: PUSH
17706: LD_INT 2
17708: ARRAY
17709: PPUSH
17710: LD_LOC 10
17714: PUSH
17715: LD_INT 3
17717: ARRAY
17718: PPUSH
17719: LD_LOC 10
17723: PUSH
17724: LD_INT 4
17726: ARRAY
17727: PPUSH
17728: CALL_OW 448
17732: AND
17733: DOUBLE
17734: EQUAL
17735: IFTRUE 17739
17737: GO 17787
17739: POP
// begin ComConstruct ( fact1 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ;
17740: LD_LOC 15
17744: PPUSH
17745: LD_LOC 10
17749: PUSH
17750: LD_INT 1
17752: ARRAY
17753: PPUSH
17754: LD_LOC 10
17758: PUSH
17759: LD_INT 2
17761: ARRAY
17762: PPUSH
17763: LD_LOC 10
17767: PUSH
17768: LD_INT 3
17770: ARRAY
17771: PPUSH
17772: LD_LOC 10
17776: PUSH
17777: LD_INT 4
17779: ARRAY
17780: PPUSH
17781: CALL_OW 125
// end ; ( tick > 30 30$0 and fact_attack < 4 and CanBeConstructed ( fact1 , d7 [ 1 ] , d7 [ 2 ] , d7 [ 3 ] , d7 [ 4 ] ) ) :
17785: GO 18026
17787: LD_OWVAR 1
17791: PUSH
17792: LD_INT 63000
17794: GREATER
17795: PUSH
17796: LD_VAR 0 2
17800: PUSH
17801: LD_INT 4
17803: LESS
17804: AND
17805: PUSH
17806: LD_LOC 15
17810: PPUSH
17811: LD_LOC 11
17815: PUSH
17816: LD_INT 1
17818: ARRAY
17819: PPUSH
17820: LD_LOC 11
17824: PUSH
17825: LD_INT 2
17827: ARRAY
17828: PPUSH
17829: LD_LOC 11
17833: PUSH
17834: LD_INT 3
17836: ARRAY
17837: PPUSH
17838: LD_LOC 11
17842: PUSH
17843: LD_INT 4
17845: ARRAY
17846: PPUSH
17847: CALL_OW 448
17851: AND
17852: DOUBLE
17853: EQUAL
17854: IFTRUE 17858
17856: GO 17906
17858: POP
// begin ComConstruct ( fact1 , d7 [ 1 ] , d7 [ 2 ] , d7 [ 3 ] , d7 [ 4 ] ) ;
17859: LD_LOC 15
17863: PPUSH
17864: LD_LOC 11
17868: PUSH
17869: LD_INT 1
17871: ARRAY
17872: PPUSH
17873: LD_LOC 11
17877: PUSH
17878: LD_INT 2
17880: ARRAY
17881: PPUSH
17882: LD_LOC 11
17886: PUSH
17887: LD_INT 3
17889: ARRAY
17890: PPUSH
17891: LD_LOC 11
17895: PUSH
17896: LD_INT 4
17898: ARRAY
17899: PPUSH
17900: CALL_OW 125
// end ; ( tick > 30 30$0 and fact_attack < 5 and CanBeConstructed ( fact1 , d5 [ 1 ] , d5 [ 2 ] , d5 [ 3 ] , d5 [ 4 ] ) ) :
17904: GO 18026
17906: LD_OWVAR 1
17910: PUSH
17911: LD_INT 63000
17913: GREATER
17914: PUSH
17915: LD_VAR 0 2
17919: PUSH
17920: LD_INT 5
17922: LESS
17923: AND
17924: PUSH
17925: LD_LOC 15
17929: PPUSH
17930: LD_LOC 9
17934: PUSH
17935: LD_INT 1
17937: ARRAY
17938: PPUSH
17939: LD_LOC 9
17943: PUSH
17944: LD_INT 2
17946: ARRAY
17947: PPUSH
17948: LD_LOC 9
17952: PUSH
17953: LD_INT 3
17955: ARRAY
17956: PPUSH
17957: LD_LOC 9
17961: PUSH
17962: LD_INT 4
17964: ARRAY
17965: PPUSH
17966: CALL_OW 448
17970: AND
17971: DOUBLE
17972: EQUAL
17973: IFTRUE 17977
17975: GO 18025
17977: POP
// begin ComConstruct ( fact1 , d5 [ 1 ] , d5 [ 2 ] , d5 [ 3 ] , d5 [ 4 ] ) ;
17978: LD_LOC 15
17982: PPUSH
17983: LD_LOC 9
17987: PUSH
17988: LD_INT 1
17990: ARRAY
17991: PPUSH
17992: LD_LOC 9
17996: PUSH
17997: LD_INT 2
17999: ARRAY
18000: PPUSH
18001: LD_LOC 9
18005: PUSH
18006: LD_INT 3
18008: ARRAY
18009: PPUSH
18010: LD_LOC 9
18014: PUSH
18015: LD_INT 4
18017: ARRAY
18018: PPUSH
18019: CALL_OW 125
// end ; end ;
18023: GO 18026
18025: POP
// enable ;
18026: ENABLE
// end ;
18027: PPOPN 2
18029: END
// every 0 0$20 trigger IsOk ( fact2 ) and fact2 in fact and IsIdle ( fact2 ) do var a , fact_attack ;
18030: LD_LOC 16
18034: PPUSH
18035: CALL_OW 302
18039: PUSH
18040: LD_LOC 16
18044: PUSH
18045: LD_EXP 125
18049: IN
18050: AND
18051: PUSH
18052: LD_LOC 16
18056: PPUSH
18057: CALL_OW 316
18061: AND
18062: IFFALSE 19084
18064: GO 18066
18066: DISABLE
18067: LD_INT 0
18069: PPUSH
18070: PPUSH
// begin fact_attack := FilterAllUnits ( [ [ f_side , ai ] , [ f_control , control_remote ] ] ) ;
18071: LD_ADDR_VAR 0 2
18075: PUSH
18076: LD_INT 22
18078: PUSH
18079: LD_EXP 6
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 33
18090: PUSH
18091: LD_INT 2
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PPUSH
18102: CALL_OW 69
18106: ST_TO_ADDR
// case true of ( tick < 15 15$0 and defence < 3 and CanBeConstructed ( fact2 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ) :
18107: LD_INT 1
18109: PUSH
18110: LD_OWVAR 1
18114: PUSH
18115: LD_INT 31500
18117: LESS
18118: PUSH
18119: LD_EXP 140
18123: PUSH
18124: LD_INT 3
18126: LESS
18127: AND
18128: PUSH
18129: LD_LOC 16
18133: PPUSH
18134: LD_LOC 5
18138: PUSH
18139: LD_INT 1
18141: ARRAY
18142: PPUSH
18143: LD_LOC 5
18147: PUSH
18148: LD_INT 2
18150: ARRAY
18151: PPUSH
18152: LD_LOC 5
18156: PUSH
18157: LD_INT 3
18159: ARRAY
18160: PPUSH
18161: LD_LOC 5
18165: PUSH
18166: LD_INT 4
18168: ARRAY
18169: PPUSH
18170: CALL_OW 448
18174: AND
18175: DOUBLE
18176: EQUAL
18177: IFTRUE 18181
18179: GO 18229
18181: POP
// begin ComConstruct ( fact2 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ;
18182: LD_LOC 16
18186: PPUSH
18187: LD_LOC 5
18191: PUSH
18192: LD_INT 1
18194: ARRAY
18195: PPUSH
18196: LD_LOC 5
18200: PUSH
18201: LD_INT 2
18203: ARRAY
18204: PPUSH
18205: LD_LOC 5
18209: PUSH
18210: LD_INT 3
18212: ARRAY
18213: PPUSH
18214: LD_LOC 5
18218: PUSH
18219: LD_INT 4
18221: ARRAY
18222: PPUSH
18223: CALL_OW 125
// end ; ( tick > 15 15$0 and tick < 30 30$0 and defence < 3 and CanBeConstructed ( fact2 , d2 [ 1 ] , d2 [ 2 ] , d2 [ 3 ] , d2 [ 4 ] ) ) :
18227: GO 19083
18229: LD_OWVAR 1
18233: PUSH
18234: LD_INT 31500
18236: GREATER
18237: PUSH
18238: LD_OWVAR 1
18242: PUSH
18243: LD_INT 63000
18245: LESS
18246: AND
18247: PUSH
18248: LD_EXP 140
18252: PUSH
18253: LD_INT 3
18255: LESS
18256: AND
18257: PUSH
18258: LD_LOC 16
18262: PPUSH
18263: LD_LOC 6
18267: PUSH
18268: LD_INT 1
18270: ARRAY
18271: PPUSH
18272: LD_LOC 6
18276: PUSH
18277: LD_INT 2
18279: ARRAY
18280: PPUSH
18281: LD_LOC 6
18285: PUSH
18286: LD_INT 3
18288: ARRAY
18289: PPUSH
18290: LD_LOC 6
18294: PUSH
18295: LD_INT 4
18297: ARRAY
18298: PPUSH
18299: CALL_OW 448
18303: AND
18304: DOUBLE
18305: EQUAL
18306: IFTRUE 18310
18308: GO 18358
18310: POP
// begin ComConstruct ( fact2 , d2 [ 1 ] , d2 [ 2 ] , d2 [ 3 ] , d2 [ 4 ] ) ;
18311: LD_LOC 16
18315: PPUSH
18316: LD_LOC 6
18320: PUSH
18321: LD_INT 1
18323: ARRAY
18324: PPUSH
18325: LD_LOC 6
18329: PUSH
18330: LD_INT 2
18332: ARRAY
18333: PPUSH
18334: LD_LOC 6
18338: PUSH
18339: LD_INT 3
18341: ARRAY
18342: PPUSH
18343: LD_LOC 6
18347: PUSH
18348: LD_INT 4
18350: ARRAY
18351: PPUSH
18352: CALL_OW 125
// end ; ( tick > 30 30$0 and defence < 2 and CanBeConstructed ( fact2 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ) :
18356: GO 19083
18358: LD_OWVAR 1
18362: PUSH
18363: LD_INT 63000
18365: GREATER
18366: PUSH
18367: LD_EXP 140
18371: PUSH
18372: LD_INT 2
18374: LESS
18375: AND
18376: PUSH
18377: LD_LOC 16
18381: PPUSH
18382: LD_LOC 5
18386: PUSH
18387: LD_INT 1
18389: ARRAY
18390: PPUSH
18391: LD_LOC 5
18395: PUSH
18396: LD_INT 2
18398: ARRAY
18399: PPUSH
18400: LD_LOC 5
18404: PUSH
18405: LD_INT 3
18407: ARRAY
18408: PPUSH
18409: LD_LOC 5
18413: PUSH
18414: LD_INT 4
18416: ARRAY
18417: PPUSH
18418: CALL_OW 448
18422: AND
18423: DOUBLE
18424: EQUAL
18425: IFTRUE 18429
18427: GO 18477
18429: POP
// begin ComConstruct ( fact2 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ;
18430: LD_LOC 16
18434: PPUSH
18435: LD_LOC 5
18439: PUSH
18440: LD_INT 1
18442: ARRAY
18443: PPUSH
18444: LD_LOC 5
18448: PUSH
18449: LD_INT 2
18451: ARRAY
18452: PPUSH
18453: LD_LOC 5
18457: PUSH
18458: LD_INT 3
18460: ARRAY
18461: PPUSH
18462: LD_LOC 5
18466: PUSH
18467: LD_INT 4
18469: ARRAY
18470: PPUSH
18471: CALL_OW 125
// end ; ( tick > 30 30$0 and defence < 4 and CanBeConstructed ( fact2 , d3 [ 1 ] , d3 [ 2 ] , d3 [ 3 ] , d3 [ 4 ] ) ) :
18475: GO 19083
18477: LD_OWVAR 1
18481: PUSH
18482: LD_INT 63000
18484: GREATER
18485: PUSH
18486: LD_EXP 140
18490: PUSH
18491: LD_INT 4
18493: LESS
18494: AND
18495: PUSH
18496: LD_LOC 16
18500: PPUSH
18501: LD_LOC 7
18505: PUSH
18506: LD_INT 1
18508: ARRAY
18509: PPUSH
18510: LD_LOC 7
18514: PUSH
18515: LD_INT 2
18517: ARRAY
18518: PPUSH
18519: LD_LOC 7
18523: PUSH
18524: LD_INT 3
18526: ARRAY
18527: PPUSH
18528: LD_LOC 7
18532: PUSH
18533: LD_INT 4
18535: ARRAY
18536: PPUSH
18537: CALL_OW 448
18541: AND
18542: DOUBLE
18543: EQUAL
18544: IFTRUE 18548
18546: GO 18596
18548: POP
// begin ComConstruct ( fact2 , d3 [ 1 ] , d3 [ 2 ] , d3 [ 3 ] , d3 [ 4 ] ) ;
18549: LD_LOC 16
18553: PPUSH
18554: LD_LOC 7
18558: PUSH
18559: LD_INT 1
18561: ARRAY
18562: PPUSH
18563: LD_LOC 7
18567: PUSH
18568: LD_INT 2
18570: ARRAY
18571: PPUSH
18572: LD_LOC 7
18576: PUSH
18577: LD_INT 3
18579: ARRAY
18580: PPUSH
18581: LD_LOC 7
18585: PUSH
18586: LD_INT 4
18588: ARRAY
18589: PPUSH
18590: CALL_OW 125
// end ; ( tick < 15 15$0 and fact_attack < 4 and CanBeConstructed ( fact2 , d5 [ 1 ] , d5 [ 2 ] , d5 [ 3 ] , d5 [ 4 ] ) ) :
18594: GO 19083
18596: LD_OWVAR 1
18600: PUSH
18601: LD_INT 31500
18603: LESS
18604: PUSH
18605: LD_VAR 0 2
18609: PUSH
18610: LD_INT 4
18612: LESS
18613: AND
18614: PUSH
18615: LD_LOC 16
18619: PPUSH
18620: LD_LOC 9
18624: PUSH
18625: LD_INT 1
18627: ARRAY
18628: PPUSH
18629: LD_LOC 9
18633: PUSH
18634: LD_INT 2
18636: ARRAY
18637: PPUSH
18638: LD_LOC 9
18642: PUSH
18643: LD_INT 3
18645: ARRAY
18646: PPUSH
18647: LD_LOC 9
18651: PUSH
18652: LD_INT 4
18654: ARRAY
18655: PPUSH
18656: CALL_OW 448
18660: AND
18661: DOUBLE
18662: EQUAL
18663: IFTRUE 18667
18665: GO 18715
18667: POP
// begin ComConstruct ( fact2 , d5 [ 1 ] , d5 [ 2 ] , d5 [ 3 ] , d5 [ 4 ] ) ;
18668: LD_LOC 16
18672: PPUSH
18673: LD_LOC 9
18677: PUSH
18678: LD_INT 1
18680: ARRAY
18681: PPUSH
18682: LD_LOC 9
18686: PUSH
18687: LD_INT 2
18689: ARRAY
18690: PPUSH
18691: LD_LOC 9
18695: PUSH
18696: LD_INT 3
18698: ARRAY
18699: PPUSH
18700: LD_LOC 9
18704: PUSH
18705: LD_INT 4
18707: ARRAY
18708: PPUSH
18709: CALL_OW 125
// end ; ( tick > 15 15$0 and tick < 30 30$0 and fact_attack < 3 and CanBeConstructed ( fact2 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ) :
18713: GO 19083
18715: LD_OWVAR 1
18719: PUSH
18720: LD_INT 31500
18722: GREATER
18723: PUSH
18724: LD_OWVAR 1
18728: PUSH
18729: LD_INT 63000
18731: LESS
18732: AND
18733: PUSH
18734: LD_VAR 0 2
18738: PUSH
18739: LD_INT 3
18741: LESS
18742: AND
18743: PUSH
18744: LD_LOC 16
18748: PPUSH
18749: LD_LOC 10
18753: PUSH
18754: LD_INT 1
18756: ARRAY
18757: PPUSH
18758: LD_LOC 10
18762: PUSH
18763: LD_INT 2
18765: ARRAY
18766: PPUSH
18767: LD_LOC 10
18771: PUSH
18772: LD_INT 3
18774: ARRAY
18775: PPUSH
18776: LD_LOC 10
18780: PUSH
18781: LD_INT 4
18783: ARRAY
18784: PPUSH
18785: CALL_OW 448
18789: AND
18790: DOUBLE
18791: EQUAL
18792: IFTRUE 18796
18794: GO 18844
18796: POP
// begin ComConstruct ( fact2 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ;
18797: LD_LOC 16
18801: PPUSH
18802: LD_LOC 10
18806: PUSH
18807: LD_INT 1
18809: ARRAY
18810: PPUSH
18811: LD_LOC 10
18815: PUSH
18816: LD_INT 2
18818: ARRAY
18819: PPUSH
18820: LD_LOC 10
18824: PUSH
18825: LD_INT 3
18827: ARRAY
18828: PPUSH
18829: LD_LOC 10
18833: PUSH
18834: LD_INT 4
18836: ARRAY
18837: PPUSH
18838: CALL_OW 125
// end ; ( tick > 30 30$0 and fact_attack < 2 and CanBeConstructed ( fact2 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ) :
18842: GO 19083
18844: LD_OWVAR 1
18848: PUSH
18849: LD_INT 63000
18851: GREATER
18852: PUSH
18853: LD_VAR 0 2
18857: PUSH
18858: LD_INT 2
18860: LESS
18861: AND
18862: PUSH
18863: LD_LOC 16
18867: PPUSH
18868: LD_LOC 10
18872: PUSH
18873: LD_INT 1
18875: ARRAY
18876: PPUSH
18877: LD_LOC 10
18881: PUSH
18882: LD_INT 2
18884: ARRAY
18885: PPUSH
18886: LD_LOC 10
18890: PUSH
18891: LD_INT 3
18893: ARRAY
18894: PPUSH
18895: LD_LOC 10
18899: PUSH
18900: LD_INT 4
18902: ARRAY
18903: PPUSH
18904: CALL_OW 448
18908: AND
18909: DOUBLE
18910: EQUAL
18911: IFTRUE 18915
18913: GO 18963
18915: POP
// begin ComConstruct ( fact2 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ;
18916: LD_LOC 16
18920: PPUSH
18921: LD_LOC 10
18925: PUSH
18926: LD_INT 1
18928: ARRAY
18929: PPUSH
18930: LD_LOC 10
18934: PUSH
18935: LD_INT 2
18937: ARRAY
18938: PPUSH
18939: LD_LOC 10
18943: PUSH
18944: LD_INT 3
18946: ARRAY
18947: PPUSH
18948: LD_LOC 10
18952: PUSH
18953: LD_INT 4
18955: ARRAY
18956: PPUSH
18957: CALL_OW 125
// end ; ( tick > 30 30$0 and fact_attack < 4 and CanBeConstructed ( fact2 , d7 [ 1 ] , d7 [ 2 ] , d7 [ 3 ] , d7 [ 4 ] ) ) :
18961: GO 19083
18963: LD_OWVAR 1
18967: PUSH
18968: LD_INT 63000
18970: GREATER
18971: PUSH
18972: LD_VAR 0 2
18976: PUSH
18977: LD_INT 4
18979: LESS
18980: AND
18981: PUSH
18982: LD_LOC 16
18986: PPUSH
18987: LD_LOC 11
18991: PUSH
18992: LD_INT 1
18994: ARRAY
18995: PPUSH
18996: LD_LOC 11
19000: PUSH
19001: LD_INT 2
19003: ARRAY
19004: PPUSH
19005: LD_LOC 11
19009: PUSH
19010: LD_INT 3
19012: ARRAY
19013: PPUSH
19014: LD_LOC 11
19018: PUSH
19019: LD_INT 4
19021: ARRAY
19022: PPUSH
19023: CALL_OW 448
19027: AND
19028: DOUBLE
19029: EQUAL
19030: IFTRUE 19034
19032: GO 19082
19034: POP
// begin ComConstruct ( fact2 , d7 [ 1 ] , d7 [ 2 ] , d7 [ 3 ] , d7 [ 4 ] ) ;
19035: LD_LOC 16
19039: PPUSH
19040: LD_LOC 11
19044: PUSH
19045: LD_INT 1
19047: ARRAY
19048: PPUSH
19049: LD_LOC 11
19053: PUSH
19054: LD_INT 2
19056: ARRAY
19057: PPUSH
19058: LD_LOC 11
19062: PUSH
19063: LD_INT 3
19065: ARRAY
19066: PPUSH
19067: LD_LOC 11
19071: PUSH
19072: LD_INT 4
19074: ARRAY
19075: PPUSH
19076: CALL_OW 125
// end ; end ;
19080: GO 19083
19082: POP
// enable ;
19083: ENABLE
// end ; end_of_file
19084: PPOPN 2
19086: END
// export builds1 , builds2 , builds3 , builds4 , builds5 ; export aici1 , aici2 , aici3 , aici4 , aici5 ; export a1eng ; export can_rebuild ; export can_repair ; export aici ; export stavi ; var upgradeable ; var trough_upgrade ; function UpgradeableTo ( b , up ) ; var i ; begin
19087: LD_INT 0
19089: PPUSH
19090: PPUSH
// result := 0 ;
19091: LD_ADDR_VAR 0 3
19095: PUSH
19096: LD_INT 0
19098: ST_TO_ADDR
// for i := 1 to upgradeable do
19099: LD_ADDR_VAR 0 4
19103: PUSH
19104: DOUBLE
19105: LD_INT 1
19107: DEC
19108: ST_TO_ADDR
19109: LD_LOC 17
19113: PUSH
19114: FOR_TO
19115: IFFALSE 19167
// if b = upgradeable [ i ] and up = trough_upgrade [ i ] then
19117: LD_VAR 0 1
19121: PUSH
19122: LD_LOC 17
19126: PUSH
19127: LD_VAR 0 4
19131: ARRAY
19132: EQUAL
19133: PUSH
19134: LD_VAR 0 2
19138: PUSH
19139: LD_LOC 18
19143: PUSH
19144: LD_VAR 0 4
19148: ARRAY
19149: EQUAL
19150: AND
19151: IFFALSE 19165
// begin result := up ;
19153: LD_ADDR_VAR 0 3
19157: PUSH
19158: LD_VAR 0 2
19162: ST_TO_ADDR
// break ;
19163: GO 19167
// end ;
19165: GO 19114
19167: POP
19168: POP
// end ;
19169: LD_VAR 0 3
19173: RET
// function IsUpgraded ( b ) ; begin
19174: LD_INT 0
19176: PPUSH
// result := 0 ;
19177: LD_ADDR_VAR 0 2
19181: PUSH
19182: LD_INT 0
19184: ST_TO_ADDR
// case b of trough_upgrade [ 1 ] :
19185: LD_VAR 0 1
19189: PUSH
19190: LD_LOC 18
19194: PUSH
19195: LD_INT 1
19197: ARRAY
19198: DOUBLE
19199: EQUAL
19200: IFTRUE 19204
19202: GO 19221
19204: POP
// result := upgradeable [ 1 ] ; trough_upgrade [ 2 ] :
19205: LD_ADDR_VAR 0 2
19209: PUSH
19210: LD_LOC 17
19214: PUSH
19215: LD_INT 1
19217: ARRAY
19218: ST_TO_ADDR
19219: GO 19346
19221: LD_LOC 18
19225: PUSH
19226: LD_INT 2
19228: ARRAY
19229: DOUBLE
19230: EQUAL
19231: IFTRUE 19235
19233: GO 19252
19235: POP
// result := upgradeable [ 2 ] ; trough_upgrade [ 3 ] :
19236: LD_ADDR_VAR 0 2
19240: PUSH
19241: LD_LOC 17
19245: PUSH
19246: LD_INT 2
19248: ARRAY
19249: ST_TO_ADDR
19250: GO 19346
19252: LD_LOC 18
19256: PUSH
19257: LD_INT 3
19259: ARRAY
19260: DOUBLE
19261: EQUAL
19262: IFTRUE 19266
19264: GO 19283
19266: POP
// result := upgradeable [ 3 ] ; trough_upgrade [ 4 ] :
19267: LD_ADDR_VAR 0 2
19271: PUSH
19272: LD_LOC 17
19276: PUSH
19277: LD_INT 3
19279: ARRAY
19280: ST_TO_ADDR
19281: GO 19346
19283: LD_LOC 18
19287: PUSH
19288: LD_INT 4
19290: ARRAY
19291: DOUBLE
19292: EQUAL
19293: IFTRUE 19297
19295: GO 19314
19297: POP
// result := upgradeable [ 4 ] ; trough_upgrade [ 5 ] :
19298: LD_ADDR_VAR 0 2
19302: PUSH
19303: LD_LOC 17
19307: PUSH
19308: LD_INT 4
19310: ARRAY
19311: ST_TO_ADDR
19312: GO 19346
19314: LD_LOC 18
19318: PUSH
19319: LD_INT 5
19321: ARRAY
19322: DOUBLE
19323: EQUAL
19324: IFTRUE 19328
19326: GO 19345
19328: POP
// result := upgradeable [ 5 ] ; end ;
19329: LD_ADDR_VAR 0 2
19333: PUSH
19334: LD_LOC 17
19338: PUSH
19339: LD_INT 5
19341: ARRAY
19342: ST_TO_ADDR
19343: GO 19346
19345: POP
// end ;
19346: LD_VAR 0 2
19350: RET
// function BasicFrom ( b ) ; begin
19351: LD_INT 0
19353: PPUSH
// result := b ;
19354: LD_ADDR_VAR 0 2
19358: PUSH
19359: LD_VAR 0 1
19363: ST_TO_ADDR
// case b of trough_upgrade [ 1 ] :
19364: LD_VAR 0 1
19368: PUSH
19369: LD_LOC 18
19373: PUSH
19374: LD_INT 1
19376: ARRAY
19377: DOUBLE
19378: EQUAL
19379: IFTRUE 19383
19381: GO 19400
19383: POP
// result := upgradeable [ 1 ] ; trough_upgrade [ 2 ] :
19384: LD_ADDR_VAR 0 2
19388: PUSH
19389: LD_LOC 17
19393: PUSH
19394: LD_INT 1
19396: ARRAY
19397: ST_TO_ADDR
19398: GO 19525
19400: LD_LOC 18
19404: PUSH
19405: LD_INT 2
19407: ARRAY
19408: DOUBLE
19409: EQUAL
19410: IFTRUE 19414
19412: GO 19431
19414: POP
// result := upgradeable [ 2 ] ; trough_upgrade [ 3 ] :
19415: LD_ADDR_VAR 0 2
19419: PUSH
19420: LD_LOC 17
19424: PUSH
19425: LD_INT 2
19427: ARRAY
19428: ST_TO_ADDR
19429: GO 19525
19431: LD_LOC 18
19435: PUSH
19436: LD_INT 3
19438: ARRAY
19439: DOUBLE
19440: EQUAL
19441: IFTRUE 19445
19443: GO 19462
19445: POP
// result := upgradeable [ 3 ] ; trough_upgrade [ 4 ] :
19446: LD_ADDR_VAR 0 2
19450: PUSH
19451: LD_LOC 17
19455: PUSH
19456: LD_INT 3
19458: ARRAY
19459: ST_TO_ADDR
19460: GO 19525
19462: LD_LOC 18
19466: PUSH
19467: LD_INT 4
19469: ARRAY
19470: DOUBLE
19471: EQUAL
19472: IFTRUE 19476
19474: GO 19493
19476: POP
// result := upgradeable [ 4 ] ; trough_upgrade [ 6 ] :
19477: LD_ADDR_VAR 0 2
19481: PUSH
19482: LD_LOC 17
19486: PUSH
19487: LD_INT 4
19489: ARRAY
19490: ST_TO_ADDR
19491: GO 19525
19493: LD_LOC 18
19497: PUSH
19498: LD_INT 6
19500: ARRAY
19501: DOUBLE
19502: EQUAL
19503: IFTRUE 19507
19505: GO 19524
19507: POP
// result := upgradeable [ 6 ] ; end ;
19508: LD_ADDR_VAR 0 2
19512: PUSH
19513: LD_LOC 17
19517: PUSH
19518: LD_INT 6
19520: ARRAY
19521: ST_TO_ADDR
19522: GO 19525
19524: POP
// end ;
19525: LD_VAR 0 2
19529: RET
// export function place_b ; var i ; begin
19530: LD_INT 0
19532: PPUSH
19533: PPUSH
// upgradeable := [ b_depot , b_workshop , b_armoury , b_lab , b_lab_half , b_lab ] ;
19534: LD_ADDR_LOC 17
19538: PUSH
19539: LD_INT 0
19541: PUSH
19542: LD_INT 2
19544: PUSH
19545: LD_INT 4
19547: PUSH
19548: LD_INT 6
19550: PUSH
19551: LD_INT 7
19553: PUSH
19554: LD_INT 6
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: ST_TO_ADDR
// trough_upgrade := [ b_warehouse , b_factory , b_barracks , b_lab_half , b_lab_full , b_lab_full ] ;
19565: LD_ADDR_LOC 18
19569: PUSH
19570: LD_INT 1
19572: PUSH
19573: LD_INT 3
19575: PUSH
19576: LD_INT 5
19578: PUSH
19579: LD_INT 7
19581: PUSH
19582: LD_INT 8
19584: PUSH
19585: LD_INT 8
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: ST_TO_ADDR
// aici1 := [ [ [ 0 , class_engineer , 1 ] , [ 1 , class_scientistic , 3 ] , [ 2 , class_soldier , 2 ] , [ 0 , class_mechanic , 0 ] ] , [ [ 1 , class_engineer , 1 ] , [ 1 , class_scientistic , 3 ] , [ 2 , class_soldier , 3 ] , [ 0 , class_mechanic , 0 ] ] , [ [ 1 , class_engineer , 4 ] , [ 1 , class_scientistic , 3 ] , [ 3 , class_soldier , 3 ] , [ 0 , class_mechanic , 0 ] ] ] [ difficulty ] ;
19596: LD_ADDR_EXP 110
19600: PUSH
19601: LD_INT 0
19603: PUSH
19604: LD_INT 2
19606: PUSH
19607: LD_INT 1
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 1
19617: PUSH
19618: LD_INT 4
19620: PUSH
19621: LD_INT 3
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 2
19631: PUSH
19632: LD_INT 1
19634: PUSH
19635: LD_INT 2
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 0
19645: PUSH
19646: LD_INT 3
19648: PUSH
19649: LD_INT 0
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: LIST
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 1
19665: PUSH
19666: LD_INT 2
19668: PUSH
19669: LD_INT 1
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 1
19679: PUSH
19680: LD_INT 4
19682: PUSH
19683: LD_INT 3
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 2
19693: PUSH
19694: LD_INT 1
19696: PUSH
19697: LD_INT 3
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 0
19707: PUSH
19708: LD_INT 3
19710: PUSH
19711: LD_INT 0
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: LIST
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 1
19727: PUSH
19728: LD_INT 2
19730: PUSH
19731: LD_INT 4
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 1
19741: PUSH
19742: LD_INT 4
19744: PUSH
19745: LD_INT 3
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 3
19755: PUSH
19756: LD_INT 1
19758: PUSH
19759: LD_INT 3
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 0
19769: PUSH
19770: LD_INT 3
19772: PUSH
19773: LD_INT 0
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: LIST
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: LIST
19791: PUSH
19792: LD_OWVAR 67
19796: ARRAY
19797: ST_TO_ADDR
// aici2 := [ [ [ 1 , class_engineer , 6 ] , [ 0 , class_scientistic , 4 ] , [ 2 , class_soldier , 3 ] , [ 0 , class_mechanic , 3 ] ] , [ [ 1 , class_engineer , 6 ] , [ 0 , class_scientistic , 5 ] , [ 2 , class_soldier , 3 ] , [ 0 , class_mechanic , 3 ] ] , [ [ 1 , class_engineer , 7 ] , [ 0 , class_scientistic , 5 ] , [ 2 , class_soldier , 3 ] , [ 0 , class_mechanic , 3 ] ] ] [ difficulty ] ;
19798: LD_ADDR_EXP 111
19802: PUSH
19803: LD_INT 1
19805: PUSH
19806: LD_INT 2
19808: PUSH
19809: LD_INT 6
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: LIST
19816: PUSH
19817: LD_INT 0
19819: PUSH
19820: LD_INT 4
19822: PUSH
19823: LD_INT 4
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 2
19833: PUSH
19834: LD_INT 1
19836: PUSH
19837: LD_INT 3
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 0
19847: PUSH
19848: LD_INT 3
19850: PUSH
19851: LD_INT 3
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: LIST
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 1
19867: PUSH
19868: LD_INT 2
19870: PUSH
19871: LD_INT 6
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 0
19881: PUSH
19882: LD_INT 4
19884: PUSH
19885: LD_INT 5
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 2
19895: PUSH
19896: LD_INT 1
19898: PUSH
19899: LD_INT 3
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 0
19909: PUSH
19910: LD_INT 3
19912: PUSH
19913: LD_INT 3
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: LIST
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 1
19929: PUSH
19930: LD_INT 2
19932: PUSH
19933: LD_INT 7
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 0
19943: PUSH
19944: LD_INT 4
19946: PUSH
19947: LD_INT 5
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 2
19957: PUSH
19958: LD_INT 1
19960: PUSH
19961: LD_INT 3
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 0
19971: PUSH
19972: LD_INT 3
19974: PUSH
19975: LD_INT 3
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: LIST
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: LIST
19993: PUSH
19994: LD_OWVAR 67
19998: ARRAY
19999: ST_TO_ADDR
// aici3 := [ [ [ 2 , class_engineer , 5 ] , [ 3 , class_scientistic , 3 ] , [ 6 , class_soldier , 4 ] , [ 5 , class_mechanic , 5 ] ] , [ [ 2 , class_engineer , 6 ] , [ 3 , class_scientistic , 4 ] , [ 6 , class_soldier , 5 ] , [ 5 , class_mechanic , 6 ] ] , [ [ 2 , class_engineer , 6 ] , [ 3 , class_scientistic , 4 ] , [ 6 , class_soldier , 6 ] , [ 5 , class_mechanic , 7 ] ] ] [ difficulty ] ;
20000: LD_ADDR_EXP 112
20004: PUSH
20005: LD_INT 2
20007: PUSH
20008: LD_INT 2
20010: PUSH
20011: LD_INT 5
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 3
20021: PUSH
20022: LD_INT 4
20024: PUSH
20025: LD_INT 3
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 6
20035: PUSH
20036: LD_INT 1
20038: PUSH
20039: LD_INT 4
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: LIST
20046: PUSH
20047: LD_INT 5
20049: PUSH
20050: LD_INT 3
20052: PUSH
20053: LD_INT 5
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: LIST
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: PUSH
20067: LD_INT 2
20069: PUSH
20070: LD_INT 2
20072: PUSH
20073: LD_INT 6
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 3
20083: PUSH
20084: LD_INT 4
20086: PUSH
20087: LD_INT 4
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 6
20097: PUSH
20098: LD_INT 1
20100: PUSH
20101: LD_INT 5
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 5
20111: PUSH
20112: LD_INT 3
20114: PUSH
20115: LD_INT 6
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: LIST
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 2
20131: PUSH
20132: LD_INT 2
20134: PUSH
20135: LD_INT 6
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 3
20145: PUSH
20146: LD_INT 4
20148: PUSH
20149: LD_INT 4
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 6
20159: PUSH
20160: LD_INT 1
20162: PUSH
20163: LD_INT 6
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 5
20173: PUSH
20174: LD_INT 3
20176: PUSH
20177: LD_INT 7
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: LIST
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: LIST
20195: PUSH
20196: LD_OWVAR 67
20200: ARRAY
20201: ST_TO_ADDR
// aici4 := [ [ [ 0 , class_engineer , 5 ] , [ 0 , class_scientistic , 3 ] , [ 8 , class_soldier , 3 ] , [ 3 , class_mechanic , 3 ] ] , [ [ 0 , class_engineer , 6 ] , [ 0 , class_scientistic , 4 ] , [ 8 , class_soldier , 4 ] , [ 3 , class_mechanic , 4 ] ] , [ [ 0 , class_engineer , 6 ] , [ 0 , class_scientistic , 5 ] , [ 8 , class_soldier , 5 ] , [ 3 , class_mechanic , 5 ] ] ] [ difficulty ] ;
20202: LD_ADDR_EXP 113
20206: PUSH
20207: LD_INT 0
20209: PUSH
20210: LD_INT 2
20212: PUSH
20213: LD_INT 5
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 0
20223: PUSH
20224: LD_INT 4
20226: PUSH
20227: LD_INT 3
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 8
20237: PUSH
20238: LD_INT 1
20240: PUSH
20241: LD_INT 3
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 3
20251: PUSH
20252: LD_INT 3
20254: PUSH
20255: LD_INT 3
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: LIST
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 0
20271: PUSH
20272: LD_INT 2
20274: PUSH
20275: LD_INT 6
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 0
20285: PUSH
20286: LD_INT 4
20288: PUSH
20289: LD_INT 4
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: LIST
20296: PUSH
20297: LD_INT 8
20299: PUSH
20300: LD_INT 1
20302: PUSH
20303: LD_INT 4
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: LIST
20310: PUSH
20311: LD_INT 3
20313: PUSH
20314: LD_INT 3
20316: PUSH
20317: LD_INT 4
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: LIST
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 0
20333: PUSH
20334: LD_INT 2
20336: PUSH
20337: LD_INT 6
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 0
20347: PUSH
20348: LD_INT 4
20350: PUSH
20351: LD_INT 5
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 8
20361: PUSH
20362: LD_INT 1
20364: PUSH
20365: LD_INT 5
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: LIST
20372: PUSH
20373: LD_INT 3
20375: PUSH
20376: LD_INT 3
20378: PUSH
20379: LD_INT 5
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: LIST
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: LIST
20397: PUSH
20398: LD_OWVAR 67
20402: ARRAY
20403: ST_TO_ADDR
// aici5 := [ [ [ 2 , class_soldier , 5 ] ] , [ [ 2 , class_soldier , 6 ] ] , [ [ 2 , class_soldier , 7 ] ] ] [ difficulty ] ;
20404: LD_ADDR_EXP 114
20408: PUSH
20409: LD_INT 2
20411: PUSH
20412: LD_INT 1
20414: PUSH
20415: LD_INT 5
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: LIST
20422: PUSH
20423: EMPTY
20424: LIST
20425: PUSH
20426: LD_INT 2
20428: PUSH
20429: LD_INT 1
20431: PUSH
20432: LD_INT 6
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: LIST
20439: PUSH
20440: EMPTY
20441: LIST
20442: PUSH
20443: LD_INT 2
20445: PUSH
20446: LD_INT 1
20448: PUSH
20449: LD_INT 7
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: LIST
20456: PUSH
20457: EMPTY
20458: LIST
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: LIST
20464: PUSH
20465: LD_OWVAR 67
20469: ARRAY
20470: ST_TO_ADDR
// builds1 := [ [ [ b_depot , 85 , 86 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_breastwork , 100 , 104 , 0 , [ ] , 0 , 0 , 0 , 0 , 1 ] , [ b_breastwork , 85 , 91 , 1 , [ ] , 0 , 0 , 0 , 0 , 1 ] , [ b_bunker , 91 , 101 , 0 , [ us_double_gun ] , 1 , 1 , 1 , 1 , 1 ] , [ b_armoury , 91 , 86 , 3 , [ ] , 1 , 0 , 0 , 0 , 1 ] , [ b_siberite_mine , 101 , 93 , 3 , [ ] , 0 , 0 , 0 , 0 , 0 ] , [ b_oil_mine , 87 , 84 , 0 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_power , 101 , 96 , 3 , [ ] , 1 , 1 , 1 , 0 , 0 ] ] , [ [ b_depot , 85 , 86 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_breastwork , 100 , 104 , 0 , [ ] , 1 , 1 , 1 , 1 , 1 ] , [ b_breastwork , 85 , 91 , 1 , [ ] , 0 , 0 , 0 , 0 , 1 ] , [ b_bunker , 91 , 101 , 0 , [ us_light_gun ] , 1 , 1 , 1 , 1 , 1 ] , [ b_armoury , 91 , 86 , 3 , [ ] , 1 , 1 , 0 , 0 , 1 ] , [ b_siberite_mine , 101 , 93 , 3 , [ ] , 1 , 1 , 1 , 1 , 0 ] , [ b_oil_mine , 87 , 84 , 0 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_power , 101 , 96 , 3 , [ ] , 1 , 1 , 1 , 0 , 0 ] ] , [ [ b_depot , 85 , 86 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_breastwork , 100 , 104 , 0 , [ ] , 1 , 1 , 1 , 1 , 1 ] , [ b_breastwork , 85 , 91 , 1 , [ ] , 1 , 1 , 1 , 1 , 1 ] , [ b_bunker , 91 , 101 , 0 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 1 ] , [ b_armoury , 91 , 86 , 3 , [ ] , 1 , 1 , 1 , 1 , 1 ] , [ b_siberite_mine , 101 , 93 , 3 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_mine , 87 , 84 , 0 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_power , 101 , 96 , 3 , [ ] , 1 , 1 , 1 , 0 , 0 ] ] ] [ difficulty ] ;
20471: LD_ADDR_EXP 105
20475: PUSH
20476: LD_INT 0
20478: PUSH
20479: LD_INT 85
20481: PUSH
20482: LD_INT 86
20484: PUSH
20485: LD_INT 2
20487: PUSH
20488: EMPTY
20489: PUSH
20490: LD_INT 1
20492: PUSH
20493: LD_INT 1
20495: PUSH
20496: LD_INT 1
20498: PUSH
20499: LD_INT 0
20501: PUSH
20502: LD_INT 0
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 31
20519: PUSH
20520: LD_INT 100
20522: PUSH
20523: LD_INT 104
20525: PUSH
20526: LD_INT 0
20528: PUSH
20529: EMPTY
20530: PUSH
20531: LD_INT 0
20533: PUSH
20534: LD_INT 0
20536: PUSH
20537: LD_INT 0
20539: PUSH
20540: LD_INT 0
20542: PUSH
20543: LD_INT 1
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 31
20560: PUSH
20561: LD_INT 85
20563: PUSH
20564: LD_INT 91
20566: PUSH
20567: LD_INT 1
20569: PUSH
20570: EMPTY
20571: PUSH
20572: LD_INT 0
20574: PUSH
20575: LD_INT 0
20577: PUSH
20578: LD_INT 0
20580: PUSH
20581: LD_INT 0
20583: PUSH
20584: LD_INT 1
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 32
20601: PUSH
20602: LD_INT 91
20604: PUSH
20605: LD_INT 101
20607: PUSH
20608: LD_INT 0
20610: PUSH
20611: LD_INT 5
20613: PUSH
20614: EMPTY
20615: LIST
20616: PUSH
20617: LD_INT 1
20619: PUSH
20620: LD_INT 1
20622: PUSH
20623: LD_INT 1
20625: PUSH
20626: LD_INT 1
20628: PUSH
20629: LD_INT 1
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: PUSH
20644: LD_INT 4
20646: PUSH
20647: LD_INT 91
20649: PUSH
20650: LD_INT 86
20652: PUSH
20653: LD_INT 3
20655: PUSH
20656: EMPTY
20657: PUSH
20658: LD_INT 1
20660: PUSH
20661: LD_INT 0
20663: PUSH
20664: LD_INT 0
20666: PUSH
20667: LD_INT 0
20669: PUSH
20670: LD_INT 1
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: PUSH
20685: LD_INT 30
20687: PUSH
20688: LD_INT 101
20690: PUSH
20691: LD_INT 93
20693: PUSH
20694: LD_INT 3
20696: PUSH
20697: EMPTY
20698: PUSH
20699: LD_INT 0
20701: PUSH
20702: LD_INT 0
20704: PUSH
20705: LD_INT 0
20707: PUSH
20708: LD_INT 0
20710: PUSH
20711: LD_INT 0
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 29
20728: PUSH
20729: LD_INT 87
20731: PUSH
20732: LD_INT 84
20734: PUSH
20735: LD_INT 0
20737: PUSH
20738: EMPTY
20739: PUSH
20740: LD_INT 1
20742: PUSH
20743: LD_INT 1
20745: PUSH
20746: LD_INT 1
20748: PUSH
20749: LD_INT 0
20751: PUSH
20752: LD_INT 0
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: PUSH
20767: LD_INT 26
20769: PUSH
20770: LD_INT 101
20772: PUSH
20773: LD_INT 96
20775: PUSH
20776: LD_INT 3
20778: PUSH
20779: EMPTY
20780: PUSH
20781: LD_INT 1
20783: PUSH
20784: LD_INT 1
20786: PUSH
20787: LD_INT 1
20789: PUSH
20790: LD_INT 0
20792: PUSH
20793: LD_INT 0
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 0
20820: PUSH
20821: LD_INT 85
20823: PUSH
20824: LD_INT 86
20826: PUSH
20827: LD_INT 2
20829: PUSH
20830: EMPTY
20831: PUSH
20832: LD_INT 1
20834: PUSH
20835: LD_INT 1
20837: PUSH
20838: LD_INT 1
20840: PUSH
20841: LD_INT 0
20843: PUSH
20844: LD_INT 0
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 31
20861: PUSH
20862: LD_INT 100
20864: PUSH
20865: LD_INT 104
20867: PUSH
20868: LD_INT 0
20870: PUSH
20871: EMPTY
20872: PUSH
20873: LD_INT 1
20875: PUSH
20876: LD_INT 1
20878: PUSH
20879: LD_INT 1
20881: PUSH
20882: LD_INT 1
20884: PUSH
20885: LD_INT 1
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: PUSH
20900: LD_INT 31
20902: PUSH
20903: LD_INT 85
20905: PUSH
20906: LD_INT 91
20908: PUSH
20909: LD_INT 1
20911: PUSH
20912: EMPTY
20913: PUSH
20914: LD_INT 0
20916: PUSH
20917: LD_INT 0
20919: PUSH
20920: LD_INT 0
20922: PUSH
20923: LD_INT 0
20925: PUSH
20926: LD_INT 1
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 32
20943: PUSH
20944: LD_INT 91
20946: PUSH
20947: LD_INT 101
20949: PUSH
20950: LD_INT 0
20952: PUSH
20953: LD_INT 3
20955: PUSH
20956: EMPTY
20957: LIST
20958: PUSH
20959: LD_INT 1
20961: PUSH
20962: LD_INT 1
20964: PUSH
20965: LD_INT 1
20967: PUSH
20968: LD_INT 1
20970: PUSH
20971: LD_INT 1
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 4
20988: PUSH
20989: LD_INT 91
20991: PUSH
20992: LD_INT 86
20994: PUSH
20995: LD_INT 3
20997: PUSH
20998: EMPTY
20999: PUSH
21000: LD_INT 1
21002: PUSH
21003: LD_INT 1
21005: PUSH
21006: LD_INT 0
21008: PUSH
21009: LD_INT 0
21011: PUSH
21012: LD_INT 1
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 30
21029: PUSH
21030: LD_INT 101
21032: PUSH
21033: LD_INT 93
21035: PUSH
21036: LD_INT 3
21038: PUSH
21039: EMPTY
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: LD_INT 1
21046: PUSH
21047: LD_INT 1
21049: PUSH
21050: LD_INT 1
21052: PUSH
21053: LD_INT 0
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 29
21070: PUSH
21071: LD_INT 87
21073: PUSH
21074: LD_INT 84
21076: PUSH
21077: LD_INT 0
21079: PUSH
21080: EMPTY
21081: PUSH
21082: LD_INT 1
21084: PUSH
21085: LD_INT 1
21087: PUSH
21088: LD_INT 1
21090: PUSH
21091: LD_INT 0
21093: PUSH
21094: LD_INT 0
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 26
21111: PUSH
21112: LD_INT 101
21114: PUSH
21115: LD_INT 96
21117: PUSH
21118: LD_INT 3
21120: PUSH
21121: EMPTY
21122: PUSH
21123: LD_INT 1
21125: PUSH
21126: LD_INT 1
21128: PUSH
21129: LD_INT 1
21131: PUSH
21132: LD_INT 0
21134: PUSH
21135: LD_INT 0
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 0
21162: PUSH
21163: LD_INT 85
21165: PUSH
21166: LD_INT 86
21168: PUSH
21169: LD_INT 2
21171: PUSH
21172: EMPTY
21173: PUSH
21174: LD_INT 1
21176: PUSH
21177: LD_INT 1
21179: PUSH
21180: LD_INT 1
21182: PUSH
21183: LD_INT 0
21185: PUSH
21186: LD_INT 0
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 31
21203: PUSH
21204: LD_INT 100
21206: PUSH
21207: LD_INT 104
21209: PUSH
21210: LD_INT 0
21212: PUSH
21213: EMPTY
21214: PUSH
21215: LD_INT 1
21217: PUSH
21218: LD_INT 1
21220: PUSH
21221: LD_INT 1
21223: PUSH
21224: LD_INT 1
21226: PUSH
21227: LD_INT 1
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 31
21244: PUSH
21245: LD_INT 85
21247: PUSH
21248: LD_INT 91
21250: PUSH
21251: LD_INT 1
21253: PUSH
21254: EMPTY
21255: PUSH
21256: LD_INT 1
21258: PUSH
21259: LD_INT 1
21261: PUSH
21262: LD_INT 1
21264: PUSH
21265: LD_INT 1
21267: PUSH
21268: LD_INT 1
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: PUSH
21283: LD_INT 32
21285: PUSH
21286: LD_INT 91
21288: PUSH
21289: LD_INT 101
21291: PUSH
21292: LD_INT 0
21294: PUSH
21295: LD_INT 4
21297: PUSH
21298: EMPTY
21299: LIST
21300: PUSH
21301: LD_INT 1
21303: PUSH
21304: LD_INT 1
21306: PUSH
21307: LD_INT 1
21309: PUSH
21310: LD_INT 1
21312: PUSH
21313: LD_INT 1
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 4
21330: PUSH
21331: LD_INT 91
21333: PUSH
21334: LD_INT 86
21336: PUSH
21337: LD_INT 3
21339: PUSH
21340: EMPTY
21341: PUSH
21342: LD_INT 1
21344: PUSH
21345: LD_INT 1
21347: PUSH
21348: LD_INT 1
21350: PUSH
21351: LD_INT 1
21353: PUSH
21354: LD_INT 1
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 30
21371: PUSH
21372: LD_INT 101
21374: PUSH
21375: LD_INT 93
21377: PUSH
21378: LD_INT 3
21380: PUSH
21381: EMPTY
21382: PUSH
21383: LD_INT 1
21385: PUSH
21386: LD_INT 1
21388: PUSH
21389: LD_INT 1
21391: PUSH
21392: LD_INT 0
21394: PUSH
21395: LD_INT 0
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: PUSH
21410: LD_INT 29
21412: PUSH
21413: LD_INT 87
21415: PUSH
21416: LD_INT 84
21418: PUSH
21419: LD_INT 0
21421: PUSH
21422: EMPTY
21423: PUSH
21424: LD_INT 1
21426: PUSH
21427: LD_INT 1
21429: PUSH
21430: LD_INT 1
21432: PUSH
21433: LD_INT 0
21435: PUSH
21436: LD_INT 0
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 26
21453: PUSH
21454: LD_INT 101
21456: PUSH
21457: LD_INT 96
21459: PUSH
21460: LD_INT 3
21462: PUSH
21463: EMPTY
21464: PUSH
21465: LD_INT 1
21467: PUSH
21468: LD_INT 1
21470: PUSH
21471: LD_INT 1
21473: PUSH
21474: LD_INT 0
21476: PUSH
21477: LD_INT 0
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: LIST
21506: PUSH
21507: LD_OWVAR 67
21511: ARRAY
21512: ST_TO_ADDR
// builds2 := [ [ b_workshop , 60 , 9 , 4 , [ ] , 1 , 0 , 0 , 0 , 0 ] , [ b_oil_mine , 53 , 13 , 2 , [ ] , 1 , 0 , 0 , 0 , 0 ] , [ b_oil_power , 50 , 3 , 4 , [ ] , 1 , 0 , 0 , 0 , 0 ] , [ b_depot , 46 , 5 , 2 , [ ] , 1 , 0 , 0 , 0 , 0 ] , [ b_armoury , 59 , 9 , 4 , [ ] , 1 , 0 , 0 , 1 , 1 ] , [ b_breastwork , 50 , 14 , 0 , [ ] , 1 , 0 , 0 , 1 , 1 ] ] ;
21513: LD_ADDR_EXP 106
21517: PUSH
21518: LD_INT 2
21520: PUSH
21521: LD_INT 60
21523: PUSH
21524: LD_INT 9
21526: PUSH
21527: LD_INT 4
21529: PUSH
21530: EMPTY
21531: PUSH
21532: LD_INT 1
21534: PUSH
21535: LD_INT 0
21537: PUSH
21538: LD_INT 0
21540: PUSH
21541: LD_INT 0
21543: PUSH
21544: LD_INT 0
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: PUSH
21559: LD_INT 29
21561: PUSH
21562: LD_INT 53
21564: PUSH
21565: LD_INT 13
21567: PUSH
21568: LD_INT 2
21570: PUSH
21571: EMPTY
21572: PUSH
21573: LD_INT 1
21575: PUSH
21576: LD_INT 0
21578: PUSH
21579: LD_INT 0
21581: PUSH
21582: LD_INT 0
21584: PUSH
21585: LD_INT 0
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 26
21602: PUSH
21603: LD_INT 50
21605: PUSH
21606: LD_INT 3
21608: PUSH
21609: LD_INT 4
21611: PUSH
21612: EMPTY
21613: PUSH
21614: LD_INT 1
21616: PUSH
21617: LD_INT 0
21619: PUSH
21620: LD_INT 0
21622: PUSH
21623: LD_INT 0
21625: PUSH
21626: LD_INT 0
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 0
21643: PUSH
21644: LD_INT 46
21646: PUSH
21647: LD_INT 5
21649: PUSH
21650: LD_INT 2
21652: PUSH
21653: EMPTY
21654: PUSH
21655: LD_INT 1
21657: PUSH
21658: LD_INT 0
21660: PUSH
21661: LD_INT 0
21663: PUSH
21664: LD_INT 0
21666: PUSH
21667: LD_INT 0
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 4
21684: PUSH
21685: LD_INT 59
21687: PUSH
21688: LD_INT 9
21690: PUSH
21691: LD_INT 4
21693: PUSH
21694: EMPTY
21695: PUSH
21696: LD_INT 1
21698: PUSH
21699: LD_INT 0
21701: PUSH
21702: LD_INT 0
21704: PUSH
21705: LD_INT 1
21707: PUSH
21708: LD_INT 1
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 31
21725: PUSH
21726: LD_INT 50
21728: PUSH
21729: LD_INT 14
21731: PUSH
21732: LD_INT 0
21734: PUSH
21735: EMPTY
21736: PUSH
21737: LD_INT 1
21739: PUSH
21740: LD_INT 0
21742: PUSH
21743: LD_INT 0
21745: PUSH
21746: LD_INT 1
21748: PUSH
21749: LD_INT 1
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: ST_TO_ADDR
// if difficulty = 1 then
21772: LD_OWVAR 67
21776: PUSH
21777: LD_INT 1
21779: EQUAL
21780: IFFALSE 22579
// builds3 := [ [ b_breastwork , 41 , 23 , 5 , [ ] , 1 , 0 , 0 , 1 , 1 ] , [ b_bunker , 18 , 8 , 4 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 25 , 13 , 4 , [ us_double_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 17 , 18 , 4 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 31 , 49 , 5 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 35 , 44 , 5 , [ us_double_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 34 , 26 , 0 , [ us_radar ] , 1 , 1 , 1 , 1 , 0 ] , [ b_siberite_mine , 29 , 30 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_mine , 39 , 37 , 1 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_siberite_power , 24 , 44 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_siberite_power , 27 , 26 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_warehouse , 32 , 35 , 4 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_lab_full , 21 , 35 , 1 , [ b_lab_opto , b_lab_weapon ] , 1 , 1 , 1 , 0 , 0 ] , [ b_factory , 18 , 25 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_control_tower , 22 , 40 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_track , 14 , 21 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_gun , 15 , 25 , 1 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_radar , 18 , 29 , 0 , [ ] , 1 , 1 , 1 , 0 , 0 ] ] else
21782: LD_ADDR_EXP 107
21786: PUSH
21787: LD_INT 31
21789: PUSH
21790: LD_INT 41
21792: PUSH
21793: LD_INT 23
21795: PUSH
21796: LD_INT 5
21798: PUSH
21799: EMPTY
21800: PUSH
21801: LD_INT 1
21803: PUSH
21804: LD_INT 0
21806: PUSH
21807: LD_INT 0
21809: PUSH
21810: LD_INT 1
21812: PUSH
21813: LD_INT 1
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: PUSH
21828: LD_INT 32
21830: PUSH
21831: LD_INT 18
21833: PUSH
21834: LD_INT 8
21836: PUSH
21837: LD_INT 4
21839: PUSH
21840: LD_INT 4
21842: PUSH
21843: EMPTY
21844: LIST
21845: PUSH
21846: LD_INT 1
21848: PUSH
21849: LD_INT 1
21851: PUSH
21852: LD_INT 1
21854: PUSH
21855: LD_INT 1
21857: PUSH
21858: LD_INT 0
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 32
21875: PUSH
21876: LD_INT 25
21878: PUSH
21879: LD_INT 13
21881: PUSH
21882: LD_INT 4
21884: PUSH
21885: LD_INT 5
21887: PUSH
21888: EMPTY
21889: LIST
21890: PUSH
21891: LD_INT 1
21893: PUSH
21894: LD_INT 1
21896: PUSH
21897: LD_INT 1
21899: PUSH
21900: LD_INT 1
21902: PUSH
21903: LD_INT 0
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: PUSH
21918: LD_INT 32
21920: PUSH
21921: LD_INT 17
21923: PUSH
21924: LD_INT 18
21926: PUSH
21927: LD_INT 4
21929: PUSH
21930: LD_INT 4
21932: PUSH
21933: EMPTY
21934: LIST
21935: PUSH
21936: LD_INT 1
21938: PUSH
21939: LD_INT 1
21941: PUSH
21942: LD_INT 1
21944: PUSH
21945: LD_INT 1
21947: PUSH
21948: LD_INT 0
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 32
21965: PUSH
21966: LD_INT 31
21968: PUSH
21969: LD_INT 49
21971: PUSH
21972: LD_INT 5
21974: PUSH
21975: LD_INT 4
21977: PUSH
21978: EMPTY
21979: LIST
21980: PUSH
21981: LD_INT 1
21983: PUSH
21984: LD_INT 1
21986: PUSH
21987: LD_INT 1
21989: PUSH
21990: LD_INT 1
21992: PUSH
21993: LD_INT 0
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 32
22010: PUSH
22011: LD_INT 35
22013: PUSH
22014: LD_INT 44
22016: PUSH
22017: LD_INT 5
22019: PUSH
22020: LD_INT 5
22022: PUSH
22023: EMPTY
22024: LIST
22025: PUSH
22026: LD_INT 1
22028: PUSH
22029: LD_INT 1
22031: PUSH
22032: LD_INT 1
22034: PUSH
22035: LD_INT 1
22037: PUSH
22038: LD_INT 0
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: PUSH
22053: LD_INT 32
22055: PUSH
22056: LD_INT 34
22058: PUSH
22059: LD_INT 26
22061: PUSH
22062: LD_INT 0
22064: PUSH
22065: LD_INT 11
22067: PUSH
22068: EMPTY
22069: LIST
22070: PUSH
22071: LD_INT 1
22073: PUSH
22074: LD_INT 1
22076: PUSH
22077: LD_INT 1
22079: PUSH
22080: LD_INT 1
22082: PUSH
22083: LD_INT 0
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 30
22100: PUSH
22101: LD_INT 29
22103: PUSH
22104: LD_INT 30
22106: PUSH
22107: LD_INT 2
22109: PUSH
22110: EMPTY
22111: PUSH
22112: LD_INT 1
22114: PUSH
22115: LD_INT 1
22117: PUSH
22118: LD_INT 1
22120: PUSH
22121: LD_INT 0
22123: PUSH
22124: LD_INT 0
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 29
22141: PUSH
22142: LD_INT 39
22144: PUSH
22145: LD_INT 37
22147: PUSH
22148: LD_INT 1
22150: PUSH
22151: EMPTY
22152: PUSH
22153: LD_INT 1
22155: PUSH
22156: LD_INT 1
22158: PUSH
22159: LD_INT 1
22161: PUSH
22162: LD_INT 0
22164: PUSH
22165: LD_INT 0
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 28
22182: PUSH
22183: LD_INT 24
22185: PUSH
22186: LD_INT 44
22188: PUSH
22189: LD_INT 2
22191: PUSH
22192: EMPTY
22193: PUSH
22194: LD_INT 1
22196: PUSH
22197: LD_INT 1
22199: PUSH
22200: LD_INT 1
22202: PUSH
22203: LD_INT 0
22205: PUSH
22206: LD_INT 0
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 28
22223: PUSH
22224: LD_INT 27
22226: PUSH
22227: LD_INT 26
22229: PUSH
22230: LD_INT 2
22232: PUSH
22233: EMPTY
22234: PUSH
22235: LD_INT 1
22237: PUSH
22238: LD_INT 1
22240: PUSH
22241: LD_INT 1
22243: PUSH
22244: LD_INT 0
22246: PUSH
22247: LD_INT 0
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 1
22264: PUSH
22265: LD_INT 32
22267: PUSH
22268: LD_INT 35
22270: PUSH
22271: LD_INT 4
22273: PUSH
22274: EMPTY
22275: PUSH
22276: LD_INT 1
22278: PUSH
22279: LD_INT 1
22281: PUSH
22282: LD_INT 1
22284: PUSH
22285: LD_INT 0
22287: PUSH
22288: LD_INT 0
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 8
22305: PUSH
22306: LD_INT 21
22308: PUSH
22309: LD_INT 35
22311: PUSH
22312: LD_INT 1
22314: PUSH
22315: LD_INT 15
22317: PUSH
22318: LD_INT 10
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 1
22327: PUSH
22328: LD_INT 1
22330: PUSH
22331: LD_INT 1
22333: PUSH
22334: LD_INT 0
22336: PUSH
22337: LD_INT 0
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 3
22354: PUSH
22355: LD_INT 18
22357: PUSH
22358: LD_INT 25
22360: PUSH
22361: LD_INT 2
22363: PUSH
22364: EMPTY
22365: PUSH
22366: LD_INT 1
22368: PUSH
22369: LD_INT 1
22371: PUSH
22372: LD_INT 1
22374: PUSH
22375: LD_INT 0
22377: PUSH
22378: LD_INT 0
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 36
22395: PUSH
22396: LD_INT 22
22398: PUSH
22399: LD_INT 40
22401: PUSH
22402: LD_INT 2
22404: PUSH
22405: EMPTY
22406: PUSH
22407: LD_INT 1
22409: PUSH
22410: LD_INT 1
22412: PUSH
22413: LD_INT 1
22415: PUSH
22416: LD_INT 0
22418: PUSH
22419: LD_INT 0
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: PUSH
22434: LD_INT 16
22436: PUSH
22437: LD_INT 14
22439: PUSH
22440: LD_INT 21
22442: PUSH
22443: LD_INT 2
22445: PUSH
22446: EMPTY
22447: PUSH
22448: LD_INT 1
22450: PUSH
22451: LD_INT 1
22453: PUSH
22454: LD_INT 1
22456: PUSH
22457: LD_INT 0
22459: PUSH
22460: LD_INT 0
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 17
22477: PUSH
22478: LD_INT 15
22480: PUSH
22481: LD_INT 25
22483: PUSH
22484: LD_INT 1
22486: PUSH
22487: EMPTY
22488: PUSH
22489: LD_INT 1
22491: PUSH
22492: LD_INT 1
22494: PUSH
22495: LD_INT 1
22497: PUSH
22498: LD_INT 0
22500: PUSH
22501: LD_INT 0
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 20
22518: PUSH
22519: LD_INT 18
22521: PUSH
22522: LD_INT 29
22524: PUSH
22525: LD_INT 0
22527: PUSH
22528: EMPTY
22529: PUSH
22530: LD_INT 1
22532: PUSH
22533: LD_INT 1
22535: PUSH
22536: LD_INT 1
22538: PUSH
22539: LD_INT 0
22541: PUSH
22542: LD_INT 0
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: ST_TO_ADDR
22577: GO 23374
// builds3 := [ [ b_breastwork , 41 , 23 , 5 , [ ] , 1 , 1 , 1 , 1 , 1 ] , [ b_bunker , 18 , 8 , 4 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 25 , 13 , 4 , [ us_double_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 17 , 18 , 4 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 31 , 49 , 5 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 35 , 44 , 5 , [ us_double_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 34 , 26 , 0 , [ us_radar ] , 1 , 1 , 1 , 1 , 0 ] , [ b_siberite_mine , 29 , 30 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_mine , 39 , 37 , 1 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_siberite_power , 24 , 44 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_siberite_power , 27 , 26 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_warehouse , 32 , 35 , 4 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_lab_full , 21 , 35 , 1 , [ b_lab_opto , b_lab_weapon ] , 1 , 1 , 1 , 0 , 0 ] , [ b_factory , 18 , 25 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_control_tower , 22 , 40 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_track , 14 , 21 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_gun , 15 , 25 , 1 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_radar , 18 , 29 , 0 , [ ] , 1 , 1 , 1 , 0 , 0 ] ] ;
22579: LD_ADDR_EXP 107
22583: PUSH
22584: LD_INT 31
22586: PUSH
22587: LD_INT 41
22589: PUSH
22590: LD_INT 23
22592: PUSH
22593: LD_INT 5
22595: PUSH
22596: EMPTY
22597: PUSH
22598: LD_INT 1
22600: PUSH
22601: LD_INT 1
22603: PUSH
22604: LD_INT 1
22606: PUSH
22607: LD_INT 1
22609: PUSH
22610: LD_INT 1
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 32
22627: PUSH
22628: LD_INT 18
22630: PUSH
22631: LD_INT 8
22633: PUSH
22634: LD_INT 4
22636: PUSH
22637: LD_INT 4
22639: PUSH
22640: EMPTY
22641: LIST
22642: PUSH
22643: LD_INT 1
22645: PUSH
22646: LD_INT 1
22648: PUSH
22649: LD_INT 1
22651: PUSH
22652: LD_INT 1
22654: PUSH
22655: LD_INT 0
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 32
22672: PUSH
22673: LD_INT 25
22675: PUSH
22676: LD_INT 13
22678: PUSH
22679: LD_INT 4
22681: PUSH
22682: LD_INT 5
22684: PUSH
22685: EMPTY
22686: LIST
22687: PUSH
22688: LD_INT 1
22690: PUSH
22691: LD_INT 1
22693: PUSH
22694: LD_INT 1
22696: PUSH
22697: LD_INT 1
22699: PUSH
22700: LD_INT 0
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 32
22717: PUSH
22718: LD_INT 17
22720: PUSH
22721: LD_INT 18
22723: PUSH
22724: LD_INT 4
22726: PUSH
22727: LD_INT 4
22729: PUSH
22730: EMPTY
22731: LIST
22732: PUSH
22733: LD_INT 1
22735: PUSH
22736: LD_INT 1
22738: PUSH
22739: LD_INT 1
22741: PUSH
22742: LD_INT 1
22744: PUSH
22745: LD_INT 0
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 32
22762: PUSH
22763: LD_INT 31
22765: PUSH
22766: LD_INT 49
22768: PUSH
22769: LD_INT 5
22771: PUSH
22772: LD_INT 4
22774: PUSH
22775: EMPTY
22776: LIST
22777: PUSH
22778: LD_INT 1
22780: PUSH
22781: LD_INT 1
22783: PUSH
22784: LD_INT 1
22786: PUSH
22787: LD_INT 1
22789: PUSH
22790: LD_INT 0
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 32
22807: PUSH
22808: LD_INT 35
22810: PUSH
22811: LD_INT 44
22813: PUSH
22814: LD_INT 5
22816: PUSH
22817: LD_INT 5
22819: PUSH
22820: EMPTY
22821: LIST
22822: PUSH
22823: LD_INT 1
22825: PUSH
22826: LD_INT 1
22828: PUSH
22829: LD_INT 1
22831: PUSH
22832: LD_INT 1
22834: PUSH
22835: LD_INT 0
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 32
22852: PUSH
22853: LD_INT 34
22855: PUSH
22856: LD_INT 26
22858: PUSH
22859: LD_INT 0
22861: PUSH
22862: LD_INT 11
22864: PUSH
22865: EMPTY
22866: LIST
22867: PUSH
22868: LD_INT 1
22870: PUSH
22871: LD_INT 1
22873: PUSH
22874: LD_INT 1
22876: PUSH
22877: LD_INT 1
22879: PUSH
22880: LD_INT 0
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 30
22897: PUSH
22898: LD_INT 29
22900: PUSH
22901: LD_INT 30
22903: PUSH
22904: LD_INT 2
22906: PUSH
22907: EMPTY
22908: PUSH
22909: LD_INT 1
22911: PUSH
22912: LD_INT 1
22914: PUSH
22915: LD_INT 1
22917: PUSH
22918: LD_INT 0
22920: PUSH
22921: LD_INT 0
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 29
22938: PUSH
22939: LD_INT 39
22941: PUSH
22942: LD_INT 37
22944: PUSH
22945: LD_INT 1
22947: PUSH
22948: EMPTY
22949: PUSH
22950: LD_INT 1
22952: PUSH
22953: LD_INT 1
22955: PUSH
22956: LD_INT 1
22958: PUSH
22959: LD_INT 0
22961: PUSH
22962: LD_INT 0
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 28
22979: PUSH
22980: LD_INT 24
22982: PUSH
22983: LD_INT 44
22985: PUSH
22986: LD_INT 2
22988: PUSH
22989: EMPTY
22990: PUSH
22991: LD_INT 1
22993: PUSH
22994: LD_INT 1
22996: PUSH
22997: LD_INT 1
22999: PUSH
23000: LD_INT 0
23002: PUSH
23003: LD_INT 0
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 28
23020: PUSH
23021: LD_INT 27
23023: PUSH
23024: LD_INT 26
23026: PUSH
23027: LD_INT 2
23029: PUSH
23030: EMPTY
23031: PUSH
23032: LD_INT 1
23034: PUSH
23035: LD_INT 1
23037: PUSH
23038: LD_INT 1
23040: PUSH
23041: LD_INT 0
23043: PUSH
23044: LD_INT 0
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 1
23061: PUSH
23062: LD_INT 32
23064: PUSH
23065: LD_INT 35
23067: PUSH
23068: LD_INT 4
23070: PUSH
23071: EMPTY
23072: PUSH
23073: LD_INT 1
23075: PUSH
23076: LD_INT 1
23078: PUSH
23079: LD_INT 1
23081: PUSH
23082: LD_INT 0
23084: PUSH
23085: LD_INT 0
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 8
23102: PUSH
23103: LD_INT 21
23105: PUSH
23106: LD_INT 35
23108: PUSH
23109: LD_INT 1
23111: PUSH
23112: LD_INT 15
23114: PUSH
23115: LD_INT 10
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: LD_INT 1
23124: PUSH
23125: LD_INT 1
23127: PUSH
23128: LD_INT 1
23130: PUSH
23131: LD_INT 0
23133: PUSH
23134: LD_INT 0
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: PUSH
23149: LD_INT 3
23151: PUSH
23152: LD_INT 18
23154: PUSH
23155: LD_INT 25
23157: PUSH
23158: LD_INT 2
23160: PUSH
23161: EMPTY
23162: PUSH
23163: LD_INT 1
23165: PUSH
23166: LD_INT 1
23168: PUSH
23169: LD_INT 1
23171: PUSH
23172: LD_INT 0
23174: PUSH
23175: LD_INT 0
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 36
23192: PUSH
23193: LD_INT 22
23195: PUSH
23196: LD_INT 40
23198: PUSH
23199: LD_INT 2
23201: PUSH
23202: EMPTY
23203: PUSH
23204: LD_INT 1
23206: PUSH
23207: LD_INT 1
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: LD_INT 0
23215: PUSH
23216: LD_INT 0
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 16
23233: PUSH
23234: LD_INT 14
23236: PUSH
23237: LD_INT 21
23239: PUSH
23240: LD_INT 2
23242: PUSH
23243: EMPTY
23244: PUSH
23245: LD_INT 1
23247: PUSH
23248: LD_INT 1
23250: PUSH
23251: LD_INT 1
23253: PUSH
23254: LD_INT 0
23256: PUSH
23257: LD_INT 0
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 17
23274: PUSH
23275: LD_INT 15
23277: PUSH
23278: LD_INT 25
23280: PUSH
23281: LD_INT 1
23283: PUSH
23284: EMPTY
23285: PUSH
23286: LD_INT 1
23288: PUSH
23289: LD_INT 1
23291: PUSH
23292: LD_INT 1
23294: PUSH
23295: LD_INT 0
23297: PUSH
23298: LD_INT 0
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 20
23315: PUSH
23316: LD_INT 18
23318: PUSH
23319: LD_INT 29
23321: PUSH
23322: LD_INT 0
23324: PUSH
23325: EMPTY
23326: PUSH
23327: LD_INT 1
23329: PUSH
23330: LD_INT 1
23332: PUSH
23333: LD_INT 1
23335: PUSH
23336: LD_INT 0
23338: PUSH
23339: LD_INT 0
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: ST_TO_ADDR
// builds4 := [ [ b_factory , 45 , 57 , 3 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_track , 42 , 54 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_gun , 45 , 53 , 3 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_noncombat , 48 , 57 , 4 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_radar , 49 , 61 , 5 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_power , 39 , 50 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_barracks , 53 , 67 , 5 , [ ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 57 , 65 , 5 , [ us_radar ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 57 , 68 , 5 , [ us_double_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 52 , 47 , 3 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 60 , 59 , 4 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] ] ;
23374: LD_ADDR_EXP 108
23378: PUSH
23379: LD_INT 3
23381: PUSH
23382: LD_INT 45
23384: PUSH
23385: LD_INT 57
23387: PUSH
23388: LD_INT 3
23390: PUSH
23391: EMPTY
23392: PUSH
23393: LD_INT 1
23395: PUSH
23396: LD_INT 1
23398: PUSH
23399: LD_INT 1
23401: PUSH
23402: LD_INT 0
23404: PUSH
23405: LD_INT 0
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 16
23422: PUSH
23423: LD_INT 42
23425: PUSH
23426: LD_INT 54
23428: PUSH
23429: LD_INT 2
23431: PUSH
23432: EMPTY
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: LD_INT 1
23439: PUSH
23440: LD_INT 1
23442: PUSH
23443: LD_INT 0
23445: PUSH
23446: LD_INT 0
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 17
23463: PUSH
23464: LD_INT 45
23466: PUSH
23467: LD_INT 53
23469: PUSH
23470: LD_INT 3
23472: PUSH
23473: EMPTY
23474: PUSH
23475: LD_INT 1
23477: PUSH
23478: LD_INT 1
23480: PUSH
23481: LD_INT 1
23483: PUSH
23484: LD_INT 0
23486: PUSH
23487: LD_INT 0
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 19
23504: PUSH
23505: LD_INT 48
23507: PUSH
23508: LD_INT 57
23510: PUSH
23511: LD_INT 4
23513: PUSH
23514: EMPTY
23515: PUSH
23516: LD_INT 1
23518: PUSH
23519: LD_INT 1
23521: PUSH
23522: LD_INT 1
23524: PUSH
23525: LD_INT 0
23527: PUSH
23528: LD_INT 0
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 20
23545: PUSH
23546: LD_INT 49
23548: PUSH
23549: LD_INT 61
23551: PUSH
23552: LD_INT 5
23554: PUSH
23555: EMPTY
23556: PUSH
23557: LD_INT 1
23559: PUSH
23560: LD_INT 1
23562: PUSH
23563: LD_INT 1
23565: PUSH
23566: LD_INT 0
23568: PUSH
23569: LD_INT 0
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 26
23586: PUSH
23587: LD_INT 39
23589: PUSH
23590: LD_INT 50
23592: PUSH
23593: LD_INT 2
23595: PUSH
23596: EMPTY
23597: PUSH
23598: LD_INT 1
23600: PUSH
23601: LD_INT 1
23603: PUSH
23604: LD_INT 1
23606: PUSH
23607: LD_INT 0
23609: PUSH
23610: LD_INT 0
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 5
23627: PUSH
23628: LD_INT 53
23630: PUSH
23631: LD_INT 67
23633: PUSH
23634: LD_INT 5
23636: PUSH
23637: EMPTY
23638: PUSH
23639: LD_INT 1
23641: PUSH
23642: LD_INT 1
23644: PUSH
23645: LD_INT 1
23647: PUSH
23648: LD_INT 1
23650: PUSH
23651: LD_INT 0
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: PUSH
23666: LD_INT 32
23668: PUSH
23669: LD_INT 57
23671: PUSH
23672: LD_INT 65
23674: PUSH
23675: LD_INT 5
23677: PUSH
23678: LD_INT 11
23680: PUSH
23681: EMPTY
23682: LIST
23683: PUSH
23684: LD_INT 1
23686: PUSH
23687: LD_INT 1
23689: PUSH
23690: LD_INT 1
23692: PUSH
23693: LD_INT 1
23695: PUSH
23696: LD_INT 0
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: PUSH
23711: LD_INT 32
23713: PUSH
23714: LD_INT 57
23716: PUSH
23717: LD_INT 68
23719: PUSH
23720: LD_INT 5
23722: PUSH
23723: LD_INT 5
23725: PUSH
23726: EMPTY
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: PUSH
23732: LD_INT 1
23734: PUSH
23735: LD_INT 1
23737: PUSH
23738: LD_INT 1
23740: PUSH
23741: LD_INT 0
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 32
23758: PUSH
23759: LD_INT 52
23761: PUSH
23762: LD_INT 47
23764: PUSH
23765: LD_INT 3
23767: PUSH
23768: LD_INT 4
23770: PUSH
23771: EMPTY
23772: LIST
23773: PUSH
23774: LD_INT 1
23776: PUSH
23777: LD_INT 1
23779: PUSH
23780: LD_INT 1
23782: PUSH
23783: LD_INT 1
23785: PUSH
23786: LD_INT 0
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 32
23803: PUSH
23804: LD_INT 60
23806: PUSH
23807: LD_INT 59
23809: PUSH
23810: LD_INT 4
23812: PUSH
23813: LD_INT 4
23815: PUSH
23816: EMPTY
23817: LIST
23818: PUSH
23819: LD_INT 1
23821: PUSH
23822: LD_INT 1
23824: PUSH
23825: LD_INT 1
23827: PUSH
23828: LD_INT 1
23830: PUSH
23831: LD_INT 0
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: ST_TO_ADDR
// builds5 := [ [ b_breastwork , 67 , 34 , 5 , [ ] , 1 , 0 , 0 , 1 , 1 ] , [ b_breastwork , 83 , 38 , 1 , [ ] , 1 , 0 , 0 , 1 , 0 ] ] ;
23859: LD_ADDR_EXP 109
23863: PUSH
23864: LD_INT 31
23866: PUSH
23867: LD_INT 67
23869: PUSH
23870: LD_INT 34
23872: PUSH
23873: LD_INT 5
23875: PUSH
23876: EMPTY
23877: PUSH
23878: LD_INT 1
23880: PUSH
23881: LD_INT 0
23883: PUSH
23884: LD_INT 0
23886: PUSH
23887: LD_INT 1
23889: PUSH
23890: LD_INT 1
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 31
23907: PUSH
23908: LD_INT 83
23910: PUSH
23911: LD_INT 38
23913: PUSH
23914: LD_INT 1
23916: PUSH
23917: EMPTY
23918: PUSH
23919: LD_INT 1
23921: PUSH
23922: LD_INT 0
23924: PUSH
23925: LD_INT 0
23927: PUSH
23928: LD_INT 1
23930: PUSH
23931: LD_INT 0
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: ST_TO_ADDR
// can_repair := [ ] ;
23950: LD_ADDR_EXP 117
23954: PUSH
23955: EMPTY
23956: ST_TO_ADDR
// can_rebuild := [ ] ;
23957: LD_ADDR_EXP 116
23961: PUSH
23962: EMPTY
23963: ST_TO_ADDR
// fort := [ ] ;
23964: LD_ADDR_EXP 120
23968: PUSH
23969: EMPTY
23970: ST_TO_ADDR
// SetResourceVisibility ( 101 , 93 , ai ) ;
23971: LD_INT 101
23973: PPUSH
23974: LD_INT 93
23976: PPUSH
23977: LD_EXP 6
23981: PPUSH
23982: CALL_OW 441
// b1 := place_base ( builds1 , kolik_je_v_depotu , 11 , 0 , b1_levels ) ;
23986: LD_ADDR_EXP 129
23990: PUSH
23991: LD_EXP 105
23995: PPUSH
23996: LD_EXP 36
24000: PPUSH
24001: LD_INT 11
24003: PPUSH
24004: LD_INT 0
24006: PPUSH
24007: LD_EXP 19
24011: PPUSH
24012: CALL 24527 0 5
24016: ST_TO_ADDR
// b2 := place_base ( builds2 , 250 , 94 , kolik_je_sib_v_hornim , b2_levels ) ;
24017: LD_ADDR_EXP 130
24021: PUSH
24022: LD_EXP 106
24026: PPUSH
24027: LD_INT 250
24029: PPUSH
24030: LD_INT 94
24032: PPUSH
24033: LD_EXP 37
24037: PPUSH
24038: LD_EXP 20
24042: PPUSH
24043: CALL 24527 0 5
24047: ST_TO_ADDR
// b3 := place_base ( builds3 , 4180 , 6400 , 500 , b3_levels ) ;
24048: LD_ADDR_EXP 131
24052: PUSH
24053: LD_EXP 107
24057: PPUSH
24058: LD_INT 4180
24060: PPUSH
24061: LD_INT 6400
24063: PPUSH
24064: LD_INT 500
24066: PPUSH
24067: LD_EXP 21
24071: PPUSH
24072: CALL 24527 0 5
24076: ST_TO_ADDR
// b4 := place_base ( builds4 , 0 , 0 , 0 , b4_levels ) ;
24077: LD_ADDR_EXP 132
24081: PUSH
24082: LD_EXP 108
24086: PPUSH
24087: LD_INT 0
24089: PPUSH
24090: LD_INT 0
24092: PPUSH
24093: LD_INT 0
24095: PPUSH
24096: LD_EXP 22
24100: PPUSH
24101: CALL 24527 0 5
24105: ST_TO_ADDR
// b5 := place_base ( builds5 , 0 , 0 , 0 , b5_levels ) ;
24106: LD_ADDR_EXP 133
24110: PUSH
24111: LD_EXP 109
24115: PPUSH
24116: LD_INT 0
24118: PPUSH
24119: LD_INT 0
24121: PPUSH
24122: LD_INT 0
24124: PPUSH
24125: LD_EXP 23
24129: PPUSH
24130: CALL 24527 0 5
24134: ST_TO_ADDR
// if fast_braketrough then
24135: LD_EXP 79
24139: IFFALSE 24172
// SetLives ( UnitFilter ( b1 , [ f_btype , b_armoury ] ) , zivoty_armoury ) else
24141: LD_EXP 129
24145: PPUSH
24146: LD_INT 30
24148: PUSH
24149: LD_INT 4
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PPUSH
24156: CALL_OW 72
24160: PPUSH
24161: LD_EXP 38
24165: PPUSH
24166: CALL_OW 234
24170: GO 24201
// SetLives ( UnitFilter ( b1 , [ f_btype , b_armoury ] ) , zivoty_armoury2 ) ;
24172: LD_EXP 129
24176: PPUSH
24177: LD_INT 30
24179: PUSH
24180: LD_INT 4
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PPUSH
24187: CALL_OW 72
24191: PPUSH
24192: LD_EXP 39
24196: PPUSH
24197: CALL_OW 234
// a1 := place_amici ( aici1 , abase1 ) ;
24201: LD_ADDR_EXP 134
24205: PUSH
24206: LD_EXP 110
24210: PPUSH
24211: LD_INT 9
24213: PPUSH
24214: CALL 25116 0 2
24218: ST_TO_ADDR
// for i in a1 do
24219: LD_ADDR_VAR 0 2
24223: PUSH
24224: LD_EXP 134
24228: PUSH
24229: FOR_IN
24230: IFFALSE 24246
// SetTag ( i , 1 ) ;
24232: LD_VAR 0 2
24236: PPUSH
24237: LD_INT 1
24239: PPUSH
24240: CALL_OW 109
24244: GO 24229
24246: POP
24247: POP
// a2 := place_amici ( aici2 , abase2 ) ;
24248: LD_ADDR_EXP 135
24252: PUSH
24253: LD_EXP 111
24257: PPUSH
24258: LD_INT 8
24260: PPUSH
24261: CALL 25116 0 2
24265: ST_TO_ADDR
// for i in a2 do
24266: LD_ADDR_VAR 0 2
24270: PUSH
24271: LD_EXP 135
24275: PUSH
24276: FOR_IN
24277: IFFALSE 24293
// SetTag ( i , 2 ) ;
24279: LD_VAR 0 2
24283: PPUSH
24284: LD_INT 2
24286: PPUSH
24287: CALL_OW 109
24291: GO 24276
24293: POP
24294: POP
// a3 := place_amici ( aici3 , abase3 ) ;
24295: LD_ADDR_EXP 136
24299: PUSH
24300: LD_EXP 112
24304: PPUSH
24305: LD_INT 6
24307: PPUSH
24308: CALL 25116 0 2
24312: ST_TO_ADDR
// for i in a3 do
24313: LD_ADDR_VAR 0 2
24317: PUSH
24318: LD_EXP 136
24322: PUSH
24323: FOR_IN
24324: IFFALSE 24340
// SetTag ( i , 3 ) ;
24326: LD_VAR 0 2
24330: PPUSH
24331: LD_INT 3
24333: PPUSH
24334: CALL_OW 109
24338: GO 24323
24340: POP
24341: POP
// a4 := place_amici ( aici4 , abase4 ) ;
24342: LD_ADDR_EXP 137
24346: PUSH
24347: LD_EXP 113
24351: PPUSH
24352: LD_INT 7
24354: PPUSH
24355: CALL 25116 0 2
24359: ST_TO_ADDR
// for i in a4 do
24360: LD_ADDR_VAR 0 2
24364: PUSH
24365: LD_EXP 137
24369: PUSH
24370: FOR_IN
24371: IFFALSE 24387
// SetTag ( i , 4 ) ;
24373: LD_VAR 0 2
24377: PPUSH
24378: LD_INT 4
24380: PPUSH
24381: CALL_OW 109
24385: GO 24370
24387: POP
24388: POP
// a5 := place_amici ( aici5 , abase5 ) ;
24389: LD_ADDR_EXP 138
24393: PUSH
24394: LD_EXP 114
24398: PPUSH
24399: LD_INT 10
24401: PPUSH
24402: CALL 25116 0 2
24406: ST_TO_ADDR
// for i in a5 do
24407: LD_ADDR_VAR 0 2
24411: PUSH
24412: LD_EXP 138
24416: PUSH
24417: FOR_IN
24418: IFFALSE 24434
// SetTag ( i , 5 ) ;
24420: LD_VAR 0 2
24424: PPUSH
24425: LD_INT 5
24427: PPUSH
24428: CALL_OW 109
24432: GO 24417
24434: POP
24435: POP
// a1eng := UnitFilter ( a1 , [ [ f_class , class_engineer ] ] ) ;
24436: LD_ADDR_EXP 115
24440: PUSH
24441: LD_EXP 134
24445: PPUSH
24446: LD_INT 25
24448: PUSH
24449: LD_INT 2
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: EMPTY
24457: LIST
24458: PPUSH
24459: CALL_OW 72
24463: ST_TO_ADDR
// if a1eng then
24464: LD_EXP 115
24468: IFFALSE 24484
// a1eng := a1eng [ 1 ] ;
24470: LD_ADDR_EXP 115
24474: PUSH
24475: LD_EXP 115
24479: PUSH
24480: LD_INT 1
24482: ARRAY
24483: ST_TO_ADDR
// InitUc ;
24484: CALL_OW 18
// InitHc ;
24488: CALL_OW 19
// uc_side := ai ;
24492: LD_ADDR_OWVAR 20
24496: PUSH
24497: LD_EXP 6
24501: ST_TO_ADDR
// uc_nation := americans ;
24502: LD_ADDR_OWVAR 21
24506: PUSH
24507: LD_EXP 3
24511: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
24512: LD_INT 1
24514: PPUSH
24515: LD_INT 10
24517: PPUSH
24518: CALL_OW 381
// end ;
24522: LD_VAR 0 1
24526: RET
// function place_base ( builds , cans , oil , sib , levels ) ; var i , base , b , tb , bb ; begin
24527: LD_INT 0
24529: PPUSH
24530: PPUSH
24531: PPUSH
24532: PPUSH
24533: PPUSH
24534: PPUSH
// InitUc ;
24535: CALL_OW 18
// InitBc ;
24539: CALL_OW 21
// uc_side := americans ;
24543: LD_ADDR_OWVAR 20
24547: PUSH
24548: LD_EXP 3
24552: ST_TO_ADDR
// uc_nation := nation_american ;
24553: LD_ADDR_OWVAR 21
24557: PUSH
24558: LD_INT 1
24560: ST_TO_ADDR
// b := [ ] ;
24561: LD_ADDR_VAR 0 9
24565: PUSH
24566: EMPTY
24567: ST_TO_ADDR
// for i in builds do
24568: LD_ADDR_VAR 0 7
24572: PUSH
24573: LD_VAR 0 1
24577: PUSH
24578: FOR_IN
24579: IFFALSE 24980
// begin tb := get_build ( i [ 2 ] , i [ 3 ] , 0 ) ;
24581: LD_ADDR_VAR 0 10
24585: PUSH
24586: LD_VAR 0 7
24590: PUSH
24591: LD_INT 2
24593: ARRAY
24594: PPUSH
24595: LD_VAR 0 7
24599: PUSH
24600: LD_INT 3
24602: ARRAY
24603: PPUSH
24604: LD_INT 0
24606: PPUSH
24607: CALL 26462 0 3
24611: ST_TO_ADDR
// if tb and not i [ 6 ] then
24612: LD_VAR 0 10
24616: PUSH
24617: LD_VAR 0 7
24621: PUSH
24622: LD_INT 6
24624: ARRAY
24625: NOT
24626: AND
24627: IFFALSE 24638
// RemoveUnit ( tb ) ;
24629: LD_VAR 0 10
24633: PPUSH
24634: CALL_OW 64
// if not tb and i [ 6 ] then
24638: LD_VAR 0 10
24642: NOT
24643: PUSH
24644: LD_VAR 0 7
24648: PUSH
24649: LD_INT 6
24651: ARRAY
24652: AND
24653: IFFALSE 24814
// begin bc_type := i [ 1 ] ;
24655: LD_ADDR_OWVAR 42
24659: PUSH
24660: LD_VAR 0 7
24664: PUSH
24665: LD_INT 1
24667: ARRAY
24668: ST_TO_ADDR
// if bc_type = b_lab or bc_type = b_lab_half or bc_type = b_lab_full then
24669: LD_OWVAR 42
24673: PUSH
24674: LD_INT 6
24676: EQUAL
24677: PUSH
24678: LD_OWVAR 42
24682: PUSH
24683: LD_INT 7
24685: EQUAL
24686: OR
24687: PUSH
24688: LD_OWVAR 42
24692: PUSH
24693: LD_INT 8
24695: EQUAL
24696: OR
24697: IFFALSE 24735
// begin bc_kind1 := i [ 5 ] [ 1 ] ;
24699: LD_ADDR_OWVAR 44
24703: PUSH
24704: LD_VAR 0 7
24708: PUSH
24709: LD_INT 5
24711: ARRAY
24712: PUSH
24713: LD_INT 1
24715: ARRAY
24716: ST_TO_ADDR
// bc_kind2 := i [ 5 ] [ 2 ] ;
24717: LD_ADDR_OWVAR 45
24721: PUSH
24722: LD_VAR 0 7
24726: PUSH
24727: LD_INT 5
24729: ARRAY
24730: PUSH
24731: LD_INT 2
24733: ARRAY
24734: ST_TO_ADDR
// end ; tb := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
24735: LD_ADDR_VAR 0 10
24739: PUSH
24740: LD_VAR 0 7
24744: PUSH
24745: LD_INT 2
24747: ARRAY
24748: PPUSH
24749: LD_VAR 0 7
24753: PUSH
24754: LD_INT 3
24756: ARRAY
24757: PPUSH
24758: LD_VAR 0 7
24762: PUSH
24763: LD_INT 4
24765: ARRAY
24766: PPUSH
24767: CALL_OW 47
24771: ST_TO_ADDR
// if bc_type = b_bunker or bc_type = b_turret then
24772: LD_OWVAR 42
24776: PUSH
24777: LD_INT 32
24779: EQUAL
24780: PUSH
24781: LD_OWVAR 42
24785: PUSH
24786: LD_INT 33
24788: EQUAL
24789: OR
24790: IFFALSE 24814
// PlaceWeaponTurret ( tb , i [ 5 ] [ 1 ] ) ;
24792: LD_VAR 0 10
24796: PPUSH
24797: LD_VAR 0 7
24801: PUSH
24802: LD_INT 5
24804: ARRAY
24805: PUSH
24806: LD_INT 1
24808: ARRAY
24809: PPUSH
24810: CALL_OW 431
// end ; if i [ 6 ] then
24814: LD_VAR 0 7
24818: PUSH
24819: LD_INT 6
24821: ARRAY
24822: IFFALSE 24843
// b := b ^ [ tb ] ;
24824: LD_ADDR_VAR 0 9
24828: PUSH
24829: LD_VAR 0 9
24833: PUSH
24834: LD_VAR 0 10
24838: PUSH
24839: EMPTY
24840: LIST
24841: ADD
24842: ST_TO_ADDR
// if i [ 7 ] then
24843: LD_VAR 0 7
24847: PUSH
24848: LD_INT 7
24850: ARRAY
24851: IFFALSE 24872
// can_rebuild := can_rebuild ^ [ tb ] ;
24853: LD_ADDR_EXP 116
24857: PUSH
24858: LD_EXP 116
24862: PUSH
24863: LD_VAR 0 10
24867: PUSH
24868: EMPTY
24869: LIST
24870: ADD
24871: ST_TO_ADDR
// if i [ 8 ] then
24872: LD_VAR 0 7
24876: PUSH
24877: LD_INT 8
24879: ARRAY
24880: IFFALSE 24901
// can_repair := can_rebuild ^ [ tb ] ;
24882: LD_ADDR_EXP 117
24886: PUSH
24887: LD_EXP 116
24891: PUSH
24892: LD_VAR 0 10
24896: PUSH
24897: EMPTY
24898: LIST
24899: ADD
24900: ST_TO_ADDR
// if i [ 9 ] then
24901: LD_VAR 0 7
24905: PUSH
24906: LD_INT 9
24908: ARRAY
24909: IFFALSE 24930
// fort := fort ^ [ tb ] ;
24911: LD_ADDR_EXP 120
24915: PUSH
24916: LD_EXP 120
24920: PUSH
24921: LD_VAR 0 10
24925: PUSH
24926: EMPTY
24927: LIST
24928: ADD
24929: ST_TO_ADDR
// if i [ 10 ] then
24930: LD_VAR 0 7
24934: PUSH
24935: LD_INT 10
24937: ARRAY
24938: IFFALSE 24960
// SetBLevel ( tb , levels [ 1 ] ) else
24940: LD_VAR 0 10
24944: PPUSH
24945: LD_VAR 0 5
24949: PUSH
24950: LD_INT 1
24952: ARRAY
24953: PPUSH
24954: CALL_OW 241
24958: GO 24978
// SetBLevel ( tb , levels [ 2 ] ) ;
24960: LD_VAR 0 10
24964: PPUSH
24965: LD_VAR 0 5
24969: PUSH
24970: LD_INT 2
24972: ARRAY
24973: PPUSH
24974: CALL_OW 241
// end ;
24978: GO 24578
24980: POP
24981: POP
// bb := UnitFilter ( b , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
24982: LD_ADDR_VAR 0 11
24986: PUSH
24987: LD_VAR 0 9
24991: PPUSH
24992: LD_INT 2
24994: PUSH
24995: LD_INT 30
24997: PUSH
24998: LD_INT 0
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: LD_INT 30
25007: PUSH
25008: LD_INT 1
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: LIST
25019: PPUSH
25020: CALL_OW 72
25024: ST_TO_ADDR
// if bb then
25025: LD_VAR 0 11
25029: IFFALSE 25101
// begin base := GetBase ( bb [ 1 ] ) ;
25031: LD_ADDR_VAR 0 8
25035: PUSH
25036: LD_VAR 0 11
25040: PUSH
25041: LD_INT 1
25043: ARRAY
25044: PPUSH
25045: CALL_OW 274
25049: ST_TO_ADDR
// SetResourceType ( base , mat_cans , cans ) ;
25050: LD_VAR 0 8
25054: PPUSH
25055: LD_INT 1
25057: PPUSH
25058: LD_VAR 0 2
25062: PPUSH
25063: CALL_OW 277
// SetResourceType ( base , mat_oil , oil ) ;
25067: LD_VAR 0 8
25071: PPUSH
25072: LD_INT 2
25074: PPUSH
25075: LD_VAR 0 3
25079: PPUSH
25080: CALL_OW 277
// SetResourceType ( base , mat_siberit , sib ) ;
25084: LD_VAR 0 8
25088: PPUSH
25089: LD_INT 3
25091: PPUSH
25092: LD_VAR 0 4
25096: PPUSH
25097: CALL_OW 277
// end ; result := b ;
25101: LD_ADDR_VAR 0 6
25105: PUSH
25106: LD_VAR 0 9
25110: ST_TO_ADDR
// end ;
25111: LD_VAR 0 6
25115: RET
// function place_amici ( amici , area ) ; var i , j , a ; begin
25116: LD_INT 0
25118: PPUSH
25119: PPUSH
25120: PPUSH
25121: PPUSH
// InitUc ;
25122: CALL_OW 18
// InitHc ;
25126: CALL_OW 19
// uc_side := americans ;
25130: LD_ADDR_OWVAR 20
25134: PUSH
25135: LD_EXP 3
25139: ST_TO_ADDR
// uc_nation := nation_american ;
25140: LD_ADDR_OWVAR 21
25144: PUSH
25145: LD_INT 1
25147: ST_TO_ADDR
// a := [ ] ;
25148: LD_ADDR_VAR 0 6
25152: PUSH
25153: EMPTY
25154: ST_TO_ADDR
// for i in amici do
25155: LD_ADDR_VAR 0 4
25159: PUSH
25160: LD_VAR 0 1
25164: PUSH
25165: FOR_IN
25166: IFFALSE 25240
// begin PrepareHuman ( 0 , i [ 2 ] , i [ 3 ] ) ;
25168: LD_INT 0
25170: PPUSH
25171: LD_VAR 0 4
25175: PUSH
25176: LD_INT 2
25178: ARRAY
25179: PPUSH
25180: LD_VAR 0 4
25184: PUSH
25185: LD_INT 3
25187: ARRAY
25188: PPUSH
25189: CALL_OW 380
// for j := 1 to i [ 1 ] do
25193: LD_ADDR_VAR 0 5
25197: PUSH
25198: DOUBLE
25199: LD_INT 1
25201: DEC
25202: ST_TO_ADDR
25203: LD_VAR 0 4
25207: PUSH
25208: LD_INT 1
25210: ARRAY
25211: PUSH
25212: FOR_TO
25213: IFFALSE 25236
// begin a := a ^ [ CreateHuman ] ;
25215: LD_ADDR_VAR 0 6
25219: PUSH
25220: LD_VAR 0 6
25224: PUSH
25225: CALL_OW 44
25229: PUSH
25230: EMPTY
25231: LIST
25232: ADD
25233: ST_TO_ADDR
// end ;
25234: GO 25212
25236: POP
25237: POP
// end ;
25238: GO 25165
25240: POP
25241: POP
// for i in a do
25242: LD_ADDR_VAR 0 4
25246: PUSH
25247: LD_VAR 0 6
25251: PUSH
25252: FOR_IN
25253: IFFALSE 25274
// PlaceUnitArea ( i , area , false ) ;
25255: LD_VAR 0 4
25259: PPUSH
25260: LD_VAR 0 2
25264: PPUSH
25265: LD_INT 0
25267: PPUSH
25268: CALL_OW 49
25272: GO 25252
25274: POP
25275: POP
// result := a ;
25276: LD_ADDR_VAR 0 3
25280: PUSH
25281: LD_VAR 0 6
25285: ST_TO_ADDR
// end ;
25286: LD_VAR 0 3
25290: RET
// every 0 0$4 + 0 0$3.5 do var i , j , weap , builds ;
25291: GO 25293
25293: DISABLE
25294: LD_INT 0
25296: PPUSH
25297: PPUSH
25298: PPUSH
25299: PPUSH
// begin for i in UnitFilter ( can_rebuild , [ [ f_side , ai ] , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ] ) do
25300: LD_ADDR_VAR 0 1
25304: PUSH
25305: LD_EXP 116
25309: PPUSH
25310: LD_INT 22
25312: PUSH
25313: LD_EXP 6
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 2
25324: PUSH
25325: LD_INT 30
25327: PUSH
25328: LD_INT 33
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 30
25337: PUSH
25338: LD_INT 32
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: LIST
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PPUSH
25354: CALL_OW 72
25358: PUSH
25359: FOR_IN
25360: IFFALSE 25504
// if not GetBWeapon ( i ) then
25362: LD_VAR 0 1
25366: PPUSH
25367: CALL_OW 269
25371: NOT
25372: IFFALSE 25502
// begin weap := 0 ;
25374: LD_ADDR_VAR 0 3
25378: PUSH
25379: LD_INT 0
25381: ST_TO_ADDR
// for j in builds do
25382: LD_ADDR_VAR 0 2
25386: PUSH
25387: LD_VAR 0 4
25391: PUSH
25392: FOR_IN
25393: IFFALSE 25480
// if GetX ( i ) = j [ 2 ] and GetY ( i ) = j [ 3 ] and GetBType ( i ) = j [ 1 ] then
25395: LD_VAR 0 1
25399: PPUSH
25400: CALL_OW 250
25404: PUSH
25405: LD_VAR 0 2
25409: PUSH
25410: LD_INT 2
25412: ARRAY
25413: EQUAL
25414: PUSH
25415: LD_VAR 0 1
25419: PPUSH
25420: CALL_OW 251
25424: PUSH
25425: LD_VAR 0 2
25429: PUSH
25430: LD_INT 3
25432: ARRAY
25433: EQUAL
25434: AND
25435: PUSH
25436: LD_VAR 0 1
25440: PPUSH
25441: CALL_OW 266
25445: PUSH
25446: LD_VAR 0 2
25450: PUSH
25451: LD_INT 1
25453: ARRAY
25454: EQUAL
25455: AND
25456: IFFALSE 25478
// begin weap := j [ 5 ] [ 1 ] ;
25458: LD_ADDR_VAR 0 3
25462: PUSH
25463: LD_VAR 0 2
25467: PUSH
25468: LD_INT 5
25470: ARRAY
25471: PUSH
25472: LD_INT 1
25474: ARRAY
25475: ST_TO_ADDR
// break ;
25476: GO 25480
// end ;
25478: GO 25392
25480: POP
25481: POP
// if weap then
25482: LD_VAR 0 3
25486: IFFALSE 25502
// ComPlaceWeapon ( j , weap ) ;
25488: LD_VAR 0 2
25492: PPUSH
25493: LD_VAR 0 3
25497: PPUSH
25498: CALL_OW 148
// end ;
25502: GO 25359
25504: POP
25505: POP
// enable ;
25506: ENABLE
// end ;
25507: PPOPN 4
25509: END
// every 0 0$4 + 0 0$0.5 do var i , j , to_up , to_b , builds , weap , co_tam_stoji ;
25510: GO 25512
25512: DISABLE
25513: LD_INT 0
25515: PPUSH
25516: PPUSH
25517: PPUSH
25518: PPUSH
25519: PPUSH
25520: PPUSH
25521: PPUSH
// begin for i in builds3 do
25522: LD_ADDR_VAR 0 1
25526: PUSH
25527: LD_EXP 107
25531: PUSH
25532: FOR_IN
25533: IFFALSE 25705
// begin if i [ 7 ] then
25535: LD_VAR 0 1
25539: PUSH
25540: LD_INT 7
25542: ARRAY
25543: IFFALSE 25703
// begin co_tam_stoji := GetBType ( get_build ( i [ 2 ] , i [ 3 ] , 0 ) ) ;
25545: LD_ADDR_VAR 0 7
25549: PUSH
25550: LD_VAR 0 1
25554: PUSH
25555: LD_INT 2
25557: ARRAY
25558: PPUSH
25559: LD_VAR 0 1
25563: PUSH
25564: LD_INT 3
25566: ARRAY
25567: PPUSH
25568: LD_INT 0
25570: PPUSH
25571: CALL 26462 0 3
25575: PPUSH
25576: CALL_OW 266
25580: ST_TO_ADDR
// if GetSide ( co_tam_stoji ) = ai then
25581: LD_VAR 0 7
25585: PPUSH
25586: CALL_OW 255
25590: PUSH
25591: LD_EXP 6
25595: EQUAL
25596: IFFALSE 25703
// if co_tam_stoji = - 1 then
25598: LD_VAR 0 7
25602: PUSH
25603: LD_INT 1
25605: NEG
25606: EQUAL
25607: IFFALSE 25673
// begin to_b := [ BasicFrom ( i [ 1 ] ) , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 5 ] ] ;
25609: LD_ADDR_VAR 0 4
25613: PUSH
25614: LD_VAR 0 1
25618: PUSH
25619: LD_INT 1
25621: ARRAY
25622: PPUSH
25623: CALL 19351 0 1
25627: PUSH
25628: LD_VAR 0 1
25632: PUSH
25633: LD_INT 2
25635: ARRAY
25636: PUSH
25637: LD_VAR 0 1
25641: PUSH
25642: LD_INT 3
25644: ARRAY
25645: PUSH
25646: LD_VAR 0 1
25650: PUSH
25651: LD_INT 4
25653: ARRAY
25654: PUSH
25655: LD_VAR 0 1
25659: PUSH
25660: LD_INT 5
25662: ARRAY
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: ST_TO_ADDR
// end else
25671: GO 25703
// if UpgradeableTo ( co_tam_stoji , i [ 1 ] ) then
25673: LD_VAR 0 7
25677: PPUSH
25678: LD_VAR 0 1
25682: PUSH
25683: LD_INT 1
25685: ARRAY
25686: PPUSH
25687: CALL 19087 0 2
25691: IFFALSE 25703
// begin to_up := i ;
25693: LD_ADDR_VAR 0 3
25697: PUSH
25698: LD_VAR 0 1
25702: ST_TO_ADDR
// end ; end ; end ;
25703: GO 25532
25705: POP
25706: POP
// if to_b then
25707: LD_VAR 0 4
25711: IFFALSE 25783
// ComBuild ( NearestUnitToXY ( eng , to_b [ 2 ] , to_b [ 3 ] ) , to_b [ 1 ] , to_b [ 2 ] , to_b [ 3 ] , to_b [ 4 ] ) else
25713: LD_EXP 124
25717: PPUSH
25718: LD_VAR 0 4
25722: PUSH
25723: LD_INT 2
25725: ARRAY
25726: PPUSH
25727: LD_VAR 0 4
25731: PUSH
25732: LD_INT 3
25734: ARRAY
25735: PPUSH
25736: CALL_OW 73
25740: PPUSH
25741: LD_VAR 0 4
25745: PUSH
25746: LD_INT 1
25748: ARRAY
25749: PPUSH
25750: LD_VAR 0 4
25754: PUSH
25755: LD_INT 2
25757: ARRAY
25758: PPUSH
25759: LD_VAR 0 4
25763: PUSH
25764: LD_INT 3
25766: ARRAY
25767: PPUSH
25768: LD_VAR 0 4
25772: PUSH
25773: LD_INT 4
25775: ARRAY
25776: PPUSH
25777: CALL_OW 145
25781: GO 25819
// if to_up then
25783: LD_VAR 0 3
25787: IFFALSE 25819
// ComUpgrade ( get_build ( i [ 2 ] , i [ 3 ] , 0 ) ) ;
25789: LD_VAR 0 1
25793: PUSH
25794: LD_INT 2
25796: ARRAY
25797: PPUSH
25798: LD_VAR 0 1
25802: PUSH
25803: LD_INT 3
25805: ARRAY
25806: PPUSH
25807: LD_INT 0
25809: PPUSH
25810: CALL 26462 0 3
25814: PPUSH
25815: CALL_OW 146
// enable ;
25819: ENABLE
// end ;
25820: PPOPN 7
25822: END
// every 0 0$4 + 0 0$1.5 do var i , j , to_up , to_b , builds , weap , co_tam_stoji ;
25823: GO 25825
25825: DISABLE
25826: LD_INT 0
25828: PPUSH
25829: PPUSH
25830: PPUSH
25831: PPUSH
25832: PPUSH
25833: PPUSH
25834: PPUSH
// begin for i in builds4 do
25835: LD_ADDR_VAR 0 1
25839: PUSH
25840: LD_EXP 108
25844: PUSH
25845: FOR_IN
25846: IFFALSE 26018
// begin if i [ 7 ] then
25848: LD_VAR 0 1
25852: PUSH
25853: LD_INT 7
25855: ARRAY
25856: IFFALSE 26016
// begin co_tam_stoji := GetBType ( get_build ( i [ 2 ] , i [ 3 ] , 0 ) ) ;
25858: LD_ADDR_VAR 0 7
25862: PUSH
25863: LD_VAR 0 1
25867: PUSH
25868: LD_INT 2
25870: ARRAY
25871: PPUSH
25872: LD_VAR 0 1
25876: PUSH
25877: LD_INT 3
25879: ARRAY
25880: PPUSH
25881: LD_INT 0
25883: PPUSH
25884: CALL 26462 0 3
25888: PPUSH
25889: CALL_OW 266
25893: ST_TO_ADDR
// if GetSide ( co_tam_stoji ) = ai then
25894: LD_VAR 0 7
25898: PPUSH
25899: CALL_OW 255
25903: PUSH
25904: LD_EXP 6
25908: EQUAL
25909: IFFALSE 26016
// if co_tam_stoji = - 1 then
25911: LD_VAR 0 7
25915: PUSH
25916: LD_INT 1
25918: NEG
25919: EQUAL
25920: IFFALSE 25986
// begin to_b := [ BasicFrom ( i [ 1 ] ) , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 5 ] ] ;
25922: LD_ADDR_VAR 0 4
25926: PUSH
25927: LD_VAR 0 1
25931: PUSH
25932: LD_INT 1
25934: ARRAY
25935: PPUSH
25936: CALL 19351 0 1
25940: PUSH
25941: LD_VAR 0 1
25945: PUSH
25946: LD_INT 2
25948: ARRAY
25949: PUSH
25950: LD_VAR 0 1
25954: PUSH
25955: LD_INT 3
25957: ARRAY
25958: PUSH
25959: LD_VAR 0 1
25963: PUSH
25964: LD_INT 4
25966: ARRAY
25967: PUSH
25968: LD_VAR 0 1
25972: PUSH
25973: LD_INT 5
25975: ARRAY
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: ST_TO_ADDR
// end else
25984: GO 26016
// if UpgradeableTo ( co_tam_stoji , i [ 1 ] ) then
25986: LD_VAR 0 7
25990: PPUSH
25991: LD_VAR 0 1
25995: PUSH
25996: LD_INT 1
25998: ARRAY
25999: PPUSH
26000: CALL 19087 0 2
26004: IFFALSE 26016
// begin to_up := i ;
26006: LD_ADDR_VAR 0 3
26010: PUSH
26011: LD_VAR 0 1
26015: ST_TO_ADDR
// end ; end ; end ;
26016: GO 25845
26018: POP
26019: POP
// if to_b then
26020: LD_VAR 0 4
26024: IFFALSE 26096
// ComBuild ( NearestUnitToXY ( eng , to_b [ 2 ] , to_b [ 3 ] ) , to_b [ 1 ] , to_b [ 2 ] , to_b [ 3 ] , to_b [ 4 ] ) else
26026: LD_EXP 124
26030: PPUSH
26031: LD_VAR 0 4
26035: PUSH
26036: LD_INT 2
26038: ARRAY
26039: PPUSH
26040: LD_VAR 0 4
26044: PUSH
26045: LD_INT 3
26047: ARRAY
26048: PPUSH
26049: CALL_OW 73
26053: PPUSH
26054: LD_VAR 0 4
26058: PUSH
26059: LD_INT 1
26061: ARRAY
26062: PPUSH
26063: LD_VAR 0 4
26067: PUSH
26068: LD_INT 2
26070: ARRAY
26071: PPUSH
26072: LD_VAR 0 4
26076: PUSH
26077: LD_INT 3
26079: ARRAY
26080: PPUSH
26081: LD_VAR 0 4
26085: PUSH
26086: LD_INT 4
26088: ARRAY
26089: PPUSH
26090: CALL_OW 145
26094: GO 26132
// if to_up then
26096: LD_VAR 0 3
26100: IFFALSE 26132
// ComUpgrade ( get_build ( i [ 2 ] , i [ 3 ] , 0 ) ) ;
26102: LD_VAR 0 1
26106: PUSH
26107: LD_INT 2
26109: ARRAY
26110: PPUSH
26111: LD_VAR 0 1
26115: PUSH
26116: LD_INT 3
26118: ARRAY
26119: PPUSH
26120: LD_INT 0
26122: PPUSH
26123: CALL 26462 0 3
26127: PPUSH
26128: CALL_OW 146
// enable ;
26132: ENABLE
// end ;
26133: PPOPN 7
26135: END
// every 0 0$4 + 0 0$2.5 trigger ( not OvsyenkoTaken ) or ( OvsyenkoCaptured ) do var i , j , to_up , to_b , builds , weap , co_tam_stoji ;
26136: LD_EXP 14
26140: NOT
26141: PUSH
26142: LD_EXP 15
26146: OR
26147: IFFALSE 26459
26149: GO 26151
26151: DISABLE
26152: LD_INT 0
26154: PPUSH
26155: PPUSH
26156: PPUSH
26157: PPUSH
26158: PPUSH
26159: PPUSH
26160: PPUSH
// begin for i in builds1 do
26161: LD_ADDR_VAR 0 1
26165: PUSH
26166: LD_EXP 105
26170: PUSH
26171: FOR_IN
26172: IFFALSE 26344
// begin if i [ 7 ] then
26174: LD_VAR 0 1
26178: PUSH
26179: LD_INT 7
26181: ARRAY
26182: IFFALSE 26342
// begin co_tam_stoji := GetBType ( get_build ( i [ 2 ] , i [ 3 ] , 0 ) ) ;
26184: LD_ADDR_VAR 0 7
26188: PUSH
26189: LD_VAR 0 1
26193: PUSH
26194: LD_INT 2
26196: ARRAY
26197: PPUSH
26198: LD_VAR 0 1
26202: PUSH
26203: LD_INT 3
26205: ARRAY
26206: PPUSH
26207: LD_INT 0
26209: PPUSH
26210: CALL 26462 0 3
26214: PPUSH
26215: CALL_OW 266
26219: ST_TO_ADDR
// if GetSide ( co_tam_stoji ) = ai then
26220: LD_VAR 0 7
26224: PPUSH
26225: CALL_OW 255
26229: PUSH
26230: LD_EXP 6
26234: EQUAL
26235: IFFALSE 26342
// if co_tam_stoji = - 1 then
26237: LD_VAR 0 7
26241: PUSH
26242: LD_INT 1
26244: NEG
26245: EQUAL
26246: IFFALSE 26312
// begin to_b := [ BasicFrom ( i [ 1 ] ) , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 5 ] ] ;
26248: LD_ADDR_VAR 0 4
26252: PUSH
26253: LD_VAR 0 1
26257: PUSH
26258: LD_INT 1
26260: ARRAY
26261: PPUSH
26262: CALL 19351 0 1
26266: PUSH
26267: LD_VAR 0 1
26271: PUSH
26272: LD_INT 2
26274: ARRAY
26275: PUSH
26276: LD_VAR 0 1
26280: PUSH
26281: LD_INT 3
26283: ARRAY
26284: PUSH
26285: LD_VAR 0 1
26289: PUSH
26290: LD_INT 4
26292: ARRAY
26293: PUSH
26294: LD_VAR 0 1
26298: PUSH
26299: LD_INT 5
26301: ARRAY
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: ST_TO_ADDR
// end else
26310: GO 26342
// if UpgradeableTo ( co_tam_stoji , i [ 1 ] ) then
26312: LD_VAR 0 7
26316: PPUSH
26317: LD_VAR 0 1
26321: PUSH
26322: LD_INT 1
26324: ARRAY
26325: PPUSH
26326: CALL 19087 0 2
26330: IFFALSE 26342
// begin to_up := i ;
26332: LD_ADDR_VAR 0 3
26336: PUSH
26337: LD_VAR 0 1
26341: ST_TO_ADDR
// end ; end ; end ;
26342: GO 26171
26344: POP
26345: POP
// if to_b then
26346: LD_VAR 0 4
26350: IFFALSE 26422
// ComBuild ( NearestUnitToXY ( eng , to_b [ 2 ] , to_b [ 3 ] ) , to_b [ 1 ] , to_b [ 2 ] , to_b [ 3 ] , to_b [ 4 ] ) else
26352: LD_EXP 124
26356: PPUSH
26357: LD_VAR 0 4
26361: PUSH
26362: LD_INT 2
26364: ARRAY
26365: PPUSH
26366: LD_VAR 0 4
26370: PUSH
26371: LD_INT 3
26373: ARRAY
26374: PPUSH
26375: CALL_OW 73
26379: PPUSH
26380: LD_VAR 0 4
26384: PUSH
26385: LD_INT 1
26387: ARRAY
26388: PPUSH
26389: LD_VAR 0 4
26393: PUSH
26394: LD_INT 2
26396: ARRAY
26397: PPUSH
26398: LD_VAR 0 4
26402: PUSH
26403: LD_INT 3
26405: ARRAY
26406: PPUSH
26407: LD_VAR 0 4
26411: PUSH
26412: LD_INT 4
26414: ARRAY
26415: PPUSH
26416: CALL_OW 145
26420: GO 26458
// if to_up then
26422: LD_VAR 0 3
26426: IFFALSE 26458
// ComUpgrade ( get_build ( i [ 2 ] , i [ 3 ] , 0 ) ) ;
26428: LD_VAR 0 1
26432: PUSH
26433: LD_INT 2
26435: ARRAY
26436: PPUSH
26437: LD_VAR 0 1
26441: PUSH
26442: LD_INT 3
26444: ARRAY
26445: PPUSH
26446: LD_INT 0
26448: PPUSH
26449: CALL 26462 0 3
26453: PPUSH
26454: CALL_OW 146
// enable ;
26458: ENABLE
// end ;
26459: PPOPN 7
26461: END
// function get_build ( x , y , btype ) ; begin
26462: LD_INT 0
26464: PPUSH
// result := HexInfo ( x , y ) ;
26465: LD_ADDR_VAR 0 4
26469: PUSH
26470: LD_VAR 0 1
26474: PPUSH
26475: LD_VAR 0 2
26479: PPUSH
26480: CALL_OW 428
26484: ST_TO_ADDR
// if result < 1 then
26485: LD_VAR 0 4
26489: PUSH
26490: LD_INT 1
26492: LESS
26493: IFFALSE 26503
// result := 0 ;
26495: LD_ADDR_VAR 0 4
26499: PUSH
26500: LD_INT 0
26502: ST_TO_ADDR
// if btype then
26503: LD_VAR 0 3
26507: IFFALSE 26559
// if btype <> GetBType ( result ) then
26509: LD_VAR 0 3
26513: PUSH
26514: LD_VAR 0 4
26518: PPUSH
26519: CALL_OW 266
26523: NONEQUAL
26524: IFFALSE 26536
// result := 0 else
26526: LD_ADDR_VAR 0 4
26530: PUSH
26531: LD_INT 0
26533: ST_TO_ADDR
26534: GO 26559
// if unit_building <> GetType ( result ) then
26536: LD_INT 3
26538: PUSH
26539: LD_VAR 0 4
26543: PPUSH
26544: CALL_OW 247
26548: NONEQUAL
26549: IFFALSE 26559
// result := 0 ;
26551: LD_ADDR_VAR 0 4
26555: PUSH
26556: LD_INT 0
26558: ST_TO_ADDR
// end ; end_of_file
26559: LD_VAR 0 4
26563: RET
// var opravit ; var opravari ; every 0 0$3 trigger not under_attack do var zivoty , i , bb ;
26564: LD_EXP 141
26568: NOT
26569: IFFALSE 26752
26571: GO 26573
26573: DISABLE
26574: LD_INT 0
26576: PPUSH
26577: PPUSH
26578: PPUSH
// begin opravit := [ ] ;
26579: LD_ADDR_LOC 19
26583: PUSH
26584: EMPTY
26585: ST_TO_ADDR
// zivoty := [ ] ;
26586: LD_ADDR_VAR 0 1
26590: PUSH
26591: EMPTY
26592: ST_TO_ADDR
// for i in UnitFilter ( can_repair , [ f_side , ai ] ) do
26593: LD_ADDR_VAR 0 2
26597: PUSH
26598: LD_EXP 117
26602: PPUSH
26603: LD_INT 22
26605: PUSH
26606: LD_EXP 6
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PPUSH
26615: CALL_OW 72
26619: PUSH
26620: FOR_IN
26621: IFFALSE 26723
// begin if GetLives ( i ) < 1000 and ( difficulty > 2 and GetX ( i ) = 41 and GetX ( i ) = 23 ) then
26623: LD_VAR 0 2
26627: PPUSH
26628: CALL_OW 256
26632: PUSH
26633: LD_INT 1000
26635: LESS
26636: PUSH
26637: LD_OWVAR 67
26641: PUSH
26642: LD_INT 2
26644: GREATER
26645: PUSH
26646: LD_VAR 0 2
26650: PPUSH
26651: CALL_OW 250
26655: PUSH
26656: LD_INT 41
26658: EQUAL
26659: AND
26660: PUSH
26661: LD_VAR 0 2
26665: PPUSH
26666: CALL_OW 250
26670: PUSH
26671: LD_INT 23
26673: EQUAL
26674: AND
26675: AND
26676: IFFALSE 26721
// begin opravit := opravit ^ [ i ] ;
26678: LD_ADDR_LOC 19
26682: PUSH
26683: LD_LOC 19
26687: PUSH
26688: LD_VAR 0 2
26692: PUSH
26693: EMPTY
26694: LIST
26695: ADD
26696: ST_TO_ADDR
// zivoty := zivoty ^ [ GetLives ( i ) ] ;
26697: LD_ADDR_VAR 0 1
26701: PUSH
26702: LD_VAR 0 1
26706: PUSH
26707: LD_VAR 0 2
26711: PPUSH
26712: CALL_OW 256
26716: PUSH
26717: EMPTY
26718: LIST
26719: ADD
26720: ST_TO_ADDR
// end ; end ;
26721: GO 26620
26723: POP
26724: POP
// if opravit then
26725: LD_LOC 19
26729: IFFALSE 26751
// begin opravit := SortListByListAsc ( opravit , zivoty ) ;
26731: LD_ADDR_LOC 19
26735: PUSH
26736: LD_LOC 19
26740: PPUSH
26741: LD_VAR 0 1
26745: PPUSH
26746: CALL_OW 76
26750: ST_TO_ADDR
// end ; enable ;
26751: ENABLE
// end ;
26752: PPOPN 3
26754: END
// every 0 0$3 trigger not under_attack do
26755: LD_EXP 141
26759: NOT
26760: IFFALSE 26854
26762: GO 26764
26764: DISABLE
// begin if opravit then
26765: LD_LOC 19
26769: IFFALSE 26853
// begin if opravit [ 1 ] in can_repair then
26771: LD_LOC 19
26775: PUSH
26776: LD_INT 1
26778: ARRAY
26779: PUSH
26780: LD_EXP 117
26784: IN
26785: IFFALSE 26853
// ComRepairBuilding ( UnitFilter ( eng , [ f_dist , opravit [ 1 ] , ( 5 - GetLives ( opravit [ 1 ] ) div 200 ) * 7 ] ) , opravit [ 1 ] ) ;
26787: LD_EXP 124
26791: PPUSH
26792: LD_INT 91
26794: PUSH
26795: LD_LOC 19
26799: PUSH
26800: LD_INT 1
26802: ARRAY
26803: PUSH
26804: LD_INT 5
26806: PUSH
26807: LD_LOC 19
26811: PUSH
26812: LD_INT 1
26814: ARRAY
26815: PPUSH
26816: CALL_OW 256
26820: PUSH
26821: LD_INT 200
26823: DIV
26824: MINUS
26825: PUSH
26826: LD_INT 7
26828: MUL
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: LIST
26834: PPUSH
26835: CALL_OW 72
26839: PPUSH
26840: LD_LOC 19
26844: PUSH
26845: LD_INT 1
26847: ARRAY
26848: PPUSH
26849: CALL_OW 130
// end ; enable ;
26853: ENABLE
// end ; end_of_file
26854: END
// export fort , ctrl , sol , dep , eng , fact , mec , lab , sci ; export b1 , b2 , b3 , b4 , b5 ; export a1 , a2 , a3 , a4 , a5 ; export attack , defence ; export under_attack ; export mcdef ; export ct ; export sib_dul ; every 3 do
26855: GO 26857
26857: DISABLE
// begin sol := FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) ;
26858: LD_ADDR_EXP 122
26862: PUSH
26863: LD_INT 22
26865: PUSH
26866: LD_EXP 6
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 25
26877: PUSH
26878: LD_INT 1
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PPUSH
26889: CALL_OW 69
26893: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , ai ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26894: LD_ADDR_EXP 123
26898: PUSH
26899: LD_INT 22
26901: PUSH
26902: LD_EXP 6
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 2
26913: PUSH
26914: LD_INT 30
26916: PUSH
26917: LD_INT 0
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 30
26926: PUSH
26927: LD_INT 1
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: LIST
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PPUSH
26943: CALL_OW 69
26947: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_engineer ] ] ) ;
26948: LD_ADDR_EXP 124
26952: PUSH
26953: LD_INT 22
26955: PUSH
26956: LD_EXP 6
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 25
26967: PUSH
26968: LD_INT 2
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PPUSH
26979: CALL_OW 69
26983: ST_TO_ADDR
// fact := FilterAllUnits ( [ [ f_side , ai ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_workshop ] ] ] ) ;
26984: LD_ADDR_EXP 125
26988: PUSH
26989: LD_INT 22
26991: PUSH
26992: LD_EXP 6
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 2
27003: PUSH
27004: LD_INT 30
27006: PUSH
27007: LD_INT 3
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 30
27016: PUSH
27017: LD_INT 2
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: LIST
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PPUSH
27033: CALL_OW 69
27037: ST_TO_ADDR
// ctrl := FilterAllUnits ( [ [ f_side , ai ] , [ f_btype , b_control_tower ] ] ) ;
27038: LD_ADDR_EXP 121
27042: PUSH
27043: LD_INT 22
27045: PUSH
27046: LD_EXP 6
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 30
27057: PUSH
27058: LD_INT 36
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PPUSH
27069: CALL_OW 69
27073: ST_TO_ADDR
// mec := FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) ;
27074: LD_ADDR_EXP 126
27078: PUSH
27079: LD_INT 22
27081: PUSH
27082: LD_EXP 6
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 25
27093: PUSH
27094: LD_INT 3
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PPUSH
27105: CALL_OW 69
27109: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , ai ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
27110: LD_ADDR_EXP 127
27114: PUSH
27115: LD_INT 22
27117: PUSH
27118: LD_EXP 6
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 2
27129: PUSH
27130: LD_INT 30
27132: PUSH
27133: LD_INT 6
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 30
27142: PUSH
27143: LD_INT 7
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: LD_INT 30
27152: PUSH
27153: LD_INT 8
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PPUSH
27170: CALL_OW 69
27174: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_scientistic ] ] ) ;
27175: LD_ADDR_EXP 128
27179: PUSH
27180: LD_INT 22
27182: PUSH
27183: LD_EXP 6
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 25
27194: PUSH
27195: LD_INT 4
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PPUSH
27206: CALL_OW 69
27210: ST_TO_ADDR
// sib_dul := FilterAllUnits ( [ [ f_side , ai ] , [ f_btype , b_siberite_mine ] , [ f_distxy , 101 , 93 , 5 ] ] ) ;
27211: LD_ADDR_EXP 144
27215: PUSH
27216: LD_INT 22
27218: PUSH
27219: LD_EXP 6
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 30
27230: PUSH
27231: LD_INT 30
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 92
27240: PUSH
27241: LD_INT 101
27243: PUSH
27244: LD_INT 93
27246: PUSH
27247: LD_INT 5
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: LIST
27260: PPUSH
27261: CALL_OW 69
27265: ST_TO_ADDR
// if sib_dul then
27266: LD_EXP 144
27270: IFFALSE 27286
// sib_dul := sib_dul [ 1 ] ;
27272: LD_ADDR_EXP 144
27276: PUSH
27277: LD_EXP 144
27281: PUSH
27282: LD_INT 1
27284: ARRAY
27285: ST_TO_ADDR
// end ;
27286: END
// every 20 20$0 do var a , i ;
27287: GO 27289
27289: DISABLE
27290: LD_INT 0
27292: PPUSH
27293: PPUSH
// begin InitUc ;
27294: CALL_OW 18
// InitHc ;
27298: CALL_OW 19
// uc_nation := nation_american ;
27302: LD_ADDR_OWVAR 21
27306: PUSH
27307: LD_INT 1
27309: ST_TO_ADDR
// uc_side := americans ;
27310: LD_ADDR_OWVAR 20
27314: PUSH
27315: LD_EXP 3
27319: ST_TO_ADDR
// for i := 1 to 5 do
27320: LD_ADDR_VAR 0 2
27324: PUSH
27325: DOUBLE
27326: LD_INT 1
27328: DEC
27329: ST_TO_ADDR
27330: LD_INT 5
27332: PUSH
27333: FOR_TO
27334: IFFALSE 27418
// begin PrepareMechanic ( 0 , 5 ) ;
27336: LD_INT 0
27338: PPUSH
27339: LD_INT 5
27341: PPUSH
27342: CALL_OW 383
// hc_class := class_soldier ;
27346: LD_ADDR_OWVAR 28
27350: PUSH
27351: LD_INT 1
27353: ST_TO_ADDR
// a := CreateHuman ;
27354: LD_ADDR_VAR 0 1
27358: PUSH
27359: CALL_OW 44
27363: ST_TO_ADDR
// PlaceUnitXYR ( a , 21 , 2 , 5 , false ) ;
27364: LD_VAR 0 1
27368: PPUSH
27369: LD_INT 21
27371: PPUSH
27372: LD_INT 2
27374: PPUSH
27375: LD_INT 5
27377: PPUSH
27378: LD_INT 0
27380: PPUSH
27381: CALL_OW 50
// ComMoveXY ( a , 25 , 32 ) ;
27385: LD_VAR 0 1
27389: PPUSH
27390: LD_INT 25
27392: PPUSH
27393: LD_INT 32
27395: PPUSH
27396: CALL_OW 111
// sol := sol ^ a ;
27400: LD_ADDR_EXP 122
27404: PUSH
27405: LD_EXP 122
27409: PUSH
27410: LD_VAR 0 1
27414: ADD
27415: ST_TO_ADDR
// end ;
27416: GO 27333
27418: POP
27419: POP
// end ;
27420: PPOPN 2
27422: END
// every 0 0$3 do var i , cm ;
27423: GO 27425
27425: DISABLE
27426: LD_INT 0
27428: PPUSH
27429: PPUSH
// begin if ctrl then
27430: LD_EXP 121
27434: IFFALSE 27853
// begin cm := UnitFilter ( UnitsInside ( ctrl [ 1 ] ) , [ [ f_class , class_mechanic ] ] ) ;
27436: LD_ADDR_VAR 0 2
27440: PUSH
27441: LD_EXP 121
27445: PUSH
27446: LD_INT 1
27448: ARRAY
27449: PPUSH
27450: CALL_OW 313
27454: PPUSH
27455: LD_INT 25
27457: PUSH
27458: LD_INT 3
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: EMPTY
27466: LIST
27467: PPUSH
27468: CALL_OW 72
27472: ST_TO_ADDR
// for i in cm do
27473: LD_ADDR_VAR 0 1
27477: PUSH
27478: LD_VAR 0 2
27482: PUSH
27483: FOR_IN
27484: IFFALSE 27529
// if UnitsLinked ( i ) >= GetSkill ( i , skill_mechanical ) then
27486: LD_VAR 0 1
27490: PPUSH
27491: CALL_OW 432
27495: PUSH
27496: LD_VAR 0 1
27500: PPUSH
27501: LD_INT 3
27503: PPUSH
27504: CALL_OW 259
27508: GREATEREQUAL
27509: IFFALSE 27527
// cm := cm diff i ;
27511: LD_ADDR_VAR 0 2
27515: PUSH
27516: LD_VAR 0 2
27520: PUSH
27521: LD_VAR 0 1
27525: DIFF
27526: ST_TO_ADDR
27527: GO 27483
27529: POP
27530: POP
// for i in attack do
27531: LD_ADDR_VAR 0 1
27535: PUSH
27536: LD_EXP 139
27540: PUSH
27541: FOR_IN
27542: IFFALSE 27851
// begin if not IsControledBy ( i ) then
27544: LD_VAR 0 1
27548: PPUSH
27549: CALL_OW 312
27553: NOT
27554: IFFALSE 27849
// case cm of 1 :
27556: LD_VAR 0 2
27560: PUSH
27561: LD_INT 1
27563: DOUBLE
27564: EQUAL
27565: IFTRUE 27569
27567: GO 27590
27569: POP
// ComLinkTo ( i , cm [ 1 ] ) ; 2 :
27570: LD_VAR 0 1
27574: PPUSH
27575: LD_VAR 0 2
27579: PUSH
27580: LD_INT 1
27582: ARRAY
27583: PPUSH
27584: CALL_OW 135
27588: GO 27849
27590: LD_INT 2
27592: DOUBLE
27593: EQUAL
27594: IFTRUE 27598
27596: GO 27669
27598: POP
// if UnitsLinked ( cm [ 1 ] ) <= UnitsLinked ( cm [ 2 ] ) then
27599: LD_VAR 0 2
27603: PUSH
27604: LD_INT 1
27606: ARRAY
27607: PPUSH
27608: CALL_OW 432
27612: PUSH
27613: LD_VAR 0 2
27617: PUSH
27618: LD_INT 2
27620: ARRAY
27621: PPUSH
27622: CALL_OW 432
27626: LESSEQUAL
27627: IFFALSE 27649
// ComLinkTo ( i , cm [ 1 ] ) else
27629: LD_VAR 0 1
27633: PPUSH
27634: LD_VAR 0 2
27638: PUSH
27639: LD_INT 1
27641: ARRAY
27642: PPUSH
27643: CALL_OW 135
27647: GO 27667
// ComLinkTo ( i , cm [ 2 ] ) ; 3 :
27649: LD_VAR 0 1
27653: PPUSH
27654: LD_VAR 0 2
27658: PUSH
27659: LD_INT 2
27661: ARRAY
27662: PPUSH
27663: CALL_OW 135
27667: GO 27849
27669: LD_INT 3
27671: DOUBLE
27672: EQUAL
27673: IFTRUE 27677
27675: GO 27848
27677: POP
// if UnitsLinked ( cm [ 1 ] ) <= UnitsLinked ( cm [ 2 ] ) then
27678: LD_VAR 0 2
27682: PUSH
27683: LD_INT 1
27685: ARRAY
27686: PPUSH
27687: CALL_OW 432
27691: PUSH
27692: LD_VAR 0 2
27696: PUSH
27697: LD_INT 2
27699: ARRAY
27700: PPUSH
27701: CALL_OW 432
27705: LESSEQUAL
27706: IFFALSE 27778
// if UnitsLinked ( cm [ 1 ] ) <= UnitsLinked ( cm [ 3 ] ) then
27708: LD_VAR 0 2
27712: PUSH
27713: LD_INT 1
27715: ARRAY
27716: PPUSH
27717: CALL_OW 432
27721: PUSH
27722: LD_VAR 0 2
27726: PUSH
27727: LD_INT 3
27729: ARRAY
27730: PPUSH
27731: CALL_OW 432
27735: LESSEQUAL
27736: IFFALSE 27758
// ComLinkTo ( i , cm [ 1 ] ) else
27738: LD_VAR 0 1
27742: PPUSH
27743: LD_VAR 0 2
27747: PUSH
27748: LD_INT 1
27750: ARRAY
27751: PPUSH
27752: CALL_OW 135
27756: GO 27776
// ComLinkTo ( i , cm [ 3 ] ) else
27758: LD_VAR 0 1
27762: PPUSH
27763: LD_VAR 0 2
27767: PUSH
27768: LD_INT 3
27770: ARRAY
27771: PPUSH
27772: CALL_OW 135
27776: GO 27846
// if UnitsLinked ( cm [ 2 ] ) <= UnitsLinked ( cm [ 3 ] ) then
27778: LD_VAR 0 2
27782: PUSH
27783: LD_INT 2
27785: ARRAY
27786: PPUSH
27787: CALL_OW 432
27791: PUSH
27792: LD_VAR 0 2
27796: PUSH
27797: LD_INT 3
27799: ARRAY
27800: PPUSH
27801: CALL_OW 432
27805: LESSEQUAL
27806: IFFALSE 27828
// ComLinkTo ( i , cm [ 2 ] ) else
27808: LD_VAR 0 1
27812: PPUSH
27813: LD_VAR 0 2
27817: PUSH
27818: LD_INT 2
27820: ARRAY
27821: PPUSH
27822: CALL_OW 135
27826: GO 27846
// ComLinkTo ( i , cm [ 3 ] ) ; end ;
27828: LD_VAR 0 1
27832: PPUSH
27833: LD_VAR 0 2
27837: PUSH
27838: LD_INT 3
27840: ARRAY
27841: PPUSH
27842: CALL_OW 135
27846: GO 27849
27848: POP
// end ;
27849: GO 27541
27851: POP
27852: POP
// end ; enable ;
27853: ENABLE
// end ;
27854: PPOPN 2
27856: END
// every 0 0$2 + 0 0$0.1 do var i , j , blds , hums , cars ;
27857: GO 27859
27859: DISABLE
27860: LD_INT 0
27862: PPUSH
27863: PPUSH
27864: PPUSH
27865: PPUSH
27866: PPUSH
// begin blds := UnitFilter ( fort , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_not , [ f_occupied ] ] ] ) ;
27867: LD_ADDR_VAR 0 3
27871: PUSH
27872: LD_EXP 120
27876: PPUSH
27877: LD_INT 2
27879: PUSH
27880: LD_INT 30
27882: PUSH
27883: LD_INT 32
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 30
27892: PUSH
27893: LD_INT 31
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 3
27907: PUSH
27908: LD_INT 59
27910: PUSH
27911: EMPTY
27912: LIST
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: PPUSH
27922: CALL_OW 72
27926: ST_TO_ADDR
// hums := [ ] ;
27927: LD_ADDR_VAR 0 4
27931: PUSH
27932: EMPTY
27933: ST_TO_ADDR
// for i in sol do
27934: LD_ADDR_VAR 0 1
27938: PUSH
27939: LD_EXP 122
27943: PUSH
27944: FOR_IN
27945: IFFALSE 28059
// if ( IsIdle ( i ) and GetBType ( IsInUnit ( i ) ) <> b_bunker and GetBType ( IsInUnit ( i ) ) <> b_breastwork ) or GetBType ( IsInUnit ( i ) ) = b_barracks or GetBType ( IsInUnit ( i ) ) = b_armoury then
27947: LD_VAR 0 1
27951: PPUSH
27952: CALL_OW 316
27956: PUSH
27957: LD_VAR 0 1
27961: PPUSH
27962: CALL_OW 310
27966: PPUSH
27967: CALL_OW 266
27971: PUSH
27972: LD_INT 32
27974: NONEQUAL
27975: AND
27976: PUSH
27977: LD_VAR 0 1
27981: PPUSH
27982: CALL_OW 310
27986: PPUSH
27987: CALL_OW 266
27991: PUSH
27992: LD_INT 31
27994: NONEQUAL
27995: AND
27996: PUSH
27997: LD_VAR 0 1
28001: PPUSH
28002: CALL_OW 310
28006: PPUSH
28007: CALL_OW 266
28011: PUSH
28012: LD_INT 5
28014: EQUAL
28015: OR
28016: PUSH
28017: LD_VAR 0 1
28021: PPUSH
28022: CALL_OW 310
28026: PPUSH
28027: CALL_OW 266
28031: PUSH
28032: LD_INT 4
28034: EQUAL
28035: OR
28036: IFFALSE 28057
// hums := hums ^ [ i ] ;
28038: LD_ADDR_VAR 0 4
28042: PUSH
28043: LD_VAR 0 4
28047: PUSH
28048: LD_VAR 0 1
28052: PUSH
28053: EMPTY
28054: LIST
28055: ADD
28056: ST_TO_ADDR
28057: GO 27944
28059: POP
28060: POP
// for i in blds do
28061: LD_ADDR_VAR 0 1
28065: PUSH
28066: LD_VAR 0 3
28070: PUSH
28071: FOR_IN
28072: IFFALSE 28177
// begin j := NearestUnitToUnit ( UnitFilter ( hums , [ [ f_side , Getside ( i ) ] , [ f_dist , i , 30 ] ] ) , i ) ;
28074: LD_ADDR_VAR 0 2
28078: PUSH
28079: LD_VAR 0 4
28083: PPUSH
28084: LD_INT 22
28086: PUSH
28087: LD_VAR 0 1
28091: PPUSH
28092: CALL_OW 255
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 91
28103: PUSH
28104: LD_VAR 0 1
28108: PUSH
28109: LD_INT 30
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: LIST
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PPUSH
28121: CALL_OW 72
28125: PPUSH
28126: LD_VAR 0 1
28130: PPUSH
28131: CALL_OW 74
28135: ST_TO_ADDR
// ComExitBuilding ( j ) ;
28136: LD_VAR 0 2
28140: PPUSH
28141: CALL_OW 122
// AddComEnterUnit ( j , i ) ;
28145: LD_VAR 0 2
28149: PPUSH
28150: LD_VAR 0 1
28154: PPUSH
28155: CALL_OW 180
// hums := hums diff j ;
28159: LD_ADDR_VAR 0 4
28163: PUSH
28164: LD_VAR 0 4
28168: PUSH
28169: LD_VAR 0 2
28173: DIFF
28174: ST_TO_ADDR
// end ;
28175: GO 28071
28177: POP
28178: POP
// cars := UnitFilter ( defence , [ f_not , [ f_occupied ] ] ) ;
28179: LD_ADDR_VAR 0 5
28183: PUSH
28184: LD_EXP 140
28188: PPUSH
28189: LD_INT 3
28191: PUSH
28192: LD_INT 59
28194: PUSH
28195: EMPTY
28196: LIST
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PPUSH
28202: CALL_OW 72
28206: ST_TO_ADDR
// for i in cars do
28207: LD_ADDR_VAR 0 1
28211: PUSH
28212: LD_VAR 0 5
28216: PUSH
28217: FOR_IN
28218: IFFALSE 28323
// begin j := NearestUnitToUnit ( UnitFilter ( hums , [ [ f_side , Getside ( i ) ] , [ f_dist , i , 20 ] ] ) , i ) ;
28220: LD_ADDR_VAR 0 2
28224: PUSH
28225: LD_VAR 0 4
28229: PPUSH
28230: LD_INT 22
28232: PUSH
28233: LD_VAR 0 1
28237: PPUSH
28238: CALL_OW 255
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 91
28249: PUSH
28250: LD_VAR 0 1
28254: PUSH
28255: LD_INT 20
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: LIST
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PPUSH
28267: CALL_OW 72
28271: PPUSH
28272: LD_VAR 0 1
28276: PPUSH
28277: CALL_OW 74
28281: ST_TO_ADDR
// ComExitBuilding ( j ) ;
28282: LD_VAR 0 2
28286: PPUSH
28287: CALL_OW 122
// AddComEnterUnit ( j , i ) ;
28291: LD_VAR 0 2
28295: PPUSH
28296: LD_VAR 0 1
28300: PPUSH
28301: CALL_OW 180
// hums := hums diff j ;
28305: LD_ADDR_VAR 0 4
28309: PUSH
28310: LD_VAR 0 4
28314: PUSH
28315: LD_VAR 0 2
28319: DIFF
28320: ST_TO_ADDR
// end ;
28321: GO 28217
28323: POP
28324: POP
// blds := UnitFilter ( fort diff blds , [ f_not , [ f_occupied ] ] ) ;
28325: LD_ADDR_VAR 0 3
28329: PUSH
28330: LD_EXP 120
28334: PUSH
28335: LD_VAR 0 3
28339: DIFF
28340: PPUSH
28341: LD_INT 3
28343: PUSH
28344: LD_INT 59
28346: PUSH
28347: EMPTY
28348: LIST
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PPUSH
28354: CALL_OW 72
28358: ST_TO_ADDR
// for i in blds do
28359: LD_ADDR_VAR 0 1
28363: PUSH
28364: LD_VAR 0 3
28368: PUSH
28369: FOR_IN
28370: IFFALSE 28430
// ComEnterUnit ( UnitFilter ( hums , [ [ f_side , Getside ( i ) ] , [ f_dist , i , 30 ] ] ) , i ) ;
28372: LD_VAR 0 4
28376: PPUSH
28377: LD_INT 22
28379: PUSH
28380: LD_VAR 0 1
28384: PPUSH
28385: CALL_OW 255
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 91
28396: PUSH
28397: LD_VAR 0 1
28401: PUSH
28402: LD_INT 30
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: LIST
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PPUSH
28414: CALL_OW 72
28418: PPUSH
28419: LD_VAR 0 1
28423: PPUSH
28424: CALL_OW 120
28428: GO 28369
28430: POP
28431: POP
// enable ;
28432: ENABLE
// end ;
28433: PPOPN 5
28435: END
// every 0 0$2 + 0 0$0.5 do var i , j , blds , hums ;
28436: GO 28438
28438: DISABLE
28439: LD_INT 0
28441: PPUSH
28442: PPUSH
28443: PPUSH
28444: PPUSH
// begin blds := dep ;
28445: LD_ADDR_VAR 0 3
28449: PUSH
28450: LD_EXP 123
28454: ST_TO_ADDR
// hums := [ ] ;
28455: LD_ADDR_VAR 0 4
28459: PUSH
28460: EMPTY
28461: ST_TO_ADDR
// for i in eng do
28462: LD_ADDR_VAR 0 1
28466: PUSH
28467: LD_EXP 124
28471: PUSH
28472: FOR_IN
28473: IFFALSE 28519
// if IsIdle ( i ) and not IsInUnit ( i ) then
28475: LD_VAR 0 1
28479: PPUSH
28480: CALL_OW 316
28484: PUSH
28485: LD_VAR 0 1
28489: PPUSH
28490: CALL_OW 310
28494: NOT
28495: AND
28496: IFFALSE 28517
// hums := hums ^ [ i ] ;
28498: LD_ADDR_VAR 0 4
28502: PUSH
28503: LD_VAR 0 4
28507: PUSH
28508: LD_VAR 0 1
28512: PUSH
28513: EMPTY
28514: LIST
28515: ADD
28516: ST_TO_ADDR
28517: GO 28472
28519: POP
28520: POP
// for i in blds do
28521: LD_ADDR_VAR 0 1
28525: PUSH
28526: LD_VAR 0 3
28530: PUSH
28531: FOR_IN
28532: IFFALSE 28592
// ComEnterUnit ( UnitFilter ( hums , [ [ f_side , Getside ( i ) ] , [ f_dist , i , 30 ] ] ) , i ) ;
28534: LD_VAR 0 4
28538: PPUSH
28539: LD_INT 22
28541: PUSH
28542: LD_VAR 0 1
28546: PPUSH
28547: CALL_OW 255
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 91
28558: PUSH
28559: LD_VAR 0 1
28563: PUSH
28564: LD_INT 30
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: LIST
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PPUSH
28576: CALL_OW 72
28580: PPUSH
28581: LD_VAR 0 1
28585: PPUSH
28586: CALL_OW 120
28590: GO 28531
28592: POP
28593: POP
// enable ;
28594: ENABLE
// end ;
28595: PPOPN 4
28597: END
// every 0 0$2 + 0 0$0.7 do var i , j , blds , hums ;
28598: GO 28600
28600: DISABLE
28601: LD_INT 0
28603: PPUSH
28604: PPUSH
28605: PPUSH
28606: PPUSH
// begin blds := fact ;
28607: LD_ADDR_VAR 0 3
28611: PUSH
28612: LD_EXP 125
28616: ST_TO_ADDR
// hums := [ ] ;
28617: LD_ADDR_VAR 0 4
28621: PUSH
28622: EMPTY
28623: ST_TO_ADDR
// for i in mec do
28624: LD_ADDR_VAR 0 1
28628: PUSH
28629: LD_EXP 126
28633: PUSH
28634: FOR_IN
28635: IFFALSE 28696
// if ( IsIdle ( i ) and not IsInUnit ( i ) ) or not IsInArea ( i , def_base ) then
28637: LD_VAR 0 1
28641: PPUSH
28642: CALL_OW 316
28646: PUSH
28647: LD_VAR 0 1
28651: PPUSH
28652: CALL_OW 310
28656: NOT
28657: AND
28658: PUSH
28659: LD_VAR 0 1
28663: PPUSH
28664: LD_INT 19
28666: PPUSH
28667: CALL_OW 308
28671: NOT
28672: OR
28673: IFFALSE 28694
// hums := hums ^ [ i ] ;
28675: LD_ADDR_VAR 0 4
28679: PUSH
28680: LD_VAR 0 4
28684: PUSH
28685: LD_VAR 0 1
28689: PUSH
28690: EMPTY
28691: LIST
28692: ADD
28693: ST_TO_ADDR
28694: GO 28634
28696: POP
28697: POP
// for i in blds do
28698: LD_ADDR_VAR 0 1
28702: PUSH
28703: LD_VAR 0 3
28707: PUSH
28708: FOR_IN
28709: IFFALSE 28769
// ComEnterUnit ( UnitFilter ( hums , [ [ f_side , Getside ( i ) ] , [ f_dist , i , 30 ] ] ) , i ) ;
28711: LD_VAR 0 4
28715: PPUSH
28716: LD_INT 22
28718: PUSH
28719: LD_VAR 0 1
28723: PPUSH
28724: CALL_OW 255
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 91
28735: PUSH
28736: LD_VAR 0 1
28740: PUSH
28741: LD_INT 30
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: LIST
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PPUSH
28753: CALL_OW 72
28757: PPUSH
28758: LD_VAR 0 1
28762: PPUSH
28763: CALL_OW 120
28767: GO 28708
28769: POP
28770: POP
// enable ;
28771: ENABLE
// end ;
28772: PPOPN 4
28774: END
// every 0 0$2 + 0 0$0.35 do var i , j , bld , hums ;
28775: GO 28777
28777: DISABLE
28778: LD_INT 0
28780: PPUSH
28781: PPUSH
28782: PPUSH
28783: PPUSH
// begin if ct < 2 then
28784: LD_EXP 143
28788: PUSH
28789: LD_INT 2
28791: LESS
28792: IFFALSE 28996
// if ctrl then
28794: LD_EXP 121
28798: IFFALSE 28996
// begin bld := ctrl [ 1 ] ;
28800: LD_ADDR_VAR 0 3
28804: PUSH
28805: LD_EXP 121
28809: PUSH
28810: LD_INT 1
28812: ARRAY
28813: ST_TO_ADDR
// hums := [ ] ;
28814: LD_ADDR_VAR 0 4
28818: PUSH
28819: EMPTY
28820: ST_TO_ADDR
// for i in get_x_best ( mec , mec , skill_mechanical , 0 , false ) do
28821: LD_ADDR_VAR 0 1
28825: PUSH
28826: LD_EXP 126
28830: PPUSH
28831: LD_EXP 126
28835: PPUSH
28836: LD_INT 3
28838: PPUSH
28839: LD_INT 0
28841: PPUSH
28842: LD_INT 0
28844: PPUSH
28845: CALL 10367 0 5
28849: PUSH
28850: FOR_IN
28851: IFFALSE 28914
// if GetBType ( IsInUnit ( i ) ) <> b_control_tower and GetType ( IsInUnit ( i ) ) <> unit_vehicle then
28853: LD_VAR 0 1
28857: PPUSH
28858: CALL_OW 310
28862: PPUSH
28863: CALL_OW 266
28867: PUSH
28868: LD_INT 36
28870: NONEQUAL
28871: PUSH
28872: LD_VAR 0 1
28876: PPUSH
28877: CALL_OW 310
28881: PPUSH
28882: CALL_OW 247
28886: PUSH
28887: LD_INT 2
28889: NONEQUAL
28890: AND
28891: IFFALSE 28912
// hums := hums ^ [ i ] ;
28893: LD_ADDR_VAR 0 4
28897: PUSH
28898: LD_VAR 0 4
28902: PUSH
28903: LD_VAR 0 1
28907: PUSH
28908: EMPTY
28909: LIST
28910: ADD
28911: ST_TO_ADDR
28912: GO 28850
28914: POP
28915: POP
// ct := ct union get_x_best ( UnitFilter ( mec , [ [ f_dist , bld , 50 ] ] ) , 2 , skill_mechanical , 0 , false ) ;
28916: LD_ADDR_EXP 143
28920: PUSH
28921: LD_EXP 143
28925: PUSH
28926: LD_EXP 126
28930: PPUSH
28931: LD_INT 91
28933: PUSH
28934: LD_VAR 0 3
28938: PUSH
28939: LD_INT 50
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: LIST
28946: PUSH
28947: EMPTY
28948: LIST
28949: PPUSH
28950: CALL_OW 72
28954: PPUSH
28955: LD_INT 2
28957: PPUSH
28958: LD_INT 3
28960: PPUSH
28961: LD_INT 0
28963: PPUSH
28964: LD_INT 0
28966: PPUSH
28967: CALL 10367 0 5
28971: UNION
28972: ST_TO_ADDR
// remove_from_humans ( ct ) ;
28973: LD_EXP 143
28977: PPUSH
28978: CALL 32467 0 1
// ComEnterUnit ( ct , bld ) ;
28982: LD_EXP 143
28986: PPUSH
28987: LD_VAR 0 3
28991: PPUSH
28992: CALL_OW 120
// end ; enable ;
28996: ENABLE
// end ;
28997: PPOPN 4
28999: END
// every 0 0$2 + 0 0$0.9 do var i , j , blds , hums ;
29000: GO 29002
29002: DISABLE
29003: LD_INT 0
29005: PPUSH
29006: PPUSH
29007: PPUSH
29008: PPUSH
// begin blds := lab ;
29009: LD_ADDR_VAR 0 3
29013: PUSH
29014: LD_EXP 127
29018: ST_TO_ADDR
// hums := [ ] ;
29019: LD_ADDR_VAR 0 4
29023: PUSH
29024: EMPTY
29025: ST_TO_ADDR
// for i in sci do
29026: LD_ADDR_VAR 0 1
29030: PUSH
29031: LD_EXP 128
29035: PUSH
29036: FOR_IN
29037: IFFALSE 29083
// if IsIdle ( i ) and not IsInUnit ( i ) then
29039: LD_VAR 0 1
29043: PPUSH
29044: CALL_OW 316
29048: PUSH
29049: LD_VAR 0 1
29053: PPUSH
29054: CALL_OW 310
29058: NOT
29059: AND
29060: IFFALSE 29081
// hums := hums ^ [ i ] ;
29062: LD_ADDR_VAR 0 4
29066: PUSH
29067: LD_VAR 0 4
29071: PUSH
29072: LD_VAR 0 1
29076: PUSH
29077: EMPTY
29078: LIST
29079: ADD
29080: ST_TO_ADDR
29081: GO 29036
29083: POP
29084: POP
// for i in blds do
29085: LD_ADDR_VAR 0 1
29089: PUSH
29090: LD_VAR 0 3
29094: PUSH
29095: FOR_IN
29096: IFFALSE 29156
// ComEnterUnit ( UnitFilter ( hums , [ [ f_side , Getside ( i ) ] , [ f_dist , i , 30 ] ] ) , i ) ;
29098: LD_VAR 0 4
29102: PPUSH
29103: LD_INT 22
29105: PUSH
29106: LD_VAR 0 1
29110: PPUSH
29111: CALL_OW 255
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 91
29122: PUSH
29123: LD_VAR 0 1
29127: PUSH
29128: LD_INT 30
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: LIST
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PPUSH
29140: CALL_OW 72
29144: PPUSH
29145: LD_VAR 0 1
29149: PPUSH
29150: CALL_OW 120
29154: GO 29095
29156: POP
29157: POP
// enable ;
29158: ENABLE
// end ;
29159: PPOPN 4
29161: END
// every 0 0$2 + 0 0$0.8 do var i , j , blds , hums ;
29162: GO 29164
29164: DISABLE
29165: LD_INT 0
29167: PPUSH
29168: PPUSH
29169: PPUSH
29170: PPUSH
// begin for i in a3 ^ a4 do
29171: LD_ADDR_VAR 0 1
29175: PUSH
29176: LD_EXP 136
29180: PUSH
29181: LD_EXP 137
29185: ADD
29186: PUSH
29187: FOR_IN
29188: IFFALSE 29405
// begin if IsIdle ( i ) and not IsInArea ( i , def_base ) and not IsInUnit ( i ) then
29190: LD_VAR 0 1
29194: PPUSH
29195: CALL_OW 316
29199: PUSH
29200: LD_VAR 0 1
29204: PPUSH
29205: LD_INT 19
29207: PPUSH
29208: CALL_OW 308
29212: NOT
29213: AND
29214: PUSH
29215: LD_VAR 0 1
29219: PPUSH
29220: CALL_OW 310
29224: NOT
29225: AND
29226: IFFALSE 29282
// if GetDistUnitArea ( i , abase3 ) < GetDistUnitArea ( i , abase4 ) then
29228: LD_VAR 0 1
29232: PPUSH
29233: LD_INT 6
29235: PPUSH
29236: CALL_OW 299
29240: PUSH
29241: LD_VAR 0 1
29245: PPUSH
29246: LD_INT 7
29248: PPUSH
29249: CALL_OW 299
29253: LESS
29254: IFFALSE 29270
// ComMoveToArea ( i , abase3 ) else
29256: LD_VAR 0 1
29260: PPUSH
29261: LD_INT 6
29263: PPUSH
29264: CALL_OW 113
29268: GO 29282
// ComMoveToArea ( i , abase4 ) ;
29270: LD_VAR 0 1
29274: PPUSH
29275: LD_INT 7
29277: PPUSH
29278: CALL_OW 113
// if IsIdle ( IsInUnit ( i ) ) and not IsInArea ( IsInUnit ( i ) , def_base ) and IsInUnit ( i ) then
29282: LD_VAR 0 1
29286: PPUSH
29287: CALL_OW 310
29291: PPUSH
29292: CALL_OW 316
29296: PUSH
29297: LD_VAR 0 1
29301: PPUSH
29302: CALL_OW 310
29306: PPUSH
29307: LD_INT 19
29309: PPUSH
29310: CALL_OW 308
29314: NOT
29315: AND
29316: PUSH
29317: LD_VAR 0 1
29321: PPUSH
29322: CALL_OW 310
29326: AND
29327: IFFALSE 29403
// if GetDistUnitArea ( IsInUnit ( i ) , abase3 ) < GetDistUnitArea ( IsInUnit ( i ) , abase4 ) then
29329: LD_VAR 0 1
29333: PPUSH
29334: CALL_OW 310
29338: PPUSH
29339: LD_INT 6
29341: PPUSH
29342: CALL_OW 299
29346: PUSH
29347: LD_VAR 0 1
29351: PPUSH
29352: CALL_OW 310
29356: PPUSH
29357: LD_INT 7
29359: PPUSH
29360: CALL_OW 299
29364: LESS
29365: IFFALSE 29386
// ComMoveToArea ( IsInUnit ( i ) , abase3 ) else
29367: LD_VAR 0 1
29371: PPUSH
29372: CALL_OW 310
29376: PPUSH
29377: LD_INT 6
29379: PPUSH
29380: CALL_OW 113
29384: GO 29403
// ComMoveToArea ( IsInUnit ( i ) , abase4 ) ;
29386: LD_VAR 0 1
29390: PPUSH
29391: CALL_OW 310
29395: PPUSH
29396: LD_INT 7
29398: PPUSH
29399: CALL_OW 113
// end ;
29403: GO 29187
29405: POP
29406: POP
// enable ;
29407: ENABLE
// end ; end_of_file
29408: PPOPN 4
29410: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = you then
29411: LD_VAR 0 2
29415: PPUSH
29416: CALL_OW 255
29420: PUSH
29421: LD_EXP 1
29425: EQUAL
29426: IFFALSE 29464
// case tech of tech_MatPred :
29428: LD_VAR 0 1
29432: PUSH
29433: LD_INT 9
29435: DOUBLE
29436: EQUAL
29437: IFTRUE 29441
29439: GO 29448
29441: POP
// DNoMaterial ; tech_TauField :
29442: CALL 1896 0 0
29446: GO 29464
29448: LD_INT 30
29450: DOUBLE
29451: EQUAL
29452: IFTRUE 29456
29454: GO 29463
29456: POP
// DStasis ; end ;
29457: CALL 5460 0 0
29461: GO 29464
29463: POP
// end ;
29464: PPOPN 2
29466: END
// on EndTheMissionRaised ( aa ) do begin end_the_mission_allowed := false ;
29467: LD_ADDR_OWVAR 57
29471: PUSH
29472: LD_INT 0
29474: ST_TO_ADDR
// VyhraExit ;
29475: CALL 355 0 0
// end ;
29479: PPOPN 1
29481: END
// on UnitDestroyed ( un ) do begin remove_from_vehicles ( un ) ;
29482: LD_VAR 0 1
29486: PPUSH
29487: CALL 32637 0 1
// remove_from_humans ( un ) ;
29491: LD_VAR 0 1
29495: PPUSH
29496: CALL 32467 0 1
// remove_from_builds ( un ) ;
29500: LD_VAR 0 1
29504: PPUSH
29505: CALL 32281 0 1
// if un = Burlak then
29509: LD_VAR 0 1
29513: PUSH
29514: LD_EXP 62
29518: EQUAL
29519: IFFALSE 29528
// YouLost ( Burlak ) ;
29521: LD_STRING Burlak
29523: PPUSH
29524: CALL_OW 104
// if un = Gleb and utok_na_gleba then
29528: LD_VAR 0 1
29532: PUSH
29533: LD_EXP 66
29537: EQUAL
29538: PUSH
29539: LD_EXP 61
29543: AND
29544: IFFALSE 29553
// YouLost ( Gleb ) ;
29546: LD_STRING Gleb
29548: PPUSH
29549: CALL_OW 104
// if un = Vsevolod then
29553: LD_VAR 0 1
29557: PUSH
29558: LD_EXP 71
29562: EQUAL
29563: IFFALSE 29636
// begin if GetSide ( un ) = 6 then
29565: LD_VAR 0 1
29569: PPUSH
29570: CALL_OW 255
29574: PUSH
29575: LD_INT 6
29577: EQUAL
29578: IFFALSE 29584
// SA_NotSaveVsevolod ;
29580: CALL 33539 0 0
// mrtvi_vsevolodaci := mrtvi_vsevolodaci ^ [ Vsevolod ] ;
29584: LD_ADDR_EXP 42
29588: PUSH
29589: LD_EXP 42
29593: PUSH
29594: LD_STRING Vsevolod
29596: PUSH
29597: EMPTY
29598: LIST
29599: ADD
29600: ST_TO_ADDR
// SetSide ( Vsevolod2 , GetSide ( Vsevolod ) ) ;
29601: LD_EXP 72
29605: PPUSH
29606: LD_EXP 71
29610: PPUSH
29611: CALL_OW 255
29615: PPUSH
29616: CALL_OW 235
// if kecali then
29620: LD_EXP 55
29624: IFFALSE 29632
// DDieVsev2 else
29626: CALL 5432 0 0
29630: GO 29636
// DDieVsev1 ;
29632: CALL 5387 0 0
// end ; if un in Vsevolod_uderna_group then
29636: LD_VAR 0 1
29640: PUSH
29641: LD_EXP 12
29645: IN
29646: IFFALSE 29691
// begin Vsevolod_uderna_group := Vsevolod_uderna_group diff un ;
29648: LD_ADDR_EXP 12
29652: PUSH
29653: LD_EXP 12
29657: PUSH
29658: LD_VAR 0 1
29662: DIFF
29663: ST_TO_ADDR
// mrtvi_vsevolodaci := mrtvi_vsevolodaci ^ [ vsev_g_ & ( mrtvi_vsevolodaci + 1 ) ] ;
29664: LD_ADDR_EXP 42
29668: PUSH
29669: LD_EXP 42
29673: PUSH
29674: LD_STRING vsev_g_
29676: PUSH
29677: LD_EXP 42
29681: PUSH
29682: LD_INT 1
29684: PLUS
29685: STR
29686: PUSH
29687: EMPTY
29688: LIST
29689: ADD
29690: ST_TO_ADDR
// end ; end ;
29691: PPOPN 1
29693: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = ai then
29694: LD_VAR 0 1
29698: PPUSH
29699: CALL_OW 255
29703: PUSH
29704: LD_EXP 6
29708: EQUAL
29709: IFFALSE 29764
// begin case GetType ( un ) of unit_vehicle :
29711: LD_VAR 0 1
29715: PPUSH
29716: CALL_OW 247
29720: PUSH
29721: LD_INT 2
29723: DOUBLE
29724: EQUAL
29725: IFTRUE 29729
29727: GO 29732
29729: POP
// ; unit_human :
29730: GO 29764
29732: LD_INT 1
29734: DOUBLE
29735: EQUAL
29736: IFTRUE 29740
29738: GO 29752
29740: POP
// begin zachranka ( un ) ;
29741: LD_VAR 0 1
29745: PPUSH
29746: CALL 32695 0 1
// end ; unit_building :
29750: GO 29764
29752: LD_INT 3
29754: DOUBLE
29755: EQUAL
29756: IFTRUE 29760
29758: GO 29763
29760: POP
// begin end ; end ;
29761: GO 29764
29763: POP
// end ; if MyGodMode and GetSide ( un ) = you then
29764: LD_EXP 145
29768: PUSH
29769: LD_VAR 0 1
29773: PPUSH
29774: CALL_OW 255
29778: PUSH
29779: LD_EXP 1
29783: EQUAL
29784: AND
29785: IFFALSE 29799
// SetLives ( un , 1000 ) ;
29787: LD_VAR 0 1
29791: PPUSH
29792: LD_INT 1000
29794: PPUSH
29795: CALL_OW 234
// end ;
29799: PPOPN 1
29801: END
// export MyGodMode ; on VehicleCaptured ( vehnew , vehold , origside , hum ) do begin if origside = ai then
29802: LD_VAR 0 3
29806: PUSH
29807: LD_EXP 6
29811: EQUAL
29812: IFFALSE 29823
// begin remove_from_vehicles ( vehold ) ;
29814: LD_VAR 0 2
29818: PPUSH
29819: CALL 32637 0 1
// end ; end ;
29823: PPOPN 4
29825: END
// on BuildingCaptured ( build , origside , eng ) do begin if origside = ai then
29826: LD_VAR 0 2
29830: PUSH
29831: LD_EXP 6
29835: EQUAL
29836: IFFALSE 29891
// begin remove_from_builds ( build ) ;
29838: LD_VAR 0 1
29842: PPUSH
29843: CALL 32281 0 1
// if GetBType ( build ) = b_siberite_mine then
29847: LD_VAR 0 1
29851: PPUSH
29852: CALL_OW 266
29856: PUSH
29857: LD_INT 30
29859: EQUAL
29860: IFFALSE 29891
// SetResourceVisibility ( GetX ( build ) , GetY ( build ) , you ) ;
29862: LD_VAR 0 1
29866: PPUSH
29867: CALL_OW 250
29871: PPUSH
29872: LD_VAR 0 1
29876: PPUSH
29877: CALL_OW 251
29881: PPUSH
29882: LD_EXP 1
29886: PPUSH
29887: CALL_OW 441
// end ; if origside = you then
29891: LD_VAR 0 2
29895: PUSH
29896: LD_EXP 1
29900: EQUAL
29901: IFFALSE 29912
// begin add_to_builds ( build ) ;
29903: LD_VAR 0 1
29907: PPUSH
29908: CALL 31575 0 1
// end ; end ;
29912: PPOPN 3
29914: END
// export was_DMatPrediction ; on BuildingComplete ( build ) do begin if GetSide ( build ) = ai then
29915: LD_VAR 0 1
29919: PPUSH
29920: CALL_OW 255
29924: PUSH
29925: LD_EXP 6
29929: EQUAL
29930: IFFALSE 29941
// begin add_to_builds ( build ) ;
29932: LD_VAR 0 1
29936: PPUSH
29937: CALL 31575 0 1
// end ; if GetSide ( build ) = you then
29941: LD_VAR 0 1
29945: PPUSH
29946: CALL_OW 255
29950: PUSH
29951: LD_EXP 1
29955: EQUAL
29956: IFFALSE 29992
// begin if not was_DMatPrediction and GetBType ( build ) = b_lab then
29958: LD_EXP 146
29962: NOT
29963: PUSH
29964: LD_VAR 0 1
29968: PPUSH
29969: CALL_OW 266
29973: PUSH
29974: LD_INT 6
29976: EQUAL
29977: AND
29978: IFFALSE 29992
// begin was_DMatPrediction := true ;
29980: LD_ADDR_EXP 146
29984: PUSH
29985: LD_INT 1
29987: ST_TO_ADDR
// DMatPrediction ;
29988: CALL 1746 0 0
// end ; end ; end ;
29992: PPOPN 1
29994: END
// on UpgradeComplete ( build ) do begin if GetSide ( build ) = you and GetBType ( build ) in all_labs then
29995: LD_VAR 0 1
29999: PPUSH
30000: CALL_OW 255
30004: PUSH
30005: LD_EXP 1
30009: EQUAL
30010: PUSH
30011: LD_VAR 0 1
30015: PPUSH
30016: CALL_OW 266
30020: PUSH
30021: LD_EXP 41
30025: IN
30026: AND
30027: IFFALSE 30079
// if not byl_sib_research and ( ( GetLabKind ( build , 1 ) = b_lab_spacetime or GetLabKind ( build , 2 ) = b_lab_spacetime ) ) then
30029: LD_EXP 54
30033: NOT
30034: PUSH
30035: LD_VAR 0 1
30039: PPUSH
30040: LD_INT 1
30042: PPUSH
30043: CALL_OW 268
30047: PUSH
30048: LD_INT 14
30050: EQUAL
30051: PUSH
30052: LD_VAR 0 1
30056: PPUSH
30057: LD_INT 2
30059: PPUSH
30060: CALL_OW 268
30064: PUSH
30065: LD_INT 14
30067: EQUAL
30068: OR
30069: AND
30070: IFFALSE 30079
// begin DSibResearch ;
30072: CALL 2105 0 0
// disable ( 66 ) ;
30076: LD_INT 66
30078: DISABLE_MARKED
// end ; end ;
30079: PPOPN 1
30081: END
// on VehicleConstructed ( veh , fact ) do begin if GetSide ( veh ) = ai then
30082: LD_VAR 0 1
30086: PPUSH
30087: CALL_OW 255
30091: PUSH
30092: LD_EXP 6
30096: EQUAL
30097: IFFALSE 30155
// begin if veh in attack then
30099: LD_VAR 0 1
30103: PUSH
30104: LD_EXP 139
30108: IN
30109: IFFALSE 30125
// ComMoveToArea ( veh , pro_att ) else
30111: LD_VAR 0 1
30115: PPUSH
30116: LD_INT 13
30118: PPUSH
30119: CALL_OW 113
30123: GO 30137
// ComMoveToArea ( veh , pro_def ) ;
30125: LD_VAR 0 1
30129: PPUSH
30130: LD_INT 12
30132: PPUSH
30133: CALL_OW 113
// AddComExitVehicle ( veh ) ;
30137: LD_VAR 0 1
30141: PPUSH
30142: CALL_OW 181
// add_to_vehicles ( veh ) ;
30146: LD_VAR 0 1
30150: PPUSH
30151: CALL 31483 0 1
// end ; end ;
30155: PPOPN 2
30157: END
// on LeaveBuilding ( b , un ) do begin if GetSide ( un ) = you and GetBType ( b ) = b_control_tower then
30158: LD_VAR 0 2
30162: PPUSH
30163: CALL_OW 255
30167: PUSH
30168: LD_EXP 1
30172: EQUAL
30173: PUSH
30174: LD_VAR 0 1
30178: PPUSH
30179: CALL_OW 266
30183: PUSH
30184: LD_INT 36
30186: EQUAL
30187: AND
30188: IFFALSE 30199
// add_to_humans ( un ) ;
30190: LD_VAR 0 2
30194: PPUSH
30195: CALL 31147 0 1
// end ;
30199: PPOPN 2
30201: END
// on SailEvent ( num ) do begin case num of 0 :
30202: LD_VAR 0 1
30206: PUSH
30207: LD_INT 0
30209: DOUBLE
30210: EQUAL
30211: IFTRUE 30215
30213: GO 30218
30215: POP
// begin end ; normal1_utok :
30216: GO 30390
30218: LD_EXP 24
30222: DOUBLE
30223: EQUAL
30224: IFTRUE 30228
30226: GO 30235
30228: POP
// begin f_normal1_utok ;
30229: CALL 13522 0 0
// end ; normal2_utok :
30233: GO 30390
30235: LD_EXP 25
30239: DOUBLE
30240: EQUAL
30241: IFTRUE 30245
30243: GO 30252
30245: POP
// begin f_normal2_utok ;
30246: CALL 13890 0 0
// end ; normal3_utok :
30250: GO 30390
30252: LD_EXP 26
30256: DOUBLE
30257: EQUAL
30258: IFTRUE 30262
30260: GO 30269
30262: POP
// begin f_normal3_utok ;
30263: CALL 14269 0 0
// end ; normal4_utok :
30267: GO 30390
30269: LD_EXP 27
30273: DOUBLE
30274: EQUAL
30275: IFTRUE 30279
30277: GO 30286
30279: POP
// begin f_normal4_utok ;
30280: CALL 14659 0 0
// end ; vsevolod_attack :
30284: GO 30390
30286: LD_EXP 28
30290: DOUBLE
30291: EQUAL
30292: IFTRUE 30296
30294: GO 30303
30296: POP
// begin f_vsevolod_utok ;
30297: CALL 15038 0 0
// end ; vsevolod_final_attack :
30301: GO 30390
30303: LD_EXP 29
30307: DOUBLE
30308: EQUAL
30309: IFTRUE 30313
30311: GO 30320
30313: POP
// begin f_vsevolod_final_utok ;
30314: CALL 15374 0 0
// end ; 300 :
30318: GO 30390
30320: LD_INT 300
30322: DOUBLE
30323: EQUAL
30324: IFTRUE 30328
30326: GO 30389
30328: POP
// begin if tick >= [ 20 20$00 , 15 15$00 , 12 12$00 ] [ Difficulty ] then
30329: LD_OWVAR 1
30333: PUSH
30334: LD_INT 42000
30336: PUSH
30337: LD_INT 31500
30339: PUSH
30340: LD_INT 25200
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: LIST
30347: PUSH
30348: LD_OWVAR 67
30352: ARRAY
30353: GREATEREQUAL
30354: IFFALSE 30360
// BulldozerScript ;
30356: CALL 12308 0 0
// AttackEvent ( 3 , UnitFilter ( zbytek , [ f_lives , 1000 ] ) ) ;
30360: LD_INT 3
30362: PPUSH
30363: LD_EXP 92
30367: PPUSH
30368: LD_INT 24
30370: PUSH
30371: LD_INT 1000
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PPUSH
30378: CALL_OW 72
30382: PPUSH
30383: CALL 12539 0 2
// end ; end ;
30387: GO 30390
30389: POP
// end ;
30390: PPOPN 1
30392: END
// on Contact ( side1 , side2 ) do var a ;
30393: LD_INT 0
30395: PPUSH
// begin if IsLive ( a1eng ) then
30396: LD_EXP 115
30400: PPUSH
30401: CALL_OW 300
30405: IFFALSE 30625
// if ( side1 = you and side2 = ai ) or ( side2 = you and side1 = ai ) then
30407: LD_VAR 0 1
30411: PUSH
30412: LD_EXP 1
30416: EQUAL
30417: PUSH
30418: LD_VAR 0 2
30422: PUSH
30423: LD_EXP 6
30427: EQUAL
30428: AND
30429: PUSH
30430: LD_VAR 0 2
30434: PUSH
30435: LD_EXP 1
30439: EQUAL
30440: PUSH
30441: LD_VAR 0 1
30445: PUSH
30446: LD_EXP 6
30450: EQUAL
30451: AND
30452: OR
30453: IFFALSE 30625
// begin if a1eng then
30455: LD_EXP 115
30459: IFFALSE 30625
// begin remove_from_humans ( a1eng ) ;
30461: LD_EXP 115
30465: PPUSH
30466: CALL 32467 0 1
// while IsInUnit ( a1eng ) and IsLive ( a1eng ) do
30470: LD_EXP 115
30474: PPUSH
30475: CALL_OW 310
30479: PUSH
30480: LD_EXP 115
30484: PPUSH
30485: CALL_OW 300
30489: AND
30490: IFFALSE 30510
// begin ComExitBuilding ( a1eng ) ;
30492: LD_EXP 115
30496: PPUSH
30497: CALL_OW 122
// wait ( 0 0$1 ) ;
30501: LD_INT 35
30503: PPUSH
30504: CALL_OW 67
// end ;
30508: GO 30470
// while IsLive ( sib_dul ) and IsLive ( a1eng ) do
30510: LD_EXP 144
30514: PPUSH
30515: CALL_OW 300
30519: PUSH
30520: LD_EXP 115
30524: PPUSH
30525: CALL_OW 300
30529: AND
30530: IFFALSE 30604
// begin a := GetLives ( sib_dul ) - 25 * difficulty ;
30532: LD_ADDR_VAR 0 3
30536: PUSH
30537: LD_EXP 144
30541: PPUSH
30542: CALL_OW 256
30546: PUSH
30547: LD_INT 25
30549: PUSH
30550: LD_OWVAR 67
30554: MUL
30555: MINUS
30556: ST_TO_ADDR
// if a > 1 then
30557: LD_VAR 0 3
30561: PUSH
30562: LD_INT 1
30564: GREATER
30565: IFFALSE 30581
// SetLives ( sib_dul , a ) ;
30567: LD_EXP 144
30571: PPUSH
30572: LD_VAR 0 3
30576: PPUSH
30577: CALL_OW 234
// ComDismantle ( a1eng , sib_dul ) ;
30581: LD_EXP 115
30585: PPUSH
30586: LD_EXP 144
30590: PPUSH
30591: CALL_OW 167
// wait ( 0 0$1 ) ;
30595: LD_INT 35
30597: PPUSH
30598: CALL_OW 67
// end ;
30602: GO 30510
// AddComEnterUnit ( a1eng , Rudepot ) ;
30604: LD_EXP 115
30608: PPUSH
30609: LD_INT 58
30611: PPUSH
30612: CALL_OW 180
// add_to_humans ( a1eng ) ;
30616: LD_EXP 115
30620: PPUSH
30621: CALL 31147 0 1
// end ; end ; end ;
30625: PPOPN 3
30627: END
// var mcdef1 , mcdef2 , mcatt1 ; on McDefendTakesUnit ( mcid , un ) do begin if mcid = idDef1 then
30628: LD_VAR 0 1
30632: PUSH
30633: LD_EXP 97
30637: EQUAL
30638: IFFALSE 30656
// mcdef1 := mcdef1 union un ;
30640: LD_ADDR_LOC 21
30644: PUSH
30645: LD_LOC 21
30649: PUSH
30650: LD_VAR 0 2
30654: UNION
30655: ST_TO_ADDR
// if mcid = idDef2 then
30656: LD_VAR 0 1
30660: PUSH
30661: LD_EXP 98
30665: EQUAL
30666: IFFALSE 30684
// mcdef2 := mcdef2 union un ;
30668: LD_ADDR_LOC 22
30672: PUSH
30673: LD_LOC 22
30677: PUSH
30678: LD_VAR 0 2
30682: UNION
30683: ST_TO_ADDR
// if mcid = idAtt1 then
30684: LD_VAR 0 1
30688: PUSH
30689: LD_EXP 94
30693: EQUAL
30694: IFFALSE 30712
// mcatt1 := mcatt1 union un ;
30696: LD_ADDR_LOC 23
30700: PUSH
30701: LD_LOC 23
30705: PUSH
30706: LD_VAR 0 2
30710: UNION
30711: ST_TO_ADDR
// Remove_From_Humans ( un ) ;
30712: LD_VAR 0 2
30716: PPUSH
30717: CALL 32467 0 1
// Remove_From_Vehicles ( un ) ;
30721: LD_VAR 0 2
30725: PPUSH
30726: CALL 32637 0 1
// Remove_From_Builds ( un ) ;
30730: LD_VAR 0 2
30734: PPUSH
30735: CALL 32281 0 1
// end ;
30739: PPOPN 2
30741: END
// on McDefendReturnsUnit ( mcid , un ) do begin if mcid = idDef1 then
30742: LD_VAR 0 1
30746: PUSH
30747: LD_EXP 97
30751: EQUAL
30752: IFFALSE 30770
// mcdef1 := mcdef1 diff un ;
30754: LD_ADDR_LOC 21
30758: PUSH
30759: LD_LOC 21
30763: PUSH
30764: LD_VAR 0 2
30768: DIFF
30769: ST_TO_ADDR
// if mcid = idDef2 then
30770: LD_VAR 0 1
30774: PUSH
30775: LD_EXP 98
30779: EQUAL
30780: IFFALSE 30798
// mcdef2 := mcdef2 diff un ;
30782: LD_ADDR_LOC 22
30786: PUSH
30787: LD_LOC 22
30791: PUSH
30792: LD_VAR 0 2
30796: DIFF
30797: ST_TO_ADDR
// if mcid = idAtt1 then
30798: LD_VAR 0 1
30802: PUSH
30803: LD_EXP 94
30807: EQUAL
30808: IFFALSE 30826
// mcatt1 := mcatt1 diff un ;
30810: LD_ADDR_LOC 23
30814: PUSH
30815: LD_LOC 23
30819: PUSH
30820: LD_VAR 0 2
30824: DIFF
30825: ST_TO_ADDR
// add_to_Humans ( un ) ;
30826: LD_VAR 0 2
30830: PPUSH
30831: CALL 31147 0 1
// add_to_Vehicles ( un ) ;
30835: LD_VAR 0 2
30839: PPUSH
30840: CALL 31483 0 1
// add_to_Builds ( un ) ;
30844: LD_VAR 0 2
30848: PPUSH
30849: CALL 31575 0 1
// end ;
30853: PPOPN 2
30855: END
// on McRegistryResultChanges ( mcid , count , strength ) do var i ;
30856: LD_INT 0
30858: PPUSH
// begin if mcid = idAtt1 then
30859: LD_VAR 0 1
30863: PUSH
30864: LD_EXP 94
30868: EQUAL
30869: IFFALSE 30981
// begin if count = 0 then
30871: LD_VAR 0 2
30875: PUSH
30876: LD_INT 0
30878: EQUAL
30879: IFFALSE 30932
// begin for i in FilterUnitsInArea ( mc_attack , [ [ f_side , you ] ] ) do
30881: LD_ADDR_VAR 0 4
30885: PUSH
30886: LD_INT 26
30888: PPUSH
30889: LD_INT 22
30891: PUSH
30892: LD_EXP 1
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: EMPTY
30902: LIST
30903: PPUSH
30904: CALL_OW 70
30908: PUSH
30909: FOR_IN
30910: IFFALSE 30928
// PriorityAttack ( ai , i ) ;
30912: LD_EXP 6
30916: PPUSH
30917: LD_VAR 0 4
30921: PPUSH
30922: CALL_OW 470
30926: GO 30909
30928: POP
30929: POP
// end else
30930: GO 30981
// begin for i in FilterUnitsInArea ( mc_attack , [ [ f_side , you ] ] ) do
30932: LD_ADDR_VAR 0 4
30936: PUSH
30937: LD_INT 26
30939: PPUSH
30940: LD_INT 22
30942: PUSH
30943: LD_EXP 1
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: EMPTY
30953: LIST
30954: PPUSH
30955: CALL_OW 70
30959: PUSH
30960: FOR_IN
30961: IFFALSE 30979
// NormalAttack ( ai , i ) ;
30963: LD_EXP 6
30967: PPUSH
30968: LD_VAR 0 4
30972: PPUSH
30973: CALL_OW 472
30977: GO 30960
30979: POP
30980: POP
// end ; end ; end ;
30981: PPOPN 4
30983: END
// on McAttackOutOfFuel ( mcid , un ) do begin Attack := Attack diff un ;
30984: LD_ADDR_EXP 139
30988: PUSH
30989: LD_EXP 139
30993: PUSH
30994: LD_VAR 0 2
30998: DIFF
30999: ST_TO_ADDR
// while IsLive ( un ) and not IsInArea ( un , near_base ) do
31000: LD_VAR 0 2
31004: PPUSH
31005: CALL_OW 300
31009: PUSH
31010: LD_VAR 0 2
31014: PPUSH
31015: LD_INT 2
31017: PPUSH
31018: CALL_OW 308
31022: NOT
31023: AND
31024: IFFALSE 31047
// begin ComMoveToArea ( un , near_base ) ;
31026: LD_VAR 0 2
31030: PPUSH
31031: LD_INT 2
31033: PPUSH
31034: CALL_OW 113
// wait ( 0 0$2 ) ;
31038: LD_INT 70
31040: PPUSH
31041: CALL_OW 67
// end ;
31045: GO 31000
// end ;
31047: PPOPN 2
31049: END
// export function add_to ( un ) ; var i ; begin
31050: LD_INT 0
31052: PPUSH
31053: PPUSH
// for i in un do
31054: LD_ADDR_VAR 0 3
31058: PUSH
31059: LD_VAR 0 1
31063: PUSH
31064: FOR_IN
31065: IFFALSE 31140
// case GetType ( i ) of unit_human :
31067: LD_VAR 0 3
31071: PPUSH
31072: CALL_OW 247
31076: PUSH
31077: LD_INT 1
31079: DOUBLE
31080: EQUAL
31081: IFTRUE 31085
31083: GO 31097
31085: POP
// add_to_humans ( i ) ; unit_vehicle :
31086: LD_VAR 0 3
31090: PPUSH
31091: CALL 31147 0 1
31095: GO 31138
31097: LD_INT 2
31099: DOUBLE
31100: EQUAL
31101: IFTRUE 31105
31103: GO 31117
31105: POP
// add_to_vehicles ( i ) ; unit_building :
31106: LD_VAR 0 3
31110: PPUSH
31111: CALL 31483 0 1
31115: GO 31138
31117: LD_INT 3
31119: DOUBLE
31120: EQUAL
31121: IFTRUE 31125
31123: GO 31137
31125: POP
// add_to_builds ( i ) ; end ;
31126: LD_VAR 0 3
31130: PPUSH
31131: CALL 31575 0 1
31135: GO 31138
31137: POP
31138: GO 31064
31140: POP
31141: POP
// end ;
31142: LD_VAR 0 2
31146: RET
// export function add_to_humans ( un ) ; var i ; begin
31147: LD_INT 0
31149: PPUSH
31150: PPUSH
// if GetSide ( un ) = ai then
31151: LD_VAR 0 1
31155: PPUSH
31156: CALL_OW 255
31160: PUSH
31161: LD_EXP 6
31165: EQUAL
31166: IFFALSE 31478
// for i in un do
31168: LD_ADDR_VAR 0 3
31172: PUSH
31173: LD_VAR 0 1
31177: PUSH
31178: FOR_IN
31179: IFFALSE 31476
// begin case Getclass ( i ) of class_soldier :
31181: LD_VAR 0 3
31185: PPUSH
31186: CALL_OW 257
31190: PUSH
31191: LD_INT 1
31193: DOUBLE
31194: EQUAL
31195: IFTRUE 31199
31197: GO 31218
31199: POP
// sol := sol union i ; class_engineer :
31200: LD_ADDR_EXP 122
31204: PUSH
31205: LD_EXP 122
31209: PUSH
31210: LD_VAR 0 3
31214: UNION
31215: ST_TO_ADDR
31216: GO 31300
31218: LD_INT 2
31220: DOUBLE
31221: EQUAL
31222: IFTRUE 31226
31224: GO 31245
31226: POP
// eng := eng union i ; class_mechanic :
31227: LD_ADDR_EXP 124
31231: PUSH
31232: LD_EXP 124
31236: PUSH
31237: LD_VAR 0 3
31241: UNION
31242: ST_TO_ADDR
31243: GO 31300
31245: LD_INT 3
31247: DOUBLE
31248: EQUAL
31249: IFTRUE 31253
31251: GO 31272
31253: POP
// mec := mec union i ; class_scientistic :
31254: LD_ADDR_EXP 126
31258: PUSH
31259: LD_EXP 126
31263: PUSH
31264: LD_VAR 0 3
31268: UNION
31269: ST_TO_ADDR
31270: GO 31300
31272: LD_INT 4
31274: DOUBLE
31275: EQUAL
31276: IFTRUE 31280
31278: GO 31299
31280: POP
// sci := sci union i ; end ;
31281: LD_ADDR_EXP 128
31285: PUSH
31286: LD_EXP 128
31290: PUSH
31291: LD_VAR 0 3
31295: UNION
31296: ST_TO_ADDR
31297: GO 31300
31299: POP
// case GetTag ( i ) of 1 :
31300: LD_VAR 0 3
31304: PPUSH
31305: CALL_OW 110
31309: PUSH
31310: LD_INT 1
31312: DOUBLE
31313: EQUAL
31314: IFTRUE 31318
31316: GO 31337
31318: POP
// a1 := a1 union i ; 2 :
31319: LD_ADDR_EXP 134
31323: PUSH
31324: LD_EXP 134
31328: PUSH
31329: LD_VAR 0 3
31333: UNION
31334: ST_TO_ADDR
31335: GO 31474
31337: LD_INT 2
31339: DOUBLE
31340: EQUAL
31341: IFTRUE 31345
31343: GO 31364
31345: POP
// a2 := a2 union i ; 3 :
31346: LD_ADDR_EXP 135
31350: PUSH
31351: LD_EXP 135
31355: PUSH
31356: LD_VAR 0 3
31360: UNION
31361: ST_TO_ADDR
31362: GO 31474
31364: LD_INT 3
31366: DOUBLE
31367: EQUAL
31368: IFTRUE 31372
31370: GO 31391
31372: POP
// a3 := a3 union i ; 4 :
31373: LD_ADDR_EXP 136
31377: PUSH
31378: LD_EXP 136
31382: PUSH
31383: LD_VAR 0 3
31387: UNION
31388: ST_TO_ADDR
31389: GO 31474
31391: LD_INT 4
31393: DOUBLE
31394: EQUAL
31395: IFTRUE 31399
31397: GO 31418
31399: POP
// a4 := a4 union i ; 5 :
31400: LD_ADDR_EXP 137
31404: PUSH
31405: LD_EXP 137
31409: PUSH
31410: LD_VAR 0 3
31414: UNION
31415: ST_TO_ADDR
31416: GO 31474
31418: LD_INT 5
31420: DOUBLE
31421: EQUAL
31422: IFTRUE 31426
31424: GO 31445
31426: POP
// a5 := a5 union i ; else
31427: LD_ADDR_EXP 138
31431: PUSH
31432: LD_EXP 138
31436: PUSH
31437: LD_VAR 0 3
31441: UNION
31442: ST_TO_ADDR
31443: GO 31474
31445: POP
// begin a3 := a3 union i ;
31446: LD_ADDR_EXP 136
31450: PUSH
31451: LD_EXP 136
31455: PUSH
31456: LD_VAR 0 3
31460: UNION
31461: ST_TO_ADDR
// SetTag ( i , 3 ) ;
31462: LD_VAR 0 3
31466: PPUSH
31467: LD_INT 3
31469: PPUSH
31470: CALL_OW 109
// end ; end ; end ;
31474: GO 31178
31476: POP
31477: POP
// end ;
31478: LD_VAR 0 2
31482: RET
// export function add_to_vehicles ( un ) ; var i ; begin
31483: LD_INT 0
31485: PPUSH
31486: PPUSH
// for i in un do
31487: LD_ADDR_VAR 0 3
31491: PUSH
31492: LD_VAR 0 1
31496: PUSH
31497: FOR_IN
31498: IFFALSE 31568
// begin if GetSide ( un ) = ai then
31500: LD_VAR 0 1
31504: PPUSH
31505: CALL_OW 255
31509: PUSH
31510: LD_EXP 6
31514: EQUAL
31515: IFFALSE 31566
// if GetControl ( i ) = control_remote then
31517: LD_VAR 0 3
31521: PPUSH
31522: CALL_OW 263
31526: PUSH
31527: LD_INT 2
31529: EQUAL
31530: IFFALSE 31550
// begin attack := attack union i ;
31532: LD_ADDR_EXP 139
31536: PUSH
31537: LD_EXP 139
31541: PUSH
31542: LD_VAR 0 3
31546: UNION
31547: ST_TO_ADDR
// end else
31548: GO 31566
// begin defence := defence union i ;
31550: LD_ADDR_EXP 140
31554: PUSH
31555: LD_EXP 140
31559: PUSH
31560: LD_VAR 0 3
31564: UNION
31565: ST_TO_ADDR
// end ; end ;
31566: GO 31497
31568: POP
31569: POP
// end ;
31570: LD_VAR 0 2
31574: RET
// export function add_to_builds ( un ) ; var i , j , bt ; begin
31575: LD_INT 0
31577: PPUSH
31578: PPUSH
31579: PPUSH
31580: PPUSH
// for i in un do
31581: LD_ADDR_VAR 0 3
31585: PUSH
31586: LD_VAR 0 1
31590: PUSH
31591: FOR_IN
31592: IFFALSE 32177
// begin if GetSide ( un ) = ai then
31594: LD_VAR 0 1
31598: PPUSH
31599: CALL_OW 255
31603: PUSH
31604: LD_EXP 6
31608: EQUAL
31609: IFFALSE 31686
// for j in builds1 do
31611: LD_ADDR_VAR 0 4
31615: PUSH
31616: LD_EXP 105
31620: PUSH
31621: FOR_IN
31622: IFFALSE 31684
// if GetX ( i ) = j [ 2 ] and GetY ( i ) = j [ 3 ] then
31624: LD_VAR 0 3
31628: PPUSH
31629: CALL_OW 250
31633: PUSH
31634: LD_VAR 0 4
31638: PUSH
31639: LD_INT 2
31641: ARRAY
31642: EQUAL
31643: PUSH
31644: LD_VAR 0 3
31648: PPUSH
31649: CALL_OW 251
31653: PUSH
31654: LD_VAR 0 4
31658: PUSH
31659: LD_INT 3
31661: ARRAY
31662: EQUAL
31663: AND
31664: IFFALSE 31682
// b1 := b1 union i ;
31666: LD_ADDR_EXP 129
31670: PUSH
31671: LD_EXP 129
31675: PUSH
31676: LD_VAR 0 3
31680: UNION
31681: ST_TO_ADDR
31682: GO 31621
31684: POP
31685: POP
// for j in builds2 do
31686: LD_ADDR_VAR 0 4
31690: PUSH
31691: LD_EXP 106
31695: PUSH
31696: FOR_IN
31697: IFFALSE 31759
// if GetX ( i ) = j [ 2 ] and GetY ( i ) = j [ 3 ] then
31699: LD_VAR 0 3
31703: PPUSH
31704: CALL_OW 250
31708: PUSH
31709: LD_VAR 0 4
31713: PUSH
31714: LD_INT 2
31716: ARRAY
31717: EQUAL
31718: PUSH
31719: LD_VAR 0 3
31723: PPUSH
31724: CALL_OW 251
31728: PUSH
31729: LD_VAR 0 4
31733: PUSH
31734: LD_INT 3
31736: ARRAY
31737: EQUAL
31738: AND
31739: IFFALSE 31757
// b2 := b2 union i ;
31741: LD_ADDR_EXP 130
31745: PUSH
31746: LD_EXP 130
31750: PUSH
31751: LD_VAR 0 3
31755: UNION
31756: ST_TO_ADDR
31757: GO 31696
31759: POP
31760: POP
// for j in builds3 do
31761: LD_ADDR_VAR 0 4
31765: PUSH
31766: LD_EXP 107
31770: PUSH
31771: FOR_IN
31772: IFFALSE 31834
// if GetX ( i ) = j [ 2 ] and GetY ( i ) = j [ 3 ] then
31774: LD_VAR 0 3
31778: PPUSH
31779: CALL_OW 250
31783: PUSH
31784: LD_VAR 0 4
31788: PUSH
31789: LD_INT 2
31791: ARRAY
31792: EQUAL
31793: PUSH
31794: LD_VAR 0 3
31798: PPUSH
31799: CALL_OW 251
31803: PUSH
31804: LD_VAR 0 4
31808: PUSH
31809: LD_INT 3
31811: ARRAY
31812: EQUAL
31813: AND
31814: IFFALSE 31832
// b3 := b3 union i ;
31816: LD_ADDR_EXP 131
31820: PUSH
31821: LD_EXP 131
31825: PUSH
31826: LD_VAR 0 3
31830: UNION
31831: ST_TO_ADDR
31832: GO 31771
31834: POP
31835: POP
// for j in builds4 do
31836: LD_ADDR_VAR 0 4
31840: PUSH
31841: LD_EXP 108
31845: PUSH
31846: FOR_IN
31847: IFFALSE 31909
// if GetX ( i ) = j [ 2 ] and GetY ( i ) = j [ 3 ] then
31849: LD_VAR 0 3
31853: PPUSH
31854: CALL_OW 250
31858: PUSH
31859: LD_VAR 0 4
31863: PUSH
31864: LD_INT 2
31866: ARRAY
31867: EQUAL
31868: PUSH
31869: LD_VAR 0 3
31873: PPUSH
31874: CALL_OW 251
31878: PUSH
31879: LD_VAR 0 4
31883: PUSH
31884: LD_INT 3
31886: ARRAY
31887: EQUAL
31888: AND
31889: IFFALSE 31907
// b4 := b4 union i ;
31891: LD_ADDR_EXP 132
31895: PUSH
31896: LD_EXP 132
31900: PUSH
31901: LD_VAR 0 3
31905: UNION
31906: ST_TO_ADDR
31907: GO 31846
31909: POP
31910: POP
// for j in builds5 do
31911: LD_ADDR_VAR 0 4
31915: PUSH
31916: LD_EXP 109
31920: PUSH
31921: FOR_IN
31922: IFFALSE 31984
// if GetX ( i ) = j [ 2 ] and GetY ( i ) = j [ 3 ] then
31924: LD_VAR 0 3
31928: PPUSH
31929: CALL_OW 250
31933: PUSH
31934: LD_VAR 0 4
31938: PUSH
31939: LD_INT 2
31941: ARRAY
31942: EQUAL
31943: PUSH
31944: LD_VAR 0 3
31948: PPUSH
31949: CALL_OW 251
31953: PUSH
31954: LD_VAR 0 4
31958: PUSH
31959: LD_INT 3
31961: ARRAY
31962: EQUAL
31963: AND
31964: IFFALSE 31982
// b5 := b5 union i ;
31966: LD_ADDR_EXP 133
31970: PUSH
31971: LD_EXP 133
31975: PUSH
31976: LD_VAR 0 3
31980: UNION
31981: ST_TO_ADDR
31982: GO 31921
31984: POP
31985: POP
// bt := GetBType ( i ) ;
31986: LD_ADDR_VAR 0 5
31990: PUSH
31991: LD_VAR 0 3
31995: PPUSH
31996: CALL_OW 266
32000: ST_TO_ADDR
// if bt = b_barracks or bt = b_armoury or bt = b_bunker or bt = b_breastwork then
32001: LD_VAR 0 5
32005: PUSH
32006: LD_INT 5
32008: EQUAL
32009: PUSH
32010: LD_VAR 0 5
32014: PUSH
32015: LD_INT 4
32017: EQUAL
32018: OR
32019: PUSH
32020: LD_VAR 0 5
32024: PUSH
32025: LD_INT 32
32027: EQUAL
32028: OR
32029: PUSH
32030: LD_VAR 0 5
32034: PUSH
32035: LD_INT 31
32037: EQUAL
32038: OR
32039: IFFALSE 32057
// fort := fort union i ;
32041: LD_ADDR_EXP 120
32045: PUSH
32046: LD_EXP 120
32050: PUSH
32051: LD_VAR 0 3
32055: UNION
32056: ST_TO_ADDR
// if bt = b_lab or bt = b_lab_full or bt = b_lab_half then
32057: LD_VAR 0 5
32061: PUSH
32062: LD_INT 6
32064: EQUAL
32065: PUSH
32066: LD_VAR 0 5
32070: PUSH
32071: LD_INT 8
32073: EQUAL
32074: OR
32075: PUSH
32076: LD_VAR 0 5
32080: PUSH
32081: LD_INT 7
32083: EQUAL
32084: OR
32085: IFFALSE 32103
// lab := lab union i ;
32087: LD_ADDR_EXP 127
32091: PUSH
32092: LD_EXP 127
32096: PUSH
32097: LD_VAR 0 3
32101: UNION
32102: ST_TO_ADDR
// if bt = b_workshop or bt = b_factory then
32103: LD_VAR 0 5
32107: PUSH
32108: LD_INT 2
32110: EQUAL
32111: PUSH
32112: LD_VAR 0 5
32116: PUSH
32117: LD_INT 3
32119: EQUAL
32120: OR
32121: IFFALSE 32139
// fact := fact union i ;
32123: LD_ADDR_EXP 125
32127: PUSH
32128: LD_EXP 125
32132: PUSH
32133: LD_VAR 0 3
32137: UNION
32138: ST_TO_ADDR
// if bt = b_depot or bt = b_warehouse then
32139: LD_VAR 0 5
32143: PUSH
32144: LD_INT 0
32146: EQUAL
32147: PUSH
32148: LD_VAR 0 5
32152: PUSH
32153: LD_INT 1
32155: EQUAL
32156: OR
32157: IFFALSE 32175
// dep := dep union i ;
32159: LD_ADDR_EXP 123
32163: PUSH
32164: LD_EXP 123
32168: PUSH
32169: LD_VAR 0 3
32173: UNION
32174: ST_TO_ADDR
// end ;
32175: GO 31591
32177: POP
32178: POP
// end ;
32179: LD_VAR 0 2
32183: RET
// export function remove_from ( un ) ; var i ; begin
32184: LD_INT 0
32186: PPUSH
32187: PPUSH
// for i in un do
32188: LD_ADDR_VAR 0 3
32192: PUSH
32193: LD_VAR 0 1
32197: PUSH
32198: FOR_IN
32199: IFFALSE 32274
// case GetType ( i ) of unit_human :
32201: LD_VAR 0 3
32205: PPUSH
32206: CALL_OW 247
32210: PUSH
32211: LD_INT 1
32213: DOUBLE
32214: EQUAL
32215: IFTRUE 32219
32217: GO 32231
32219: POP
// remove_from_humans ( i ) ; unit_vehicle :
32220: LD_VAR 0 3
32224: PPUSH
32225: CALL 32467 0 1
32229: GO 32272
32231: LD_INT 2
32233: DOUBLE
32234: EQUAL
32235: IFTRUE 32239
32237: GO 32251
32239: POP
// remove_from_vehicles ( i ) ; unit_building :
32240: LD_VAR 0 3
32244: PPUSH
32245: CALL 32637 0 1
32249: GO 32272
32251: LD_INT 3
32253: DOUBLE
32254: EQUAL
32255: IFTRUE 32259
32257: GO 32271
32259: POP
// remove_from_builds ( i ) ; end ;
32260: LD_VAR 0 3
32264: PPUSH
32265: CALL 32281 0 1
32269: GO 32272
32271: POP
32272: GO 32198
32274: POP
32275: POP
// end ;
32276: LD_VAR 0 2
32280: RET
// export function remove_from_builds ( un ) ; var i ; begin
32281: LD_INT 0
32283: PPUSH
32284: PPUSH
// for i in un do
32285: LD_ADDR_VAR 0 3
32289: PUSH
32290: LD_VAR 0 1
32294: PUSH
32295: FOR_IN
32296: IFFALSE 32460
// begin fact := fact diff i ;
32298: LD_ADDR_EXP 125
32302: PUSH
32303: LD_EXP 125
32307: PUSH
32308: LD_VAR 0 3
32312: DIFF
32313: ST_TO_ADDR
// fort := fort diff i ;
32314: LD_ADDR_EXP 120
32318: PUSH
32319: LD_EXP 120
32323: PUSH
32324: LD_VAR 0 3
32328: DIFF
32329: ST_TO_ADDR
// lab := lab diff i ;
32330: LD_ADDR_EXP 127
32334: PUSH
32335: LD_EXP 127
32339: PUSH
32340: LD_VAR 0 3
32344: DIFF
32345: ST_TO_ADDR
// dep := dep diff i ;
32346: LD_ADDR_EXP 123
32350: PUSH
32351: LD_EXP 123
32355: PUSH
32356: LD_VAR 0 3
32360: DIFF
32361: ST_TO_ADDR
// ctrl := ctrl diff i ;
32362: LD_ADDR_EXP 121
32366: PUSH
32367: LD_EXP 121
32371: PUSH
32372: LD_VAR 0 3
32376: DIFF
32377: ST_TO_ADDR
// b1 := b1 diff i ;
32378: LD_ADDR_EXP 129
32382: PUSH
32383: LD_EXP 129
32387: PUSH
32388: LD_VAR 0 3
32392: DIFF
32393: ST_TO_ADDR
// b2 := b2 diff i ;
32394: LD_ADDR_EXP 130
32398: PUSH
32399: LD_EXP 130
32403: PUSH
32404: LD_VAR 0 3
32408: DIFF
32409: ST_TO_ADDR
// b3 := b3 diff i ;
32410: LD_ADDR_EXP 131
32414: PUSH
32415: LD_EXP 131
32419: PUSH
32420: LD_VAR 0 3
32424: DIFF
32425: ST_TO_ADDR
// b4 := b4 diff i ;
32426: LD_ADDR_EXP 132
32430: PUSH
32431: LD_EXP 132
32435: PUSH
32436: LD_VAR 0 3
32440: DIFF
32441: ST_TO_ADDR
// b5 := b5 diff i ;
32442: LD_ADDR_EXP 133
32446: PUSH
32447: LD_EXP 133
32451: PUSH
32452: LD_VAR 0 3
32456: DIFF
32457: ST_TO_ADDR
// end ;
32458: GO 32295
32460: POP
32461: POP
// end ;
32462: LD_VAR 0 2
32466: RET
// export function remove_from_humans ( un ) ; var i ; begin
32467: LD_INT 0
32469: PPUSH
32470: PPUSH
// for i in un do
32471: LD_ADDR_VAR 0 3
32475: PUSH
32476: LD_VAR 0 1
32480: PUSH
32481: FOR_IN
32482: IFFALSE 32630
// begin sol := sol diff i ;
32484: LD_ADDR_EXP 122
32488: PUSH
32489: LD_EXP 122
32493: PUSH
32494: LD_VAR 0 3
32498: DIFF
32499: ST_TO_ADDR
// eng := eng diff i ;
32500: LD_ADDR_EXP 124
32504: PUSH
32505: LD_EXP 124
32509: PUSH
32510: LD_VAR 0 3
32514: DIFF
32515: ST_TO_ADDR
// mec := mec diff i ;
32516: LD_ADDR_EXP 126
32520: PUSH
32521: LD_EXP 126
32525: PUSH
32526: LD_VAR 0 3
32530: DIFF
32531: ST_TO_ADDR
// sci := sci diff i ;
32532: LD_ADDR_EXP 128
32536: PUSH
32537: LD_EXP 128
32541: PUSH
32542: LD_VAR 0 3
32546: DIFF
32547: ST_TO_ADDR
// a1 := a1 diff i ;
32548: LD_ADDR_EXP 134
32552: PUSH
32553: LD_EXP 134
32557: PUSH
32558: LD_VAR 0 3
32562: DIFF
32563: ST_TO_ADDR
// a2 := a2 diff i ;
32564: LD_ADDR_EXP 135
32568: PUSH
32569: LD_EXP 135
32573: PUSH
32574: LD_VAR 0 3
32578: DIFF
32579: ST_TO_ADDR
// a3 := a3 diff i ;
32580: LD_ADDR_EXP 136
32584: PUSH
32585: LD_EXP 136
32589: PUSH
32590: LD_VAR 0 3
32594: DIFF
32595: ST_TO_ADDR
// a4 := a4 diff i ;
32596: LD_ADDR_EXP 137
32600: PUSH
32601: LD_EXP 137
32605: PUSH
32606: LD_VAR 0 3
32610: DIFF
32611: ST_TO_ADDR
// a5 := a5 diff i ;
32612: LD_ADDR_EXP 138
32616: PUSH
32617: LD_EXP 138
32621: PUSH
32622: LD_VAR 0 3
32626: DIFF
32627: ST_TO_ADDR
// end ;
32628: GO 32481
32630: POP
32631: POP
// end ;
32632: LD_VAR 0 2
32636: RET
// export function remove_from_vehicles ( un ) ; var i ; begin
32637: LD_INT 0
32639: PPUSH
32640: PPUSH
// for i in un do
32641: LD_ADDR_VAR 0 3
32645: PUSH
32646: LD_VAR 0 1
32650: PUSH
32651: FOR_IN
32652: IFFALSE 32688
// begin attack := attack diff i ;
32654: LD_ADDR_EXP 139
32658: PUSH
32659: LD_EXP 139
32663: PUSH
32664: LD_VAR 0 3
32668: DIFF
32669: ST_TO_ADDR
// defence := defence diff i ;
32670: LD_ADDR_EXP 140
32674: PUSH
32675: LD_EXP 140
32679: PUSH
32680: LD_VAR 0 3
32684: DIFF
32685: ST_TO_ADDR
// end ;
32686: GO 32651
32688: POP
32689: POP
// end ; end_of_file
32690: LD_VAR 0 2
32694: RET
// export function zachranka ( un ) ; begin
32695: LD_INT 0
32697: PPUSH
// if not FilterAllUnits ( [ [ f_not , [ f_side , ai ] ] , [ f_dist , un , 24 ] ] ) then
32698: LD_INT 3
32700: PUSH
32701: LD_INT 22
32703: PUSH
32704: LD_EXP 6
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 91
32719: PUSH
32720: LD_VAR 0 1
32724: PUSH
32725: LD_INT 24
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: LIST
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PPUSH
32737: CALL_OW 69
32741: NOT
32742: IFFALSE 32815
// begin ComHeal ( UnitFilter ( sci , [ [ f_dist , un , 30 ] ] ) , un ) ;
32744: LD_EXP 128
32748: PPUSH
32749: LD_INT 91
32751: PUSH
32752: LD_VAR 0 1
32756: PUSH
32757: LD_INT 30
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: LIST
32764: PUSH
32765: EMPTY
32766: LIST
32767: PPUSH
32768: CALL_OW 72
32772: PPUSH
32773: LD_VAR 0 1
32777: PPUSH
32778: CALL_OW 128
// AddComReturn ( UnitFilter ( sci , [ [ f_dist , un , 30 ] ] ) ) ;
32782: LD_EXP 128
32786: PPUSH
32787: LD_INT 91
32789: PUSH
32790: LD_VAR 0 1
32794: PUSH
32795: LD_INT 30
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: LIST
32802: PUSH
32803: EMPTY
32804: LIST
32805: PPUSH
32806: CALL_OW 72
32810: PPUSH
32811: CALL_OW 204
// end ; end ; end_of_file
32815: LD_VAR 0 2
32819: RET
// var padlo ; function buch_crate ; var a , h , c ; begin
32820: LD_INT 0
32822: PPUSH
32823: PPUSH
32824: PPUSH
32825: PPUSH
// a := IsInUnit ( Burlak ) ;
32826: LD_ADDR_VAR 0 2
32830: PUSH
32831: LD_EXP 62
32835: PPUSH
32836: CALL_OW 310
32840: ST_TO_ADDR
// if not a then
32841: LD_VAR 0 2
32845: NOT
32846: IFFALSE 32858
// a := Burlak ;
32848: LD_ADDR_VAR 0 2
32852: PUSH
32853: LD_EXP 62
32857: ST_TO_ADDR
// repeat c := c + 1 ;
32858: LD_ADDR_VAR 0 4
32862: PUSH
32863: LD_VAR 0 4
32867: PUSH
32868: LD_INT 1
32870: PLUS
32871: ST_TO_ADDR
// h := RandHexArea ( bedny , false ) ;
32872: LD_ADDR_VAR 0 3
32876: PUSH
32877: LD_INT 29
32879: PPUSH
32880: LD_INT 0
32882: PPUSH
32883: CALL_OW 16
32887: ST_TO_ADDR
// until c > 100 or GetDistUnitXY ( Burlak , h [ 1 ] , h [ 2 ] ) < 25 or GetDistUnitArea ( Burlak , bedny ) > 15 ;
32888: LD_VAR 0 4
32892: PUSH
32893: LD_INT 100
32895: GREATER
32896: PUSH
32897: LD_EXP 62
32901: PPUSH
32902: LD_VAR 0 3
32906: PUSH
32907: LD_INT 1
32909: ARRAY
32910: PPUSH
32911: LD_VAR 0 3
32915: PUSH
32916: LD_INT 2
32918: ARRAY
32919: PPUSH
32920: CALL_OW 297
32924: PUSH
32925: LD_INT 25
32927: LESS
32928: OR
32929: PUSH
32930: LD_EXP 62
32934: PPUSH
32935: LD_INT 29
32937: PPUSH
32938: CALL_OW 299
32942: PUSH
32943: LD_INT 15
32945: GREATER
32946: OR
32947: IFFALSE 32858
// CreateCratesXY ( 5 , h [ 1 ] , h [ 2 ] , true ) ;
32949: LD_INT 5
32951: PPUSH
32952: LD_VAR 0 3
32956: PUSH
32957: LD_INT 1
32959: ARRAY
32960: PPUSH
32961: LD_VAR 0 3
32965: PUSH
32966: LD_INT 2
32968: ARRAY
32969: PPUSH
32970: LD_INT 1
32972: PPUSH
32973: CALL_OW 54
// padlo := padlo + 1 ;
32977: LD_ADDR_LOC 24
32981: PUSH
32982: LD_LOC 24
32986: PUSH
32987: LD_INT 1
32989: PLUS
32990: ST_TO_ADDR
// end ;
32991: LD_VAR 0 1
32995: RET
// every 0 0$53 do
32996: GO 32998
32998: DISABLE
// begin if [ ( padlo < 4 ) , ( padlo < 4 ) , ( padlo < 3 ) ] [ difficulty ] then
32999: LD_LOC 24
33003: PUSH
33004: LD_INT 4
33006: LESS
33007: PUSH
33008: LD_LOC 24
33012: PUSH
33013: LD_INT 4
33015: LESS
33016: PUSH
33017: LD_LOC 24
33021: PUSH
33022: LD_INT 3
33024: LESS
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: LIST
33030: PUSH
33031: LD_OWVAR 67
33035: ARRAY
33036: IFFALSE 33108
// case ( tick div 1 1$0 ) of 0 :
33038: LD_OWVAR 1
33042: PUSH
33043: LD_INT 2100
33045: DIV
33046: PUSH
33047: LD_INT 0
33049: DOUBLE
33050: EQUAL
33051: IFTRUE 33055
33053: GO 33062
33055: POP
// buch_crate ; 3 :
33056: CALL 32820 0 0
33060: GO 33108
33062: LD_INT 3
33064: DOUBLE
33065: EQUAL
33066: IFTRUE 33070
33068: GO 33077
33070: POP
// buch_crate ; 7 :
33071: CALL 32820 0 0
33075: GO 33108
33077: LD_INT 7
33079: DOUBLE
33080: EQUAL
33081: IFTRUE 33085
33083: GO 33092
33085: POP
// buch_crate ; 12 :
33086: CALL 32820 0 0
33090: GO 33108
33092: LD_INT 12
33094: DOUBLE
33095: EQUAL
33096: IFTRUE 33100
33098: GO 33107
33100: POP
// buch_crate ; end ;
33101: CALL 32820 0 0
33105: GO 33108
33107: POP
// if [ ( padlo < 4 ) , ( padlo < 4 ) , ( padlo < 3 ) ] [ difficulty ] then
33108: LD_LOC 24
33112: PUSH
33113: LD_INT 4
33115: LESS
33116: PUSH
33117: LD_LOC 24
33121: PUSH
33122: LD_INT 4
33124: LESS
33125: PUSH
33126: LD_LOC 24
33130: PUSH
33131: LD_INT 3
33133: LESS
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: LIST
33139: PUSH
33140: LD_OWVAR 67
33144: ARRAY
33145: IFFALSE 33148
// enable ;
33147: ENABLE
// end ;
33148: END
// every 0 0$5 do
33149: GO 33151
33151: DISABLE
// begin if [ ( padlo < 4 ) , ( padlo < 4 ) , ( padlo < 3 ) ] [ difficulty ] then
33152: LD_LOC 24
33156: PUSH
33157: LD_INT 4
33159: LESS
33160: PUSH
33161: LD_LOC 24
33165: PUSH
33166: LD_INT 4
33168: LESS
33169: PUSH
33170: LD_LOC 24
33174: PUSH
33175: LD_INT 3
33177: LESS
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: LIST
33183: PUSH
33184: LD_OWVAR 67
33188: ARRAY
33189: IFFALSE 33311
// case true of GetTechProgress ( tech_MatPred , you ) > 95 :
33191: LD_INT 1
33193: PUSH
33194: LD_INT 9
33196: PPUSH
33197: LD_EXP 1
33201: PPUSH
33202: CALL_OW 326
33206: PUSH
33207: LD_INT 95
33209: GREATER
33210: DOUBLE
33211: EQUAL
33212: IFTRUE 33216
33214: GO 33223
33216: POP
// buch_crate ; GetTechProgress ( tech_MatPred , you ) > 70 :
33217: CALL 32820 0 0
33221: GO 33311
33223: LD_INT 9
33225: PPUSH
33226: LD_EXP 1
33230: PPUSH
33231: CALL_OW 326
33235: PUSH
33236: LD_INT 70
33238: GREATER
33239: DOUBLE
33240: EQUAL
33241: IFTRUE 33245
33243: GO 33252
33245: POP
// buch_crate ; GetTechProgress ( tech_MatPred , you ) > 40 :
33246: CALL 32820 0 0
33250: GO 33311
33252: LD_INT 9
33254: PPUSH
33255: LD_EXP 1
33259: PPUSH
33260: CALL_OW 326
33264: PUSH
33265: LD_INT 40
33267: GREATER
33268: DOUBLE
33269: EQUAL
33270: IFTRUE 33274
33272: GO 33281
33274: POP
// buch_crate ; GetTechProgress ( tech_MatPred , you ) > 1 :
33275: CALL 32820 0 0
33279: GO 33311
33281: LD_INT 9
33283: PPUSH
33284: LD_EXP 1
33288: PPUSH
33289: CALL_OW 326
33293: PUSH
33294: LD_INT 1
33296: GREATER
33297: DOUBLE
33298: EQUAL
33299: IFTRUE 33303
33301: GO 33310
33303: POP
// buch_crate ; end ;
33304: CALL 32820 0 0
33308: GO 33311
33310: POP
// if [ ( padlo < 4 ) , ( padlo < 4 ) , ( padlo < 3 ) ] [ difficulty ] then
33311: LD_LOC 24
33315: PUSH
33316: LD_INT 4
33318: LESS
33319: PUSH
33320: LD_LOC 24
33324: PUSH
33325: LD_INT 4
33327: LESS
33328: PUSH
33329: LD_LOC 24
33333: PUSH
33334: LD_INT 3
33336: LESS
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: LIST
33342: PUSH
33343: LD_OWVAR 67
33347: ARRAY
33348: IFFALSE 33351
// enable ;
33350: ENABLE
// end ; end_of_file
33351: END
// every 0 0$2 + 0 0$0.1 do
33352: GO 33354
33354: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) > FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) then
33355: LD_INT 22
33357: PUSH
33358: LD_INT 3
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 2
33367: PUSH
33368: LD_INT 25
33370: PUSH
33371: LD_INT 12
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 25
33380: PUSH
33381: LD_INT 16
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 25
33390: PUSH
33391: LD_INT 15
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 25
33400: PUSH
33401: LD_INT 17
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PPUSH
33419: CALL_OW 69
33423: PUSH
33424: LD_INT 22
33426: PUSH
33427: LD_INT 3
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 21
33436: PUSH
33437: LD_INT 1
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 3
33446: PUSH
33447: LD_INT 2
33449: PUSH
33450: LD_INT 25
33452: PUSH
33453: LD_INT 12
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 25
33462: PUSH
33463: LD_INT 16
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 25
33472: PUSH
33473: LD_INT 15
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 25
33482: PUSH
33483: LD_INT 17
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: LIST
33505: PPUSH
33506: CALL_OW 69
33510: GREATER
33511: IFFALSE 33522
// begin SetAchievement ( ACH_POTA ) ;
33513: LD_STRING ACH_POTA
33515: PPUSH
33516: CALL_OW 543
// exit ;
33520: GO 33523
// end ; enable ;
33522: ENABLE
// end ;
33523: END
// export function SA_SaveVsevolod ; begin
33524: LD_INT 0
33526: PPUSH
// SetAchievement ( ACH_BIA ) ;
33527: LD_STRING ACH_BIA
33529: PPUSH
33530: CALL_OW 543
// end ;
33534: LD_VAR 0 1
33538: RET
// export function SA_NotSaveVsevolod ; begin
33539: LD_INT 0
33541: PPUSH
// SetAchievement ( ACH_BLO ) ;
33542: LD_STRING ACH_BLO
33544: PPUSH
33545: CALL_OW 543
// end ; end_of_file
33549: LD_VAR 0 1
33553: RET
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
33554: LD_INT 0
33556: PPUSH
33557: PPUSH
// if not missionNumber then
33558: LD_VAR 0 2
33562: NOT
33563: IFFALSE 33567
// exit ;
33565: GO 33697
// achiv := false ;
33567: LD_ADDR_VAR 0 7
33571: PUSH
33572: LD_INT 0
33574: ST_TO_ADDR
// case campaignNumber of 1 :
33575: LD_VAR 0 1
33579: PUSH
33580: LD_INT 1
33582: DOUBLE
33583: EQUAL
33584: IFTRUE 33588
33586: GO 33599
33588: POP
// achiv := ACH_GOTA ; 2 :
33589: LD_ADDR_VAR 0 7
33593: PUSH
33594: LD_STRING ACH_GOTA
33596: ST_TO_ADDR
33597: GO 33649
33599: LD_INT 2
33601: DOUBLE
33602: EQUAL
33603: IFTRUE 33607
33605: GO 33610
33607: POP
// ; 3 :
33608: GO 33649
33610: LD_INT 3
33612: DOUBLE
33613: EQUAL
33614: IFTRUE 33618
33616: GO 33629
33618: POP
// achiv := ACH_MOTSU ; 4 :
33619: LD_ADDR_VAR 0 7
33623: PUSH
33624: LD_STRING ACH_MOTSU
33626: ST_TO_ADDR
33627: GO 33649
33629: LD_INT 4
33631: DOUBLE
33632: EQUAL
33633: IFTRUE 33637
33635: GO 33648
33637: POP
// achiv := ACH_LOP ; end ;
33638: LD_ADDR_VAR 0 7
33642: PUSH
33643: LD_STRING ACH_LOP
33645: ST_TO_ADDR
33646: GO 33649
33648: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
33649: LD_OWVAR 67
33653: PUSH
33654: LD_INT 3
33656: EQUAL
33657: PUSH
33658: LD_VAR 0 7
33662: AND
33663: PUSH
33664: LD_VAR 0 3
33668: AND
33669: PUSH
33670: LD_VAR 0 4
33674: AND
33675: PUSH
33676: LD_VAR 0 5
33680: AND
33681: IFFALSE 33697
// SetAchievementEX ( achiv , missionNumber ) ;
33683: LD_VAR 0 7
33687: PPUSH
33688: LD_VAR 0 2
33692: PPUSH
33693: CALL_OW 564
// end ;
33697: LD_VAR 0 6
33701: RET
// export function SA_BehemothConstructed ; begin
33702: LD_INT 0
33704: PPUSH
// SetAchievement ( ACH_SMC ) ;
33705: LD_STRING ACH_SMC
33707: PPUSH
33708: CALL_OW 543
// end ;
33712: LD_VAR 0 1
33716: RET
