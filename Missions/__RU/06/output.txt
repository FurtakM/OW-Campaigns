// export you , you2 , americans , arabians , neutral ; export ai , ai_nation ; export apemans , rulive ; export cargo_am ; export Vsevolod_vstoupil ; export Vsevolod_uderna_group ; export belkovfreed ; export OvsyenkoTaken ; export OvsyenkoCaptured ; export mcdef_difficulty ; export mcatt_difficulty ; export na_kopci_mcdef_difficulty ; export b1_levels , b2_levels , b3_levels , b4_levels , b5_levels ; export normal1_utok , normal2_utok , normal3_utok , normal4_utok , vsevolod_attack , vsevolod_final_attack ; export mine_obj_completed ; export cas_mezi_utoky ; export cas_prvniho_utoku ; export kolik_ma_vsevolod_casu ; export kolik_ma_vsevolod_mezi_utoky ; export kolik_je_v_depotu ; export kolik_je_sib_v_hornim ; export zivoty_armoury , zivoty_armoury2 ; export utoci_max ; export all_labs ; export function Vyhra ; begin
   0: LD_INT 0
   2: PPUSH
// end ;
   3: LD_VAR 0 1
   7: RET
// function set_sides ; begin
   8: LD_INT 0
  10: PPUSH
// you := 3 ;
  11: LD_ADDR_EXP 1
  15: PUSH
  16: LD_INT 3
  18: ST_TO_ADDR
// you2 := 6 ;
  19: LD_ADDR_EXP 2
  23: PUSH
  24: LD_INT 6
  26: ST_TO_ADDR
// americans := 1 ;
  27: LD_ADDR_EXP 3
  31: PUSH
  32: LD_INT 1
  34: ST_TO_ADDR
// arabians := 2 ;
  35: LD_ADDR_EXP 4
  39: PUSH
  40: LD_INT 2
  42: ST_TO_ADDR
// neutral := 0 ;
  43: LD_ADDR_EXP 5
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// OvsyenkoTaken = 0 ;
  51: LD_ADDR_EXP 14
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// ai := americans ;
  59: LD_ADDR_EXP 6
  63: PUSH
  64: LD_EXP 3
  68: ST_TO_ADDR
// ai_nation := nation_american ;
  69: LD_ADDR_EXP 7
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// end ;
  77: LD_VAR 0 1
  81: RET
// var gleb_lives ; every 0 0$1 trigger gleb_lives <> GetLives ( gleb ) do var i ;
  82: LD_LOC 1
  86: PUSH
  87: LD_EXP 65
  91: PPUSH
  92: CALL_OW 256
  96: NONEQUAL
  97: IFFALSE 173
  99: GO 101
 101: DISABLE
 102: LD_INT 0
 104: PPUSH
// begin for i in FilterAllUnits ( [ f_side , you ] ) do
 105: LD_ADDR_VAR 0 1
 109: PUSH
 110: LD_INT 22
 112: PUSH
 113: LD_EXP 1
 117: PUSH
 118: EMPTY
 119: LIST
 120: LIST
 121: PPUSH
 122: CALL_OW 69
 126: PUSH
 127: FOR_IN
 128: IFFALSE 156
// if WantsToAttack ( i ) = Gleb then
 130: LD_VAR 0 1
 134: PPUSH
 135: CALL_OW 319
 139: PUSH
 140: LD_EXP 65
 144: EQUAL
 145: IFFALSE 154
// YouLost ( Gleb ) ;
 147: LD_STRING Gleb
 149: PPUSH
 150: CALL_OW 104
 154: GO 127
 156: POP
 157: POP
// gleb_lives := GetLives ( gleb ) ;
 158: LD_ADDR_LOC 1
 162: PUSH
 163: LD_EXP 65
 167: PPUSH
 168: CALL_OW 256
 172: ST_TO_ADDR
// end ;
 173: PPOPN 1
 175: END
// every 0 0$5 trigger not FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_class , class_engineer ] , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
 176: LD_INT 22
 178: PUSH
 179: LD_EXP 1
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 2
 190: PUSH
 191: LD_INT 25
 193: PUSH
 194: LD_INT 2
 196: PUSH
 197: EMPTY
 198: LIST
 199: LIST
 200: PUSH
 201: LD_INT 30
 203: PUSH
 204: LD_INT 1
 206: PUSH
 207: EMPTY
 208: LIST
 209: LIST
 210: PUSH
 211: LD_INT 30
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: PUSH
 221: LD_INT 30
 223: PUSH
 224: LD_INT 6
 226: PUSH
 227: EMPTY
 228: LIST
 229: LIST
 230: PUSH
 231: LD_INT 30
 233: PUSH
 234: LD_INT 7
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 30
 243: PUSH
 244: LD_INT 8
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: LIST
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PPUSH
 264: CALL_OW 69
 268: NOT
 269: IFFALSE 281
 271: GO 273
 273: DISABLE
// begin YouLost ( NoDepotNoEngineerNoLab ) ;
 274: LD_STRING NoDepotNoEngineerNoLab
 276: PPUSH
 277: CALL_OW 104
// end ;
 281: END
// every 1 trigger OvsyenkoTaken = 0 do
 282: LD_EXP 14
 286: PUSH
 287: LD_INT 0
 289: EQUAL
 290: IFFALSE 300
 292: GO 294
 294: DISABLE
// begin BlockMarchNorth ;
 295: CALL 12089 0 0
// enable ;
 299: ENABLE
// end ;
 300: END
// export function VyhraResearch ; begin
 301: LD_INT 0
 303: PPUSH
// set_medals ;
 304: CALL 447 0 0
// GiveMedals ( Research ) ;
 308: LD_STRING Research
 310: PPUSH
 311: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) ) ;
 315: LD_INT 22
 317: PUSH
 318: LD_EXP 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 21
 329: PUSH
 330: LD_INT 1
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: PUSH
 337: LD_INT 23
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: LIST
 351: PPUSH
 352: CALL_OW 69
 356: PPUSH
 357: CALL_OW 43
// Save ;
 361: CALL 8783 0 0
// YouWin ;
 365: CALL_OW 103
// end ;
 369: LD_VAR 0 1
 373: RET
// export function VyhraExit ; begin
 374: LD_INT 0
 376: PPUSH
// set_medals ;
 377: CALL 447 0 0
// GiveMedals ( Exit ) ;
 381: LD_STRING Exit
 383: PPUSH
 384: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) ) ;
 388: LD_INT 22
 390: PUSH
 391: LD_EXP 1
 395: PUSH
 396: EMPTY
 397: LIST
 398: LIST
 399: PUSH
 400: LD_INT 21
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: PUSH
 410: LD_INT 23
 412: PUSH
 413: LD_INT 3
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: LIST
 424: PPUSH
 425: CALL_OW 69
 429: PPUSH
 430: CALL_OW 43
// Save ;
 434: CALL 8783 0 0
// YouWin ;
 438: CALL_OW 103
// end ;
 442: LD_VAR 0 1
 446: RET
// export function set_medals ; begin
 447: LD_INT 0
 449: PPUSH
// SA_EndMission ( 3 , 6 , VsevolodSaved , OvsyenkoTaken and not OvsyenkoCaptured , GetTech ( tech_MatPred , you ) = state_researched ) ;
 450: LD_INT 3
 452: PPUSH
 453: LD_INT 6
 455: PPUSH
 456: LD_EXP 56
 460: PPUSH
 461: LD_EXP 14
 465: PUSH
 466: LD_EXP 15
 470: NOT
 471: AND
 472: PPUSH
 473: LD_INT 9
 475: PPUSH
 476: LD_EXP 1
 480: PPUSH
 481: CALL_OW 321
 485: PUSH
 486: LD_INT 2
 488: EQUAL
 489: PPUSH
 490: CALL 33191 0 5
// AddMedal ( Vsevolod , VsevolodSaved ) ;
 494: LD_STRING Vsevolod
 496: PPUSH
 497: LD_EXP 56
 501: PPUSH
 502: CALL_OW 101
// AddMedal ( Ovsyenko , OvsyenkoTaken and not OvsyenkoCaptured ) ;
 506: LD_STRING Ovsyenko
 508: PPUSH
 509: LD_EXP 14
 513: PUSH
 514: LD_EXP 15
 518: NOT
 519: AND
 520: PPUSH
 521: CALL_OW 101
// AddMedal ( Prediction , GetTech ( tech_MatPred , you ) = state_researched ) ;
 525: LD_STRING Prediction
 527: PPUSH
 528: LD_INT 9
 530: PPUSH
 531: LD_EXP 1
 535: PPUSH
 536: CALL_OW 321
 540: PUSH
 541: LD_INT 2
 543: EQUAL
 544: PPUSH
 545: CALL_OW 101
// end ;
 549: LD_VAR 0 1
 553: RET
// export function set_difficulty ; var d ; begin
 554: LD_INT 0
 556: PPUSH
 557: PPUSH
// d := difficulty ;
 558: LD_ADDR_VAR 0 2
 562: PUSH
 563: LD_OWVAR 67
 567: ST_TO_ADDR
// b1_levels := [ [ 1 , 3 , 5 ] [ d ] , [ 2 , 3 , 5 ] [ d ] ] ;
 568: LD_ADDR_EXP 19
 572: PUSH
 573: LD_INT 1
 575: PUSH
 576: LD_INT 3
 578: PUSH
 579: LD_INT 5
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: LIST
 586: PUSH
 587: LD_VAR 0 2
 591: ARRAY
 592: PUSH
 593: LD_INT 2
 595: PUSH
 596: LD_INT 3
 598: PUSH
 599: LD_INT 5
 601: PUSH
 602: EMPTY
 603: LIST
 604: LIST
 605: LIST
 606: PUSH
 607: LD_VAR 0 2
 611: ARRAY
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: ST_TO_ADDR
// b2_levels := [ [ 2 , 3 , 5 ] [ d ] , [ 3 , 4 , 6 ] [ d ] ] ;
 617: LD_ADDR_EXP 20
 621: PUSH
 622: LD_INT 2
 624: PUSH
 625: LD_INT 3
 627: PUSH
 628: LD_INT 5
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: LIST
 635: PUSH
 636: LD_VAR 0 2
 640: ARRAY
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 4
 647: PUSH
 648: LD_INT 6
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: LIST
 655: PUSH
 656: LD_VAR 0 2
 660: ARRAY
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: ST_TO_ADDR
// b3_levels := [ [ 2 , 5 , 8 ] [ d ] , [ 7 , 8 , 10 ] [ d ] ] ;
 666: LD_ADDR_EXP 21
 670: PUSH
 671: LD_INT 2
 673: PUSH
 674: LD_INT 5
 676: PUSH
 677: LD_INT 8
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: LIST
 684: PUSH
 685: LD_VAR 0 2
 689: ARRAY
 690: PUSH
 691: LD_INT 7
 693: PUSH
 694: LD_INT 8
 696: PUSH
 697: LD_INT 10
 699: PUSH
 700: EMPTY
 701: LIST
 702: LIST
 703: LIST
 704: PUSH
 705: LD_VAR 0 2
 709: ARRAY
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: ST_TO_ADDR
// b4_levels := [ [ 5 , 7 , 10 ] [ d ] , [ 7 , 8 , 10 ] [ d ] ] ;
 715: LD_ADDR_EXP 22
 719: PUSH
 720: LD_INT 5
 722: PUSH
 723: LD_INT 7
 725: PUSH
 726: LD_INT 10
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: LIST
 733: PUSH
 734: LD_VAR 0 2
 738: ARRAY
 739: PUSH
 740: LD_INT 7
 742: PUSH
 743: LD_INT 8
 745: PUSH
 746: LD_INT 10
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: LIST
 753: PUSH
 754: LD_VAR 0 2
 758: ARRAY
 759: PUSH
 760: EMPTY
 761: LIST
 762: LIST
 763: ST_TO_ADDR
// b5_levels := [ [ 3 , 6 , 9 ] [ d ] , [ 3 , 6 , 9 ] [ d ] ] ;
 764: LD_ADDR_EXP 23
 768: PUSH
 769: LD_INT 3
 771: PUSH
 772: LD_INT 6
 774: PUSH
 775: LD_INT 9
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: LIST
 782: PUSH
 783: LD_VAR 0 2
 787: ARRAY
 788: PUSH
 789: LD_INT 3
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 9
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: PUSH
 803: LD_VAR 0 2
 807: ARRAY
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: ST_TO_ADDR
// mcatt_difficulty := [ 200 , 250 , 300 ] [ d ] ;
 813: LD_ADDR_EXP 17
 817: PUSH
 818: LD_INT 200
 820: PUSH
 821: LD_INT 250
 823: PUSH
 824: LD_INT 300
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: LIST
 831: PUSH
 832: LD_VAR 0 2
 836: ARRAY
 837: ST_TO_ADDR
// mcdef_difficulty := [ 270 , 350 , 450 ] [ d ] ;
 838: LD_ADDR_EXP 16
 842: PUSH
 843: LD_INT 270
 845: PUSH
 846: LD_INT 350
 848: PUSH
 849: LD_INT 450
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: LIST
 856: PUSH
 857: LD_VAR 0 2
 861: ARRAY
 862: ST_TO_ADDR
// na_kopci_mcdef_difficulty := [ 200 , 230 , 260 ] [ d ] ;
 863: LD_ADDR_EXP 18
 867: PUSH
 868: LD_INT 200
 870: PUSH
 871: LD_INT 230
 873: PUSH
 874: LD_INT 260
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: LIST
 881: PUSH
 882: LD_VAR 0 2
 886: ARRAY
 887: ST_TO_ADDR
// kolik_ma_vsevolod_casu := [ 46 46$0 , 39 39$0 , 32 32$0 ] [ d ] ;
 888: LD_ADDR_EXP 33
 892: PUSH
 893: LD_INT 96600
 895: PUSH
 896: LD_INT 81900
 898: PUSH
 899: LD_INT 67200
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: LIST
 906: PUSH
 907: LD_VAR 0 2
 911: ARRAY
 912: ST_TO_ADDR
// kolik_ma_vsevolod_mezi_utoky := [ 10 10$0 , 8 8$0 , 5 5$0 ] [ d ] ;
 913: LD_ADDR_EXP 34
 917: PUSH
 918: LD_INT 21000
 920: PUSH
 921: LD_INT 16800
 923: PUSH
 924: LD_INT 10500
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: LIST
 931: PUSH
 932: LD_VAR 0 2
 936: ARRAY
 937: ST_TO_ADDR
// kolik_je_v_depotu := [ 220 , 180 , 120 ] [ d ] ;
 938: LD_ADDR_EXP 35
 942: PUSH
 943: LD_INT 220
 945: PUSH
 946: LD_INT 180
 948: PUSH
 949: LD_INT 120
 951: PUSH
 952: EMPTY
 953: LIST
 954: LIST
 955: LIST
 956: PUSH
 957: LD_VAR 0 2
 961: ARRAY
 962: ST_TO_ADDR
// kolik_je_sib_v_hornim := [ 130 , 90 , 65 ] [ d ] ;
 963: LD_ADDR_EXP 36
 967: PUSH
 968: LD_INT 130
 970: PUSH
 971: LD_INT 90
 973: PUSH
 974: LD_INT 65
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: PUSH
 982: LD_VAR 0 2
 986: ARRAY
 987: ST_TO_ADDR
// zivoty_armoury := [ hranice_umirani + 50 , hranice_umirani + 150 , hranice_umirani + 350 ] [ d ] ;
 988: LD_ADDR_EXP 37
 992: PUSH
 993: LD_INT 250
 995: PUSH
 996: LD_INT 50
 998: PLUS
 999: PUSH
1000: LD_INT 250
1002: PUSH
1003: LD_INT 150
1005: PLUS
1006: PUSH
1007: LD_INT 250
1009: PUSH
1010: LD_INT 350
1012: PLUS
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: PUSH
1019: LD_VAR 0 2
1023: ARRAY
1024: ST_TO_ADDR
// zivoty_armoury2 := [ hranice_umirani + 150 , hranice_umirani + 350 , hranice_umirani + 550 ] [ d ] ;
1025: LD_ADDR_EXP 38
1029: PUSH
1030: LD_INT 250
1032: PUSH
1033: LD_INT 150
1035: PLUS
1036: PUSH
1037: LD_INT 250
1039: PUSH
1040: LD_INT 350
1042: PLUS
1043: PUSH
1044: LD_INT 250
1046: PUSH
1047: LD_INT 550
1049: PLUS
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: PUSH
1056: LD_VAR 0 2
1060: ARRAY
1061: ST_TO_ADDR
// cas_mezi_utoky := [ 6 6$0 , 3 3$0 , 0 0$30 ] [ d ] ;
1062: LD_ADDR_EXP 31
1066: PUSH
1067: LD_INT 12600
1069: PUSH
1070: LD_INT 6300
1072: PUSH
1073: LD_INT 1050
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: LD_VAR 0 2
1085: ARRAY
1086: ST_TO_ADDR
// utoci_max := [ 3 , 6 , 9 ] [ d ] ;
1087: LD_ADDR_EXP 39
1091: PUSH
1092: LD_INT 3
1094: PUSH
1095: LD_INT 6
1097: PUSH
1098: LD_INT 9
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: LD_VAR 0 2
1110: ARRAY
1111: ST_TO_ADDR
// cas_prvniho_utoku := [ 5 5$0 , 3 3$30 , 1 1$0 ] [ d ] ;
1112: LD_ADDR_EXP 32
1116: PUSH
1117: LD_INT 10500
1119: PUSH
1120: LD_INT 7350
1122: PUSH
1123: LD_INT 2100
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: PUSH
1131: LD_VAR 0 2
1135: ARRAY
1136: ST_TO_ADDR
// end ;
1137: LD_VAR 0 1
1141: RET
// export mrtvi_vsevolodaci ; every 0 0$1 do
1142: GO 1144
1144: DISABLE
// begin debug_strings := [ mrtvi_vsevolodaci , [ ( tick div 0 0$1 ) div 60 , ( tick div 0 0$1 ) mod 60 ] ] ;
1145: LD_ADDR_OWVAR 48
1149: PUSH
1150: LD_EXP 41
1154: PUSH
1155: LD_OWVAR 1
1159: PUSH
1160: LD_INT 35
1162: DIV
1163: PUSH
1164: LD_INT 60
1166: DIV
1167: PUSH
1168: LD_OWVAR 1
1172: PUSH
1173: LD_INT 35
1175: DIV
1176: PUSH
1177: LD_INT 60
1179: MOD
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: ST_TO_ADDR
// enable ;
1189: ENABLE
// end ;
1190: END
// starting begin all_labs := [ b_lab , b_lab_half , b_lab_full ] ;
1191: LD_ADDR_EXP 40
1195: PUSH
1196: LD_INT 6
1198: PUSH
1199: LD_INT 7
1201: PUSH
1202: LD_INT 8
1204: PUSH
1205: EMPTY
1206: LIST
1207: LIST
1208: LIST
1209: ST_TO_ADDR
// normal1_utok := 7001 ;
1210: LD_ADDR_EXP 24
1214: PUSH
1215: LD_INT 7001
1217: ST_TO_ADDR
// normal2_utok := 7002 ;
1218: LD_ADDR_EXP 25
1222: PUSH
1223: LD_INT 7002
1225: ST_TO_ADDR
// normal3_utok := 7003 ;
1226: LD_ADDR_EXP 26
1230: PUSH
1231: LD_INT 7003
1233: ST_TO_ADDR
// normal4_utok := 7004 ;
1234: LD_ADDR_EXP 27
1238: PUSH
1239: LD_INT 7004
1241: ST_TO_ADDR
// vsevolod_attack := 7005 ;
1242: LD_ADDR_EXP 28
1246: PUSH
1247: LD_INT 7005
1249: ST_TO_ADDR
// vsevolod_final_attack := 7006 ;
1250: LD_ADDR_EXP 29
1254: PUSH
1255: LD_INT 7006
1257: ST_TO_ADDR
// SetBName ( RuDepot , ovsyenko ) ;
1258: LD_INT 58
1260: PPUSH
1261: LD_STRING ovsyenko
1263: PPUSH
1264: CALL_OW 500
// set_difficulty ;
1268: CALL 554 0 0
// set_sides ;
1272: CALL 8 0 0
// load ;
1276: CALL 7295 0 0
// place_b ;
1280: CALL 19236 0 0
// place_in_ru_cars ;
1284: CALL 8210 0 0
// place_ru_cars ;
1288: CALL 8560 0 0
// apemans := FilterAllUnits ( [ [ f_nation , nation_nature ] , [ f_type , unit_human ] ] ) ;
1292: LD_ADDR_EXP 8
1296: PUSH
1297: LD_INT 23
1299: PUSH
1300: LD_INT 0
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: LD_INT 21
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PPUSH
1321: CALL_OW 69
1325: ST_TO_ADDR
// set_shorts ;
1326: CALL 1335 0 0
// DStart ;
1330: CALL 1443 0 0
// end ; end_of_file
1334: END
// export Kar , Lip , Bur , Pla , Ptr , Pty , Glb , Tit , Dol , Vse ; export donttalk ; export function set_shorts ; begin
1335: LD_INT 0
1337: PPUSH
// Kar := Karamazov ;
1338: LD_ADDR_EXP 42
1342: PUSH
1343: LD_EXP 63
1347: ST_TO_ADDR
// Lip := Lipshchin ;
1348: LD_ADDR_EXP 43
1352: PUSH
1353: LD_EXP 69
1357: ST_TO_ADDR
// Bur := Burlak ;
1358: LD_ADDR_EXP 44
1362: PUSH
1363: LD_EXP 61
1367: ST_TO_ADDR
// Pla := Platonov ;
1368: LD_ADDR_EXP 45
1372: PUSH
1373: LD_EXP 62
1377: ST_TO_ADDR
// Ptr := Petrovova ;
1378: LD_ADDR_EXP 46
1382: PUSH
1383: LD_EXP 64
1387: ST_TO_ADDR
// Pty := Petrosyan ;
1388: LD_ADDR_EXP 47
1392: PUSH
1393: LD_EXP 66
1397: ST_TO_ADDR
// Glb := Gleb ;
1398: LD_ADDR_EXP 48
1402: PUSH
1403: LD_EXP 65
1407: ST_TO_ADDR
// Tit := Titov ;
1408: LD_ADDR_EXP 49
1412: PUSH
1413: LD_EXP 67
1417: ST_TO_ADDR
// Dol := Dolgov ;
1418: LD_ADDR_EXP 50
1422: PUSH
1423: LD_EXP 68
1427: ST_TO_ADDR
// Vse := Vsevolod ;
1428: LD_ADDR_EXP 51
1432: PUSH
1433: LD_EXP 70
1437: ST_TO_ADDR
// end ;
1438: LD_VAR 0 1
1442: RET
// export function DStart ; begin
1443: LD_INT 0
1445: PPUSH
// CenterNowOnXY ( 120 , 140 ) ;
1446: LD_INT 120
1448: PPUSH
1449: LD_INT 140
1451: PPUSH
1452: CALL_OW 86
// CenterNowOnXY ( 120 , 140 ) ;
1456: LD_INT 120
1458: PPUSH
1459: LD_INT 140
1461: PPUSH
1462: CALL_OW 86
// DialogueOn ;
1466: CALL_OW 6
// if not Say ( Kar , DStart-Kar-1 ) then
1470: LD_EXP 42
1474: PPUSH
1475: LD_STRING DStart-Kar-1
1477: PPUSH
1478: CALL_OW 88
1482: NOT
1483: IFFALSE 1497
// Say ( Lip , DStart-Lip-1 ) ;
1485: LD_EXP 43
1489: PPUSH
1490: LD_STRING DStart-Lip-1
1492: PPUSH
1493: CALL_OW 88
// Say ( Bur , DStart-Bur-1 ) ;
1497: LD_EXP 44
1501: PPUSH
1502: LD_STRING DStart-Bur-1
1504: PPUSH
1505: CALL_OW 88
// Dwait ( 0 0$3 ) ;
1509: LD_INT 105
1511: PPUSH
1512: CALL_OW 68
// SayRadio ( Pla , DStart-Pla-1 ) ;
1516: LD_EXP 45
1520: PPUSH
1521: LD_STRING DStart-Pla-1
1523: PPUSH
1524: CALL_OW 94
// Say ( Bur , DStart-Bur-2 ) ;
1528: LD_EXP 44
1532: PPUSH
1533: LD_STRING DStart-Bur-2
1535: PPUSH
1536: CALL_OW 88
// Say ( Ptr , DStart-Ptr-2 ) ;
1540: LD_EXP 46
1544: PPUSH
1545: LD_STRING DStart-Ptr-2
1547: PPUSH
1548: CALL_OW 88
// SaveForQuickRestart ;
1552: CALL_OW 22
// ChangeMissionObjectives ( MStart ) ;
1556: LD_STRING MStart
1558: PPUSH
1559: CALL_OW 337
// DialogueOff ;
1563: CALL_OW 7
// end ;
1567: LD_VAR 0 1
1571: RET
// every 0 0$2 trigger GetSide ( RuDepot ) = you or not FilterHumansInArea ( ovsyenko_base , [ [ f_side , ai ] ] ) do
1572: LD_INT 58
1574: PPUSH
1575: CALL_OW 255
1579: PUSH
1580: LD_EXP 1
1584: EQUAL
1585: PUSH
1586: LD_INT 14
1588: PPUSH
1589: LD_INT 22
1591: PUSH
1592: LD_EXP 6
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: PUSH
1601: EMPTY
1602: LIST
1603: PPUSH
1604: CALL 11006 0 2
1608: NOT
1609: OR
1610: IFFALSE 1627
1612: GO 1614
1614: DISABLE
// begin DOvsyenkoTaken ;
1615: CALL 1628 0 0
// OvsyenkoTaken := 1 ;
1619: LD_ADDR_EXP 14
1623: PUSH
1624: LD_INT 1
1626: ST_TO_ADDR
// end ;
1627: END
// export function DOvsyenkoTaken ; begin
1628: LD_INT 0
1630: PPUSH
// DialogueOn ;
1631: CALL_OW 6
// Say ( Bur , DOvsyenkoTaken-Bur-1 ) ;
1635: LD_EXP 44
1639: PPUSH
1640: LD_STRING DOvsyenkoTaken-Bur-1
1642: PPUSH
1643: CALL_OW 88
// SayRadio ( Pla , DOvsyenkoTaken-Pla-1 ) ;
1647: LD_EXP 45
1651: PPUSH
1652: LD_STRING DOvsyenkoTaken-Pla-1
1654: PPUSH
1655: CALL_OW 94
// Say ( Kar , DOvsyenkoTaken-Kar-1 ) ;
1659: LD_EXP 42
1663: PPUSH
1664: LD_STRING DOvsyenkoTaken-Kar-1
1666: PPUSH
1667: CALL_OW 88
// Say ( Tit , DOvsyenkoTaken-Tit-1 ) ;
1671: LD_EXP 49
1675: PPUSH
1676: LD_STRING DOvsyenkoTaken-Tit-1
1678: PPUSH
1679: CALL_OW 88
// if Say ( Lip , DOvsyenkoTaken-Lip-1 ) then
1683: LD_EXP 43
1687: PPUSH
1688: LD_STRING DOvsyenkoTaken-Lip-1
1690: PPUSH
1691: CALL_OW 88
1695: IFFALSE 1709
// Say ( Glb , DOvsyenkoTaken-Glb-1 ) ;
1697: LD_EXP 48
1701: PPUSH
1702: LD_STRING DOvsyenkoTaken-Glb-1
1704: PPUSH
1705: CALL_OW 88
// ChangeMissionObjectives ( MOutCapture ) ;
1709: LD_STRING MOutCapture
1711: PPUSH
1712: CALL_OW 337
// ChangeMissionObjectives ( MAddMine ) ;
1716: LD_STRING MAddMine
1718: PPUSH
1719: CALL_OW 337
// DialogueOff ;
1723: CALL_OW 7
// MyHint ( Capturing ) ;
1727: LD_STRING Capturing
1729: PPUSH
1730: CALL 12029 0 1
// MyHint ( SibDet ) ;
1734: LD_STRING SibDet
1736: PPUSH
1737: CALL 12029 0 1
// end ;
1741: LD_VAR 0 1
1745: RET
// export function DMatPrediction ; begin
1746: LD_INT 0
1748: PPUSH
// DialogueOn ;
1749: CALL_OW 6
// if IsOK ( Pty ) or IsOk ( Dol ) then
1753: LD_EXP 47
1757: PPUSH
1758: CALL_OW 302
1762: PUSH
1763: LD_EXP 50
1767: PPUSH
1768: CALL_OW 302
1772: OR
1773: IFFALSE 1880
// begin if not Say ( Pty , DMatPrediction-Pty-1 ) then
1775: LD_EXP 47
1779: PPUSH
1780: LD_STRING DMatPrediction-Pty-1
1782: PPUSH
1783: CALL_OW 88
1787: NOT
1788: IFFALSE 1802
// Say ( Dol , DMatPrediction-Dol-1 ) ;
1790: LD_EXP 50
1794: PPUSH
1795: LD_STRING DMatPrediction-Dol-1
1797: PPUSH
1798: CALL_OW 88
// Say ( Bur , DMatPrediction-Bur-1 ) ;
1802: LD_EXP 44
1806: PPUSH
1807: LD_STRING DMatPrediction-Bur-1
1809: PPUSH
1810: CALL_OW 88
// if not Say ( Pty , DMatPrediction-Pty-2 ) then
1814: LD_EXP 47
1818: PPUSH
1819: LD_STRING DMatPrediction-Pty-2
1821: PPUSH
1822: CALL_OW 88
1826: NOT
1827: IFFALSE 1841
// Say ( Dol , DMatPrediction-Dol-2 ) ;
1829: LD_EXP 50
1833: PPUSH
1834: LD_STRING DMatPrediction-Dol-2
1836: PPUSH
1837: CALL_OW 88
// Say ( Bur , DMatPrediction-Bur-2 ) ;
1841: LD_EXP 44
1845: PPUSH
1846: LD_STRING DMatPrediction-Bur-2
1848: PPUSH
1849: CALL_OW 88
// if not Say ( Pty , DMatPrediction-Pty-3 ) then
1853: LD_EXP 47
1857: PPUSH
1858: LD_STRING DMatPrediction-Pty-3
1860: PPUSH
1861: CALL_OW 88
1865: NOT
1866: IFFALSE 1880
// Say ( Dol , DMatPrediction-Dol-3 ) ;
1868: LD_EXP 50
1872: PPUSH
1873: LD_STRING DMatPrediction-Dol-3
1875: PPUSH
1876: CALL_OW 88
// end ; ChangeMissionObjectives ( MPred ) ;
1880: LD_STRING MPred
1882: PPUSH
1883: CALL_OW 337
// DialogueOff ;
1887: CALL_OW 7
// end ;
1891: LD_VAR 0 1
1895: RET
// export function DNoMaterial ; begin
1896: LD_INT 0
1898: PPUSH
// DialogueOn ;
1899: CALL_OW 6
// if not Say ( Pty , DNoMaterial-Pty-1 ) then
1903: LD_EXP 47
1907: PPUSH
1908: LD_STRING DNoMaterial-Pty-1
1910: PPUSH
1911: CALL_OW 88
1915: NOT
1916: IFFALSE 1930
// Say ( Dol , DNoMaterial-Dol-1 ) ;
1918: LD_EXP 50
1922: PPUSH
1923: LD_STRING DNoMaterial-Dol-1
1925: PPUSH
1926: CALL_OW 88
// Say ( Bur , DNoMaterial-Bur-1 ) ;
1930: LD_EXP 44
1934: PPUSH
1935: LD_STRING DNoMaterial-Bur-1
1937: PPUSH
1938: CALL_OW 88
// if not Say ( Pty , DNoMaterial-Pty-2 ) then
1942: LD_EXP 47
1946: PPUSH
1947: LD_STRING DNoMaterial-Pty-2
1949: PPUSH
1950: CALL_OW 88
1954: NOT
1955: IFFALSE 1969
// Say ( Dol , DNoMaterial-Dol-2 ) ;
1957: LD_EXP 50
1961: PPUSH
1962: LD_STRING DNoMaterial-Dol-2
1964: PPUSH
1965: CALL_OW 88
// Say ( Bur , DNoMaterial-Bur-2 ) ;
1969: LD_EXP 44
1973: PPUSH
1974: LD_STRING DNoMaterial-Bur-2
1976: PPUSH
1977: CALL_OW 88
// ChangeMissionObjectives ( MOutPred ) ;
1981: LD_STRING MOutPred
1983: PPUSH
1984: CALL_OW 337
// DialogueOff ;
1988: CALL_OW 7
// MyHint ( Prediction ) ;
1992: LD_STRING Prediction
1994: PPUSH
1995: CALL 12029 0 1
// end ;
1999: LD_VAR 0 1
2003: RET
// export byl_sib_research ; every 0 0$2 trigger GetResourceVisibility ( 101 , 93 , you ) or GetResourceVisibility ( 53 , 55 , you ) or GetResourceVisibility ( 29 , 30 , you ) or FilterAllUnits ( [ [ f_side , you ] , [ f_btype , b_siberite_mine ] ] ) > 0 or DepotWithSiberite marked 66 do
2004: LD_INT 101
2006: PPUSH
2007: LD_INT 93
2009: PPUSH
2010: LD_EXP 1
2014: PPUSH
2015: CALL_OW 440
2019: PUSH
2020: LD_INT 53
2022: PPUSH
2023: LD_INT 55
2025: PPUSH
2026: LD_EXP 1
2030: PPUSH
2031: CALL_OW 440
2035: OR
2036: PUSH
2037: LD_INT 29
2039: PPUSH
2040: LD_INT 30
2042: PPUSH
2043: LD_EXP 1
2047: PPUSH
2048: CALL_OW 440
2052: OR
2053: PUSH
2054: LD_INT 22
2056: PUSH
2057: LD_EXP 1
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: PUSH
2066: LD_INT 30
2068: PUSH
2069: LD_INT 30
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: PPUSH
2080: CALL_OW 69
2084: PUSH
2085: LD_INT 0
2087: GREATER
2088: OR
2089: PUSH
2090: CALL 12189 0 0
2094: OR
2095: IFFALSE 2104
2097: GO 2099
2099: DISABLE
// begin DSibResearch ;
2100: CALL 2105 0 0
// end ;
2104: END
// export function DSibResearch ; begin
2105: LD_INT 0
2107: PPUSH
// byl_sib_research := true ;
2108: LD_ADDR_EXP 53
2112: PUSH
2113: LD_INT 1
2115: ST_TO_ADDR
// DialogueOn ;
2116: CALL_OW 6
// if not Say ( Pty , DSibResearch-Pty-1 ) then
2120: LD_EXP 47
2124: PPUSH
2125: LD_STRING DSibResearch-Pty-1
2127: PPUSH
2128: CALL_OW 88
2132: NOT
2133: IFFALSE 2147
// Say ( Dol , DSibResearch-Dol-1 ) ;
2135: LD_EXP 50
2139: PPUSH
2140: LD_STRING DSibResearch-Dol-1
2142: PPUSH
2143: CALL_OW 88
// Say ( Bur , DSibResearch-Bur-1 ) ;
2147: LD_EXP 44
2151: PPUSH
2152: LD_STRING DSibResearch-Bur-1
2154: PPUSH
2155: CALL_OW 88
// SayRadio ( Pla , DSibResearch-Pla-1 ) ;
2159: LD_EXP 45
2163: PPUSH
2164: LD_STRING DSibResearch-Pla-1
2166: PPUSH
2167: CALL_OW 94
// ChangeMissionObjectives ( MResearch ) ;
2171: LD_STRING MResearch
2173: PPUSH
2174: CALL_OW 337
// DialogueOff ;
2178: CALL_OW 7
// end ;
2182: LD_VAR 0 1
2186: RET
// function AnyUnitOver ( y ) ; var res , i ; begin
2187: LD_INT 0
2189: PPUSH
2190: PPUSH
2191: PPUSH
// res := false ;
2192: LD_ADDR_VAR 0 3
2196: PUSH
2197: LD_INT 0
2199: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , you ] , [ f_not , [ f_type , unit_building ] ] ] ) do
2200: LD_ADDR_VAR 0 4
2204: PUSH
2205: LD_INT 22
2207: PUSH
2208: LD_EXP 1
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: PUSH
2217: LD_INT 3
2219: PUSH
2220: LD_INT 21
2222: PUSH
2223: LD_INT 3
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: PPUSH
2238: CALL_OW 69
2242: PUSH
2243: FOR_IN
2244: IFFALSE 2275
// if GetY ( i ) < y then
2246: LD_VAR 0 4
2250: PPUSH
2251: CALL_OW 251
2255: PUSH
2256: LD_VAR 0 1
2260: LESS
2261: IFFALSE 2273
// begin res := true ;
2263: LD_ADDR_VAR 0 3
2267: PUSH
2268: LD_INT 1
2270: ST_TO_ADDR
// break ;
2271: GO 2275
// end ;
2273: GO 2243
2275: POP
2276: POP
// result := res ;
2277: LD_ADDR_VAR 0 2
2281: PUSH
2282: LD_VAR 0 3
2286: ST_TO_ADDR
// end ;
2287: LD_VAR 0 2
2291: RET
// every 0 0$4 trigger ( OvsyenkoTaken and GetTechProgress ( tech_SibDet , you ) > 50 ) or AnyUnitOver ( 30 ) do var i ;
2292: LD_EXP 14
2296: PUSH
2297: LD_INT 20
2299: PPUSH
2300: LD_EXP 1
2304: PPUSH
2305: CALL_OW 326
2309: PUSH
2310: LD_INT 50
2312: GREATER
2313: AND
2314: PUSH
2315: LD_INT 30
2317: PPUSH
2318: CALL 2187 0 1
2322: OR
2323: IFFALSE 2724
2325: GO 2327
2327: DISABLE
2328: LD_INT 0
2330: PPUSH
// begin PlaceUnitArea ( Vsevolod , vsevolod_in , false ) ;
2331: LD_EXP 70
2335: PPUSH
2336: LD_INT 16
2338: PPUSH
2339: LD_INT 0
2341: PPUSH
2342: CALL_OW 49
// for i in Vsevolod_uderna_group do
2346: LD_ADDR_VAR 0 1
2350: PUSH
2351: LD_EXP 12
2355: PUSH
2356: FOR_IN
2357: IFFALSE 2376
// PlaceUnitArea ( i , vsevolod_in , false ) ;
2359: LD_VAR 0 1
2363: PPUSH
2364: LD_INT 16
2366: PPUSH
2367: LD_INT 0
2369: PPUSH
2370: CALL_OW 49
2374: GO 2356
2376: POP
2377: POP
// ComAgressiveMove ( Vsevolod_uderna_group ^ [ vsevolod ] , 51 , 11 ) ;
2378: LD_EXP 12
2382: PUSH
2383: LD_EXP 70
2387: PUSH
2388: EMPTY
2389: LIST
2390: ADD
2391: PPUSH
2392: LD_INT 51
2394: PPUSH
2395: LD_INT 11
2397: PPUSH
2398: CALL_OW 114
// DoNotAttack ( ai , Vsevolod ) ;
2402: LD_EXP 6
2406: PPUSH
2407: LD_EXP 70
2411: PPUSH
2412: CALL_OW 471
// for i in UnitFilter ( vsevolod_uderna_group , [ [ f_class , class_engineer ] ] ) do
2416: LD_ADDR_VAR 0 1
2420: PUSH
2421: LD_EXP 12
2425: PPUSH
2426: LD_INT 25
2428: PUSH
2429: LD_INT 2
2431: PUSH
2432: EMPTY
2433: LIST
2434: LIST
2435: PUSH
2436: EMPTY
2437: LIST
2438: PPUSH
2439: CALL_OW 72
2443: PUSH
2444: FOR_IN
2445: IFFALSE 2463
// DoNotAttack ( ai , i ) ;
2447: LD_EXP 6
2451: PPUSH
2452: LD_VAR 0 1
2456: PPUSH
2457: CALL_OW 471
2461: GO 2444
2463: POP
2464: POP
// wait ( 0 0$5 ) ;
2465: LD_INT 175
2467: PPUSH
2468: CALL_OW 67
// ComAgressiveMove ( FilterHumansInArea ( near_base2 , [ [ f_side , ai ] ] ) , 51 , 11 ) ;
2472: LD_INT 3
2474: PPUSH
2475: LD_INT 22
2477: PUSH
2478: LD_EXP 6
2482: PUSH
2483: EMPTY
2484: LIST
2485: LIST
2486: PUSH
2487: EMPTY
2488: LIST
2489: PPUSH
2490: CALL 11006 0 2
2494: PPUSH
2495: LD_INT 51
2497: PPUSH
2498: LD_INT 11
2500: PPUSH
2501: CALL_OW 114
// wait ( 0 0$10 ) ;
2505: LD_INT 350
2507: PPUSH
2508: CALL_OW 67
// ComMoveXY ( FilterHumansInArea ( near_base2 , [ [ f_side , ai ] ] ) , 23 , 28 ) ;
2512: LD_INT 3
2514: PPUSH
2515: LD_INT 22
2517: PUSH
2518: LD_EXP 6
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: PUSH
2527: EMPTY
2528: LIST
2529: PPUSH
2530: CALL 11006 0 2
2534: PPUSH
2535: LD_INT 23
2537: PPUSH
2538: LD_INT 28
2540: PPUSH
2541: CALL_OW 111
// SetSideBase ( GetBase ( vsevd1 ) , you2 ) ;
2545: LD_INT 182
2547: PPUSH
2548: CALL_OW 274
2552: PPUSH
2553: LD_EXP 2
2557: PPUSH
2558: CALL_OW 236
// SetBName ( vsevd1 , gorkij ) ;
2562: LD_INT 182
2564: PPUSH
2565: LD_STRING gorkij
2567: PPUSH
2568: CALL_OW 500
// ComEnterUnit ( Vsevolod , vseva1 ) ;
2572: LD_EXP 70
2576: PPUSH
2577: LD_INT 190
2579: PPUSH
2580: CALL_OW 120
// ComEnterUnit ( vsevolod_uderna_group , vseva1 ) ;
2584: LD_EXP 12
2588: PPUSH
2589: LD_INT 190
2591: PPUSH
2592: CALL_OW 120
// ComEnterUnit ( UnitFilter ( vsevolod_uderna_group , [ [ f_class , class_engineer ] ] ) , vseva1 ) ;
2596: LD_EXP 12
2600: PPUSH
2601: LD_INT 25
2603: PUSH
2604: LD_INT 2
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: PUSH
2611: EMPTY
2612: LIST
2613: PPUSH
2614: CALL_OW 72
2618: PPUSH
2619: LD_INT 190
2621: PPUSH
2622: CALL_OW 120
// for i in vsevolod_uderna_group do
2626: LD_ADDR_VAR 0 1
2630: PUSH
2631: LD_EXP 12
2635: PUSH
2636: FOR_IN
2637: IFFALSE 2655
// NormalAttack ( ai , i ) ;
2639: LD_EXP 6
2643: PPUSH
2644: LD_VAR 0 1
2648: PPUSH
2649: CALL_OW 472
2653: GO 2636
2655: POP
2656: POP
// AddComChangeProfession ( UnitFilter ( vsevolod_uderna_group , [ [ f_class , class_engineer ] ] ) , class_soldier ) ;
2657: LD_EXP 12
2661: PPUSH
2662: LD_INT 25
2664: PUSH
2665: LD_INT 2
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: EMPTY
2673: LIST
2674: PPUSH
2675: CALL_OW 72
2679: PPUSH
2680: LD_INT 1
2682: PPUSH
2683: CALL_OW 183
// ComEnterUnit ( vsevolod_uderna_group [ 2 ] , vsevb1 ) ;
2687: LD_EXP 12
2691: PUSH
2692: LD_INT 2
2694: ARRAY
2695: PPUSH
2696: LD_INT 193
2698: PPUSH
2699: CALL_OW 120
// wait ( 0 0$5 ) ;
2703: LD_INT 175
2705: PPUSH
2706: CALL_OW 67
// Vsevolod_vstoupil := tick ;
2710: LD_ADDR_EXP 11
2714: PUSH
2715: LD_OWVAR 1
2719: ST_TO_ADDR
// DVsevolod ;
2720: CALL 2727 0 0
// end ;
2724: PPOPN 1
2726: END
// export function DVsevolod ; var who ; begin
2727: LD_INT 0
2729: PPUSH
2730: PPUSH
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 0 ) ;
2731: LD_ADDR_VAR 0 2
2735: PUSH
2736: LD_EXP 52
2740: PPUSH
2741: LD_EXP 1
2745: PPUSH
2746: LD_INT 1
2748: PPUSH
2749: LD_INT 0
2751: PPUSH
2752: LD_INT 0
2754: PPUSH
2755: CALL 10715 0 5
2759: ST_TO_ADDR
// DialogueOn ;
2760: CALL_OW 6
// Say ( Dol , DVsevolod-Dol-1 ) ;
2764: LD_EXP 50
2768: PPUSH
2769: LD_STRING DVsevolod-Dol-1
2771: PPUSH
2772: CALL_OW 88
// SayRadio ( Vse , DVsevolod-Vse-1 ) ;
2776: LD_EXP 51
2780: PPUSH
2781: LD_STRING DVsevolod-Vse-1
2783: PPUSH
2784: CALL_OW 94
// Say ( Bur , DVsevolod-Bur-1 ) ;
2788: LD_EXP 44
2792: PPUSH
2793: LD_STRING DVsevolod-Bur-1
2795: PPUSH
2796: CALL_OW 88
// Say ( Glb , DVsevolod-Glb-1 ) ;
2800: LD_EXP 48
2804: PPUSH
2805: LD_STRING DVsevolod-Glb-1
2807: PPUSH
2808: CALL_OW 88
// SayRadio ( Vse , DVsevolod-Vse-2 ) ;
2812: LD_EXP 51
2816: PPUSH
2817: LD_STRING DVsevolod-Vse-2
2819: PPUSH
2820: CALL_OW 94
// Say ( Bur , DVsevolod-Bur-2 ) ;
2824: LD_EXP 44
2828: PPUSH
2829: LD_STRING DVsevolod-Bur-2
2831: PPUSH
2832: CALL_OW 88
// SayRadio ( Vse , DVsevolod-Vse-3 ) ;
2836: LD_EXP 51
2840: PPUSH
2841: LD_STRING DVsevolod-Vse-3
2843: PPUSH
2844: CALL_OW 94
// Say ( Bur , DVsevolod-Bur-3 ) ;
2848: LD_EXP 44
2852: PPUSH
2853: LD_STRING DVsevolod-Bur-3
2855: PPUSH
2856: CALL_OW 88
// SayRadio ( Vse , DVsevolod-Vse-4 ) ;
2860: LD_EXP 51
2864: PPUSH
2865: LD_STRING DVsevolod-Vse-4
2867: PPUSH
2868: CALL_OW 94
// Say ( Bur , DVsevolod-Bur-4 ) ;
2872: LD_EXP 44
2876: PPUSH
2877: LD_STRING DVsevolod-Bur-4
2879: PPUSH
2880: CALL_OW 88
// if Say ( Glb , DVsevolod-Glb-4 ) then
2884: LD_EXP 48
2888: PPUSH
2889: LD_STRING DVsevolod-Glb-4
2891: PPUSH
2892: CALL_OW 88
2896: IFFALSE 2910
// Say ( Bur , DVsevolod-Bur-5 ) ;
2898: LD_EXP 44
2902: PPUSH
2903: LD_STRING DVsevolod-Bur-5
2905: PPUSH
2906: CALL_OW 88
// if not IsOk ( Glb ) then
2910: LD_EXP 48
2914: PPUSH
2915: CALL_OW 302
2919: NOT
2920: IFFALSE 2934
// Say ( who , DVsevolod-RSol1-5 ) ;
2922: LD_VAR 0 2
2926: PPUSH
2927: LD_STRING DVsevolod-RSol1-5
2929: PPUSH
2930: CALL_OW 88
// Say ( Bur , DVsevolod-Bur-6 ) ;
2934: LD_EXP 44
2938: PPUSH
2939: LD_STRING DVsevolod-Bur-6
2941: PPUSH
2942: CALL_OW 88
// Say ( Dol , DVsevolod-Dol-6 ) ;
2946: LD_EXP 50
2950: PPUSH
2951: LD_STRING DVsevolod-Dol-6
2953: PPUSH
2954: CALL_OW 88
// RevealFogArea ( you , near_base2 ) ;
2958: LD_EXP 1
2962: PPUSH
2963: LD_INT 3
2965: PPUSH
2966: CALL_OW 332
// CenterNowOnXY ( 51 , 13 ) ;
2970: LD_INT 51
2972: PPUSH
2973: LD_INT 13
2975: PPUSH
2976: CALL_OW 86
// dwait ( 0 0$1 ) ;
2980: LD_INT 35
2982: PPUSH
2983: CALL_OW 68
// Say ( Bur , DVsevolod-Bur-7 ) ;
2987: LD_EXP 44
2991: PPUSH
2992: LD_STRING DVsevolod-Bur-7
2994: PPUSH
2995: CALL_OW 88
// SayRadio ( Vse , DVsevolod-Vse-7 ) ;
2999: LD_EXP 51
3003: PPUSH
3004: LD_STRING DVsevolod-Vse-7
3006: PPUSH
3007: CALL_OW 94
// Say ( Bur , DVsevolod-Bur-8 ) ;
3011: LD_EXP 44
3015: PPUSH
3016: LD_STRING DVsevolod-Bur-8
3018: PPUSH
3019: CALL_OW 88
// DialogueOff ;
3023: CALL_OW 7
// ChangeMissionObjectives ( MVsevolod ) ;
3027: LD_STRING MVsevolod
3029: PPUSH
3030: CALL_OW 337
// end ;
3034: LD_VAR 0 1
3038: RET
// every 0 0$2 trigger vsevolod_vstoupil and tick > ( vsevolod_vstoupil + 0 0$6 ) do
3039: LD_EXP 11
3043: PUSH
3044: LD_OWVAR 1
3048: PUSH
3049: LD_EXP 11
3053: PUSH
3054: LD_INT 210
3056: PLUS
3057: GREATER
3058: AND
3059: IFFALSE 3084
3061: GO 3063
3063: DISABLE
// begin if belkovfreed then
3064: LD_EXP 13
3068: IFFALSE 3076
// DHelp1 else
3070: CALL 3085 0 0
3074: GO 3080
// DHelp2 ;
3076: CALL 3197 0 0
// DHelp3 ;
3080: CALL 3339 0 0
// end ;
3084: END
// export function DHelp1 ; var who ; begin
3085: LD_INT 0
3087: PPUSH
3088: PPUSH
// DialogueOn ;
3089: CALL_OW 6
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 0 ) ;
3093: LD_ADDR_VAR 0 2
3097: PUSH
3098: LD_EXP 52
3102: PPUSH
3103: LD_EXP 1
3107: PPUSH
3108: LD_INT 1
3110: PPUSH
3111: LD_INT 0
3113: PPUSH
3114: LD_INT 0
3116: PPUSH
3117: CALL 10715 0 5
3121: ST_TO_ADDR
// if ( not Say ( Glb , DHelp1-Glb-1 ) ) and ( not Say ( Dol , DHelp1-Dol-1 ) ) then
3122: LD_EXP 48
3126: PPUSH
3127: LD_STRING DHelp1-Glb-1
3129: PPUSH
3130: CALL_OW 88
3134: NOT
3135: PUSH
3136: LD_EXP 50
3140: PPUSH
3141: LD_STRING DHelp1-Dol-1
3143: PPUSH
3144: CALL_OW 88
3148: NOT
3149: AND
3150: IFFALSE 3164
// Say ( who , DHelp1-RSol1-1 ) ;
3152: LD_VAR 0 2
3156: PPUSH
3157: LD_STRING DHelp1-RSol1-1
3159: PPUSH
3160: CALL_OW 88
// Say ( Tit , DHelp1-Tit-1 ) ;
3164: LD_EXP 49
3168: PPUSH
3169: LD_STRING DHelp1-Tit-1
3171: PPUSH
3172: CALL_OW 88
// Say ( Glb , DHelp1-Glb-2 ) ;
3176: LD_EXP 48
3180: PPUSH
3181: LD_STRING DHelp1-Glb-2
3183: PPUSH
3184: CALL_OW 88
// DialogueOff ;
3188: CALL_OW 7
// end ;
3192: LD_VAR 0 1
3196: RET
// export function DHelp2 ; var who , who2 ; begin
3197: LD_INT 0
3199: PPUSH
3200: PPUSH
3201: PPUSH
// DialogueOn ;
3202: CALL_OW 6
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 1 ) ;
3206: LD_ADDR_VAR 0 2
3210: PUSH
3211: LD_EXP 52
3215: PPUSH
3216: LD_EXP 1
3220: PPUSH
3221: LD_INT 1
3223: PPUSH
3224: LD_INT 0
3226: PPUSH
3227: LD_INT 1
3229: PPUSH
3230: CALL 10715 0 5
3234: ST_TO_ADDR
// who2 := WhoSayAny ( donttalk , you , sex_male , 0 , 2 ) ;
3235: LD_ADDR_VAR 0 3
3239: PUSH
3240: LD_EXP 52
3244: PPUSH
3245: LD_EXP 1
3249: PPUSH
3250: LD_INT 1
3252: PPUSH
3253: LD_INT 0
3255: PPUSH
3256: LD_INT 2
3258: PPUSH
3259: CALL 10715 0 5
3263: ST_TO_ADDR
// if not Say ( Tit , DHelp2-Tit-1 ) then
3264: LD_EXP 49
3268: PPUSH
3269: LD_STRING DHelp2-Tit-1
3271: PPUSH
3272: CALL_OW 88
3276: NOT
3277: IFFALSE 3291
// Say ( who , DHelp2-RSol1-1 ) ;
3279: LD_VAR 0 2
3283: PPUSH
3284: LD_STRING DHelp2-RSol1-1
3286: PPUSH
3287: CALL_OW 88
// if not Say ( Glb , DHelp2-Glb-1 ) then
3291: LD_EXP 48
3295: PPUSH
3296: LD_STRING DHelp2-Glb-1
3298: PPUSH
3299: CALL_OW 88
3303: NOT
3304: IFFALSE 3318
// Say ( who2 , DHelp2-RSol2-1 ) ;
3306: LD_VAR 0 3
3310: PPUSH
3311: LD_STRING DHelp2-RSol2-1
3313: PPUSH
3314: CALL_OW 88
// Say ( Tit , DHelp2-Tit-2 ) ;
3318: LD_EXP 49
3322: PPUSH
3323: LD_STRING DHelp2-Tit-2
3325: PPUSH
3326: CALL_OW 88
// DialogueOff ;
3330: CALL_OW 7
// end ;
3334: LD_VAR 0 1
3338: RET
// export function DHelp3 ; var who ; begin
3339: LD_INT 0
3341: PPUSH
3342: PPUSH
// DialogueOn ;
3343: CALL_OW 6
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 0 ) ;
3347: LD_ADDR_VAR 0 2
3351: PUSH
3352: LD_EXP 52
3356: PPUSH
3357: LD_EXP 1
3361: PPUSH
3362: LD_INT 1
3364: PPUSH
3365: LD_INT 0
3367: PPUSH
3368: LD_INT 0
3370: PPUSH
3371: CALL 10715 0 5
3375: ST_TO_ADDR
// Say ( Bur , DHelp3-Bur-1 ) ;
3376: LD_EXP 44
3380: PPUSH
3381: LD_STRING DHelp3-Bur-1
3383: PPUSH
3384: CALL_OW 88
// if not Say ( Lip , DHelp3-Lip-1 ) then
3388: LD_EXP 43
3392: PPUSH
3393: LD_STRING DHelp3-Lip-1
3395: PPUSH
3396: CALL_OW 88
3400: NOT
3401: IFFALSE 3415
// Say ( who , DHelp3-RSol1-1 ) ;
3403: LD_VAR 0 2
3407: PPUSH
3408: LD_STRING DHelp3-RSol1-1
3410: PPUSH
3411: CALL_OW 88
// Say ( Bur , DHelp3-Bur-2 ) ;
3415: LD_EXP 44
3419: PPUSH
3420: LD_STRING DHelp3-Bur-2
3422: PPUSH
3423: CALL_OW 88
// DialogueOff ;
3427: CALL_OW 7
// end ;
3431: LD_VAR 0 1
3435: RET
// every 0 0$5 trigger vsevolod_vstoupil and not FilterHumansInArea ( ovsyenko_base , [ [ f_side , you ] ] ) do var b , i ;
3436: LD_EXP 11
3440: PUSH
3441: LD_INT 14
3443: PPUSH
3444: LD_INT 22
3446: PUSH
3447: LD_EXP 1
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: PUSH
3456: EMPTY
3457: LIST
3458: PPUSH
3459: CALL 11006 0 2
3463: NOT
3464: AND
3465: IFFALSE 3603
3467: GO 3469
3469: DISABLE
3470: LD_INT 0
3472: PPUSH
3473: PPUSH
// begin if FilterUnitsInArea ( ovsyenko_base , [ [ f_side , ai ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) >= 1 then
3474: LD_INT 14
3476: PPUSH
3477: LD_INT 22
3479: PUSH
3480: LD_EXP 6
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: PUSH
3489: LD_INT 2
3491: PUSH
3492: LD_INT 21
3494: PUSH
3495: LD_INT 1
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: PUSH
3502: LD_INT 21
3504: PUSH
3505: LD_INT 2
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: PUSH
3512: EMPTY
3513: LIST
3514: LIST
3515: LIST
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PPUSH
3521: CALL_OW 70
3525: PUSH
3526: LD_INT 1
3528: GREATEREQUAL
3529: IFFALSE 3602
// begin DOvsyenkoCaptured ;
3531: CALL 3606 0 0
// OvsyenkoCaptured := true ;
3535: LD_ADDR_EXP 15
3539: PUSH
3540: LD_INT 1
3542: ST_TO_ADDR
// b := FilterUnitsInArea ( ovsyenko_base , [ [ f_type , unit_building ] ] ) ;
3543: LD_ADDR_VAR 0 1
3547: PUSH
3548: LD_INT 14
3550: PPUSH
3551: LD_INT 21
3553: PUSH
3554: LD_INT 3
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PUSH
3561: EMPTY
3562: LIST
3563: PPUSH
3564: CALL_OW 70
3568: ST_TO_ADDR
// for i in b do
3569: LD_ADDR_VAR 0 2
3573: PUSH
3574: LD_VAR 0 1
3578: PUSH
3579: FOR_IN
3580: IFFALSE 3598
// begin SetSide ( i , ai ) ;
3582: LD_VAR 0 2
3586: PPUSH
3587: LD_EXP 6
3591: PPUSH
3592: CALL_OW 235
// end ;
3596: GO 3579
3598: POP
3599: POP
// end else
3600: GO 3603
// enable ;
3602: ENABLE
// end ;
3603: PPOPN 2
3605: END
// export function DOvsyenkoCaptured ; var who ; begin
3606: LD_INT 0
3608: PPUSH
3609: PPUSH
// DialogueOn ;
3610: CALL_OW 6
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 0 ) ;
3614: LD_ADDR_VAR 0 2
3618: PUSH
3619: LD_EXP 52
3623: PPUSH
3624: LD_EXP 1
3628: PPUSH
3629: LD_INT 1
3631: PPUSH
3632: LD_INT 0
3634: PPUSH
3635: LD_INT 0
3637: PPUSH
3638: CALL 10715 0 5
3642: ST_TO_ADDR
// if Say ( Glb , DOvsyenkoCaptured-Glb-1 ) then
3643: LD_EXP 48
3647: PPUSH
3648: LD_STRING DOvsyenkoCaptured-Glb-1
3650: PPUSH
3651: CALL_OW 88
3655: IFFALSE 3671
// Say ( Bur , DOvsyenkoCaptured-Bur-1 ) else
3657: LD_EXP 44
3661: PPUSH
3662: LD_STRING DOvsyenkoCaptured-Bur-1
3664: PPUSH
3665: CALL_OW 88
3669: GO 3683
// Say ( who , DOvsyenkoCaptured-RSol1-1 ) ;
3671: LD_VAR 0 2
3675: PPUSH
3676: LD_STRING DOvsyenkoCaptured-RSol1-1
3678: PPUSH
3679: CALL_OW 88
// DialogueOff ;
3683: CALL_OW 7
// end ;
3687: LD_VAR 0 1
3691: RET
// every 0 0$2 trigger FilterUnitsInArea ( to_north , [ [ f_side , you ] , [ f_nation , 3 ] , [ f_or , [ f_distxy , 67 , 37 , 10 ] , [ f_distxy , 83 , 38 , 10 ] ] ] ) do
3692: LD_INT 15
3694: PPUSH
3695: LD_INT 22
3697: PUSH
3698: LD_EXP 1
3702: PUSH
3703: EMPTY
3704: LIST
3705: LIST
3706: PUSH
3707: LD_INT 23
3709: PUSH
3710: LD_INT 3
3712: PUSH
3713: EMPTY
3714: LIST
3715: LIST
3716: PUSH
3717: LD_INT 2
3719: PUSH
3720: LD_INT 92
3722: PUSH
3723: LD_INT 67
3725: PUSH
3726: LD_INT 37
3728: PUSH
3729: LD_INT 10
3731: PUSH
3732: EMPTY
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: PUSH
3738: LD_INT 92
3740: PUSH
3741: LD_INT 83
3743: PUSH
3744: LD_INT 38
3746: PUSH
3747: LD_INT 10
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: LIST
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: PPUSH
3766: CALL_OW 70
3770: IFFALSE 3779
3772: GO 3774
3774: DISABLE
// begin DPartyAttacked ;
3775: CALL 3780 0 0
// end ;
3779: END
// export function DPartyAttacked ; var who , un , i , attc ; begin
3780: LD_INT 0
3782: PPUSH
3783: PPUSH
3784: PPUSH
3785: PPUSH
3786: PPUSH
// uc_side := 1 ;
3787: LD_ADDR_OWVAR 20
3791: PUSH
3792: LD_INT 1
3794: ST_TO_ADDR
// uc_nation := 1 ;
3795: LD_ADDR_OWVAR 21
3799: PUSH
3800: LD_INT 1
3802: ST_TO_ADDR
// attc := [ ] ;
3803: LD_ADDR_VAR 0 5
3807: PUSH
3808: EMPTY
3809: ST_TO_ADDR
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
3810: LD_ADDR_VAR 0 4
3814: PUSH
3815: DOUBLE
3816: LD_INT 1
3818: DEC
3819: ST_TO_ADDR
3820: LD_INT 2
3822: PUSH
3823: LD_INT 3
3825: PUSH
3826: LD_INT 3
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: LIST
3833: PUSH
3834: LD_OWVAR 67
3838: ARRAY
3839: PUSH
3840: FOR_TO
3841: IFFALSE 3926
// begin PrepareSoldier ( false , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3843: LD_INT 0
3845: PPUSH
3846: LD_INT 3
3848: PUSH
3849: LD_INT 4
3851: PUSH
3852: LD_INT 5
3854: PUSH
3855: EMPTY
3856: LIST
3857: LIST
3858: LIST
3859: PUSH
3860: LD_OWVAR 67
3864: ARRAY
3865: PPUSH
3866: CALL_OW 381
// un := CreateHuman ;
3870: LD_ADDR_VAR 0 3
3874: PUSH
3875: CALL_OW 44
3879: ST_TO_ADDR
// PlaceUnitXYR ( un , 84 , 35 , 3 , false ) ;
3880: LD_VAR 0 3
3884: PPUSH
3885: LD_INT 84
3887: PPUSH
3888: LD_INT 35
3890: PPUSH
3891: LD_INT 3
3893: PPUSH
3894: LD_INT 0
3896: PPUSH
3897: CALL_OW 50
// attc := Insert ( attc , 1 , un ) ;
3901: LD_ADDR_VAR 0 5
3905: PUSH
3906: LD_VAR 0 5
3910: PPUSH
3911: LD_INT 1
3913: PPUSH
3914: LD_VAR 0 3
3918: PPUSH
3919: CALL_OW 2
3923: ST_TO_ADDR
// end ;
3924: GO 3840
3926: POP
3927: POP
// ComAgressiveMove ( attc , 80 , 46 ) ;
3928: LD_VAR 0 5
3932: PPUSH
3933: LD_INT 80
3935: PPUSH
3936: LD_INT 46
3938: PPUSH
3939: CALL_OW 114
// wait ( 0 0$2 ) ;
3943: LD_INT 70
3945: PPUSH
3946: CALL_OW 67
// DialogueOn ;
3950: CALL_OW 6
// PlaceSeeing ( 75 , 37 , you , - 10 ) ;
3954: LD_INT 75
3956: PPUSH
3957: LD_INT 37
3959: PPUSH
3960: LD_EXP 1
3964: PPUSH
3965: LD_INT 10
3967: NEG
3968: PPUSH
3969: CALL_OW 330
// CenterNowOnXY ( 75 , 37 ) ;
3973: LD_INT 75
3975: PPUSH
3976: LD_INT 37
3978: PPUSH
3979: CALL_OW 86
// who := FilterAllUnits ( [ [ f_side , you ] , [ f_sex , sex_male ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Gleb ] ;
3983: LD_ADDR_VAR 0 2
3987: PUSH
3988: LD_INT 22
3990: PUSH
3991: LD_EXP 1
3995: PUSH
3996: EMPTY
3997: LIST
3998: LIST
3999: PUSH
4000: LD_INT 26
4002: PUSH
4003: LD_INT 1
4005: PUSH
4006: EMPTY
4007: LIST
4008: LIST
4009: PUSH
4010: LD_INT 23
4012: PUSH
4013: LD_INT 3
4015: PUSH
4016: EMPTY
4017: LIST
4018: LIST
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: LIST
4024: PPUSH
4025: CALL_OW 69
4029: PUSH
4030: LD_EXP 61
4034: PUSH
4035: LD_EXP 65
4039: PUSH
4040: EMPTY
4041: LIST
4042: LIST
4043: DIFF
4044: ST_TO_ADDR
// if who then
4045: LD_VAR 0 2
4049: IFFALSE 4067
// Say ( who [ 1 ] , DPartyAttacked-RSol1-1 ) ;
4051: LD_VAR 0 2
4055: PUSH
4056: LD_INT 1
4058: ARRAY
4059: PPUSH
4060: LD_STRING DPartyAttacked-RSol1-1
4062: PPUSH
4063: CALL_OW 88
// if IsOk ( Glb ) then
4067: LD_EXP 48
4071: PPUSH
4072: CALL_OW 302
4076: IFFALSE 4090
// Say ( Glb , DPartyAttacked-Glb-1 ) ;
4078: LD_EXP 48
4082: PPUSH
4083: LD_STRING DPartyAttacked-Glb-1
4085: PPUSH
4086: CALL_OW 88
// if who > 1 and GetSide ( RuDepot ) = 3 then
4090: LD_VAR 0 2
4094: PUSH
4095: LD_INT 1
4097: GREATER
4098: PUSH
4099: LD_INT 58
4101: PPUSH
4102: CALL_OW 255
4106: PUSH
4107: LD_INT 3
4109: EQUAL
4110: AND
4111: IFFALSE 4129
// Say ( who [ 2 ] , DPartyAttacked-RSol2-1 ) ;
4113: LD_VAR 0 2
4117: PUSH
4118: LD_INT 2
4120: ARRAY
4121: PPUSH
4122: LD_STRING DPartyAttacked-RSol2-1
4124: PPUSH
4125: CALL_OW 88
// DialogueOff ;
4129: CALL_OW 7
// RemoveSeeing ( 75 , 37 , you ) ;
4133: LD_INT 75
4135: PPUSH
4136: LD_INT 37
4138: PPUSH
4139: LD_EXP 1
4143: PPUSH
4144: CALL_OW 331
// end ;
4148: LD_VAR 0 1
4152: RET
// export kecali ; export otherkecali ; export VsevolodSaved ; every 0 0$3 trigger FilterAllUnits ( [ [ f_side , you ] , [ f_dist , Vsevolod , 10 ] ] ) do var mt , i ;
4153: LD_INT 22
4155: PUSH
4156: LD_EXP 1
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PUSH
4165: LD_INT 91
4167: PUSH
4168: LD_EXP 70
4172: PUSH
4173: LD_INT 10
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: LIST
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PPUSH
4185: CALL_OW 69
4189: IFFALSE 4633
4191: GO 4193
4193: DISABLE
4194: LD_INT 0
4196: PPUSH
4197: PPUSH
// begin if IsLive ( vsevolod ) and GetDistUnits ( Vsevolod , Burlak ) <= 10 and not kecali then
4198: LD_EXP 70
4202: PPUSH
4203: CALL_OW 300
4207: PUSH
4208: LD_EXP 70
4212: PPUSH
4213: LD_EXP 61
4217: PPUSH
4218: CALL_OW 296
4222: PUSH
4223: LD_INT 10
4225: LESSEQUAL
4226: AND
4227: PUSH
4228: LD_EXP 54
4232: NOT
4233: AND
4234: IFFALSE 4477
// begin mt := tick + 0 0$20 ;
4236: LD_ADDR_VAR 0 1
4240: PUSH
4241: LD_OWVAR 1
4245: PUSH
4246: LD_INT 700
4248: PLUS
4249: ST_TO_ADDR
// while IsInUnit ( Vsevolod ) = vseva1 and mt < tick do
4250: LD_EXP 70
4254: PPUSH
4255: CALL_OW 310
4259: PUSH
4260: LD_INT 190
4262: EQUAL
4263: PUSH
4264: LD_VAR 0 1
4268: PUSH
4269: LD_OWVAR 1
4273: LESS
4274: AND
4275: IFFALSE 4298
// begin ComExitBuilding ( UnitsInside ( vseva1 ) ) ;
4277: LD_INT 190
4279: PPUSH
4280: CALL_OW 313
4284: PPUSH
4285: CALL_OW 122
// wait ( 0 0$1 ) ;
4289: LD_INT 35
4291: PPUSH
4292: CALL_OW 67
// end ;
4296: GO 4250
// wait ( 0 0$2 ) ;
4298: LD_INT 70
4300: PPUSH
4301: CALL_OW 67
// ComStop ( FilterAllUnits ( [ [ f_side , you2 ] ] ) ) ;
4305: LD_INT 22
4307: PUSH
4308: LD_EXP 2
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: PUSH
4317: EMPTY
4318: LIST
4319: PPUSH
4320: CALL_OW 69
4324: PPUSH
4325: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , you2 ] ] ) , you ) ;
4329: LD_INT 22
4331: PUSH
4332: LD_EXP 2
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: PUSH
4341: EMPTY
4342: LIST
4343: PPUSH
4344: CALL_OW 69
4348: PPUSH
4349: LD_EXP 1
4353: PPUSH
4354: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , you ] ] ) do
4358: LD_ADDR_VAR 0 2
4362: PUSH
4363: LD_INT 22
4365: PUSH
4366: LD_EXP 1
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PUSH
4375: EMPTY
4376: LIST
4377: PPUSH
4378: CALL_OW 69
4382: PUSH
4383: FOR_IN
4384: IFFALSE 4402
// NormalAttack ( ai , i ) ;
4386: LD_EXP 6
4390: PPUSH
4391: LD_VAR 0 2
4395: PPUSH
4396: CALL_OW 472
4400: GO 4383
4402: POP
4403: POP
// DMeetVsev ;
4404: CALL 4708 0 0
// if OvsyenkoCaptured then
4408: LD_EXP 15
4412: IFFALSE 4420
// DMeetVsev2 else
4414: CALL 4750 0 0
4418: GO 4424
// DMeetVsev2a ;
4420: CALL 4806 0 0
// DMeetVsev3 ;
4424: CALL 4862 0 0
// if stevens_Killed then
4428: LD_EXP 76
4432: IFFALSE 4440
// DMeetVsev4 else
4434: CALL 4946 0 0
4438: GO 4444
// DMeetVsev5 ;
4440: CALL 4974 0 0
// DMeetVsev6 ;
4444: CALL 5030 0 0
// kecali := true ;
4448: LD_ADDR_EXP 54
4452: PUSH
4453: LD_INT 1
4455: ST_TO_ADDR
// VsevolodSaved := true ;
4456: LD_ADDR_EXP 56
4460: PUSH
4461: LD_INT 1
4463: ST_TO_ADDR
// SA_SaveVsevolod ;
4464: CALL 33161 0 0
// ChangeMissionObjectives ( MVsevolodOut ) ;
4468: LD_STRING MVsevolodOut
4470: PPUSH
4471: CALL_OW 337
// end else
4475: GO 4633
// begin if IsLive ( vsevolod ) and not otherkecali then
4477: LD_EXP 70
4481: PPUSH
4482: CALL_OW 300
4486: PUSH
4487: LD_EXP 55
4491: NOT
4492: AND
4493: IFFALSE 4632
// begin ComStop ( FilterAllUnits ( [ [ f_side , you2 ] ] ) ) ;
4495: LD_INT 22
4497: PUSH
4498: LD_EXP 2
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: PUSH
4507: EMPTY
4508: LIST
4509: PPUSH
4510: CALL_OW 69
4514: PPUSH
4515: CALL_OW 141
// SetSide ( FilterAllUnits ( [ [ f_side , you2 ] ] ) , you ) ;
4519: LD_INT 22
4521: PUSH
4522: LD_EXP 2
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: PUSH
4531: EMPTY
4532: LIST
4533: PPUSH
4534: CALL_OW 69
4538: PPUSH
4539: LD_EXP 1
4543: PPUSH
4544: CALL_OW 235
// for i in FilterAllUnits ( [ [ f_side , you ] ] ) do
4548: LD_ADDR_VAR 0 2
4552: PUSH
4553: LD_INT 22
4555: PUSH
4556: LD_EXP 1
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: PUSH
4565: EMPTY
4566: LIST
4567: PPUSH
4568: CALL_OW 69
4572: PUSH
4573: FOR_IN
4574: IFFALSE 4592
// NormalAttack ( ai , i ) ;
4576: LD_EXP 6
4580: PPUSH
4581: LD_VAR 0 2
4585: PPUSH
4586: CALL_OW 472
4590: GO 4573
4592: POP
4593: POP
// DOtherMeetVsev ;
4594: CALL 4636 0 0
// ComExitBuilding ( vseva1 ) ;
4598: LD_INT 190
4600: PPUSH
4601: CALL_OW 122
// VsevolodSaved := true ;
4605: LD_ADDR_EXP 56
4609: PUSH
4610: LD_INT 1
4612: ST_TO_ADDR
// SA_SaveVsevolod ;
4613: CALL 33161 0 0
// otherkecali := true ;
4617: LD_ADDR_EXP 55
4621: PUSH
4622: LD_INT 1
4624: ST_TO_ADDR
// ChangeMissionObjectives ( MVsevolodOut ) ;
4625: LD_STRING MVsevolodOut
4627: PPUSH
4628: CALL_OW 337
// end ; enable ;
4632: ENABLE
// end ; end ;
4633: PPOPN 2
4635: END
// export function DOtherMeetVsev ; var who ; begin
4636: LD_INT 0
4638: PPUSH
4639: PPUSH
// DialogueOn ;
4640: CALL_OW 6
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 0 ) ;
4644: LD_ADDR_VAR 0 2
4648: PUSH
4649: LD_EXP 52
4653: PPUSH
4654: LD_EXP 1
4658: PPUSH
4659: LD_INT 1
4661: PPUSH
4662: LD_INT 0
4664: PPUSH
4665: LD_INT 0
4667: PPUSH
4668: CALL 10715 0 5
4672: ST_TO_ADDR
// if Say ( Vse , DOtherMeetVsev-Vse-1 ) then
4673: LD_EXP 51
4677: PPUSH
4678: LD_STRING DOtherMeetVsev-Vse-1
4680: PPUSH
4681: CALL_OW 88
4685: IFFALSE 4699
// Say ( who , DOtherMeetVsev-RSol1-1 ) ;
4687: LD_VAR 0 2
4691: PPUSH
4692: LD_STRING DOtherMeetVsev-RSol1-1
4694: PPUSH
4695: CALL_OW 88
// DialogueOff ;
4699: CALL_OW 7
// end ;
4703: LD_VAR 0 1
4707: RET
// export function DMeetVsev ; begin
4708: LD_INT 0
4710: PPUSH
// DialogueOn ;
4711: CALL_OW 6
// if Say ( Vse , DMeetVsev-Vse-1 ) then
4715: LD_EXP 51
4719: PPUSH
4720: LD_STRING DMeetVsev-Vse-1
4722: PPUSH
4723: CALL_OW 88
4727: IFFALSE 4741
// Say ( Bur , DMeetVsev-Bur-1 ) ;
4729: LD_EXP 44
4733: PPUSH
4734: LD_STRING DMeetVsev-Bur-1
4736: PPUSH
4737: CALL_OW 88
// DialogueOff ;
4741: CALL_OW 7
// end ;
4745: LD_VAR 0 1
4749: RET
// export function DMeetVsev2 ; begin
4750: LD_INT 0
4752: PPUSH
// DialogueOn ;
4753: CALL_OW 6
// if Say ( Vse , DMeetVsev2-Vse-1 ) then
4757: LD_EXP 51
4761: PPUSH
4762: LD_STRING DMeetVsev2-Vse-1
4764: PPUSH
4765: CALL_OW 88
4769: IFFALSE 4797
// if Say ( Bur , DMeetVsev2-Bur-1 ) then
4771: LD_EXP 44
4775: PPUSH
4776: LD_STRING DMeetVsev2-Bur-1
4778: PPUSH
4779: CALL_OW 88
4783: IFFALSE 4797
// Say ( Vse , DMeetVsev2-Vse-2 ) ;
4785: LD_EXP 51
4789: PPUSH
4790: LD_STRING DMeetVsev2-Vse-2
4792: PPUSH
4793: CALL_OW 88
// DialogueOff ;
4797: CALL_OW 7
// end ;
4801: LD_VAR 0 1
4805: RET
// export function DMeetVsev2a ; begin
4806: LD_INT 0
4808: PPUSH
// DialogueOn ;
4809: CALL_OW 6
// if Say ( Vse , DMeetVsev2-Vse-2a ) then
4813: LD_EXP 51
4817: PPUSH
4818: LD_STRING DMeetVsev2-Vse-2a
4820: PPUSH
4821: CALL_OW 88
4825: IFFALSE 4853
// if Say ( Bur , DMeetVsev2-Bur-2 ) then
4827: LD_EXP 44
4831: PPUSH
4832: LD_STRING DMeetVsev2-Bur-2
4834: PPUSH
4835: CALL_OW 88
4839: IFFALSE 4853
// Say ( Vse , DMeetVsev2-Vse-3 ) ;
4841: LD_EXP 51
4845: PPUSH
4846: LD_STRING DMeetVsev2-Vse-3
4848: PPUSH
4849: CALL_OW 88
// DialogueOff ;
4853: CALL_OW 7
// end ;
4857: LD_VAR 0 1
4861: RET
// export function DMeetVsev3 ; begin
4862: LD_INT 0
4864: PPUSH
// DialogueOn ;
4865: CALL_OW 6
// if Say ( Bur , DMeetVsev3-Bur-1 ) then
4869: LD_EXP 44
4873: PPUSH
4874: LD_STRING DMeetVsev3-Bur-1
4876: PPUSH
4877: CALL_OW 88
4881: IFFALSE 4937
// if Say ( Vse , DMeetVsev3-Vse-1 ) then
4883: LD_EXP 51
4887: PPUSH
4888: LD_STRING DMeetVsev3-Vse-1
4890: PPUSH
4891: CALL_OW 88
4895: IFFALSE 4937
// if Say ( Bur , DMeetVsev3-Bur-2 ) then
4897: LD_EXP 44
4901: PPUSH
4902: LD_STRING DMeetVsev3-Bur-2
4904: PPUSH
4905: CALL_OW 88
4909: IFFALSE 4937
// if Say ( Vse , DMeetVsev3-Vse-2 ) then
4911: LD_EXP 51
4915: PPUSH
4916: LD_STRING DMeetVsev3-Vse-2
4918: PPUSH
4919: CALL_OW 88
4923: IFFALSE 4937
// Say ( Bur , DMeetVsev3-Bur-3 ) ;
4925: LD_EXP 44
4929: PPUSH
4930: LD_STRING DMeetVsev3-Bur-3
4932: PPUSH
4933: CALL_OW 88
// DialogueOff ;
4937: CALL_OW 7
// end ;
4941: LD_VAR 0 1
4945: RET
// export function DMeetVsev4 ; begin
4946: LD_INT 0
4948: PPUSH
// DialogueOn ;
4949: CALL_OW 6
// Say ( Bur , DMeetVsev4-Bur-1 ) ;
4953: LD_EXP 44
4957: PPUSH
4958: LD_STRING DMeetVsev4-Bur-1
4960: PPUSH
4961: CALL_OW 88
// DialogueOff ;
4965: CALL_OW 7
// end ;
4969: LD_VAR 0 1
4973: RET
// export function DMeetVsev5 ; begin
4974: LD_INT 0
4976: PPUSH
// DialogueOn ;
4977: CALL_OW 6
// if Say ( Bur , DMeetVsev5-Bur-1 ) then
4981: LD_EXP 44
4985: PPUSH
4986: LD_STRING DMeetVsev5-Bur-1
4988: PPUSH
4989: CALL_OW 88
4993: IFFALSE 5021
// if Say ( Vse , DMeetVsev5-Vse-1 ) then
4995: LD_EXP 51
4999: PPUSH
5000: LD_STRING DMeetVsev5-Vse-1
5002: PPUSH
5003: CALL_OW 88
5007: IFFALSE 5021
// Say ( Bur , DMeetVsev5-Bur-2 ) ;
5009: LD_EXP 44
5013: PPUSH
5014: LD_STRING DMeetVsev5-Bur-2
5016: PPUSH
5017: CALL_OW 88
// DialogueOff ;
5021: CALL_OW 7
// end ;
5025: LD_VAR 0 1
5029: RET
// export function DMeetVsev6 ; begin
5030: LD_INT 0
5032: PPUSH
// DialogueOn ;
5033: CALL_OW 6
// if Say ( Vse , DMeetVsev6-Vse-1 ) then
5037: LD_EXP 51
5041: PPUSH
5042: LD_STRING DMeetVsev6-Vse-1
5044: PPUSH
5045: CALL_OW 88
5049: IFFALSE 5063
// Say ( Bur , DMeetVsev6-Bur-1 ) ;
5051: LD_EXP 44
5055: PPUSH
5056: LD_STRING DMeetVsev6-Bur-1
5058: PPUSH
5059: CALL_OW 88
// DialogueOff ;
5063: CALL_OW 7
// end ;
5067: LD_VAR 0 1
5071: RET
// every 0 0$5 trigger kecali and FilterUnitsInArea ( north_base , [ [ f_side , you ] ] ) do
5072: LD_EXP 54
5076: PUSH
5077: LD_INT 22
5079: PPUSH
5080: LD_INT 22
5082: PUSH
5083: LD_EXP 1
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: PUSH
5092: EMPTY
5093: LIST
5094: PPUSH
5095: CALL_OW 70
5099: AND
5100: IFFALSE 5326
5102: GO 5104
5104: DISABLE
// begin wait ( 0 0$10 ) ;
5105: LD_INT 350
5107: PPUSH
5108: CALL_OW 67
// nakladaky ;
5112: CALL 9869 0 0
// ComMoveXY ( [ accar1 , accar2 ] , 53 , 8 ) ;
5116: LD_EXP 80
5120: PUSH
5121: LD_EXP 81
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: PPUSH
5130: LD_INT 53
5132: PPUSH
5133: LD_INT 8
5135: PPUSH
5136: CALL_OW 111
// DTruck ;
5140: CALL 5327 0 0
// AddComMoveXY ( [ accar1 , accar2 ] , 45 , 14 ) ;
5144: LD_EXP 80
5148: PUSH
5149: LD_EXP 81
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: PPUSH
5158: LD_INT 45
5160: PPUSH
5161: LD_INT 14
5163: PPUSH
5164: CALL_OW 171
// AddComMoveXY ( [ accar1 , accar2 ] , 33 , 14 ) ;
5168: LD_EXP 80
5172: PUSH
5173: LD_EXP 81
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PPUSH
5182: LD_INT 33
5184: PPUSH
5185: LD_INT 14
5187: PPUSH
5188: CALL_OW 171
// AddComMoveXY ( [ accar1 , accar2 ] , 27 , 32 ) ;
5192: LD_EXP 80
5196: PUSH
5197: LD_EXP 81
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PPUSH
5206: LD_INT 27
5208: PPUSH
5209: LD_INT 32
5211: PPUSH
5212: CALL_OW 171
// AddComUnload ( [ accar1 , accar2 ] ) ;
5216: LD_EXP 80
5220: PUSH
5221: LD_EXP 81
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: PPUSH
5230: CALL_OW 219
// AddComMoveXY ( [ accar1 , accar2 ] , 42 , 79 ) ;
5234: LD_EXP 80
5238: PUSH
5239: LD_EXP 81
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PPUSH
5248: LD_INT 42
5250: PPUSH
5251: LD_INT 79
5253: PPUSH
5254: CALL_OW 171
// AddComExitVehicle ( [ acman1 , acman2 ] ) ;
5258: LD_EXP 82
5262: PUSH
5263: LD_EXP 83
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: PPUSH
5272: CALL_OW 181
// sol := sol union [ acman1 , acman2 ] ;
5276: LD_ADDR_EXP 121
5280: PUSH
5281: LD_EXP 121
5285: PUSH
5286: LD_EXP 82
5290: PUSH
5291: LD_EXP 83
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: UNION
5300: ST_TO_ADDR
// a3 := a3 union [ acman1 , acman2 ] ;
5301: LD_ADDR_EXP 135
5305: PUSH
5306: LD_EXP 135
5310: PUSH
5311: LD_EXP 82
5315: PUSH
5316: LD_EXP 83
5320: PUSH
5321: EMPTY
5322: LIST
5323: LIST
5324: UNION
5325: ST_TO_ADDR
// end ;
5326: END
// export function DTruck ; var who ; begin
5327: LD_INT 0
5329: PPUSH
5330: PPUSH
// who := acman1 ;
5331: LD_ADDR_VAR 0 2
5335: PUSH
5336: LD_EXP 82
5340: ST_TO_ADDR
// DialogueOn ;
5341: CALL_OW 6
// if Say ( who , DTruck-Sol1-1 ) then
5345: LD_VAR 0 2
5349: PPUSH
5350: LD_STRING DTruck-Sol1-1
5352: PPUSH
5353: CALL_OW 88
5357: IFFALSE 5371
// Say ( Bur , DTruck-Bur-1 ) ;
5359: LD_EXP 44
5363: PPUSH
5364: LD_STRING DTruck-Bur-1
5366: PPUSH
5367: CALL_OW 88
// DialogueOff ;
5371: CALL_OW 7
// end ;
5375: LD_VAR 0 1
5379: RET
// export function DDieVsev1 ; begin
5380: LD_INT 0
5382: PPUSH
// SetLives ( vsevd1 , 0 ) ;
5383: LD_INT 182
5385: PPUSH
5386: LD_INT 0
5388: PPUSH
5389: CALL_OW 234
// ChangeMissionObjectives ( MVsevolodDel ) ;
5393: LD_STRING MVsevolodDel
5395: PPUSH
5396: CALL_OW 337
// DialogueOn ;
5400: CALL_OW 6
// Say ( Vsevolod2 , DDieVsev1-Vse-1 ) ;
5404: LD_EXP 71
5408: PPUSH
5409: LD_STRING DDieVsev1-Vse-1
5411: PPUSH
5412: CALL_OW 88
// DialogueOff ;
5416: CALL_OW 7
// end ;
5420: LD_VAR 0 1
5424: RET
// export function DDieVsev2 ; begin
5425: LD_INT 0
5427: PPUSH
// DialogueOn ;
5428: CALL_OW 6
// Say ( Vsevolod2 , DDieVsev2-Vse-1 ) ;
5432: LD_EXP 71
5436: PPUSH
5437: LD_STRING DDieVsev2-Vse-1
5439: PPUSH
5440: CALL_OW 88
// DialogueOff ;
5444: CALL_OW 7
// end ;
5448: LD_VAR 0 1
5452: RET
// export function DStasis ; var who ; begin
5453: LD_INT 0
5455: PPUSH
5456: PPUSH
// who := WhoSayAny ( donttalk , you , sex_male , 0 , 0 ) ;
5457: LD_ADDR_VAR 0 2
5461: PUSH
5462: LD_EXP 52
5466: PPUSH
5467: LD_EXP 1
5471: PPUSH
5472: LD_INT 1
5474: PPUSH
5475: LD_INT 0
5477: PPUSH
5478: LD_INT 0
5480: PPUSH
5481: CALL 10715 0 5
5485: ST_TO_ADDR
// DialogueOn ;
5486: CALL_OW 6
// if not Say ( Pty , DStasis-Pty-1 ) then
5490: LD_EXP 47
5494: PPUSH
5495: LD_STRING DStasis-Pty-1
5497: PPUSH
5498: CALL_OW 88
5502: NOT
5503: IFFALSE 5532
// if not Say ( Dol , DStasis-Dol-1 ) then
5505: LD_EXP 50
5509: PPUSH
5510: LD_STRING DStasis-Dol-1
5512: PPUSH
5513: CALL_OW 88
5517: NOT
5518: IFFALSE 5532
// Say ( who , DStasis-RSol1-1 ) ;
5520: LD_VAR 0 2
5524: PPUSH
5525: LD_STRING DStasis-RSol1-1
5527: PPUSH
5528: CALL_OW 88
// Say ( Bur , DStasis-Bur-1 ) ;
5532: LD_EXP 44
5536: PPUSH
5537: LD_STRING DStasis-Bur-1
5539: PPUSH
5540: CALL_OW 88
// if not Say ( Pty , DStasis-Pty-2 ) then
5544: LD_EXP 47
5548: PPUSH
5549: LD_STRING DStasis-Pty-2
5551: PPUSH
5552: CALL_OW 88
5556: NOT
5557: IFFALSE 5586
// if not Say ( Dol , DStasis-Dol-2 ) then
5559: LD_EXP 50
5563: PPUSH
5564: LD_STRING DStasis-Dol-2
5566: PPUSH
5567: CALL_OW 88
5571: NOT
5572: IFFALSE 5586
// Say ( who , DStasis-RSol1-2 ) ;
5574: LD_VAR 0 2
5578: PPUSH
5579: LD_STRING DStasis-RSol1-2
5581: PPUSH
5582: CALL_OW 88
// Say ( Bur , DStasis-Bur-2 ) ;
5586: LD_EXP 44
5590: PPUSH
5591: LD_STRING DStasis-Bur-2
5593: PPUSH
5594: CALL_OW 88
// DialogueOff ;
5598: CALL_OW 7
// MyHint ( Stasis ) ;
5602: LD_STRING Stasis
5604: PPUSH
5605: CALL 12029 0 1
// end ;
5609: LD_VAR 0 1
5613: RET
// every 0 0$2 trigger GetTech ( tech_TauField , you ) = state_researched and GetTech ( tech_SibDet , you ) = state_researched and GetTech ( tech_SibPow , you ) = state_researched and GetTech ( tech_SibEng , you ) = state_researched do
5614: LD_INT 30
5616: PPUSH
5617: LD_EXP 1
5621: PPUSH
5622: CALL_OW 321
5626: PUSH
5627: LD_INT 2
5629: EQUAL
5630: PUSH
5631: LD_INT 20
5633: PPUSH
5634: LD_EXP 1
5638: PPUSH
5639: CALL_OW 321
5643: PUSH
5644: LD_INT 2
5646: EQUAL
5647: AND
5648: PUSH
5649: LD_INT 21
5651: PPUSH
5652: LD_EXP 1
5656: PPUSH
5657: CALL_OW 321
5661: PUSH
5662: LD_INT 2
5664: EQUAL
5665: AND
5666: PUSH
5667: LD_INT 22
5669: PPUSH
5670: LD_EXP 1
5674: PPUSH
5675: CALL_OW 321
5679: PUSH
5680: LD_INT 2
5682: EQUAL
5683: AND
5684: IFFALSE 5696
5686: GO 5688
5688: DISABLE
// begin ChangeMissionObjectives ( MOutResearch ) ;
5689: LD_STRING MOutResearch
5691: PPUSH
5692: CALL_OW 337
// end ;
5696: END
// export exit_enabled ; every 0 0$2 trigger GetTech ( tech_TauField , you ) = state_researched and GetTech ( tech_SibDet , you ) = state_researched and GetTech ( tech_SibPow , you ) = state_researched and GetTech ( tech_SibEng , you ) = state_researched and mine_obj_completed do var plidi , lidi , min , max , i , go_pryc , go_pryc_tmp , zustavaj , utek , povol_povol , mt ;
5697: LD_INT 30
5699: PPUSH
5700: LD_EXP 1
5704: PPUSH
5705: CALL_OW 321
5709: PUSH
5710: LD_INT 2
5712: EQUAL
5713: PUSH
5714: LD_INT 20
5716: PPUSH
5717: LD_EXP 1
5721: PPUSH
5722: CALL_OW 321
5726: PUSH
5727: LD_INT 2
5729: EQUAL
5730: AND
5731: PUSH
5732: LD_INT 21
5734: PPUSH
5735: LD_EXP 1
5739: PPUSH
5740: CALL_OW 321
5744: PUSH
5745: LD_INT 2
5747: EQUAL
5748: AND
5749: PUSH
5750: LD_INT 22
5752: PPUSH
5753: LD_EXP 1
5757: PPUSH
5758: CALL_OW 321
5762: PUSH
5763: LD_INT 2
5765: EQUAL
5766: AND
5767: PUSH
5768: LD_EXP 30
5772: AND
5773: IFFALSE 6658
5775: GO 5777
5777: DISABLE
5778: LD_INT 0
5780: PPUSH
5781: PPUSH
5782: PPUSH
5783: PPUSH
5784: PPUSH
5785: PPUSH
5786: PPUSH
5787: PPUSH
5788: PPUSH
5789: PPUSH
5790: PPUSH
// begin if IsLive ( Vsevolod ) and GetSide ( Vsevolod ) = you2 then
5791: LD_EXP 70
5795: PPUSH
5796: CALL_OW 300
5800: PUSH
5801: LD_EXP 70
5805: PPUSH
5806: CALL_OW 255
5810: PUSH
5811: LD_EXP 2
5815: EQUAL
5816: AND
5817: IFFALSE 6093
// begin kolik_ma_vsevolod_casu := 0 ;
5819: LD_ADDR_EXP 33
5823: PUSH
5824: LD_INT 0
5826: ST_TO_ADDR
// utek := [ Vsevolod ] union vsevolod_uderna_group ;
5827: LD_ADDR_VAR 0 9
5831: PUSH
5832: LD_EXP 70
5836: PUSH
5837: EMPTY
5838: LIST
5839: PUSH
5840: LD_EXP 12
5844: UNION
5845: ST_TO_ADDR
// utek := UnitFilter ( utek , [ [ f_placed ] , [ f_side , you2 ] ] ) ;
5846: LD_ADDR_VAR 0 9
5850: PUSH
5851: LD_VAR 0 9
5855: PPUSH
5856: LD_INT 52
5858: PUSH
5859: EMPTY
5860: LIST
5861: PUSH
5862: LD_INT 22
5864: PUSH
5865: LD_EXP 2
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: PPUSH
5878: CALL_OW 72
5882: ST_TO_ADDR
// mt := tick + 0 0$20 ;
5883: LD_ADDR_VAR 0 11
5887: PUSH
5888: LD_OWVAR 1
5892: PUSH
5893: LD_INT 700
5895: PLUS
5896: ST_TO_ADDR
// while utek and tick < mt do
5897: LD_VAR 0 9
5901: PUSH
5902: LD_OWVAR 1
5906: PUSH
5907: LD_VAR 0 11
5911: LESS
5912: AND
5913: IFFALSE 6052
// begin for i in utek do
5915: LD_ADDR_VAR 0 5
5919: PUSH
5920: LD_VAR 0 9
5924: PUSH
5925: FOR_IN
5926: IFFALSE 5981
// if IsInArea ( i , vsevolod_in ) or not IsPlaced ( i ) then
5928: LD_VAR 0 5
5932: PPUSH
5933: LD_INT 16
5935: PPUSH
5936: CALL_OW 308
5940: PUSH
5941: LD_VAR 0 5
5945: PPUSH
5946: CALL_OW 305
5950: NOT
5951: OR
5952: IFFALSE 5979
// begin RemoveUnit ( i ) ;
5954: LD_VAR 0 5
5958: PPUSH
5959: CALL_OW 64
// utek := utek diff i ;
5963: LD_ADDR_VAR 0 9
5967: PUSH
5968: LD_VAR 0 9
5972: PUSH
5973: LD_VAR 0 5
5977: DIFF
5978: ST_TO_ADDR
// end ;
5979: GO 5925
5981: POP
5982: POP
// utek := UnitFilter ( utek , [ [ f_placed ] ] ) ;
5983: LD_ADDR_VAR 0 9
5987: PUSH
5988: LD_VAR 0 9
5992: PPUSH
5993: LD_INT 52
5995: PUSH
5996: EMPTY
5997: LIST
5998: PUSH
5999: EMPTY
6000: LIST
6001: PPUSH
6002: CALL_OW 72
6006: ST_TO_ADDR
// wait ( 0 0$1 ) ;
6007: LD_INT 35
6009: PPUSH
6010: CALL_OW 67
// ComExitVehicle ( utek ) ;
6014: LD_VAR 0 9
6018: PPUSH
6019: CALL_OW 121
// AddComMoveToArea ( utek , vsevolod_in ) ;
6023: LD_VAR 0 9
6027: PPUSH
6028: LD_INT 16
6030: PPUSH
6031: CALL_OW 173
// AddComMoveXY ( utek , 53 , 1 ) ;
6035: LD_VAR 0 9
6039: PPUSH
6040: LD_INT 53
6042: PPUSH
6043: LD_INT 1
6045: PPUSH
6046: CALL_OW 171
// end ;
6050: GO 5897
// SetLives ( Vsevolod , 0 ) ;
6052: LD_EXP 70
6056: PPUSH
6057: LD_INT 0
6059: PPUSH
6060: CALL_OW 234
// for i in vsevolod_uderna_group do
6064: LD_ADDR_VAR 0 5
6068: PUSH
6069: LD_EXP 12
6073: PUSH
6074: FOR_IN
6075: IFFALSE 6091
// SetLives ( i , 0 ) ;
6077: LD_VAR 0 5
6081: PPUSH
6082: LD_INT 0
6084: PPUSH
6085: CALL_OW 234
6089: GO 6074
6091: POP
6092: POP
// end ; wait ( 0 0$15 ) ;
6093: LD_INT 525
6095: PPUSH
6096: CALL_OW 67
// DNextMiss1 ;
6100: CALL 6682 0 0
// if IsLive ( Vsevolod ) and kecali then
6104: LD_EXP 70
6108: PPUSH
6109: CALL_OW 300
6113: PUSH
6114: LD_EXP 54
6118: AND
6119: IFFALSE 6127
// DNextMiss3 else
6121: CALL 6738 0 0
6125: GO 6135
// begin DNextMiss2 ;
6127: CALL 6710 0 0
// VyhraResearch ;
6131: CALL 301 0 0
// end ; DNextMiss4 ;
6135: CALL 6778 0 0
// ChangeMissionObjectives ( MCars ) ;
6139: LD_STRING MCars
6141: PPUSH
6142: CALL_OW 337
// SetAreaMapShow ( ru_exit , 1 ) ;
6146: LD_INT 21
6148: PPUSH
6149: LD_INT 1
6151: PPUSH
6152: CALL_OW 424
// exit_enabled := true ;
6156: LD_ADDR_EXP 57
6160: PUSH
6161: LD_INT 1
6163: ST_TO_ADDR
// convoy_can_go := true ;
6164: LD_ADDR_EXP 58
6168: PUSH
6169: LD_INT 1
6171: ST_TO_ADDR
// if IsLive ( Vsevolod ) then
6172: LD_EXP 70
6176: PPUSH
6177: CALL_OW 300
6181: IFFALSE 6658
// begin lidi := FilterAllUnits ( [ [ f_side , you ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Vsevolod , Burlak ] ;
6183: LD_ADDR_VAR 0 2
6187: PUSH
6188: LD_INT 22
6190: PUSH
6191: LD_EXP 1
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: LD_INT 21
6202: PUSH
6203: LD_INT 1
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: LD_INT 23
6212: PUSH
6213: LD_INT 3
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: LIST
6224: PPUSH
6225: CALL_OW 69
6229: PUSH
6230: LD_EXP 70
6234: PUSH
6235: LD_EXP 61
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: DIFF
6244: ST_TO_ADDR
// max := lidi div 2 + lidi mod 2 ;
6245: LD_ADDR_VAR 0 4
6249: PUSH
6250: LD_VAR 0 2
6254: PUSH
6255: LD_INT 2
6257: DIV
6258: PUSH
6259: LD_VAR 0 2
6263: PUSH
6264: LD_INT 2
6266: MOD
6267: PLUS
6268: ST_TO_ADDR
// min := 0 ;
6269: LD_ADDR_VAR 0 3
6273: PUSH
6274: LD_INT 0
6276: ST_TO_ADDR
// povol_povol := [ class_soldier , class_engineer , class_mechanic , class_scientistic ] ;
6277: LD_ADDR_VAR 0 10
6281: PUSH
6282: LD_INT 1
6284: PUSH
6285: LD_INT 2
6287: PUSH
6288: LD_INT 3
6290: PUSH
6291: LD_INT 4
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: ST_TO_ADDR
// if max > 1 then
6300: LD_VAR 0 4
6304: PUSH
6305: LD_INT 1
6307: GREATER
6308: IFFALSE 6428
// begin zustavaj := [ Burlak ] ^ CharacterSelection ( 1 , min , max , [ Burlak , sel_changeable , sel_change_class ] ^ ( lidi diff vsevolod_uderna_group ) ^ [ sel_not_hired ] ^ vsevolod_uderna_group ^ [ sel_not_changeable , Vsevolod ] , povol_povol ) ;
6310: LD_ADDR_VAR 0 8
6314: PUSH
6315: LD_EXP 61
6319: PUSH
6320: EMPTY
6321: LIST
6322: PUSH
6323: LD_STRING 1
6325: PPUSH
6326: LD_VAR 0 3
6330: PPUSH
6331: LD_VAR 0 4
6335: PPUSH
6336: LD_EXP 61
6340: PUSH
6341: LD_INT -3
6343: PUSH
6344: LD_INT -5
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: LIST
6351: PUSH
6352: LD_VAR 0 2
6356: PUSH
6357: LD_EXP 12
6361: DIFF
6362: ADD
6363: PUSH
6364: LD_INT -2
6366: PUSH
6367: EMPTY
6368: LIST
6369: ADD
6370: PUSH
6371: LD_EXP 12
6375: ADD
6376: PUSH
6377: LD_INT -4
6379: PUSH
6380: LD_EXP 70
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: ADD
6389: PPUSH
6390: LD_VAR 0 10
6394: PPUSH
6395: CALL_OW 42
6399: ADD
6400: ST_TO_ADDR
// go_pryc := [ Vsevolod ] ^ ( lidi diff zustavaj ) ;
6401: LD_ADDR_VAR 0 6
6405: PUSH
6406: LD_EXP 70
6410: PUSH
6411: EMPTY
6412: LIST
6413: PUSH
6414: LD_VAR 0 2
6418: PUSH
6419: LD_VAR 0 8
6423: DIFF
6424: ADD
6425: ST_TO_ADDR
// end else
6426: GO 6460
// begin zustavaj := [ Burlak ] ;
6428: LD_ADDR_VAR 0 8
6432: PUSH
6433: LD_EXP 61
6437: PUSH
6438: EMPTY
6439: LIST
6440: ST_TO_ADDR
// go_pryc := [ Vsevolod ] ^ lidi ;
6441: LD_ADDR_VAR 0 6
6445: PUSH
6446: LD_EXP 70
6450: PUSH
6451: EMPTY
6452: LIST
6453: PUSH
6454: LD_VAR 0 2
6458: ADD
6459: ST_TO_ADDR
// end ; SetSide ( go_pryc , you2 ) ;
6460: LD_VAR 0 6
6464: PPUSH
6465: LD_EXP 2
6469: PPUSH
6470: CALL_OW 235
// for i in go_pryc do
6474: LD_ADDR_VAR 0 5
6478: PUSH
6479: LD_VAR 0 6
6483: PUSH
6484: FOR_IN
6485: IFFALSE 6503
// DoNotAttack ( ai , i ) ;
6487: LD_EXP 6
6491: PPUSH
6492: LD_VAR 0 5
6496: PPUSH
6497: CALL_OW 471
6501: GO 6484
6503: POP
6504: POP
// sli_pryc := [ ] ;
6505: LD_ADDR_EXP 77
6509: PUSH
6510: EMPTY
6511: ST_TO_ADDR
// go_pryc_tmp := go_pryc ;
6512: LD_ADDR_VAR 0 7
6516: PUSH
6517: LD_VAR 0 6
6521: ST_TO_ADDR
// while go_pryc_tmp do
6522: LD_VAR 0 7
6526: IFFALSE 6651
// begin for i in go_pryc_tmp do
6528: LD_ADDR_VAR 0 5
6532: PUSH
6533: LD_VAR 0 7
6537: PUSH
6538: FOR_IN
6539: IFFALSE 6604
// if IsInArea ( i , exit_a ) then
6541: LD_VAR 0 5
6545: PPUSH
6546: LD_INT 20
6548: PPUSH
6549: CALL_OW 308
6553: IFFALSE 6602
// begin RemoveUnit ( i ) ;
6555: LD_VAR 0 5
6559: PPUSH
6560: CALL_OW 64
// go_pryc_tmp := go_pryc_tmp diff [ i ] ;
6564: LD_ADDR_VAR 0 7
6568: PUSH
6569: LD_VAR 0 7
6573: PUSH
6574: LD_VAR 0 5
6578: PUSH
6579: EMPTY
6580: LIST
6581: DIFF
6582: ST_TO_ADDR
// sli_pryc := sli_pryc union [ i ] ;
6583: LD_ADDR_EXP 77
6587: PUSH
6588: LD_EXP 77
6592: PUSH
6593: LD_VAR 0 5
6597: PUSH
6598: EMPTY
6599: LIST
6600: UNION
6601: ST_TO_ADDR
// end ;
6602: GO 6538
6604: POP
6605: POP
// wait ( 0 0$1 ) ;
6606: LD_INT 35
6608: PPUSH
6609: CALL_OW 67
// ComExitVehicle ( go_pryc_tmp ) ;
6613: LD_VAR 0 7
6617: PPUSH
6618: CALL_OW 121
// AddComMoveToArea ( go_pryc_tmp , exit_a ) ;
6622: LD_VAR 0 7
6626: PPUSH
6627: LD_INT 20
6629: PPUSH
6630: CALL_OW 173
// AddComMoveXY ( go_pryc_tmp , 104 , 71 ) ;
6634: LD_VAR 0 7
6638: PPUSH
6639: LD_INT 104
6641: PPUSH
6642: LD_INT 71
6644: PPUSH
6645: CALL_OW 171
// end ;
6649: GO 6522
// wait ( 0 0$3 ) ;
6651: LD_INT 105
6653: PPUSH
6654: CALL_OW 67
// end ; end ;
6658: PPOPN 11
6660: END
// export convoy_can_go ; every 0 0$10 trigger convoy_can_go do
6661: LD_EXP 58
6665: IFFALSE 6681
6667: GO 6669
6669: DISABLE
// begin wait ( 0 0$25 ) ;
6670: LD_INT 875
6672: PPUSH
6673: CALL_OW 67
// convoy ;
6677: CALL 10087 0 0
// end ;
6681: END
// export function DNextMiss1 ; begin
6682: LD_INT 0
6684: PPUSH
// DialogueOn ;
6685: CALL_OW 6
// SayRadio ( Pla , DNextMiss1-Pla-1 ) ;
6689: LD_EXP 45
6693: PPUSH
6694: LD_STRING DNextMiss1-Pla-1
6696: PPUSH
6697: CALL_OW 94
// DialogueOff ;
6701: CALL_OW 7
// end ;
6705: LD_VAR 0 1
6709: RET
// export function DNextMiss2 ; begin
6710: LD_INT 0
6712: PPUSH
// DialogueOn ;
6713: CALL_OW 6
// SayRadio ( Pla , DNextMiss2-Pla-1 ) ;
6717: LD_EXP 45
6721: PPUSH
6722: LD_STRING DNextMiss2-Pla-1
6724: PPUSH
6725: CALL_OW 94
// DialogueOff ;
6729: CALL_OW 7
// end ;
6733: LD_VAR 0 1
6737: RET
// export function DNextMiss3 ; begin
6738: LD_INT 0
6740: PPUSH
// DialogueOn ;
6741: CALL_OW 6
// SayRadio ( Pla , DNextMiss3-Pla-1 ) ;
6745: LD_EXP 45
6749: PPUSH
6750: LD_STRING DNextMiss3-Pla-1
6752: PPUSH
6753: CALL_OW 94
// SayRadio ( Pla , DNextMiss3-Pla-1a ) ;
6757: LD_EXP 45
6761: PPUSH
6762: LD_STRING DNextMiss3-Pla-1a
6764: PPUSH
6765: CALL_OW 94
// DialogueOff ;
6769: CALL_OW 7
// end ;
6773: LD_VAR 0 1
6777: RET
// export function DNextMiss4 ; begin
6778: LD_INT 0
6780: PPUSH
// DialogueOn ;
6781: CALL_OW 6
// Say ( Bur , DNextMiss4-Bur-1 ) ;
6785: LD_EXP 44
6789: PPUSH
6790: LD_STRING DNextMiss4-Bur-1
6792: PPUSH
6793: CALL_OW 88
// DialogueOff ;
6797: CALL_OW 7
// end ;
6801: LD_VAR 0 1
6805: RET
// var was_end_query ; every 0 0$5 trigger exit_enabled do var a , qr ;
6806: LD_EXP 57
6810: IFFALSE 6928
6812: GO 6814
6814: DISABLE
6815: LD_INT 0
6817: PPUSH
6818: PPUSH
// begin a := FilterHumansInArea ( ru_exit , [ [ f_side , you ] ] ) ;
6819: LD_ADDR_VAR 0 1
6823: PUSH
6824: LD_INT 21
6826: PPUSH
6827: LD_INT 22
6829: PUSH
6830: LD_EXP 1
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: EMPTY
6840: LIST
6841: PPUSH
6842: CALL 11006 0 2
6846: ST_TO_ADDR
// if ( Burlak in a ) then
6847: LD_EXP 61
6851: PUSH
6852: LD_VAR 0 1
6856: IN
6857: IFFALSE 6911
// begin end_the_mission_allowed := true ;
6859: LD_ADDR_OWVAR 57
6863: PUSH
6864: LD_INT 1
6866: ST_TO_ADDR
// if not was_end_query then
6867: LD_LOC 2
6871: NOT
6872: IFFALSE 6909
// begin qr := Query ( QEndGame ) ;
6874: LD_ADDR_VAR 0 2
6878: PUSH
6879: LD_STRING QEndGame
6881: PPUSH
6882: CALL_OW 97
6886: ST_TO_ADDR
// was_end_query := true ;
6887: LD_ADDR_LOC 2
6891: PUSH
6892: LD_INT 1
6894: ST_TO_ADDR
// if qr = 1 then
6895: LD_VAR 0 2
6899: PUSH
6900: LD_INT 1
6902: EQUAL
6903: IFFALSE 6909
// VyhraExit ;
6905: CALL 374 0 0
// end ; end else
6909: GO 6927
// begin end_the_mission_allowed := false ;
6911: LD_ADDR_OWVAR 57
6915: PUSH
6916: LD_INT 0
6918: ST_TO_ADDR
// was_end_query := false ;
6919: LD_ADDR_LOC 2
6923: PUSH
6924: LD_INT 0
6926: ST_TO_ADDR
// end ; enable ;
6927: ENABLE
// end ;
6928: PPOPN 2
6930: END
// export gleb_lives , utok_na_gleba ; every 0 0$1 trigger gleb and gleb_lives <> GetLives ( gleb ) do var i ;
6931: LD_EXP 65
6935: PUSH
6936: LD_EXP 59
6940: PUSH
6941: LD_EXP 65
6945: PPUSH
6946: CALL_OW 256
6950: NONEQUAL
6951: AND
6952: IFFALSE 7018
6954: GO 6956
6956: DISABLE
6957: LD_INT 0
6959: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , you ] ] ) do
6960: LD_ADDR_VAR 0 1
6964: PUSH
6965: LD_INT 22
6967: PUSH
6968: LD_EXP 1
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: PUSH
6977: EMPTY
6978: LIST
6979: PPUSH
6980: CALL_OW 69
6984: PUSH
6985: FOR_IN
6986: IFFALSE 7015
// if WantsToAttack ( i ) = Gleb then
6988: LD_VAR 0 1
6992: PPUSH
6993: CALL_OW 319
6997: PUSH
6998: LD_EXP 65
7002: EQUAL
7003: IFFALSE 7013
// utok_na_gleba := true ;
7005: LD_ADDR_EXP 60
7009: PUSH
7010: LD_INT 1
7012: ST_TO_ADDR
7013: GO 6985
7015: POP
7016: POP
// enable ;
7017: ENABLE
// end ;
7018: PPOPN 1
7020: END
// export function DKillGleb ; begin
7021: LD_INT 0
7023: PPUSH
// DialogueOn ;
7024: CALL_OW 6
// SayRadio ( Pla , DKillGleb-Pla-1 ) ;
7028: LD_EXP 45
7032: PPUSH
7033: LD_STRING DKillGleb-Pla-1
7035: PPUSH
7036: CALL_OW 94
// DialogueOff ;
7040: CALL_OW 7
// end ;
7044: LD_VAR 0 1
7048: RET
// every 0 0$5 do var i , a ;
7049: GO 7051
7051: DISABLE
7052: LD_INT 0
7054: PPUSH
7055: PPUSH
// begin a := 0 ;
7056: LD_ADDR_VAR 0 2
7060: PUSH
7061: LD_INT 0
7063: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_side , you ] ] ) do
7064: LD_ADDR_VAR 0 1
7068: PUSH
7069: LD_INT 2
7071: PUSH
7072: LD_INT 30
7074: PUSH
7075: LD_INT 0
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: PUSH
7082: LD_INT 30
7084: PUSH
7085: LD_INT 1
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: LIST
7096: PUSH
7097: LD_INT 22
7099: PUSH
7100: LD_EXP 1
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: PPUSH
7113: CALL_OW 69
7117: PUSH
7118: FOR_IN
7119: IFFALSE 7152
// a := a + GetResourceType ( Getbase ( i ) , mat_siberit ) ;
7121: LD_ADDR_VAR 0 2
7125: PUSH
7126: LD_VAR 0 2
7130: PUSH
7131: LD_VAR 0 1
7135: PPUSH
7136: CALL_OW 274
7140: PPUSH
7141: LD_INT 3
7143: PPUSH
7144: CALL_OW 275
7148: PLUS
7149: ST_TO_ADDR
7150: GO 7118
7152: POP
7153: POP
// if a >= 100 then
7154: LD_VAR 0 2
7158: PUSH
7159: LD_INT 100
7161: GREATEREQUAL
7162: IFFALSE 7181
// begin ChangeMissionObjectives ( MOutMine ) ;
7164: LD_STRING MOutMine
7166: PPUSH
7167: CALL_OW 337
// mine_obj_completed := true ;
7171: LD_ADDR_EXP 30
7175: PUSH
7176: LD_INT 1
7178: ST_TO_ADDR
// end else
7179: GO 7182
// enable ;
7181: ENABLE
// end ;
7182: PPOPN 2
7184: END
// every 0 0$5 trigger GetResourceType ( GetBase ( RuDepot ) , mat_siberit ) > 15 do
7185: LD_INT 58
7187: PPUSH
7188: CALL_OW 274
7192: PPUSH
7193: LD_INT 3
7195: PPUSH
7196: CALL_OW 275
7200: PUSH
7201: LD_INT 15
7203: GREATER
7204: IFFALSE 7250
7206: GO 7208
7208: DISABLE
// begin if not Ovsyenkotaken then
7209: LD_EXP 14
7213: NOT
7214: IFFALSE 7250
// begin if GetSide ( RuDepot ) <> you then
7216: LD_INT 58
7218: PPUSH
7219: CALL_OW 255
7223: PUSH
7224: LD_EXP 1
7228: NONEQUAL
7229: IFFALSE 7249
// SetResourceType ( GetBase ( RuDepot ) , mat_siberit , 5 ) ;
7231: LD_INT 58
7233: PPUSH
7234: CALL_OW 274
7238: PPUSH
7239: LD_INT 3
7241: PPUSH
7242: LD_INT 5
7244: PPUSH
7245: CALL_OW 277
// enable ;
7249: ENABLE
// end ; end ;
7250: END
// every 0 0$10 trigger UnitFilter ( zbytek , [ [ f_see , you ] ] ) do
7251: LD_EXP 91
7255: PPUSH
7256: LD_INT 101
7258: PUSH
7259: LD_EXP 1
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: EMPTY
7269: LIST
7270: PPUSH
7271: CALL_OW 72
7275: IFFALSE 7294
7277: GO 7279
7279: DISABLE
// begin wait ( 0 0$10 ) ;
7280: LD_INT 350
7282: PPUSH
7283: CALL_OW 67
// MyHint ( RemoteControl ) ;
7287: LD_STRING RemoteControl
7289: PPUSH
7290: CALL 12029 0 1
// end ; end_of_file
7294: END
// export Burlak , Platonov , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Vsevolod , Vsevolod2 ; export used , ru_cars , cars , other_ru_5_6 , stevens_killed , sli_pryc ; export fast_braketrough ; export function Load ; var i , k1 , k2 ; begin
7295: LD_INT 0
7297: PPUSH
7298: PPUSH
7299: PPUSH
7300: PPUSH
// belkovfreed := LoadVariable ( belkovfreed , true ) ;
7301: LD_ADDR_EXP 13
7305: PUSH
7306: LD_STRING belkovfreed
7308: PPUSH
7309: LD_INT 1
7311: PPUSH
7312: CALL_OW 30
7316: ST_TO_ADDR
// cars := LoadVariable ( cars_ru_6 , [ [ ru_heavy_wheeled , ru_gatling_gun , nation_russian , 0 , 0 ] , [ ru_heavy_wheeled , ru_heavy_gun , nation_russian , 0 , 0 ] , [ ru_heavy_wheeled , ru_heavy_gun , nation_russian , 0 , 0 ] , [ ru_heavy_tracked , ru_heavy_gun , nation_russian , 0 , 0 ] , [ ru_heavy_tracked , ru_gatling_gun , nation_russian , 0 , 0 ] , [ ru_heavy_tracked , ru_gatling_gun , nation_russian , 0 , 0 ] , [ ru_heavy_tracked , ru_gatling_gun , nation_russian , 0 , 0 ] , [ ru_heavy_tracked , ru_gatling_gun , nation_russian , 0 , 0 ] ] ) ;
7317: LD_ADDR_EXP 74
7321: PUSH
7322: LD_STRING cars_ru_6
7324: PPUSH
7325: LD_INT 23
7327: PUSH
7328: LD_INT 43
7330: PUSH
7331: LD_INT 3
7333: PUSH
7334: LD_INT 0
7336: PUSH
7337: LD_INT 0
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: PUSH
7347: LD_INT 23
7349: PUSH
7350: LD_INT 46
7352: PUSH
7353: LD_INT 3
7355: PUSH
7356: LD_INT 0
7358: PUSH
7359: LD_INT 0
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: PUSH
7369: LD_INT 23
7371: PUSH
7372: LD_INT 46
7374: PUSH
7375: LD_INT 3
7377: PUSH
7378: LD_INT 0
7380: PUSH
7381: LD_INT 0
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: PUSH
7391: LD_INT 24
7393: PUSH
7394: LD_INT 46
7396: PUSH
7397: LD_INT 3
7399: PUSH
7400: LD_INT 0
7402: PUSH
7403: LD_INT 0
7405: PUSH
7406: EMPTY
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 24
7415: PUSH
7416: LD_INT 43
7418: PUSH
7419: LD_INT 3
7421: PUSH
7422: LD_INT 0
7424: PUSH
7425: LD_INT 0
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: PUSH
7435: LD_INT 24
7437: PUSH
7438: LD_INT 43
7440: PUSH
7441: LD_INT 3
7443: PUSH
7444: LD_INT 0
7446: PUSH
7447: LD_INT 0
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: PUSH
7457: LD_INT 24
7459: PUSH
7460: LD_INT 43
7462: PUSH
7463: LD_INT 3
7465: PUSH
7466: LD_INT 0
7468: PUSH
7469: LD_INT 0
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: PUSH
7479: LD_INT 24
7481: PUSH
7482: LD_INT 43
7484: PUSH
7485: LD_INT 3
7487: PUSH
7488: LD_INT 0
7490: PUSH
7491: LD_INT 0
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: PPUSH
7511: CALL_OW 30
7515: ST_TO_ADDR
// stevens_killed := LoadVariable ( stevens_killed , false ) ;
7516: LD_ADDR_EXP 76
7520: PUSH
7521: LD_STRING stevens_killed
7523: PPUSH
7524: LD_INT 0
7526: PPUSH
7527: CALL_OW 30
7531: ST_TO_ADDR
// fast_braketrough := LoadVariable ( OvesyenkoTime , false ) ;
7532: LD_ADDR_EXP 78
7536: PUSH
7537: LD_STRING OvesyenkoTime
7539: PPUSH
7540: LD_INT 0
7542: PPUSH
7543: CALL_OW 30
7547: ST_TO_ADDR
// InitUc ;
7548: CALL_OW 18
// InitHc ;
7552: CALL_OW 19
// uc_side := you ;
7556: LD_ADDR_OWVAR 20
7560: PUSH
7561: LD_EXP 1
7565: ST_TO_ADDR
// uc_nation := nation_russian ;
7566: LD_ADDR_OWVAR 21
7570: PUSH
7571: LD_INT 3
7573: ST_TO_ADDR
// Platonov := MyCreateCharacter ( Platonov , 0 , class_soldier , true ) ;
7574: LD_ADDR_EXP 62
7578: PUSH
7579: LD_STRING Platonov
7581: PPUSH
7582: LD_INT 0
7584: PPUSH
7585: LD_INT 1
7587: PPUSH
7588: LD_INT 1
7590: PPUSH
7591: CALL 8601 0 4
7595: ST_TO_ADDR
// if difficulty = 3 then
7596: LD_OWVAR 67
7600: PUSH
7601: LD_INT 3
7603: EQUAL
7604: IFFALSE 7628
// Burlak := MyCreateCharacter ( Burlak , 0 , class_mechanic , false ) ;
7606: LD_ADDR_EXP 61
7610: PUSH
7611: LD_STRING Burlak
7613: PPUSH
7614: LD_INT 0
7616: PPUSH
7617: LD_INT 3
7619: PPUSH
7620: LD_INT 0
7622: PPUSH
7623: CALL 8601 0 4
7627: ST_TO_ADDR
// Titov := MyCreateCharacter ( Titov , 0 , class_soldier , false ) ;
7628: LD_ADDR_EXP 67
7632: PUSH
7633: LD_STRING Titov
7635: PPUSH
7636: LD_INT 0
7638: PPUSH
7639: LD_INT 1
7641: PPUSH
7642: LD_INT 0
7644: PPUSH
7645: CALL 8601 0 4
7649: ST_TO_ADDR
// Dolgov := MyCreateCharacter ( Dolgov , 0 , class_scientistic , false ) ;
7650: LD_ADDR_EXP 68
7654: PUSH
7655: LD_STRING Dolgov
7657: PPUSH
7658: LD_INT 0
7660: PPUSH
7661: LD_INT 4
7663: PPUSH
7664: LD_INT 0
7666: PPUSH
7667: CALL 8601 0 4
7671: ST_TO_ADDR
// Lipshchin := MyCreateCharacter ( Lipshchin , 0 , class_soldier , false ) ;
7672: LD_ADDR_EXP 69
7676: PUSH
7677: LD_STRING Lipshchin
7679: PPUSH
7680: LD_INT 0
7682: PPUSH
7683: LD_INT 1
7685: PPUSH
7686: LD_INT 0
7688: PPUSH
7689: CALL 8601 0 4
7693: ST_TO_ADDR
// Karamazov := MyCreateCharacter ( Karamazov , 0 , class_engineer , false ) ;
7694: LD_ADDR_EXP 63
7698: PUSH
7699: LD_STRING Karamazov
7701: PPUSH
7702: LD_INT 0
7704: PPUSH
7705: LD_INT 2
7707: PPUSH
7708: LD_INT 0
7710: PPUSH
7711: CALL 8601 0 4
7715: ST_TO_ADDR
// Petrovova := MyCreateCharacter ( Petrovova , 0 , class_soldier , false ) ;
7716: LD_ADDR_EXP 64
7720: PUSH
7721: LD_STRING Petrovova
7723: PPUSH
7724: LD_INT 0
7726: PPUSH
7727: LD_INT 1
7729: PPUSH
7730: LD_INT 0
7732: PPUSH
7733: CALL 8601 0 4
7737: ST_TO_ADDR
// Gleb := MyCreateCharacter ( Gleb , 0 , class_soldier , false ) ;
7738: LD_ADDR_EXP 65
7742: PUSH
7743: LD_STRING Gleb
7745: PPUSH
7746: LD_INT 0
7748: PPUSH
7749: LD_INT 1
7751: PPUSH
7752: LD_INT 0
7754: PPUSH
7755: CALL 8601 0 4
7759: ST_TO_ADDR
// Petrosyan := MyCreateCharacter ( Petrosyan , 0 , class_scientistic , false ) ;
7760: LD_ADDR_EXP 66
7764: PUSH
7765: LD_STRING Petrosyan
7767: PPUSH
7768: LD_INT 0
7770: PPUSH
7771: LD_INT 4
7773: PPUSH
7774: LD_INT 0
7776: PPUSH
7777: CALL 8601 0 4
7781: ST_TO_ADDR
// if difficulty < 3 then
7782: LD_OWVAR 67
7786: PUSH
7787: LD_INT 3
7789: LESS
7790: IFFALSE 7814
// Burlak := MyCreateCharacter ( Burlak , 0 , class_mechanic , false ) ;
7792: LD_ADDR_EXP 61
7796: PUSH
7797: LD_STRING Burlak
7799: PPUSH
7800: LD_INT 0
7802: PPUSH
7803: LD_INT 3
7805: PPUSH
7806: LD_INT 0
7808: PPUSH
7809: CALL 8601 0 4
7813: ST_TO_ADDR
// used := [ Burlak , Lipshchin , Titov , Dolgov , Karamazov , Petrovova , Gleb , Petrosyan ] diff 0 ;
7814: LD_ADDR_EXP 72
7818: PUSH
7819: LD_EXP 61
7823: PUSH
7824: LD_EXP 69
7828: PUSH
7829: LD_EXP 67
7833: PUSH
7834: LD_EXP 68
7838: PUSH
7839: LD_EXP 63
7843: PUSH
7844: LD_EXP 64
7848: PUSH
7849: LD_EXP 65
7853: PUSH
7854: LD_EXP 66
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: PUSH
7869: LD_INT 0
7871: DIFF
7872: ST_TO_ADDR
// other_ru_5_6 := CreateCharacterSet ( other_ru_5_6 ) ;
7873: LD_ADDR_EXP 75
7877: PUSH
7878: LD_STRING other_ru_5_6
7880: PPUSH
7881: CALL_OW 31
7885: ST_TO_ADDR
// used := used ^ other_ru_5_6 ;
7886: LD_ADDR_EXP 72
7890: PUSH
7891: LD_EXP 72
7895: PUSH
7896: LD_EXP 75
7900: ADD
7901: ST_TO_ADDR
// rulive := used ;
7902: LD_ADDR_EXP 9
7906: PUSH
7907: LD_EXP 72
7911: ST_TO_ADDR
// k1 := Rand ( 1 , used ) ;
7912: LD_ADDR_VAR 0 3
7916: PUSH
7917: LD_INT 1
7919: PPUSH
7920: LD_EXP 72
7924: PPUSH
7925: CALL_OW 12
7929: ST_TO_ADDR
// if not UnitFilter ( used , [ [ f_class , class_engineer ] ] ) then
7930: LD_EXP 72
7934: PPUSH
7935: LD_INT 25
7937: PUSH
7938: LD_INT 2
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: PUSH
7945: EMPTY
7946: LIST
7947: PPUSH
7948: CALL_OW 72
7952: NOT
7953: IFFALSE 7973
// SetClass ( used [ k1 ] , class_engineer ) ;
7955: LD_EXP 72
7959: PUSH
7960: LD_VAR 0 3
7964: ARRAY
7965: PPUSH
7966: LD_INT 2
7968: PPUSH
7969: CALL_OW 336
// k2 := Rand ( 1 , used ) ;
7973: LD_ADDR_VAR 0 4
7977: PUSH
7978: LD_INT 1
7980: PPUSH
7981: LD_EXP 72
7985: PPUSH
7986: CALL_OW 12
7990: ST_TO_ADDR
// while k1 = k2 do
7991: LD_VAR 0 3
7995: PUSH
7996: LD_VAR 0 4
8000: EQUAL
8001: IFFALSE 8023
// k2 := Rand ( 1 , used ) ;
8003: LD_ADDR_VAR 0 4
8007: PUSH
8008: LD_INT 1
8010: PPUSH
8011: LD_EXP 72
8015: PPUSH
8016: CALL_OW 12
8020: ST_TO_ADDR
8021: GO 7991
// if difficulty = 1 and not UnitFilter ( used , [ [ f_class , class_scientistic ] ] ) then
8023: LD_OWVAR 67
8027: PUSH
8028: LD_INT 1
8030: EQUAL
8031: PUSH
8032: LD_EXP 72
8036: PPUSH
8037: LD_INT 25
8039: PUSH
8040: LD_INT 4
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PUSH
8047: EMPTY
8048: LIST
8049: PPUSH
8050: CALL_OW 72
8054: NOT
8055: AND
8056: IFFALSE 8076
// SetClass ( used [ k2 ] , class_scientistic ) ;
8058: LD_EXP 72
8062: PUSH
8063: LD_VAR 0 4
8067: ARRAY
8068: PPUSH
8069: LD_INT 4
8071: PPUSH
8072: CALL_OW 336
// uc_side := you2 ;
8076: LD_ADDR_OWVAR 20
8080: PUSH
8081: LD_EXP 2
8085: ST_TO_ADDR
// Vsevolod := MyCreateCharacter ( Vsevolod , 0 , class_soldier , true ) ;
8086: LD_ADDR_EXP 70
8090: PUSH
8091: LD_STRING Vsevolod
8093: PPUSH
8094: LD_INT 0
8096: PPUSH
8097: LD_INT 1
8099: PPUSH
8100: LD_INT 1
8102: PPUSH
8103: CALL 8601 0 4
8107: ST_TO_ADDR
// Vsevolod2 := MyCreateCharacter ( Vsevolod , 0 , class_soldier , true ) ;
8108: LD_ADDR_EXP 71
8112: PUSH
8113: LD_STRING Vsevolod
8115: PPUSH
8116: LD_INT 0
8118: PPUSH
8119: LD_INT 1
8121: PPUSH
8122: LD_INT 1
8124: PPUSH
8125: CALL 8601 0 4
8129: ST_TO_ADDR
// for i := 1 to 3 do
8130: LD_ADDR_VAR 0 2
8134: PUSH
8135: DOUBLE
8136: LD_INT 1
8138: DEC
8139: ST_TO_ADDR
8140: LD_INT 3
8142: PUSH
8143: FOR_TO
8144: IFFALSE 8177
// begin PrepareSoldier ( sex_male , 3 ) ;
8146: LD_INT 1
8148: PPUSH
8149: LD_INT 3
8151: PPUSH
8152: CALL_OW 381
// vsevolod_uderna_group := vsevolod_uderna_group ^ [ CreateHuman ] ;
8156: LD_ADDR_EXP 12
8160: PUSH
8161: LD_EXP 12
8165: PUSH
8166: CALL_OW 44
8170: PUSH
8171: EMPTY
8172: LIST
8173: ADD
8174: ST_TO_ADDR
// end ;
8175: GO 8143
8177: POP
8178: POP
// SetClass ( vsevolod_uderna_group [ 1 ] , class_engineer ) ;
8179: LD_EXP 12
8183: PUSH
8184: LD_INT 1
8186: ARRAY
8187: PPUSH
8188: LD_INT 2
8190: PPUSH
8191: CALL_OW 336
// vsevolod_uderna_group := vsevolod_uderna_group ;
8195: LD_ADDR_EXP 12
8199: PUSH
8200: LD_EXP 12
8204: ST_TO_ADDR
// end ;
8205: LD_VAR 0 1
8209: RET
// export function place_in_ru_cars ; var car , i ; begin
8210: LD_INT 0
8212: PPUSH
8213: PPUSH
8214: PPUSH
// InitUc ;
8215: CALL_OW 18
// InitVc ;
8219: CALL_OW 20
// vc_control := control_manual ;
8223: LD_ADDR_OWVAR 38
8227: PUSH
8228: LD_INT 1
8230: ST_TO_ADDR
// vc_engine := engine_combustion ;
8231: LD_ADDR_OWVAR 39
8235: PUSH
8236: LD_INT 1
8238: ST_TO_ADDR
// uc_side := you ;
8239: LD_ADDR_OWVAR 20
8243: PUSH
8244: LD_EXP 1
8248: ST_TO_ADDR
// ru_cars := [ ] ;
8249: LD_ADDR_EXP 73
8253: PUSH
8254: EMPTY
8255: ST_TO_ADDR
// if ( ( cars + 0 ) < ( used + 0 ) ) or ( ( used + 0 ) < 6 ) then
8256: LD_EXP 74
8260: PUSH
8261: LD_INT 0
8263: PLUS
8264: PUSH
8265: LD_EXP 72
8269: PUSH
8270: LD_INT 0
8272: PLUS
8273: LESS
8274: PUSH
8275: LD_EXP 72
8279: PUSH
8280: LD_INT 0
8282: PLUS
8283: PUSH
8284: LD_INT 6
8286: LESS
8287: OR
8288: IFFALSE 8297
// begin Msg ( spatny save ) ;
8290: LD_STRING spatny save
8292: PPUSH
8293: CALL_OW 100
// end ; for i := 1 to used do
8297: LD_ADDR_VAR 0 3
8301: PUSH
8302: DOUBLE
8303: LD_INT 1
8305: DEC
8306: ST_TO_ADDR
8307: LD_EXP 72
8311: PUSH
8312: FOR_TO
8313: IFFALSE 8553
// begin uc_nation := cars [ i ] [ 3 ] ;
8315: LD_ADDR_OWVAR 21
8319: PUSH
8320: LD_EXP 74
8324: PUSH
8325: LD_VAR 0 3
8329: ARRAY
8330: PUSH
8331: LD_INT 3
8333: ARRAY
8334: ST_TO_ADDR
// vc_chassis := cars [ i ] [ 1 ] ;
8335: LD_ADDR_OWVAR 37
8339: PUSH
8340: LD_EXP 74
8344: PUSH
8345: LD_VAR 0 3
8349: ARRAY
8350: PUSH
8351: LD_INT 1
8353: ARRAY
8354: ST_TO_ADDR
// vc_weapon := cars [ i ] [ 2 ] ;
8355: LD_ADDR_OWVAR 40
8359: PUSH
8360: LD_EXP 74
8364: PUSH
8365: LD_VAR 0 3
8369: ARRAY
8370: PUSH
8371: LD_INT 2
8373: ARRAY
8374: ST_TO_ADDR
// uc_direction := Rand ( 3 , 4 ) ;
8375: LD_ADDR_OWVAR 24
8379: PUSH
8380: LD_INT 3
8382: PPUSH
8383: LD_INT 4
8385: PPUSH
8386: CALL_OW 12
8390: ST_TO_ADDR
// vc_fuel_battery := Rand ( 3 , 6 ) ;
8391: LD_ADDR_OWVAR 41
8395: PUSH
8396: LD_INT 3
8398: PPUSH
8399: LD_INT 6
8401: PPUSH
8402: CALL_OW 12
8406: ST_TO_ADDR
// uc_direction := 5 ;
8407: LD_ADDR_OWVAR 24
8411: PUSH
8412: LD_INT 5
8414: ST_TO_ADDR
// car := CreateVehicle ;
8415: LD_ADDR_VAR 0 2
8419: PUSH
8420: CALL_OW 45
8424: ST_TO_ADDR
// if ( cars [ i ] [ 2 ] in [ ar_cargo_bay , ru_cargo_bay , us_cargo_bay ] ) then
8425: LD_EXP 74
8429: PUSH
8430: LD_VAR 0 3
8434: ARRAY
8435: PUSH
8436: LD_INT 2
8438: ARRAY
8439: PUSH
8440: LD_INT 32
8442: PUSH
8443: LD_INT 51
8445: PUSH
8446: LD_INT 12
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: LIST
8453: IN
8454: IFFALSE 8515
// if ( cars [ i ] [ 4 ] <> 0 ) then
8456: LD_EXP 74
8460: PUSH
8461: LD_VAR 0 3
8465: ARRAY
8466: PUSH
8467: LD_INT 4
8469: ARRAY
8470: PUSH
8471: LD_INT 0
8473: NONEQUAL
8474: IFFALSE 8515
// SetCargo ( car , cars [ i ] [ 4 ] , cars [ i ] [ 5 ] ) ;
8476: LD_VAR 0 2
8480: PPUSH
8481: LD_EXP 74
8485: PUSH
8486: LD_VAR 0 3
8490: ARRAY
8491: PUSH
8492: LD_INT 4
8494: ARRAY
8495: PPUSH
8496: LD_EXP 74
8500: PUSH
8501: LD_VAR 0 3
8505: ARRAY
8506: PUSH
8507: LD_INT 5
8509: ARRAY
8510: PPUSH
8511: CALL_OW 290
// ru_cars := ru_cars ^ car ;
8515: LD_ADDR_EXP 73
8519: PUSH
8520: LD_EXP 73
8524: PUSH
8525: LD_VAR 0 2
8529: ADD
8530: ST_TO_ADDR
// PlaceHumanInUnit ( used [ i ] , car ) ;
8531: LD_EXP 72
8535: PUSH
8536: LD_VAR 0 3
8540: ARRAY
8541: PPUSH
8542: LD_VAR 0 2
8546: PPUSH
8547: CALL_OW 52
// end ;
8551: GO 8312
8553: POP
8554: POP
// end ;
8555: LD_VAR 0 1
8559: RET
// export function place_ru_cars ; var i ; begin
8560: LD_INT 0
8562: PPUSH
8563: PPUSH
// for i in ru_cars do
8564: LD_ADDR_VAR 0 2
8568: PUSH
8569: LD_EXP 73
8573: PUSH
8574: FOR_IN
8575: IFFALSE 8594
// PlaceUnitArea ( i , ru_place , false ) ;
8577: LD_VAR 0 2
8581: PPUSH
8582: LD_INT 5
8584: PPUSH
8585: LD_INT 0
8587: PPUSH
8588: CALL_OW 49
8592: GO 8574
8594: POP
8595: POP
// end ;
8596: LD_VAR 0 1
8600: RET
// function MyCreateCharacter ( name , unclass , unclass_gen , new ) ; begin
8601: LD_INT 0
8603: PPUSH
// if new or TestCharacters ( name ) then
8604: LD_VAR 0 4
8608: PUSH
8609: LD_VAR 0 1
8613: PPUSH
8614: CALL_OW 28
8618: OR
8619: IFFALSE 8702
// begin if new then
8621: LD_VAR 0 4
8625: IFFALSE 8644
// result := NewCharacter ( name ) else
8627: LD_ADDR_VAR 0 5
8631: PUSH
8632: LD_VAR 0 1
8636: PPUSH
8637: CALL_OW 25
8641: ST_TO_ADDR
8642: GO 8680
// begin if CheckCharacterSet ( name ) then
8644: LD_VAR 0 1
8648: PPUSH
8649: CALL_OW 29
8653: IFFALSE 8672
// result := CreateCharacter ( name ) else
8655: LD_ADDR_VAR 0 5
8659: PUSH
8660: LD_VAR 0 1
8664: PPUSH
8665: CALL_OW 34
8669: ST_TO_ADDR
8670: GO 8680
// result := 0 ;
8672: LD_ADDR_VAR 0 5
8676: PUSH
8677: LD_INT 0
8679: ST_TO_ADDR
// end ; if unclass then
8680: LD_VAR 0 2
8684: IFFALSE 8700
// SetClass ( result , unclass ) ;
8686: LD_VAR 0 5
8690: PPUSH
8691: LD_VAR 0 2
8695: PPUSH
8696: CALL_OW 336
// end else
8700: GO 8778
// begin Msg ( Chybi  & name & ! ) ;
8702: LD_STRING Chybi 
8704: PUSH
8705: LD_VAR 0 1
8709: STR
8710: PUSH
8711: LD_STRING !
8713: STR
8714: PPUSH
8715: CALL_OW 100
// hc_name := name ;
8719: LD_ADDR_OWVAR 26
8723: PUSH
8724: LD_VAR 0 1
8728: ST_TO_ADDR
// PrepareHuman ( sex_male , 0 , 3 ) ;
8729: LD_INT 1
8731: PPUSH
8732: LD_INT 0
8734: PPUSH
8735: LD_INT 3
8737: PPUSH
8738: CALL_OW 380
// if unclass_gen then
8742: LD_VAR 0 3
8746: IFFALSE 8760
// hc_class := unclass_gen else
8748: LD_ADDR_OWVAR 28
8752: PUSH
8753: LD_VAR 0 3
8757: ST_TO_ADDR
8758: GO 8768
// hc_class := class_soldier ;
8760: LD_ADDR_OWVAR 28
8764: PUSH
8765: LD_INT 1
8767: ST_TO_ADDR
// result := CreateHuman ;
8768: LD_ADDR_VAR 0 5
8772: PUSH
8773: CALL_OW 44
8777: ST_TO_ADDR
// end ; end ;
8778: LD_VAR 0 5
8782: RET
// export convoy_06 ; export function Save ; var i , zustali , tmp_conv ; begin
8783: LD_INT 0
8785: PPUSH
8786: PPUSH
8787: PPUSH
8788: PPUSH
// DeleteVariable ( cars_ru_6 ) ;
8789: LD_STRING cars_ru_6
8791: PPUSH
8792: CALL_OW 41
// DeleteVariable ( other_ru_5_6 ) ;
8796: LD_STRING other_ru_5_6
8798: PPUSH
8799: CALL_OW 41
// SaveCharacters ( Burlak , Burlak ) ;
8803: LD_EXP 61
8807: PPUSH
8808: LD_STRING Burlak
8810: PPUSH
8811: CALL_OW 38
// if Titov then
8815: LD_EXP 67
8819: IFFALSE 8879
// if IsDead ( titov ) then
8821: LD_EXP 67
8825: PPUSH
8826: CALL_OW 301
8830: IFFALSE 8844
// SaveVariable ( 0 , TitovLoc ) else
8832: LD_INT 0
8834: PPUSH
8835: LD_STRING TitovLoc
8837: PPUSH
8838: CALL_OW 39
8842: GO 8879
// if titov in sli_pryc then
8844: LD_EXP 67
8848: PUSH
8849: LD_EXP 77
8853: IN
8854: IFFALSE 8869
// SaveVariable ( - 7 , TitovLoc ) else
8856: LD_INT 7
8858: NEG
8859: PPUSH
8860: LD_STRING TitovLoc
8862: PPUSH
8863: CALL_OW 39
8867: GO 8879
// SaveVariable ( 7 , TitovLoc ) ;
8869: LD_INT 7
8871: PPUSH
8872: LD_STRING TitovLoc
8874: PPUSH
8875: CALL_OW 39
// SaveCharacters ( Titov , Titov ) ;
8879: LD_EXP 67
8883: PPUSH
8884: LD_STRING Titov
8886: PPUSH
8887: CALL_OW 38
// if Dolgov then
8891: LD_EXP 68
8895: IFFALSE 8955
// if IsDead ( Dolgov ) then
8897: LD_EXP 68
8901: PPUSH
8902: CALL_OW 301
8906: IFFALSE 8920
// SaveVariable ( 0 , DolgovLoc ) else
8908: LD_INT 0
8910: PPUSH
8911: LD_STRING DolgovLoc
8913: PPUSH
8914: CALL_OW 39
8918: GO 8955
// if Dolgov in sli_pryc then
8920: LD_EXP 68
8924: PUSH
8925: LD_EXP 77
8929: IN
8930: IFFALSE 8945
// SaveVariable ( - 7 , DolgovLoc ) else
8932: LD_INT 7
8934: NEG
8935: PPUSH
8936: LD_STRING DolgovLoc
8938: PPUSH
8939: CALL_OW 39
8943: GO 8955
// SaveVariable ( 7 , DolgovLoc ) ;
8945: LD_INT 7
8947: PPUSH
8948: LD_STRING DolgovLoc
8950: PPUSH
8951: CALL_OW 39
// if Dolgov then
8955: LD_EXP 68
8959: IFFALSE 8973
// SaveCharacters ( Dolgov , Dolgov ) ;
8961: LD_EXP 68
8965: PPUSH
8966: LD_STRING Dolgov
8968: PPUSH
8969: CALL_OW 38
// if Lipshchin then
8973: LD_EXP 69
8977: IFFALSE 9037
// if IsDead ( Lipshchin ) then
8979: LD_EXP 69
8983: PPUSH
8984: CALL_OW 301
8988: IFFALSE 9002
// SaveVariable ( 0 , LipshchinLoc ) else
8990: LD_INT 0
8992: PPUSH
8993: LD_STRING LipshchinLoc
8995: PPUSH
8996: CALL_OW 39
9000: GO 9037
// if Lipshchin in sli_pryc then
9002: LD_EXP 69
9006: PUSH
9007: LD_EXP 77
9011: IN
9012: IFFALSE 9027
// SaveVariable ( - 7 , LipshchinLoc ) else
9014: LD_INT 7
9016: NEG
9017: PPUSH
9018: LD_STRING LipshchinLoc
9020: PPUSH
9021: CALL_OW 39
9025: GO 9037
// SaveVariable ( 7 , LipshchinLoc ) ;
9027: LD_INT 7
9029: PPUSH
9030: LD_STRING LipshchinLoc
9032: PPUSH
9033: CALL_OW 39
// if Lipshchin then
9037: LD_EXP 69
9041: IFFALSE 9055
// SaveCharacters ( Lipshchin , Lipshchin ) ;
9043: LD_EXP 69
9047: PPUSH
9048: LD_STRING Lipshchin
9050: PPUSH
9051: CALL_OW 38
// if Karamazov then
9055: LD_EXP 63
9059: IFFALSE 9119
// if IsDead ( Karamazov ) then
9061: LD_EXP 63
9065: PPUSH
9066: CALL_OW 301
9070: IFFALSE 9084
// SaveVariable ( 0 , KaramazovLoc ) else
9072: LD_INT 0
9074: PPUSH
9075: LD_STRING KaramazovLoc
9077: PPUSH
9078: CALL_OW 39
9082: GO 9119
// if Karamazov in sli_pryc then
9084: LD_EXP 63
9088: PUSH
9089: LD_EXP 77
9093: IN
9094: IFFALSE 9109
// SaveVariable ( - 7 , KaramazovLoc ) else
9096: LD_INT 7
9098: NEG
9099: PPUSH
9100: LD_STRING KaramazovLoc
9102: PPUSH
9103: CALL_OW 39
9107: GO 9119
// SaveVariable ( 7 , KaramazovLoc ) ;
9109: LD_INT 7
9111: PPUSH
9112: LD_STRING KaramazovLoc
9114: PPUSH
9115: CALL_OW 39
// if Karamazov then
9119: LD_EXP 63
9123: IFFALSE 9137
// SaveCharacters ( Karamazov , Karamazov ) ;
9125: LD_EXP 63
9129: PPUSH
9130: LD_STRING Karamazov
9132: PPUSH
9133: CALL_OW 38
// if Petrovova then
9137: LD_EXP 64
9141: IFFALSE 9201
// if IsDead ( Petrovova ) then
9143: LD_EXP 64
9147: PPUSH
9148: CALL_OW 301
9152: IFFALSE 9166
// SaveVariable ( 0 , PetrovovaLoc ) else
9154: LD_INT 0
9156: PPUSH
9157: LD_STRING PetrovovaLoc
9159: PPUSH
9160: CALL_OW 39
9164: GO 9201
// if Petrovova in sli_pryc then
9166: LD_EXP 64
9170: PUSH
9171: LD_EXP 77
9175: IN
9176: IFFALSE 9191
// SaveVariable ( - 7 , PetrovovaLoc ) else
9178: LD_INT 7
9180: NEG
9181: PPUSH
9182: LD_STRING PetrovovaLoc
9184: PPUSH
9185: CALL_OW 39
9189: GO 9201
// SaveVariable ( 7 , PetrovovaLoc ) ;
9191: LD_INT 7
9193: PPUSH
9194: LD_STRING PetrovovaLoc
9196: PPUSH
9197: CALL_OW 39
// if Petrovova then
9201: LD_EXP 64
9205: IFFALSE 9219
// SaveCharacters ( Petrovova , Petrovova ) ;
9207: LD_EXP 64
9211: PPUSH
9212: LD_STRING Petrovova
9214: PPUSH
9215: CALL_OW 38
// if Gleb then
9219: LD_EXP 65
9223: IFFALSE 9283
// if IsDead ( Gleb ) then
9225: LD_EXP 65
9229: PPUSH
9230: CALL_OW 301
9234: IFFALSE 9248
// SaveVariable ( 0 , GlebLoc ) else
9236: LD_INT 0
9238: PPUSH
9239: LD_STRING GlebLoc
9241: PPUSH
9242: CALL_OW 39
9246: GO 9283
// if Gleb in sli_pryc then
9248: LD_EXP 65
9252: PUSH
9253: LD_EXP 77
9257: IN
9258: IFFALSE 9273
// SaveVariable ( - 7 , GlebLoc ) else
9260: LD_INT 7
9262: NEG
9263: PPUSH
9264: LD_STRING GlebLoc
9266: PPUSH
9267: CALL_OW 39
9271: GO 9283
// SaveVariable ( 7 , GlebLoc ) ;
9273: LD_INT 7
9275: PPUSH
9276: LD_STRING GlebLoc
9278: PPUSH
9279: CALL_OW 39
// if Gleb then
9283: LD_EXP 65
9287: IFFALSE 9301
// SaveCharacters ( Gleb , Gleb ) ;
9289: LD_EXP 65
9293: PPUSH
9294: LD_STRING Gleb
9296: PPUSH
9297: CALL_OW 38
// if Petrosyan then
9301: LD_EXP 66
9305: IFFALSE 9365
// if IsDead ( Petrosyan ) then
9307: LD_EXP 66
9311: PPUSH
9312: CALL_OW 301
9316: IFFALSE 9330
// SaveVariable ( 0 , PetrosyanLoc ) else
9318: LD_INT 0
9320: PPUSH
9321: LD_STRING PetrosyanLoc
9323: PPUSH
9324: CALL_OW 39
9328: GO 9365
// if Petrosyan in sli_pryc then
9330: LD_EXP 66
9334: PUSH
9335: LD_EXP 77
9339: IN
9340: IFFALSE 9355
// SaveVariable ( - 7 , PetrosyanLoc ) else
9342: LD_INT 7
9344: NEG
9345: PPUSH
9346: LD_STRING PetrosyanLoc
9348: PPUSH
9349: CALL_OW 39
9353: GO 9365
// SaveVariable ( 7 , PetrosyanLoc ) ;
9355: LD_INT 7
9357: PPUSH
9358: LD_STRING PetrosyanLoc
9360: PPUSH
9361: CALL_OW 39
// if Petrosyan then
9365: LD_EXP 66
9369: IFFALSE 9383
// SaveCharacters ( Petrosyan , Petrosyan ) ;
9371: LD_EXP 66
9375: PPUSH
9376: LD_STRING Petrosyan
9378: PPUSH
9379: CALL_OW 38
// SaveCharacters ( Vsevolod , Vsevolod ) ;
9383: LD_EXP 70
9387: PPUSH
9388: LD_STRING Vsevolod
9390: PPUSH
9391: CALL_OW 38
// SaveVariable ( not IsDead ( vsevolod ) , VsevSaved ) ;
9395: LD_EXP 70
9399: PPUSH
9400: CALL_OW 301
9404: NOT
9405: PPUSH
9406: LD_STRING VsevSaved
9408: PPUSH
9409: CALL_OW 39
// zustali := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , you ] , [ f_nation , nation_russian ] ] ) ;
9413: LD_ADDR_VAR 0 3
9417: PUSH
9418: LD_INT 21
9420: PUSH
9421: LD_INT 1
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: PUSH
9428: LD_INT 22
9430: PUSH
9431: LD_EXP 1
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: PUSH
9440: LD_INT 23
9442: PUSH
9443: LD_INT 3
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: LIST
9454: PPUSH
9455: CALL_OW 69
9459: ST_TO_ADDR
// SaveCharacters ( zustali diff [ Burlak , Titov , Dolgov , Lipshchin , Karamazov , Petrovova , Gleb , Petrosyan , Vsevolod ] , survivors2 ) ;
9460: LD_VAR 0 3
9464: PUSH
9465: LD_EXP 61
9469: PUSH
9470: LD_EXP 67
9474: PUSH
9475: LD_EXP 68
9479: PUSH
9480: LD_EXP 69
9484: PUSH
9485: LD_EXP 63
9489: PUSH
9490: LD_EXP 64
9494: PUSH
9495: LD_EXP 65
9499: PUSH
9500: LD_EXP 66
9504: PUSH
9505: LD_EXP 70
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: DIFF
9521: PPUSH
9522: LD_STRING survivors2
9524: PPUSH
9525: CALL_OW 38
// SaveCharacters ( sli_pryc diff [ Burlak , Titov , Dolgov , Lipshchin , Karamazov , Petrovova , Gleb , Petrosyan , Vsevolod ] , WithVsevolod ) ;
9529: LD_EXP 77
9533: PUSH
9534: LD_EXP 61
9538: PUSH
9539: LD_EXP 67
9543: PUSH
9544: LD_EXP 68
9548: PUSH
9549: LD_EXP 69
9553: PUSH
9554: LD_EXP 63
9558: PUSH
9559: LD_EXP 64
9563: PUSH
9564: LD_EXP 65
9568: PUSH
9569: LD_EXP 66
9573: PUSH
9574: LD_EXP 70
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: DIFF
9590: PPUSH
9591: LD_STRING WithVsevolod
9593: PPUSH
9594: CALL_OW 38
// convoy_06 := [ ] ;
9598: LD_ADDR_EXP 79
9602: PUSH
9603: EMPTY
9604: ST_TO_ADDR
// tmp_conv := FilterUnitsInArea ( ru_exit , [ [ f_occupied ] , [ f_type , unit_vehicle ] , [ f_side , you ] ] ) ^ FilterUnitsInArea ( ru_exit , [ [ f_not , [ f_occupied ] ] , [ f_type , unit_vehicle ] , [ f_side , you ] ] ) ;
9605: LD_ADDR_VAR 0 4
9609: PUSH
9610: LD_INT 21
9612: PPUSH
9613: LD_INT 59
9615: PUSH
9616: EMPTY
9617: LIST
9618: PUSH
9619: LD_INT 21
9621: PUSH
9622: LD_INT 2
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PUSH
9629: LD_INT 22
9631: PUSH
9632: LD_EXP 1
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: LIST
9645: PPUSH
9646: CALL_OW 70
9650: PUSH
9651: LD_INT 21
9653: PPUSH
9654: LD_INT 3
9656: PUSH
9657: LD_INT 59
9659: PUSH
9660: EMPTY
9661: LIST
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: PUSH
9667: LD_INT 21
9669: PUSH
9670: LD_INT 2
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PUSH
9677: LD_INT 22
9679: PUSH
9680: LD_EXP 1
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: LIST
9693: PPUSH
9694: CALL_OW 70
9698: ADD
9699: ST_TO_ADDR
// for i in tmp_conv do
9700: LD_ADDR_VAR 0 2
9704: PUSH
9705: LD_VAR 0 4
9709: PUSH
9710: FOR_IN
9711: IFFALSE 9850
// begin convoy_06 := convoy_06 ^ [ [ GetNation ( i ) , GetWeapon ( i ) , GetControl ( i ) , GetEngine ( i ) , GetChassis ( i ) , GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) , GetCargo ( i , mat_siberit ) ] ] ;
9713: LD_ADDR_EXP 79
9717: PUSH
9718: LD_EXP 79
9722: PUSH
9723: LD_VAR 0 2
9727: PPUSH
9728: CALL_OW 248
9732: PUSH
9733: LD_VAR 0 2
9737: PPUSH
9738: CALL_OW 264
9742: PUSH
9743: LD_VAR 0 2
9747: PPUSH
9748: CALL_OW 263
9752: PUSH
9753: LD_VAR 0 2
9757: PPUSH
9758: CALL_OW 262
9762: PUSH
9763: LD_VAR 0 2
9767: PPUSH
9768: CALL_OW 265
9772: PUSH
9773: LD_VAR 0 2
9777: PPUSH
9778: LD_INT 1
9780: PPUSH
9781: CALL_OW 289
9785: PUSH
9786: LD_VAR 0 2
9790: PPUSH
9791: LD_INT 2
9793: PPUSH
9794: CALL_OW 289
9798: PUSH
9799: LD_VAR 0 2
9803: PPUSH
9804: LD_INT 3
9806: PPUSH
9807: CALL_OW 289
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: PUSH
9822: EMPTY
9823: LIST
9824: ADD
9825: ST_TO_ADDR
// if ( convoy_06 + 0 ) = ( zustali + 0 ) then
9826: LD_EXP 79
9830: PUSH
9831: LD_INT 0
9833: PLUS
9834: PUSH
9835: LD_VAR 0 3
9839: PUSH
9840: LD_INT 0
9842: PLUS
9843: EQUAL
9844: IFFALSE 9848
// break ;
9846: GO 9850
// end ;
9848: GO 9710
9850: POP
9851: POP
// SaveVariable ( convoy_06 , Convoy_06 ) ;
9852: LD_EXP 79
9856: PPUSH
9857: LD_STRING Convoy_06
9859: PPUSH
9860: CALL_OW 39
// end ;
9864: LD_VAR 0 1
9868: RET
// export accar1 , accar2 , acman1 , acman2 ; export function nakladaky ; begin
9869: LD_INT 0
9871: PPUSH
// InitUc ;
9872: CALL_OW 18
// InitHc ;
9876: CALL_OW 19
// InitVc ;
9880: CALL_OW 20
// uc_side := ai ;
9884: LD_ADDR_OWVAR 20
9888: PUSH
9889: LD_EXP 6
9893: ST_TO_ADDR
// uc_nation := nation_american ;
9894: LD_ADDR_OWVAR 21
9898: PUSH
9899: LD_INT 1
9901: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
9902: LD_ADDR_OWVAR 37
9906: PUSH
9907: LD_INT 3
9909: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
9910: LD_ADDR_OWVAR 40
9914: PUSH
9915: LD_INT 12
9917: ST_TO_ADDR
// vc_control := control_manual ;
9918: LD_ADDR_OWVAR 38
9922: PUSH
9923: LD_INT 1
9925: ST_TO_ADDR
// vc_engine := engine_solar ;
9926: LD_ADDR_OWVAR 39
9930: PUSH
9931: LD_INT 2
9933: ST_TO_ADDR
// uc_direction := 3 ;
9934: LD_ADDR_OWVAR 24
9938: PUSH
9939: LD_INT 3
9941: ST_TO_ADDR
// vc_fuel_battery := 80 ;
9942: LD_ADDR_OWVAR 41
9946: PUSH
9947: LD_INT 80
9949: ST_TO_ADDR
// accar1 := CreateVehicle ;
9950: LD_ADDR_EXP 80
9954: PUSH
9955: CALL_OW 45
9959: ST_TO_ADDR
// accar2 := CreateVehicle ;
9960: LD_ADDR_EXP 81
9964: PUSH
9965: CALL_OW 45
9969: ST_TO_ADDR
// PrepareSoldier ( sex_male , 2 ) ;
9970: LD_INT 1
9972: PPUSH
9973: LD_INT 2
9975: PPUSH
9976: CALL_OW 381
// acman1 := CreateHuman ;
9980: LD_ADDR_EXP 82
9984: PUSH
9985: CALL_OW 44
9989: ST_TO_ADDR
// acman2 := CreateHuman ;
9990: LD_ADDR_EXP 83
9994: PUSH
9995: CALL_OW 44
9999: ST_TO_ADDR
// PlaceHumanInUnit ( acman1 , accar1 ) ;
10000: LD_EXP 82
10004: PPUSH
10005: LD_EXP 80
10009: PPUSH
10010: CALL_OW 52
// PlaceHumanInUnit ( acman2 , accar2 ) ;
10014: LD_EXP 83
10018: PPUSH
10019: LD_EXP 81
10023: PPUSH
10024: CALL_OW 52
// SetCargo ( [ accar1 , accar2 ] , mat_cans , 100 ) ;
10028: LD_EXP 80
10032: PUSH
10033: LD_EXP 81
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PPUSH
10042: LD_INT 1
10044: PPUSH
10045: LD_INT 100
10047: PPUSH
10048: CALL_OW 290
// PlaceUnitArea ( accar1 , vsevolod_in , false ) ;
10052: LD_EXP 80
10056: PPUSH
10057: LD_INT 16
10059: PPUSH
10060: LD_INT 0
10062: PPUSH
10063: CALL_OW 49
// PlaceUnitArea ( accar2 , vsevolod_in , false ) ;
10067: LD_EXP 81
10071: PPUSH
10072: LD_INT 16
10074: PPUSH
10075: LD_INT 0
10077: PPUSH
10078: CALL_OW 49
// end ;
10082: LD_VAR 0 1
10086: RET
// export rccar1 , rccar2 , rccar3 , rcman1 , rcman2 , rcman3 ; export function convoy ; begin
10087: LD_INT 0
10089: PPUSH
// InitUc ;
10090: CALL_OW 18
// InitHc ;
10094: CALL_OW 19
// InitVc ;
10098: CALL_OW 20
// uc_side := you ;
10102: LD_ADDR_OWVAR 20
10106: PUSH
10107: LD_EXP 1
10111: ST_TO_ADDR
// uc_nation := nation_russian ;
10112: LD_ADDR_OWVAR 21
10116: PUSH
10117: LD_INT 3
10119: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
10120: LD_ADDR_OWVAR 37
10124: PUSH
10125: LD_INT 22
10127: ST_TO_ADDR
// vc_weapon := ru_cargo_bay ;
10128: LD_ADDR_OWVAR 40
10132: PUSH
10133: LD_INT 51
10135: ST_TO_ADDR
// vc_control := control_manual ;
10136: LD_ADDR_OWVAR 38
10140: PUSH
10141: LD_INT 1
10143: ST_TO_ADDR
// vc_engine := engine_combustion ;
10144: LD_ADDR_OWVAR 39
10148: PUSH
10149: LD_INT 1
10151: ST_TO_ADDR
// uc_direction := 3 ;
10152: LD_ADDR_OWVAR 24
10156: PUSH
10157: LD_INT 3
10159: ST_TO_ADDR
// vc_fuel_battery := 60 ;
10160: LD_ADDR_OWVAR 41
10164: PUSH
10165: LD_INT 60
10167: ST_TO_ADDR
// rccar1 := CreateVehicle ;
10168: LD_ADDR_EXP 84
10172: PUSH
10173: CALL_OW 45
10177: ST_TO_ADDR
// rccar2 := CreateVehicle ;
10178: LD_ADDR_EXP 85
10182: PUSH
10183: CALL_OW 45
10187: ST_TO_ADDR
// rccar2 := CreateVehicle ;
10188: LD_ADDR_EXP 85
10192: PUSH
10193: CALL_OW 45
10197: ST_TO_ADDR
// PrepareSoldier ( sex_male , 3 ) ;
10198: LD_INT 1
10200: PPUSH
10201: LD_INT 3
10203: PPUSH
10204: CALL_OW 381
// rcman1 := CreateHuman ;
10208: LD_ADDR_EXP 87
10212: PUSH
10213: CALL_OW 44
10217: ST_TO_ADDR
// rcman2 := CreateHuman ;
10218: LD_ADDR_EXP 88
10222: PUSH
10223: CALL_OW 44
10227: ST_TO_ADDR
// rcman2 := CreateHuman ;
10228: LD_ADDR_EXP 88
10232: PUSH
10233: CALL_OW 44
10237: ST_TO_ADDR
// PlaceHumanInUnit ( rcman1 , rccar1 ) ;
10238: LD_EXP 87
10242: PPUSH
10243: LD_EXP 84
10247: PPUSH
10248: CALL_OW 52
// PlaceHumanInUnit ( rcman2 , rccar2 ) ;
10252: LD_EXP 88
10256: PPUSH
10257: LD_EXP 85
10261: PPUSH
10262: CALL_OW 52
// PlaceHumanInUnit ( rcman3 , rccar3 ) ;
10266: LD_EXP 89
10270: PPUSH
10271: LD_EXP 86
10275: PPUSH
10276: CALL_OW 52
// SetCargo ( [ rccar1 , rccar2 , rccar3 ] , mat_cans , 90 ) ;
10280: LD_EXP 84
10284: PUSH
10285: LD_EXP 85
10289: PUSH
10290: LD_EXP 86
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: LIST
10299: PPUSH
10300: LD_INT 1
10302: PPUSH
10303: LD_INT 90
10305: PPUSH
10306: CALL_OW 290
// PlaceUnitArea ( rccar1 , exit_a , false ) ;
10310: LD_EXP 84
10314: PPUSH
10315: LD_INT 20
10317: PPUSH
10318: LD_INT 0
10320: PPUSH
10321: CALL_OW 49
// PlaceUnitArea ( rccar2 , exit_a , false ) ;
10325: LD_EXP 85
10329: PPUSH
10330: LD_INT 20
10332: PPUSH
10333: LD_INT 0
10335: PPUSH
10336: CALL_OW 49
// PlaceUnitArea ( rccar3 , exit_a , false ) ;
10340: LD_EXP 86
10344: PPUSH
10345: LD_INT 20
10347: PPUSH
10348: LD_INT 0
10350: PPUSH
10351: CALL_OW 49
// end ; end_of_file
10355: LD_VAR 0 1
10359: RET
// export function get_x_best ( lidi , num , skill , mclass , idle ) ; var i , skills ; begin
10360: LD_INT 0
10362: PPUSH
10363: PPUSH
10364: PPUSH
// if mclass then
10365: LD_VAR 0 4
10369: IFFALSE 10401
// lidi := UnitFilter ( lidi , [ [ f_class , mclass ] ] ) ;
10371: LD_ADDR_VAR 0 1
10375: PUSH
10376: LD_VAR 0 1
10380: PPUSH
10381: LD_INT 25
10383: PUSH
10384: LD_VAR 0 4
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: PPUSH
10396: CALL_OW 72
10400: ST_TO_ADDR
// skills := [ ] ;
10401: LD_ADDR_VAR 0 8
10405: PUSH
10406: EMPTY
10407: ST_TO_ADDR
// for i in lidi do
10408: LD_ADDR_VAR 0 7
10412: PUSH
10413: LD_VAR 0 1
10417: PUSH
10418: FOR_IN
10419: IFFALSE 10452
// skills := skills ^ [ GetSkill ( i , skill ) ] ;
10421: LD_ADDR_VAR 0 8
10425: PUSH
10426: LD_VAR 0 8
10430: PUSH
10431: LD_VAR 0 7
10435: PPUSH
10436: LD_VAR 0 3
10440: PPUSH
10441: CALL_OW 259
10445: PUSH
10446: EMPTY
10447: LIST
10448: ADD
10449: ST_TO_ADDR
10450: GO 10418
10452: POP
10453: POP
// lidi := SortListByListDesc ( lidi , skills ) ;
10454: LD_ADDR_VAR 0 1
10458: PUSH
10459: LD_VAR 0 1
10463: PPUSH
10464: LD_VAR 0 8
10468: PPUSH
10469: CALL_OW 77
10473: ST_TO_ADDR
// if num > lidi then
10474: LD_VAR 0 2
10478: PUSH
10479: LD_VAR 0 1
10483: GREATER
10484: IFFALSE 10500
// num := lidi + 0 ;
10486: LD_ADDR_VAR 0 2
10490: PUSH
10491: LD_VAR 0 1
10495: PUSH
10496: LD_INT 0
10498: PLUS
10499: ST_TO_ADDR
// i := 1 ;
10500: LD_ADDR_VAR 0 7
10504: PUSH
10505: LD_INT 1
10507: ST_TO_ADDR
// result := [ ] ;
10508: LD_ADDR_VAR 0 6
10512: PUSH
10513: EMPTY
10514: ST_TO_ADDR
// while i <= lidi and result < num do
10515: LD_VAR 0 7
10519: PUSH
10520: LD_VAR 0 1
10524: LESSEQUAL
10525: PUSH
10526: LD_VAR 0 6
10530: PUSH
10531: LD_VAR 0 2
10535: LESS
10536: AND
10537: IFFALSE 10630
// begin if idle then
10539: LD_VAR 0 5
10543: IFFALSE 10589
// begin if IsIdle ( lidi [ i ] ) then
10545: LD_VAR 0 1
10549: PUSH
10550: LD_VAR 0 7
10554: ARRAY
10555: PPUSH
10556: CALL_OW 316
10560: IFFALSE 10587
// result := result ^ [ lidi [ i ] ] ;
10562: LD_ADDR_VAR 0 6
10566: PUSH
10567: LD_VAR 0 6
10571: PUSH
10572: LD_VAR 0 1
10576: PUSH
10577: LD_VAR 0 7
10581: ARRAY
10582: PUSH
10583: EMPTY
10584: LIST
10585: ADD
10586: ST_TO_ADDR
// end else
10587: GO 10614
// result := result ^ [ lidi [ i ] ] ;
10589: LD_ADDR_VAR 0 6
10593: PUSH
10594: LD_VAR 0 6
10598: PUSH
10599: LD_VAR 0 1
10603: PUSH
10604: LD_VAR 0 7
10608: ARRAY
10609: PUSH
10610: EMPTY
10611: LIST
10612: ADD
10613: ST_TO_ADDR
// i := i + 1 ;
10614: LD_ADDR_VAR 0 7
10618: PUSH
10619: LD_VAR 0 7
10623: PUSH
10624: LD_INT 1
10626: PLUS
10627: ST_TO_ADDR
// end ;
10628: GO 10515
// end ;
10630: LD_VAR 0 6
10634: RET
// export function SayAny ( lidi , ident , side , sex , Hclass , index ) ; var kdo ; begin
10635: LD_INT 0
10637: PPUSH
10638: PPUSH
// kdo := WhoSayAny ( lidi , side , sex , Hclass , index ) ;
10639: LD_ADDR_VAR 0 8
10643: PUSH
10644: LD_VAR 0 1
10648: PPUSH
10649: LD_VAR 0 3
10653: PPUSH
10654: LD_VAR 0 4
10658: PPUSH
10659: LD_VAR 0 5
10663: PPUSH
10664: LD_VAR 0 6
10668: PPUSH
10669: CALL 10715 0 5
10673: ST_TO_ADDR
// if kdo then
10674: LD_VAR 0 8
10678: IFFALSE 10702
// result := Say ( kdo , ident ) else
10680: LD_ADDR_VAR 0 7
10684: PUSH
10685: LD_VAR 0 8
10689: PPUSH
10690: LD_VAR 0 2
10694: PPUSH
10695: CALL_OW 88
10699: ST_TO_ADDR
10700: GO 10710
// result := false ;
10702: LD_ADDR_VAR 0 7
10706: PUSH
10707: LD_INT 0
10709: ST_TO_ADDR
// end ;
10710: LD_VAR 0 7
10714: RET
// export function WhoSayAny ( lidi , side , sex , Hclass , index ) ; begin
10715: LD_INT 0
10717: PPUSH
// lidi := UnitFilter ( lidi , [ [ f_type , unit_human ] , [ f_side , side ] , f_not , [ f_nation , nation_nature ] ] ) ;
10718: LD_ADDR_VAR 0 1
10722: PUSH
10723: LD_VAR 0 1
10727: PPUSH
10728: LD_INT 21
10730: PUSH
10731: LD_INT 1
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: LD_INT 22
10740: PUSH
10741: LD_VAR 0 2
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: PUSH
10750: LD_INT 3
10752: PUSH
10753: LD_INT 23
10755: PUSH
10756: LD_INT 0
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: PPUSH
10769: CALL_OW 72
10773: ST_TO_ADDR
// if sex <> 0 then
10774: LD_VAR 0 3
10778: PUSH
10779: LD_INT 0
10781: NONEQUAL
10782: IFFALSE 10811
// lidi := UnitFilter ( lidi , [ f_sex , sex ] ) ;
10784: LD_ADDR_VAR 0 1
10788: PUSH
10789: LD_VAR 0 1
10793: PPUSH
10794: LD_INT 26
10796: PUSH
10797: LD_VAR 0 3
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PPUSH
10806: CALL_OW 72
10810: ST_TO_ADDR
// if Hclass <> 0 then
10811: LD_VAR 0 4
10815: PUSH
10816: LD_INT 0
10818: NONEQUAL
10819: IFFALSE 10848
// lidi := UnitFilter ( lidi , [ f_class , Hclass ] ) ;
10821: LD_ADDR_VAR 0 1
10825: PUSH
10826: LD_VAR 0 1
10830: PPUSH
10831: LD_INT 25
10833: PUSH
10834: LD_VAR 0 4
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PPUSH
10843: CALL_OW 72
10847: ST_TO_ADDR
// if index <= 0 then
10848: LD_VAR 0 5
10852: PUSH
10853: LD_INT 0
10855: LESSEQUAL
10856: IFFALSE 10866
// index := 1 ;
10858: LD_ADDR_VAR 0 5
10862: PUSH
10863: LD_INT 1
10865: ST_TO_ADDR
// if lidi >= index then
10866: LD_VAR 0 1
10870: PUSH
10871: LD_VAR 0 5
10875: GREATEREQUAL
10876: IFFALSE 10896
// result := lidi [ index ] else
10878: LD_ADDR_VAR 0 6
10882: PUSH
10883: LD_VAR 0 1
10887: PUSH
10888: LD_VAR 0 5
10892: ARRAY
10893: ST_TO_ADDR
10894: GO 10904
// result := 0 ;
10896: LD_ADDR_VAR 0 6
10900: PUSH
10901: LD_INT 0
10903: ST_TO_ADDR
// end ;
10904: LD_VAR 0 6
10908: RET
// export function see_any ( strana , sez ) ; var i ; begin
10909: LD_INT 0
10911: PPUSH
10912: PPUSH
// result := [ ] ;
10913: LD_ADDR_VAR 0 3
10917: PUSH
10918: EMPTY
10919: ST_TO_ADDR
// for i in sez do
10920: LD_ADDR_VAR 0 4
10924: PUSH
10925: LD_VAR 0 2
10929: PUSH
10930: FOR_IN
10931: IFFALSE 10967
// if See ( strana , i ) then
10933: LD_VAR 0 1
10937: PPUSH
10938: LD_VAR 0 4
10942: PPUSH
10943: CALL_OW 292
10947: IFFALSE 10965
// begin result := result ^ i ;
10949: LD_ADDR_VAR 0 3
10953: PUSH
10954: LD_VAR 0 3
10958: PUSH
10959: LD_VAR 0 4
10963: ADD
10964: ST_TO_ADDR
// end ;
10965: GO 10930
10967: POP
10968: POP
// ; end ;
10969: LD_VAR 0 3
10973: RET
// export function TalkOn ; begin
10974: LD_INT 0
10976: PPUSH
// stop_talking := true ;
10977: LD_ADDR_OWVAR 56
10981: PUSH
10982: LD_INT 1
10984: ST_TO_ADDR
// end ;
10985: LD_VAR 0 1
10989: RET
// export function TalkOff ; begin
10990: LD_INT 0
10992: PPUSH
// stop_talking := false ;
10993: LD_ADDR_OWVAR 56
10997: PUSH
10998: LD_INT 0
11000: ST_TO_ADDR
// end ;
11001: LD_VAR 0 1
11005: RET
// export function FilterHumansInArea ( area , filter ) ; var inbase , i ; begin
11006: LD_INT 0
11008: PPUSH
11009: PPUSH
11010: PPUSH
// result := [ ] ;
11011: LD_ADDR_VAR 0 3
11015: PUSH
11016: EMPTY
11017: ST_TO_ADDR
// inbase := FilterUnitsInArea ( area , [ ] ) ;
11018: LD_ADDR_VAR 0 4
11022: PUSH
11023: LD_VAR 0 1
11027: PPUSH
11028: EMPTY
11029: PPUSH
11030: CALL_OW 70
11034: ST_TO_ADDR
// for i in inbase do
11035: LD_ADDR_VAR 0 5
11039: PUSH
11040: LD_VAR 0 4
11044: PUSH
11045: FOR_IN
11046: IFFALSE 11122
// begin if GetType ( i ) = unit_building or GetType ( i ) = unit_vehicle then
11048: LD_VAR 0 5
11052: PPUSH
11053: CALL_OW 247
11057: PUSH
11058: LD_INT 3
11060: EQUAL
11061: PUSH
11062: LD_VAR 0 5
11066: PPUSH
11067: CALL_OW 247
11071: PUSH
11072: LD_INT 2
11074: EQUAL
11075: OR
11076: IFFALSE 11101
// begin result := result ^ UnitsInside ( i ) ;
11078: LD_ADDR_VAR 0 3
11082: PUSH
11083: LD_VAR 0 3
11087: PUSH
11088: LD_VAR 0 5
11092: PPUSH
11093: CALL_OW 313
11097: ADD
11098: ST_TO_ADDR
// end else
11099: GO 11120
// begin result := result ^ [ i ] ;
11101: LD_ADDR_VAR 0 3
11105: PUSH
11106: LD_VAR 0 3
11110: PUSH
11111: LD_VAR 0 5
11115: PUSH
11116: EMPTY
11117: LIST
11118: ADD
11119: ST_TO_ADDR
// end ; end ;
11120: GO 11045
11122: POP
11123: POP
// result := UnitFilter ( result , filter ) ;
11124: LD_ADDR_VAR 0 3
11128: PUSH
11129: LD_VAR 0 3
11133: PPUSH
11134: LD_VAR 0 2
11138: PPUSH
11139: CALL_OW 72
11143: ST_TO_ADDR
// end ;
11144: LD_VAR 0 3
11148: RET
// export function inside_units ( uns ) ; var i ; begin
11149: LD_INT 0
11151: PPUSH
11152: PPUSH
// result := [ ] ;
11153: LD_ADDR_VAR 0 2
11157: PUSH
11158: EMPTY
11159: ST_TO_ADDR
// for i in uns do
11160: LD_ADDR_VAR 0 3
11164: PUSH
11165: LD_VAR 0 1
11169: PUSH
11170: FOR_IN
11171: IFFALSE 11196
// result := result ^ UnitsInside ( i ) ;
11173: LD_ADDR_VAR 0 2
11177: PUSH
11178: LD_VAR 0 2
11182: PUSH
11183: LD_VAR 0 3
11187: PPUSH
11188: CALL_OW 313
11192: ADD
11193: ST_TO_ADDR
11194: GO 11170
11196: POP
11197: POP
// end ;
11198: LD_VAR 0 2
11202: RET
// export function find_drivers ( cars , drivers , take_out ) ; var empty , free , i , konec ; begin
11203: LD_INT 0
11205: PPUSH
11206: PPUSH
11207: PPUSH
11208: PPUSH
11209: PPUSH
// cars := UnitFilter ( cars , [ f_alive ] ) union [ ] ;
11210: LD_ADDR_VAR 0 1
11214: PUSH
11215: LD_VAR 0 1
11219: PPUSH
11220: LD_INT 51
11222: PUSH
11223: EMPTY
11224: LIST
11225: PPUSH
11226: CALL_OW 72
11230: PUSH
11231: EMPTY
11232: UNION
11233: ST_TO_ADDR
// drivers := UnitFilter ( drivers , [ f_alive ] ) union [ ] ;
11234: LD_ADDR_VAR 0 2
11238: PUSH
11239: LD_VAR 0 2
11243: PPUSH
11244: LD_INT 51
11246: PUSH
11247: EMPTY
11248: LIST
11249: PPUSH
11250: CALL_OW 72
11254: PUSH
11255: EMPTY
11256: UNION
11257: ST_TO_ADDR
// for i in cars do
11258: LD_ADDR_VAR 0 7
11262: PUSH
11263: LD_VAR 0 1
11267: PUSH
11268: FOR_IN
11269: IFFALSE 11305
// if not IsDrivenBy ( i ) then
11271: LD_VAR 0 7
11275: PPUSH
11276: CALL_OW 311
11280: NOT
11281: IFFALSE 11303
// empty := add ( empty , i ) ;
11283: LD_ADDR_VAR 0 5
11287: PUSH
11288: LD_VAR 0 5
11292: PPUSH
11293: LD_VAR 0 7
11297: PPUSH
11298: CALL 11897 0 2
11302: ST_TO_ADDR
11303: GO 11268
11305: POP
11306: POP
// if take_out then
11307: LD_VAR 0 3
11311: IFFALSE 11370
// begin for i in drivers do
11313: LD_ADDR_VAR 0 7
11317: PUSH
11318: LD_VAR 0 2
11322: PUSH
11323: FOR_IN
11324: IFFALSE 11366
// if not ( IsInUnit ( i ) in cars ) then
11326: LD_VAR 0 7
11330: PPUSH
11331: CALL_OW 310
11335: PUSH
11336: LD_VAR 0 1
11340: IN
11341: NOT
11342: IFFALSE 11364
// free := add ( free , i ) ;
11344: LD_ADDR_VAR 0 6
11348: PUSH
11349: LD_VAR 0 6
11353: PPUSH
11354: LD_VAR 0 7
11358: PPUSH
11359: CALL 11897 0 2
11363: ST_TO_ADDR
11364: GO 11323
11366: POP
11367: POP
// end else
11368: GO 11419
// begin for i in drivers do
11370: LD_ADDR_VAR 0 7
11374: PUSH
11375: LD_VAR 0 2
11379: PUSH
11380: FOR_IN
11381: IFFALSE 11417
// if not IsInUnit ( i ) then
11383: LD_VAR 0 7
11387: PPUSH
11388: CALL_OW 310
11392: NOT
11393: IFFALSE 11415
// free := add ( free , i ) ;
11395: LD_ADDR_VAR 0 6
11399: PUSH
11400: LD_VAR 0 6
11404: PPUSH
11405: LD_VAR 0 7
11409: PPUSH
11410: CALL 11897 0 2
11414: ST_TO_ADDR
11415: GO 11380
11417: POP
11418: POP
// end ; result := cars diff empty ;
11419: LD_ADDR_VAR 0 4
11423: PUSH
11424: LD_VAR 0 1
11428: PUSH
11429: LD_VAR 0 5
11433: DIFF
11434: ST_TO_ADDR
// if empty <= free then
11435: LD_VAR 0 5
11439: PUSH
11440: LD_VAR 0 6
11444: LESSEQUAL
11445: IFFALSE 11459
// konec := empty else
11447: LD_ADDR_VAR 0 8
11451: PUSH
11452: LD_VAR 0 5
11456: ST_TO_ADDR
11457: GO 11469
// konec := free ;
11459: LD_ADDR_VAR 0 8
11463: PUSH
11464: LD_VAR 0 6
11468: ST_TO_ADDR
// for i := 1 to konec do
11469: LD_ADDR_VAR 0 7
11473: PUSH
11474: DOUBLE
11475: LD_INT 1
11477: DEC
11478: ST_TO_ADDR
11479: LD_VAR 0 8
11483: PUSH
11484: FOR_TO
11485: IFFALSE 11541
// begin ComEnterUnit ( free [ i ] , empty [ i ] ) ;
11487: LD_VAR 0 6
11491: PUSH
11492: LD_VAR 0 7
11496: ARRAY
11497: PPUSH
11498: LD_VAR 0 5
11502: PUSH
11503: LD_VAR 0 7
11507: ARRAY
11508: PPUSH
11509: CALL_OW 120
// result := add ( result , empty [ i ] ) ;
11513: LD_ADDR_VAR 0 4
11517: PUSH
11518: LD_VAR 0 4
11522: PPUSH
11523: LD_VAR 0 5
11527: PUSH
11528: LD_VAR 0 7
11532: ARRAY
11533: PPUSH
11534: CALL 11897 0 2
11538: ST_TO_ADDR
// end ;
11539: GO 11484
11541: POP
11542: POP
// end ;
11543: LD_VAR 0 4
11547: RET
// export function find_remotes ( cars , mechs , remotes ) ; var cas , i ; begin
11548: LD_INT 0
11550: PPUSH
11551: PPUSH
11552: PPUSH
// while remotes > mechs do
11553: LD_VAR 0 3
11557: PUSH
11558: LD_VAR 0 2
11562: GREATER
11563: IFFALSE 11579
// delete ( remotes , 1 ) ;
11565: LD_VAR 0 3
11569: PPUSH
11570: LD_INT 1
11572: PPUSH
11573: CALL_OW 3
11577: GO 11553
// for i := 1 to remotes do
11579: LD_ADDR_VAR 0 6
11583: PUSH
11584: DOUBLE
11585: LD_INT 1
11587: DEC
11588: ST_TO_ADDR
11589: LD_VAR 0 3
11593: PUSH
11594: FOR_TO
11595: IFFALSE 11625
// ComEnterUnit ( mechs [ i ] , remotes [ i ] ) ;
11597: LD_VAR 0 2
11601: PUSH
11602: LD_VAR 0 6
11606: ARRAY
11607: PPUSH
11608: LD_VAR 0 3
11612: PUSH
11613: LD_VAR 0 6
11617: ARRAY
11618: PPUSH
11619: CALL_OW 120
11623: GO 11594
11625: POP
11626: POP
// end ;
11627: LD_VAR 0 4
11631: RET
// export function wait_for_remotes ( cars , remotes , cas ) ; var c , unlinked , i ; begin
11632: LD_INT 0
11634: PPUSH
11635: PPUSH
11636: PPUSH
11637: PPUSH
// c := tick + cas ;
11638: LD_ADDR_VAR 0 5
11642: PUSH
11643: LD_OWVAR 1
11647: PUSH
11648: LD_VAR 0 3
11652: PLUS
11653: ST_TO_ADDR
// while tick < c and ( not ( inside_units ( remotes ) + 0 ) = remotes ) do
11654: LD_OWVAR 1
11658: PUSH
11659: LD_VAR 0 5
11663: LESS
11664: PUSH
11665: LD_VAR 0 2
11669: PPUSH
11670: CALL 11149 0 1
11674: PUSH
11675: LD_INT 0
11677: PLUS
11678: PUSH
11679: LD_VAR 0 2
11683: EQUAL
11684: NOT
11685: AND
11686: IFFALSE 11697
// wait ( 0 0$1 ) ;
11688: LD_INT 35
11690: PPUSH
11691: CALL_OW 67
11695: GO 11654
// unlinked := cars ;
11697: LD_ADDR_VAR 0 6
11701: PUSH
11702: LD_VAR 0 1
11706: ST_TO_ADDR
// for i in remotes do
11707: LD_ADDR_VAR 0 7
11711: PUSH
11712: LD_VAR 0 2
11716: PUSH
11717: FOR_IN
11718: IFFALSE 11767
// begin ComLinkTo ( unlinked , UnitsInside ( i ) ) ;
11720: LD_VAR 0 6
11724: PPUSH
11725: LD_VAR 0 7
11729: PPUSH
11730: CALL_OW 313
11734: PPUSH
11735: CALL_OW 135
// unlinked := unlinked diff UnitsLinked ( UnitsInside ( i ) ) ;
11739: LD_ADDR_VAR 0 6
11743: PUSH
11744: LD_VAR 0 6
11748: PUSH
11749: LD_VAR 0 7
11753: PPUSH
11754: CALL_OW 313
11758: PPUSH
11759: CALL_OW 432
11763: DIFF
11764: ST_TO_ADDR
// end ;
11765: GO 11717
11767: POP
11768: POP
// end ;
11769: LD_VAR 0 4
11773: RET
// export function wait_for_drivers ( cars , cas ) ; var i , vsichni_ready , k , pockat ; begin
11774: LD_INT 0
11776: PPUSH
11777: PPUSH
11778: PPUSH
11779: PPUSH
11780: PPUSH
// k := 0 ;
11781: LD_ADDR_VAR 0 6
11785: PUSH
11786: LD_INT 0
11788: ST_TO_ADDR
// pockat := tick + cas ;
11789: LD_ADDR_VAR 0 7
11793: PUSH
11794: LD_OWVAR 1
11798: PUSH
11799: LD_VAR 0 2
11803: PLUS
11804: ST_TO_ADDR
// while not vsichni_ready and tick < pockat do
11805: LD_VAR 0 5
11809: NOT
11810: PUSH
11811: LD_OWVAR 1
11815: PUSH
11816: LD_VAR 0 7
11820: LESS
11821: AND
11822: IFFALSE 11892
// begin vsichni_ready := true ;
11824: LD_ADDR_VAR 0 5
11828: PUSH
11829: LD_INT 1
11831: ST_TO_ADDR
// k := k + 1 ;
11832: LD_ADDR_VAR 0 6
11836: PUSH
11837: LD_VAR 0 6
11841: PUSH
11842: LD_INT 1
11844: PLUS
11845: ST_TO_ADDR
// for i in cars do
11846: LD_ADDR_VAR 0 4
11850: PUSH
11851: LD_VAR 0 1
11855: PUSH
11856: FOR_IN
11857: IFFALSE 11881
// if not IsDrivenBy ( i ) then
11859: LD_VAR 0 4
11863: PPUSH
11864: CALL_OW 311
11868: NOT
11869: IFFALSE 11879
// vsichni_ready := false ;
11871: LD_ADDR_VAR 0 5
11875: PUSH
11876: LD_INT 0
11878: ST_TO_ADDR
11879: GO 11856
11881: POP
11882: POP
// wait ( 0 0$1.0 ) ;
11883: LD_INT 35
11885: PPUSH
11886: CALL_OW 67
// end ;
11890: GO 11805
// end ;
11892: LD_VAR 0 3
11896: RET
// export function add ( list , list1 ) ; begin
11897: LD_INT 0
11899: PPUSH
// if list = 0 then
11900: LD_VAR 0 1
11904: PUSH
11905: LD_INT 0
11907: EQUAL
11908: IFFALSE 11917
// list := [ ] ;
11910: LD_ADDR_VAR 0 1
11914: PUSH
11915: EMPTY
11916: ST_TO_ADDR
// if list1 = 0 then
11917: LD_VAR 0 2
11921: PUSH
11922: LD_INT 0
11924: EQUAL
11925: IFFALSE 11934
// list1 := [ ] ;
11927: LD_ADDR_VAR 0 2
11931: PUSH
11932: EMPTY
11933: ST_TO_ADDR
// result := list ^ list1 ;
11934: LD_ADDR_VAR 0 3
11938: PUSH
11939: LD_VAR 0 1
11943: PUSH
11944: LD_VAR 0 2
11948: ADD
11949: ST_TO_ADDR
// end ;
11950: LD_VAR 0 3
11954: RET
// export function take_x ( list , x ) ; var i , r ; begin
11955: LD_INT 0
11957: PPUSH
11958: PPUSH
11959: PPUSH
// r := [ ] ;
11960: LD_ADDR_VAR 0 5
11964: PUSH
11965: EMPTY
11966: ST_TO_ADDR
// for i := 1 to x do
11967: LD_ADDR_VAR 0 4
11971: PUSH
11972: DOUBLE
11973: LD_INT 1
11975: DEC
11976: ST_TO_ADDR
11977: LD_VAR 0 2
11981: PUSH
11982: FOR_TO
11983: IFFALSE 12012
// r := r ^ [ list [ i ] ] ;
11985: LD_ADDR_VAR 0 5
11989: PUSH
11990: LD_VAR 0 5
11994: PUSH
11995: LD_VAR 0 1
11999: PUSH
12000: LD_VAR 0 4
12004: ARRAY
12005: PUSH
12006: EMPTY
12007: LIST
12008: ADD
12009: ST_TO_ADDR
12010: GO 11982
12012: POP
12013: POP
// result := r ;
12014: LD_ADDR_VAR 0 3
12018: PUSH
12019: LD_VAR 0 5
12023: ST_TO_ADDR
// end ;
12024: LD_VAR 0 3
12028: RET
// export hinty_co_byli ; export function MyHint ( ident ) ; begin
12029: LD_INT 0
12031: PPUSH
// if not hinty_co_byli then
12032: LD_EXP 90
12036: NOT
12037: IFFALSE 12046
// hinty_co_byli := [ ] ;
12039: LD_ADDR_EXP 90
12043: PUSH
12044: EMPTY
12045: ST_TO_ADDR
// if not ( ident in hinty_co_byli ) then
12046: LD_VAR 0 1
12050: PUSH
12051: LD_EXP 90
12055: IN
12056: NOT
12057: IFFALSE 12084
// begin hinty_co_byli := hinty_co_byli ^ ident ;
12059: LD_ADDR_EXP 90
12063: PUSH
12064: LD_EXP 90
12068: PUSH
12069: LD_VAR 0 1
12073: ADD
12074: ST_TO_ADDR
// Hint ( ident ) ;
12075: LD_VAR 0 1
12079: PPUSH
12080: CALL_OW 339
// end ; end ;
12084: LD_VAR 0 2
12088: RET
// export function BlockMarchNorth ; var i , x , y ; begin
12089: LD_INT 0
12091: PPUSH
12092: PPUSH
12093: PPUSH
12094: PPUSH
// for i in FilterUnitsInArea ( block_march , [ f_side , you ] ) do
12095: LD_ADDR_VAR 0 2
12099: PUSH
12100: LD_INT 30
12102: PPUSH
12103: LD_INT 22
12105: PUSH
12106: LD_EXP 1
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: PPUSH
12115: CALL_OW 70
12119: PUSH
12120: FOR_IN
12121: IFFALSE 12182
// begin x = GetX ( i ) ;
12123: LD_ADDR_VAR 0 3
12127: PUSH
12128: LD_VAR 0 2
12132: PPUSH
12133: CALL_OW 250
12137: ST_TO_ADDR
// y = GetY ( i ) ;
12138: LD_ADDR_VAR 0 4
12142: PUSH
12143: LD_VAR 0 2
12147: PPUSH
12148: CALL_OW 251
12152: ST_TO_ADDR
// ComMoveXY ( i , x + 3 , y + 5 ) ;
12153: LD_VAR 0 2
12157: PPUSH
12158: LD_VAR 0 3
12162: PUSH
12163: LD_INT 3
12165: PLUS
12166: PPUSH
12167: LD_VAR 0 4
12171: PUSH
12172: LD_INT 5
12174: PLUS
12175: PPUSH
12176: CALL_OW 111
// end ;
12180: GO 12120
12182: POP
12183: POP
// end ;
12184: LD_VAR 0 1
12188: RET
// export function DepotWithSiberite ; var i , your_depots ; begin
12189: LD_INT 0
12191: PPUSH
12192: PPUSH
12193: PPUSH
// your_depots = FilterAllUnits ( [ [ f_side , you ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12194: LD_ADDR_VAR 0 3
12198: PUSH
12199: LD_INT 22
12201: PUSH
12202: LD_EXP 1
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PUSH
12211: LD_INT 2
12213: PUSH
12214: LD_INT 30
12216: PUSH
12217: LD_INT 0
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 30
12226: PUSH
12227: LD_INT 1
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: LIST
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PPUSH
12243: CALL_OW 69
12247: ST_TO_ADDR
// for i in your_depots do
12248: LD_ADDR_VAR 0 2
12252: PUSH
12253: LD_VAR 0 3
12257: PUSH
12258: FOR_IN
12259: IFFALSE 12294
// begin if GetResourceType ( GetBase ( i ) , mat_siberit ) > 0 then
12261: LD_VAR 0 2
12265: PPUSH
12266: CALL_OW 274
12270: PPUSH
12271: LD_INT 3
12273: PPUSH
12274: CALL_OW 275
12278: PUSH
12279: LD_INT 0
12281: GREATER
12282: IFFALSE 12292
// begin result = true ;
12284: LD_ADDR_VAR 0 1
12288: PUSH
12289: LD_INT 1
12291: ST_TO_ADDR
// end ; end ;
12292: GO 12258
12294: POP
12295: POP
// end ;
12296: LD_VAR 0 1
12300: RET
// export function AttackVehicles ( side , vehicles ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
12301: LD_INT 0
12303: PPUSH
12304: PPUSH
12305: PPUSH
12306: PPUSH
12307: PPUSH
12308: PPUSH
12309: PPUSH
// if vehicles > 0 then
12310: LD_VAR 0 2
12314: PUSH
12315: LD_INT 0
12317: GREATER
12318: IFFALSE 12554
// repeat wait ( 0 0$1 ) ;
12320: LD_INT 35
12322: PPUSH
12323: CALL_OW 67
// vehiclesOK = UnitFilter ( vehicles , [ f_lives , 600 ] ) ;
12327: LD_ADDR_VAR 0 6
12331: PUSH
12332: LD_VAR 0 2
12336: PPUSH
12337: LD_INT 24
12339: PUSH
12340: LD_INT 600
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PPUSH
12347: CALL_OW 72
12351: ST_TO_ADDR
// for j in vehiclesOK do
12352: LD_ADDR_VAR 0 5
12356: PUSH
12357: LD_VAR 0 6
12361: PUSH
12362: FOR_IN
12363: IFFALSE 12542
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , side ] ] ) , j ) ;
12365: LD_ADDR_VAR 0 7
12369: PUSH
12370: LD_INT 22
12372: PUSH
12373: LD_VAR 0 1
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: PUSH
12382: EMPTY
12383: LIST
12384: PPUSH
12385: CALL_OW 69
12389: PPUSH
12390: LD_VAR 0 5
12394: PPUSH
12395: CALL_OW 74
12399: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
12400: LD_ADDR_VAR 0 8
12404: PUSH
12405: LD_INT 22
12407: PUSH
12408: LD_VAR 0 1
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PUSH
12417: LD_INT 2
12419: PUSH
12420: LD_INT 59
12422: PUSH
12423: EMPTY
12424: LIST
12425: PUSH
12426: LD_INT 21
12428: PUSH
12429: LD_INT 1
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: LD_INT 21
12438: PUSH
12439: LD_INT 2
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PUSH
12456: EMPTY
12457: LIST
12458: PPUSH
12459: CALL_OW 69
12463: PPUSH
12464: LD_VAR 0 5
12468: PPUSH
12469: CALL_OW 74
12473: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
12474: LD_VAR 0 5
12478: PPUSH
12479: LD_VAR 0 7
12483: PPUSH
12484: CALL_OW 296
12488: PUSH
12489: LD_INT 8
12491: PLUS
12492: PUSH
12493: LD_VAR 0 5
12497: PPUSH
12498: LD_VAR 0 8
12502: PPUSH
12503: CALL_OW 296
12507: LESS
12508: IFFALSE 12526
// ComAttackUnit ( j , target1 ) else
12510: LD_VAR 0 5
12514: PPUSH
12515: LD_VAR 0 7
12519: PPUSH
12520: CALL_OW 115
12524: GO 12540
// ComAttackUnit ( j , target2 ) ;
12526: LD_VAR 0 5
12530: PPUSH
12531: LD_VAR 0 8
12535: PPUSH
12536: CALL_OW 115
// end ;
12540: GO 12362
12542: POP
12543: POP
// until vehiclesOK = 0 ;
12544: LD_VAR 0 6
12548: PUSH
12549: LD_INT 0
12551: EQUAL
12552: IFFALSE 12320
// end ; end_of_file
12554: LD_VAR 0 3
12558: RET
// every 0 0$55 trigger vsevolod_vstoupil and not VsevolodSaved do var tmp ;
12559: LD_EXP 11
12563: PUSH
12564: LD_EXP 56
12568: NOT
12569: AND
12570: IFFALSE 12782
12572: GO 12574
12574: DISABLE
12575: LD_INT 0
12577: PPUSH
// begin while tmp <= 2 do
12578: LD_VAR 0 1
12582: PUSH
12583: LD_INT 2
12585: LESSEQUAL
12586: IFFALSE 12649
// begin tmp := UnitFilter ( attack , [ [ f_inarea , top_attack ] , [ f_side , ai ] , [ f_control , control_remote ] ] ) ;
12588: LD_ADDR_VAR 0 1
12592: PUSH
12593: LD_EXP 138
12597: PPUSH
12598: LD_INT 95
12600: PUSH
12601: LD_INT 23
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: PUSH
12608: LD_INT 22
12610: PUSH
12611: LD_EXP 6
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 33
12622: PUSH
12623: LD_INT 2
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: LIST
12634: PPUSH
12635: CALL_OW 72
12639: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12640: LD_INT 35
12642: PPUSH
12643: CALL_OW 67
// end ;
12647: GO 12578
// if tmp > 1 then
12649: LD_VAR 0 1
12653: PUSH
12654: LD_INT 1
12656: GREATER
12657: IFFALSE 12711
// if difficulty > 1 then
12659: LD_OWVAR 67
12663: PUSH
12664: LD_INT 1
12666: GREATER
12667: IFFALSE 12695
// zbytek := tmp [ 1 ] ^ tmp [ 2 ] else
12669: LD_ADDR_EXP 91
12673: PUSH
12674: LD_VAR 0 1
12678: PUSH
12679: LD_INT 1
12681: ARRAY
12682: PUSH
12683: LD_VAR 0 1
12687: PUSH
12688: LD_INT 2
12690: ARRAY
12691: ADD
12692: ST_TO_ADDR
12693: GO 12709
// zbytek := tmp [ 1 ] else
12695: LD_ADDR_EXP 91
12699: PUSH
12700: LD_VAR 0 1
12704: PUSH
12705: LD_INT 1
12707: ARRAY
12708: ST_TO_ADDR
12709: GO 12721
// zbytek := tmp ;
12711: LD_ADDR_EXP 91
12715: PUSH
12716: LD_VAR 0 1
12720: ST_TO_ADDR
// if tick > ( ( vsevolod_vstoupil + kolik_ma_vsevolod_casu ) - ( 2 2$0 * Vsevolod_uderna_group ) ) then
12721: LD_OWVAR 1
12725: PUSH
12726: LD_EXP 11
12730: PUSH
12731: LD_EXP 33
12735: PLUS
12736: PUSH
12737: LD_INT 4200
12739: PUSH
12740: LD_EXP 12
12744: MUL
12745: MINUS
12746: GREATER
12747: IFFALSE 12772
// ComExitBuilding ( Vsevolod_uderna_group [ Rand ( 1 , Vsevolod_uderna_group ) ] ) ;
12749: LD_EXP 12
12753: PUSH
12754: LD_INT 1
12756: PPUSH
12757: LD_EXP 12
12761: PPUSH
12762: CALL_OW 12
12766: ARRAY
12767: PPUSH
12768: CALL_OW 122
// RaiseSailEvent ( f_vsevolod_utok ) ;
12772: CALL 14744 0 0
12776: PPUSH
12777: CALL_OW 427
// enable ;
12781: ENABLE
// end ;
12782: PPOPN 1
12784: END
// every 0 0$2 trigger ( vsevolod_vstoupil and tick > ( vsevolod_vstoupil + kolik_ma_vsevolod_casu ) ) do var i ;
12785: LD_EXP 11
12789: PUSH
12790: LD_OWVAR 1
12794: PUSH
12795: LD_EXP 11
12799: PUSH
12800: LD_EXP 33
12804: PLUS
12805: GREATER
12806: AND
12807: IFFALSE 12954
12809: GO 12811
12811: DISABLE
12812: LD_INT 0
12814: PPUSH
// begin while IsLive ( Vsevolod ) and not VsevolodSaved do
12815: LD_EXP 70
12819: PPUSH
12820: CALL_OW 300
12824: PUSH
12825: LD_EXP 56
12829: NOT
12830: AND
12831: IFFALSE 12954
// begin ComExitBuilding ( Vsevolod_uderna_group ^ [ Vsevolod ] ) ;
12833: LD_EXP 12
12837: PUSH
12838: LD_EXP 70
12842: PUSH
12843: EMPTY
12844: LIST
12845: ADD
12846: PPUSH
12847: CALL_OW 122
// for i in Vsevolod_uderna_group ^ [ Vsevolod ] do
12851: LD_ADDR_VAR 0 1
12855: PUSH
12856: LD_EXP 12
12860: PUSH
12861: LD_EXP 70
12865: PUSH
12866: EMPTY
12867: LIST
12868: ADD
12869: PUSH
12870: FOR_IN
12871: IFFALSE 12889
// PriorityAttack ( ai , i ) ;
12873: LD_EXP 6
12877: PPUSH
12878: LD_VAR 0 1
12882: PPUSH
12883: CALL_OW 470
12887: GO 12870
12889: POP
12890: POP
// zbytek := FilterUnitsInArea ( top_attack , [ [ f_side , ai ] , [ f_control , control_remote ] ] ) isect attack ;
12891: LD_ADDR_EXP 91
12895: PUSH
12896: LD_INT 23
12898: PPUSH
12899: LD_INT 22
12901: PUSH
12902: LD_EXP 6
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PUSH
12911: LD_INT 33
12913: PUSH
12914: LD_INT 2
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PPUSH
12925: CALL_OW 70
12929: PUSH
12930: LD_EXP 138
12934: ISECT
12935: ST_TO_ADDR
// RaiseSailEvent ( f_vsevolod_final_utok ) ;
12936: CALL 15080 0 0
12940: PPUSH
12941: CALL_OW 427
// wait ( 0 0$30 ) ;
12945: LD_INT 1050
12947: PPUSH
12948: CALL_OW 67
// end ;
12952: GO 12815
// end ;
12954: PPOPN 1
12956: END
// export zbytek ; every 0 0$10 trigger ovsyenkotaken and tick > ( ovsyenkotaken + cas_prvniho_utoku ) and ( ( tick > 20 20$0 and attack >= 3 ) or attack >= 4 ) do var i , max ;
12957: LD_EXP 14
12961: PUSH
12962: LD_OWVAR 1
12966: PUSH
12967: LD_EXP 14
12971: PUSH
12972: LD_EXP 32
12976: PLUS
12977: GREATER
12978: AND
12979: PUSH
12980: LD_OWVAR 1
12984: PUSH
12985: LD_INT 42000
12987: GREATER
12988: PUSH
12989: LD_EXP 138
12993: PUSH
12994: LD_INT 3
12996: GREATEREQUAL
12997: AND
12998: PUSH
12999: LD_EXP 138
13003: PUSH
13004: LD_INT 4
13006: GREATEREQUAL
13007: OR
13008: AND
13009: IFFALSE 13216
13011: GO 13013
13013: DISABLE
13014: LD_INT 0
13016: PPUSH
13017: PPUSH
// begin zbytek := [ ] ;
13018: LD_ADDR_EXP 91
13022: PUSH
13023: EMPTY
13024: ST_TO_ADDR
// max := utoci_max ;
13025: LD_ADDR_VAR 0 2
13029: PUSH
13030: LD_EXP 39
13034: ST_TO_ADDR
// if max > attack then
13035: LD_VAR 0 2
13039: PUSH
13040: LD_EXP 138
13044: GREATER
13045: IFFALSE 13061
// max := attack + 0 ;
13047: LD_ADDR_VAR 0 2
13051: PUSH
13052: LD_EXP 138
13056: PUSH
13057: LD_INT 0
13059: PLUS
13060: ST_TO_ADDR
// for i := 1 to max do
13061: LD_ADDR_VAR 0 1
13065: PUSH
13066: DOUBLE
13067: LD_INT 1
13069: DEC
13070: ST_TO_ADDR
13071: LD_VAR 0 2
13075: PUSH
13076: FOR_TO
13077: IFFALSE 13103
// zbytek := zbytek ^ attack [ i ] ;
13079: LD_ADDR_EXP 91
13083: PUSH
13084: LD_EXP 91
13088: PUSH
13089: LD_EXP 138
13093: PUSH
13094: LD_VAR 0 1
13098: ARRAY
13099: ADD
13100: ST_TO_ADDR
13101: GO 13076
13103: POP
13104: POP
// ComReturn ( mec ) ;
13105: LD_EXP 125
13109: PPUSH
13110: CALL_OW 144
// case Rand ( 1 , 4 ) of 1 :
13114: LD_INT 1
13116: PPUSH
13117: LD_INT 4
13119: PPUSH
13120: CALL_OW 12
13124: PUSH
13125: LD_INT 1
13127: DOUBLE
13128: EQUAL
13129: IFTRUE 13133
13131: GO 13145
13133: POP
// RaiseSailEvent ( normal1_utok ) ; 2 :
13134: LD_EXP 24
13138: PPUSH
13139: CALL_OW 427
13143: GO 13206
13145: LD_INT 2
13147: DOUBLE
13148: EQUAL
13149: IFTRUE 13153
13151: GO 13165
13153: POP
// RaiseSailEvent ( normal2_utok ) ; 3 :
13154: LD_EXP 25
13158: PPUSH
13159: CALL_OW 427
13163: GO 13206
13165: LD_INT 3
13167: DOUBLE
13168: EQUAL
13169: IFTRUE 13173
13171: GO 13185
13173: POP
// RaiseSailEvent ( normal3_utok ) ; 4 :
13174: LD_EXP 26
13178: PPUSH
13179: CALL_OW 427
13183: GO 13206
13185: LD_INT 4
13187: DOUBLE
13188: EQUAL
13189: IFTRUE 13193
13191: GO 13205
13193: POP
// RaiseSailEvent ( normal4_utok ) ; end ;
13194: LD_EXP 27
13198: PPUSH
13199: CALL_OW 427
13203: GO 13206
13205: POP
// wait ( cas_mezi_utoky ) ;
13206: LD_EXP 31
13210: PPUSH
13211: CALL_OW 67
// enable ;
13215: ENABLE
// end ;
13216: PPOPN 2
13218: END
// export rAtt1 , idAtt1 , toAtt1 ; every 0 0$1 do var i , a ;
13219: GO 13221
13221: DISABLE
13222: LD_INT 0
13224: PPUSH
13225: PPUSH
// begin rAtt1 := McRegistry ( ai , [ [ mc_reg_refresh_time , 0 0$2 ] , [ mc_reg_area_to_guard , mc_attack ] , [ mc_reg_area_to_protect , def_base3 ] , mc_reg_only_important ] ) ;
13226: LD_ADDR_EXP 92
13230: PUSH
13231: LD_EXP 6
13235: PPUSH
13236: LD_INT 1
13238: PUSH
13239: LD_INT 70
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PUSH
13246: LD_INT 2
13248: PUSH
13249: LD_INT 26
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: PUSH
13256: LD_INT 3
13258: PUSH
13259: LD_INT 18
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PUSH
13266: LD_INT 8
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: PPUSH
13275: CALL_OW 399
13279: ST_TO_ADDR
// idAtt1 := McAttack ( 5 , rAtt1 , toAtt1 , [ mc_def_advantage , mcatt_difficulty ] ) ;
13280: LD_ADDR_EXP 93
13284: PUSH
13285: LD_INT 5
13287: PPUSH
13288: LD_EXP 92
13292: PPUSH
13293: LD_EXP 94
13297: PPUSH
13298: LD_INT 1
13300: PUSH
13301: LD_EXP 17
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PPUSH
13310: CALL_OW 402
13314: ST_TO_ADDR
// end ;
13315: PPOPN 2
13317: END
// every 0 0$2 do
13318: GO 13320
13320: DISABLE
// begin toAtt1 := UnitFilter ( attack , [ [ f_inarea , mc_attack ] , [ f_side , ai ] ] ) ;
13321: LD_ADDR_EXP 94
13325: PUSH
13326: LD_EXP 138
13330: PPUSH
13331: LD_INT 95
13333: PUSH
13334: LD_INT 26
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: PUSH
13341: LD_INT 22
13343: PUSH
13344: LD_EXP 6
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PPUSH
13357: CALL_OW 72
13361: ST_TO_ADDR
// if OvsyenkoTaken then
13362: LD_EXP 14
13366: IFFALSE 13382
// AddMcUnits ( idAtt1 , toAtt1 ) ;
13368: LD_EXP 93
13372: PPUSH
13373: LD_EXP 94
13377: PPUSH
13378: CALL_OW 390
// enable ;
13382: ENABLE
// end ;
13383: END
// export function f_normal1_utok ; var path , i ; begin
13384: LD_INT 0
13386: PPUSH
13387: PPUSH
13388: PPUSH
// path := [ [ 66 , 86 ] , [ 91 , 95 ] ] ;
13389: LD_ADDR_VAR 0 2
13393: PUSH
13394: LD_INT 66
13396: PUSH
13397: LD_INT 86
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 91
13406: PUSH
13407: LD_INT 95
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: ST_TO_ADDR
// find_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) , false ) ;
13418: LD_EXP 91
13422: PPUSH
13423: LD_INT 3
13425: PUSH
13426: LD_INT 33
13428: PUSH
13429: LD_INT 2
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: PPUSH
13440: CALL_OW 72
13444: PPUSH
13445: LD_INT 22
13447: PUSH
13448: LD_EXP 6
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PUSH
13457: LD_INT 25
13459: PUSH
13460: LD_INT 1
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PPUSH
13471: CALL_OW 69
13475: PPUSH
13476: LD_INT 0
13478: PPUSH
13479: CALL 11203 0 3
// find_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) ) ;
13483: LD_EXP 91
13487: PPUSH
13488: LD_INT 33
13490: PUSH
13491: LD_INT 2
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: EMPTY
13499: LIST
13500: PPUSH
13501: CALL_OW 72
13505: PPUSH
13506: LD_INT 22
13508: PUSH
13509: LD_EXP 6
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 25
13520: PUSH
13521: LD_INT 3
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PPUSH
13532: CALL_OW 69
13536: PPUSH
13537: LD_INT 34
13539: PUSH
13540: LD_INT 30
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: EMPTY
13548: LIST
13549: PPUSH
13550: CALL_OW 69
13554: PPUSH
13555: CALL 11548 0 3
// wait_for_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , 0 0$30 ) ;
13559: LD_EXP 91
13563: PPUSH
13564: LD_INT 3
13566: PUSH
13567: LD_INT 33
13569: PUSH
13570: LD_INT 2
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PPUSH
13581: CALL_OW 72
13585: PPUSH
13586: LD_INT 1050
13588: PPUSH
13589: CALL 11774 0 2
// wait_for_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) , 0 0$30 ) ;
13593: LD_EXP 91
13597: PPUSH
13598: LD_INT 33
13600: PUSH
13601: LD_INT 2
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: EMPTY
13609: LIST
13610: PPUSH
13611: CALL_OW 72
13615: PPUSH
13616: LD_INT 34
13618: PUSH
13619: LD_INT 30
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: EMPTY
13627: LIST
13628: PPUSH
13629: CALL_OW 69
13633: PPUSH
13634: LD_INT 1050
13636: PPUSH
13637: CALL 11632 0 3
// ComStop ( zbytek ) ;
13641: LD_EXP 91
13645: PPUSH
13646: CALL_OW 141
// AttackVehicles ( 3 , zbytek ) ;
13650: LD_INT 3
13652: PPUSH
13653: LD_EXP 91
13657: PPUSH
13658: CALL 12301 0 2
// if not byl_hint_PA then
13662: LD_EXP 95
13666: NOT
13667: IFFALSE 13708
// begin while not ContactTime ( [ ai ] ) do
13669: LD_EXP 6
13673: PUSH
13674: EMPTY
13675: LIST
13676: PPUSH
13677: CALL_OW 462
13681: NOT
13682: IFFALSE 13693
// wait ( 0 0$1 ) ;
13684: LD_INT 35
13686: PPUSH
13687: CALL_OW 67
13691: GO 13669
// MyHint ( PriorityAttacks ) ;
13693: LD_STRING PriorityAttacks
13695: PPUSH
13696: CALL 12029 0 1
// byl_hint_PA := true ;
13700: LD_ADDR_EXP 95
13704: PUSH
13705: LD_INT 1
13707: ST_TO_ADDR
// end ; end ;
13708: LD_VAR 0 1
13712: RET
// export byl_hint_PA ; export function f_normal2_utok ; var path , i ; begin
13713: LD_INT 0
13715: PPUSH
13716: PPUSH
13717: PPUSH
// path := [ [ 66 , 86 ] , [ 109 , 128 ] , [ 91 , 95 ] ] ;
13718: LD_ADDR_VAR 0 2
13722: PUSH
13723: LD_INT 66
13725: PUSH
13726: LD_INT 86
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: LD_INT 109
13735: PUSH
13736: LD_INT 128
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: PUSH
13743: LD_INT 91
13745: PUSH
13746: LD_INT 95
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: LIST
13757: ST_TO_ADDR
// find_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) , false ) ;
13758: LD_EXP 91
13762: PPUSH
13763: LD_INT 3
13765: PUSH
13766: LD_INT 33
13768: PUSH
13769: LD_INT 2
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PPUSH
13780: CALL_OW 72
13784: PPUSH
13785: LD_INT 22
13787: PUSH
13788: LD_EXP 6
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PUSH
13797: LD_INT 25
13799: PUSH
13800: LD_INT 1
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PPUSH
13811: CALL_OW 69
13815: PPUSH
13816: LD_INT 0
13818: PPUSH
13819: CALL 11203 0 3
// find_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) ) ;
13823: LD_EXP 91
13827: PPUSH
13828: LD_INT 33
13830: PUSH
13831: LD_INT 2
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PUSH
13838: EMPTY
13839: LIST
13840: PPUSH
13841: CALL_OW 72
13845: PPUSH
13846: LD_INT 22
13848: PUSH
13849: LD_EXP 6
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PUSH
13858: LD_INT 25
13860: PUSH
13861: LD_INT 3
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PPUSH
13872: CALL_OW 69
13876: PPUSH
13877: LD_INT 34
13879: PUSH
13880: LD_INT 30
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: PUSH
13887: EMPTY
13888: LIST
13889: PPUSH
13890: CALL_OW 69
13894: PPUSH
13895: CALL 11548 0 3
// wait_for_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , 0 0$30 ) ;
13899: LD_EXP 91
13903: PPUSH
13904: LD_INT 3
13906: PUSH
13907: LD_INT 33
13909: PUSH
13910: LD_INT 2
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PPUSH
13921: CALL_OW 72
13925: PPUSH
13926: LD_INT 1050
13928: PPUSH
13929: CALL 11774 0 2
// wait_for_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) , 0 0$30 ) ;
13933: LD_EXP 91
13937: PPUSH
13938: LD_INT 33
13940: PUSH
13941: LD_INT 2
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PUSH
13948: EMPTY
13949: LIST
13950: PPUSH
13951: CALL_OW 72
13955: PPUSH
13956: LD_INT 34
13958: PUSH
13959: LD_INT 30
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: PUSH
13966: EMPTY
13967: LIST
13968: PPUSH
13969: CALL_OW 69
13973: PPUSH
13974: LD_INT 1050
13976: PPUSH
13977: CALL 11632 0 3
// ComStop ( zbytek ) ;
13981: LD_EXP 91
13985: PPUSH
13986: CALL_OW 141
// AttackVehicles ( 3 , zbytek ) ;
13990: LD_INT 3
13992: PPUSH
13993: LD_EXP 91
13997: PPUSH
13998: CALL 12301 0 2
// if not byl_hint_PA then
14002: LD_EXP 95
14006: NOT
14007: IFFALSE 14048
// begin while not ContactTime ( [ ai ] ) do
14009: LD_EXP 6
14013: PUSH
14014: EMPTY
14015: LIST
14016: PPUSH
14017: CALL_OW 462
14021: NOT
14022: IFFALSE 14033
// wait ( 0 0$1 ) ;
14024: LD_INT 35
14026: PPUSH
14027: CALL_OW 67
14031: GO 14009
// MyHint ( PriorityAttacks ) ;
14033: LD_STRING PriorityAttacks
14035: PPUSH
14036: CALL 12029 0 1
// byl_hint_PA := true ;
14040: LD_ADDR_EXP 95
14044: PUSH
14045: LD_INT 1
14047: ST_TO_ADDR
// end ; end ;
14048: LD_VAR 0 1
14052: RET
// export function f_normal3_utok ; var path , i ; begin
14053: LD_INT 0
14055: PPUSH
14056: PPUSH
14057: PPUSH
// path := [ [ 66 , 86 ] , [ 109 , 128 ] , [ 110 , 88 ] , [ 91 , 95 ] ] ;
14058: LD_ADDR_VAR 0 2
14062: PUSH
14063: LD_INT 66
14065: PUSH
14066: LD_INT 86
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PUSH
14073: LD_INT 109
14075: PUSH
14076: LD_INT 128
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PUSH
14083: LD_INT 110
14085: PUSH
14086: LD_INT 88
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PUSH
14093: LD_INT 91
14095: PUSH
14096: LD_INT 95
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: ST_TO_ADDR
// find_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) , false ) ;
14109: LD_EXP 91
14113: PPUSH
14114: LD_INT 3
14116: PUSH
14117: LD_INT 33
14119: PUSH
14120: LD_INT 2
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PPUSH
14131: CALL_OW 72
14135: PPUSH
14136: LD_INT 22
14138: PUSH
14139: LD_EXP 6
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: PUSH
14148: LD_INT 25
14150: PUSH
14151: LD_INT 1
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: PPUSH
14162: CALL_OW 69
14166: PPUSH
14167: LD_INT 0
14169: PPUSH
14170: CALL 11203 0 3
// find_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) ) ;
14174: LD_EXP 91
14178: PPUSH
14179: LD_INT 33
14181: PUSH
14182: LD_INT 2
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PUSH
14189: EMPTY
14190: LIST
14191: PPUSH
14192: CALL_OW 72
14196: PPUSH
14197: LD_INT 22
14199: PUSH
14200: LD_EXP 6
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: LD_INT 25
14211: PUSH
14212: LD_INT 3
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PPUSH
14223: CALL_OW 69
14227: PPUSH
14228: LD_INT 34
14230: PUSH
14231: LD_INT 30
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PUSH
14238: EMPTY
14239: LIST
14240: PPUSH
14241: CALL_OW 69
14245: PPUSH
14246: CALL 11548 0 3
// wait_for_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , 0 0$30 ) ;
14250: LD_EXP 91
14254: PPUSH
14255: LD_INT 3
14257: PUSH
14258: LD_INT 33
14260: PUSH
14261: LD_INT 2
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PPUSH
14272: CALL_OW 72
14276: PPUSH
14277: LD_INT 1050
14279: PPUSH
14280: CALL 11774 0 2
// wait_for_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) , 0 0$30 ) ;
14284: LD_EXP 91
14288: PPUSH
14289: LD_INT 33
14291: PUSH
14292: LD_INT 2
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: EMPTY
14300: LIST
14301: PPUSH
14302: CALL_OW 72
14306: PPUSH
14307: LD_INT 34
14309: PUSH
14310: LD_INT 30
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PUSH
14317: EMPTY
14318: LIST
14319: PPUSH
14320: CALL_OW 69
14324: PPUSH
14325: LD_INT 1050
14327: PPUSH
14328: CALL 11632 0 3
// ComStop ( zbytek ) ;
14332: LD_EXP 91
14336: PPUSH
14337: CALL_OW 141
// AttackVehicles ( 3 , zbytek ) ;
14341: LD_INT 3
14343: PPUSH
14344: LD_EXP 91
14348: PPUSH
14349: CALL 12301 0 2
// if not byl_hint_PA then
14353: LD_EXP 95
14357: NOT
14358: IFFALSE 14399
// begin while not ContactTime ( [ ai ] ) do
14360: LD_EXP 6
14364: PUSH
14365: EMPTY
14366: LIST
14367: PPUSH
14368: CALL_OW 462
14372: NOT
14373: IFFALSE 14384
// wait ( 0 0$1 ) ;
14375: LD_INT 35
14377: PPUSH
14378: CALL_OW 67
14382: GO 14360
// MyHint ( PriorityAttacks ) ;
14384: LD_STRING PriorityAttacks
14386: PPUSH
14387: CALL 12029 0 1
// byl_hint_PA := true ;
14391: LD_ADDR_EXP 95
14395: PUSH
14396: LD_INT 1
14398: ST_TO_ADDR
// end ; end ;
14399: LD_VAR 0 1
14403: RET
// export function f_normal4_utok ; var path , i ; begin
14404: LD_INT 0
14406: PPUSH
14407: PPUSH
14408: PPUSH
// path := [ [ 38 , 16 ] , [ 75 , 36 ] , [ 91 , 95 ] ] ;
14409: LD_ADDR_VAR 0 2
14413: PUSH
14414: LD_INT 38
14416: PUSH
14417: LD_INT 16
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: PUSH
14424: LD_INT 75
14426: PUSH
14427: LD_INT 36
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: PUSH
14434: LD_INT 91
14436: PUSH
14437: LD_INT 95
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: LIST
14448: ST_TO_ADDR
// find_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) , false ) ;
14449: LD_EXP 91
14453: PPUSH
14454: LD_INT 3
14456: PUSH
14457: LD_INT 33
14459: PUSH
14460: LD_INT 2
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PPUSH
14471: CALL_OW 72
14475: PPUSH
14476: LD_INT 22
14478: PUSH
14479: LD_EXP 6
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PUSH
14488: LD_INT 25
14490: PUSH
14491: LD_INT 1
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: PPUSH
14502: CALL_OW 69
14506: PPUSH
14507: LD_INT 0
14509: PPUSH
14510: CALL 11203 0 3
// find_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) ) ;
14514: LD_EXP 91
14518: PPUSH
14519: LD_INT 33
14521: PUSH
14522: LD_INT 2
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PUSH
14529: EMPTY
14530: LIST
14531: PPUSH
14532: CALL_OW 72
14536: PPUSH
14537: LD_INT 22
14539: PUSH
14540: LD_EXP 6
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: PUSH
14549: LD_INT 25
14551: PUSH
14552: LD_INT 3
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: PPUSH
14563: CALL_OW 69
14567: PPUSH
14568: LD_INT 34
14570: PUSH
14571: LD_INT 30
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: PUSH
14578: EMPTY
14579: LIST
14580: PPUSH
14581: CALL_OW 69
14585: PPUSH
14586: CALL 11548 0 3
// wait_for_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , 0 0$30 ) ;
14590: LD_EXP 91
14594: PPUSH
14595: LD_INT 3
14597: PUSH
14598: LD_INT 33
14600: PUSH
14601: LD_INT 2
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PPUSH
14612: CALL_OW 72
14616: PPUSH
14617: LD_INT 1050
14619: PPUSH
14620: CALL 11774 0 2
// wait_for_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) , 0 0$30 ) ;
14624: LD_EXP 91
14628: PPUSH
14629: LD_INT 33
14631: PUSH
14632: LD_INT 2
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PUSH
14639: EMPTY
14640: LIST
14641: PPUSH
14642: CALL_OW 72
14646: PPUSH
14647: LD_INT 34
14649: PUSH
14650: LD_INT 30
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: PUSH
14657: EMPTY
14658: LIST
14659: PPUSH
14660: CALL_OW 69
14664: PPUSH
14665: LD_INT 1050
14667: PPUSH
14668: CALL 11632 0 3
// ComStop ( zbytek ) ;
14672: LD_EXP 91
14676: PPUSH
14677: CALL_OW 141
// AttackVehicles ( 3 , zbytek ) ;
14681: LD_INT 3
14683: PPUSH
14684: LD_EXP 91
14688: PPUSH
14689: CALL 12301 0 2
// if not byl_hint_PA then
14693: LD_EXP 95
14697: NOT
14698: IFFALSE 14739
// begin while not ContactTime ( [ ai ] ) do
14700: LD_EXP 6
14704: PUSH
14705: EMPTY
14706: LIST
14707: PPUSH
14708: CALL_OW 462
14712: NOT
14713: IFFALSE 14724
// wait ( 0 0$1 ) ;
14715: LD_INT 35
14717: PPUSH
14718: CALL_OW 67
14722: GO 14700
// MyHint ( PriorityAttacks ) ;
14724: LD_STRING PriorityAttacks
14726: PPUSH
14727: CALL 12029 0 1
// byl_hint_PA := true ;
14731: LD_ADDR_EXP 95
14735: PUSH
14736: LD_INT 1
14738: ST_TO_ADDR
// end ; end ;
14739: LD_VAR 0 1
14743: RET
// export function f_vsevolod_utok ; var path , i ; begin
14744: LD_INT 0
14746: PPUSH
14747: PPUSH
14748: PPUSH
// path := [ [ 43 , 17 ] , [ 41 , 7 ] ] ;
14749: LD_ADDR_VAR 0 2
14753: PUSH
14754: LD_INT 43
14756: PUSH
14757: LD_INT 17
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PUSH
14764: LD_INT 41
14766: PUSH
14767: LD_INT 7
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: ST_TO_ADDR
// find_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) , false ) ;
14778: LD_EXP 91
14782: PPUSH
14783: LD_INT 3
14785: PUSH
14786: LD_INT 33
14788: PUSH
14789: LD_INT 2
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PPUSH
14800: CALL_OW 72
14804: PPUSH
14805: LD_INT 22
14807: PUSH
14808: LD_EXP 6
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 25
14819: PUSH
14820: LD_INT 1
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PPUSH
14831: CALL_OW 69
14835: PPUSH
14836: LD_INT 0
14838: PPUSH
14839: CALL 11203 0 3
// find_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) ) ;
14843: LD_EXP 91
14847: PPUSH
14848: LD_INT 33
14850: PUSH
14851: LD_INT 2
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: PUSH
14858: EMPTY
14859: LIST
14860: PPUSH
14861: CALL_OW 72
14865: PPUSH
14866: LD_INT 22
14868: PUSH
14869: LD_EXP 6
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: LD_INT 25
14880: PUSH
14881: LD_INT 3
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PPUSH
14892: CALL_OW 69
14896: PPUSH
14897: LD_INT 34
14899: PUSH
14900: LD_INT 30
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: PUSH
14907: EMPTY
14908: LIST
14909: PPUSH
14910: CALL_OW 69
14914: PPUSH
14915: CALL 11548 0 3
// wait_for_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , 0 0$30 ) ;
14919: LD_EXP 91
14923: PPUSH
14924: LD_INT 3
14926: PUSH
14927: LD_INT 33
14929: PUSH
14930: LD_INT 2
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PPUSH
14941: CALL_OW 72
14945: PPUSH
14946: LD_INT 1050
14948: PPUSH
14949: CALL 11774 0 2
// wait_for_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) , 0 0$30 ) ;
14953: LD_EXP 91
14957: PPUSH
14958: LD_INT 33
14960: PUSH
14961: LD_INT 2
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: PPUSH
14971: CALL_OW 72
14975: PPUSH
14976: LD_INT 34
14978: PUSH
14979: LD_INT 30
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: EMPTY
14987: LIST
14988: PPUSH
14989: CALL_OW 69
14993: PPUSH
14994: LD_INT 1050
14996: PPUSH
14997: CALL 11632 0 3
// ComStop ( zbytek ) ;
15001: LD_EXP 91
15005: PPUSH
15006: CALL_OW 141
// for i in path do
15010: LD_ADDR_VAR 0 3
15014: PUSH
15015: LD_VAR 0 2
15019: PUSH
15020: FOR_IN
15021: IFFALSE 15052
// AddComAgressiveMove ( zbytek , i [ 1 ] , i [ 2 ] ) ;
15023: LD_EXP 91
15027: PPUSH
15028: LD_VAR 0 3
15032: PUSH
15033: LD_INT 1
15035: ARRAY
15036: PPUSH
15037: LD_VAR 0 3
15041: PUSH
15042: LD_INT 2
15044: ARRAY
15045: PPUSH
15046: CALL_OW 174
15050: GO 15020
15052: POP
15053: POP
// AddComWait ( zbytek , 0 0$5 ) ;
15054: LD_EXP 91
15058: PPUSH
15059: LD_INT 175
15061: PPUSH
15062: CALL_OW 202
// AddComReturn ( zbytek ) ;
15066: LD_EXP 91
15070: PPUSH
15071: CALL_OW 204
// end ;
15075: LD_VAR 0 1
15079: RET
// export function f_vsevolod_final_utok ; var path , i ; begin
15080: LD_INT 0
15082: PPUSH
15083: PPUSH
15084: PPUSH
// path := [ [ 43 , 17 ] , [ 41 , 7 ] , [ 52 , 7 ] ] ;
15085: LD_ADDR_VAR 0 2
15089: PUSH
15090: LD_INT 43
15092: PUSH
15093: LD_INT 17
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 41
15102: PUSH
15103: LD_INT 7
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: LD_INT 52
15112: PUSH
15113: LD_INT 7
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: LIST
15124: ST_TO_ADDR
// find_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) , false ) ;
15125: LD_EXP 91
15129: PPUSH
15130: LD_INT 3
15132: PUSH
15133: LD_INT 33
15135: PUSH
15136: LD_INT 2
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PUSH
15143: EMPTY
15144: LIST
15145: LIST
15146: PPUSH
15147: CALL_OW 72
15151: PPUSH
15152: LD_INT 22
15154: PUSH
15155: LD_EXP 6
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: PUSH
15164: LD_INT 25
15166: PUSH
15167: LD_INT 1
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: PPUSH
15178: CALL_OW 69
15182: PPUSH
15183: LD_INT 0
15185: PPUSH
15186: CALL 11203 0 3
// find_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) ) ;
15190: LD_EXP 91
15194: PPUSH
15195: LD_INT 33
15197: PUSH
15198: LD_INT 2
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: EMPTY
15206: LIST
15207: PPUSH
15208: CALL_OW 72
15212: PPUSH
15213: LD_INT 22
15215: PUSH
15216: LD_EXP 6
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: PUSH
15225: LD_INT 25
15227: PUSH
15228: LD_INT 3
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: PPUSH
15239: CALL_OW 69
15243: PPUSH
15244: LD_INT 34
15246: PUSH
15247: LD_INT 30
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: PUSH
15254: EMPTY
15255: LIST
15256: PPUSH
15257: CALL_OW 69
15261: PPUSH
15262: CALL 11548 0 3
// wait_for_drivers ( UnitFilter ( zbytek , [ f_not , [ f_control , control_remote ] ] ) , 0 0$30 ) ;
15266: LD_EXP 91
15270: PPUSH
15271: LD_INT 3
15273: PUSH
15274: LD_INT 33
15276: PUSH
15277: LD_INT 2
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PPUSH
15288: CALL_OW 72
15292: PPUSH
15293: LD_INT 1050
15295: PPUSH
15296: CALL 11774 0 2
// wait_for_remotes ( UnitFilter ( zbytek , [ [ f_control , control_remote ] ] ) , FilterAllUnits ( [ [ f_weapon , ar_radar ] ] ) , 0 0$30 ) ;
15300: LD_EXP 91
15304: PPUSH
15305: LD_INT 33
15307: PUSH
15308: LD_INT 2
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PUSH
15315: EMPTY
15316: LIST
15317: PPUSH
15318: CALL_OW 72
15322: PPUSH
15323: LD_INT 34
15325: PUSH
15326: LD_INT 30
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PUSH
15333: EMPTY
15334: LIST
15335: PPUSH
15336: CALL_OW 69
15340: PPUSH
15341: LD_INT 1050
15343: PPUSH
15344: CALL 11632 0 3
// ComRemember ( zbytek ) ;
15348: LD_EXP 91
15352: PPUSH
15353: CALL_OW 143
// for i in path do
15357: LD_ADDR_VAR 0 3
15361: PUSH
15362: LD_VAR 0 2
15366: PUSH
15367: FOR_IN
15368: IFFALSE 15399
// AddComAgressiveMove ( zbytek , i [ 1 ] , i [ 2 ] ) ;
15370: LD_EXP 91
15374: PPUSH
15375: LD_VAR 0 3
15379: PUSH
15380: LD_INT 1
15382: ARRAY
15383: PPUSH
15384: LD_VAR 0 3
15388: PUSH
15389: LD_INT 2
15391: ARRAY
15392: PPUSH
15393: CALL_OW 174
15397: GO 15367
15399: POP
15400: POP
// AddComAttackUnit ( zbytek , Vsevolod ) ;
15401: LD_EXP 91
15405: PPUSH
15406: LD_EXP 70
15410: PPUSH
15411: CALL_OW 175
// end ; end_of_file
15415: LD_VAR 0 1
15419: RET
// var rDef1 , rDef2 ; export idDef1 , idDef2 ; export toDef1 , toDef2 ; every 0 0$1 do
15420: GO 15422
15422: DISABLE
// begin rDef1 := McRegistry ( ai , [ [ mc_reg_refresh_time , 0 0$2 ] , [ mc_reg_area_to_guard , def_base ] , [ mc_reg_area_to_protect , def_base ] ] ) ;
15423: LD_ADDR_LOC 3
15427: PUSH
15428: LD_EXP 6
15432: PPUSH
15433: LD_INT 1
15435: PUSH
15436: LD_INT 70
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 2
15445: PUSH
15446: LD_INT 19
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 3
15455: PUSH
15456: LD_INT 19
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: LIST
15467: PPUSH
15468: CALL_OW 399
15472: ST_TO_ADDR
// rDef2 := McRegistry ( ai , [ [ mc_reg_refresh_time , 0 0$2 ] , [ mc_reg_area_to_guard , def_base3 ] , [ mc_reg_area_to_protect , def_base3 ] ] ) ;
15473: LD_ADDR_LOC 4
15477: PUSH
15478: LD_EXP 6
15482: PPUSH
15483: LD_INT 1
15485: PUSH
15486: LD_INT 70
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: PUSH
15493: LD_INT 2
15495: PUSH
15496: LD_INT 18
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: PUSH
15503: LD_INT 3
15505: PUSH
15506: LD_INT 18
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: LIST
15517: PPUSH
15518: CALL_OW 399
15522: ST_TO_ADDR
// idDef1 := McDefend ( 10 , rDef1 , toDef1 , [ mc_def_advantage , mcdef_difficulty ] ) ;
15523: LD_ADDR_EXP 96
15527: PUSH
15528: LD_INT 10
15530: PPUSH
15531: LD_LOC 3
15535: PPUSH
15536: LD_EXP 98
15540: PPUSH
15541: LD_INT 1
15543: PUSH
15544: LD_EXP 16
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PPUSH
15553: CALL_OW 401
15557: ST_TO_ADDR
// idDef2 := McDefend ( 10 , rDef2 , toDef2 , [ mc_def_advantage , na_kopci_mcdef_difficulty ] ) ;
15558: LD_ADDR_EXP 97
15562: PUSH
15563: LD_INT 10
15565: PPUSH
15566: LD_LOC 4
15570: PPUSH
15571: LD_EXP 99
15575: PPUSH
15576: LD_INT 1
15578: PUSH
15579: LD_EXP 18
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PPUSH
15588: CALL_OW 401
15592: ST_TO_ADDR
// end ;
15593: END
// every 0 0$2 do var r1 , r2 ;
15594: GO 15596
15596: DISABLE
15597: LD_INT 0
15599: PPUSH
15600: PPUSH
// begin todef1 := UnitFilter ( ( fort isect ( b3 ^ b4 ) ) ^ ( ( a3 ^ a4 ) isect sol ) ^ attack ^ defence , [ [ f_side , ai ] , [ f_ok ] ] ) ;
15601: LD_ADDR_EXP 98
15605: PUSH
15606: LD_EXP 119
15610: PUSH
15611: LD_EXP 130
15615: PUSH
15616: LD_EXP 131
15620: ADD
15621: ISECT
15622: PUSH
15623: LD_EXP 135
15627: PUSH
15628: LD_EXP 136
15632: ADD
15633: PUSH
15634: LD_EXP 121
15638: ISECT
15639: ADD
15640: PUSH
15641: LD_EXP 138
15645: ADD
15646: PUSH
15647: LD_EXP 139
15651: ADD
15652: PPUSH
15653: LD_INT 22
15655: PUSH
15656: LD_EXP 6
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PUSH
15665: LD_INT 50
15667: PUSH
15668: EMPTY
15669: LIST
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PPUSH
15675: CALL_OW 72
15679: ST_TO_ADDR
// todef2 := UnitFilter ( ( fort isect b1 ) ^ ( a1 isect sol ) , [ [ f_side , ai ] , [ f_ok ] ] ) ;
15680: LD_ADDR_EXP 99
15684: PUSH
15685: LD_EXP 119
15689: PUSH
15690: LD_EXP 128
15694: ISECT
15695: PUSH
15696: LD_EXP 133
15700: PUSH
15701: LD_EXP 121
15705: ISECT
15706: ADD
15707: PPUSH
15708: LD_INT 22
15710: PUSH
15711: LD_EXP 6
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: PUSH
15720: LD_INT 50
15722: PUSH
15723: EMPTY
15724: LIST
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PPUSH
15730: CALL_OW 72
15734: ST_TO_ADDR
// r1 := GetMcUnits ( idDef1 ) diff todef1 ;
15735: LD_ADDR_VAR 0 1
15739: PUSH
15740: LD_EXP 96
15744: PPUSH
15745: CALL_OW 389
15749: PUSH
15750: LD_EXP 98
15754: DIFF
15755: ST_TO_ADDR
// add_to ( r1 ) ;
15756: LD_VAR 0 1
15760: PPUSH
15761: CALL 30687 0 1
// AddMcUnits ( idDef1 , todef1 ) ;
15765: LD_EXP 96
15769: PPUSH
15770: LD_EXP 98
15774: PPUSH
15775: CALL_OW 390
// r2 := GetMcUnits ( idDef2 ) diff todef2 ;
15779: LD_ADDR_VAR 0 2
15783: PUSH
15784: LD_EXP 97
15788: PPUSH
15789: CALL_OW 389
15793: PUSH
15794: LD_EXP 99
15798: DIFF
15799: ST_TO_ADDR
// add_to ( r2 ) ;
15800: LD_VAR 0 2
15804: PPUSH
15805: CALL 30687 0 1
// if not ovsyenkotaken or ovsyenkocaptured then
15809: LD_EXP 14
15813: NOT
15814: PUSH
15815: LD_EXP 15
15819: OR
15820: IFFALSE 15836
// AddMcUnits ( idDef2 , todef2 ) ;
15822: LD_EXP 97
15826: PPUSH
15827: LD_EXP 99
15831: PPUSH
15832: CALL_OW 390
// enable ;
15836: ENABLE
// end ; end_of_file
15837: PPOPN 2
15839: END
// export opravovat ; every 0 0$1.0 do var set_fuel , fuel ;
15840: GO 15842
15842: DISABLE
15843: LD_INT 0
15845: PPUSH
15846: PPUSH
// begin for set_fuel in FilterUnitsInArea ( near_base , [ [ f_type , unit_vehicle ] , [ f_side , ai ] ] ) do
15847: LD_ADDR_VAR 0 1
15851: PUSH
15852: LD_INT 2
15854: PPUSH
15855: LD_INT 21
15857: PUSH
15858: LD_INT 2
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: PUSH
15865: LD_INT 22
15867: PUSH
15868: LD_EXP 6
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PPUSH
15881: CALL_OW 70
15885: PUSH
15886: FOR_IN
15887: IFFALSE 15934
// begin fuel := GetFuel ( set_fuel ) ;
15889: LD_ADDR_VAR 0 2
15893: PUSH
15894: LD_VAR 0 1
15898: PPUSH
15899: CALL_OW 261
15903: ST_TO_ADDR
// if fuel <= 80 then
15904: LD_VAR 0 2
15908: PUSH
15909: LD_INT 80
15911: LESSEQUAL
15912: IFFALSE 15932
// SetFuel ( set_fuel , fuel + 20 ) ;
15914: LD_VAR 0 1
15918: PPUSH
15919: LD_VAR 0 2
15923: PUSH
15924: LD_INT 20
15926: PLUS
15927: PPUSH
15928: CALL_OW 240
// end ;
15932: GO 15886
15934: POP
15935: POP
// enable ;
15936: ENABLE
// end ;
15937: PPOPN 2
15939: END
// export rep_cars ; export brk_cars ; every 0 0$5 do var i ;
15940: GO 15942
15942: DISABLE
15943: LD_INT 0
15945: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , ai ] , [ f_type , unit_vehicle ] ] ) do
15946: LD_ADDR_VAR 0 1
15950: PUSH
15951: LD_INT 22
15953: PUSH
15954: LD_EXP 6
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PUSH
15963: LD_INT 21
15965: PUSH
15966: LD_INT 2
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PPUSH
15977: CALL_OW 69
15981: PUSH
15982: FOR_IN
15983: IFFALSE 16066
// begin if GetLives ( i ) < 600 then
15985: LD_VAR 0 1
15989: PPUSH
15990: CALL_OW 256
15994: PUSH
15995: LD_INT 600
15997: LESS
15998: IFFALSE 16033
// begin ComMoveXY ( i , 37 , 59 ) ;
16000: LD_VAR 0 1
16004: PPUSH
16005: LD_INT 37
16007: PPUSH
16008: LD_INT 59
16010: PPUSH
16011: CALL_OW 111
// brk_cars := brk_cars union i ;
16015: LD_ADDR_EXP 102
16019: PUSH
16020: LD_EXP 102
16024: PUSH
16025: LD_VAR 0 1
16029: UNION
16030: ST_TO_ADDR
// end else
16031: GO 16064
// if GetLives ( i ) > 950 then
16033: LD_VAR 0 1
16037: PPUSH
16038: CALL_OW 256
16042: PUSH
16043: LD_INT 950
16045: GREATER
16046: IFFALSE 16064
// begin brk_cars := brk_cars diff i ;
16048: LD_ADDR_EXP 102
16052: PUSH
16053: LD_EXP 102
16057: PUSH
16058: LD_VAR 0 1
16062: DIFF
16063: ST_TO_ADDR
// end ; end ;
16064: GO 15982
16066: POP
16067: POP
// enable ;
16068: ENABLE
// end ;
16069: PPOPN 1
16071: END
// every 0 0$5 + 0 0$2 do var zivoty , i ;
16072: GO 16074
16074: DISABLE
16075: LD_INT 0
16077: PPUSH
16078: PPUSH
// begin rep_cars := [ ] ;
16079: LD_ADDR_EXP 101
16083: PUSH
16084: EMPTY
16085: ST_TO_ADDR
// for i in FilterUnitsInArea ( repair_bay1 , [ [ f_side , ai ] , [ f_type , unit_vehicle ] ] ) do
16086: LD_ADDR_VAR 0 2
16090: PUSH
16091: LD_INT 27
16093: PPUSH
16094: LD_INT 22
16096: PUSH
16097: LD_EXP 6
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: PUSH
16106: LD_INT 21
16108: PUSH
16109: LD_INT 2
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PPUSH
16120: CALL_OW 70
16124: PUSH
16125: FOR_IN
16126: IFFALSE 16182
// begin if GetLives ( i ) < 1000 then
16128: LD_VAR 0 2
16132: PPUSH
16133: CALL_OW 256
16137: PUSH
16138: LD_INT 1000
16140: LESS
16141: IFFALSE 16180
// begin rep_cars := rep_cars ^ i ;
16143: LD_ADDR_EXP 101
16147: PUSH
16148: LD_EXP 101
16152: PUSH
16153: LD_VAR 0 2
16157: ADD
16158: ST_TO_ADDR
// zivoty := zivoty ^ GetLives ( i ) ;
16159: LD_ADDR_VAR 0 1
16163: PUSH
16164: LD_VAR 0 1
16168: PUSH
16169: LD_VAR 0 2
16173: PPUSH
16174: CALL_OW 256
16178: ADD
16179: ST_TO_ADDR
// end ; end ;
16180: GO 16125
16182: POP
16183: POP
// SortListByListAsc ( rep_cars , zivoty ) ;
16184: LD_EXP 101
16188: PPUSH
16189: LD_VAR 0 1
16193: PPUSH
16194: CALL_OW 76
// enable ;
16198: ENABLE
// end ;
16199: PPOPN 2
16201: END
// export opr_mec ; every 0 0$5 + 0 0$4 trigger opravovat do var a ;
16202: LD_EXP 100
16206: IFFALSE 16381
16208: GO 16210
16210: DISABLE
16211: LD_INT 0
16213: PPUSH
// begin a := UnitFilter ( mec , [ f_not , [ f_hastask ] ] ) ;
16214: LD_ADDR_VAR 0 1
16218: PUSH
16219: LD_EXP 125
16223: PPUSH
16224: LD_INT 3
16226: PUSH
16227: LD_INT 60
16229: PUSH
16230: EMPTY
16231: LIST
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: PPUSH
16237: CALL_OW 72
16241: ST_TO_ADDR
// ComStop ( a ) ;
16242: LD_VAR 0 1
16246: PPUSH
16247: CALL_OW 141
// ComReturn ( a ) ;
16251: LD_VAR 0 1
16255: PPUSH
16256: CALL_OW 144
// opr_mec := opr_mec diff a ;
16260: LD_ADDR_EXP 103
16264: PUSH
16265: LD_EXP 103
16269: PUSH
16270: LD_VAR 0 1
16274: DIFF
16275: ST_TO_ADDR
// if rep_cars then
16276: LD_EXP 101
16280: IFFALSE 16380
// begin a := get_x_best ( UnitFilter ( mec , [ [ f_dist , rep_cars [ 1 ] , 20 ] ] ) , 2 , skill_mechanical , 0 , false ) ;
16282: LD_ADDR_VAR 0 1
16286: PUSH
16287: LD_EXP 125
16291: PPUSH
16292: LD_INT 91
16294: PUSH
16295: LD_EXP 101
16299: PUSH
16300: LD_INT 1
16302: ARRAY
16303: PUSH
16304: LD_INT 20
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: LIST
16311: PUSH
16312: EMPTY
16313: LIST
16314: PPUSH
16315: CALL_OW 72
16319: PPUSH
16320: LD_INT 2
16322: PPUSH
16323: LD_INT 3
16325: PPUSH
16326: LD_INT 0
16328: PPUSH
16329: LD_INT 0
16331: PPUSH
16332: CALL 10360 0 5
16336: ST_TO_ADDR
// opr_mec := opr_mec union a ;
16337: LD_ADDR_EXP 103
16341: PUSH
16342: LD_EXP 103
16346: PUSH
16347: LD_VAR 0 1
16351: UNION
16352: ST_TO_ADDR
// ComExitBuilding ( a ) ;
16353: LD_VAR 0 1
16357: PPUSH
16358: CALL_OW 122
// AddComRepairVehicle ( a , rep_cars [ 1 ] ) ;
16362: LD_VAR 0 1
16366: PPUSH
16367: LD_EXP 101
16371: PUSH
16372: LD_INT 1
16374: ARRAY
16375: PPUSH
16376: CALL_OW 189
// end ; enable ;
16380: ENABLE
// end ; end_of_file
16381: PPOPN 1
16383: END
// var d1 , d2 , d3 , d4 , d5 , d6 , d7 , d8 , d9 , d10 ; every 0 0$2 do
16384: GO 16386
16386: DISABLE
// begin d1 := [ us_heavy_tracked , engine_combustion , control_manual , us_gatling_gun ] ;
16387: LD_ADDR_LOC 5
16391: PUSH
16392: LD_INT 4
16394: PUSH
16395: LD_INT 1
16397: PUSH
16398: LD_INT 1
16400: PUSH
16401: LD_INT 4
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: ST_TO_ADDR
// d2 := [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] ;
16410: LD_ADDR_LOC 6
16414: PUSH
16415: LD_INT 4
16417: PUSH
16418: LD_INT 1
16420: PUSH
16421: LD_INT 1
16423: PUSH
16424: LD_INT 5
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: ST_TO_ADDR
// d3 := [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] ;
16433: LD_ADDR_LOC 7
16437: PUSH
16438: LD_INT 4
16440: PUSH
16441: LD_INT 1
16443: PUSH
16444: LD_INT 1
16446: PUSH
16447: LD_INT 6
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: ST_TO_ADDR
// d5 := [ us_heavy_tracked , engine_combustion , control_remote , us_gatling_gun ] ;
16456: LD_ADDR_LOC 9
16460: PUSH
16461: LD_INT 4
16463: PUSH
16464: LD_INT 1
16466: PUSH
16467: LD_INT 2
16469: PUSH
16470: LD_INT 4
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: ST_TO_ADDR
// d6 := [ us_heavy_tracked , engine_combustion , control_remote , us_double_gun ] ;
16479: LD_ADDR_LOC 10
16483: PUSH
16484: LD_INT 4
16486: PUSH
16487: LD_INT 1
16489: PUSH
16490: LD_INT 2
16492: PUSH
16493: LD_INT 5
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: ST_TO_ADDR
// d7 := [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] ;
16502: LD_ADDR_LOC 11
16506: PUSH
16507: LD_INT 4
16509: PUSH
16510: LD_INT 1
16512: PUSH
16513: LD_INT 2
16515: PUSH
16516: LD_INT 6
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: ST_TO_ADDR
// end ;
16525: END
// every 0 0$10 do
16526: GO 16528
16528: DISABLE
// begin defence := FilterAllUnits ( [ [ f_side , ai ] , [ f_control , control_manual ] ] ) ;
16529: LD_ADDR_EXP 139
16533: PUSH
16534: LD_INT 22
16536: PUSH
16537: LD_EXP 6
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PUSH
16546: LD_INT 33
16548: PUSH
16549: LD_INT 1
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PPUSH
16560: CALL_OW 69
16564: ST_TO_ADDR
// attack := FilterAllUnits ( [ [ f_side , ai ] , [ f_control , control_remote ] ] ) ;
16565: LD_ADDR_EXP 138
16569: PUSH
16570: LD_INT 22
16572: PUSH
16573: LD_EXP 6
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: PUSH
16582: LD_INT 33
16584: PUSH
16585: LD_INT 2
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PPUSH
16596: CALL_OW 69
16600: ST_TO_ADDR
// end ;
16601: END
// var fact1 , fact2 ; every 0 0$1 do
16602: GO 16604
16604: DISABLE
// begin fact1 := fact isect b3 ;
16605: LD_ADDR_LOC 15
16609: PUSH
16610: LD_EXP 124
16614: PUSH
16615: LD_EXP 130
16619: ISECT
16620: ST_TO_ADDR
// if fact1 then
16621: LD_LOC 15
16625: IFFALSE 16641
// fact1 := fact1 [ 1 ] ;
16627: LD_ADDR_LOC 15
16631: PUSH
16632: LD_LOC 15
16636: PUSH
16637: LD_INT 1
16639: ARRAY
16640: ST_TO_ADDR
// fact2 := fact isect b4 ;
16641: LD_ADDR_LOC 16
16645: PUSH
16646: LD_EXP 124
16650: PUSH
16651: LD_EXP 131
16655: ISECT
16656: ST_TO_ADDR
// if fact2 then
16657: LD_LOC 16
16661: IFFALSE 16677
// fact2 := fact2 [ 1 ] ;
16663: LD_ADDR_LOC 16
16667: PUSH
16668: LD_LOC 16
16672: PUSH
16673: LD_INT 1
16675: ARRAY
16676: ST_TO_ADDR
// enable ;
16677: ENABLE
// end ;
16678: END
// every 0 0$5 trigger IsOk ( fact1 ) and fact1 in fact and IsIdle ( fact1 ) do var a , fact_attack ;
16679: LD_LOC 15
16683: PPUSH
16684: CALL_OW 302
16688: PUSH
16689: LD_LOC 15
16693: PUSH
16694: LD_EXP 124
16698: IN
16699: AND
16700: PUSH
16701: LD_LOC 15
16705: PPUSH
16706: CALL_OW 316
16710: AND
16711: IFFALSE 17733
16713: GO 16715
16715: DISABLE
16716: LD_INT 0
16718: PPUSH
16719: PPUSH
// begin fact_attack := FilterAllUnits ( [ [ f_side , ai ] , [ f_control , control_remote ] ] ) ;
16720: LD_ADDR_VAR 0 2
16724: PUSH
16725: LD_INT 22
16727: PUSH
16728: LD_EXP 6
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 33
16739: PUSH
16740: LD_INT 2
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PPUSH
16751: CALL_OW 69
16755: ST_TO_ADDR
// case true of ( tick < 15 15$0 and defence < 3 and CanBeConstructed ( fact1 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ) :
16756: LD_INT 1
16758: PUSH
16759: LD_OWVAR 1
16763: PUSH
16764: LD_INT 31500
16766: LESS
16767: PUSH
16768: LD_EXP 139
16772: PUSH
16773: LD_INT 3
16775: LESS
16776: AND
16777: PUSH
16778: LD_LOC 15
16782: PPUSH
16783: LD_LOC 5
16787: PUSH
16788: LD_INT 1
16790: ARRAY
16791: PPUSH
16792: LD_LOC 5
16796: PUSH
16797: LD_INT 2
16799: ARRAY
16800: PPUSH
16801: LD_LOC 5
16805: PUSH
16806: LD_INT 3
16808: ARRAY
16809: PPUSH
16810: LD_LOC 5
16814: PUSH
16815: LD_INT 4
16817: ARRAY
16818: PPUSH
16819: CALL_OW 448
16823: AND
16824: DOUBLE
16825: EQUAL
16826: IFTRUE 16830
16828: GO 16878
16830: POP
// begin ComConstruct ( fact1 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ;
16831: LD_LOC 15
16835: PPUSH
16836: LD_LOC 5
16840: PUSH
16841: LD_INT 1
16843: ARRAY
16844: PPUSH
16845: LD_LOC 5
16849: PUSH
16850: LD_INT 2
16852: ARRAY
16853: PPUSH
16854: LD_LOC 5
16858: PUSH
16859: LD_INT 3
16861: ARRAY
16862: PPUSH
16863: LD_LOC 5
16867: PUSH
16868: LD_INT 4
16870: ARRAY
16871: PPUSH
16872: CALL_OW 125
// end ; ( tick > 15 15$0 and tick < 30 30$0 and defence < 3 and CanBeConstructed ( fact1 , d2 [ 1 ] , d2 [ 2 ] , d2 [ 3 ] , d2 [ 4 ] ) ) :
16876: GO 17732
16878: LD_OWVAR 1
16882: PUSH
16883: LD_INT 31500
16885: GREATER
16886: PUSH
16887: LD_OWVAR 1
16891: PUSH
16892: LD_INT 63000
16894: LESS
16895: AND
16896: PUSH
16897: LD_EXP 139
16901: PUSH
16902: LD_INT 3
16904: LESS
16905: AND
16906: PUSH
16907: LD_LOC 15
16911: PPUSH
16912: LD_LOC 6
16916: PUSH
16917: LD_INT 1
16919: ARRAY
16920: PPUSH
16921: LD_LOC 6
16925: PUSH
16926: LD_INT 2
16928: ARRAY
16929: PPUSH
16930: LD_LOC 6
16934: PUSH
16935: LD_INT 3
16937: ARRAY
16938: PPUSH
16939: LD_LOC 6
16943: PUSH
16944: LD_INT 4
16946: ARRAY
16947: PPUSH
16948: CALL_OW 448
16952: AND
16953: DOUBLE
16954: EQUAL
16955: IFTRUE 16959
16957: GO 17007
16959: POP
// begin ComConstruct ( fact1 , d2 [ 1 ] , d2 [ 2 ] , d2 [ 3 ] , d2 [ 4 ] ) ;
16960: LD_LOC 15
16964: PPUSH
16965: LD_LOC 6
16969: PUSH
16970: LD_INT 1
16972: ARRAY
16973: PPUSH
16974: LD_LOC 6
16978: PUSH
16979: LD_INT 2
16981: ARRAY
16982: PPUSH
16983: LD_LOC 6
16987: PUSH
16988: LD_INT 3
16990: ARRAY
16991: PPUSH
16992: LD_LOC 6
16996: PUSH
16997: LD_INT 4
16999: ARRAY
17000: PPUSH
17001: CALL_OW 125
// end ; ( tick > 30 30$0 and defence < 2 and CanBeConstructed ( fact1 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ) :
17005: GO 17732
17007: LD_OWVAR 1
17011: PUSH
17012: LD_INT 63000
17014: GREATER
17015: PUSH
17016: LD_EXP 139
17020: PUSH
17021: LD_INT 2
17023: LESS
17024: AND
17025: PUSH
17026: LD_LOC 15
17030: PPUSH
17031: LD_LOC 5
17035: PUSH
17036: LD_INT 1
17038: ARRAY
17039: PPUSH
17040: LD_LOC 5
17044: PUSH
17045: LD_INT 2
17047: ARRAY
17048: PPUSH
17049: LD_LOC 5
17053: PUSH
17054: LD_INT 3
17056: ARRAY
17057: PPUSH
17058: LD_LOC 5
17062: PUSH
17063: LD_INT 4
17065: ARRAY
17066: PPUSH
17067: CALL_OW 448
17071: AND
17072: DOUBLE
17073: EQUAL
17074: IFTRUE 17078
17076: GO 17126
17078: POP
// begin ComConstruct ( fact1 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ;
17079: LD_LOC 15
17083: PPUSH
17084: LD_LOC 5
17088: PUSH
17089: LD_INT 1
17091: ARRAY
17092: PPUSH
17093: LD_LOC 5
17097: PUSH
17098: LD_INT 2
17100: ARRAY
17101: PPUSH
17102: LD_LOC 5
17106: PUSH
17107: LD_INT 3
17109: ARRAY
17110: PPUSH
17111: LD_LOC 5
17115: PUSH
17116: LD_INT 4
17118: ARRAY
17119: PPUSH
17120: CALL_OW 125
// end ; ( tick > 30 30$0 and defence < 4 and CanBeConstructed ( fact1 , d3 [ 1 ] , d3 [ 2 ] , d3 [ 3 ] , d3 [ 4 ] ) ) :
17124: GO 17732
17126: LD_OWVAR 1
17130: PUSH
17131: LD_INT 63000
17133: GREATER
17134: PUSH
17135: LD_EXP 139
17139: PUSH
17140: LD_INT 4
17142: LESS
17143: AND
17144: PUSH
17145: LD_LOC 15
17149: PPUSH
17150: LD_LOC 7
17154: PUSH
17155: LD_INT 1
17157: ARRAY
17158: PPUSH
17159: LD_LOC 7
17163: PUSH
17164: LD_INT 2
17166: ARRAY
17167: PPUSH
17168: LD_LOC 7
17172: PUSH
17173: LD_INT 3
17175: ARRAY
17176: PPUSH
17177: LD_LOC 7
17181: PUSH
17182: LD_INT 4
17184: ARRAY
17185: PPUSH
17186: CALL_OW 448
17190: AND
17191: DOUBLE
17192: EQUAL
17193: IFTRUE 17197
17195: GO 17245
17197: POP
// begin ComConstruct ( fact1 , d3 [ 1 ] , d3 [ 2 ] , d3 [ 3 ] , d3 [ 4 ] ) ;
17198: LD_LOC 15
17202: PPUSH
17203: LD_LOC 7
17207: PUSH
17208: LD_INT 1
17210: ARRAY
17211: PPUSH
17212: LD_LOC 7
17216: PUSH
17217: LD_INT 2
17219: ARRAY
17220: PPUSH
17221: LD_LOC 7
17225: PUSH
17226: LD_INT 3
17228: ARRAY
17229: PPUSH
17230: LD_LOC 7
17234: PUSH
17235: LD_INT 4
17237: ARRAY
17238: PPUSH
17239: CALL_OW 125
// end ; ( tick < 20 20$0 and fact_attack < 4 and CanBeConstructed ( fact1 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ) :
17243: GO 17732
17245: LD_OWVAR 1
17249: PUSH
17250: LD_INT 42000
17252: LESS
17253: PUSH
17254: LD_VAR 0 2
17258: PUSH
17259: LD_INT 4
17261: LESS
17262: AND
17263: PUSH
17264: LD_LOC 15
17268: PPUSH
17269: LD_LOC 10
17273: PUSH
17274: LD_INT 1
17276: ARRAY
17277: PPUSH
17278: LD_LOC 10
17282: PUSH
17283: LD_INT 2
17285: ARRAY
17286: PPUSH
17287: LD_LOC 10
17291: PUSH
17292: LD_INT 3
17294: ARRAY
17295: PPUSH
17296: LD_LOC 10
17300: PUSH
17301: LD_INT 4
17303: ARRAY
17304: PPUSH
17305: CALL_OW 448
17309: AND
17310: DOUBLE
17311: EQUAL
17312: IFTRUE 17316
17314: GO 17364
17316: POP
// begin ComConstruct ( fact1 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ;
17317: LD_LOC 15
17321: PPUSH
17322: LD_LOC 10
17326: PUSH
17327: LD_INT 1
17329: ARRAY
17330: PPUSH
17331: LD_LOC 10
17335: PUSH
17336: LD_INT 2
17338: ARRAY
17339: PPUSH
17340: LD_LOC 10
17344: PUSH
17345: LD_INT 3
17347: ARRAY
17348: PPUSH
17349: LD_LOC 10
17353: PUSH
17354: LD_INT 4
17356: ARRAY
17357: PPUSH
17358: CALL_OW 125
// end ; ( tick > 20 20$0 and tick < 30 30$0 and fact_attack < 3 and CanBeConstructed ( fact1 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ) :
17362: GO 17732
17364: LD_OWVAR 1
17368: PUSH
17369: LD_INT 42000
17371: GREATER
17372: PUSH
17373: LD_OWVAR 1
17377: PUSH
17378: LD_INT 63000
17380: LESS
17381: AND
17382: PUSH
17383: LD_VAR 0 2
17387: PUSH
17388: LD_INT 3
17390: LESS
17391: AND
17392: PUSH
17393: LD_LOC 15
17397: PPUSH
17398: LD_LOC 10
17402: PUSH
17403: LD_INT 1
17405: ARRAY
17406: PPUSH
17407: LD_LOC 10
17411: PUSH
17412: LD_INT 2
17414: ARRAY
17415: PPUSH
17416: LD_LOC 10
17420: PUSH
17421: LD_INT 3
17423: ARRAY
17424: PPUSH
17425: LD_LOC 10
17429: PUSH
17430: LD_INT 4
17432: ARRAY
17433: PPUSH
17434: CALL_OW 448
17438: AND
17439: DOUBLE
17440: EQUAL
17441: IFTRUE 17445
17443: GO 17493
17445: POP
// begin ComConstruct ( fact1 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ;
17446: LD_LOC 15
17450: PPUSH
17451: LD_LOC 10
17455: PUSH
17456: LD_INT 1
17458: ARRAY
17459: PPUSH
17460: LD_LOC 10
17464: PUSH
17465: LD_INT 2
17467: ARRAY
17468: PPUSH
17469: LD_LOC 10
17473: PUSH
17474: LD_INT 3
17476: ARRAY
17477: PPUSH
17478: LD_LOC 10
17482: PUSH
17483: LD_INT 4
17485: ARRAY
17486: PPUSH
17487: CALL_OW 125
// end ; ( tick > 30 30$0 and fact_attack < 4 and CanBeConstructed ( fact1 , d7 [ 1 ] , d7 [ 2 ] , d7 [ 3 ] , d7 [ 4 ] ) ) :
17491: GO 17732
17493: LD_OWVAR 1
17497: PUSH
17498: LD_INT 63000
17500: GREATER
17501: PUSH
17502: LD_VAR 0 2
17506: PUSH
17507: LD_INT 4
17509: LESS
17510: AND
17511: PUSH
17512: LD_LOC 15
17516: PPUSH
17517: LD_LOC 11
17521: PUSH
17522: LD_INT 1
17524: ARRAY
17525: PPUSH
17526: LD_LOC 11
17530: PUSH
17531: LD_INT 2
17533: ARRAY
17534: PPUSH
17535: LD_LOC 11
17539: PUSH
17540: LD_INT 3
17542: ARRAY
17543: PPUSH
17544: LD_LOC 11
17548: PUSH
17549: LD_INT 4
17551: ARRAY
17552: PPUSH
17553: CALL_OW 448
17557: AND
17558: DOUBLE
17559: EQUAL
17560: IFTRUE 17564
17562: GO 17612
17564: POP
// begin ComConstruct ( fact1 , d7 [ 1 ] , d7 [ 2 ] , d7 [ 3 ] , d7 [ 4 ] ) ;
17565: LD_LOC 15
17569: PPUSH
17570: LD_LOC 11
17574: PUSH
17575: LD_INT 1
17577: ARRAY
17578: PPUSH
17579: LD_LOC 11
17583: PUSH
17584: LD_INT 2
17586: ARRAY
17587: PPUSH
17588: LD_LOC 11
17592: PUSH
17593: LD_INT 3
17595: ARRAY
17596: PPUSH
17597: LD_LOC 11
17601: PUSH
17602: LD_INT 4
17604: ARRAY
17605: PPUSH
17606: CALL_OW 125
// end ; ( tick > 30 30$0 and fact_attack < 5 and CanBeConstructed ( fact1 , d5 [ 1 ] , d5 [ 2 ] , d5 [ 3 ] , d5 [ 4 ] ) ) :
17610: GO 17732
17612: LD_OWVAR 1
17616: PUSH
17617: LD_INT 63000
17619: GREATER
17620: PUSH
17621: LD_VAR 0 2
17625: PUSH
17626: LD_INT 5
17628: LESS
17629: AND
17630: PUSH
17631: LD_LOC 15
17635: PPUSH
17636: LD_LOC 9
17640: PUSH
17641: LD_INT 1
17643: ARRAY
17644: PPUSH
17645: LD_LOC 9
17649: PUSH
17650: LD_INT 2
17652: ARRAY
17653: PPUSH
17654: LD_LOC 9
17658: PUSH
17659: LD_INT 3
17661: ARRAY
17662: PPUSH
17663: LD_LOC 9
17667: PUSH
17668: LD_INT 4
17670: ARRAY
17671: PPUSH
17672: CALL_OW 448
17676: AND
17677: DOUBLE
17678: EQUAL
17679: IFTRUE 17683
17681: GO 17731
17683: POP
// begin ComConstruct ( fact1 , d5 [ 1 ] , d5 [ 2 ] , d5 [ 3 ] , d5 [ 4 ] ) ;
17684: LD_LOC 15
17688: PPUSH
17689: LD_LOC 9
17693: PUSH
17694: LD_INT 1
17696: ARRAY
17697: PPUSH
17698: LD_LOC 9
17702: PUSH
17703: LD_INT 2
17705: ARRAY
17706: PPUSH
17707: LD_LOC 9
17711: PUSH
17712: LD_INT 3
17714: ARRAY
17715: PPUSH
17716: LD_LOC 9
17720: PUSH
17721: LD_INT 4
17723: ARRAY
17724: PPUSH
17725: CALL_OW 125
// end ; end ;
17729: GO 17732
17731: POP
// enable ;
17732: ENABLE
// end ;
17733: PPOPN 2
17735: END
// every 0 0$5 trigger IsOk ( fact2 ) and fact2 in fact and IsIdle ( fact2 ) do var a , fact_attack ;
17736: LD_LOC 16
17740: PPUSH
17741: CALL_OW 302
17745: PUSH
17746: LD_LOC 16
17750: PUSH
17751: LD_EXP 124
17755: IN
17756: AND
17757: PUSH
17758: LD_LOC 16
17762: PPUSH
17763: CALL_OW 316
17767: AND
17768: IFFALSE 18790
17770: GO 17772
17772: DISABLE
17773: LD_INT 0
17775: PPUSH
17776: PPUSH
// begin fact_attack := FilterAllUnits ( [ [ f_side , ai ] , [ f_control , control_remote ] ] ) ;
17777: LD_ADDR_VAR 0 2
17781: PUSH
17782: LD_INT 22
17784: PUSH
17785: LD_EXP 6
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PUSH
17794: LD_INT 33
17796: PUSH
17797: LD_INT 2
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PPUSH
17808: CALL_OW 69
17812: ST_TO_ADDR
// case true of ( tick < 15 15$0 and defence < 3 and CanBeConstructed ( fact2 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ) :
17813: LD_INT 1
17815: PUSH
17816: LD_OWVAR 1
17820: PUSH
17821: LD_INT 31500
17823: LESS
17824: PUSH
17825: LD_EXP 139
17829: PUSH
17830: LD_INT 3
17832: LESS
17833: AND
17834: PUSH
17835: LD_LOC 16
17839: PPUSH
17840: LD_LOC 5
17844: PUSH
17845: LD_INT 1
17847: ARRAY
17848: PPUSH
17849: LD_LOC 5
17853: PUSH
17854: LD_INT 2
17856: ARRAY
17857: PPUSH
17858: LD_LOC 5
17862: PUSH
17863: LD_INT 3
17865: ARRAY
17866: PPUSH
17867: LD_LOC 5
17871: PUSH
17872: LD_INT 4
17874: ARRAY
17875: PPUSH
17876: CALL_OW 448
17880: AND
17881: DOUBLE
17882: EQUAL
17883: IFTRUE 17887
17885: GO 17935
17887: POP
// begin ComConstruct ( fact2 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ;
17888: LD_LOC 16
17892: PPUSH
17893: LD_LOC 5
17897: PUSH
17898: LD_INT 1
17900: ARRAY
17901: PPUSH
17902: LD_LOC 5
17906: PUSH
17907: LD_INT 2
17909: ARRAY
17910: PPUSH
17911: LD_LOC 5
17915: PUSH
17916: LD_INT 3
17918: ARRAY
17919: PPUSH
17920: LD_LOC 5
17924: PUSH
17925: LD_INT 4
17927: ARRAY
17928: PPUSH
17929: CALL_OW 125
// end ; ( tick > 15 15$0 and tick < 30 30$0 and defence < 3 and CanBeConstructed ( fact2 , d2 [ 1 ] , d2 [ 2 ] , d2 [ 3 ] , d2 [ 4 ] ) ) :
17933: GO 18789
17935: LD_OWVAR 1
17939: PUSH
17940: LD_INT 31500
17942: GREATER
17943: PUSH
17944: LD_OWVAR 1
17948: PUSH
17949: LD_INT 63000
17951: LESS
17952: AND
17953: PUSH
17954: LD_EXP 139
17958: PUSH
17959: LD_INT 3
17961: LESS
17962: AND
17963: PUSH
17964: LD_LOC 16
17968: PPUSH
17969: LD_LOC 6
17973: PUSH
17974: LD_INT 1
17976: ARRAY
17977: PPUSH
17978: LD_LOC 6
17982: PUSH
17983: LD_INT 2
17985: ARRAY
17986: PPUSH
17987: LD_LOC 6
17991: PUSH
17992: LD_INT 3
17994: ARRAY
17995: PPUSH
17996: LD_LOC 6
18000: PUSH
18001: LD_INT 4
18003: ARRAY
18004: PPUSH
18005: CALL_OW 448
18009: AND
18010: DOUBLE
18011: EQUAL
18012: IFTRUE 18016
18014: GO 18064
18016: POP
// begin ComConstruct ( fact2 , d2 [ 1 ] , d2 [ 2 ] , d2 [ 3 ] , d2 [ 4 ] ) ;
18017: LD_LOC 16
18021: PPUSH
18022: LD_LOC 6
18026: PUSH
18027: LD_INT 1
18029: ARRAY
18030: PPUSH
18031: LD_LOC 6
18035: PUSH
18036: LD_INT 2
18038: ARRAY
18039: PPUSH
18040: LD_LOC 6
18044: PUSH
18045: LD_INT 3
18047: ARRAY
18048: PPUSH
18049: LD_LOC 6
18053: PUSH
18054: LD_INT 4
18056: ARRAY
18057: PPUSH
18058: CALL_OW 125
// end ; ( tick > 30 30$0 and defence < 2 and CanBeConstructed ( fact2 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ) :
18062: GO 18789
18064: LD_OWVAR 1
18068: PUSH
18069: LD_INT 63000
18071: GREATER
18072: PUSH
18073: LD_EXP 139
18077: PUSH
18078: LD_INT 2
18080: LESS
18081: AND
18082: PUSH
18083: LD_LOC 16
18087: PPUSH
18088: LD_LOC 5
18092: PUSH
18093: LD_INT 1
18095: ARRAY
18096: PPUSH
18097: LD_LOC 5
18101: PUSH
18102: LD_INT 2
18104: ARRAY
18105: PPUSH
18106: LD_LOC 5
18110: PUSH
18111: LD_INT 3
18113: ARRAY
18114: PPUSH
18115: LD_LOC 5
18119: PUSH
18120: LD_INT 4
18122: ARRAY
18123: PPUSH
18124: CALL_OW 448
18128: AND
18129: DOUBLE
18130: EQUAL
18131: IFTRUE 18135
18133: GO 18183
18135: POP
// begin ComConstruct ( fact2 , d1 [ 1 ] , d1 [ 2 ] , d1 [ 3 ] , d1 [ 4 ] ) ;
18136: LD_LOC 16
18140: PPUSH
18141: LD_LOC 5
18145: PUSH
18146: LD_INT 1
18148: ARRAY
18149: PPUSH
18150: LD_LOC 5
18154: PUSH
18155: LD_INT 2
18157: ARRAY
18158: PPUSH
18159: LD_LOC 5
18163: PUSH
18164: LD_INT 3
18166: ARRAY
18167: PPUSH
18168: LD_LOC 5
18172: PUSH
18173: LD_INT 4
18175: ARRAY
18176: PPUSH
18177: CALL_OW 125
// end ; ( tick > 30 30$0 and defence < 4 and CanBeConstructed ( fact2 , d3 [ 1 ] , d3 [ 2 ] , d3 [ 3 ] , d3 [ 4 ] ) ) :
18181: GO 18789
18183: LD_OWVAR 1
18187: PUSH
18188: LD_INT 63000
18190: GREATER
18191: PUSH
18192: LD_EXP 139
18196: PUSH
18197: LD_INT 4
18199: LESS
18200: AND
18201: PUSH
18202: LD_LOC 16
18206: PPUSH
18207: LD_LOC 7
18211: PUSH
18212: LD_INT 1
18214: ARRAY
18215: PPUSH
18216: LD_LOC 7
18220: PUSH
18221: LD_INT 2
18223: ARRAY
18224: PPUSH
18225: LD_LOC 7
18229: PUSH
18230: LD_INT 3
18232: ARRAY
18233: PPUSH
18234: LD_LOC 7
18238: PUSH
18239: LD_INT 4
18241: ARRAY
18242: PPUSH
18243: CALL_OW 448
18247: AND
18248: DOUBLE
18249: EQUAL
18250: IFTRUE 18254
18252: GO 18302
18254: POP
// begin ComConstruct ( fact2 , d3 [ 1 ] , d3 [ 2 ] , d3 [ 3 ] , d3 [ 4 ] ) ;
18255: LD_LOC 16
18259: PPUSH
18260: LD_LOC 7
18264: PUSH
18265: LD_INT 1
18267: ARRAY
18268: PPUSH
18269: LD_LOC 7
18273: PUSH
18274: LD_INT 2
18276: ARRAY
18277: PPUSH
18278: LD_LOC 7
18282: PUSH
18283: LD_INT 3
18285: ARRAY
18286: PPUSH
18287: LD_LOC 7
18291: PUSH
18292: LD_INT 4
18294: ARRAY
18295: PPUSH
18296: CALL_OW 125
// end ; ( tick < 15 15$0 and fact_attack < 4 and CanBeConstructed ( fact2 , d5 [ 1 ] , d5 [ 2 ] , d5 [ 3 ] , d5 [ 4 ] ) ) :
18300: GO 18789
18302: LD_OWVAR 1
18306: PUSH
18307: LD_INT 31500
18309: LESS
18310: PUSH
18311: LD_VAR 0 2
18315: PUSH
18316: LD_INT 4
18318: LESS
18319: AND
18320: PUSH
18321: LD_LOC 16
18325: PPUSH
18326: LD_LOC 9
18330: PUSH
18331: LD_INT 1
18333: ARRAY
18334: PPUSH
18335: LD_LOC 9
18339: PUSH
18340: LD_INT 2
18342: ARRAY
18343: PPUSH
18344: LD_LOC 9
18348: PUSH
18349: LD_INT 3
18351: ARRAY
18352: PPUSH
18353: LD_LOC 9
18357: PUSH
18358: LD_INT 4
18360: ARRAY
18361: PPUSH
18362: CALL_OW 448
18366: AND
18367: DOUBLE
18368: EQUAL
18369: IFTRUE 18373
18371: GO 18421
18373: POP
// begin ComConstruct ( fact2 , d5 [ 1 ] , d5 [ 2 ] , d5 [ 3 ] , d5 [ 4 ] ) ;
18374: LD_LOC 16
18378: PPUSH
18379: LD_LOC 9
18383: PUSH
18384: LD_INT 1
18386: ARRAY
18387: PPUSH
18388: LD_LOC 9
18392: PUSH
18393: LD_INT 2
18395: ARRAY
18396: PPUSH
18397: LD_LOC 9
18401: PUSH
18402: LD_INT 3
18404: ARRAY
18405: PPUSH
18406: LD_LOC 9
18410: PUSH
18411: LD_INT 4
18413: ARRAY
18414: PPUSH
18415: CALL_OW 125
// end ; ( tick > 15 15$0 and tick < 30 30$0 and fact_attack < 3 and CanBeConstructed ( fact2 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ) :
18419: GO 18789
18421: LD_OWVAR 1
18425: PUSH
18426: LD_INT 31500
18428: GREATER
18429: PUSH
18430: LD_OWVAR 1
18434: PUSH
18435: LD_INT 63000
18437: LESS
18438: AND
18439: PUSH
18440: LD_VAR 0 2
18444: PUSH
18445: LD_INT 3
18447: LESS
18448: AND
18449: PUSH
18450: LD_LOC 16
18454: PPUSH
18455: LD_LOC 10
18459: PUSH
18460: LD_INT 1
18462: ARRAY
18463: PPUSH
18464: LD_LOC 10
18468: PUSH
18469: LD_INT 2
18471: ARRAY
18472: PPUSH
18473: LD_LOC 10
18477: PUSH
18478: LD_INT 3
18480: ARRAY
18481: PPUSH
18482: LD_LOC 10
18486: PUSH
18487: LD_INT 4
18489: ARRAY
18490: PPUSH
18491: CALL_OW 448
18495: AND
18496: DOUBLE
18497: EQUAL
18498: IFTRUE 18502
18500: GO 18550
18502: POP
// begin ComConstruct ( fact2 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ;
18503: LD_LOC 16
18507: PPUSH
18508: LD_LOC 10
18512: PUSH
18513: LD_INT 1
18515: ARRAY
18516: PPUSH
18517: LD_LOC 10
18521: PUSH
18522: LD_INT 2
18524: ARRAY
18525: PPUSH
18526: LD_LOC 10
18530: PUSH
18531: LD_INT 3
18533: ARRAY
18534: PPUSH
18535: LD_LOC 10
18539: PUSH
18540: LD_INT 4
18542: ARRAY
18543: PPUSH
18544: CALL_OW 125
// end ; ( tick > 30 30$0 and fact_attack < 2 and CanBeConstructed ( fact2 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ) :
18548: GO 18789
18550: LD_OWVAR 1
18554: PUSH
18555: LD_INT 63000
18557: GREATER
18558: PUSH
18559: LD_VAR 0 2
18563: PUSH
18564: LD_INT 2
18566: LESS
18567: AND
18568: PUSH
18569: LD_LOC 16
18573: PPUSH
18574: LD_LOC 10
18578: PUSH
18579: LD_INT 1
18581: ARRAY
18582: PPUSH
18583: LD_LOC 10
18587: PUSH
18588: LD_INT 2
18590: ARRAY
18591: PPUSH
18592: LD_LOC 10
18596: PUSH
18597: LD_INT 3
18599: ARRAY
18600: PPUSH
18601: LD_LOC 10
18605: PUSH
18606: LD_INT 4
18608: ARRAY
18609: PPUSH
18610: CALL_OW 448
18614: AND
18615: DOUBLE
18616: EQUAL
18617: IFTRUE 18621
18619: GO 18669
18621: POP
// begin ComConstruct ( fact2 , d6 [ 1 ] , d6 [ 2 ] , d6 [ 3 ] , d6 [ 4 ] ) ;
18622: LD_LOC 16
18626: PPUSH
18627: LD_LOC 10
18631: PUSH
18632: LD_INT 1
18634: ARRAY
18635: PPUSH
18636: LD_LOC 10
18640: PUSH
18641: LD_INT 2
18643: ARRAY
18644: PPUSH
18645: LD_LOC 10
18649: PUSH
18650: LD_INT 3
18652: ARRAY
18653: PPUSH
18654: LD_LOC 10
18658: PUSH
18659: LD_INT 4
18661: ARRAY
18662: PPUSH
18663: CALL_OW 125
// end ; ( tick > 30 30$0 and fact_attack < 4 and CanBeConstructed ( fact2 , d7 [ 1 ] , d7 [ 2 ] , d7 [ 3 ] , d7 [ 4 ] ) ) :
18667: GO 18789
18669: LD_OWVAR 1
18673: PUSH
18674: LD_INT 63000
18676: GREATER
18677: PUSH
18678: LD_VAR 0 2
18682: PUSH
18683: LD_INT 4
18685: LESS
18686: AND
18687: PUSH
18688: LD_LOC 16
18692: PPUSH
18693: LD_LOC 11
18697: PUSH
18698: LD_INT 1
18700: ARRAY
18701: PPUSH
18702: LD_LOC 11
18706: PUSH
18707: LD_INT 2
18709: ARRAY
18710: PPUSH
18711: LD_LOC 11
18715: PUSH
18716: LD_INT 3
18718: ARRAY
18719: PPUSH
18720: LD_LOC 11
18724: PUSH
18725: LD_INT 4
18727: ARRAY
18728: PPUSH
18729: CALL_OW 448
18733: AND
18734: DOUBLE
18735: EQUAL
18736: IFTRUE 18740
18738: GO 18788
18740: POP
// begin ComConstruct ( fact2 , d7 [ 1 ] , d7 [ 2 ] , d7 [ 3 ] , d7 [ 4 ] ) ;
18741: LD_LOC 16
18745: PPUSH
18746: LD_LOC 11
18750: PUSH
18751: LD_INT 1
18753: ARRAY
18754: PPUSH
18755: LD_LOC 11
18759: PUSH
18760: LD_INT 2
18762: ARRAY
18763: PPUSH
18764: LD_LOC 11
18768: PUSH
18769: LD_INT 3
18771: ARRAY
18772: PPUSH
18773: LD_LOC 11
18777: PUSH
18778: LD_INT 4
18780: ARRAY
18781: PPUSH
18782: CALL_OW 125
// end ; end ;
18786: GO 18789
18788: POP
// enable ;
18789: ENABLE
// end ; end_of_file
18790: PPOPN 2
18792: END
// export builds1 , builds2 , builds3 , builds4 , builds5 ; export aici1 , aici2 , aici3 , aici4 , aici5 ; export a1eng ; export can_rebuild ; export can_repair ; export aici ; export stavi ; var upgradeable ; var trough_upgrade ; function UpgradeableTo ( b , up ) ; var i ; begin
18793: LD_INT 0
18795: PPUSH
18796: PPUSH
// result := 0 ;
18797: LD_ADDR_VAR 0 3
18801: PUSH
18802: LD_INT 0
18804: ST_TO_ADDR
// for i := 1 to upgradeable do
18805: LD_ADDR_VAR 0 4
18809: PUSH
18810: DOUBLE
18811: LD_INT 1
18813: DEC
18814: ST_TO_ADDR
18815: LD_LOC 17
18819: PUSH
18820: FOR_TO
18821: IFFALSE 18873
// if b = upgradeable [ i ] and up = trough_upgrade [ i ] then
18823: LD_VAR 0 1
18827: PUSH
18828: LD_LOC 17
18832: PUSH
18833: LD_VAR 0 4
18837: ARRAY
18838: EQUAL
18839: PUSH
18840: LD_VAR 0 2
18844: PUSH
18845: LD_LOC 18
18849: PUSH
18850: LD_VAR 0 4
18854: ARRAY
18855: EQUAL
18856: AND
18857: IFFALSE 18871
// begin result := up ;
18859: LD_ADDR_VAR 0 3
18863: PUSH
18864: LD_VAR 0 2
18868: ST_TO_ADDR
// break ;
18869: GO 18873
// end ;
18871: GO 18820
18873: POP
18874: POP
// end ;
18875: LD_VAR 0 3
18879: RET
// function IsUpgraded ( b ) ; begin
18880: LD_INT 0
18882: PPUSH
// result := 0 ;
18883: LD_ADDR_VAR 0 2
18887: PUSH
18888: LD_INT 0
18890: ST_TO_ADDR
// case b of trough_upgrade [ 1 ] :
18891: LD_VAR 0 1
18895: PUSH
18896: LD_LOC 18
18900: PUSH
18901: LD_INT 1
18903: ARRAY
18904: DOUBLE
18905: EQUAL
18906: IFTRUE 18910
18908: GO 18927
18910: POP
// result := upgradeable [ 1 ] ; trough_upgrade [ 2 ] :
18911: LD_ADDR_VAR 0 2
18915: PUSH
18916: LD_LOC 17
18920: PUSH
18921: LD_INT 1
18923: ARRAY
18924: ST_TO_ADDR
18925: GO 19052
18927: LD_LOC 18
18931: PUSH
18932: LD_INT 2
18934: ARRAY
18935: DOUBLE
18936: EQUAL
18937: IFTRUE 18941
18939: GO 18958
18941: POP
// result := upgradeable [ 2 ] ; trough_upgrade [ 3 ] :
18942: LD_ADDR_VAR 0 2
18946: PUSH
18947: LD_LOC 17
18951: PUSH
18952: LD_INT 2
18954: ARRAY
18955: ST_TO_ADDR
18956: GO 19052
18958: LD_LOC 18
18962: PUSH
18963: LD_INT 3
18965: ARRAY
18966: DOUBLE
18967: EQUAL
18968: IFTRUE 18972
18970: GO 18989
18972: POP
// result := upgradeable [ 3 ] ; trough_upgrade [ 4 ] :
18973: LD_ADDR_VAR 0 2
18977: PUSH
18978: LD_LOC 17
18982: PUSH
18983: LD_INT 3
18985: ARRAY
18986: ST_TO_ADDR
18987: GO 19052
18989: LD_LOC 18
18993: PUSH
18994: LD_INT 4
18996: ARRAY
18997: DOUBLE
18998: EQUAL
18999: IFTRUE 19003
19001: GO 19020
19003: POP
// result := upgradeable [ 4 ] ; trough_upgrade [ 5 ] :
19004: LD_ADDR_VAR 0 2
19008: PUSH
19009: LD_LOC 17
19013: PUSH
19014: LD_INT 4
19016: ARRAY
19017: ST_TO_ADDR
19018: GO 19052
19020: LD_LOC 18
19024: PUSH
19025: LD_INT 5
19027: ARRAY
19028: DOUBLE
19029: EQUAL
19030: IFTRUE 19034
19032: GO 19051
19034: POP
// result := upgradeable [ 5 ] ; end ;
19035: LD_ADDR_VAR 0 2
19039: PUSH
19040: LD_LOC 17
19044: PUSH
19045: LD_INT 5
19047: ARRAY
19048: ST_TO_ADDR
19049: GO 19052
19051: POP
// end ;
19052: LD_VAR 0 2
19056: RET
// function BasicFrom ( b ) ; begin
19057: LD_INT 0
19059: PPUSH
// result := b ;
19060: LD_ADDR_VAR 0 2
19064: PUSH
19065: LD_VAR 0 1
19069: ST_TO_ADDR
// case b of trough_upgrade [ 1 ] :
19070: LD_VAR 0 1
19074: PUSH
19075: LD_LOC 18
19079: PUSH
19080: LD_INT 1
19082: ARRAY
19083: DOUBLE
19084: EQUAL
19085: IFTRUE 19089
19087: GO 19106
19089: POP
// result := upgradeable [ 1 ] ; trough_upgrade [ 2 ] :
19090: LD_ADDR_VAR 0 2
19094: PUSH
19095: LD_LOC 17
19099: PUSH
19100: LD_INT 1
19102: ARRAY
19103: ST_TO_ADDR
19104: GO 19231
19106: LD_LOC 18
19110: PUSH
19111: LD_INT 2
19113: ARRAY
19114: DOUBLE
19115: EQUAL
19116: IFTRUE 19120
19118: GO 19137
19120: POP
// result := upgradeable [ 2 ] ; trough_upgrade [ 3 ] :
19121: LD_ADDR_VAR 0 2
19125: PUSH
19126: LD_LOC 17
19130: PUSH
19131: LD_INT 2
19133: ARRAY
19134: ST_TO_ADDR
19135: GO 19231
19137: LD_LOC 18
19141: PUSH
19142: LD_INT 3
19144: ARRAY
19145: DOUBLE
19146: EQUAL
19147: IFTRUE 19151
19149: GO 19168
19151: POP
// result := upgradeable [ 3 ] ; trough_upgrade [ 4 ] :
19152: LD_ADDR_VAR 0 2
19156: PUSH
19157: LD_LOC 17
19161: PUSH
19162: LD_INT 3
19164: ARRAY
19165: ST_TO_ADDR
19166: GO 19231
19168: LD_LOC 18
19172: PUSH
19173: LD_INT 4
19175: ARRAY
19176: DOUBLE
19177: EQUAL
19178: IFTRUE 19182
19180: GO 19199
19182: POP
// result := upgradeable [ 4 ] ; trough_upgrade [ 6 ] :
19183: LD_ADDR_VAR 0 2
19187: PUSH
19188: LD_LOC 17
19192: PUSH
19193: LD_INT 4
19195: ARRAY
19196: ST_TO_ADDR
19197: GO 19231
19199: LD_LOC 18
19203: PUSH
19204: LD_INT 6
19206: ARRAY
19207: DOUBLE
19208: EQUAL
19209: IFTRUE 19213
19211: GO 19230
19213: POP
// result := upgradeable [ 6 ] ; end ;
19214: LD_ADDR_VAR 0 2
19218: PUSH
19219: LD_LOC 17
19223: PUSH
19224: LD_INT 6
19226: ARRAY
19227: ST_TO_ADDR
19228: GO 19231
19230: POP
// end ;
19231: LD_VAR 0 2
19235: RET
// export function place_b ; var i ; begin
19236: LD_INT 0
19238: PPUSH
19239: PPUSH
// upgradeable := [ b_depot , b_workshop , b_armoury , b_lab , b_lab_half , b_lab ] ;
19240: LD_ADDR_LOC 17
19244: PUSH
19245: LD_INT 0
19247: PUSH
19248: LD_INT 2
19250: PUSH
19251: LD_INT 4
19253: PUSH
19254: LD_INT 6
19256: PUSH
19257: LD_INT 7
19259: PUSH
19260: LD_INT 6
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: ST_TO_ADDR
// trough_upgrade := [ b_warehouse , b_factory , b_barracks , b_lab_half , b_lab_full , b_lab_full ] ;
19271: LD_ADDR_LOC 18
19275: PUSH
19276: LD_INT 1
19278: PUSH
19279: LD_INT 3
19281: PUSH
19282: LD_INT 5
19284: PUSH
19285: LD_INT 7
19287: PUSH
19288: LD_INT 8
19290: PUSH
19291: LD_INT 8
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: ST_TO_ADDR
// aici1 := [ [ [ 0 , class_engineer , 1 ] , [ 1 , class_scientistic , 3 ] , [ 2 , class_soldier , 2 ] , [ 0 , class_mechanic , 0 ] ] , [ [ 1 , class_engineer , 1 ] , [ 1 , class_scientistic , 3 ] , [ 2 , class_soldier , 3 ] , [ 0 , class_mechanic , 0 ] ] , [ [ 1 , class_engineer , 4 ] , [ 1 , class_scientistic , 3 ] , [ 3 , class_soldier , 5 ] , [ 0 , class_mechanic , 0 ] ] ] [ difficulty ] ;
19302: LD_ADDR_EXP 109
19306: PUSH
19307: LD_INT 0
19309: PUSH
19310: LD_INT 2
19312: PUSH
19313: LD_INT 1
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: LIST
19320: PUSH
19321: LD_INT 1
19323: PUSH
19324: LD_INT 4
19326: PUSH
19327: LD_INT 3
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: LIST
19334: PUSH
19335: LD_INT 2
19337: PUSH
19338: LD_INT 1
19340: PUSH
19341: LD_INT 2
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: LIST
19348: PUSH
19349: LD_INT 0
19351: PUSH
19352: LD_INT 3
19354: PUSH
19355: LD_INT 0
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: LIST
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 1
19371: PUSH
19372: LD_INT 2
19374: PUSH
19375: LD_INT 1
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 1
19385: PUSH
19386: LD_INT 4
19388: PUSH
19389: LD_INT 3
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 2
19399: PUSH
19400: LD_INT 1
19402: PUSH
19403: LD_INT 3
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 0
19413: PUSH
19414: LD_INT 3
19416: PUSH
19417: LD_INT 0
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: LIST
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: PUSH
19431: LD_INT 1
19433: PUSH
19434: LD_INT 2
19436: PUSH
19437: LD_INT 4
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 1
19447: PUSH
19448: LD_INT 4
19450: PUSH
19451: LD_INT 3
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 3
19461: PUSH
19462: LD_INT 1
19464: PUSH
19465: LD_INT 5
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: LIST
19472: PUSH
19473: LD_INT 0
19475: PUSH
19476: LD_INT 3
19478: PUSH
19479: LD_INT 0
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: LIST
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: LIST
19497: PUSH
19498: LD_OWVAR 67
19502: ARRAY
19503: ST_TO_ADDR
// aici2 := [ [ [ 1 , class_engineer , 6 ] , [ 0 , class_scientistic , 4 ] , [ 2 , class_soldier , 3 ] , [ 0 , class_mechanic , 3 ] ] , [ [ 1 , class_engineer , 6 ] , [ 0 , class_scientistic , 5 ] , [ 2 , class_soldier , 3 ] , [ 0 , class_mechanic , 3 ] ] , [ [ 1 , class_engineer , 7 ] , [ 0 , class_scientistic , 5 ] , [ 2 , class_soldier , 3 ] , [ 0 , class_mechanic , 3 ] ] ] [ difficulty ] ;
19504: LD_ADDR_EXP 110
19508: PUSH
19509: LD_INT 1
19511: PUSH
19512: LD_INT 2
19514: PUSH
19515: LD_INT 6
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 0
19525: PUSH
19526: LD_INT 4
19528: PUSH
19529: LD_INT 4
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 2
19539: PUSH
19540: LD_INT 1
19542: PUSH
19543: LD_INT 3
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 0
19553: PUSH
19554: LD_INT 3
19556: PUSH
19557: LD_INT 3
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: LIST
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 1
19573: PUSH
19574: LD_INT 2
19576: PUSH
19577: LD_INT 6
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 0
19587: PUSH
19588: LD_INT 4
19590: PUSH
19591: LD_INT 5
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 2
19601: PUSH
19602: LD_INT 1
19604: PUSH
19605: LD_INT 3
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 0
19615: PUSH
19616: LD_INT 3
19618: PUSH
19619: LD_INT 3
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: LIST
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 1
19635: PUSH
19636: LD_INT 2
19638: PUSH
19639: LD_INT 7
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: LD_INT 4
19652: PUSH
19653: LD_INT 5
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: LIST
19660: PUSH
19661: LD_INT 2
19663: PUSH
19664: LD_INT 1
19666: PUSH
19667: LD_INT 3
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 0
19677: PUSH
19678: LD_INT 3
19680: PUSH
19681: LD_INT 3
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: LIST
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: LIST
19699: PUSH
19700: LD_OWVAR 67
19704: ARRAY
19705: ST_TO_ADDR
// aici3 := [ [ [ 2 , class_engineer , 5 ] , [ 3 , class_scientistic , 3 ] , [ 6 , class_soldier , 4 ] , [ 5 , class_mechanic , 5 ] ] , [ [ 2 , class_engineer , 6 ] , [ 3 , class_scientistic , 4 ] , [ 6 , class_soldier , 5 ] , [ 5 , class_mechanic , 6 ] ] , [ [ 2 , class_engineer , 6 ] , [ 3 , class_scientistic , 4 ] , [ 6 , class_soldier , 6 ] , [ 5 , class_mechanic , 7 ] ] ] [ difficulty ] ;
19706: LD_ADDR_EXP 111
19710: PUSH
19711: LD_INT 2
19713: PUSH
19714: LD_INT 2
19716: PUSH
19717: LD_INT 5
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 3
19727: PUSH
19728: LD_INT 4
19730: PUSH
19731: LD_INT 3
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 6
19741: PUSH
19742: LD_INT 1
19744: PUSH
19745: LD_INT 4
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 5
19755: PUSH
19756: LD_INT 3
19758: PUSH
19759: LD_INT 5
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: LIST
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 2
19775: PUSH
19776: LD_INT 2
19778: PUSH
19779: LD_INT 6
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: LIST
19786: PUSH
19787: LD_INT 3
19789: PUSH
19790: LD_INT 4
19792: PUSH
19793: LD_INT 4
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: LIST
19800: PUSH
19801: LD_INT 6
19803: PUSH
19804: LD_INT 1
19806: PUSH
19807: LD_INT 5
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 5
19817: PUSH
19818: LD_INT 3
19820: PUSH
19821: LD_INT 6
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: LIST
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 2
19837: PUSH
19838: LD_INT 2
19840: PUSH
19841: LD_INT 6
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 3
19851: PUSH
19852: LD_INT 4
19854: PUSH
19855: LD_INT 4
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 6
19865: PUSH
19866: LD_INT 1
19868: PUSH
19869: LD_INT 6
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 5
19879: PUSH
19880: LD_INT 3
19882: PUSH
19883: LD_INT 7
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: LIST
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: LIST
19901: PUSH
19902: LD_OWVAR 67
19906: ARRAY
19907: ST_TO_ADDR
// aici4 := [ [ [ 0 , class_engineer , 5 ] , [ 0 , class_scientistic , 3 ] , [ 8 , class_soldier , 3 ] , [ 3 , class_mechanic , 3 ] ] , [ [ 0 , class_engineer , 6 ] , [ 0 , class_scientistic , 4 ] , [ 8 , class_soldier , 4 ] , [ 3 , class_mechanic , 4 ] ] , [ [ 0 , class_engineer , 6 ] , [ 0 , class_scientistic , 5 ] , [ 8 , class_soldier , 5 ] , [ 3 , class_mechanic , 5 ] ] ] [ difficulty ] ;
19908: LD_ADDR_EXP 112
19912: PUSH
19913: LD_INT 0
19915: PUSH
19916: LD_INT 2
19918: PUSH
19919: LD_INT 5
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 0
19929: PUSH
19930: LD_INT 4
19932: PUSH
19933: LD_INT 3
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 8
19943: PUSH
19944: LD_INT 1
19946: PUSH
19947: LD_INT 3
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 3
19957: PUSH
19958: LD_INT 3
19960: PUSH
19961: LD_INT 3
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: LIST
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 0
19977: PUSH
19978: LD_INT 2
19980: PUSH
19981: LD_INT 6
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 0
19991: PUSH
19992: LD_INT 4
19994: PUSH
19995: LD_INT 4
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 8
20005: PUSH
20006: LD_INT 1
20008: PUSH
20009: LD_INT 4
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: LIST
20016: PUSH
20017: LD_INT 3
20019: PUSH
20020: LD_INT 3
20022: PUSH
20023: LD_INT 4
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: LIST
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: PUSH
20037: LD_INT 0
20039: PUSH
20040: LD_INT 2
20042: PUSH
20043: LD_INT 6
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 0
20053: PUSH
20054: LD_INT 4
20056: PUSH
20057: LD_INT 5
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 8
20067: PUSH
20068: LD_INT 1
20070: PUSH
20071: LD_INT 5
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 3
20081: PUSH
20082: LD_INT 3
20084: PUSH
20085: LD_INT 5
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: LIST
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: LIST
20103: PUSH
20104: LD_OWVAR 67
20108: ARRAY
20109: ST_TO_ADDR
// aici5 := [ [ [ 2 , class_soldier , 5 ] ] , [ [ 2 , class_soldier , 6 ] ] , [ [ 2 , class_soldier , 7 ] ] ] [ difficulty ] ;
20110: LD_ADDR_EXP 113
20114: PUSH
20115: LD_INT 2
20117: PUSH
20118: LD_INT 1
20120: PUSH
20121: LD_INT 5
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: LIST
20128: PUSH
20129: EMPTY
20130: LIST
20131: PUSH
20132: LD_INT 2
20134: PUSH
20135: LD_INT 1
20137: PUSH
20138: LD_INT 6
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: LIST
20145: PUSH
20146: EMPTY
20147: LIST
20148: PUSH
20149: LD_INT 2
20151: PUSH
20152: LD_INT 1
20154: PUSH
20155: LD_INT 7
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: LIST
20162: PUSH
20163: EMPTY
20164: LIST
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: LIST
20170: PUSH
20171: LD_OWVAR 67
20175: ARRAY
20176: ST_TO_ADDR
// builds1 := [ [ [ b_depot , 85 , 86 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_breastwork , 100 , 104 , 0 , [ ] , 0 , 0 , 0 , 0 , 1 ] , [ b_breastwork , 85 , 91 , 1 , [ ] , 0 , 0 , 0 , 0 , 1 ] , [ b_bunker , 91 , 101 , 0 , [ us_double_gun ] , 1 , 1 , 1 , 1 , 1 ] , [ b_armoury , 91 , 86 , 3 , [ ] , 1 , 0 , 0 , 0 , 1 ] , [ b_siberite_mine , 101 , 93 , 3 , [ ] , 0 , 0 , 0 , 0 , 0 ] , [ b_oil_mine , 87 , 84 , 0 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_power , 101 , 96 , 3 , [ ] , 1 , 1 , 1 , 0 , 0 ] ] , [ [ b_depot , 85 , 86 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_breastwork , 100 , 104 , 0 , [ ] , 1 , 1 , 1 , 1 , 1 ] , [ b_breastwork , 85 , 91 , 1 , [ ] , 0 , 0 , 0 , 0 , 1 ] , [ b_bunker , 91 , 101 , 0 , [ us_light_gun ] , 1 , 1 , 1 , 1 , 1 ] , [ b_armoury , 91 , 86 , 3 , [ ] , 1 , 1 , 0 , 0 , 1 ] , [ b_siberite_mine , 101 , 93 , 3 , [ ] , 1 , 1 , 1 , 1 , 0 ] , [ b_oil_mine , 87 , 84 , 0 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_power , 101 , 96 , 3 , [ ] , 1 , 1 , 1 , 0 , 0 ] ] , [ [ b_depot , 85 , 86 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_breastwork , 100 , 104 , 0 , [ ] , 1 , 1 , 1 , 1 , 1 ] , [ b_breastwork , 85 , 91 , 1 , [ ] , 1 , 1 , 1 , 1 , 1 ] , [ b_bunker , 91 , 101 , 0 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 1 ] , [ b_armoury , 91 , 86 , 3 , [ ] , 1 , 1 , 1 , 1 , 1 ] , [ b_siberite_mine , 101 , 93 , 3 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_mine , 87 , 84 , 0 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_power , 101 , 96 , 3 , [ ] , 1 , 1 , 1 , 0 , 0 ] ] ] [ difficulty ] ;
20177: LD_ADDR_EXP 104
20181: PUSH
20182: LD_INT 0
20184: PUSH
20185: LD_INT 85
20187: PUSH
20188: LD_INT 86
20190: PUSH
20191: LD_INT 2
20193: PUSH
20194: EMPTY
20195: PUSH
20196: LD_INT 1
20198: PUSH
20199: LD_INT 1
20201: PUSH
20202: LD_INT 1
20204: PUSH
20205: LD_INT 0
20207: PUSH
20208: LD_INT 0
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 31
20225: PUSH
20226: LD_INT 100
20228: PUSH
20229: LD_INT 104
20231: PUSH
20232: LD_INT 0
20234: PUSH
20235: EMPTY
20236: PUSH
20237: LD_INT 0
20239: PUSH
20240: LD_INT 0
20242: PUSH
20243: LD_INT 0
20245: PUSH
20246: LD_INT 0
20248: PUSH
20249: LD_INT 1
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: PUSH
20264: LD_INT 31
20266: PUSH
20267: LD_INT 85
20269: PUSH
20270: LD_INT 91
20272: PUSH
20273: LD_INT 1
20275: PUSH
20276: EMPTY
20277: PUSH
20278: LD_INT 0
20280: PUSH
20281: LD_INT 0
20283: PUSH
20284: LD_INT 0
20286: PUSH
20287: LD_INT 0
20289: PUSH
20290: LD_INT 1
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 32
20307: PUSH
20308: LD_INT 91
20310: PUSH
20311: LD_INT 101
20313: PUSH
20314: LD_INT 0
20316: PUSH
20317: LD_INT 5
20319: PUSH
20320: EMPTY
20321: LIST
20322: PUSH
20323: LD_INT 1
20325: PUSH
20326: LD_INT 1
20328: PUSH
20329: LD_INT 1
20331: PUSH
20332: LD_INT 1
20334: PUSH
20335: LD_INT 1
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: PUSH
20350: LD_INT 4
20352: PUSH
20353: LD_INT 91
20355: PUSH
20356: LD_INT 86
20358: PUSH
20359: LD_INT 3
20361: PUSH
20362: EMPTY
20363: PUSH
20364: LD_INT 1
20366: PUSH
20367: LD_INT 0
20369: PUSH
20370: LD_INT 0
20372: PUSH
20373: LD_INT 0
20375: PUSH
20376: LD_INT 1
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 30
20393: PUSH
20394: LD_INT 101
20396: PUSH
20397: LD_INT 93
20399: PUSH
20400: LD_INT 3
20402: PUSH
20403: EMPTY
20404: PUSH
20405: LD_INT 0
20407: PUSH
20408: LD_INT 0
20410: PUSH
20411: LD_INT 0
20413: PUSH
20414: LD_INT 0
20416: PUSH
20417: LD_INT 0
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 29
20434: PUSH
20435: LD_INT 87
20437: PUSH
20438: LD_INT 84
20440: PUSH
20441: LD_INT 0
20443: PUSH
20444: EMPTY
20445: PUSH
20446: LD_INT 1
20448: PUSH
20449: LD_INT 1
20451: PUSH
20452: LD_INT 1
20454: PUSH
20455: LD_INT 0
20457: PUSH
20458: LD_INT 0
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 26
20475: PUSH
20476: LD_INT 101
20478: PUSH
20479: LD_INT 96
20481: PUSH
20482: LD_INT 3
20484: PUSH
20485: EMPTY
20486: PUSH
20487: LD_INT 1
20489: PUSH
20490: LD_INT 1
20492: PUSH
20493: LD_INT 1
20495: PUSH
20496: LD_INT 0
20498: PUSH
20499: LD_INT 0
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: PUSH
20524: LD_INT 0
20526: PUSH
20527: LD_INT 85
20529: PUSH
20530: LD_INT 86
20532: PUSH
20533: LD_INT 2
20535: PUSH
20536: EMPTY
20537: PUSH
20538: LD_INT 1
20540: PUSH
20541: LD_INT 1
20543: PUSH
20544: LD_INT 1
20546: PUSH
20547: LD_INT 0
20549: PUSH
20550: LD_INT 0
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 31
20567: PUSH
20568: LD_INT 100
20570: PUSH
20571: LD_INT 104
20573: PUSH
20574: LD_INT 0
20576: PUSH
20577: EMPTY
20578: PUSH
20579: LD_INT 1
20581: PUSH
20582: LD_INT 1
20584: PUSH
20585: LD_INT 1
20587: PUSH
20588: LD_INT 1
20590: PUSH
20591: LD_INT 1
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: PUSH
20606: LD_INT 31
20608: PUSH
20609: LD_INT 85
20611: PUSH
20612: LD_INT 91
20614: PUSH
20615: LD_INT 1
20617: PUSH
20618: EMPTY
20619: PUSH
20620: LD_INT 0
20622: PUSH
20623: LD_INT 0
20625: PUSH
20626: LD_INT 0
20628: PUSH
20629: LD_INT 0
20631: PUSH
20632: LD_INT 1
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 32
20649: PUSH
20650: LD_INT 91
20652: PUSH
20653: LD_INT 101
20655: PUSH
20656: LD_INT 0
20658: PUSH
20659: LD_INT 3
20661: PUSH
20662: EMPTY
20663: LIST
20664: PUSH
20665: LD_INT 1
20667: PUSH
20668: LD_INT 1
20670: PUSH
20671: LD_INT 1
20673: PUSH
20674: LD_INT 1
20676: PUSH
20677: LD_INT 1
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 4
20694: PUSH
20695: LD_INT 91
20697: PUSH
20698: LD_INT 86
20700: PUSH
20701: LD_INT 3
20703: PUSH
20704: EMPTY
20705: PUSH
20706: LD_INT 1
20708: PUSH
20709: LD_INT 1
20711: PUSH
20712: LD_INT 0
20714: PUSH
20715: LD_INT 0
20717: PUSH
20718: LD_INT 1
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: PUSH
20733: LD_INT 30
20735: PUSH
20736: LD_INT 101
20738: PUSH
20739: LD_INT 93
20741: PUSH
20742: LD_INT 3
20744: PUSH
20745: EMPTY
20746: PUSH
20747: LD_INT 1
20749: PUSH
20750: LD_INT 1
20752: PUSH
20753: LD_INT 1
20755: PUSH
20756: LD_INT 1
20758: PUSH
20759: LD_INT 0
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: PUSH
20774: LD_INT 29
20776: PUSH
20777: LD_INT 87
20779: PUSH
20780: LD_INT 84
20782: PUSH
20783: LD_INT 0
20785: PUSH
20786: EMPTY
20787: PUSH
20788: LD_INT 1
20790: PUSH
20791: LD_INT 1
20793: PUSH
20794: LD_INT 1
20796: PUSH
20797: LD_INT 0
20799: PUSH
20800: LD_INT 0
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 26
20817: PUSH
20818: LD_INT 101
20820: PUSH
20821: LD_INT 96
20823: PUSH
20824: LD_INT 3
20826: PUSH
20827: EMPTY
20828: PUSH
20829: LD_INT 1
20831: PUSH
20832: LD_INT 1
20834: PUSH
20835: LD_INT 1
20837: PUSH
20838: LD_INT 0
20840: PUSH
20841: LD_INT 0
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 0
20868: PUSH
20869: LD_INT 85
20871: PUSH
20872: LD_INT 86
20874: PUSH
20875: LD_INT 2
20877: PUSH
20878: EMPTY
20879: PUSH
20880: LD_INT 1
20882: PUSH
20883: LD_INT 1
20885: PUSH
20886: LD_INT 1
20888: PUSH
20889: LD_INT 0
20891: PUSH
20892: LD_INT 0
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: PUSH
20907: LD_INT 31
20909: PUSH
20910: LD_INT 100
20912: PUSH
20913: LD_INT 104
20915: PUSH
20916: LD_INT 0
20918: PUSH
20919: EMPTY
20920: PUSH
20921: LD_INT 1
20923: PUSH
20924: LD_INT 1
20926: PUSH
20927: LD_INT 1
20929: PUSH
20930: LD_INT 1
20932: PUSH
20933: LD_INT 1
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 31
20950: PUSH
20951: LD_INT 85
20953: PUSH
20954: LD_INT 91
20956: PUSH
20957: LD_INT 1
20959: PUSH
20960: EMPTY
20961: PUSH
20962: LD_INT 1
20964: PUSH
20965: LD_INT 1
20967: PUSH
20968: LD_INT 1
20970: PUSH
20971: LD_INT 1
20973: PUSH
20974: LD_INT 1
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 32
20991: PUSH
20992: LD_INT 91
20994: PUSH
20995: LD_INT 101
20997: PUSH
20998: LD_INT 0
21000: PUSH
21001: LD_INT 4
21003: PUSH
21004: EMPTY
21005: LIST
21006: PUSH
21007: LD_INT 1
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: LD_INT 1
21015: PUSH
21016: LD_INT 1
21018: PUSH
21019: LD_INT 1
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 4
21036: PUSH
21037: LD_INT 91
21039: PUSH
21040: LD_INT 86
21042: PUSH
21043: LD_INT 3
21045: PUSH
21046: EMPTY
21047: PUSH
21048: LD_INT 1
21050: PUSH
21051: LD_INT 1
21053: PUSH
21054: LD_INT 1
21056: PUSH
21057: LD_INT 1
21059: PUSH
21060: LD_INT 1
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 30
21077: PUSH
21078: LD_INT 101
21080: PUSH
21081: LD_INT 93
21083: PUSH
21084: LD_INT 3
21086: PUSH
21087: EMPTY
21088: PUSH
21089: LD_INT 1
21091: PUSH
21092: LD_INT 1
21094: PUSH
21095: LD_INT 1
21097: PUSH
21098: LD_INT 0
21100: PUSH
21101: LD_INT 0
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 29
21118: PUSH
21119: LD_INT 87
21121: PUSH
21122: LD_INT 84
21124: PUSH
21125: LD_INT 0
21127: PUSH
21128: EMPTY
21129: PUSH
21130: LD_INT 1
21132: PUSH
21133: LD_INT 1
21135: PUSH
21136: LD_INT 1
21138: PUSH
21139: LD_INT 0
21141: PUSH
21142: LD_INT 0
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 26
21159: PUSH
21160: LD_INT 101
21162: PUSH
21163: LD_INT 96
21165: PUSH
21166: LD_INT 3
21168: PUSH
21169: EMPTY
21170: PUSH
21171: LD_INT 1
21173: PUSH
21174: LD_INT 1
21176: PUSH
21177: LD_INT 1
21179: PUSH
21180: LD_INT 0
21182: PUSH
21183: LD_INT 0
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: LIST
21212: PUSH
21213: LD_OWVAR 67
21217: ARRAY
21218: ST_TO_ADDR
// builds2 := [ [ b_workshop , 60 , 9 , 4 , [ ] , 1 , 0 , 0 , 0 , 0 ] , [ b_oil_mine , 53 , 13 , 2 , [ ] , 1 , 0 , 0 , 0 , 0 ] , [ b_oil_power , 50 , 3 , 4 , [ ] , 1 , 0 , 0 , 0 , 0 ] , [ b_depot , 46 , 5 , 2 , [ ] , 1 , 0 , 0 , 0 , 0 ] , [ b_armoury , 59 , 9 , 4 , [ ] , 1 , 0 , 0 , 1 , 1 ] , [ b_breastwork , 50 , 14 , 0 , [ ] , 1 , 0 , 0 , 1 , 1 ] ] ;
21219: LD_ADDR_EXP 105
21223: PUSH
21224: LD_INT 2
21226: PUSH
21227: LD_INT 60
21229: PUSH
21230: LD_INT 9
21232: PUSH
21233: LD_INT 4
21235: PUSH
21236: EMPTY
21237: PUSH
21238: LD_INT 1
21240: PUSH
21241: LD_INT 0
21243: PUSH
21244: LD_INT 0
21246: PUSH
21247: LD_INT 0
21249: PUSH
21250: LD_INT 0
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: PUSH
21265: LD_INT 29
21267: PUSH
21268: LD_INT 53
21270: PUSH
21271: LD_INT 13
21273: PUSH
21274: LD_INT 2
21276: PUSH
21277: EMPTY
21278: PUSH
21279: LD_INT 1
21281: PUSH
21282: LD_INT 0
21284: PUSH
21285: LD_INT 0
21287: PUSH
21288: LD_INT 0
21290: PUSH
21291: LD_INT 0
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 26
21308: PUSH
21309: LD_INT 50
21311: PUSH
21312: LD_INT 3
21314: PUSH
21315: LD_INT 4
21317: PUSH
21318: EMPTY
21319: PUSH
21320: LD_INT 1
21322: PUSH
21323: LD_INT 0
21325: PUSH
21326: LD_INT 0
21328: PUSH
21329: LD_INT 0
21331: PUSH
21332: LD_INT 0
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 0
21349: PUSH
21350: LD_INT 46
21352: PUSH
21353: LD_INT 5
21355: PUSH
21356: LD_INT 2
21358: PUSH
21359: EMPTY
21360: PUSH
21361: LD_INT 1
21363: PUSH
21364: LD_INT 0
21366: PUSH
21367: LD_INT 0
21369: PUSH
21370: LD_INT 0
21372: PUSH
21373: LD_INT 0
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 4
21390: PUSH
21391: LD_INT 59
21393: PUSH
21394: LD_INT 9
21396: PUSH
21397: LD_INT 4
21399: PUSH
21400: EMPTY
21401: PUSH
21402: LD_INT 1
21404: PUSH
21405: LD_INT 0
21407: PUSH
21408: LD_INT 0
21410: PUSH
21411: LD_INT 1
21413: PUSH
21414: LD_INT 1
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 31
21431: PUSH
21432: LD_INT 50
21434: PUSH
21435: LD_INT 14
21437: PUSH
21438: LD_INT 0
21440: PUSH
21441: EMPTY
21442: PUSH
21443: LD_INT 1
21445: PUSH
21446: LD_INT 0
21448: PUSH
21449: LD_INT 0
21451: PUSH
21452: LD_INT 1
21454: PUSH
21455: LD_INT 1
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: ST_TO_ADDR
// if difficulty = 1 then
21478: LD_OWVAR 67
21482: PUSH
21483: LD_INT 1
21485: EQUAL
21486: IFFALSE 22285
// builds3 := [ [ b_breastwork , 41 , 23 , 5 , [ ] , 1 , 0 , 0 , 1 , 1 ] , [ b_bunker , 18 , 8 , 4 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 25 , 13 , 4 , [ us_double_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 17 , 18 , 4 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 31 , 49 , 5 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 35 , 44 , 5 , [ us_double_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 34 , 26 , 0 , [ us_radar ] , 1 , 1 , 1 , 1 , 0 ] , [ b_siberite_mine , 29 , 30 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_mine , 39 , 37 , 1 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_siberite_power , 24 , 44 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_siberite_power , 27 , 26 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_warehouse , 32 , 35 , 4 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_lab_full , 21 , 35 , 1 , [ b_lab_opto , b_lab_weapon ] , 1 , 1 , 1 , 0 , 0 ] , [ b_factory , 18 , 25 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_control_tower , 22 , 40 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_track , 14 , 21 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_gun , 15 , 25 , 1 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_radar , 18 , 29 , 0 , [ ] , 1 , 1 , 1 , 0 , 0 ] ] else
21488: LD_ADDR_EXP 106
21492: PUSH
21493: LD_INT 31
21495: PUSH
21496: LD_INT 41
21498: PUSH
21499: LD_INT 23
21501: PUSH
21502: LD_INT 5
21504: PUSH
21505: EMPTY
21506: PUSH
21507: LD_INT 1
21509: PUSH
21510: LD_INT 0
21512: PUSH
21513: LD_INT 0
21515: PUSH
21516: LD_INT 1
21518: PUSH
21519: LD_INT 1
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 32
21536: PUSH
21537: LD_INT 18
21539: PUSH
21540: LD_INT 8
21542: PUSH
21543: LD_INT 4
21545: PUSH
21546: LD_INT 4
21548: PUSH
21549: EMPTY
21550: LIST
21551: PUSH
21552: LD_INT 1
21554: PUSH
21555: LD_INT 1
21557: PUSH
21558: LD_INT 1
21560: PUSH
21561: LD_INT 1
21563: PUSH
21564: LD_INT 0
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 32
21581: PUSH
21582: LD_INT 25
21584: PUSH
21585: LD_INT 13
21587: PUSH
21588: LD_INT 4
21590: PUSH
21591: LD_INT 5
21593: PUSH
21594: EMPTY
21595: LIST
21596: PUSH
21597: LD_INT 1
21599: PUSH
21600: LD_INT 1
21602: PUSH
21603: LD_INT 1
21605: PUSH
21606: LD_INT 1
21608: PUSH
21609: LD_INT 0
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 32
21626: PUSH
21627: LD_INT 17
21629: PUSH
21630: LD_INT 18
21632: PUSH
21633: LD_INT 4
21635: PUSH
21636: LD_INT 4
21638: PUSH
21639: EMPTY
21640: LIST
21641: PUSH
21642: LD_INT 1
21644: PUSH
21645: LD_INT 1
21647: PUSH
21648: LD_INT 1
21650: PUSH
21651: LD_INT 1
21653: PUSH
21654: LD_INT 0
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: PUSH
21669: LD_INT 32
21671: PUSH
21672: LD_INT 31
21674: PUSH
21675: LD_INT 49
21677: PUSH
21678: LD_INT 5
21680: PUSH
21681: LD_INT 4
21683: PUSH
21684: EMPTY
21685: LIST
21686: PUSH
21687: LD_INT 1
21689: PUSH
21690: LD_INT 1
21692: PUSH
21693: LD_INT 1
21695: PUSH
21696: LD_INT 1
21698: PUSH
21699: LD_INT 0
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 32
21716: PUSH
21717: LD_INT 35
21719: PUSH
21720: LD_INT 44
21722: PUSH
21723: LD_INT 5
21725: PUSH
21726: LD_INT 5
21728: PUSH
21729: EMPTY
21730: LIST
21731: PUSH
21732: LD_INT 1
21734: PUSH
21735: LD_INT 1
21737: PUSH
21738: LD_INT 1
21740: PUSH
21741: LD_INT 1
21743: PUSH
21744: LD_INT 0
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 32
21761: PUSH
21762: LD_INT 34
21764: PUSH
21765: LD_INT 26
21767: PUSH
21768: LD_INT 0
21770: PUSH
21771: LD_INT 11
21773: PUSH
21774: EMPTY
21775: LIST
21776: PUSH
21777: LD_INT 1
21779: PUSH
21780: LD_INT 1
21782: PUSH
21783: LD_INT 1
21785: PUSH
21786: LD_INT 1
21788: PUSH
21789: LD_INT 0
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 30
21806: PUSH
21807: LD_INT 29
21809: PUSH
21810: LD_INT 30
21812: PUSH
21813: LD_INT 2
21815: PUSH
21816: EMPTY
21817: PUSH
21818: LD_INT 1
21820: PUSH
21821: LD_INT 1
21823: PUSH
21824: LD_INT 1
21826: PUSH
21827: LD_INT 0
21829: PUSH
21830: LD_INT 0
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: PUSH
21845: LD_INT 29
21847: PUSH
21848: LD_INT 39
21850: PUSH
21851: LD_INT 37
21853: PUSH
21854: LD_INT 1
21856: PUSH
21857: EMPTY
21858: PUSH
21859: LD_INT 1
21861: PUSH
21862: LD_INT 1
21864: PUSH
21865: LD_INT 1
21867: PUSH
21868: LD_INT 0
21870: PUSH
21871: LD_INT 0
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: PUSH
21886: LD_INT 28
21888: PUSH
21889: LD_INT 24
21891: PUSH
21892: LD_INT 44
21894: PUSH
21895: LD_INT 2
21897: PUSH
21898: EMPTY
21899: PUSH
21900: LD_INT 1
21902: PUSH
21903: LD_INT 1
21905: PUSH
21906: LD_INT 1
21908: PUSH
21909: LD_INT 0
21911: PUSH
21912: LD_INT 0
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: PUSH
21927: LD_INT 28
21929: PUSH
21930: LD_INT 27
21932: PUSH
21933: LD_INT 26
21935: PUSH
21936: LD_INT 2
21938: PUSH
21939: EMPTY
21940: PUSH
21941: LD_INT 1
21943: PUSH
21944: LD_INT 1
21946: PUSH
21947: LD_INT 1
21949: PUSH
21950: LD_INT 0
21952: PUSH
21953: LD_INT 0
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 1
21970: PUSH
21971: LD_INT 32
21973: PUSH
21974: LD_INT 35
21976: PUSH
21977: LD_INT 4
21979: PUSH
21980: EMPTY
21981: PUSH
21982: LD_INT 1
21984: PUSH
21985: LD_INT 1
21987: PUSH
21988: LD_INT 1
21990: PUSH
21991: LD_INT 0
21993: PUSH
21994: LD_INT 0
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 8
22011: PUSH
22012: LD_INT 21
22014: PUSH
22015: LD_INT 35
22017: PUSH
22018: LD_INT 1
22020: PUSH
22021: LD_INT 15
22023: PUSH
22024: LD_INT 10
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 1
22033: PUSH
22034: LD_INT 1
22036: PUSH
22037: LD_INT 1
22039: PUSH
22040: LD_INT 0
22042: PUSH
22043: LD_INT 0
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 3
22060: PUSH
22061: LD_INT 18
22063: PUSH
22064: LD_INT 25
22066: PUSH
22067: LD_INT 2
22069: PUSH
22070: EMPTY
22071: PUSH
22072: LD_INT 1
22074: PUSH
22075: LD_INT 1
22077: PUSH
22078: LD_INT 1
22080: PUSH
22081: LD_INT 0
22083: PUSH
22084: LD_INT 0
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 36
22101: PUSH
22102: LD_INT 22
22104: PUSH
22105: LD_INT 40
22107: PUSH
22108: LD_INT 2
22110: PUSH
22111: EMPTY
22112: PUSH
22113: LD_INT 1
22115: PUSH
22116: LD_INT 1
22118: PUSH
22119: LD_INT 1
22121: PUSH
22122: LD_INT 0
22124: PUSH
22125: LD_INT 0
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: PUSH
22140: LD_INT 16
22142: PUSH
22143: LD_INT 14
22145: PUSH
22146: LD_INT 21
22148: PUSH
22149: LD_INT 2
22151: PUSH
22152: EMPTY
22153: PUSH
22154: LD_INT 1
22156: PUSH
22157: LD_INT 1
22159: PUSH
22160: LD_INT 1
22162: PUSH
22163: LD_INT 0
22165: PUSH
22166: LD_INT 0
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 17
22183: PUSH
22184: LD_INT 15
22186: PUSH
22187: LD_INT 25
22189: PUSH
22190: LD_INT 1
22192: PUSH
22193: EMPTY
22194: PUSH
22195: LD_INT 1
22197: PUSH
22198: LD_INT 1
22200: PUSH
22201: LD_INT 1
22203: PUSH
22204: LD_INT 0
22206: PUSH
22207: LD_INT 0
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 20
22224: PUSH
22225: LD_INT 18
22227: PUSH
22228: LD_INT 29
22230: PUSH
22231: LD_INT 0
22233: PUSH
22234: EMPTY
22235: PUSH
22236: LD_INT 1
22238: PUSH
22239: LD_INT 1
22241: PUSH
22242: LD_INT 1
22244: PUSH
22245: LD_INT 0
22247: PUSH
22248: LD_INT 0
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: ST_TO_ADDR
22283: GO 23080
// builds3 := [ [ b_breastwork , 41 , 23 , 5 , [ ] , 1 , 1 , 1 , 1 , 1 ] , [ b_bunker , 18 , 8 , 4 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 25 , 13 , 4 , [ us_double_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 17 , 18 , 4 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 31 , 49 , 5 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 35 , 44 , 5 , [ us_double_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 34 , 26 , 0 , [ us_radar ] , 1 , 1 , 1 , 1 , 0 ] , [ b_siberite_mine , 29 , 30 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_mine , 39 , 37 , 1 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_siberite_power , 24 , 44 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_siberite_power , 27 , 26 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_warehouse , 32 , 35 , 4 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_lab_full , 21 , 35 , 1 , [ b_lab_opto , b_lab_weapon ] , 1 , 1 , 1 , 0 , 0 ] , [ b_factory , 18 , 25 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_control_tower , 22 , 40 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_track , 14 , 21 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_gun , 15 , 25 , 1 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_radar , 18 , 29 , 0 , [ ] , 1 , 1 , 1 , 0 , 0 ] ] ;
22285: LD_ADDR_EXP 106
22289: PUSH
22290: LD_INT 31
22292: PUSH
22293: LD_INT 41
22295: PUSH
22296: LD_INT 23
22298: PUSH
22299: LD_INT 5
22301: PUSH
22302: EMPTY
22303: PUSH
22304: LD_INT 1
22306: PUSH
22307: LD_INT 1
22309: PUSH
22310: LD_INT 1
22312: PUSH
22313: LD_INT 1
22315: PUSH
22316: LD_INT 1
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 32
22333: PUSH
22334: LD_INT 18
22336: PUSH
22337: LD_INT 8
22339: PUSH
22340: LD_INT 4
22342: PUSH
22343: LD_INT 4
22345: PUSH
22346: EMPTY
22347: LIST
22348: PUSH
22349: LD_INT 1
22351: PUSH
22352: LD_INT 1
22354: PUSH
22355: LD_INT 1
22357: PUSH
22358: LD_INT 1
22360: PUSH
22361: LD_INT 0
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 32
22378: PUSH
22379: LD_INT 25
22381: PUSH
22382: LD_INT 13
22384: PUSH
22385: LD_INT 4
22387: PUSH
22388: LD_INT 5
22390: PUSH
22391: EMPTY
22392: LIST
22393: PUSH
22394: LD_INT 1
22396: PUSH
22397: LD_INT 1
22399: PUSH
22400: LD_INT 1
22402: PUSH
22403: LD_INT 1
22405: PUSH
22406: LD_INT 0
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 32
22423: PUSH
22424: LD_INT 17
22426: PUSH
22427: LD_INT 18
22429: PUSH
22430: LD_INT 4
22432: PUSH
22433: LD_INT 4
22435: PUSH
22436: EMPTY
22437: LIST
22438: PUSH
22439: LD_INT 1
22441: PUSH
22442: LD_INT 1
22444: PUSH
22445: LD_INT 1
22447: PUSH
22448: LD_INT 1
22450: PUSH
22451: LD_INT 0
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 32
22468: PUSH
22469: LD_INT 31
22471: PUSH
22472: LD_INT 49
22474: PUSH
22475: LD_INT 5
22477: PUSH
22478: LD_INT 4
22480: PUSH
22481: EMPTY
22482: LIST
22483: PUSH
22484: LD_INT 1
22486: PUSH
22487: LD_INT 1
22489: PUSH
22490: LD_INT 1
22492: PUSH
22493: LD_INT 1
22495: PUSH
22496: LD_INT 0
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 32
22513: PUSH
22514: LD_INT 35
22516: PUSH
22517: LD_INT 44
22519: PUSH
22520: LD_INT 5
22522: PUSH
22523: LD_INT 5
22525: PUSH
22526: EMPTY
22527: LIST
22528: PUSH
22529: LD_INT 1
22531: PUSH
22532: LD_INT 1
22534: PUSH
22535: LD_INT 1
22537: PUSH
22538: LD_INT 1
22540: PUSH
22541: LD_INT 0
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 32
22558: PUSH
22559: LD_INT 34
22561: PUSH
22562: LD_INT 26
22564: PUSH
22565: LD_INT 0
22567: PUSH
22568: LD_INT 11
22570: PUSH
22571: EMPTY
22572: LIST
22573: PUSH
22574: LD_INT 1
22576: PUSH
22577: LD_INT 1
22579: PUSH
22580: LD_INT 1
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: LD_INT 0
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 30
22603: PUSH
22604: LD_INT 29
22606: PUSH
22607: LD_INT 30
22609: PUSH
22610: LD_INT 2
22612: PUSH
22613: EMPTY
22614: PUSH
22615: LD_INT 1
22617: PUSH
22618: LD_INT 1
22620: PUSH
22621: LD_INT 1
22623: PUSH
22624: LD_INT 0
22626: PUSH
22627: LD_INT 0
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 29
22644: PUSH
22645: LD_INT 39
22647: PUSH
22648: LD_INT 37
22650: PUSH
22651: LD_INT 1
22653: PUSH
22654: EMPTY
22655: PUSH
22656: LD_INT 1
22658: PUSH
22659: LD_INT 1
22661: PUSH
22662: LD_INT 1
22664: PUSH
22665: LD_INT 0
22667: PUSH
22668: LD_INT 0
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 28
22685: PUSH
22686: LD_INT 24
22688: PUSH
22689: LD_INT 44
22691: PUSH
22692: LD_INT 2
22694: PUSH
22695: EMPTY
22696: PUSH
22697: LD_INT 1
22699: PUSH
22700: LD_INT 1
22702: PUSH
22703: LD_INT 1
22705: PUSH
22706: LD_INT 0
22708: PUSH
22709: LD_INT 0
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 28
22726: PUSH
22727: LD_INT 27
22729: PUSH
22730: LD_INT 26
22732: PUSH
22733: LD_INT 2
22735: PUSH
22736: EMPTY
22737: PUSH
22738: LD_INT 1
22740: PUSH
22741: LD_INT 1
22743: PUSH
22744: LD_INT 1
22746: PUSH
22747: LD_INT 0
22749: PUSH
22750: LD_INT 0
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 1
22767: PUSH
22768: LD_INT 32
22770: PUSH
22771: LD_INT 35
22773: PUSH
22774: LD_INT 4
22776: PUSH
22777: EMPTY
22778: PUSH
22779: LD_INT 1
22781: PUSH
22782: LD_INT 1
22784: PUSH
22785: LD_INT 1
22787: PUSH
22788: LD_INT 0
22790: PUSH
22791: LD_INT 0
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 8
22808: PUSH
22809: LD_INT 21
22811: PUSH
22812: LD_INT 35
22814: PUSH
22815: LD_INT 1
22817: PUSH
22818: LD_INT 15
22820: PUSH
22821: LD_INT 10
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 1
22830: PUSH
22831: LD_INT 1
22833: PUSH
22834: LD_INT 1
22836: PUSH
22837: LD_INT 0
22839: PUSH
22840: LD_INT 0
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 3
22857: PUSH
22858: LD_INT 18
22860: PUSH
22861: LD_INT 25
22863: PUSH
22864: LD_INT 2
22866: PUSH
22867: EMPTY
22868: PUSH
22869: LD_INT 1
22871: PUSH
22872: LD_INT 1
22874: PUSH
22875: LD_INT 1
22877: PUSH
22878: LD_INT 0
22880: PUSH
22881: LD_INT 0
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 36
22898: PUSH
22899: LD_INT 22
22901: PUSH
22902: LD_INT 40
22904: PUSH
22905: LD_INT 2
22907: PUSH
22908: EMPTY
22909: PUSH
22910: LD_INT 1
22912: PUSH
22913: LD_INT 1
22915: PUSH
22916: LD_INT 1
22918: PUSH
22919: LD_INT 0
22921: PUSH
22922: LD_INT 0
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 16
22939: PUSH
22940: LD_INT 14
22942: PUSH
22943: LD_INT 21
22945: PUSH
22946: LD_INT 2
22948: PUSH
22949: EMPTY
22950: PUSH
22951: LD_INT 1
22953: PUSH
22954: LD_INT 1
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: LD_INT 0
22962: PUSH
22963: LD_INT 0
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 17
22980: PUSH
22981: LD_INT 15
22983: PUSH
22984: LD_INT 25
22986: PUSH
22987: LD_INT 1
22989: PUSH
22990: EMPTY
22991: PUSH
22992: LD_INT 1
22994: PUSH
22995: LD_INT 1
22997: PUSH
22998: LD_INT 1
23000: PUSH
23001: LD_INT 0
23003: PUSH
23004: LD_INT 0
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 20
23021: PUSH
23022: LD_INT 18
23024: PUSH
23025: LD_INT 29
23027: PUSH
23028: LD_INT 0
23030: PUSH
23031: EMPTY
23032: PUSH
23033: LD_INT 1
23035: PUSH
23036: LD_INT 1
23038: PUSH
23039: LD_INT 1
23041: PUSH
23042: LD_INT 0
23044: PUSH
23045: LD_INT 0
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: ST_TO_ADDR
// builds4 := [ [ b_factory , 45 , 57 , 3 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_track , 42 , 54 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_gun , 45 , 53 , 3 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_noncombat , 48 , 57 , 4 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_ext_radar , 49 , 61 , 5 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_oil_power , 39 , 50 , 2 , [ ] , 1 , 1 , 1 , 0 , 0 ] , [ b_barracks , 53 , 67 , 5 , [ ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 57 , 65 , 5 , [ us_radar ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 57 , 68 , 5 , [ us_double_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 52 , 47 , 3 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] , [ b_bunker , 60 , 59 , 4 , [ us_gatling_gun ] , 1 , 1 , 1 , 1 , 0 ] ] ;
23080: LD_ADDR_EXP 107
23084: PUSH
23085: LD_INT 3
23087: PUSH
23088: LD_INT 45
23090: PUSH
23091: LD_INT 57
23093: PUSH
23094: LD_INT 3
23096: PUSH
23097: EMPTY
23098: PUSH
23099: LD_INT 1
23101: PUSH
23102: LD_INT 1
23104: PUSH
23105: LD_INT 1
23107: PUSH
23108: LD_INT 0
23110: PUSH
23111: LD_INT 0
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 16
23128: PUSH
23129: LD_INT 42
23131: PUSH
23132: LD_INT 54
23134: PUSH
23135: LD_INT 2
23137: PUSH
23138: EMPTY
23139: PUSH
23140: LD_INT 1
23142: PUSH
23143: LD_INT 1
23145: PUSH
23146: LD_INT 1
23148: PUSH
23149: LD_INT 0
23151: PUSH
23152: LD_INT 0
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 17
23169: PUSH
23170: LD_INT 45
23172: PUSH
23173: LD_INT 53
23175: PUSH
23176: LD_INT 3
23178: PUSH
23179: EMPTY
23180: PUSH
23181: LD_INT 1
23183: PUSH
23184: LD_INT 1
23186: PUSH
23187: LD_INT 1
23189: PUSH
23190: LD_INT 0
23192: PUSH
23193: LD_INT 0
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 19
23210: PUSH
23211: LD_INT 48
23213: PUSH
23214: LD_INT 57
23216: PUSH
23217: LD_INT 4
23219: PUSH
23220: EMPTY
23221: PUSH
23222: LD_INT 1
23224: PUSH
23225: LD_INT 1
23227: PUSH
23228: LD_INT 1
23230: PUSH
23231: LD_INT 0
23233: PUSH
23234: LD_INT 0
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 20
23251: PUSH
23252: LD_INT 49
23254: PUSH
23255: LD_INT 61
23257: PUSH
23258: LD_INT 5
23260: PUSH
23261: EMPTY
23262: PUSH
23263: LD_INT 1
23265: PUSH
23266: LD_INT 1
23268: PUSH
23269: LD_INT 1
23271: PUSH
23272: LD_INT 0
23274: PUSH
23275: LD_INT 0
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 26
23292: PUSH
23293: LD_INT 39
23295: PUSH
23296: LD_INT 50
23298: PUSH
23299: LD_INT 2
23301: PUSH
23302: EMPTY
23303: PUSH
23304: LD_INT 1
23306: PUSH
23307: LD_INT 1
23309: PUSH
23310: LD_INT 1
23312: PUSH
23313: LD_INT 0
23315: PUSH
23316: LD_INT 0
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 5
23333: PUSH
23334: LD_INT 53
23336: PUSH
23337: LD_INT 67
23339: PUSH
23340: LD_INT 5
23342: PUSH
23343: EMPTY
23344: PUSH
23345: LD_INT 1
23347: PUSH
23348: LD_INT 1
23350: PUSH
23351: LD_INT 1
23353: PUSH
23354: LD_INT 1
23356: PUSH
23357: LD_INT 0
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: PUSH
23372: LD_INT 32
23374: PUSH
23375: LD_INT 57
23377: PUSH
23378: LD_INT 65
23380: PUSH
23381: LD_INT 5
23383: PUSH
23384: LD_INT 11
23386: PUSH
23387: EMPTY
23388: LIST
23389: PUSH
23390: LD_INT 1
23392: PUSH
23393: LD_INT 1
23395: PUSH
23396: LD_INT 1
23398: PUSH
23399: LD_INT 1
23401: PUSH
23402: LD_INT 0
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: PUSH
23417: LD_INT 32
23419: PUSH
23420: LD_INT 57
23422: PUSH
23423: LD_INT 68
23425: PUSH
23426: LD_INT 5
23428: PUSH
23429: LD_INT 5
23431: PUSH
23432: EMPTY
23433: LIST
23434: PUSH
23435: LD_INT 1
23437: PUSH
23438: LD_INT 1
23440: PUSH
23441: LD_INT 1
23443: PUSH
23444: LD_INT 1
23446: PUSH
23447: LD_INT 0
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 32
23464: PUSH
23465: LD_INT 52
23467: PUSH
23468: LD_INT 47
23470: PUSH
23471: LD_INT 3
23473: PUSH
23474: LD_INT 4
23476: PUSH
23477: EMPTY
23478: LIST
23479: PUSH
23480: LD_INT 1
23482: PUSH
23483: LD_INT 1
23485: PUSH
23486: LD_INT 1
23488: PUSH
23489: LD_INT 1
23491: PUSH
23492: LD_INT 0
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 32
23509: PUSH
23510: LD_INT 60
23512: PUSH
23513: LD_INT 59
23515: PUSH
23516: LD_INT 4
23518: PUSH
23519: LD_INT 4
23521: PUSH
23522: EMPTY
23523: LIST
23524: PUSH
23525: LD_INT 1
23527: PUSH
23528: LD_INT 1
23530: PUSH
23531: LD_INT 1
23533: PUSH
23534: LD_INT 1
23536: PUSH
23537: LD_INT 0
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: ST_TO_ADDR
// builds5 := [ [ b_breastwork , 67 , 34 , 5 , [ ] , 1 , 0 , 0 , 1 , 1 ] , [ b_breastwork , 83 , 38 , 1 , [ ] , 1 , 0 , 0 , 1 , 0 ] ] ;
23565: LD_ADDR_EXP 108
23569: PUSH
23570: LD_INT 31
23572: PUSH
23573: LD_INT 67
23575: PUSH
23576: LD_INT 34
23578: PUSH
23579: LD_INT 5
23581: PUSH
23582: EMPTY
23583: PUSH
23584: LD_INT 1
23586: PUSH
23587: LD_INT 0
23589: PUSH
23590: LD_INT 0
23592: PUSH
23593: LD_INT 1
23595: PUSH
23596: LD_INT 1
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: PUSH
23611: LD_INT 31
23613: PUSH
23614: LD_INT 83
23616: PUSH
23617: LD_INT 38
23619: PUSH
23620: LD_INT 1
23622: PUSH
23623: EMPTY
23624: PUSH
23625: LD_INT 1
23627: PUSH
23628: LD_INT 0
23630: PUSH
23631: LD_INT 0
23633: PUSH
23634: LD_INT 1
23636: PUSH
23637: LD_INT 0
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: ST_TO_ADDR
// can_repair := [ ] ;
23656: LD_ADDR_EXP 116
23660: PUSH
23661: EMPTY
23662: ST_TO_ADDR
// can_rebuild := [ ] ;
23663: LD_ADDR_EXP 115
23667: PUSH
23668: EMPTY
23669: ST_TO_ADDR
// fort := [ ] ;
23670: LD_ADDR_EXP 119
23674: PUSH
23675: EMPTY
23676: ST_TO_ADDR
// SetResourceVisibility ( 101 , 93 , ai ) ;
23677: LD_INT 101
23679: PPUSH
23680: LD_INT 93
23682: PPUSH
23683: LD_EXP 6
23687: PPUSH
23688: CALL_OW 441
// b1 := place_base ( builds1 , kolik_je_v_depotu , 11 , 0 , b1_levels ) ;
23692: LD_ADDR_EXP 128
23696: PUSH
23697: LD_EXP 104
23701: PPUSH
23702: LD_EXP 35
23706: PPUSH
23707: LD_INT 11
23709: PPUSH
23710: LD_INT 0
23712: PPUSH
23713: LD_EXP 19
23717: PPUSH
23718: CALL 24233 0 5
23722: ST_TO_ADDR
// b2 := place_base ( builds2 , 250 , 94 , kolik_je_sib_v_hornim , b2_levels ) ;
23723: LD_ADDR_EXP 129
23727: PUSH
23728: LD_EXP 105
23732: PPUSH
23733: LD_INT 250
23735: PPUSH
23736: LD_INT 94
23738: PPUSH
23739: LD_EXP 36
23743: PPUSH
23744: LD_EXP 20
23748: PPUSH
23749: CALL 24233 0 5
23753: ST_TO_ADDR
// b3 := place_base ( builds3 , 4180 , 6400 , 500 , b3_levels ) ;
23754: LD_ADDR_EXP 130
23758: PUSH
23759: LD_EXP 106
23763: PPUSH
23764: LD_INT 4180
23766: PPUSH
23767: LD_INT 6400
23769: PPUSH
23770: LD_INT 500
23772: PPUSH
23773: LD_EXP 21
23777: PPUSH
23778: CALL 24233 0 5
23782: ST_TO_ADDR
// b4 := place_base ( builds4 , 0 , 0 , 0 , b4_levels ) ;
23783: LD_ADDR_EXP 131
23787: PUSH
23788: LD_EXP 107
23792: PPUSH
23793: LD_INT 0
23795: PPUSH
23796: LD_INT 0
23798: PPUSH
23799: LD_INT 0
23801: PPUSH
23802: LD_EXP 22
23806: PPUSH
23807: CALL 24233 0 5
23811: ST_TO_ADDR
// b5 := place_base ( builds5 , 0 , 0 , 0 , b5_levels ) ;
23812: LD_ADDR_EXP 132
23816: PUSH
23817: LD_EXP 108
23821: PPUSH
23822: LD_INT 0
23824: PPUSH
23825: LD_INT 0
23827: PPUSH
23828: LD_INT 0
23830: PPUSH
23831: LD_EXP 23
23835: PPUSH
23836: CALL 24233 0 5
23840: ST_TO_ADDR
// if fast_braketrough then
23841: LD_EXP 78
23845: IFFALSE 23878
// SetLives ( UnitFilter ( b1 , [ f_btype , b_armoury ] ) , zivoty_armoury ) else
23847: LD_EXP 128
23851: PPUSH
23852: LD_INT 30
23854: PUSH
23855: LD_INT 4
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PPUSH
23862: CALL_OW 72
23866: PPUSH
23867: LD_EXP 37
23871: PPUSH
23872: CALL_OW 234
23876: GO 23907
// SetLives ( UnitFilter ( b1 , [ f_btype , b_armoury ] ) , zivoty_armoury2 ) ;
23878: LD_EXP 128
23882: PPUSH
23883: LD_INT 30
23885: PUSH
23886: LD_INT 4
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PPUSH
23893: CALL_OW 72
23897: PPUSH
23898: LD_EXP 38
23902: PPUSH
23903: CALL_OW 234
// a1 := place_amici ( aici1 , abase1 ) ;
23907: LD_ADDR_EXP 133
23911: PUSH
23912: LD_EXP 109
23916: PPUSH
23917: LD_INT 9
23919: PPUSH
23920: CALL 24822 0 2
23924: ST_TO_ADDR
// for i in a1 do
23925: LD_ADDR_VAR 0 2
23929: PUSH
23930: LD_EXP 133
23934: PUSH
23935: FOR_IN
23936: IFFALSE 23952
// SetTag ( i , 1 ) ;
23938: LD_VAR 0 2
23942: PPUSH
23943: LD_INT 1
23945: PPUSH
23946: CALL_OW 109
23950: GO 23935
23952: POP
23953: POP
// a2 := place_amici ( aici2 , abase2 ) ;
23954: LD_ADDR_EXP 134
23958: PUSH
23959: LD_EXP 110
23963: PPUSH
23964: LD_INT 8
23966: PPUSH
23967: CALL 24822 0 2
23971: ST_TO_ADDR
// for i in a2 do
23972: LD_ADDR_VAR 0 2
23976: PUSH
23977: LD_EXP 134
23981: PUSH
23982: FOR_IN
23983: IFFALSE 23999
// SetTag ( i , 2 ) ;
23985: LD_VAR 0 2
23989: PPUSH
23990: LD_INT 2
23992: PPUSH
23993: CALL_OW 109
23997: GO 23982
23999: POP
24000: POP
// a3 := place_amici ( aici3 , abase3 ) ;
24001: LD_ADDR_EXP 135
24005: PUSH
24006: LD_EXP 111
24010: PPUSH
24011: LD_INT 6
24013: PPUSH
24014: CALL 24822 0 2
24018: ST_TO_ADDR
// for i in a3 do
24019: LD_ADDR_VAR 0 2
24023: PUSH
24024: LD_EXP 135
24028: PUSH
24029: FOR_IN
24030: IFFALSE 24046
// SetTag ( i , 3 ) ;
24032: LD_VAR 0 2
24036: PPUSH
24037: LD_INT 3
24039: PPUSH
24040: CALL_OW 109
24044: GO 24029
24046: POP
24047: POP
// a4 := place_amici ( aici4 , abase4 ) ;
24048: LD_ADDR_EXP 136
24052: PUSH
24053: LD_EXP 112
24057: PPUSH
24058: LD_INT 7
24060: PPUSH
24061: CALL 24822 0 2
24065: ST_TO_ADDR
// for i in a4 do
24066: LD_ADDR_VAR 0 2
24070: PUSH
24071: LD_EXP 136
24075: PUSH
24076: FOR_IN
24077: IFFALSE 24093
// SetTag ( i , 4 ) ;
24079: LD_VAR 0 2
24083: PPUSH
24084: LD_INT 4
24086: PPUSH
24087: CALL_OW 109
24091: GO 24076
24093: POP
24094: POP
// a5 := place_amici ( aici5 , abase5 ) ;
24095: LD_ADDR_EXP 137
24099: PUSH
24100: LD_EXP 113
24104: PPUSH
24105: LD_INT 10
24107: PPUSH
24108: CALL 24822 0 2
24112: ST_TO_ADDR
// for i in a5 do
24113: LD_ADDR_VAR 0 2
24117: PUSH
24118: LD_EXP 137
24122: PUSH
24123: FOR_IN
24124: IFFALSE 24140
// SetTag ( i , 5 ) ;
24126: LD_VAR 0 2
24130: PPUSH
24131: LD_INT 5
24133: PPUSH
24134: CALL_OW 109
24138: GO 24123
24140: POP
24141: POP
// a1eng := UnitFilter ( a1 , [ [ f_class , class_engineer ] ] ) ;
24142: LD_ADDR_EXP 114
24146: PUSH
24147: LD_EXP 133
24151: PPUSH
24152: LD_INT 25
24154: PUSH
24155: LD_INT 2
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: EMPTY
24163: LIST
24164: PPUSH
24165: CALL_OW 72
24169: ST_TO_ADDR
// if a1eng then
24170: LD_EXP 114
24174: IFFALSE 24190
// a1eng := a1eng [ 1 ] ;
24176: LD_ADDR_EXP 114
24180: PUSH
24181: LD_EXP 114
24185: PUSH
24186: LD_INT 1
24188: ARRAY
24189: ST_TO_ADDR
// InitUc ;
24190: CALL_OW 18
// InitHc ;
24194: CALL_OW 19
// uc_side := ai ;
24198: LD_ADDR_OWVAR 20
24202: PUSH
24203: LD_EXP 6
24207: ST_TO_ADDR
// uc_nation := americans ;
24208: LD_ADDR_OWVAR 21
24212: PUSH
24213: LD_EXP 3
24217: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
24218: LD_INT 1
24220: PPUSH
24221: LD_INT 10
24223: PPUSH
24224: CALL_OW 381
// end ;
24228: LD_VAR 0 1
24232: RET
// function place_base ( builds , cans , oil , sib , levels ) ; var i , base , b , tb , bb ; begin
24233: LD_INT 0
24235: PPUSH
24236: PPUSH
24237: PPUSH
24238: PPUSH
24239: PPUSH
24240: PPUSH
// InitUc ;
24241: CALL_OW 18
// InitBc ;
24245: CALL_OW 21
// uc_side := americans ;
24249: LD_ADDR_OWVAR 20
24253: PUSH
24254: LD_EXP 3
24258: ST_TO_ADDR
// uc_nation := nation_american ;
24259: LD_ADDR_OWVAR 21
24263: PUSH
24264: LD_INT 1
24266: ST_TO_ADDR
// b := [ ] ;
24267: LD_ADDR_VAR 0 9
24271: PUSH
24272: EMPTY
24273: ST_TO_ADDR
// for i in builds do
24274: LD_ADDR_VAR 0 7
24278: PUSH
24279: LD_VAR 0 1
24283: PUSH
24284: FOR_IN
24285: IFFALSE 24686
// begin tb := get_build ( i [ 2 ] , i [ 3 ] , 0 ) ;
24287: LD_ADDR_VAR 0 10
24291: PUSH
24292: LD_VAR 0 7
24296: PUSH
24297: LD_INT 2
24299: ARRAY
24300: PPUSH
24301: LD_VAR 0 7
24305: PUSH
24306: LD_INT 3
24308: ARRAY
24309: PPUSH
24310: LD_INT 0
24312: PPUSH
24313: CALL 26168 0 3
24317: ST_TO_ADDR
// if tb and not i [ 6 ] then
24318: LD_VAR 0 10
24322: PUSH
24323: LD_VAR 0 7
24327: PUSH
24328: LD_INT 6
24330: ARRAY
24331: NOT
24332: AND
24333: IFFALSE 24344
// RemoveUnit ( tb ) ;
24335: LD_VAR 0 10
24339: PPUSH
24340: CALL_OW 64
// if not tb and i [ 6 ] then
24344: LD_VAR 0 10
24348: NOT
24349: PUSH
24350: LD_VAR 0 7
24354: PUSH
24355: LD_INT 6
24357: ARRAY
24358: AND
24359: IFFALSE 24520
// begin bc_type := i [ 1 ] ;
24361: LD_ADDR_OWVAR 42
24365: PUSH
24366: LD_VAR 0 7
24370: PUSH
24371: LD_INT 1
24373: ARRAY
24374: ST_TO_ADDR
// if bc_type = b_lab or bc_type = b_lab_half or bc_type = b_lab_full then
24375: LD_OWVAR 42
24379: PUSH
24380: LD_INT 6
24382: EQUAL
24383: PUSH
24384: LD_OWVAR 42
24388: PUSH
24389: LD_INT 7
24391: EQUAL
24392: OR
24393: PUSH
24394: LD_OWVAR 42
24398: PUSH
24399: LD_INT 8
24401: EQUAL
24402: OR
24403: IFFALSE 24441
// begin bc_kind1 := i [ 5 ] [ 1 ] ;
24405: LD_ADDR_OWVAR 44
24409: PUSH
24410: LD_VAR 0 7
24414: PUSH
24415: LD_INT 5
24417: ARRAY
24418: PUSH
24419: LD_INT 1
24421: ARRAY
24422: ST_TO_ADDR
// bc_kind2 := i [ 5 ] [ 2 ] ;
24423: LD_ADDR_OWVAR 45
24427: PUSH
24428: LD_VAR 0 7
24432: PUSH
24433: LD_INT 5
24435: ARRAY
24436: PUSH
24437: LD_INT 2
24439: ARRAY
24440: ST_TO_ADDR
// end ; tb := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
24441: LD_ADDR_VAR 0 10
24445: PUSH
24446: LD_VAR 0 7
24450: PUSH
24451: LD_INT 2
24453: ARRAY
24454: PPUSH
24455: LD_VAR 0 7
24459: PUSH
24460: LD_INT 3
24462: ARRAY
24463: PPUSH
24464: LD_VAR 0 7
24468: PUSH
24469: LD_INT 4
24471: ARRAY
24472: PPUSH
24473: CALL_OW 47
24477: ST_TO_ADDR
// if bc_type = b_bunker or bc_type = b_turret then
24478: LD_OWVAR 42
24482: PUSH
24483: LD_INT 32
24485: EQUAL
24486: PUSH
24487: LD_OWVAR 42
24491: PUSH
24492: LD_INT 33
24494: EQUAL
24495: OR
24496: IFFALSE 24520
// PlaceWeaponTurret ( tb , i [ 5 ] [ 1 ] ) ;
24498: LD_VAR 0 10
24502: PPUSH
24503: LD_VAR 0 7
24507: PUSH
24508: LD_INT 5
24510: ARRAY
24511: PUSH
24512: LD_INT 1
24514: ARRAY
24515: PPUSH
24516: CALL_OW 431
// end ; if i [ 6 ] then
24520: LD_VAR 0 7
24524: PUSH
24525: LD_INT 6
24527: ARRAY
24528: IFFALSE 24549
// b := b ^ [ tb ] ;
24530: LD_ADDR_VAR 0 9
24534: PUSH
24535: LD_VAR 0 9
24539: PUSH
24540: LD_VAR 0 10
24544: PUSH
24545: EMPTY
24546: LIST
24547: ADD
24548: ST_TO_ADDR
// if i [ 7 ] then
24549: LD_VAR 0 7
24553: PUSH
24554: LD_INT 7
24556: ARRAY
24557: IFFALSE 24578
// can_rebuild := can_rebuild ^ [ tb ] ;
24559: LD_ADDR_EXP 115
24563: PUSH
24564: LD_EXP 115
24568: PUSH
24569: LD_VAR 0 10
24573: PUSH
24574: EMPTY
24575: LIST
24576: ADD
24577: ST_TO_ADDR
// if i [ 8 ] then
24578: LD_VAR 0 7
24582: PUSH
24583: LD_INT 8
24585: ARRAY
24586: IFFALSE 24607
// can_repair := can_rebuild ^ [ tb ] ;
24588: LD_ADDR_EXP 116
24592: PUSH
24593: LD_EXP 115
24597: PUSH
24598: LD_VAR 0 10
24602: PUSH
24603: EMPTY
24604: LIST
24605: ADD
24606: ST_TO_ADDR
// if i [ 9 ] then
24607: LD_VAR 0 7
24611: PUSH
24612: LD_INT 9
24614: ARRAY
24615: IFFALSE 24636
// fort := fort ^ [ tb ] ;
24617: LD_ADDR_EXP 119
24621: PUSH
24622: LD_EXP 119
24626: PUSH
24627: LD_VAR 0 10
24631: PUSH
24632: EMPTY
24633: LIST
24634: ADD
24635: ST_TO_ADDR
// if i [ 10 ] then
24636: LD_VAR 0 7
24640: PUSH
24641: LD_INT 10
24643: ARRAY
24644: IFFALSE 24666
// SetBLevel ( tb , levels [ 1 ] ) else
24646: LD_VAR 0 10
24650: PPUSH
24651: LD_VAR 0 5
24655: PUSH
24656: LD_INT 1
24658: ARRAY
24659: PPUSH
24660: CALL_OW 241
24664: GO 24684
// SetBLevel ( tb , levels [ 2 ] ) ;
24666: LD_VAR 0 10
24670: PPUSH
24671: LD_VAR 0 5
24675: PUSH
24676: LD_INT 2
24678: ARRAY
24679: PPUSH
24680: CALL_OW 241
// end ;
24684: GO 24284
24686: POP
24687: POP
// bb := UnitFilter ( b , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
24688: LD_ADDR_VAR 0 11
24692: PUSH
24693: LD_VAR 0 9
24697: PPUSH
24698: LD_INT 2
24700: PUSH
24701: LD_INT 30
24703: PUSH
24704: LD_INT 0
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 30
24713: PUSH
24714: LD_INT 1
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: LIST
24725: PPUSH
24726: CALL_OW 72
24730: ST_TO_ADDR
// if bb then
24731: LD_VAR 0 11
24735: IFFALSE 24807
// begin base := GetBase ( bb [ 1 ] ) ;
24737: LD_ADDR_VAR 0 8
24741: PUSH
24742: LD_VAR 0 11
24746: PUSH
24747: LD_INT 1
24749: ARRAY
24750: PPUSH
24751: CALL_OW 274
24755: ST_TO_ADDR
// SetResourceType ( base , mat_cans , cans ) ;
24756: LD_VAR 0 8
24760: PPUSH
24761: LD_INT 1
24763: PPUSH
24764: LD_VAR 0 2
24768: PPUSH
24769: CALL_OW 277
// SetResourceType ( base , mat_oil , oil ) ;
24773: LD_VAR 0 8
24777: PPUSH
24778: LD_INT 2
24780: PPUSH
24781: LD_VAR 0 3
24785: PPUSH
24786: CALL_OW 277
// SetResourceType ( base , mat_siberit , sib ) ;
24790: LD_VAR 0 8
24794: PPUSH
24795: LD_INT 3
24797: PPUSH
24798: LD_VAR 0 4
24802: PPUSH
24803: CALL_OW 277
// end ; result := b ;
24807: LD_ADDR_VAR 0 6
24811: PUSH
24812: LD_VAR 0 9
24816: ST_TO_ADDR
// end ;
24817: LD_VAR 0 6
24821: RET
// function place_amici ( amici , area ) ; var i , j , a ; begin
24822: LD_INT 0
24824: PPUSH
24825: PPUSH
24826: PPUSH
24827: PPUSH
// InitUc ;
24828: CALL_OW 18
// InitHc ;
24832: CALL_OW 19
// uc_side := americans ;
24836: LD_ADDR_OWVAR 20
24840: PUSH
24841: LD_EXP 3
24845: ST_TO_ADDR
// uc_nation := nation_american ;
24846: LD_ADDR_OWVAR 21
24850: PUSH
24851: LD_INT 1
24853: ST_TO_ADDR
// a := [ ] ;
24854: LD_ADDR_VAR 0 6
24858: PUSH
24859: EMPTY
24860: ST_TO_ADDR
// for i in amici do
24861: LD_ADDR_VAR 0 4
24865: PUSH
24866: LD_VAR 0 1
24870: PUSH
24871: FOR_IN
24872: IFFALSE 24946
// begin PrepareHuman ( 0 , i [ 2 ] , i [ 3 ] ) ;
24874: LD_INT 0
24876: PPUSH
24877: LD_VAR 0 4
24881: PUSH
24882: LD_INT 2
24884: ARRAY
24885: PPUSH
24886: LD_VAR 0 4
24890: PUSH
24891: LD_INT 3
24893: ARRAY
24894: PPUSH
24895: CALL_OW 380
// for j := 1 to i [ 1 ] do
24899: LD_ADDR_VAR 0 5
24903: PUSH
24904: DOUBLE
24905: LD_INT 1
24907: DEC
24908: ST_TO_ADDR
24909: LD_VAR 0 4
24913: PUSH
24914: LD_INT 1
24916: ARRAY
24917: PUSH
24918: FOR_TO
24919: IFFALSE 24942
// begin a := a ^ [ CreateHuman ] ;
24921: LD_ADDR_VAR 0 6
24925: PUSH
24926: LD_VAR 0 6
24930: PUSH
24931: CALL_OW 44
24935: PUSH
24936: EMPTY
24937: LIST
24938: ADD
24939: ST_TO_ADDR
// end ;
24940: GO 24918
24942: POP
24943: POP
// end ;
24944: GO 24871
24946: POP
24947: POP
// for i in a do
24948: LD_ADDR_VAR 0 4
24952: PUSH
24953: LD_VAR 0 6
24957: PUSH
24958: FOR_IN
24959: IFFALSE 24980
// PlaceUnitArea ( i , area , false ) ;
24961: LD_VAR 0 4
24965: PPUSH
24966: LD_VAR 0 2
24970: PPUSH
24971: LD_INT 0
24973: PPUSH
24974: CALL_OW 49
24978: GO 24958
24980: POP
24981: POP
// result := a ;
24982: LD_ADDR_VAR 0 3
24986: PUSH
24987: LD_VAR 0 6
24991: ST_TO_ADDR
// end ;
24992: LD_VAR 0 3
24996: RET
// every 0 0$4 + 0 0$3.5 do var i , j , weap , builds ;
24997: GO 24999
24999: DISABLE
25000: LD_INT 0
25002: PPUSH
25003: PPUSH
25004: PPUSH
25005: PPUSH
// begin for i in UnitFilter ( can_rebuild , [ [ f_side , ai ] , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ] ) do
25006: LD_ADDR_VAR 0 1
25010: PUSH
25011: LD_EXP 115
25015: PPUSH
25016: LD_INT 22
25018: PUSH
25019: LD_EXP 6
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 2
25030: PUSH
25031: LD_INT 30
25033: PUSH
25034: LD_INT 33
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 30
25043: PUSH
25044: LD_INT 32
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: LIST
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PPUSH
25060: CALL_OW 72
25064: PUSH
25065: FOR_IN
25066: IFFALSE 25210
// if not GetBWeapon ( i ) then
25068: LD_VAR 0 1
25072: PPUSH
25073: CALL_OW 269
25077: NOT
25078: IFFALSE 25208
// begin weap := 0 ;
25080: LD_ADDR_VAR 0 3
25084: PUSH
25085: LD_INT 0
25087: ST_TO_ADDR
// for j in builds do
25088: LD_ADDR_VAR 0 2
25092: PUSH
25093: LD_VAR 0 4
25097: PUSH
25098: FOR_IN
25099: IFFALSE 25186
// if GetX ( i ) = j [ 2 ] and GetY ( i ) = j [ 3 ] and GetBType ( i ) = j [ 1 ] then
25101: LD_VAR 0 1
25105: PPUSH
25106: CALL_OW 250
25110: PUSH
25111: LD_VAR 0 2
25115: PUSH
25116: LD_INT 2
25118: ARRAY
25119: EQUAL
25120: PUSH
25121: LD_VAR 0 1
25125: PPUSH
25126: CALL_OW 251
25130: PUSH
25131: LD_VAR 0 2
25135: PUSH
25136: LD_INT 3
25138: ARRAY
25139: EQUAL
25140: AND
25141: PUSH
25142: LD_VAR 0 1
25146: PPUSH
25147: CALL_OW 266
25151: PUSH
25152: LD_VAR 0 2
25156: PUSH
25157: LD_INT 1
25159: ARRAY
25160: EQUAL
25161: AND
25162: IFFALSE 25184
// begin weap := j [ 5 ] [ 1 ] ;
25164: LD_ADDR_VAR 0 3
25168: PUSH
25169: LD_VAR 0 2
25173: PUSH
25174: LD_INT 5
25176: ARRAY
25177: PUSH
25178: LD_INT 1
25180: ARRAY
25181: ST_TO_ADDR
// break ;
25182: GO 25186
// end ;
25184: GO 25098
25186: POP
25187: POP
// if weap then
25188: LD_VAR 0 3
25192: IFFALSE 25208
// ComPlaceWeapon ( j , weap ) ;
25194: LD_VAR 0 2
25198: PPUSH
25199: LD_VAR 0 3
25203: PPUSH
25204: CALL_OW 148
// end ;
25208: GO 25065
25210: POP
25211: POP
// enable ;
25212: ENABLE
// end ;
25213: PPOPN 4
25215: END
// every 0 0$4 + 0 0$0.5 do var i , j , to_up , to_b , builds , weap , co_tam_stoji ;
25216: GO 25218
25218: DISABLE
25219: LD_INT 0
25221: PPUSH
25222: PPUSH
25223: PPUSH
25224: PPUSH
25225: PPUSH
25226: PPUSH
25227: PPUSH
// begin for i in builds3 do
25228: LD_ADDR_VAR 0 1
25232: PUSH
25233: LD_EXP 106
25237: PUSH
25238: FOR_IN
25239: IFFALSE 25411
// begin if i [ 7 ] then
25241: LD_VAR 0 1
25245: PUSH
25246: LD_INT 7
25248: ARRAY
25249: IFFALSE 25409
// begin co_tam_stoji := GetBType ( get_build ( i [ 2 ] , i [ 3 ] , 0 ) ) ;
25251: LD_ADDR_VAR 0 7
25255: PUSH
25256: LD_VAR 0 1
25260: PUSH
25261: LD_INT 2
25263: ARRAY
25264: PPUSH
25265: LD_VAR 0 1
25269: PUSH
25270: LD_INT 3
25272: ARRAY
25273: PPUSH
25274: LD_INT 0
25276: PPUSH
25277: CALL 26168 0 3
25281: PPUSH
25282: CALL_OW 266
25286: ST_TO_ADDR
// if GetSide ( co_tam_stoji ) = ai then
25287: LD_VAR 0 7
25291: PPUSH
25292: CALL_OW 255
25296: PUSH
25297: LD_EXP 6
25301: EQUAL
25302: IFFALSE 25409
// if co_tam_stoji = - 1 then
25304: LD_VAR 0 7
25308: PUSH
25309: LD_INT 1
25311: NEG
25312: EQUAL
25313: IFFALSE 25379
// begin to_b := [ BasicFrom ( i [ 1 ] ) , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 5 ] ] ;
25315: LD_ADDR_VAR 0 4
25319: PUSH
25320: LD_VAR 0 1
25324: PUSH
25325: LD_INT 1
25327: ARRAY
25328: PPUSH
25329: CALL 19057 0 1
25333: PUSH
25334: LD_VAR 0 1
25338: PUSH
25339: LD_INT 2
25341: ARRAY
25342: PUSH
25343: LD_VAR 0 1
25347: PUSH
25348: LD_INT 3
25350: ARRAY
25351: PUSH
25352: LD_VAR 0 1
25356: PUSH
25357: LD_INT 4
25359: ARRAY
25360: PUSH
25361: LD_VAR 0 1
25365: PUSH
25366: LD_INT 5
25368: ARRAY
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: ST_TO_ADDR
// end else
25377: GO 25409
// if UpgradeableTo ( co_tam_stoji , i [ 1 ] ) then
25379: LD_VAR 0 7
25383: PPUSH
25384: LD_VAR 0 1
25388: PUSH
25389: LD_INT 1
25391: ARRAY
25392: PPUSH
25393: CALL 18793 0 2
25397: IFFALSE 25409
// begin to_up := i ;
25399: LD_ADDR_VAR 0 3
25403: PUSH
25404: LD_VAR 0 1
25408: ST_TO_ADDR
// end ; end ; end ;
25409: GO 25238
25411: POP
25412: POP
// if to_b then
25413: LD_VAR 0 4
25417: IFFALSE 25489
// ComBuild ( NearestUnitToXY ( eng , to_b [ 2 ] , to_b [ 3 ] ) , to_b [ 1 ] , to_b [ 2 ] , to_b [ 3 ] , to_b [ 4 ] ) else
25419: LD_EXP 123
25423: PPUSH
25424: LD_VAR 0 4
25428: PUSH
25429: LD_INT 2
25431: ARRAY
25432: PPUSH
25433: LD_VAR 0 4
25437: PUSH
25438: LD_INT 3
25440: ARRAY
25441: PPUSH
25442: CALL_OW 73
25446: PPUSH
25447: LD_VAR 0 4
25451: PUSH
25452: LD_INT 1
25454: ARRAY
25455: PPUSH
25456: LD_VAR 0 4
25460: PUSH
25461: LD_INT 2
25463: ARRAY
25464: PPUSH
25465: LD_VAR 0 4
25469: PUSH
25470: LD_INT 3
25472: ARRAY
25473: PPUSH
25474: LD_VAR 0 4
25478: PUSH
25479: LD_INT 4
25481: ARRAY
25482: PPUSH
25483: CALL_OW 145
25487: GO 25525
// if to_up then
25489: LD_VAR 0 3
25493: IFFALSE 25525
// ComUpgrade ( get_build ( i [ 2 ] , i [ 3 ] , 0 ) ) ;
25495: LD_VAR 0 1
25499: PUSH
25500: LD_INT 2
25502: ARRAY
25503: PPUSH
25504: LD_VAR 0 1
25508: PUSH
25509: LD_INT 3
25511: ARRAY
25512: PPUSH
25513: LD_INT 0
25515: PPUSH
25516: CALL 26168 0 3
25520: PPUSH
25521: CALL_OW 146
// enable ;
25525: ENABLE
// end ;
25526: PPOPN 7
25528: END
// every 0 0$4 + 0 0$1.5 do var i , j , to_up , to_b , builds , weap , co_tam_stoji ;
25529: GO 25531
25531: DISABLE
25532: LD_INT 0
25534: PPUSH
25535: PPUSH
25536: PPUSH
25537: PPUSH
25538: PPUSH
25539: PPUSH
25540: PPUSH
// begin for i in builds4 do
25541: LD_ADDR_VAR 0 1
25545: PUSH
25546: LD_EXP 107
25550: PUSH
25551: FOR_IN
25552: IFFALSE 25724
// begin if i [ 7 ] then
25554: LD_VAR 0 1
25558: PUSH
25559: LD_INT 7
25561: ARRAY
25562: IFFALSE 25722
// begin co_tam_stoji := GetBType ( get_build ( i [ 2 ] , i [ 3 ] , 0 ) ) ;
25564: LD_ADDR_VAR 0 7
25568: PUSH
25569: LD_VAR 0 1
25573: PUSH
25574: LD_INT 2
25576: ARRAY
25577: PPUSH
25578: LD_VAR 0 1
25582: PUSH
25583: LD_INT 3
25585: ARRAY
25586: PPUSH
25587: LD_INT 0
25589: PPUSH
25590: CALL 26168 0 3
25594: PPUSH
25595: CALL_OW 266
25599: ST_TO_ADDR
// if GetSide ( co_tam_stoji ) = ai then
25600: LD_VAR 0 7
25604: PPUSH
25605: CALL_OW 255
25609: PUSH
25610: LD_EXP 6
25614: EQUAL
25615: IFFALSE 25722
// if co_tam_stoji = - 1 then
25617: LD_VAR 0 7
25621: PUSH
25622: LD_INT 1
25624: NEG
25625: EQUAL
25626: IFFALSE 25692
// begin to_b := [ BasicFrom ( i [ 1 ] ) , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 5 ] ] ;
25628: LD_ADDR_VAR 0 4
25632: PUSH
25633: LD_VAR 0 1
25637: PUSH
25638: LD_INT 1
25640: ARRAY
25641: PPUSH
25642: CALL 19057 0 1
25646: PUSH
25647: LD_VAR 0 1
25651: PUSH
25652: LD_INT 2
25654: ARRAY
25655: PUSH
25656: LD_VAR 0 1
25660: PUSH
25661: LD_INT 3
25663: ARRAY
25664: PUSH
25665: LD_VAR 0 1
25669: PUSH
25670: LD_INT 4
25672: ARRAY
25673: PUSH
25674: LD_VAR 0 1
25678: PUSH
25679: LD_INT 5
25681: ARRAY
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: ST_TO_ADDR
// end else
25690: GO 25722
// if UpgradeableTo ( co_tam_stoji , i [ 1 ] ) then
25692: LD_VAR 0 7
25696: PPUSH
25697: LD_VAR 0 1
25701: PUSH
25702: LD_INT 1
25704: ARRAY
25705: PPUSH
25706: CALL 18793 0 2
25710: IFFALSE 25722
// begin to_up := i ;
25712: LD_ADDR_VAR 0 3
25716: PUSH
25717: LD_VAR 0 1
25721: ST_TO_ADDR
// end ; end ; end ;
25722: GO 25551
25724: POP
25725: POP
// if to_b then
25726: LD_VAR 0 4
25730: IFFALSE 25802
// ComBuild ( NearestUnitToXY ( eng , to_b [ 2 ] , to_b [ 3 ] ) , to_b [ 1 ] , to_b [ 2 ] , to_b [ 3 ] , to_b [ 4 ] ) else
25732: LD_EXP 123
25736: PPUSH
25737: LD_VAR 0 4
25741: PUSH
25742: LD_INT 2
25744: ARRAY
25745: PPUSH
25746: LD_VAR 0 4
25750: PUSH
25751: LD_INT 3
25753: ARRAY
25754: PPUSH
25755: CALL_OW 73
25759: PPUSH
25760: LD_VAR 0 4
25764: PUSH
25765: LD_INT 1
25767: ARRAY
25768: PPUSH
25769: LD_VAR 0 4
25773: PUSH
25774: LD_INT 2
25776: ARRAY
25777: PPUSH
25778: LD_VAR 0 4
25782: PUSH
25783: LD_INT 3
25785: ARRAY
25786: PPUSH
25787: LD_VAR 0 4
25791: PUSH
25792: LD_INT 4
25794: ARRAY
25795: PPUSH
25796: CALL_OW 145
25800: GO 25838
// if to_up then
25802: LD_VAR 0 3
25806: IFFALSE 25838
// ComUpgrade ( get_build ( i [ 2 ] , i [ 3 ] , 0 ) ) ;
25808: LD_VAR 0 1
25812: PUSH
25813: LD_INT 2
25815: ARRAY
25816: PPUSH
25817: LD_VAR 0 1
25821: PUSH
25822: LD_INT 3
25824: ARRAY
25825: PPUSH
25826: LD_INT 0
25828: PPUSH
25829: CALL 26168 0 3
25833: PPUSH
25834: CALL_OW 146
// enable ;
25838: ENABLE
// end ;
25839: PPOPN 7
25841: END
// every 0 0$4 + 0 0$2.5 trigger ( not OvsyenkoTaken ) or ( OvsyenkoCaptured ) do var i , j , to_up , to_b , builds , weap , co_tam_stoji ;
25842: LD_EXP 14
25846: NOT
25847: PUSH
25848: LD_EXP 15
25852: OR
25853: IFFALSE 26165
25855: GO 25857
25857: DISABLE
25858: LD_INT 0
25860: PPUSH
25861: PPUSH
25862: PPUSH
25863: PPUSH
25864: PPUSH
25865: PPUSH
25866: PPUSH
// begin for i in builds1 do
25867: LD_ADDR_VAR 0 1
25871: PUSH
25872: LD_EXP 104
25876: PUSH
25877: FOR_IN
25878: IFFALSE 26050
// begin if i [ 7 ] then
25880: LD_VAR 0 1
25884: PUSH
25885: LD_INT 7
25887: ARRAY
25888: IFFALSE 26048
// begin co_tam_stoji := GetBType ( get_build ( i [ 2 ] , i [ 3 ] , 0 ) ) ;
25890: LD_ADDR_VAR 0 7
25894: PUSH
25895: LD_VAR 0 1
25899: PUSH
25900: LD_INT 2
25902: ARRAY
25903: PPUSH
25904: LD_VAR 0 1
25908: PUSH
25909: LD_INT 3
25911: ARRAY
25912: PPUSH
25913: LD_INT 0
25915: PPUSH
25916: CALL 26168 0 3
25920: PPUSH
25921: CALL_OW 266
25925: ST_TO_ADDR
// if GetSide ( co_tam_stoji ) = ai then
25926: LD_VAR 0 7
25930: PPUSH
25931: CALL_OW 255
25935: PUSH
25936: LD_EXP 6
25940: EQUAL
25941: IFFALSE 26048
// if co_tam_stoji = - 1 then
25943: LD_VAR 0 7
25947: PUSH
25948: LD_INT 1
25950: NEG
25951: EQUAL
25952: IFFALSE 26018
// begin to_b := [ BasicFrom ( i [ 1 ] ) , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 5 ] ] ;
25954: LD_ADDR_VAR 0 4
25958: PUSH
25959: LD_VAR 0 1
25963: PUSH
25964: LD_INT 1
25966: ARRAY
25967: PPUSH
25968: CALL 19057 0 1
25972: PUSH
25973: LD_VAR 0 1
25977: PUSH
25978: LD_INT 2
25980: ARRAY
25981: PUSH
25982: LD_VAR 0 1
25986: PUSH
25987: LD_INT 3
25989: ARRAY
25990: PUSH
25991: LD_VAR 0 1
25995: PUSH
25996: LD_INT 4
25998: ARRAY
25999: PUSH
26000: LD_VAR 0 1
26004: PUSH
26005: LD_INT 5
26007: ARRAY
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: ST_TO_ADDR
// end else
26016: GO 26048
// if UpgradeableTo ( co_tam_stoji , i [ 1 ] ) then
26018: LD_VAR 0 7
26022: PPUSH
26023: LD_VAR 0 1
26027: PUSH
26028: LD_INT 1
26030: ARRAY
26031: PPUSH
26032: CALL 18793 0 2
26036: IFFALSE 26048
// begin to_up := i ;
26038: LD_ADDR_VAR 0 3
26042: PUSH
26043: LD_VAR 0 1
26047: ST_TO_ADDR
// end ; end ; end ;
26048: GO 25877
26050: POP
26051: POP
// if to_b then
26052: LD_VAR 0 4
26056: IFFALSE 26128
// ComBuild ( NearestUnitToXY ( eng , to_b [ 2 ] , to_b [ 3 ] ) , to_b [ 1 ] , to_b [ 2 ] , to_b [ 3 ] , to_b [ 4 ] ) else
26058: LD_EXP 123
26062: PPUSH
26063: LD_VAR 0 4
26067: PUSH
26068: LD_INT 2
26070: ARRAY
26071: PPUSH
26072: LD_VAR 0 4
26076: PUSH
26077: LD_INT 3
26079: ARRAY
26080: PPUSH
26081: CALL_OW 73
26085: PPUSH
26086: LD_VAR 0 4
26090: PUSH
26091: LD_INT 1
26093: ARRAY
26094: PPUSH
26095: LD_VAR 0 4
26099: PUSH
26100: LD_INT 2
26102: ARRAY
26103: PPUSH
26104: LD_VAR 0 4
26108: PUSH
26109: LD_INT 3
26111: ARRAY
26112: PPUSH
26113: LD_VAR 0 4
26117: PUSH
26118: LD_INT 4
26120: ARRAY
26121: PPUSH
26122: CALL_OW 145
26126: GO 26164
// if to_up then
26128: LD_VAR 0 3
26132: IFFALSE 26164
// ComUpgrade ( get_build ( i [ 2 ] , i [ 3 ] , 0 ) ) ;
26134: LD_VAR 0 1
26138: PUSH
26139: LD_INT 2
26141: ARRAY
26142: PPUSH
26143: LD_VAR 0 1
26147: PUSH
26148: LD_INT 3
26150: ARRAY
26151: PPUSH
26152: LD_INT 0
26154: PPUSH
26155: CALL 26168 0 3
26159: PPUSH
26160: CALL_OW 146
// enable ;
26164: ENABLE
// end ;
26165: PPOPN 7
26167: END
// function get_build ( x , y , btype ) ; begin
26168: LD_INT 0
26170: PPUSH
// result := HexInfo ( x , y ) ;
26171: LD_ADDR_VAR 0 4
26175: PUSH
26176: LD_VAR 0 1
26180: PPUSH
26181: LD_VAR 0 2
26185: PPUSH
26186: CALL_OW 428
26190: ST_TO_ADDR
// if result < 1 then
26191: LD_VAR 0 4
26195: PUSH
26196: LD_INT 1
26198: LESS
26199: IFFALSE 26209
// result := 0 ;
26201: LD_ADDR_VAR 0 4
26205: PUSH
26206: LD_INT 0
26208: ST_TO_ADDR
// if btype then
26209: LD_VAR 0 3
26213: IFFALSE 26265
// if btype <> GetBType ( result ) then
26215: LD_VAR 0 3
26219: PUSH
26220: LD_VAR 0 4
26224: PPUSH
26225: CALL_OW 266
26229: NONEQUAL
26230: IFFALSE 26242
// result := 0 else
26232: LD_ADDR_VAR 0 4
26236: PUSH
26237: LD_INT 0
26239: ST_TO_ADDR
26240: GO 26265
// if unit_building <> GetType ( result ) then
26242: LD_INT 3
26244: PUSH
26245: LD_VAR 0 4
26249: PPUSH
26250: CALL_OW 247
26254: NONEQUAL
26255: IFFALSE 26265
// result := 0 ;
26257: LD_ADDR_VAR 0 4
26261: PUSH
26262: LD_INT 0
26264: ST_TO_ADDR
// end ; end_of_file
26265: LD_VAR 0 4
26269: RET
// var opravit ; var opravari ; every 0 0$3 trigger not under_attack do var zivoty , i , bb ;
26270: LD_EXP 140
26274: NOT
26275: IFFALSE 26458
26277: GO 26279
26279: DISABLE
26280: LD_INT 0
26282: PPUSH
26283: PPUSH
26284: PPUSH
// begin opravit := [ ] ;
26285: LD_ADDR_LOC 19
26289: PUSH
26290: EMPTY
26291: ST_TO_ADDR
// zivoty := [ ] ;
26292: LD_ADDR_VAR 0 1
26296: PUSH
26297: EMPTY
26298: ST_TO_ADDR
// for i in UnitFilter ( can_repair , [ f_side , ai ] ) do
26299: LD_ADDR_VAR 0 2
26303: PUSH
26304: LD_EXP 116
26308: PPUSH
26309: LD_INT 22
26311: PUSH
26312: LD_EXP 6
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PPUSH
26321: CALL_OW 72
26325: PUSH
26326: FOR_IN
26327: IFFALSE 26429
// begin if GetLives ( i ) < 1000 and ( difficulty > 2 and GetX ( i ) = 41 and GetX ( i ) = 23 ) then
26329: LD_VAR 0 2
26333: PPUSH
26334: CALL_OW 256
26338: PUSH
26339: LD_INT 1000
26341: LESS
26342: PUSH
26343: LD_OWVAR 67
26347: PUSH
26348: LD_INT 2
26350: GREATER
26351: PUSH
26352: LD_VAR 0 2
26356: PPUSH
26357: CALL_OW 250
26361: PUSH
26362: LD_INT 41
26364: EQUAL
26365: AND
26366: PUSH
26367: LD_VAR 0 2
26371: PPUSH
26372: CALL_OW 250
26376: PUSH
26377: LD_INT 23
26379: EQUAL
26380: AND
26381: AND
26382: IFFALSE 26427
// begin opravit := opravit ^ [ i ] ;
26384: LD_ADDR_LOC 19
26388: PUSH
26389: LD_LOC 19
26393: PUSH
26394: LD_VAR 0 2
26398: PUSH
26399: EMPTY
26400: LIST
26401: ADD
26402: ST_TO_ADDR
// zivoty := zivoty ^ [ GetLives ( i ) ] ;
26403: LD_ADDR_VAR 0 1
26407: PUSH
26408: LD_VAR 0 1
26412: PUSH
26413: LD_VAR 0 2
26417: PPUSH
26418: CALL_OW 256
26422: PUSH
26423: EMPTY
26424: LIST
26425: ADD
26426: ST_TO_ADDR
// end ; end ;
26427: GO 26326
26429: POP
26430: POP
// if opravit then
26431: LD_LOC 19
26435: IFFALSE 26457
// begin opravit := SortListByListAsc ( opravit , zivoty ) ;
26437: LD_ADDR_LOC 19
26441: PUSH
26442: LD_LOC 19
26446: PPUSH
26447: LD_VAR 0 1
26451: PPUSH
26452: CALL_OW 76
26456: ST_TO_ADDR
// end ; enable ;
26457: ENABLE
// end ;
26458: PPOPN 3
26460: END
// every 0 0$3 trigger not under_attack do
26461: LD_EXP 140
26465: NOT
26466: IFFALSE 26560
26468: GO 26470
26470: DISABLE
// begin if opravit then
26471: LD_LOC 19
26475: IFFALSE 26559
// begin if opravit [ 1 ] in can_repair then
26477: LD_LOC 19
26481: PUSH
26482: LD_INT 1
26484: ARRAY
26485: PUSH
26486: LD_EXP 116
26490: IN
26491: IFFALSE 26559
// ComRepairBuilding ( UnitFilter ( eng , [ f_dist , opravit [ 1 ] , ( 5 - GetLives ( opravit [ 1 ] ) div 200 ) * 7 ] ) , opravit [ 1 ] ) ;
26493: LD_EXP 123
26497: PPUSH
26498: LD_INT 91
26500: PUSH
26501: LD_LOC 19
26505: PUSH
26506: LD_INT 1
26508: ARRAY
26509: PUSH
26510: LD_INT 5
26512: PUSH
26513: LD_LOC 19
26517: PUSH
26518: LD_INT 1
26520: ARRAY
26521: PPUSH
26522: CALL_OW 256
26526: PUSH
26527: LD_INT 200
26529: DIV
26530: MINUS
26531: PUSH
26532: LD_INT 7
26534: MUL
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: LIST
26540: PPUSH
26541: CALL_OW 72
26545: PPUSH
26546: LD_LOC 19
26550: PUSH
26551: LD_INT 1
26553: ARRAY
26554: PPUSH
26555: CALL_OW 130
// end ; enable ;
26559: ENABLE
// end ; end_of_file
26560: END
// export fort , ctrl , sol , dep , eng , fact , mec , lab , sci ; export b1 , b2 , b3 , b4 , b5 ; export a1 , a2 , a3 , a4 , a5 ; export attack , defence ; export under_attack ; export mcdef ; export ct ; export sib_dul ; every 3 do
26561: GO 26563
26563: DISABLE
// begin sol := FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_soldier ] ] ) ;
26564: LD_ADDR_EXP 121
26568: PUSH
26569: LD_INT 22
26571: PUSH
26572: LD_EXP 6
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 25
26583: PUSH
26584: LD_INT 1
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PPUSH
26595: CALL_OW 69
26599: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , ai ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26600: LD_ADDR_EXP 122
26604: PUSH
26605: LD_INT 22
26607: PUSH
26608: LD_EXP 6
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: LD_INT 2
26619: PUSH
26620: LD_INT 30
26622: PUSH
26623: LD_INT 0
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 30
26632: PUSH
26633: LD_INT 1
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: LIST
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PPUSH
26649: CALL_OW 69
26653: ST_TO_ADDR
// eng := FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_engineer ] ] ) ;
26654: LD_ADDR_EXP 123
26658: PUSH
26659: LD_INT 22
26661: PUSH
26662: LD_EXP 6
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: LD_INT 25
26673: PUSH
26674: LD_INT 2
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PPUSH
26685: CALL_OW 69
26689: ST_TO_ADDR
// fact := FilterAllUnits ( [ [ f_side , ai ] , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_workshop ] ] ] ) ;
26690: LD_ADDR_EXP 124
26694: PUSH
26695: LD_INT 22
26697: PUSH
26698: LD_EXP 6
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 2
26709: PUSH
26710: LD_INT 30
26712: PUSH
26713: LD_INT 3
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 30
26722: PUSH
26723: LD_INT 2
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: LIST
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PPUSH
26739: CALL_OW 69
26743: ST_TO_ADDR
// ctrl := FilterAllUnits ( [ [ f_side , ai ] , [ f_btype , b_control_tower ] ] ) ;
26744: LD_ADDR_EXP 120
26748: PUSH
26749: LD_INT 22
26751: PUSH
26752: LD_EXP 6
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 30
26763: PUSH
26764: LD_INT 36
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PPUSH
26775: CALL_OW 69
26779: ST_TO_ADDR
// mec := FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_mechanic ] ] ) ;
26780: LD_ADDR_EXP 125
26784: PUSH
26785: LD_INT 22
26787: PUSH
26788: LD_EXP 6
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 25
26799: PUSH
26800: LD_INT 3
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PPUSH
26811: CALL_OW 69
26815: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , ai ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
26816: LD_ADDR_EXP 126
26820: PUSH
26821: LD_INT 22
26823: PUSH
26824: LD_EXP 6
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 2
26835: PUSH
26836: LD_INT 30
26838: PUSH
26839: LD_INT 6
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 30
26848: PUSH
26849: LD_INT 7
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 30
26858: PUSH
26859: LD_INT 8
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PPUSH
26876: CALL_OW 69
26880: ST_TO_ADDR
// sci := FilterAllUnits ( [ [ f_side , ai ] , [ f_class , class_scientistic ] ] ) ;
26881: LD_ADDR_EXP 127
26885: PUSH
26886: LD_INT 22
26888: PUSH
26889: LD_EXP 6
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 25
26900: PUSH
26901: LD_INT 4
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PPUSH
26912: CALL_OW 69
26916: ST_TO_ADDR
// sib_dul := FilterAllUnits ( [ [ f_side , ai ] , [ f_btype , b_siberite_mine ] , [ f_distxy , 101 , 93 , 5 ] ] ) ;
26917: LD_ADDR_EXP 143
26921: PUSH
26922: LD_INT 22
26924: PUSH
26925: LD_EXP 6
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 30
26936: PUSH
26937: LD_INT 30
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: LD_INT 92
26946: PUSH
26947: LD_INT 101
26949: PUSH
26950: LD_INT 93
26952: PUSH
26953: LD_INT 5
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: LIST
26966: PPUSH
26967: CALL_OW 69
26971: ST_TO_ADDR
// if sib_dul then
26972: LD_EXP 143
26976: IFFALSE 26992
// sib_dul := sib_dul [ 1 ] ;
26978: LD_ADDR_EXP 143
26982: PUSH
26983: LD_EXP 143
26987: PUSH
26988: LD_INT 1
26990: ARRAY
26991: ST_TO_ADDR
// end ;
26992: END
// every 20 20$0 do var a , i ;
26993: GO 26995
26995: DISABLE
26996: LD_INT 0
26998: PPUSH
26999: PPUSH
// begin InitUc ;
27000: CALL_OW 18
// InitHc ;
27004: CALL_OW 19
// uc_nation := nation_american ;
27008: LD_ADDR_OWVAR 21
27012: PUSH
27013: LD_INT 1
27015: ST_TO_ADDR
// uc_side := americans ;
27016: LD_ADDR_OWVAR 20
27020: PUSH
27021: LD_EXP 3
27025: ST_TO_ADDR
// for i := 1 to 5 do
27026: LD_ADDR_VAR 0 2
27030: PUSH
27031: DOUBLE
27032: LD_INT 1
27034: DEC
27035: ST_TO_ADDR
27036: LD_INT 5
27038: PUSH
27039: FOR_TO
27040: IFFALSE 27124
// begin PrepareMechanic ( 0 , 5 ) ;
27042: LD_INT 0
27044: PPUSH
27045: LD_INT 5
27047: PPUSH
27048: CALL_OW 383
// hc_class := class_soldier ;
27052: LD_ADDR_OWVAR 28
27056: PUSH
27057: LD_INT 1
27059: ST_TO_ADDR
// a := CreateHuman ;
27060: LD_ADDR_VAR 0 1
27064: PUSH
27065: CALL_OW 44
27069: ST_TO_ADDR
// PlaceUnitXYR ( a , 21 , 2 , 5 , false ) ;
27070: LD_VAR 0 1
27074: PPUSH
27075: LD_INT 21
27077: PPUSH
27078: LD_INT 2
27080: PPUSH
27081: LD_INT 5
27083: PPUSH
27084: LD_INT 0
27086: PPUSH
27087: CALL_OW 50
// ComMoveXY ( a , 25 , 32 ) ;
27091: LD_VAR 0 1
27095: PPUSH
27096: LD_INT 25
27098: PPUSH
27099: LD_INT 32
27101: PPUSH
27102: CALL_OW 111
// sol := sol ^ a ;
27106: LD_ADDR_EXP 121
27110: PUSH
27111: LD_EXP 121
27115: PUSH
27116: LD_VAR 0 1
27120: ADD
27121: ST_TO_ADDR
// end ;
27122: GO 27039
27124: POP
27125: POP
// end ;
27126: PPOPN 2
27128: END
// every 0 0$3 do var i , cm ;
27129: GO 27131
27131: DISABLE
27132: LD_INT 0
27134: PPUSH
27135: PPUSH
// begin if ctrl then
27136: LD_EXP 120
27140: IFFALSE 27559
// begin cm := UnitFilter ( UnitsInside ( ctrl [ 1 ] ) , [ [ f_class , class_mechanic ] ] ) ;
27142: LD_ADDR_VAR 0 2
27146: PUSH
27147: LD_EXP 120
27151: PUSH
27152: LD_INT 1
27154: ARRAY
27155: PPUSH
27156: CALL_OW 313
27160: PPUSH
27161: LD_INT 25
27163: PUSH
27164: LD_INT 3
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: EMPTY
27172: LIST
27173: PPUSH
27174: CALL_OW 72
27178: ST_TO_ADDR
// for i in cm do
27179: LD_ADDR_VAR 0 1
27183: PUSH
27184: LD_VAR 0 2
27188: PUSH
27189: FOR_IN
27190: IFFALSE 27235
// if UnitsLinked ( i ) >= GetSkill ( i , skill_mechanical ) then
27192: LD_VAR 0 1
27196: PPUSH
27197: CALL_OW 432
27201: PUSH
27202: LD_VAR 0 1
27206: PPUSH
27207: LD_INT 3
27209: PPUSH
27210: CALL_OW 259
27214: GREATEREQUAL
27215: IFFALSE 27233
// cm := cm diff i ;
27217: LD_ADDR_VAR 0 2
27221: PUSH
27222: LD_VAR 0 2
27226: PUSH
27227: LD_VAR 0 1
27231: DIFF
27232: ST_TO_ADDR
27233: GO 27189
27235: POP
27236: POP
// for i in attack do
27237: LD_ADDR_VAR 0 1
27241: PUSH
27242: LD_EXP 138
27246: PUSH
27247: FOR_IN
27248: IFFALSE 27557
// begin if not IsControledBy ( i ) then
27250: LD_VAR 0 1
27254: PPUSH
27255: CALL_OW 312
27259: NOT
27260: IFFALSE 27555
// case cm of 1 :
27262: LD_VAR 0 2
27266: PUSH
27267: LD_INT 1
27269: DOUBLE
27270: EQUAL
27271: IFTRUE 27275
27273: GO 27296
27275: POP
// ComLinkTo ( i , cm [ 1 ] ) ; 2 :
27276: LD_VAR 0 1
27280: PPUSH
27281: LD_VAR 0 2
27285: PUSH
27286: LD_INT 1
27288: ARRAY
27289: PPUSH
27290: CALL_OW 135
27294: GO 27555
27296: LD_INT 2
27298: DOUBLE
27299: EQUAL
27300: IFTRUE 27304
27302: GO 27375
27304: POP
// if UnitsLinked ( cm [ 1 ] ) <= UnitsLinked ( cm [ 2 ] ) then
27305: LD_VAR 0 2
27309: PUSH
27310: LD_INT 1
27312: ARRAY
27313: PPUSH
27314: CALL_OW 432
27318: PUSH
27319: LD_VAR 0 2
27323: PUSH
27324: LD_INT 2
27326: ARRAY
27327: PPUSH
27328: CALL_OW 432
27332: LESSEQUAL
27333: IFFALSE 27355
// ComLinkTo ( i , cm [ 1 ] ) else
27335: LD_VAR 0 1
27339: PPUSH
27340: LD_VAR 0 2
27344: PUSH
27345: LD_INT 1
27347: ARRAY
27348: PPUSH
27349: CALL_OW 135
27353: GO 27373
// ComLinkTo ( i , cm [ 2 ] ) ; 3 :
27355: LD_VAR 0 1
27359: PPUSH
27360: LD_VAR 0 2
27364: PUSH
27365: LD_INT 2
27367: ARRAY
27368: PPUSH
27369: CALL_OW 135
27373: GO 27555
27375: LD_INT 3
27377: DOUBLE
27378: EQUAL
27379: IFTRUE 27383
27381: GO 27554
27383: POP
// if UnitsLinked ( cm [ 1 ] ) <= UnitsLinked ( cm [ 2 ] ) then
27384: LD_VAR 0 2
27388: PUSH
27389: LD_INT 1
27391: ARRAY
27392: PPUSH
27393: CALL_OW 432
27397: PUSH
27398: LD_VAR 0 2
27402: PUSH
27403: LD_INT 2
27405: ARRAY
27406: PPUSH
27407: CALL_OW 432
27411: LESSEQUAL
27412: IFFALSE 27484
// if UnitsLinked ( cm [ 1 ] ) <= UnitsLinked ( cm [ 3 ] ) then
27414: LD_VAR 0 2
27418: PUSH
27419: LD_INT 1
27421: ARRAY
27422: PPUSH
27423: CALL_OW 432
27427: PUSH
27428: LD_VAR 0 2
27432: PUSH
27433: LD_INT 3
27435: ARRAY
27436: PPUSH
27437: CALL_OW 432
27441: LESSEQUAL
27442: IFFALSE 27464
// ComLinkTo ( i , cm [ 1 ] ) else
27444: LD_VAR 0 1
27448: PPUSH
27449: LD_VAR 0 2
27453: PUSH
27454: LD_INT 1
27456: ARRAY
27457: PPUSH
27458: CALL_OW 135
27462: GO 27482
// ComLinkTo ( i , cm [ 3 ] ) else
27464: LD_VAR 0 1
27468: PPUSH
27469: LD_VAR 0 2
27473: PUSH
27474: LD_INT 3
27476: ARRAY
27477: PPUSH
27478: CALL_OW 135
27482: GO 27552
// if UnitsLinked ( cm [ 2 ] ) <= UnitsLinked ( cm [ 3 ] ) then
27484: LD_VAR 0 2
27488: PUSH
27489: LD_INT 2
27491: ARRAY
27492: PPUSH
27493: CALL_OW 432
27497: PUSH
27498: LD_VAR 0 2
27502: PUSH
27503: LD_INT 3
27505: ARRAY
27506: PPUSH
27507: CALL_OW 432
27511: LESSEQUAL
27512: IFFALSE 27534
// ComLinkTo ( i , cm [ 2 ] ) else
27514: LD_VAR 0 1
27518: PPUSH
27519: LD_VAR 0 2
27523: PUSH
27524: LD_INT 2
27526: ARRAY
27527: PPUSH
27528: CALL_OW 135
27532: GO 27552
// ComLinkTo ( i , cm [ 3 ] ) ; end ;
27534: LD_VAR 0 1
27538: PPUSH
27539: LD_VAR 0 2
27543: PUSH
27544: LD_INT 3
27546: ARRAY
27547: PPUSH
27548: CALL_OW 135
27552: GO 27555
27554: POP
// end ;
27555: GO 27247
27557: POP
27558: POP
// end ; enable ;
27559: ENABLE
// end ;
27560: PPOPN 2
27562: END
// every 0 0$2 + 0 0$0.1 do var i , j , blds , hums , cars ;
27563: GO 27565
27565: DISABLE
27566: LD_INT 0
27568: PPUSH
27569: PPUSH
27570: PPUSH
27571: PPUSH
27572: PPUSH
// begin blds := UnitFilter ( fort , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_not , [ f_occupied ] ] ] ) ;
27573: LD_ADDR_VAR 0 3
27577: PUSH
27578: LD_EXP 119
27582: PPUSH
27583: LD_INT 2
27585: PUSH
27586: LD_INT 30
27588: PUSH
27589: LD_INT 32
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 30
27598: PUSH
27599: LD_INT 31
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 3
27613: PUSH
27614: LD_INT 59
27616: PUSH
27617: EMPTY
27618: LIST
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PPUSH
27628: CALL_OW 72
27632: ST_TO_ADDR
// hums := [ ] ;
27633: LD_ADDR_VAR 0 4
27637: PUSH
27638: EMPTY
27639: ST_TO_ADDR
// for i in sol do
27640: LD_ADDR_VAR 0 1
27644: PUSH
27645: LD_EXP 121
27649: PUSH
27650: FOR_IN
27651: IFFALSE 27765
// if ( IsIdle ( i ) and GetBType ( IsInUnit ( i ) ) <> b_bunker and GetBType ( IsInUnit ( i ) ) <> b_breastwork ) or GetBType ( IsInUnit ( i ) ) = b_barracks or GetBType ( IsInUnit ( i ) ) = b_armoury then
27653: LD_VAR 0 1
27657: PPUSH
27658: CALL_OW 316
27662: PUSH
27663: LD_VAR 0 1
27667: PPUSH
27668: CALL_OW 310
27672: PPUSH
27673: CALL_OW 266
27677: PUSH
27678: LD_INT 32
27680: NONEQUAL
27681: AND
27682: PUSH
27683: LD_VAR 0 1
27687: PPUSH
27688: CALL_OW 310
27692: PPUSH
27693: CALL_OW 266
27697: PUSH
27698: LD_INT 31
27700: NONEQUAL
27701: AND
27702: PUSH
27703: LD_VAR 0 1
27707: PPUSH
27708: CALL_OW 310
27712: PPUSH
27713: CALL_OW 266
27717: PUSH
27718: LD_INT 5
27720: EQUAL
27721: OR
27722: PUSH
27723: LD_VAR 0 1
27727: PPUSH
27728: CALL_OW 310
27732: PPUSH
27733: CALL_OW 266
27737: PUSH
27738: LD_INT 4
27740: EQUAL
27741: OR
27742: IFFALSE 27763
// hums := hums ^ [ i ] ;
27744: LD_ADDR_VAR 0 4
27748: PUSH
27749: LD_VAR 0 4
27753: PUSH
27754: LD_VAR 0 1
27758: PUSH
27759: EMPTY
27760: LIST
27761: ADD
27762: ST_TO_ADDR
27763: GO 27650
27765: POP
27766: POP
// for i in blds do
27767: LD_ADDR_VAR 0 1
27771: PUSH
27772: LD_VAR 0 3
27776: PUSH
27777: FOR_IN
27778: IFFALSE 27883
// begin j := NearestUnitToUnit ( UnitFilter ( hums , [ [ f_side , Getside ( i ) ] , [ f_dist , i , 30 ] ] ) , i ) ;
27780: LD_ADDR_VAR 0 2
27784: PUSH
27785: LD_VAR 0 4
27789: PPUSH
27790: LD_INT 22
27792: PUSH
27793: LD_VAR 0 1
27797: PPUSH
27798: CALL_OW 255
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 91
27809: PUSH
27810: LD_VAR 0 1
27814: PUSH
27815: LD_INT 30
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: LIST
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PPUSH
27827: CALL_OW 72
27831: PPUSH
27832: LD_VAR 0 1
27836: PPUSH
27837: CALL_OW 74
27841: ST_TO_ADDR
// ComExitBuilding ( j ) ;
27842: LD_VAR 0 2
27846: PPUSH
27847: CALL_OW 122
// AddComEnterUnit ( j , i ) ;
27851: LD_VAR 0 2
27855: PPUSH
27856: LD_VAR 0 1
27860: PPUSH
27861: CALL_OW 180
// hums := hums diff j ;
27865: LD_ADDR_VAR 0 4
27869: PUSH
27870: LD_VAR 0 4
27874: PUSH
27875: LD_VAR 0 2
27879: DIFF
27880: ST_TO_ADDR
// end ;
27881: GO 27777
27883: POP
27884: POP
// cars := UnitFilter ( defence , [ f_not , [ f_occupied ] ] ) ;
27885: LD_ADDR_VAR 0 5
27889: PUSH
27890: LD_EXP 139
27894: PPUSH
27895: LD_INT 3
27897: PUSH
27898: LD_INT 59
27900: PUSH
27901: EMPTY
27902: LIST
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PPUSH
27908: CALL_OW 72
27912: ST_TO_ADDR
// for i in cars do
27913: LD_ADDR_VAR 0 1
27917: PUSH
27918: LD_VAR 0 5
27922: PUSH
27923: FOR_IN
27924: IFFALSE 28029
// begin j := NearestUnitToUnit ( UnitFilter ( hums , [ [ f_side , Getside ( i ) ] , [ f_dist , i , 20 ] ] ) , i ) ;
27926: LD_ADDR_VAR 0 2
27930: PUSH
27931: LD_VAR 0 4
27935: PPUSH
27936: LD_INT 22
27938: PUSH
27939: LD_VAR 0 1
27943: PPUSH
27944: CALL_OW 255
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 91
27955: PUSH
27956: LD_VAR 0 1
27960: PUSH
27961: LD_INT 20
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: LIST
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PPUSH
27973: CALL_OW 72
27977: PPUSH
27978: LD_VAR 0 1
27982: PPUSH
27983: CALL_OW 74
27987: ST_TO_ADDR
// ComExitBuilding ( j ) ;
27988: LD_VAR 0 2
27992: PPUSH
27993: CALL_OW 122
// AddComEnterUnit ( j , i ) ;
27997: LD_VAR 0 2
28001: PPUSH
28002: LD_VAR 0 1
28006: PPUSH
28007: CALL_OW 180
// hums := hums diff j ;
28011: LD_ADDR_VAR 0 4
28015: PUSH
28016: LD_VAR 0 4
28020: PUSH
28021: LD_VAR 0 2
28025: DIFF
28026: ST_TO_ADDR
// end ;
28027: GO 27923
28029: POP
28030: POP
// blds := UnitFilter ( fort diff blds , [ f_not , [ f_occupied ] ] ) ;
28031: LD_ADDR_VAR 0 3
28035: PUSH
28036: LD_EXP 119
28040: PUSH
28041: LD_VAR 0 3
28045: DIFF
28046: PPUSH
28047: LD_INT 3
28049: PUSH
28050: LD_INT 59
28052: PUSH
28053: EMPTY
28054: LIST
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PPUSH
28060: CALL_OW 72
28064: ST_TO_ADDR
// for i in blds do
28065: LD_ADDR_VAR 0 1
28069: PUSH
28070: LD_VAR 0 3
28074: PUSH
28075: FOR_IN
28076: IFFALSE 28136
// ComEnterUnit ( UnitFilter ( hums , [ [ f_side , Getside ( i ) ] , [ f_dist , i , 30 ] ] ) , i ) ;
28078: LD_VAR 0 4
28082: PPUSH
28083: LD_INT 22
28085: PUSH
28086: LD_VAR 0 1
28090: PPUSH
28091: CALL_OW 255
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 91
28102: PUSH
28103: LD_VAR 0 1
28107: PUSH
28108: LD_INT 30
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: LIST
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PPUSH
28120: CALL_OW 72
28124: PPUSH
28125: LD_VAR 0 1
28129: PPUSH
28130: CALL_OW 120
28134: GO 28075
28136: POP
28137: POP
// enable ;
28138: ENABLE
// end ;
28139: PPOPN 5
28141: END
// every 0 0$2 + 0 0$0.5 do var i , j , blds , hums ;
28142: GO 28144
28144: DISABLE
28145: LD_INT 0
28147: PPUSH
28148: PPUSH
28149: PPUSH
28150: PPUSH
// begin blds := dep ;
28151: LD_ADDR_VAR 0 3
28155: PUSH
28156: LD_EXP 122
28160: ST_TO_ADDR
// hums := [ ] ;
28161: LD_ADDR_VAR 0 4
28165: PUSH
28166: EMPTY
28167: ST_TO_ADDR
// for i in eng do
28168: LD_ADDR_VAR 0 1
28172: PUSH
28173: LD_EXP 123
28177: PUSH
28178: FOR_IN
28179: IFFALSE 28225
// if IsIdle ( i ) and not IsInUnit ( i ) then
28181: LD_VAR 0 1
28185: PPUSH
28186: CALL_OW 316
28190: PUSH
28191: LD_VAR 0 1
28195: PPUSH
28196: CALL_OW 310
28200: NOT
28201: AND
28202: IFFALSE 28223
// hums := hums ^ [ i ] ;
28204: LD_ADDR_VAR 0 4
28208: PUSH
28209: LD_VAR 0 4
28213: PUSH
28214: LD_VAR 0 1
28218: PUSH
28219: EMPTY
28220: LIST
28221: ADD
28222: ST_TO_ADDR
28223: GO 28178
28225: POP
28226: POP
// for i in blds do
28227: LD_ADDR_VAR 0 1
28231: PUSH
28232: LD_VAR 0 3
28236: PUSH
28237: FOR_IN
28238: IFFALSE 28298
// ComEnterUnit ( UnitFilter ( hums , [ [ f_side , Getside ( i ) ] , [ f_dist , i , 30 ] ] ) , i ) ;
28240: LD_VAR 0 4
28244: PPUSH
28245: LD_INT 22
28247: PUSH
28248: LD_VAR 0 1
28252: PPUSH
28253: CALL_OW 255
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 91
28264: PUSH
28265: LD_VAR 0 1
28269: PUSH
28270: LD_INT 30
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: LIST
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PPUSH
28282: CALL_OW 72
28286: PPUSH
28287: LD_VAR 0 1
28291: PPUSH
28292: CALL_OW 120
28296: GO 28237
28298: POP
28299: POP
// enable ;
28300: ENABLE
// end ;
28301: PPOPN 4
28303: END
// every 0 0$2 + 0 0$0.7 do var i , j , blds , hums ;
28304: GO 28306
28306: DISABLE
28307: LD_INT 0
28309: PPUSH
28310: PPUSH
28311: PPUSH
28312: PPUSH
// begin blds := fact ;
28313: LD_ADDR_VAR 0 3
28317: PUSH
28318: LD_EXP 124
28322: ST_TO_ADDR
// hums := [ ] ;
28323: LD_ADDR_VAR 0 4
28327: PUSH
28328: EMPTY
28329: ST_TO_ADDR
// for i in mec do
28330: LD_ADDR_VAR 0 1
28334: PUSH
28335: LD_EXP 125
28339: PUSH
28340: FOR_IN
28341: IFFALSE 28402
// if ( IsIdle ( i ) and not IsInUnit ( i ) ) or not IsInArea ( i , def_base ) then
28343: LD_VAR 0 1
28347: PPUSH
28348: CALL_OW 316
28352: PUSH
28353: LD_VAR 0 1
28357: PPUSH
28358: CALL_OW 310
28362: NOT
28363: AND
28364: PUSH
28365: LD_VAR 0 1
28369: PPUSH
28370: LD_INT 19
28372: PPUSH
28373: CALL_OW 308
28377: NOT
28378: OR
28379: IFFALSE 28400
// hums := hums ^ [ i ] ;
28381: LD_ADDR_VAR 0 4
28385: PUSH
28386: LD_VAR 0 4
28390: PUSH
28391: LD_VAR 0 1
28395: PUSH
28396: EMPTY
28397: LIST
28398: ADD
28399: ST_TO_ADDR
28400: GO 28340
28402: POP
28403: POP
// for i in blds do
28404: LD_ADDR_VAR 0 1
28408: PUSH
28409: LD_VAR 0 3
28413: PUSH
28414: FOR_IN
28415: IFFALSE 28475
// ComEnterUnit ( UnitFilter ( hums , [ [ f_side , Getside ( i ) ] , [ f_dist , i , 30 ] ] ) , i ) ;
28417: LD_VAR 0 4
28421: PPUSH
28422: LD_INT 22
28424: PUSH
28425: LD_VAR 0 1
28429: PPUSH
28430: CALL_OW 255
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 91
28441: PUSH
28442: LD_VAR 0 1
28446: PUSH
28447: LD_INT 30
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: LIST
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PPUSH
28459: CALL_OW 72
28463: PPUSH
28464: LD_VAR 0 1
28468: PPUSH
28469: CALL_OW 120
28473: GO 28414
28475: POP
28476: POP
// enable ;
28477: ENABLE
// end ;
28478: PPOPN 4
28480: END
// every 0 0$2 + 0 0$0.35 do var i , j , bld , hums ;
28481: GO 28483
28483: DISABLE
28484: LD_INT 0
28486: PPUSH
28487: PPUSH
28488: PPUSH
28489: PPUSH
// begin if ct < 2 then
28490: LD_EXP 142
28494: PUSH
28495: LD_INT 2
28497: LESS
28498: IFFALSE 28702
// if ctrl then
28500: LD_EXP 120
28504: IFFALSE 28702
// begin bld := ctrl [ 1 ] ;
28506: LD_ADDR_VAR 0 3
28510: PUSH
28511: LD_EXP 120
28515: PUSH
28516: LD_INT 1
28518: ARRAY
28519: ST_TO_ADDR
// hums := [ ] ;
28520: LD_ADDR_VAR 0 4
28524: PUSH
28525: EMPTY
28526: ST_TO_ADDR
// for i in get_x_best ( mec , mec , skill_mechanical , 0 , false ) do
28527: LD_ADDR_VAR 0 1
28531: PUSH
28532: LD_EXP 125
28536: PPUSH
28537: LD_EXP 125
28541: PPUSH
28542: LD_INT 3
28544: PPUSH
28545: LD_INT 0
28547: PPUSH
28548: LD_INT 0
28550: PPUSH
28551: CALL 10360 0 5
28555: PUSH
28556: FOR_IN
28557: IFFALSE 28620
// if GetBType ( IsInUnit ( i ) ) <> b_control_tower and GetType ( IsInUnit ( i ) ) <> unit_vehicle then
28559: LD_VAR 0 1
28563: PPUSH
28564: CALL_OW 310
28568: PPUSH
28569: CALL_OW 266
28573: PUSH
28574: LD_INT 36
28576: NONEQUAL
28577: PUSH
28578: LD_VAR 0 1
28582: PPUSH
28583: CALL_OW 310
28587: PPUSH
28588: CALL_OW 247
28592: PUSH
28593: LD_INT 2
28595: NONEQUAL
28596: AND
28597: IFFALSE 28618
// hums := hums ^ [ i ] ;
28599: LD_ADDR_VAR 0 4
28603: PUSH
28604: LD_VAR 0 4
28608: PUSH
28609: LD_VAR 0 1
28613: PUSH
28614: EMPTY
28615: LIST
28616: ADD
28617: ST_TO_ADDR
28618: GO 28556
28620: POP
28621: POP
// ct := ct union get_x_best ( UnitFilter ( mec , [ [ f_dist , bld , 50 ] ] ) , 2 , skill_mechanical , 0 , false ) ;
28622: LD_ADDR_EXP 142
28626: PUSH
28627: LD_EXP 142
28631: PUSH
28632: LD_EXP 125
28636: PPUSH
28637: LD_INT 91
28639: PUSH
28640: LD_VAR 0 3
28644: PUSH
28645: LD_INT 50
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: LIST
28652: PUSH
28653: EMPTY
28654: LIST
28655: PPUSH
28656: CALL_OW 72
28660: PPUSH
28661: LD_INT 2
28663: PPUSH
28664: LD_INT 3
28666: PPUSH
28667: LD_INT 0
28669: PPUSH
28670: LD_INT 0
28672: PPUSH
28673: CALL 10360 0 5
28677: UNION
28678: ST_TO_ADDR
// remove_from_humans ( ct ) ;
28679: LD_EXP 142
28683: PPUSH
28684: CALL 32104 0 1
// ComEnterUnit ( ct , bld ) ;
28688: LD_EXP 142
28692: PPUSH
28693: LD_VAR 0 3
28697: PPUSH
28698: CALL_OW 120
// end ; enable ;
28702: ENABLE
// end ;
28703: PPOPN 4
28705: END
// every 0 0$2 + 0 0$0.9 do var i , j , blds , hums ;
28706: GO 28708
28708: DISABLE
28709: LD_INT 0
28711: PPUSH
28712: PPUSH
28713: PPUSH
28714: PPUSH
// begin blds := lab ;
28715: LD_ADDR_VAR 0 3
28719: PUSH
28720: LD_EXP 126
28724: ST_TO_ADDR
// hums := [ ] ;
28725: LD_ADDR_VAR 0 4
28729: PUSH
28730: EMPTY
28731: ST_TO_ADDR
// for i in sci do
28732: LD_ADDR_VAR 0 1
28736: PUSH
28737: LD_EXP 127
28741: PUSH
28742: FOR_IN
28743: IFFALSE 28789
// if IsIdle ( i ) and not IsInUnit ( i ) then
28745: LD_VAR 0 1
28749: PPUSH
28750: CALL_OW 316
28754: PUSH
28755: LD_VAR 0 1
28759: PPUSH
28760: CALL_OW 310
28764: NOT
28765: AND
28766: IFFALSE 28787
// hums := hums ^ [ i ] ;
28768: LD_ADDR_VAR 0 4
28772: PUSH
28773: LD_VAR 0 4
28777: PUSH
28778: LD_VAR 0 1
28782: PUSH
28783: EMPTY
28784: LIST
28785: ADD
28786: ST_TO_ADDR
28787: GO 28742
28789: POP
28790: POP
// for i in blds do
28791: LD_ADDR_VAR 0 1
28795: PUSH
28796: LD_VAR 0 3
28800: PUSH
28801: FOR_IN
28802: IFFALSE 28862
// ComEnterUnit ( UnitFilter ( hums , [ [ f_side , Getside ( i ) ] , [ f_dist , i , 30 ] ] ) , i ) ;
28804: LD_VAR 0 4
28808: PPUSH
28809: LD_INT 22
28811: PUSH
28812: LD_VAR 0 1
28816: PPUSH
28817: CALL_OW 255
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 91
28828: PUSH
28829: LD_VAR 0 1
28833: PUSH
28834: LD_INT 30
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: LIST
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PPUSH
28846: CALL_OW 72
28850: PPUSH
28851: LD_VAR 0 1
28855: PPUSH
28856: CALL_OW 120
28860: GO 28801
28862: POP
28863: POP
// enable ;
28864: ENABLE
// end ;
28865: PPOPN 4
28867: END
// every 0 0$2 + 0 0$0.8 do var i , j , blds , hums ;
28868: GO 28870
28870: DISABLE
28871: LD_INT 0
28873: PPUSH
28874: PPUSH
28875: PPUSH
28876: PPUSH
// begin for i in a3 ^ a4 do
28877: LD_ADDR_VAR 0 1
28881: PUSH
28882: LD_EXP 135
28886: PUSH
28887: LD_EXP 136
28891: ADD
28892: PUSH
28893: FOR_IN
28894: IFFALSE 29111
// begin if IsIdle ( i ) and not IsInArea ( i , def_base ) and not IsInUnit ( i ) then
28896: LD_VAR 0 1
28900: PPUSH
28901: CALL_OW 316
28905: PUSH
28906: LD_VAR 0 1
28910: PPUSH
28911: LD_INT 19
28913: PPUSH
28914: CALL_OW 308
28918: NOT
28919: AND
28920: PUSH
28921: LD_VAR 0 1
28925: PPUSH
28926: CALL_OW 310
28930: NOT
28931: AND
28932: IFFALSE 28988
// if GetDistUnitArea ( i , abase3 ) < GetDistUnitArea ( i , abase4 ) then
28934: LD_VAR 0 1
28938: PPUSH
28939: LD_INT 6
28941: PPUSH
28942: CALL_OW 299
28946: PUSH
28947: LD_VAR 0 1
28951: PPUSH
28952: LD_INT 7
28954: PPUSH
28955: CALL_OW 299
28959: LESS
28960: IFFALSE 28976
// ComMoveToArea ( i , abase3 ) else
28962: LD_VAR 0 1
28966: PPUSH
28967: LD_INT 6
28969: PPUSH
28970: CALL_OW 113
28974: GO 28988
// ComMoveToArea ( i , abase4 ) ;
28976: LD_VAR 0 1
28980: PPUSH
28981: LD_INT 7
28983: PPUSH
28984: CALL_OW 113
// if IsIdle ( IsInUnit ( i ) ) and not IsInArea ( IsInUnit ( i ) , def_base ) and IsInUnit ( i ) then
28988: LD_VAR 0 1
28992: PPUSH
28993: CALL_OW 310
28997: PPUSH
28998: CALL_OW 316
29002: PUSH
29003: LD_VAR 0 1
29007: PPUSH
29008: CALL_OW 310
29012: PPUSH
29013: LD_INT 19
29015: PPUSH
29016: CALL_OW 308
29020: NOT
29021: AND
29022: PUSH
29023: LD_VAR 0 1
29027: PPUSH
29028: CALL_OW 310
29032: AND
29033: IFFALSE 29109
// if GetDistUnitArea ( IsInUnit ( i ) , abase3 ) < GetDistUnitArea ( IsInUnit ( i ) , abase4 ) then
29035: LD_VAR 0 1
29039: PPUSH
29040: CALL_OW 310
29044: PPUSH
29045: LD_INT 6
29047: PPUSH
29048: CALL_OW 299
29052: PUSH
29053: LD_VAR 0 1
29057: PPUSH
29058: CALL_OW 310
29062: PPUSH
29063: LD_INT 7
29065: PPUSH
29066: CALL_OW 299
29070: LESS
29071: IFFALSE 29092
// ComMoveToArea ( IsInUnit ( i ) , abase3 ) else
29073: LD_VAR 0 1
29077: PPUSH
29078: CALL_OW 310
29082: PPUSH
29083: LD_INT 6
29085: PPUSH
29086: CALL_OW 113
29090: GO 29109
// ComMoveToArea ( IsInUnit ( i ) , abase4 ) ;
29092: LD_VAR 0 1
29096: PPUSH
29097: CALL_OW 310
29101: PPUSH
29102: LD_INT 7
29104: PPUSH
29105: CALL_OW 113
// end ;
29109: GO 28893
29111: POP
29112: POP
// enable ;
29113: ENABLE
// end ; end_of_file
29114: PPOPN 4
29116: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = you then
29117: LD_VAR 0 2
29121: PPUSH
29122: CALL_OW 255
29126: PUSH
29127: LD_EXP 1
29131: EQUAL
29132: IFFALSE 29170
// case tech of tech_MatPred :
29134: LD_VAR 0 1
29138: PUSH
29139: LD_INT 9
29141: DOUBLE
29142: EQUAL
29143: IFTRUE 29147
29145: GO 29154
29147: POP
// DNoMaterial ; tech_TauField :
29148: CALL 1896 0 0
29152: GO 29170
29154: LD_INT 30
29156: DOUBLE
29157: EQUAL
29158: IFTRUE 29162
29160: GO 29169
29162: POP
// DStasis ; end ;
29163: CALL 5453 0 0
29167: GO 29170
29169: POP
// end ;
29170: PPOPN 2
29172: END
// on EndTheMissionRaised ( aa ) do begin end_the_mission_allowed := false ;
29173: LD_ADDR_OWVAR 57
29177: PUSH
29178: LD_INT 0
29180: ST_TO_ADDR
// VyhraExit ;
29181: CALL 374 0 0
// end ;
29185: PPOPN 1
29187: END
// on UnitDestroyed ( un ) do begin remove_from_vehicles ( un ) ;
29188: LD_VAR 0 1
29192: PPUSH
29193: CALL 32274 0 1
// remove_from_humans ( un ) ;
29197: LD_VAR 0 1
29201: PPUSH
29202: CALL 32104 0 1
// remove_from_builds ( un ) ;
29206: LD_VAR 0 1
29210: PPUSH
29211: CALL 31918 0 1
// if un = Burlak then
29215: LD_VAR 0 1
29219: PUSH
29220: LD_EXP 61
29224: EQUAL
29225: IFFALSE 29234
// YouLost ( Burlak ) ;
29227: LD_STRING Burlak
29229: PPUSH
29230: CALL_OW 104
// if un = Gleb and utok_na_gleba then
29234: LD_VAR 0 1
29238: PUSH
29239: LD_EXP 65
29243: EQUAL
29244: PUSH
29245: LD_EXP 60
29249: AND
29250: IFFALSE 29259
// YouLost ( Gleb ) ;
29252: LD_STRING Gleb
29254: PPUSH
29255: CALL_OW 104
// if un = Vsevolod then
29259: LD_VAR 0 1
29263: PUSH
29264: LD_EXP 70
29268: EQUAL
29269: IFFALSE 29342
// begin if GetSide ( un ) = 6 then
29271: LD_VAR 0 1
29275: PPUSH
29276: CALL_OW 255
29280: PUSH
29281: LD_INT 6
29283: EQUAL
29284: IFFALSE 29290
// SA_NotSaveVsevolod ;
29286: CALL 33176 0 0
// mrtvi_vsevolodaci := mrtvi_vsevolodaci ^ [ Vsevolod ] ;
29290: LD_ADDR_EXP 41
29294: PUSH
29295: LD_EXP 41
29299: PUSH
29300: LD_STRING Vsevolod
29302: PUSH
29303: EMPTY
29304: LIST
29305: ADD
29306: ST_TO_ADDR
// SetSide ( Vsevolod2 , GetSide ( Vsevolod ) ) ;
29307: LD_EXP 71
29311: PPUSH
29312: LD_EXP 70
29316: PPUSH
29317: CALL_OW 255
29321: PPUSH
29322: CALL_OW 235
// if kecali then
29326: LD_EXP 54
29330: IFFALSE 29338
// DDieVsev2 else
29332: CALL 5425 0 0
29336: GO 29342
// DDieVsev1 ;
29338: CALL 5380 0 0
// end ; if un in Vsevolod_uderna_group then
29342: LD_VAR 0 1
29346: PUSH
29347: LD_EXP 12
29351: IN
29352: IFFALSE 29397
// begin Vsevolod_uderna_group := Vsevolod_uderna_group diff un ;
29354: LD_ADDR_EXP 12
29358: PUSH
29359: LD_EXP 12
29363: PUSH
29364: LD_VAR 0 1
29368: DIFF
29369: ST_TO_ADDR
// mrtvi_vsevolodaci := mrtvi_vsevolodaci ^ [ vsev_g_ & ( mrtvi_vsevolodaci + 1 ) ] ;
29370: LD_ADDR_EXP 41
29374: PUSH
29375: LD_EXP 41
29379: PUSH
29380: LD_STRING vsev_g_
29382: PUSH
29383: LD_EXP 41
29387: PUSH
29388: LD_INT 1
29390: PLUS
29391: STR
29392: PUSH
29393: EMPTY
29394: LIST
29395: ADD
29396: ST_TO_ADDR
// end ; end ;
29397: PPOPN 1
29399: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = ai then
29400: LD_VAR 0 1
29404: PPUSH
29405: CALL_OW 255
29409: PUSH
29410: LD_EXP 6
29414: EQUAL
29415: IFFALSE 29470
// begin case GetType ( un ) of unit_vehicle :
29417: LD_VAR 0 1
29421: PPUSH
29422: CALL_OW 247
29426: PUSH
29427: LD_INT 2
29429: DOUBLE
29430: EQUAL
29431: IFTRUE 29435
29433: GO 29438
29435: POP
// ; unit_human :
29436: GO 29470
29438: LD_INT 1
29440: DOUBLE
29441: EQUAL
29442: IFTRUE 29446
29444: GO 29458
29446: POP
// begin zachranka ( un ) ;
29447: LD_VAR 0 1
29451: PPUSH
29452: CALL 32332 0 1
// end ; unit_building :
29456: GO 29470
29458: LD_INT 3
29460: DOUBLE
29461: EQUAL
29462: IFTRUE 29466
29464: GO 29469
29466: POP
// begin end ; end ;
29467: GO 29470
29469: POP
// end ; if MyGodMode and GetSide ( un ) = you then
29470: LD_EXP 144
29474: PUSH
29475: LD_VAR 0 1
29479: PPUSH
29480: CALL_OW 255
29484: PUSH
29485: LD_EXP 1
29489: EQUAL
29490: AND
29491: IFFALSE 29505
// SetLives ( un , 1000 ) ;
29493: LD_VAR 0 1
29497: PPUSH
29498: LD_INT 1000
29500: PPUSH
29501: CALL_OW 234
// end ;
29505: PPOPN 1
29507: END
// export MyGodMode ; on VehicleCaptured ( vehnew , vehold , origside , hum ) do begin if origside = ai then
29508: LD_VAR 0 3
29512: PUSH
29513: LD_EXP 6
29517: EQUAL
29518: IFFALSE 29529
// begin remove_from_vehicles ( vehold ) ;
29520: LD_VAR 0 2
29524: PPUSH
29525: CALL 32274 0 1
// end ; end ;
29529: PPOPN 4
29531: END
// on BuildingCaptured ( build , origside , eng ) do begin if origside = ai then
29532: LD_VAR 0 2
29536: PUSH
29537: LD_EXP 6
29541: EQUAL
29542: IFFALSE 29597
// begin remove_from_builds ( build ) ;
29544: LD_VAR 0 1
29548: PPUSH
29549: CALL 31918 0 1
// if GetBType ( build ) = b_siberite_mine then
29553: LD_VAR 0 1
29557: PPUSH
29558: CALL_OW 266
29562: PUSH
29563: LD_INT 30
29565: EQUAL
29566: IFFALSE 29597
// SetResourceVisibility ( GetX ( build ) , GetY ( build ) , you ) ;
29568: LD_VAR 0 1
29572: PPUSH
29573: CALL_OW 250
29577: PPUSH
29578: LD_VAR 0 1
29582: PPUSH
29583: CALL_OW 251
29587: PPUSH
29588: LD_EXP 1
29592: PPUSH
29593: CALL_OW 441
// end ; if origside = you then
29597: LD_VAR 0 2
29601: PUSH
29602: LD_EXP 1
29606: EQUAL
29607: IFFALSE 29618
// begin add_to_builds ( build ) ;
29609: LD_VAR 0 1
29613: PPUSH
29614: CALL 31212 0 1
// end ; end ;
29618: PPOPN 3
29620: END
// export was_DMatPrediction ; on BuildingComplete ( build ) do begin if GetSide ( build ) = ai then
29621: LD_VAR 0 1
29625: PPUSH
29626: CALL_OW 255
29630: PUSH
29631: LD_EXP 6
29635: EQUAL
29636: IFFALSE 29647
// begin add_to_builds ( build ) ;
29638: LD_VAR 0 1
29642: PPUSH
29643: CALL 31212 0 1
// end ; if GetSide ( build ) = you then
29647: LD_VAR 0 1
29651: PPUSH
29652: CALL_OW 255
29656: PUSH
29657: LD_EXP 1
29661: EQUAL
29662: IFFALSE 29698
// begin if not was_DMatPrediction and GetBType ( build ) = b_lab then
29664: LD_EXP 145
29668: NOT
29669: PUSH
29670: LD_VAR 0 1
29674: PPUSH
29675: CALL_OW 266
29679: PUSH
29680: LD_INT 6
29682: EQUAL
29683: AND
29684: IFFALSE 29698
// begin was_DMatPrediction := true ;
29686: LD_ADDR_EXP 145
29690: PUSH
29691: LD_INT 1
29693: ST_TO_ADDR
// DMatPrediction ;
29694: CALL 1746 0 0
// end ; end ; end ;
29698: PPOPN 1
29700: END
// on UpgradeComplete ( build ) do begin if GetSide ( build ) = you and GetBType ( build ) in all_labs then
29701: LD_VAR 0 1
29705: PPUSH
29706: CALL_OW 255
29710: PUSH
29711: LD_EXP 1
29715: EQUAL
29716: PUSH
29717: LD_VAR 0 1
29721: PPUSH
29722: CALL_OW 266
29726: PUSH
29727: LD_EXP 40
29731: IN
29732: AND
29733: IFFALSE 29785
// if not byl_sib_research and ( ( GetLabKind ( build , 1 ) = b_lab_spacetime or GetLabKind ( build , 2 ) = b_lab_spacetime ) ) then
29735: LD_EXP 53
29739: NOT
29740: PUSH
29741: LD_VAR 0 1
29745: PPUSH
29746: LD_INT 1
29748: PPUSH
29749: CALL_OW 268
29753: PUSH
29754: LD_INT 14
29756: EQUAL
29757: PUSH
29758: LD_VAR 0 1
29762: PPUSH
29763: LD_INT 2
29765: PPUSH
29766: CALL_OW 268
29770: PUSH
29771: LD_INT 14
29773: EQUAL
29774: OR
29775: AND
29776: IFFALSE 29785
// begin DSibResearch ;
29778: CALL 2105 0 0
// disable ( 66 ) ;
29782: LD_INT 66
29784: DISABLE_MARKED
// end ; end ;
29785: PPOPN 1
29787: END
// on VehicleConstructed ( veh , fact ) do begin if GetSide ( veh ) = ai then
29788: LD_VAR 0 1
29792: PPUSH
29793: CALL_OW 255
29797: PUSH
29798: LD_EXP 6
29802: EQUAL
29803: IFFALSE 29861
// begin if veh in attack then
29805: LD_VAR 0 1
29809: PUSH
29810: LD_EXP 138
29814: IN
29815: IFFALSE 29831
// ComMoveToArea ( veh , pro_att ) else
29817: LD_VAR 0 1
29821: PPUSH
29822: LD_INT 13
29824: PPUSH
29825: CALL_OW 113
29829: GO 29843
// ComMoveToArea ( veh , pro_def ) ;
29831: LD_VAR 0 1
29835: PPUSH
29836: LD_INT 12
29838: PPUSH
29839: CALL_OW 113
// AddComExitVehicle ( veh ) ;
29843: LD_VAR 0 1
29847: PPUSH
29848: CALL_OW 181
// add_to_vehicles ( veh ) ;
29852: LD_VAR 0 1
29856: PPUSH
29857: CALL 31120 0 1
// end ; end ;
29861: PPOPN 2
29863: END
// on LeaveBuilding ( b , un ) do begin if GetSide ( un ) = you and GetBType ( b ) = b_control_tower then
29864: LD_VAR 0 2
29868: PPUSH
29869: CALL_OW 255
29873: PUSH
29874: LD_EXP 1
29878: EQUAL
29879: PUSH
29880: LD_VAR 0 1
29884: PPUSH
29885: CALL_OW 266
29889: PUSH
29890: LD_INT 36
29892: EQUAL
29893: AND
29894: IFFALSE 29905
// add_to_humans ( un ) ;
29896: LD_VAR 0 2
29900: PPUSH
29901: CALL 30784 0 1
// end ;
29905: PPOPN 2
29907: END
// on SailEvent ( num ) do begin case num of 0 :
29908: LD_VAR 0 1
29912: PUSH
29913: LD_INT 0
29915: DOUBLE
29916: EQUAL
29917: IFTRUE 29921
29919: GO 29924
29921: POP
// begin end ; normal1_utok :
29922: GO 30027
29924: LD_EXP 24
29928: DOUBLE
29929: EQUAL
29930: IFTRUE 29934
29932: GO 29941
29934: POP
// begin f_normal1_utok ;
29935: CALL 13384 0 0
// end ; normal2_utok :
29939: GO 30027
29941: LD_EXP 25
29945: DOUBLE
29946: EQUAL
29947: IFTRUE 29951
29949: GO 29958
29951: POP
// begin f_normal2_utok ;
29952: CALL 13713 0 0
// end ; normal3_utok :
29956: GO 30027
29958: LD_EXP 26
29962: DOUBLE
29963: EQUAL
29964: IFTRUE 29968
29966: GO 29975
29968: POP
// begin f_normal3_utok ;
29969: CALL 14053 0 0
// end ; normal4_utok :
29973: GO 30027
29975: LD_EXP 27
29979: DOUBLE
29980: EQUAL
29981: IFTRUE 29985
29983: GO 29992
29985: POP
// begin f_normal4_utok ;
29986: CALL 14404 0 0
// end ; vsevolod_attack :
29990: GO 30027
29992: LD_EXP 28
29996: DOUBLE
29997: EQUAL
29998: IFTRUE 30002
30000: GO 30009
30002: POP
// begin f_vsevolod_utok ;
30003: CALL 14744 0 0
// end ; vsevolod_final_attack :
30007: GO 30027
30009: LD_EXP 29
30013: DOUBLE
30014: EQUAL
30015: IFTRUE 30019
30017: GO 30026
30019: POP
// begin f_vsevolod_final_utok ;
30020: CALL 15080 0 0
// end ; end ;
30024: GO 30027
30026: POP
// end ;
30027: PPOPN 1
30029: END
// on Contact ( side1 , side2 ) do var a ;
30030: LD_INT 0
30032: PPUSH
// begin if IsLive ( a1eng ) then
30033: LD_EXP 114
30037: PPUSH
30038: CALL_OW 300
30042: IFFALSE 30262
// if ( side1 = you and side2 = ai ) or ( side2 = you and side1 = ai ) then
30044: LD_VAR 0 1
30048: PUSH
30049: LD_EXP 1
30053: EQUAL
30054: PUSH
30055: LD_VAR 0 2
30059: PUSH
30060: LD_EXP 6
30064: EQUAL
30065: AND
30066: PUSH
30067: LD_VAR 0 2
30071: PUSH
30072: LD_EXP 1
30076: EQUAL
30077: PUSH
30078: LD_VAR 0 1
30082: PUSH
30083: LD_EXP 6
30087: EQUAL
30088: AND
30089: OR
30090: IFFALSE 30262
// begin if a1eng then
30092: LD_EXP 114
30096: IFFALSE 30262
// begin remove_from_humans ( a1eng ) ;
30098: LD_EXP 114
30102: PPUSH
30103: CALL 32104 0 1
// while IsInUnit ( a1eng ) and IsLive ( a1eng ) do
30107: LD_EXP 114
30111: PPUSH
30112: CALL_OW 310
30116: PUSH
30117: LD_EXP 114
30121: PPUSH
30122: CALL_OW 300
30126: AND
30127: IFFALSE 30147
// begin ComExitBuilding ( a1eng ) ;
30129: LD_EXP 114
30133: PPUSH
30134: CALL_OW 122
// wait ( 0 0$1 ) ;
30138: LD_INT 35
30140: PPUSH
30141: CALL_OW 67
// end ;
30145: GO 30107
// while IsLive ( sib_dul ) and IsLive ( a1eng ) do
30147: LD_EXP 143
30151: PPUSH
30152: CALL_OW 300
30156: PUSH
30157: LD_EXP 114
30161: PPUSH
30162: CALL_OW 300
30166: AND
30167: IFFALSE 30241
// begin a := GetLives ( sib_dul ) - 25 * difficulty ;
30169: LD_ADDR_VAR 0 3
30173: PUSH
30174: LD_EXP 143
30178: PPUSH
30179: CALL_OW 256
30183: PUSH
30184: LD_INT 25
30186: PUSH
30187: LD_OWVAR 67
30191: MUL
30192: MINUS
30193: ST_TO_ADDR
// if a > 1 then
30194: LD_VAR 0 3
30198: PUSH
30199: LD_INT 1
30201: GREATER
30202: IFFALSE 30218
// SetLives ( sib_dul , a ) ;
30204: LD_EXP 143
30208: PPUSH
30209: LD_VAR 0 3
30213: PPUSH
30214: CALL_OW 234
// ComDismantle ( a1eng , sib_dul ) ;
30218: LD_EXP 114
30222: PPUSH
30223: LD_EXP 143
30227: PPUSH
30228: CALL_OW 167
// wait ( 0 0$1 ) ;
30232: LD_INT 35
30234: PPUSH
30235: CALL_OW 67
// end ;
30239: GO 30147
// AddComEnterUnit ( a1eng , Rudepot ) ;
30241: LD_EXP 114
30245: PPUSH
30246: LD_INT 58
30248: PPUSH
30249: CALL_OW 180
// add_to_humans ( a1eng ) ;
30253: LD_EXP 114
30257: PPUSH
30258: CALL 30784 0 1
// end ; end ; end ;
30262: PPOPN 3
30264: END
// var mcdef1 , mcdef2 , mcatt1 ; on McDefendTakesUnit ( mcid , un ) do begin if mcid = idDef1 then
30265: LD_VAR 0 1
30269: PUSH
30270: LD_EXP 96
30274: EQUAL
30275: IFFALSE 30293
// mcdef1 := mcdef1 union un ;
30277: LD_ADDR_LOC 21
30281: PUSH
30282: LD_LOC 21
30286: PUSH
30287: LD_VAR 0 2
30291: UNION
30292: ST_TO_ADDR
// if mcid = idDef2 then
30293: LD_VAR 0 1
30297: PUSH
30298: LD_EXP 97
30302: EQUAL
30303: IFFALSE 30321
// mcdef2 := mcdef2 union un ;
30305: LD_ADDR_LOC 22
30309: PUSH
30310: LD_LOC 22
30314: PUSH
30315: LD_VAR 0 2
30319: UNION
30320: ST_TO_ADDR
// if mcid = idAtt1 then
30321: LD_VAR 0 1
30325: PUSH
30326: LD_EXP 93
30330: EQUAL
30331: IFFALSE 30349
// mcatt1 := mcatt1 union un ;
30333: LD_ADDR_LOC 23
30337: PUSH
30338: LD_LOC 23
30342: PUSH
30343: LD_VAR 0 2
30347: UNION
30348: ST_TO_ADDR
// Remove_From_Humans ( un ) ;
30349: LD_VAR 0 2
30353: PPUSH
30354: CALL 32104 0 1
// Remove_From_Vehicles ( un ) ;
30358: LD_VAR 0 2
30362: PPUSH
30363: CALL 32274 0 1
// Remove_From_Builds ( un ) ;
30367: LD_VAR 0 2
30371: PPUSH
30372: CALL 31918 0 1
// end ;
30376: PPOPN 2
30378: END
// on McDefendReturnsUnit ( mcid , un ) do begin if mcid = idDef1 then
30379: LD_VAR 0 1
30383: PUSH
30384: LD_EXP 96
30388: EQUAL
30389: IFFALSE 30407
// mcdef1 := mcdef1 diff un ;
30391: LD_ADDR_LOC 21
30395: PUSH
30396: LD_LOC 21
30400: PUSH
30401: LD_VAR 0 2
30405: DIFF
30406: ST_TO_ADDR
// if mcid = idDef2 then
30407: LD_VAR 0 1
30411: PUSH
30412: LD_EXP 97
30416: EQUAL
30417: IFFALSE 30435
// mcdef2 := mcdef2 diff un ;
30419: LD_ADDR_LOC 22
30423: PUSH
30424: LD_LOC 22
30428: PUSH
30429: LD_VAR 0 2
30433: DIFF
30434: ST_TO_ADDR
// if mcid = idAtt1 then
30435: LD_VAR 0 1
30439: PUSH
30440: LD_EXP 93
30444: EQUAL
30445: IFFALSE 30463
// mcatt1 := mcatt1 diff un ;
30447: LD_ADDR_LOC 23
30451: PUSH
30452: LD_LOC 23
30456: PUSH
30457: LD_VAR 0 2
30461: DIFF
30462: ST_TO_ADDR
// add_to_Humans ( un ) ;
30463: LD_VAR 0 2
30467: PPUSH
30468: CALL 30784 0 1
// add_to_Vehicles ( un ) ;
30472: LD_VAR 0 2
30476: PPUSH
30477: CALL 31120 0 1
// add_to_Builds ( un ) ;
30481: LD_VAR 0 2
30485: PPUSH
30486: CALL 31212 0 1
// end ;
30490: PPOPN 2
30492: END
// on McRegistryResultChanges ( mcid , count , strength ) do var i ;
30493: LD_INT 0
30495: PPUSH
// begin if mcid = idAtt1 then
30496: LD_VAR 0 1
30500: PUSH
30501: LD_EXP 93
30505: EQUAL
30506: IFFALSE 30618
// begin if count = 0 then
30508: LD_VAR 0 2
30512: PUSH
30513: LD_INT 0
30515: EQUAL
30516: IFFALSE 30569
// begin for i in FilterUnitsInArea ( mc_attack , [ [ f_side , you ] ] ) do
30518: LD_ADDR_VAR 0 4
30522: PUSH
30523: LD_INT 26
30525: PPUSH
30526: LD_INT 22
30528: PUSH
30529: LD_EXP 1
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: EMPTY
30539: LIST
30540: PPUSH
30541: CALL_OW 70
30545: PUSH
30546: FOR_IN
30547: IFFALSE 30565
// PriorityAttack ( ai , i ) ;
30549: LD_EXP 6
30553: PPUSH
30554: LD_VAR 0 4
30558: PPUSH
30559: CALL_OW 470
30563: GO 30546
30565: POP
30566: POP
// end else
30567: GO 30618
// begin for i in FilterUnitsInArea ( mc_attack , [ [ f_side , you ] ] ) do
30569: LD_ADDR_VAR 0 4
30573: PUSH
30574: LD_INT 26
30576: PPUSH
30577: LD_INT 22
30579: PUSH
30580: LD_EXP 1
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: EMPTY
30590: LIST
30591: PPUSH
30592: CALL_OW 70
30596: PUSH
30597: FOR_IN
30598: IFFALSE 30616
// NormalAttack ( ai , i ) ;
30600: LD_EXP 6
30604: PPUSH
30605: LD_VAR 0 4
30609: PPUSH
30610: CALL_OW 472
30614: GO 30597
30616: POP
30617: POP
// end ; end ; end ;
30618: PPOPN 4
30620: END
// on McAttackOutOfFuel ( mcid , un ) do begin Attack := Attack diff un ;
30621: LD_ADDR_EXP 138
30625: PUSH
30626: LD_EXP 138
30630: PUSH
30631: LD_VAR 0 2
30635: DIFF
30636: ST_TO_ADDR
// while IsLive ( un ) and not IsInArea ( un , near_base ) do
30637: LD_VAR 0 2
30641: PPUSH
30642: CALL_OW 300
30646: PUSH
30647: LD_VAR 0 2
30651: PPUSH
30652: LD_INT 2
30654: PPUSH
30655: CALL_OW 308
30659: NOT
30660: AND
30661: IFFALSE 30684
// begin ComMoveToArea ( un , near_base ) ;
30663: LD_VAR 0 2
30667: PPUSH
30668: LD_INT 2
30670: PPUSH
30671: CALL_OW 113
// wait ( 0 0$2 ) ;
30675: LD_INT 70
30677: PPUSH
30678: CALL_OW 67
// end ;
30682: GO 30637
// end ;
30684: PPOPN 2
30686: END
// export function add_to ( un ) ; var i ; begin
30687: LD_INT 0
30689: PPUSH
30690: PPUSH
// for i in un do
30691: LD_ADDR_VAR 0 3
30695: PUSH
30696: LD_VAR 0 1
30700: PUSH
30701: FOR_IN
30702: IFFALSE 30777
// case GetType ( i ) of unit_human :
30704: LD_VAR 0 3
30708: PPUSH
30709: CALL_OW 247
30713: PUSH
30714: LD_INT 1
30716: DOUBLE
30717: EQUAL
30718: IFTRUE 30722
30720: GO 30734
30722: POP
// add_to_humans ( i ) ; unit_vehicle :
30723: LD_VAR 0 3
30727: PPUSH
30728: CALL 30784 0 1
30732: GO 30775
30734: LD_INT 2
30736: DOUBLE
30737: EQUAL
30738: IFTRUE 30742
30740: GO 30754
30742: POP
// add_to_vehicles ( i ) ; unit_building :
30743: LD_VAR 0 3
30747: PPUSH
30748: CALL 31120 0 1
30752: GO 30775
30754: LD_INT 3
30756: DOUBLE
30757: EQUAL
30758: IFTRUE 30762
30760: GO 30774
30762: POP
// add_to_builds ( i ) ; end ;
30763: LD_VAR 0 3
30767: PPUSH
30768: CALL 31212 0 1
30772: GO 30775
30774: POP
30775: GO 30701
30777: POP
30778: POP
// end ;
30779: LD_VAR 0 2
30783: RET
// export function add_to_humans ( un ) ; var i ; begin
30784: LD_INT 0
30786: PPUSH
30787: PPUSH
// if GetSide ( un ) = ai then
30788: LD_VAR 0 1
30792: PPUSH
30793: CALL_OW 255
30797: PUSH
30798: LD_EXP 6
30802: EQUAL
30803: IFFALSE 31115
// for i in un do
30805: LD_ADDR_VAR 0 3
30809: PUSH
30810: LD_VAR 0 1
30814: PUSH
30815: FOR_IN
30816: IFFALSE 31113
// begin case Getclass ( i ) of class_soldier :
30818: LD_VAR 0 3
30822: PPUSH
30823: CALL_OW 257
30827: PUSH
30828: LD_INT 1
30830: DOUBLE
30831: EQUAL
30832: IFTRUE 30836
30834: GO 30855
30836: POP
// sol := sol union i ; class_engineer :
30837: LD_ADDR_EXP 121
30841: PUSH
30842: LD_EXP 121
30846: PUSH
30847: LD_VAR 0 3
30851: UNION
30852: ST_TO_ADDR
30853: GO 30937
30855: LD_INT 2
30857: DOUBLE
30858: EQUAL
30859: IFTRUE 30863
30861: GO 30882
30863: POP
// eng := eng union i ; class_mechanic :
30864: LD_ADDR_EXP 123
30868: PUSH
30869: LD_EXP 123
30873: PUSH
30874: LD_VAR 0 3
30878: UNION
30879: ST_TO_ADDR
30880: GO 30937
30882: LD_INT 3
30884: DOUBLE
30885: EQUAL
30886: IFTRUE 30890
30888: GO 30909
30890: POP
// mec := mec union i ; class_scientistic :
30891: LD_ADDR_EXP 125
30895: PUSH
30896: LD_EXP 125
30900: PUSH
30901: LD_VAR 0 3
30905: UNION
30906: ST_TO_ADDR
30907: GO 30937
30909: LD_INT 4
30911: DOUBLE
30912: EQUAL
30913: IFTRUE 30917
30915: GO 30936
30917: POP
// sci := sci union i ; end ;
30918: LD_ADDR_EXP 127
30922: PUSH
30923: LD_EXP 127
30927: PUSH
30928: LD_VAR 0 3
30932: UNION
30933: ST_TO_ADDR
30934: GO 30937
30936: POP
// case GetTag ( i ) of 1 :
30937: LD_VAR 0 3
30941: PPUSH
30942: CALL_OW 110
30946: PUSH
30947: LD_INT 1
30949: DOUBLE
30950: EQUAL
30951: IFTRUE 30955
30953: GO 30974
30955: POP
// a1 := a1 union i ; 2 :
30956: LD_ADDR_EXP 133
30960: PUSH
30961: LD_EXP 133
30965: PUSH
30966: LD_VAR 0 3
30970: UNION
30971: ST_TO_ADDR
30972: GO 31111
30974: LD_INT 2
30976: DOUBLE
30977: EQUAL
30978: IFTRUE 30982
30980: GO 31001
30982: POP
// a2 := a2 union i ; 3 :
30983: LD_ADDR_EXP 134
30987: PUSH
30988: LD_EXP 134
30992: PUSH
30993: LD_VAR 0 3
30997: UNION
30998: ST_TO_ADDR
30999: GO 31111
31001: LD_INT 3
31003: DOUBLE
31004: EQUAL
31005: IFTRUE 31009
31007: GO 31028
31009: POP
// a3 := a3 union i ; 4 :
31010: LD_ADDR_EXP 135
31014: PUSH
31015: LD_EXP 135
31019: PUSH
31020: LD_VAR 0 3
31024: UNION
31025: ST_TO_ADDR
31026: GO 31111
31028: LD_INT 4
31030: DOUBLE
31031: EQUAL
31032: IFTRUE 31036
31034: GO 31055
31036: POP
// a4 := a4 union i ; 5 :
31037: LD_ADDR_EXP 136
31041: PUSH
31042: LD_EXP 136
31046: PUSH
31047: LD_VAR 0 3
31051: UNION
31052: ST_TO_ADDR
31053: GO 31111
31055: LD_INT 5
31057: DOUBLE
31058: EQUAL
31059: IFTRUE 31063
31061: GO 31082
31063: POP
// a5 := a5 union i ; else
31064: LD_ADDR_EXP 137
31068: PUSH
31069: LD_EXP 137
31073: PUSH
31074: LD_VAR 0 3
31078: UNION
31079: ST_TO_ADDR
31080: GO 31111
31082: POP
// begin a3 := a3 union i ;
31083: LD_ADDR_EXP 135
31087: PUSH
31088: LD_EXP 135
31092: PUSH
31093: LD_VAR 0 3
31097: UNION
31098: ST_TO_ADDR
// SetTag ( i , 3 ) ;
31099: LD_VAR 0 3
31103: PPUSH
31104: LD_INT 3
31106: PPUSH
31107: CALL_OW 109
// end ; end ; end ;
31111: GO 30815
31113: POP
31114: POP
// end ;
31115: LD_VAR 0 2
31119: RET
// export function add_to_vehicles ( un ) ; var i ; begin
31120: LD_INT 0
31122: PPUSH
31123: PPUSH
// for i in un do
31124: LD_ADDR_VAR 0 3
31128: PUSH
31129: LD_VAR 0 1
31133: PUSH
31134: FOR_IN
31135: IFFALSE 31205
// begin if GetSide ( un ) = ai then
31137: LD_VAR 0 1
31141: PPUSH
31142: CALL_OW 255
31146: PUSH
31147: LD_EXP 6
31151: EQUAL
31152: IFFALSE 31203
// if GetControl ( i ) = control_remote then
31154: LD_VAR 0 3
31158: PPUSH
31159: CALL_OW 263
31163: PUSH
31164: LD_INT 2
31166: EQUAL
31167: IFFALSE 31187
// begin attack := attack union i ;
31169: LD_ADDR_EXP 138
31173: PUSH
31174: LD_EXP 138
31178: PUSH
31179: LD_VAR 0 3
31183: UNION
31184: ST_TO_ADDR
// end else
31185: GO 31203
// begin defence := defence union i ;
31187: LD_ADDR_EXP 139
31191: PUSH
31192: LD_EXP 139
31196: PUSH
31197: LD_VAR 0 3
31201: UNION
31202: ST_TO_ADDR
// end ; end ;
31203: GO 31134
31205: POP
31206: POP
// end ;
31207: LD_VAR 0 2
31211: RET
// export function add_to_builds ( un ) ; var i , j , bt ; begin
31212: LD_INT 0
31214: PPUSH
31215: PPUSH
31216: PPUSH
31217: PPUSH
// for i in un do
31218: LD_ADDR_VAR 0 3
31222: PUSH
31223: LD_VAR 0 1
31227: PUSH
31228: FOR_IN
31229: IFFALSE 31814
// begin if GetSide ( un ) = ai then
31231: LD_VAR 0 1
31235: PPUSH
31236: CALL_OW 255
31240: PUSH
31241: LD_EXP 6
31245: EQUAL
31246: IFFALSE 31323
// for j in builds1 do
31248: LD_ADDR_VAR 0 4
31252: PUSH
31253: LD_EXP 104
31257: PUSH
31258: FOR_IN
31259: IFFALSE 31321
// if GetX ( i ) = j [ 2 ] and GetY ( i ) = j [ 3 ] then
31261: LD_VAR 0 3
31265: PPUSH
31266: CALL_OW 250
31270: PUSH
31271: LD_VAR 0 4
31275: PUSH
31276: LD_INT 2
31278: ARRAY
31279: EQUAL
31280: PUSH
31281: LD_VAR 0 3
31285: PPUSH
31286: CALL_OW 251
31290: PUSH
31291: LD_VAR 0 4
31295: PUSH
31296: LD_INT 3
31298: ARRAY
31299: EQUAL
31300: AND
31301: IFFALSE 31319
// b1 := b1 union i ;
31303: LD_ADDR_EXP 128
31307: PUSH
31308: LD_EXP 128
31312: PUSH
31313: LD_VAR 0 3
31317: UNION
31318: ST_TO_ADDR
31319: GO 31258
31321: POP
31322: POP
// for j in builds2 do
31323: LD_ADDR_VAR 0 4
31327: PUSH
31328: LD_EXP 105
31332: PUSH
31333: FOR_IN
31334: IFFALSE 31396
// if GetX ( i ) = j [ 2 ] and GetY ( i ) = j [ 3 ] then
31336: LD_VAR 0 3
31340: PPUSH
31341: CALL_OW 250
31345: PUSH
31346: LD_VAR 0 4
31350: PUSH
31351: LD_INT 2
31353: ARRAY
31354: EQUAL
31355: PUSH
31356: LD_VAR 0 3
31360: PPUSH
31361: CALL_OW 251
31365: PUSH
31366: LD_VAR 0 4
31370: PUSH
31371: LD_INT 3
31373: ARRAY
31374: EQUAL
31375: AND
31376: IFFALSE 31394
// b2 := b2 union i ;
31378: LD_ADDR_EXP 129
31382: PUSH
31383: LD_EXP 129
31387: PUSH
31388: LD_VAR 0 3
31392: UNION
31393: ST_TO_ADDR
31394: GO 31333
31396: POP
31397: POP
// for j in builds3 do
31398: LD_ADDR_VAR 0 4
31402: PUSH
31403: LD_EXP 106
31407: PUSH
31408: FOR_IN
31409: IFFALSE 31471
// if GetX ( i ) = j [ 2 ] and GetY ( i ) = j [ 3 ] then
31411: LD_VAR 0 3
31415: PPUSH
31416: CALL_OW 250
31420: PUSH
31421: LD_VAR 0 4
31425: PUSH
31426: LD_INT 2
31428: ARRAY
31429: EQUAL
31430: PUSH
31431: LD_VAR 0 3
31435: PPUSH
31436: CALL_OW 251
31440: PUSH
31441: LD_VAR 0 4
31445: PUSH
31446: LD_INT 3
31448: ARRAY
31449: EQUAL
31450: AND
31451: IFFALSE 31469
// b3 := b3 union i ;
31453: LD_ADDR_EXP 130
31457: PUSH
31458: LD_EXP 130
31462: PUSH
31463: LD_VAR 0 3
31467: UNION
31468: ST_TO_ADDR
31469: GO 31408
31471: POP
31472: POP
// for j in builds4 do
31473: LD_ADDR_VAR 0 4
31477: PUSH
31478: LD_EXP 107
31482: PUSH
31483: FOR_IN
31484: IFFALSE 31546
// if GetX ( i ) = j [ 2 ] and GetY ( i ) = j [ 3 ] then
31486: LD_VAR 0 3
31490: PPUSH
31491: CALL_OW 250
31495: PUSH
31496: LD_VAR 0 4
31500: PUSH
31501: LD_INT 2
31503: ARRAY
31504: EQUAL
31505: PUSH
31506: LD_VAR 0 3
31510: PPUSH
31511: CALL_OW 251
31515: PUSH
31516: LD_VAR 0 4
31520: PUSH
31521: LD_INT 3
31523: ARRAY
31524: EQUAL
31525: AND
31526: IFFALSE 31544
// b4 := b4 union i ;
31528: LD_ADDR_EXP 131
31532: PUSH
31533: LD_EXP 131
31537: PUSH
31538: LD_VAR 0 3
31542: UNION
31543: ST_TO_ADDR
31544: GO 31483
31546: POP
31547: POP
// for j in builds5 do
31548: LD_ADDR_VAR 0 4
31552: PUSH
31553: LD_EXP 108
31557: PUSH
31558: FOR_IN
31559: IFFALSE 31621
// if GetX ( i ) = j [ 2 ] and GetY ( i ) = j [ 3 ] then
31561: LD_VAR 0 3
31565: PPUSH
31566: CALL_OW 250
31570: PUSH
31571: LD_VAR 0 4
31575: PUSH
31576: LD_INT 2
31578: ARRAY
31579: EQUAL
31580: PUSH
31581: LD_VAR 0 3
31585: PPUSH
31586: CALL_OW 251
31590: PUSH
31591: LD_VAR 0 4
31595: PUSH
31596: LD_INT 3
31598: ARRAY
31599: EQUAL
31600: AND
31601: IFFALSE 31619
// b5 := b5 union i ;
31603: LD_ADDR_EXP 132
31607: PUSH
31608: LD_EXP 132
31612: PUSH
31613: LD_VAR 0 3
31617: UNION
31618: ST_TO_ADDR
31619: GO 31558
31621: POP
31622: POP
// bt := GetBType ( i ) ;
31623: LD_ADDR_VAR 0 5
31627: PUSH
31628: LD_VAR 0 3
31632: PPUSH
31633: CALL_OW 266
31637: ST_TO_ADDR
// if bt = b_barracks or bt = b_armoury or bt = b_bunker or bt = b_breastwork then
31638: LD_VAR 0 5
31642: PUSH
31643: LD_INT 5
31645: EQUAL
31646: PUSH
31647: LD_VAR 0 5
31651: PUSH
31652: LD_INT 4
31654: EQUAL
31655: OR
31656: PUSH
31657: LD_VAR 0 5
31661: PUSH
31662: LD_INT 32
31664: EQUAL
31665: OR
31666: PUSH
31667: LD_VAR 0 5
31671: PUSH
31672: LD_INT 31
31674: EQUAL
31675: OR
31676: IFFALSE 31694
// fort := fort union i ;
31678: LD_ADDR_EXP 119
31682: PUSH
31683: LD_EXP 119
31687: PUSH
31688: LD_VAR 0 3
31692: UNION
31693: ST_TO_ADDR
// if bt = b_lab or bt = b_lab_full or bt = b_lab_half then
31694: LD_VAR 0 5
31698: PUSH
31699: LD_INT 6
31701: EQUAL
31702: PUSH
31703: LD_VAR 0 5
31707: PUSH
31708: LD_INT 8
31710: EQUAL
31711: OR
31712: PUSH
31713: LD_VAR 0 5
31717: PUSH
31718: LD_INT 7
31720: EQUAL
31721: OR
31722: IFFALSE 31740
// lab := lab union i ;
31724: LD_ADDR_EXP 126
31728: PUSH
31729: LD_EXP 126
31733: PUSH
31734: LD_VAR 0 3
31738: UNION
31739: ST_TO_ADDR
// if bt = b_workshop or bt = b_factory then
31740: LD_VAR 0 5
31744: PUSH
31745: LD_INT 2
31747: EQUAL
31748: PUSH
31749: LD_VAR 0 5
31753: PUSH
31754: LD_INT 3
31756: EQUAL
31757: OR
31758: IFFALSE 31776
// fact := fact union i ;
31760: LD_ADDR_EXP 124
31764: PUSH
31765: LD_EXP 124
31769: PUSH
31770: LD_VAR 0 3
31774: UNION
31775: ST_TO_ADDR
// if bt = b_depot or bt = b_warehouse then
31776: LD_VAR 0 5
31780: PUSH
31781: LD_INT 0
31783: EQUAL
31784: PUSH
31785: LD_VAR 0 5
31789: PUSH
31790: LD_INT 1
31792: EQUAL
31793: OR
31794: IFFALSE 31812
// dep := dep union i ;
31796: LD_ADDR_EXP 122
31800: PUSH
31801: LD_EXP 122
31805: PUSH
31806: LD_VAR 0 3
31810: UNION
31811: ST_TO_ADDR
// end ;
31812: GO 31228
31814: POP
31815: POP
// end ;
31816: LD_VAR 0 2
31820: RET
// export function remove_from ( un ) ; var i ; begin
31821: LD_INT 0
31823: PPUSH
31824: PPUSH
// for i in un do
31825: LD_ADDR_VAR 0 3
31829: PUSH
31830: LD_VAR 0 1
31834: PUSH
31835: FOR_IN
31836: IFFALSE 31911
// case GetType ( i ) of unit_human :
31838: LD_VAR 0 3
31842: PPUSH
31843: CALL_OW 247
31847: PUSH
31848: LD_INT 1
31850: DOUBLE
31851: EQUAL
31852: IFTRUE 31856
31854: GO 31868
31856: POP
// remove_from_humans ( i ) ; unit_vehicle :
31857: LD_VAR 0 3
31861: PPUSH
31862: CALL 32104 0 1
31866: GO 31909
31868: LD_INT 2
31870: DOUBLE
31871: EQUAL
31872: IFTRUE 31876
31874: GO 31888
31876: POP
// remove_from_vehicles ( i ) ; unit_building :
31877: LD_VAR 0 3
31881: PPUSH
31882: CALL 32274 0 1
31886: GO 31909
31888: LD_INT 3
31890: DOUBLE
31891: EQUAL
31892: IFTRUE 31896
31894: GO 31908
31896: POP
// remove_from_builds ( i ) ; end ;
31897: LD_VAR 0 3
31901: PPUSH
31902: CALL 31918 0 1
31906: GO 31909
31908: POP
31909: GO 31835
31911: POP
31912: POP
// end ;
31913: LD_VAR 0 2
31917: RET
// export function remove_from_builds ( un ) ; var i ; begin
31918: LD_INT 0
31920: PPUSH
31921: PPUSH
// for i in un do
31922: LD_ADDR_VAR 0 3
31926: PUSH
31927: LD_VAR 0 1
31931: PUSH
31932: FOR_IN
31933: IFFALSE 32097
// begin fact := fact diff i ;
31935: LD_ADDR_EXP 124
31939: PUSH
31940: LD_EXP 124
31944: PUSH
31945: LD_VAR 0 3
31949: DIFF
31950: ST_TO_ADDR
// fort := fort diff i ;
31951: LD_ADDR_EXP 119
31955: PUSH
31956: LD_EXP 119
31960: PUSH
31961: LD_VAR 0 3
31965: DIFF
31966: ST_TO_ADDR
// lab := lab diff i ;
31967: LD_ADDR_EXP 126
31971: PUSH
31972: LD_EXP 126
31976: PUSH
31977: LD_VAR 0 3
31981: DIFF
31982: ST_TO_ADDR
// dep := dep diff i ;
31983: LD_ADDR_EXP 122
31987: PUSH
31988: LD_EXP 122
31992: PUSH
31993: LD_VAR 0 3
31997: DIFF
31998: ST_TO_ADDR
// ctrl := ctrl diff i ;
31999: LD_ADDR_EXP 120
32003: PUSH
32004: LD_EXP 120
32008: PUSH
32009: LD_VAR 0 3
32013: DIFF
32014: ST_TO_ADDR
// b1 := b1 diff i ;
32015: LD_ADDR_EXP 128
32019: PUSH
32020: LD_EXP 128
32024: PUSH
32025: LD_VAR 0 3
32029: DIFF
32030: ST_TO_ADDR
// b2 := b2 diff i ;
32031: LD_ADDR_EXP 129
32035: PUSH
32036: LD_EXP 129
32040: PUSH
32041: LD_VAR 0 3
32045: DIFF
32046: ST_TO_ADDR
// b3 := b3 diff i ;
32047: LD_ADDR_EXP 130
32051: PUSH
32052: LD_EXP 130
32056: PUSH
32057: LD_VAR 0 3
32061: DIFF
32062: ST_TO_ADDR
// b4 := b4 diff i ;
32063: LD_ADDR_EXP 131
32067: PUSH
32068: LD_EXP 131
32072: PUSH
32073: LD_VAR 0 3
32077: DIFF
32078: ST_TO_ADDR
// b5 := b5 diff i ;
32079: LD_ADDR_EXP 132
32083: PUSH
32084: LD_EXP 132
32088: PUSH
32089: LD_VAR 0 3
32093: DIFF
32094: ST_TO_ADDR
// end ;
32095: GO 31932
32097: POP
32098: POP
// end ;
32099: LD_VAR 0 2
32103: RET
// export function remove_from_humans ( un ) ; var i ; begin
32104: LD_INT 0
32106: PPUSH
32107: PPUSH
// for i in un do
32108: LD_ADDR_VAR 0 3
32112: PUSH
32113: LD_VAR 0 1
32117: PUSH
32118: FOR_IN
32119: IFFALSE 32267
// begin sol := sol diff i ;
32121: LD_ADDR_EXP 121
32125: PUSH
32126: LD_EXP 121
32130: PUSH
32131: LD_VAR 0 3
32135: DIFF
32136: ST_TO_ADDR
// eng := eng diff i ;
32137: LD_ADDR_EXP 123
32141: PUSH
32142: LD_EXP 123
32146: PUSH
32147: LD_VAR 0 3
32151: DIFF
32152: ST_TO_ADDR
// mec := mec diff i ;
32153: LD_ADDR_EXP 125
32157: PUSH
32158: LD_EXP 125
32162: PUSH
32163: LD_VAR 0 3
32167: DIFF
32168: ST_TO_ADDR
// sci := sci diff i ;
32169: LD_ADDR_EXP 127
32173: PUSH
32174: LD_EXP 127
32178: PUSH
32179: LD_VAR 0 3
32183: DIFF
32184: ST_TO_ADDR
// a1 := a1 diff i ;
32185: LD_ADDR_EXP 133
32189: PUSH
32190: LD_EXP 133
32194: PUSH
32195: LD_VAR 0 3
32199: DIFF
32200: ST_TO_ADDR
// a2 := a2 diff i ;
32201: LD_ADDR_EXP 134
32205: PUSH
32206: LD_EXP 134
32210: PUSH
32211: LD_VAR 0 3
32215: DIFF
32216: ST_TO_ADDR
// a3 := a3 diff i ;
32217: LD_ADDR_EXP 135
32221: PUSH
32222: LD_EXP 135
32226: PUSH
32227: LD_VAR 0 3
32231: DIFF
32232: ST_TO_ADDR
// a4 := a4 diff i ;
32233: LD_ADDR_EXP 136
32237: PUSH
32238: LD_EXP 136
32242: PUSH
32243: LD_VAR 0 3
32247: DIFF
32248: ST_TO_ADDR
// a5 := a5 diff i ;
32249: LD_ADDR_EXP 137
32253: PUSH
32254: LD_EXP 137
32258: PUSH
32259: LD_VAR 0 3
32263: DIFF
32264: ST_TO_ADDR
// end ;
32265: GO 32118
32267: POP
32268: POP
// end ;
32269: LD_VAR 0 2
32273: RET
// export function remove_from_vehicles ( un ) ; var i ; begin
32274: LD_INT 0
32276: PPUSH
32277: PPUSH
// for i in un do
32278: LD_ADDR_VAR 0 3
32282: PUSH
32283: LD_VAR 0 1
32287: PUSH
32288: FOR_IN
32289: IFFALSE 32325
// begin attack := attack diff i ;
32291: LD_ADDR_EXP 138
32295: PUSH
32296: LD_EXP 138
32300: PUSH
32301: LD_VAR 0 3
32305: DIFF
32306: ST_TO_ADDR
// defence := defence diff i ;
32307: LD_ADDR_EXP 139
32311: PUSH
32312: LD_EXP 139
32316: PUSH
32317: LD_VAR 0 3
32321: DIFF
32322: ST_TO_ADDR
// end ;
32323: GO 32288
32325: POP
32326: POP
// end ; end_of_file
32327: LD_VAR 0 2
32331: RET
// export function zachranka ( un ) ; begin
32332: LD_INT 0
32334: PPUSH
// if not FilterAllUnits ( [ [ f_not , [ f_side , ai ] ] , [ f_dist , un , 24 ] ] ) then
32335: LD_INT 3
32337: PUSH
32338: LD_INT 22
32340: PUSH
32341: LD_EXP 6
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 91
32356: PUSH
32357: LD_VAR 0 1
32361: PUSH
32362: LD_INT 24
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: LIST
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PPUSH
32374: CALL_OW 69
32378: NOT
32379: IFFALSE 32452
// begin ComHeal ( UnitFilter ( sci , [ [ f_dist , un , 30 ] ] ) , un ) ;
32381: LD_EXP 127
32385: PPUSH
32386: LD_INT 91
32388: PUSH
32389: LD_VAR 0 1
32393: PUSH
32394: LD_INT 30
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: LIST
32401: PUSH
32402: EMPTY
32403: LIST
32404: PPUSH
32405: CALL_OW 72
32409: PPUSH
32410: LD_VAR 0 1
32414: PPUSH
32415: CALL_OW 128
// AddComReturn ( UnitFilter ( sci , [ [ f_dist , un , 30 ] ] ) ) ;
32419: LD_EXP 127
32423: PPUSH
32424: LD_INT 91
32426: PUSH
32427: LD_VAR 0 1
32431: PUSH
32432: LD_INT 30
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: LIST
32439: PUSH
32440: EMPTY
32441: LIST
32442: PPUSH
32443: CALL_OW 72
32447: PPUSH
32448: CALL_OW 204
// end ; end ; end_of_file
32452: LD_VAR 0 2
32456: RET
// var padlo ; function buch_crate ; var a , h , c ; begin
32457: LD_INT 0
32459: PPUSH
32460: PPUSH
32461: PPUSH
32462: PPUSH
// a := IsInUnit ( Burlak ) ;
32463: LD_ADDR_VAR 0 2
32467: PUSH
32468: LD_EXP 61
32472: PPUSH
32473: CALL_OW 310
32477: ST_TO_ADDR
// if not a then
32478: LD_VAR 0 2
32482: NOT
32483: IFFALSE 32495
// a := Burlak ;
32485: LD_ADDR_VAR 0 2
32489: PUSH
32490: LD_EXP 61
32494: ST_TO_ADDR
// repeat c := c + 1 ;
32495: LD_ADDR_VAR 0 4
32499: PUSH
32500: LD_VAR 0 4
32504: PUSH
32505: LD_INT 1
32507: PLUS
32508: ST_TO_ADDR
// h := RandHexArea ( bedny , false ) ;
32509: LD_ADDR_VAR 0 3
32513: PUSH
32514: LD_INT 29
32516: PPUSH
32517: LD_INT 0
32519: PPUSH
32520: CALL_OW 16
32524: ST_TO_ADDR
// until c > 100 or GetDistUnitXY ( Burlak , h [ 1 ] , h [ 2 ] ) < 25 or GetDistUnitArea ( Burlak , bedny ) > 15 ;
32525: LD_VAR 0 4
32529: PUSH
32530: LD_INT 100
32532: GREATER
32533: PUSH
32534: LD_EXP 61
32538: PPUSH
32539: LD_VAR 0 3
32543: PUSH
32544: LD_INT 1
32546: ARRAY
32547: PPUSH
32548: LD_VAR 0 3
32552: PUSH
32553: LD_INT 2
32555: ARRAY
32556: PPUSH
32557: CALL_OW 297
32561: PUSH
32562: LD_INT 25
32564: LESS
32565: OR
32566: PUSH
32567: LD_EXP 61
32571: PPUSH
32572: LD_INT 29
32574: PPUSH
32575: CALL_OW 299
32579: PUSH
32580: LD_INT 15
32582: GREATER
32583: OR
32584: IFFALSE 32495
// CreateCratesXY ( 5 , h [ 1 ] , h [ 2 ] , true ) ;
32586: LD_INT 5
32588: PPUSH
32589: LD_VAR 0 3
32593: PUSH
32594: LD_INT 1
32596: ARRAY
32597: PPUSH
32598: LD_VAR 0 3
32602: PUSH
32603: LD_INT 2
32605: ARRAY
32606: PPUSH
32607: LD_INT 1
32609: PPUSH
32610: CALL_OW 54
// padlo := padlo + 1 ;
32614: LD_ADDR_LOC 24
32618: PUSH
32619: LD_LOC 24
32623: PUSH
32624: LD_INT 1
32626: PLUS
32627: ST_TO_ADDR
// end ;
32628: LD_VAR 0 1
32632: RET
// every 0 0$53 do
32633: GO 32635
32635: DISABLE
// begin if [ ( padlo < 4 ) , ( padlo < 4 ) , ( padlo < 3 ) ] [ difficulty ] then
32636: LD_LOC 24
32640: PUSH
32641: LD_INT 4
32643: LESS
32644: PUSH
32645: LD_LOC 24
32649: PUSH
32650: LD_INT 4
32652: LESS
32653: PUSH
32654: LD_LOC 24
32658: PUSH
32659: LD_INT 3
32661: LESS
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: LIST
32667: PUSH
32668: LD_OWVAR 67
32672: ARRAY
32673: IFFALSE 32745
// case ( tick div 1 1$0 ) of 0 :
32675: LD_OWVAR 1
32679: PUSH
32680: LD_INT 2100
32682: DIV
32683: PUSH
32684: LD_INT 0
32686: DOUBLE
32687: EQUAL
32688: IFTRUE 32692
32690: GO 32699
32692: POP
// buch_crate ; 3 :
32693: CALL 32457 0 0
32697: GO 32745
32699: LD_INT 3
32701: DOUBLE
32702: EQUAL
32703: IFTRUE 32707
32705: GO 32714
32707: POP
// buch_crate ; 7 :
32708: CALL 32457 0 0
32712: GO 32745
32714: LD_INT 7
32716: DOUBLE
32717: EQUAL
32718: IFTRUE 32722
32720: GO 32729
32722: POP
// buch_crate ; 12 :
32723: CALL 32457 0 0
32727: GO 32745
32729: LD_INT 12
32731: DOUBLE
32732: EQUAL
32733: IFTRUE 32737
32735: GO 32744
32737: POP
// buch_crate ; end ;
32738: CALL 32457 0 0
32742: GO 32745
32744: POP
// if [ ( padlo < 4 ) , ( padlo < 4 ) , ( padlo < 3 ) ] [ difficulty ] then
32745: LD_LOC 24
32749: PUSH
32750: LD_INT 4
32752: LESS
32753: PUSH
32754: LD_LOC 24
32758: PUSH
32759: LD_INT 4
32761: LESS
32762: PUSH
32763: LD_LOC 24
32767: PUSH
32768: LD_INT 3
32770: LESS
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: LIST
32776: PUSH
32777: LD_OWVAR 67
32781: ARRAY
32782: IFFALSE 32785
// enable ;
32784: ENABLE
// end ;
32785: END
// every 0 0$5 do
32786: GO 32788
32788: DISABLE
// begin if [ ( padlo < 4 ) , ( padlo < 4 ) , ( padlo < 3 ) ] [ difficulty ] then
32789: LD_LOC 24
32793: PUSH
32794: LD_INT 4
32796: LESS
32797: PUSH
32798: LD_LOC 24
32802: PUSH
32803: LD_INT 4
32805: LESS
32806: PUSH
32807: LD_LOC 24
32811: PUSH
32812: LD_INT 3
32814: LESS
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: LIST
32820: PUSH
32821: LD_OWVAR 67
32825: ARRAY
32826: IFFALSE 32948
// case true of GetTechProgress ( tech_MatPred , you ) > 95 :
32828: LD_INT 1
32830: PUSH
32831: LD_INT 9
32833: PPUSH
32834: LD_EXP 1
32838: PPUSH
32839: CALL_OW 326
32843: PUSH
32844: LD_INT 95
32846: GREATER
32847: DOUBLE
32848: EQUAL
32849: IFTRUE 32853
32851: GO 32860
32853: POP
// buch_crate ; GetTechProgress ( tech_MatPred , you ) > 70 :
32854: CALL 32457 0 0
32858: GO 32948
32860: LD_INT 9
32862: PPUSH
32863: LD_EXP 1
32867: PPUSH
32868: CALL_OW 326
32872: PUSH
32873: LD_INT 70
32875: GREATER
32876: DOUBLE
32877: EQUAL
32878: IFTRUE 32882
32880: GO 32889
32882: POP
// buch_crate ; GetTechProgress ( tech_MatPred , you ) > 40 :
32883: CALL 32457 0 0
32887: GO 32948
32889: LD_INT 9
32891: PPUSH
32892: LD_EXP 1
32896: PPUSH
32897: CALL_OW 326
32901: PUSH
32902: LD_INT 40
32904: GREATER
32905: DOUBLE
32906: EQUAL
32907: IFTRUE 32911
32909: GO 32918
32911: POP
// buch_crate ; GetTechProgress ( tech_MatPred , you ) > 1 :
32912: CALL 32457 0 0
32916: GO 32948
32918: LD_INT 9
32920: PPUSH
32921: LD_EXP 1
32925: PPUSH
32926: CALL_OW 326
32930: PUSH
32931: LD_INT 1
32933: GREATER
32934: DOUBLE
32935: EQUAL
32936: IFTRUE 32940
32938: GO 32947
32940: POP
// buch_crate ; end ;
32941: CALL 32457 0 0
32945: GO 32948
32947: POP
// if [ ( padlo < 4 ) , ( padlo < 4 ) , ( padlo < 3 ) ] [ difficulty ] then
32948: LD_LOC 24
32952: PUSH
32953: LD_INT 4
32955: LESS
32956: PUSH
32957: LD_LOC 24
32961: PUSH
32962: LD_INT 4
32964: LESS
32965: PUSH
32966: LD_LOC 24
32970: PUSH
32971: LD_INT 3
32973: LESS
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: LIST
32979: PUSH
32980: LD_OWVAR 67
32984: ARRAY
32985: IFFALSE 32988
// enable ;
32987: ENABLE
// end ; end_of_file
32988: END
// every 0 0$2 + 0 0$0.1 do
32989: GO 32991
32991: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) > FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) then
32992: LD_INT 22
32994: PUSH
32995: LD_INT 3
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 2
33004: PUSH
33005: LD_INT 25
33007: PUSH
33008: LD_INT 12
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 25
33017: PUSH
33018: LD_INT 16
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 25
33027: PUSH
33028: LD_INT 15
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 25
33037: PUSH
33038: LD_INT 17
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PPUSH
33056: CALL_OW 69
33060: PUSH
33061: LD_INT 22
33063: PUSH
33064: LD_INT 3
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 21
33073: PUSH
33074: LD_INT 1
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 3
33083: PUSH
33084: LD_INT 2
33086: PUSH
33087: LD_INT 25
33089: PUSH
33090: LD_INT 12
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 25
33099: PUSH
33100: LD_INT 16
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 25
33109: PUSH
33110: LD_INT 15
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 25
33119: PUSH
33120: LD_INT 17
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: LIST
33142: PPUSH
33143: CALL_OW 69
33147: GREATER
33148: IFFALSE 33159
// begin SetAchievement ( ACH_POTA ) ;
33150: LD_STRING ACH_POTA
33152: PPUSH
33153: CALL_OW 543
// exit ;
33157: GO 33160
// end ; enable ;
33159: ENABLE
// end ;
33160: END
// export function SA_SaveVsevolod ; begin
33161: LD_INT 0
33163: PPUSH
// SetAchievement ( ACH_BIA ) ;
33164: LD_STRING ACH_BIA
33166: PPUSH
33167: CALL_OW 543
// end ;
33171: LD_VAR 0 1
33175: RET
// export function SA_NotSaveVsevolod ; begin
33176: LD_INT 0
33178: PPUSH
// SetAchievement ( ACH_BLO ) ;
33179: LD_STRING ACH_BLO
33181: PPUSH
33182: CALL_OW 543
// end ; end_of_file
33186: LD_VAR 0 1
33190: RET
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
33191: LD_INT 0
33193: PPUSH
33194: PPUSH
// if not missionNumber then
33195: LD_VAR 0 2
33199: NOT
33200: IFFALSE 33204
// exit ;
33202: GO 33334
// achiv := false ;
33204: LD_ADDR_VAR 0 7
33208: PUSH
33209: LD_INT 0
33211: ST_TO_ADDR
// case campaignNumber of 1 :
33212: LD_VAR 0 1
33216: PUSH
33217: LD_INT 1
33219: DOUBLE
33220: EQUAL
33221: IFTRUE 33225
33223: GO 33236
33225: POP
// achiv := ACH_GOTA ; 2 :
33226: LD_ADDR_VAR 0 7
33230: PUSH
33231: LD_STRING ACH_GOTA
33233: ST_TO_ADDR
33234: GO 33286
33236: LD_INT 2
33238: DOUBLE
33239: EQUAL
33240: IFTRUE 33244
33242: GO 33247
33244: POP
// ; 3 :
33245: GO 33286
33247: LD_INT 3
33249: DOUBLE
33250: EQUAL
33251: IFTRUE 33255
33253: GO 33266
33255: POP
// achiv := ACH_MOTSU ; 4 :
33256: LD_ADDR_VAR 0 7
33260: PUSH
33261: LD_STRING ACH_MOTSU
33263: ST_TO_ADDR
33264: GO 33286
33266: LD_INT 4
33268: DOUBLE
33269: EQUAL
33270: IFTRUE 33274
33272: GO 33285
33274: POP
// achiv := ACH_LOP ; end ;
33275: LD_ADDR_VAR 0 7
33279: PUSH
33280: LD_STRING ACH_LOP
33282: ST_TO_ADDR
33283: GO 33286
33285: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
33286: LD_OWVAR 67
33290: PUSH
33291: LD_INT 3
33293: EQUAL
33294: PUSH
33295: LD_VAR 0 7
33299: AND
33300: PUSH
33301: LD_VAR 0 3
33305: AND
33306: PUSH
33307: LD_VAR 0 4
33311: AND
33312: PUSH
33313: LD_VAR 0 5
33317: AND
33318: IFFALSE 33334
// SetAchievementEX ( achiv , missionNumber ) ;
33320: LD_VAR 0 7
33324: PPUSH
33325: LD_VAR 0 2
33329: PPUSH
33330: CALL_OW 564
// end ;
33334: LD_VAR 0 6
33338: RET
// export function SA_BehemothConstructed ; begin
33339: LD_INT 0
33341: PPUSH
// SetAchievement ( ACH_SMC ) ;
33342: LD_STRING ACH_SMC
33344: PPUSH
33345: CALL_OW 543
// end ;
33349: LD_VAR 0 1
33353: RET
