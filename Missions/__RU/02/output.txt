// export You , Amici , Rusi , You2 , Rusi2 , You3 , NoLosses ; export belkov_returns , belkov_american_clash ; export belkovSave ; starting begin InitVars ;
   0: CALL 1588 0 0
// disable_prediction = true ;
   4: LD_ADDR_OWVAR 50
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// debug_strings = [ ] ;
  12: LD_ADDR_OWVAR 48
  16: PUSH
  17: EMPTY
  18: ST_TO_ADDR
// RandomizeAll ;
  19: CALL_OW 11
// InitHc ;
  23: CALL_OW 19
// InitUc ;
  27: CALL_OW 18
// InitVc ;
  31: CALL_OW 20
// You = 3 ;
  35: LD_ADDR_EXP 1
  39: PUSH
  40: LD_INT 3
  42: ST_TO_ADDR
// Rusi = You ;
  43: LD_ADDR_EXP 3
  47: PUSH
  48: LD_EXP 1
  52: ST_TO_ADDR
// Amici = 1 ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_INT 1
  60: ST_TO_ADDR
// You2 = 6 ;
  61: LD_ADDR_EXP 4
  65: PUSH
  66: LD_INT 6
  68: ST_TO_ADDR
// You3 = 5 ;
  69: LD_ADDR_EXP 6
  73: PUSH
  74: LD_INT 5
  76: ST_TO_ADDR
// Rusi2 = You2 ;
  77: LD_ADDR_EXP 5
  81: PUSH
  82: LD_EXP 4
  86: ST_TO_ADDR
// NoLosses := true ;
  87: LD_ADDR_EXP 7
  91: PUSH
  92: LD_INT 1
  94: ST_TO_ADDR
// belkovSave = false ;
  95: LD_ADDR_EXP 10
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// belkov_returns = false ;
 103: LD_ADDR_EXP 8
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// belkov_american_clash = false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// set_difficulty ;
 119: CALL 5174 0 0
// load_postav ;
 123: CALL 1430 0 0
// create_rusi_navic ;
 127: CALL 16628 0 0
// amici_breast ;
 131: CALL 3837 0 0
// create_amici_past ;
 135: CALL 4068 0 0
// create_amici_staveni_w ;
 139: CALL 4214 0 0
// create_utok_na_belkova ;
 143: CALL 4451 0 0
// create_vojaci_zacatek ;
 147: CALL 4710 0 0
// uklid_rusu ;
 151: CALL 13582 0 0
// InGameOn ;
 155: CALL_OW 8
// ChangeSideFog ( You , You2 ) ;
 159: LD_EXP 1
 163: PPUSH
 164: LD_EXP 4
 168: PPUSH
 169: CALL_OW 343
// InGameOn ;
 173: CALL_OW 8
// CenterOnXY ( 117 , 101 ) ;
 177: LD_INT 117
 179: PPUSH
 180: LD_INT 101
 182: PPUSH
 183: CALL_OW 84
// end ;
 187: END
// on UnitDestroyed ( un ) do begin if un = bur then
 188: LD_VAR 0 1
 192: PUSH
 193: LD_EXP 50
 197: EQUAL
 198: IFFALSE 207
// YouLost ( Burlak ) ;
 200: LD_STRING Burlak
 202: PPUSH
 203: CALL_OW 104
// enable ;
 207: ENABLE
// end ;
 208: PPOPN 1
 210: END
// on HumanDestroyed ( un , side , nat , x , y , dir , sex , cl ) do begin if ( side = You ) then
 211: LD_VAR 0 2
 215: PUSH
 216: LD_EXP 1
 220: EQUAL
 221: IFFALSE 231
// NoLosses := false ;
 223: LD_ADDR_EXP 7
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// end ;
 231: PPOPN 8
 233: END
// export function konec_mise_utok ; begin
 234: LD_INT 0
 236: PPUSH
// YouLost ( SelfAttack ) ;
 237: LD_STRING SelfAttack
 239: PPUSH
 240: CALL_OW 104
// end ;
 244: LD_VAR 0 1
 248: RET
// export function konec_mise ; var i , pom , pom1 ; var zivi ; var drv ; var a , b , c , d , e , f ; var budovy ; var material ; var bw ; var all_lidi ; var medal1 , medal2 , medal3 ; var lidi ; begin
 249: LD_INT 0
 251: PPUSH
 252: PPUSH
 253: PPUSH
 254: PPUSH
 255: PPUSH
 256: PPUSH
 257: PPUSH
 258: PPUSH
 259: PPUSH
 260: PPUSH
 261: PPUSH
 262: PPUSH
 263: PPUSH
 264: PPUSH
 265: PPUSH
 266: PPUSH
 267: PPUSH
 268: PPUSH
 269: PPUSH
 270: PPUSH
// medal1 := false ;
 271: LD_ADDR_VAR 0 17
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// medal2 := false ;
 279: LD_ADDR_VAR 0 18
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// medal3 := false ;
 287: LD_ADDR_VAR 0 19
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// DisableExclamations ;
 295: CALL_OW 474
// gained_medals := [ ] ;
 299: LD_ADDR_OWVAR 61
 303: PUSH
 304: EMPTY
 305: ST_TO_ADDR
// missing_medals := [ ] ;
 306: LD_ADDR_OWVAR 62
 310: PUSH
 311: EMPTY
 312: ST_TO_ADDR
// zivi = 0 ;
 313: LD_ADDR_VAR 0 5
 317: PUSH
 318: LD_INT 0
 320: ST_TO_ADDR
// if NoLosses then
 321: LD_EXP 7
 325: IFFALSE 347
// begin medal1 := true ;
 327: LD_ADDR_VAR 0 17
 331: PUSH
 332: LD_INT 1
 334: ST_TO_ADDR
// AddMedal ( NoLosses , 1 ) ;
 335: LD_STRING NoLosses
 337: PPUSH
 338: LD_INT 1
 340: PPUSH
 341: CALL_OW 101
// end else
 345: GO 358
// AddMedal ( NoLosses , - 1 ) ;
 347: LD_STRING NoLosses
 349: PPUSH
 350: LD_INT 1
 352: NEG
 353: PPUSH
 354: CALL_OW 101
// if BelkovFreed then
 358: LD_EXP 16
 362: IFFALSE 453
// if IsOK ( bel ) then
 364: LD_EXP 52
 368: PPUSH
 369: CALL_OW 302
 373: IFFALSE 395
// begin medal2 := true ;
 375: LD_ADDR_VAR 0 18
 379: PUSH
 380: LD_INT 1
 382: ST_TO_ADDR
// AddMedal ( Belkov , 1 ) ;
 383: LD_STRING Belkov
 385: PPUSH
 386: LD_INT 1
 388: PPUSH
 389: CALL_OW 101
// end else
 393: GO 451
// if UnitFilter ( BelkovComp , [ f_OK ] ) + 0 > 0 then
 395: LD_EXP 17
 399: PPUSH
 400: LD_INT 50
 402: PUSH
 403: EMPTY
 404: LIST
 405: PPUSH
 406: CALL_OW 72
 410: PUSH
 411: LD_INT 0
 413: PLUS
 414: PUSH
 415: LD_INT 0
 417: GREATER
 418: IFFALSE 440
// begin medal2 := true ;
 420: LD_ADDR_VAR 0 18
 424: PUSH
 425: LD_INT 1
 427: ST_TO_ADDR
// AddMedal ( Belkov , 2 ) ;
 428: LD_STRING Belkov
 430: PPUSH
 431: LD_INT 2
 433: PPUSH
 434: CALL_OW 101
// end else
 438: GO 451
// AddMedal ( Belkov , - 3 ) else
 440: LD_STRING Belkov
 442: PPUSH
 443: LD_INT 3
 445: NEG
 446: PPUSH
 447: CALL_OW 101
 451: GO 493
// if objBelkov and belkovSave = false then
 453: LD_EXP 28
 457: PUSH
 458: LD_EXP 10
 462: PUSH
 463: LD_INT 0
 465: EQUAL
 466: AND
 467: IFFALSE 482
// AddMedal ( Belkov , - 2 ) else
 469: LD_STRING Belkov
 471: PPUSH
 472: LD_INT 2
 474: NEG
 475: PPUSH
 476: CALL_OW 101
 480: GO 493
// AddMedal ( Belkov , - 1 ) ;
 482: LD_STRING Belkov
 484: PPUSH
 485: LD_INT 1
 487: NEG
 488: PPUSH
 489: CALL_OW 101
// case stav_utoku of 1 :
 493: LD_EXP 59
 497: PUSH
 498: LD_INT 1
 500: DOUBLE
 501: EQUAL
 502: IFTRUE 506
 504: GO 527
 506: POP
// begin medal3 := true ;
 507: LD_ADDR_VAR 0 19
 511: PUSH
 512: LD_INT 1
 514: ST_TO_ADDR
// AddMedal ( Initiative , 1 ) ;
 515: LD_STRING Initiative
 517: PPUSH
 518: LD_INT 1
 520: PPUSH
 521: CALL_OW 101
// end ; 2 :
 525: GO 590
 527: LD_INT 2
 529: DOUBLE
 530: EQUAL
 531: IFTRUE 535
 533: GO 549
 535: POP
// AddMedal ( Initiative , - 2 ) ; 3 :
 536: LD_STRING Initiative
 538: PPUSH
 539: LD_INT 2
 541: NEG
 542: PPUSH
 543: CALL_OW 101
 547: GO 590
 549: LD_INT 3
 551: DOUBLE
 552: EQUAL
 553: IFTRUE 557
 555: GO 571
 557: POP
// AddMedal ( Initiative , - 1 ) ; else
 558: LD_STRING Initiative
 560: PPUSH
 561: LD_INT 1
 563: NEG
 564: PPUSH
 565: CALL_OW 101
 569: GO 590
 571: POP
// begin medal3 := true ;
 572: LD_ADDR_VAR 0 19
 576: PUSH
 577: LD_INT 1
 579: ST_TO_ADDR
// AddMedal ( Initiative , 1 ) ;
 580: LD_STRING Initiative
 582: PPUSH
 583: LD_INT 1
 585: PPUSH
 586: CALL_OW 101
// end ; end ; SA_EndMission ( 3 , 2 , medal1 , medal2 , medal3 ) ;
 590: LD_INT 3
 592: PPUSH
 593: LD_INT 2
 595: PPUSH
 596: LD_VAR 0 17
 600: PPUSH
 601: LD_VAR 0 18
 605: PPUSH
 606: LD_VAR 0 19
 610: PPUSH
 611: CALL 20225 0 5
// GiveMedals ( Main ) ;
 615: LD_STRING Main
 617: PPUSH
 618: CALL_OW 102
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
 622: LD_ADDR_VAR 0 3
 626: PUSH
 627: LD_INT 22
 629: PUSH
 630: LD_EXP 1
 634: PUSH
 635: EMPTY
 636: LIST
 637: LIST
 638: PUSH
 639: LD_INT 21
 641: PUSH
 642: LD_INT 1
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PPUSH
 653: CALL_OW 69
 657: ST_TO_ADDR
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
 658: LD_ADDR_VAR 0 4
 662: PUSH
 663: LD_INT 22
 665: PUSH
 666: LD_EXP 1
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 21
 677: PUSH
 678: LD_INT 2
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PPUSH
 689: CALL_OW 69
 693: ST_TO_ADDR
// for i in pom1 do
 694: LD_ADDR_VAR 0 2
 698: PUSH
 699: LD_VAR 0 4
 703: PUSH
 704: FOR_IN
 705: IFFALSE 764
// if IsDrivenBy ( i ) then
 707: LD_VAR 0 2
 711: PPUSH
 712: CALL_OW 311
 716: IFFALSE 762
// begin drv = IsDrivenBy ( i ) ;
 718: LD_ADDR_VAR 0 6
 722: PUSH
 723: LD_VAR 0 2
 727: PPUSH
 728: CALL_OW 311
 732: ST_TO_ADDR
// if not ( drv in pom ) then
 733: LD_VAR 0 6
 737: PUSH
 738: LD_VAR 0 3
 742: IN
 743: NOT
 744: IFFALSE 762
// pom = pom ^ drv ;
 746: LD_ADDR_VAR 0 3
 750: PUSH
 751: LD_VAR 0 3
 755: PUSH
 756: LD_VAR 0 6
 760: ADD
 761: ST_TO_ADDR
// end ;
 762: GO 704
 764: POP
 765: POP
// all_lidi = pom ;
 766: LD_ADDR_VAR 0 16
 770: PUSH
 771: LD_VAR 0 3
 775: ST_TO_ADDR
// RewardPeople ( all_lidi ) ;
 776: LD_VAR 0 16
 780: PPUSH
 781: CALL_OW 43
// SaveCharacters ( bur , Burlak ) ;
 785: LD_EXP 50
 789: PPUSH
 790: LD_STRING Burlak
 792: PPUSH
 793: CALL_OW 38
// SaveCharacters ( plat , Platonov ) ;
 797: LD_EXP 54
 801: PPUSH
 802: LD_STRING Platonov
 804: PPUSH
 805: CALL_OW 38
// SaveCharacters ( kurin , Kurin ) ;
 809: LD_EXP 53
 813: PPUSH
 814: LD_STRING Kurin
 816: PPUSH
 817: CALL_OW 38
// SaveCharacters ( bel , Belkov ) ;
 821: LD_EXP 52
 825: PPUSH
 826: LD_STRING Belkov
 828: PPUSH
 829: CALL_OW 38
// SaveCharacters ( gny , Gnyevko ) ;
 833: LD_EXP 49
 837: PPUSH
 838: LD_STRING Gnyevko
 840: PPUSH
 841: CALL_OW 38
// SaveCharacters ( kov , Kovalyuk ) ;
 845: LD_EXP 51
 849: PPUSH
 850: LD_STRING Kovalyuk
 852: PPUSH
 853: CALL_OW 38
// all_lidi = pom diff [ bur , plat , kurin , bel , gny , kov ] ;
 857: LD_ADDR_VAR 0 16
 861: PUSH
 862: LD_VAR 0 3
 866: PUSH
 867: LD_EXP 50
 871: PUSH
 872: LD_EXP 54
 876: PUSH
 877: LD_EXP 53
 881: PUSH
 882: LD_EXP 52
 886: PUSH
 887: LD_EXP 49
 891: PUSH
 892: LD_EXP 51
 896: PUSH
 897: EMPTY
 898: LIST
 899: LIST
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: DIFF
 905: ST_TO_ADDR
// all_lidi = all_lidi union rusi_survivors ;
 906: LD_ADDR_VAR 0 16
 910: PUSH
 911: LD_VAR 0 16
 915: PUSH
 916: LD_EXP 58
 920: UNION
 921: ST_TO_ADDR
// SaveCharacters ( all_lidi , survivors1 ) ;
 922: LD_VAR 0 16
 926: PPUSH
 927: LD_STRING survivors1
 929: PPUSH
 930: CALL_OW 38
// if BelkovFreed then
 934: LD_EXP 16
 938: IFFALSE 952
// SaveVariable ( 1 , belkov_saved ) else
 940: LD_INT 1
 942: PPUSH
 943: LD_STRING belkov_saved
 945: PPUSH
 946: CALL_OW 39
 950: GO 962
// SaveVariable ( 0 , belkov_saved ) ;
 952: LD_INT 0
 954: PPUSH
 955: LD_STRING belkov_saved
 957: PPUSH
 958: CALL_OW 39
// case stav_utoku of 0 :
 962: LD_EXP 59
 966: PUSH
 967: LD_INT 0
 969: DOUBLE
 970: EQUAL
 971: IFTRUE 975
 973: GO 988
 975: POP
// SaveVariable ( 3 , utok_stav ) ; 1 :
 976: LD_INT 3
 978: PPUSH
 979: LD_STRING utok_stav
 981: PPUSH
 982: CALL_OW 39
 986: GO 1052
 988: LD_INT 1
 990: DOUBLE
 991: EQUAL
 992: IFTRUE 996
 994: GO 1009
 996: POP
// SaveVariable ( 1 , utok_stav ) ; 2 :
 997: LD_INT 1
 999: PPUSH
1000: LD_STRING utok_stav
1002: PPUSH
1003: CALL_OW 39
1007: GO 1052
1009: LD_INT 2
1011: DOUBLE
1012: EQUAL
1013: IFTRUE 1017
1015: GO 1030
1017: POP
// SaveVariable ( 2 , utok_stav ) ; 3 :
1018: LD_INT 2
1020: PPUSH
1021: LD_STRING utok_stav
1023: PPUSH
1024: CALL_OW 39
1028: GO 1052
1030: LD_INT 3
1032: DOUBLE
1033: EQUAL
1034: IFTRUE 1038
1036: GO 1051
1038: POP
// SaveVariable ( 3 , utok_stav ) ; end ;
1039: LD_INT 3
1041: PPUSH
1042: LD_STRING utok_stav
1044: PPUSH
1045: CALL_OW 39
1049: GO 1052
1051: POP
// budovy = [ ] ;
1052: LD_ADDR_VAR 0 13
1056: PUSH
1057: EMPTY
1058: ST_TO_ADDR
// bw = 0 ;
1059: LD_ADDR_VAR 0 15
1063: PUSH
1064: LD_INT 0
1066: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_building ] ] ) ;
1067: LD_ADDR_VAR 0 3
1071: PUSH
1072: LD_INT 22
1074: PUSH
1075: LD_EXP 1
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PUSH
1084: LD_INT 21
1086: PUSH
1087: LD_INT 3
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: PPUSH
1098: CALL_OW 69
1102: ST_TO_ADDR
// for i in pom do
1103: LD_ADDR_VAR 0 2
1107: PUSH
1108: LD_VAR 0 3
1112: PUSH
1113: FOR_IN
1114: IFFALSE 1270
// begin a = GetBType ( i ) ;
1116: LD_ADDR_VAR 0 7
1120: PUSH
1121: LD_VAR 0 2
1125: PPUSH
1126: CALL_OW 266
1130: ST_TO_ADDR
// b = GetBLevel ( i ) ;
1131: LD_ADDR_VAR 0 8
1135: PUSH
1136: LD_VAR 0 2
1140: PPUSH
1141: CALL_OW 267
1145: ST_TO_ADDR
// c = GetX ( i ) ;
1146: LD_ADDR_VAR 0 9
1150: PUSH
1151: LD_VAR 0 2
1155: PPUSH
1156: CALL_OW 250
1160: ST_TO_ADDR
// d = GetY ( i ) ;
1161: LD_ADDR_VAR 0 10
1165: PUSH
1166: LD_VAR 0 2
1170: PPUSH
1171: CALL_OW 251
1175: ST_TO_ADDR
// e = GetDir ( i ) ;
1176: LD_ADDR_VAR 0 11
1180: PUSH
1181: LD_VAR 0 2
1185: PPUSH
1186: CALL_OW 254
1190: ST_TO_ADDR
// f = GetNation ( i ) ;
1191: LD_ADDR_VAR 0 12
1195: PUSH
1196: LD_VAR 0 2
1200: PPUSH
1201: CALL_OW 248
1205: ST_TO_ADDR
// pom1 = [ a , b , c , d , e , f ] ;
1206: LD_ADDR_VAR 0 4
1210: PUSH
1211: LD_VAR 0 7
1215: PUSH
1216: LD_VAR 0 8
1220: PUSH
1221: LD_VAR 0 9
1225: PUSH
1226: LD_VAR 0 10
1230: PUSH
1231: LD_VAR 0 11
1235: PUSH
1236: LD_VAR 0 12
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: ST_TO_ADDR
// budovy = budovy ^ [ pom1 ] ;
1249: LD_ADDR_VAR 0 13
1253: PUSH
1254: LD_VAR 0 13
1258: PUSH
1259: LD_VAR 0 4
1263: PUSH
1264: EMPTY
1265: LIST
1266: ADD
1267: ST_TO_ADDR
// end ;
1268: GO 1113
1270: POP
1271: POP
// SaveVariable ( budovy , budovy ) ;
1272: LD_VAR 0 13
1276: PPUSH
1277: LD_STRING budovy
1279: PPUSH
1280: CALL_OW 39
// if isOK ( am_bre1 ) then
1284: LD_INT 30
1286: PPUSH
1287: CALL_OW 302
1291: IFFALSE 1307
// bw = bw + 1 ;
1293: LD_ADDR_VAR 0 15
1297: PUSH
1298: LD_VAR 0 15
1302: PUSH
1303: LD_INT 1
1305: PLUS
1306: ST_TO_ADDR
// if IsOK ( am_bre2 ) then
1307: LD_INT 31
1309: PPUSH
1310: CALL_OW 302
1314: IFFALSE 1330
// bw = bw + 2 ;
1316: LD_ADDR_VAR 0 15
1320: PUSH
1321: LD_VAR 0 15
1325: PUSH
1326: LD_INT 2
1328: PLUS
1329: ST_TO_ADDR
// SaveVariable ( bw , bw_east ) ;
1330: LD_VAR 0 15
1334: PPUSH
1335: LD_STRING bw_east
1337: PPUSH
1338: CALL_OW 39
// pom = [ ] ;
1342: LD_ADDR_VAR 0 3
1346: PUSH
1347: EMPTY
1348: ST_TO_ADDR
// if ISOK ( ABW1 ) then
1349: LD_EXP 76
1353: PPUSH
1354: CALL_OW 302
1358: IFFALSE 1376
// pom = pom ^ ABW1 ;
1360: LD_ADDR_VAR 0 3
1364: PUSH
1365: LD_VAR 0 3
1369: PUSH
1370: LD_EXP 76
1374: ADD
1375: ST_TO_ADDR
// if ISOK ( ABW2 ) then
1376: LD_EXP 77
1380: PPUSH
1381: CALL_OW 302
1385: IFFALSE 1403
// pom = pom ^ ABW2 ;
1387: LD_ADDR_VAR 0 3
1391: PUSH
1392: LD_VAR 0 3
1396: PUSH
1397: LD_EXP 77
1401: ADD
1402: ST_TO_ADDR
// SaveCharacters ( pom , amici_bw ) ;
1403: LD_VAR 0 3
1407: PPUSH
1408: LD_STRING amici_bw
1410: PPUSH
1411: CALL_OW 38
// YouWin ;
1415: CALL_OW 103
// EnableExclamations ;
1419: CALL_OW 473
// exit ;
1423: GO 1425
// end ;
1425: LD_VAR 0 1
1429: RET
// function load_postav ; begin
1430: LD_INT 0
1432: PPUSH
// kurin = NewCharacter ( kurin ) ;
1433: LD_ADDR_EXP 53
1437: PUSH
1438: LD_STRING kurin
1440: PPUSH
1441: CALL_OW 25
1445: ST_TO_ADDR
// if CheckCharacterSet ( Belkov ) then
1446: LD_STRING Belkov
1448: PPUSH
1449: CALL_OW 29
1453: IFFALSE 1465
// BELKOV_MRTVY = false else
1455: LD_ADDR_EXP 46
1459: PUSH
1460: LD_INT 0
1462: ST_TO_ADDR
1463: GO 1473
// BELKOV_MRTVY = true ;
1465: LD_ADDR_EXP 46
1469: PUSH
1470: LD_INT 1
1472: ST_TO_ADDR
// if BELKOV_MRTVY then
1473: LD_EXP 46
1477: IFFALSE 1494
// begin bel = NewCharacter ( Belkov2 ) ;
1479: LD_ADDR_EXP 52
1483: PUSH
1484: LD_STRING Belkov2
1486: PPUSH
1487: CALL_OW 25
1491: ST_TO_ADDR
// end else
1492: GO 1507
// bel = nacti_osobu ( Belkov ) ;
1494: LD_ADDR_EXP 52
1498: PUSH
1499: LD_STRING Belkov
1501: PPUSH
1502: CALL 5017 0 1
1506: ST_TO_ADDR
// kov = NewCharacter ( Kovalyuk ) ;
1507: LD_ADDR_EXP 51
1511: PUSH
1512: LD_STRING Kovalyuk
1514: PPUSH
1515: CALL_OW 25
1519: ST_TO_ADDR
// bur = nacti_osobu ( Burlak ) ;
1520: LD_ADDR_EXP 50
1524: PUSH
1525: LD_STRING Burlak
1527: PPUSH
1528: CALL 5017 0 1
1532: ST_TO_ADDR
// gny = nacti_osobu ( Gnyevko ) ;
1533: LD_ADDR_EXP 49
1537: PUSH
1538: LD_STRING Gnyevko
1540: PPUSH
1541: CALL 5017 0 1
1545: ST_TO_ADDR
// plat = NewCharacter ( Platonov ) ;
1546: LD_ADDR_EXP 54
1550: PUSH
1551: LD_STRING Platonov
1553: PPUSH
1554: CALL_OW 25
1558: ST_TO_ADDR
// DoNotAttack ( 1 , plat ) ;
1559: LD_INT 1
1561: PPUSH
1562: LD_EXP 54
1566: PPUSH
1567: CALL_OW 471
// DoNotAttack ( 4 , plat ) ;
1571: LD_INT 4
1573: PPUSH
1574: LD_EXP 54
1578: PPUSH
1579: CALL_OW 471
// end ; end_of_file
1583: LD_VAR 0 1
1587: RET
// export CarCount , WBW , EBW , BurlakComp , BurlakOut , BelkovFreed , BelkovComp , WBWSpotted , WBWAttacked , WBWDestroyed , WBWReported , EBWSpotted , EBWDestroyed , EBWReported , Charted , QAttAm , objAttack , objBelkov , objReturn , Reinforcements , InWest , BeriaVisited , CanReturn , playing , d19a , McCestaNaSever ; export function InitVars ; begin
1588: LD_INT 0
1590: PPUSH
// CarCount = 0 ;
1591: LD_ADDR_EXP 11
1595: PUSH
1596: LD_INT 0
1598: ST_TO_ADDR
// WBWSpotted := false ;
1599: LD_ADDR_EXP 18
1603: PUSH
1604: LD_INT 0
1606: ST_TO_ADDR
// WBWAttacked := false ;
1607: LD_ADDR_EXP 19
1611: PUSH
1612: LD_INT 0
1614: ST_TO_ADDR
// WBWDestroyed := false ;
1615: LD_ADDR_EXP 20
1619: PUSH
1620: LD_INT 0
1622: ST_TO_ADDR
// WBWReported := false ;
1623: LD_ADDR_EXP 21
1627: PUSH
1628: LD_INT 0
1630: ST_TO_ADDR
// EBWSpotted := false ;
1631: LD_ADDR_EXP 22
1635: PUSH
1636: LD_INT 0
1638: ST_TO_ADDR
// EBWDestroyed := false ;
1639: LD_ADDR_EXP 23
1643: PUSH
1644: LD_INT 0
1646: ST_TO_ADDR
// EBWReported := false ;
1647: LD_ADDR_EXP 24
1651: PUSH
1652: LD_INT 0
1654: ST_TO_ADDR
// BelkovFreed := false ;
1655: LD_ADDR_EXP 16
1659: PUSH
1660: LD_INT 0
1662: ST_TO_ADDR
// BelkovComp := [ ] ;
1663: LD_ADDR_EXP 17
1667: PUSH
1668: EMPTY
1669: ST_TO_ADDR
// QAttAm := false ;
1670: LD_ADDR_EXP 26
1674: PUSH
1675: LD_INT 0
1677: ST_TO_ADDR
// d19a := false ;
1678: LD_ADDR_EXP 35
1682: PUSH
1683: LD_INT 0
1685: ST_TO_ADDR
// objAttack := false ;
1686: LD_ADDR_EXP 27
1690: PUSH
1691: LD_INT 0
1693: ST_TO_ADDR
// Reinforcements := false ;
1694: LD_ADDR_EXP 30
1698: PUSH
1699: LD_INT 0
1701: ST_TO_ADDR
// Charted := false ;
1702: LD_ADDR_EXP 25
1706: PUSH
1707: LD_INT 0
1709: ST_TO_ADDR
// objBelkov := false ;
1710: LD_ADDR_EXP 28
1714: PUSH
1715: LD_INT 0
1717: ST_TO_ADDR
// objReturn := false ;
1718: LD_ADDR_EXP 29
1722: PUSH
1723: LD_INT 0
1725: ST_TO_ADDR
// BeriaVisited := false ;
1726: LD_ADDR_EXP 32
1730: PUSH
1731: LD_INT 0
1733: ST_TO_ADDR
// InWest := false ;
1734: LD_ADDR_EXP 31
1738: PUSH
1739: LD_INT 0
1741: ST_TO_ADDR
// playing := false ;
1742: LD_ADDR_EXP 34
1746: PUSH
1747: LD_INT 0
1749: ST_TO_ADDR
// EBW := [ Am_bre1 , Am_bre2 ] ;
1750: LD_ADDR_EXP 13
1754: PUSH
1755: LD_INT 30
1757: PUSH
1758: LD_INT 31
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: ST_TO_ADDR
// BurlakOut := [ ] ;
1765: LD_ADDR_EXP 15
1769: PUSH
1770: EMPTY
1771: ST_TO_ADDR
// CanReturn := false ;
1772: LD_ADDR_EXP 33
1776: PUSH
1777: LD_INT 0
1779: ST_TO_ADDR
// McCestaNaSever := 0 ;
1780: LD_ADDR_EXP 36
1784: PUSH
1785: LD_INT 0
1787: ST_TO_ADDR
// disable ( 99 ) ;
1788: LD_INT 99
1790: DISABLE_MARKED
// disable ( 100 ) ;
1791: LD_INT 100
1793: DISABLE_MARKED
// disable ( 101 ) ;
1794: LD_INT 101
1796: DISABLE_MARKED
// disable ( 300 ) ;
1797: LD_INT 300
1799: DISABLE_MARKED
// disable ( 301 ) ;
1800: LD_INT 301
1802: DISABLE_MARKED
// disable ( 302 ) ;
1803: LD_INT 302
1805: DISABLE_MARKED
// end ;
1806: LD_VAR 0 1
1810: RET
// function ListAttacks ( who , whom ) ; var i ; begin
1811: LD_INT 0
1813: PPUSH
1814: PPUSH
// result := false ;
1815: LD_ADDR_VAR 0 3
1819: PUSH
1820: LD_INT 0
1822: ST_TO_ADDR
// for i in who do
1823: LD_ADDR_VAR 0 4
1827: PUSH
1828: LD_VAR 0 1
1832: PUSH
1833: FOR_IN
1834: IFFALSE 1865
// begin if Attacks ( i ) in whom then
1836: LD_VAR 0 4
1840: PPUSH
1841: CALL_OW 320
1845: PUSH
1846: LD_VAR 0 2
1850: IN
1851: IFFALSE 1863
// begin result := true ;
1853: LD_ADDR_VAR 0 3
1857: PUSH
1858: LD_INT 1
1860: ST_TO_ADDR
// break end ;
1861: GO 1865
// end ;
1863: GO 1833
1865: POP
1866: POP
// end ;
1867: LD_VAR 0 3
1871: RET
// function ListSee ( side , who ) ; var i ; begin
1872: LD_INT 0
1874: PPUSH
1875: PPUSH
// result := false ;
1876: LD_ADDR_VAR 0 3
1880: PUSH
1881: LD_INT 0
1883: ST_TO_ADDR
// for i in who do
1884: LD_ADDR_VAR 0 4
1888: PUSH
1889: LD_VAR 0 2
1893: PUSH
1894: FOR_IN
1895: IFFALSE 1925
// begin if see ( side , i ) then
1897: LD_VAR 0 1
1901: PPUSH
1902: LD_VAR 0 4
1906: PPUSH
1907: CALL_OW 292
1911: IFFALSE 1923
// begin result := true ;
1913: LD_ADDR_VAR 0 3
1917: PUSH
1918: LD_INT 1
1920: ST_TO_ADDR
// break ;
1921: GO 1925
// end ; end ;
1923: GO 1894
1925: POP
1926: POP
// end ;
1927: LD_VAR 0 3
1931: RET
// function BurlakInArea ( area ) ; var i , pom , hum ; begin
1932: LD_INT 0
1934: PPUSH
1935: PPUSH
1936: PPUSH
1937: PPUSH
// hum := [ ] ;
1938: LD_ADDR_VAR 0 5
1942: PUSH
1943: EMPTY
1944: ST_TO_ADDR
// pom := FilterUnitsInArea ( area , [ [ f_side , you ] , [ f_ready ] ] ) ;
1945: LD_ADDR_VAR 0 4
1949: PUSH
1950: LD_VAR 0 1
1954: PPUSH
1955: LD_INT 22
1957: PUSH
1958: LD_EXP 1
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 53
1969: PUSH
1970: EMPTY
1971: LIST
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PPUSH
1977: CALL_OW 70
1981: ST_TO_ADDR
// for i in pom do
1982: LD_ADDR_VAR 0 3
1986: PUSH
1987: LD_VAR 0 4
1991: PUSH
1992: FOR_IN
1993: IFFALSE 2079
// begin if GetType ( i ) = unit_human then
1995: LD_VAR 0 3
1999: PPUSH
2000: CALL_OW 247
2004: PUSH
2005: LD_INT 1
2007: EQUAL
2008: IFFALSE 2026
// begin hum := hum ^ i ;
2010: LD_ADDR_VAR 0 5
2014: PUSH
2015: LD_VAR 0 5
2019: PUSH
2020: LD_VAR 0 3
2024: ADD
2025: ST_TO_ADDR
// end ; if ( GetType ( i ) = unit_building ) or ( GetType ( i ) = unit_vehicle ) then
2026: LD_VAR 0 3
2030: PPUSH
2031: CALL_OW 247
2035: PUSH
2036: LD_INT 3
2038: EQUAL
2039: PUSH
2040: LD_VAR 0 3
2044: PPUSH
2045: CALL_OW 247
2049: PUSH
2050: LD_INT 2
2052: EQUAL
2053: OR
2054: IFFALSE 2077
// begin hum := hum union UnitsInside ( i ) ;
2056: LD_ADDR_VAR 0 5
2060: PUSH
2061: LD_VAR 0 5
2065: PUSH
2066: LD_VAR 0 3
2070: PPUSH
2071: CALL_OW 313
2075: UNION
2076: ST_TO_ADDR
// end ; end ;
2077: GO 1992
2079: POP
2080: POP
// if ( hum isect BurlakOut ) > 0 then
2081: LD_VAR 0 5
2085: PUSH
2086: LD_EXP 15
2090: ISECT
2091: PUSH
2092: LD_INT 0
2094: GREATER
2095: IFFALSE 2107
// result := true else
2097: LD_ADDR_VAR 0 2
2101: PUSH
2102: LD_INT 1
2104: ST_TO_ADDR
2105: GO 2115
// result := false ;
2107: LD_ADDR_VAR 0 2
2111: PUSH
2112: LD_INT 0
2114: ST_TO_ADDR
// end ;
2115: LD_VAR 0 2
2119: RET
// export function MissionProper ; begin
2120: LD_INT 0
2122: PPUSH
// enable ( 99 ) ;
2123: LD_INT 99
2125: ENABLE_MARKED
// enable ( 100 ) ;
2126: LD_INT 100
2128: ENABLE_MARKED
// CanReturn := false ;
2129: LD_ADDR_EXP 33
2133: PUSH
2134: LD_INT 0
2136: ST_TO_ADDR
// end ;
2137: LD_VAR 0 1
2141: RET
// function ShouldReturn ; begin
2142: LD_INT 0
2144: PPUSH
// if Charted and ( BelkovFreed or ( not objBelkov ) ) and ( WBWDestroyed or ( not objAttack ) ) and ( not objReturn ) then
2145: LD_EXP 25
2149: PUSH
2150: LD_EXP 16
2154: PUSH
2155: LD_EXP 28
2159: NOT
2160: OR
2161: AND
2162: PUSH
2163: LD_EXP 20
2167: PUSH
2168: LD_EXP 27
2172: NOT
2173: OR
2174: AND
2175: PUSH
2176: LD_EXP 29
2180: NOT
2181: AND
2182: IFFALSE 2199
// begin ChangeMissionObjectives ( M10a ) ;
2184: LD_STRING M10a
2186: PPUSH
2187: CALL_OW 337
// objReturn := true ;
2191: LD_ADDR_EXP 29
2195: PUSH
2196: LD_INT 1
2198: ST_TO_ADDR
// end ; end ;
2199: LD_VAR 0 1
2203: RET
// on VehicleConstructed ( veh , fact ) do begin CarCount := CarCount + 1 ;
2204: LD_ADDR_EXP 11
2208: PUSH
2209: LD_EXP 11
2213: PUSH
2214: LD_INT 1
2216: PLUS
2217: ST_TO_ADDR
// if CarCount = 1 then
2218: LD_EXP 11
2222: PUSH
2223: LD_INT 1
2225: EQUAL
2226: IFFALSE 2231
// enable ( 300 ) ;
2228: LD_INT 300
2230: ENABLE_MARKED
// if CarCount = UnitFilter ( Rusi_enter , [ f_OK ] ) and not belkov_returns then
2231: LD_EXP 11
2235: PUSH
2236: LD_EXP 55
2240: PPUSH
2241: LD_INT 50
2243: PUSH
2244: EMPTY
2245: LIST
2246: PPUSH
2247: CALL_OW 72
2251: EQUAL
2252: PUSH
2253: LD_EXP 8
2257: NOT
2258: AND
2259: IFFALSE 2269
// belkov_returns = true ;
2261: LD_ADDR_EXP 8
2265: PUSH
2266: LD_INT 1
2268: ST_TO_ADDR
// if CarCount = UnitFilter ( Rusi_enter , [ f_OK ] ) + 1 and not belkov_american_clash then
2269: LD_EXP 11
2273: PUSH
2274: LD_EXP 55
2278: PPUSH
2279: LD_INT 50
2281: PUSH
2282: EMPTY
2283: LIST
2284: PPUSH
2285: CALL_OW 72
2289: PUSH
2290: LD_INT 1
2292: PLUS
2293: EQUAL
2294: PUSH
2295: LD_EXP 9
2299: NOT
2300: AND
2301: IFFALSE 2311
// belkov_american_clash = true ;
2303: LD_ADDR_EXP 9
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// end ;
2311: PPOPN 2
2313: END
// every 0 0$1 trigger belkov_american_clash do
2314: LD_EXP 9
2318: IFFALSE 2335
2320: GO 2322
2322: DISABLE
// begin rozhovor_ukonceni_m5 ;
2323: CALL 8863 0 0
// stav = 7 ;
2327: LD_ADDR_EXP 60
2331: PUSH
2332: LD_INT 7
2334: ST_TO_ADDR
// end ;
2335: END
// every 0 0$5 trigger ( ListSee ( you , WBW ) or ListAttacks ( WBW , BurlakOut ) ) and ( not WBWDestroyed ) do
2336: LD_EXP 1
2340: PPUSH
2341: LD_EXP 12
2345: PPUSH
2346: CALL 1872 0 2
2350: PUSH
2351: LD_EXP 12
2355: PPUSH
2356: LD_EXP 15
2360: PPUSH
2361: CALL 1811 0 2
2365: OR
2366: PUSH
2367: LD_EXP 20
2371: NOT
2372: AND
2373: IFFALSE 2627
2375: GO 2377
2377: DISABLE
// begin if BurlakInArea ( kopec ) then
2378: LD_INT 26
2380: PPUSH
2381: CALL 1932 0 1
2385: IFFALSE 2395
// begin InWest := true ;
2387: LD_ADDR_EXP 31
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// end ; if not WBWSpotted then
2395: LD_EXP 18
2399: NOT
2400: IFFALSE 2406
// begin play_dialog_15 ;
2402: CALL 11222 0 0
// end ; WBWSpotted := true ;
2406: LD_ADDR_EXP 18
2410: PUSH
2411: LD_INT 1
2413: ST_TO_ADDR
// if InWest and ( not QAttAm ) and ( not objAttack ) then
2414: LD_EXP 31
2418: PUSH
2419: LD_EXP 26
2423: NOT
2424: AND
2425: PUSH
2426: LD_EXP 27
2430: NOT
2431: AND
2432: IFFALSE 2551
// begin case query ( QAttackBw ) of 1 :
2434: LD_STRING QAttackBw
2436: PPUSH
2437: CALL_OW 97
2441: PUSH
2442: LD_INT 1
2444: DOUBLE
2445: EQUAL
2446: IFTRUE 2450
2448: GO 2465
2450: POP
// begin play_dialog_qwbw1 ;
2451: CALL 11427 0 0
// stav_utoku := 1 ;
2455: LD_ADDR_EXP 59
2459: PUSH
2460: LD_INT 1
2462: ST_TO_ADDR
// end ; 2 :
2463: GO 2524
2465: LD_INT 2
2467: DOUBLE
2468: EQUAL
2469: IFTRUE 2473
2471: GO 2504
2473: POP
// begin play_dialog_qwbw2 ;
2474: CALL 11514 0 0
// posily_go := true ;
2478: LD_ADDR_EXP 68
2482: PUSH
2483: LD_INT 1
2485: ST_TO_ADDR
// Reinforcements := true ;
2486: LD_ADDR_EXP 30
2490: PUSH
2491: LD_INT 1
2493: ST_TO_ADDR
// stav_utoku := 2 ;
2494: LD_ADDR_EXP 59
2498: PUSH
2499: LD_INT 2
2501: ST_TO_ADDR
// end ; 3 :
2502: GO 2524
2504: LD_INT 3
2506: DOUBLE
2507: EQUAL
2508: IFTRUE 2512
2510: GO 2523
2512: POP
// begin stav_utoku := 3 end ; end ;
2513: LD_ADDR_EXP 59
2517: PUSH
2518: LD_INT 3
2520: ST_TO_ADDR
2521: GO 2524
2523: POP
// ChangeMissionObjectives ( M7 ) ;
2524: LD_STRING M7
2526: PPUSH
2527: CALL_OW 337
// objAttack := true ;
2531: LD_ADDR_EXP 27
2535: PUSH
2536: LD_INT 1
2538: ST_TO_ADDR
// play_dialog_19 ;
2539: CALL 11601 0 0
// WBWAttacked := true ;
2543: LD_ADDR_EXP 19
2547: PUSH
2548: LD_INT 1
2550: ST_TO_ADDR
// end ; if ( not InWest ) and ListAttacks ( BurlakOut , WBW ) and ( not d19a ) then
2551: LD_EXP 31
2555: NOT
2556: PUSH
2557: LD_EXP 15
2561: PPUSH
2562: LD_EXP 12
2566: PPUSH
2567: CALL 1811 0 2
2571: AND
2572: PUSH
2573: LD_EXP 35
2577: NOT
2578: AND
2579: IFFALSE 2616
// begin wait ( 0 0$5 ) ;
2581: LD_INT 175
2583: PPUSH
2584: CALL_OW 67
// if ListAttacks ( BurlakOut , WBW ) then
2588: LD_EXP 15
2592: PPUSH
2593: LD_EXP 12
2597: PPUSH
2598: CALL 1811 0 2
2602: IFFALSE 2616
// begin play_dialog_19a ;
2604: CALL 11712 0 0
// d19a := true ;
2608: LD_ADDR_EXP 35
2612: PUSH
2613: LD_INT 1
2615: ST_TO_ADDR
// end ; end ; if ( not InWest ) then
2616: LD_EXP 31
2620: NOT
2621: IFFALSE 2626
// enable else
2623: ENABLE
2624: GO 2627
// disable ;
2626: DISABLE
// end ;
2627: END
// every 0 0$5 trigger FilterUnitsInArea ( Am_base , [ [ f_OK ] , [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) do var pom ;
2628: LD_INT 9
2630: PPUSH
2631: LD_INT 50
2633: PUSH
2634: EMPTY
2635: LIST
2636: PUSH
2637: LD_INT 22
2639: PUSH
2640: LD_EXP 2
2644: PUSH
2645: EMPTY
2646: LIST
2647: LIST
2648: PUSH
2649: LD_INT 30
2651: PUSH
2652: LD_INT 31
2654: PUSH
2655: EMPTY
2656: LIST
2657: LIST
2658: PUSH
2659: EMPTY
2660: LIST
2661: LIST
2662: LIST
2663: PPUSH
2664: CALL_OW 70
2668: IFFALSE 2803
2670: GO 2672
2672: DISABLE
2673: LD_INT 0
2675: PPUSH
// begin pom := FilterUnitsInArea ( Am_base , [ [ f_OK ] , [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) ;
2676: LD_ADDR_VAR 0 1
2680: PUSH
2681: LD_INT 9
2683: PPUSH
2684: LD_INT 50
2686: PUSH
2687: EMPTY
2688: LIST
2689: PUSH
2690: LD_INT 22
2692: PUSH
2693: LD_EXP 2
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: LD_INT 30
2704: PUSH
2705: LD_INT 31
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: LIST
2716: PPUSH
2717: CALL_OW 70
2721: ST_TO_ADDR
// BWW_1 = pom [ 1 ] ;
2722: LD_ADDR_EXP 74
2726: PUSH
2727: LD_VAR 0 1
2731: PUSH
2732: LD_INT 1
2734: ARRAY
2735: ST_TO_ADDR
// enable ( 101 ) ;
2736: LD_INT 101
2738: ENABLE_MARKED
// WBW := [ BWW_1 ] ;
2739: LD_ADDR_EXP 12
2743: PUSH
2744: LD_EXP 74
2748: PUSH
2749: EMPTY
2750: LIST
2751: ST_TO_ADDR
// if pom + 0 > 1 then
2752: LD_VAR 0 1
2756: PUSH
2757: LD_INT 0
2759: PLUS
2760: PUSH
2761: LD_INT 1
2763: GREATER
2764: IFFALSE 2802
// begin BWW_2 := pom [ 2 ] ;
2766: LD_ADDR_EXP 75
2770: PUSH
2771: LD_VAR 0 1
2775: PUSH
2776: LD_INT 2
2778: ARRAY
2779: ST_TO_ADDR
// WBW := WBW ^ [ BWW_2 ] ;
2780: LD_ADDR_EXP 12
2784: PUSH
2785: LD_EXP 12
2789: PUSH
2790: LD_EXP 75
2794: PUSH
2795: EMPTY
2796: LIST
2797: ADD
2798: ST_TO_ADDR
// disable ;
2799: DISABLE
// end else
2800: GO 2803
// begin enable ;
2802: ENABLE
// end ; end ;
2803: PPOPN 1
2805: END
// every 0 0$3 trigger ( UnitFilter ( WBW , [ [ f_OK ] , [ f_side , amici ] ] ) = 0 ) marked 101 do
2806: LD_EXP 12
2810: PPUSH
2811: LD_INT 50
2813: PUSH
2814: EMPTY
2815: LIST
2816: PUSH
2817: LD_INT 22
2819: PUSH
2820: LD_EXP 2
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: EMPTY
2830: LIST
2831: LIST
2832: PPUSH
2833: CALL_OW 72
2837: PUSH
2838: LD_INT 0
2840: EQUAL
2841: IFFALSE 2876
2843: GO 2845
2845: DISABLE
// begin play_dialog_20 ;
2846: CALL 11944 0 0
// WBWDestroyed := true ;
2850: LD_ADDR_EXP 20
2854: PUSH
2855: LD_INT 1
2857: ST_TO_ADDR
// if objAttack then
2858: LD_EXP 27
2862: IFFALSE 2871
// ChangeMissionObjectives ( M8 ) ;
2864: LD_STRING M8
2866: PPUSH
2867: CALL_OW 337
// ShouldReturn ;
2871: CALL 2142 0 0
// disable end ;
2875: DISABLE
2876: END
// every 0 0$5 trigger ListSee ( you , EBW ) or ListAttacks ( EBW , BurlakOut ) do var pom ;
2877: LD_EXP 1
2881: PPUSH
2882: LD_EXP 13
2886: PPUSH
2887: CALL 1872 0 2
2891: PUSH
2892: LD_EXP 13
2896: PPUSH
2897: LD_EXP 15
2901: PPUSH
2902: CALL 1811 0 2
2906: OR
2907: IFFALSE 2928
2909: GO 2911
2911: DISABLE
2912: LD_INT 0
2914: PPUSH
// begin play_dialog_16 ;
2915: CALL 11799 0 0
// EBWSpotted := true ;
2919: LD_ADDR_EXP 22
2923: PUSH
2924: LD_INT 1
2926: ST_TO_ADDR
// disable ;
2927: DISABLE
// end ;
2928: PPOPN 1
2930: END
// every 0 0$3 trigger ( UnitFilter ( EBW , [ f_OK ] ) = 0 ) do
2931: LD_EXP 13
2935: PPUSH
2936: LD_INT 50
2938: PUSH
2939: EMPTY
2940: LIST
2941: PPUSH
2942: CALL_OW 72
2946: PUSH
2947: LD_INT 0
2949: EQUAL
2950: IFFALSE 2968
2952: GO 2954
2954: DISABLE
// begin play_dialog_20a ;
2955: CALL 12007 0 0
// EBWDestroyed := true ;
2959: LD_ADDR_EXP 23
2963: PUSH
2964: LD_INT 1
2966: ST_TO_ADDR
// disable end ;
2967: DISABLE
2968: END
// every 0 0$5 trigger ( BurlakInArea ( Test4 ) ) do
2969: LD_INT 12
2971: PPUSH
2972: CALL 1932 0 1
2976: IFFALSE 3074
2978: GO 2980
2980: DISABLE
// begin if ( not objBelkov ) and ( IsOK ( Bel ) ) then
2981: LD_EXP 28
2985: NOT
2986: PUSH
2987: LD_EXP 52
2991: PPUSH
2992: CALL_OW 302
2996: AND
2997: IFFALSE 3065
// begin objBelkov := true ;
2999: LD_ADDR_EXP 28
3003: PUSH
3004: LD_INT 1
3006: ST_TO_ADDR
// case query ( QAttackAm ) of 1 :
3007: LD_STRING QAttackAm
3009: PPUSH
3010: CALL_OW 97
3014: PUSH
3015: LD_INT 1
3017: DOUBLE
3018: EQUAL
3019: IFTRUE 3023
3021: GO 3030
3023: POP
// play_dialog_qAtAm1 ; 2 :
3024: CALL 12070 0 0
3028: GO 3054
3030: LD_INT 2
3032: DOUBLE
3033: EQUAL
3034: IFTRUE 3038
3036: GO 3053
3038: POP
// begin play_dialog_qAtAm2 ;
3039: CALL 12133 0 0
// posily_go = true ;
3043: LD_ADDR_EXP 68
3047: PUSH
3048: LD_INT 1
3050: ST_TO_ADDR
// end ; end ;
3051: GO 3054
3053: POP
// ChangeMissionObjectives ( M9 ) ;
3054: LD_STRING M9
3056: PPUSH
3057: CALL_OW 337
// play_dialog_23 ;
3061: CALL 12249 0 0
// end ; QAttAm := true ;
3065: LD_ADDR_EXP 26
3069: PUSH
3070: LD_INT 1
3072: ST_TO_ADDR
// disable end ;
3073: DISABLE
3074: END
// every 0 0$5 trigger ( BurlakInArea ( belkov_kop ) ) do var i ;
3075: LD_INT 25
3077: PPUSH
3078: CALL 1932 0 1
3082: IFFALSE 3231
3084: GO 3086
3086: DISABLE
3087: LD_INT 0
3089: PPUSH
// begin if ( not objBelkov ) then
3090: LD_EXP 28
3094: NOT
3095: IFFALSE 3099
// exit ;
3097: GO 3231
// play_dialog_24 ;
3099: CALL 12323 0 0
// BelkovFreed := true ;
3103: LD_ADDR_EXP 16
3107: PUSH
3108: LD_INT 1
3110: ST_TO_ADDR
// if objBelkov then
3111: LD_EXP 28
3115: IFFALSE 3124
// ChangeMissionObjectives ( M9a ) ;
3117: LD_STRING M9a
3119: PPUSH
3120: CALL_OW 337
// if ( WBWSpotted ) and ( not WBWDestroyed ) and ( not objAttack ) then
3124: LD_EXP 18
3128: PUSH
3129: LD_EXP 20
3133: NOT
3134: AND
3135: PUSH
3136: LD_EXP 27
3140: NOT
3141: AND
3142: IFFALSE 3167
// begin ChangeMissionObjectives ( M7 ) ;
3144: LD_STRING M7
3146: PPUSH
3147: CALL_OW 337
// objAttack := true ;
3151: LD_ADDR_EXP 27
3155: PUSH
3156: LD_INT 1
3158: ST_TO_ADDR
// stav_utoku := 1 ;
3159: LD_ADDR_EXP 59
3163: PUSH
3164: LD_INT 1
3166: ST_TO_ADDR
// end ; BelkovComp = FilterUnitsInArea ( Belkov_kop_prebarvi , [ [ f_side , You2 ] ] ) ;
3167: LD_ADDR_EXP 17
3171: PUSH
3172: LD_INT 31
3174: PPUSH
3175: LD_INT 22
3177: PUSH
3178: LD_EXP 4
3182: PUSH
3183: EMPTY
3184: LIST
3185: LIST
3186: PUSH
3187: EMPTY
3188: LIST
3189: PPUSH
3190: CALL_OW 70
3194: ST_TO_ADDR
// for i in BelkovComp do
3195: LD_ADDR_VAR 0 1
3199: PUSH
3200: LD_EXP 17
3204: PUSH
3205: FOR_IN
3206: IFFALSE 3224
// SetSide ( i , You ) ;
3208: LD_VAR 0 1
3212: PPUSH
3213: LD_EXP 1
3217: PPUSH
3218: CALL_OW 235
3222: GO 3205
3224: POP
3225: POP
// ShouldReturn ;
3226: CALL 2142 0 0
// disable end ;
3230: DISABLE
3231: PPOPN 1
3233: END
// every 0 0$10 do var pom ;
3234: GO 3236
3236: DISABLE
3237: LD_INT 0
3239: PPUSH
// begin pom = SeeGreyArea ( You , Narea ) ;
3240: LD_ADDR_VAR 0 1
3244: PUSH
3245: LD_EXP 1
3249: PPUSH
3250: LD_INT 24
3252: PPUSH
3253: CALL_OW 452
3257: ST_TO_ADDR
// if pom >= procento_odkrytych_pro_vyhru [ difficulty ] then
3258: LD_VAR 0 1
3262: PUSH
3263: LD_EXP 42
3267: PUSH
3268: LD_OWVAR 67
3272: ARRAY
3273: GREATEREQUAL
3274: IFFALSE 3297
// begin ChangeMissionObjectives ( M10 ) ;
3276: LD_STRING M10
3278: PPUSH
3279: CALL_OW 337
// Charted := true ;
3283: LD_ADDR_EXP 25
3287: PUSH
3288: LD_INT 1
3290: ST_TO_ADDR
// ShouldReturn ;
3291: CALL 2142 0 0
// end else
3295: GO 3298
// enable ;
3297: ENABLE
// end ;
3298: PPOPN 1
3300: END
// every 0 0$5 trigger ( not BurlakInArea ( RU2_base ) ) marked 99 do var i ;
3301: LD_INT 1
3303: PPUSH
3304: CALL 1932 0 1
3308: NOT
3309: IFFALSE 3429
3311: GO 3313
3313: DISABLE
3314: LD_INT 0
3316: PPUSH
// begin BurlakComp := UnitFilter ( BurlakComp , [ f_alive ] ) ;
3317: LD_ADDR_EXP 14
3321: PUSH
3322: LD_EXP 14
3326: PPUSH
3327: LD_INT 51
3329: PUSH
3330: EMPTY
3331: LIST
3332: PPUSH
3333: CALL_OW 72
3337: ST_TO_ADDR
// BurlakOut := [ ] ;
3338: LD_ADDR_EXP 15
3342: PUSH
3343: EMPTY
3344: ST_TO_ADDR
// for i in BurlakComp do
3345: LD_ADDR_VAR 0 1
3349: PUSH
3350: LD_EXP 14
3354: PUSH
3355: FOR_IN
3356: IFFALSE 3394
// begin if ( not IsInArea ( i , Ru2_base ) ) then
3358: LD_VAR 0 1
3362: PPUSH
3363: LD_INT 1
3365: PPUSH
3366: CALL_OW 308
3370: NOT
3371: IFFALSE 3392
// BurlakOut := BurlakOut ^ [ i ] ;
3373: LD_ADDR_EXP 15
3377: PUSH
3378: LD_EXP 15
3382: PUSH
3383: LD_VAR 0 1
3387: PUSH
3388: EMPTY
3389: LIST
3390: ADD
3391: ST_TO_ADDR
// end ;
3392: GO 3355
3394: POP
3395: POP
// if BurlakOut + 0 > 0 then
3396: LD_EXP 15
3400: PUSH
3401: LD_INT 0
3403: PLUS
3404: PUSH
3405: LD_INT 0
3407: GREATER
3408: IFFALSE 3420
// CanReturn := true else
3410: LD_ADDR_EXP 33
3414: PUSH
3415: LD_INT 1
3417: ST_TO_ADDR
3418: GO 3428
// CanReturn := false ;
3420: LD_ADDR_EXP 33
3424: PUSH
3425: LD_INT 0
3427: ST_TO_ADDR
// enable ;
3428: ENABLE
// end ;
3429: PPOPN 1
3431: END
// every 0 0$5 trigger ( BurlakInArea ( RU2_base ) ) marked 100 do var i ;
3432: LD_INT 1
3434: PPUSH
3435: CALL 1932 0 1
3439: IFFALSE 3776
3441: GO 3443
3443: DISABLE
3444: LD_INT 0
3446: PPUSH
// begin enable ;
3447: ENABLE
// if objReturn then
3448: LD_EXP 29
3452: IFFALSE 3505
// begin for i in BurlakComp do
3454: LD_ADDR_VAR 0 1
3458: PUSH
3459: LD_EXP 14
3463: PUSH
3464: FOR_IN
3465: IFFALSE 3488
// begin if not IsInArea ( i , RU2_base ) then
3467: LD_VAR 0 1
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: CALL_OW 308
3479: NOT
3480: IFFALSE 3486
// exit ;
3482: POP
3483: POP
3484: GO 3776
// end ;
3486: GO 3464
3488: POP
3489: POP
// ChangeMissionObjectives ( M10b ) ;
3490: LD_STRING M10b
3492: PPUSH
3493: CALL_OW 337
// objReturn := false ;
3497: LD_ADDR_EXP 29
3501: PUSH
3502: LD_INT 0
3504: ST_TO_ADDR
// end ; if Charted and WBWDestroyed and ( BelkovFreed or not ( IsOK ( Bel ) ) ) then
3505: LD_EXP 25
3509: PUSH
3510: LD_EXP 20
3514: AND
3515: PUSH
3516: LD_EXP 16
3520: PUSH
3521: LD_EXP 52
3525: PPUSH
3526: CALL_OW 302
3530: NOT
3531: OR
3532: AND
3533: IFFALSE 3548
// begin konec_mise ;
3535: CALL 249 0 0
// wait ( 0 0$1 ) ;
3539: LD_INT 35
3541: PPUSH
3542: CALL_OW 67
// exit ;
3546: GO 3776
// end ; if Charted and WBWDestroyed and ( not objBelkov ) and ( IsOK ( Bel ) ) then
3548: LD_EXP 25
3552: PUSH
3553: LD_EXP 20
3557: AND
3558: PUSH
3559: LD_EXP 28
3563: NOT
3564: AND
3565: PUSH
3566: LD_EXP 52
3570: PPUSH
3571: CALL_OW 302
3575: AND
3576: IFFALSE 3630
// begin case Query ( QContMission ) of 1 :
3578: LD_STRING QContMission
3580: PPUSH
3581: CALL_OW 97
3585: PUSH
3586: LD_INT 1
3588: DOUBLE
3589: EQUAL
3590: IFTRUE 3594
3592: GO 3601
3594: POP
// konec_mise ; 2 :
3595: CALL 249 0 0
3599: GO 3628
3601: LD_INT 2
3603: DOUBLE
3604: EQUAL
3605: IFTRUE 3609
3607: GO 3627
3609: POP
// begin ChangeMissionObjectives ( M9 ) ;
3610: LD_STRING M9
3612: PPUSH
3613: CALL_OW 337
// objBelkov := true ;
3617: LD_ADDR_EXP 28
3621: PUSH
3622: LD_INT 1
3624: ST_TO_ADDR
// end ; end ;
3625: GO 3628
3627: POP
// exit ;
3628: GO 3776
// end ; if not CanReturn then
3630: LD_EXP 33
3634: NOT
3635: IFFALSE 3639
// exit ;
3637: GO 3776
// CanReturn := false ;
3639: LD_ADDR_EXP 33
3643: PUSH
3644: LD_INT 0
3646: ST_TO_ADDR
// if ( not WBWDestroyed ) or ( not EBWDestroyed ) then
3647: LD_EXP 20
3651: NOT
3652: PUSH
3653: LD_EXP 23
3657: NOT
3658: OR
3659: IFFALSE 3678
// begin if not BeriaVisited then
3661: LD_EXP 32
3665: NOT
3666: IFFALSE 3674
// play_dialog_25 else
3668: CALL 12519 0 0
3672: GO 3678
// play_dialog_25a ;
3674: CALL 12782 0 0
// end ; BeriaVisited := true ;
3678: LD_ADDR_EXP 32
3682: PUSH
3683: LD_INT 1
3685: ST_TO_ADDR
// if WBWSpotted and ( not WBWDestroyed ) and ( not Reinforcements ) then
3686: LD_EXP 18
3690: PUSH
3691: LD_EXP 20
3695: NOT
3696: AND
3697: PUSH
3698: LD_EXP 30
3702: NOT
3703: AND
3704: IFFALSE 3758
// begin play_dialog_25b ;
3706: CALL 12969 0 0
// posily_go := true ;
3710: LD_ADDR_EXP 68
3714: PUSH
3715: LD_INT 1
3717: ST_TO_ADDR
// Reinforcements := true ;
3718: LD_ADDR_EXP 30
3722: PUSH
3723: LD_INT 1
3725: ST_TO_ADDR
// if ( not objAttack ) then
3726: LD_EXP 27
3730: NOT
3731: IFFALSE 3756
// begin ChangeMissionObjectives ( M7 ) ;
3733: LD_STRING M7
3735: PPUSH
3736: CALL_OW 337
// objAttack := true ;
3740: LD_ADDR_EXP 27
3744: PUSH
3745: LD_INT 1
3747: ST_TO_ADDR
// stav_utoku := 1 ;
3748: LD_ADDR_EXP 59
3752: PUSH
3753: LD_INT 1
3755: ST_TO_ADDR
// end ; exit ;
3756: GO 3776
// end ; if ( not Charted ) or ( not WBWSpotted ) then
3758: LD_EXP 25
3762: NOT
3763: PUSH
3764: LD_EXP 18
3768: NOT
3769: OR
3770: IFFALSE 3776
// begin play_dialog_25c ;
3772: CALL 13020 0 0
// end ; end ; end_of_file
3776: PPOPN 1
3778: END
// export AMICI_PAST_LIST ; export AMICI_STAVENI_BASE_LIST ; export AMICI_UTOK_BELKOV_LIST ; var ah , av ; export function get_human ( sex , clas , level , name ) ; var pom ; begin
3779: LD_INT 0
3781: PPUSH
3782: PPUSH
// PrepareHuman ( sex , clas , level ) ;
3783: LD_VAR 0 1
3787: PPUSH
3788: LD_VAR 0 2
3792: PPUSH
3793: LD_VAR 0 3
3797: PPUSH
3798: CALL_OW 380
// hc_name := name ;
3802: LD_ADDR_OWVAR 26
3806: PUSH
3807: LD_VAR 0 4
3811: ST_TO_ADDR
// pom = CreateHuman ;
3812: LD_ADDR_VAR 0 6
3816: PUSH
3817: CALL_OW 44
3821: ST_TO_ADDR
// result := pom ;
3822: LD_ADDR_VAR 0 5
3826: PUSH
3827: LD_VAR 0 6
3831: ST_TO_ADDR
// end ;
3832: LD_VAR 0 5
3836: RET
// export function amici_breast ; begin
3837: LD_INT 0
3839: PPUSH
// uc_nation = nation_american ;
3840: LD_ADDR_OWVAR 21
3844: PUSH
3845: LD_INT 1
3847: ST_TO_ADDR
// uc_side = Amici ;
3848: LD_ADDR_OWVAR 20
3852: PUSH
3853: LD_EXP 2
3857: ST_TO_ADDR
// ah = get_human ( sex_male , class_soldier , LEVELY_AMICI [ difficulty ] , David Love ) ;
3858: LD_ADDR_LOC 1
3862: PUSH
3863: LD_INT 1
3865: PPUSH
3866: LD_INT 1
3868: PPUSH
3869: LD_EXP 40
3873: PUSH
3874: LD_OWVAR 67
3878: ARRAY
3879: PPUSH
3880: LD_STRING David Love
3882: PPUSH
3883: CALL 3779 0 4
3887: ST_TO_ADDR
// PlaceUnitXY ( ah , 107 , 63 , false ) ;
3888: LD_LOC 1
3892: PPUSH
3893: LD_INT 107
3895: PPUSH
3896: LD_INT 63
3898: PPUSH
3899: LD_INT 0
3901: PPUSH
3902: CALL_OW 48
// ComMoveXY ( ah , 92 , 56 ) ;
3906: LD_LOC 1
3910: PPUSH
3911: LD_INT 92
3913: PPUSH
3914: LD_INT 56
3916: PPUSH
3917: CALL_OW 111
// ABW1 = ah ;
3921: LD_ADDR_EXP 76
3925: PUSH
3926: LD_LOC 1
3930: ST_TO_ADDR
// AddComEnterUnit ( ah , am_bre1 ) ;
3931: LD_LOC 1
3935: PPUSH
3936: LD_INT 30
3938: PPUSH
3939: CALL_OW 180
// ah = get_human ( sex_male , class_soldier , LEVELY_AMICI [ difficulty ] , John Kraninger ) ;
3943: LD_ADDR_LOC 1
3947: PUSH
3948: LD_INT 1
3950: PPUSH
3951: LD_INT 1
3953: PPUSH
3954: LD_EXP 40
3958: PUSH
3959: LD_OWVAR 67
3963: ARRAY
3964: PPUSH
3965: LD_STRING John Kraninger
3967: PPUSH
3968: CALL 3779 0 4
3972: ST_TO_ADDR
// PlaceUnitXY ( ah , 106 , 65 , false ) ;
3973: LD_LOC 1
3977: PPUSH
3978: LD_INT 106
3980: PPUSH
3981: LD_INT 65
3983: PPUSH
3984: LD_INT 0
3986: PPUSH
3987: CALL_OW 48
// ComMoveXY ( ah , 95 , 61 ) ;
3991: LD_LOC 1
3995: PPUSH
3996: LD_INT 95
3998: PPUSH
3999: LD_INT 61
4001: PPUSH
4002: CALL_OW 111
// AddComEnterUnit ( ah , am_bre2 ) ;
4006: LD_LOC 1
4010: PPUSH
4011: LD_INT 31
4013: PPUSH
4014: CALL_OW 180
// ABW2 = ah ;
4018: LD_ADDR_EXP 77
4022: PUSH
4023: LD_LOC 1
4027: ST_TO_ADDR
// end ;
4028: LD_VAR 0 1
4032: RET
// function get_sex ; begin
4033: LD_INT 0
4035: PPUSH
// if Prob ( 20 ) then
4036: LD_INT 20
4038: PPUSH
4039: CALL_OW 13
4043: IFFALSE 4055
// result = sex_female else
4045: LD_ADDR_VAR 0 1
4049: PUSH
4050: LD_INT 2
4052: ST_TO_ADDR
4053: GO 4063
// result = sex_male ;
4055: LD_ADDR_VAR 0 1
4059: PUSH
4060: LD_INT 1
4062: ST_TO_ADDR
// end ;
4063: LD_VAR 0 1
4067: RET
// export function create_amici_past ; var i ; var a ; var p_vojaku ; begin
4068: LD_INT 0
4070: PPUSH
4071: PPUSH
4072: PPUSH
4073: PPUSH
// a = [ ] ;
4074: LD_ADDR_VAR 0 3
4078: PUSH
4079: EMPTY
4080: ST_TO_ADDR
// p_vojaku = amici_past_pocet [ difficulty ] ;
4081: LD_ADDR_VAR 0 4
4085: PUSH
4086: LD_EXP 41
4090: PUSH
4091: LD_OWVAR 67
4095: ARRAY
4096: ST_TO_ADDR
// a = get_human ( sex_male , class_soldier , LEVELY_AMICI [ difficulty ] + 1 ,  ) ;
4097: LD_ADDR_VAR 0 3
4101: PUSH
4102: LD_INT 1
4104: PPUSH
4105: LD_INT 1
4107: PPUSH
4108: LD_EXP 40
4112: PUSH
4113: LD_OWVAR 67
4117: ARRAY
4118: PUSH
4119: LD_INT 1
4121: PLUS
4122: PPUSH
4123: LD_STRING 
4125: PPUSH
4126: CALL 3779 0 4
4130: ST_TO_ADDR
// for i := 1 to p_vojaku - 1 do
4131: LD_ADDR_VAR 0 2
4135: PUSH
4136: DOUBLE
4137: LD_INT 1
4139: DEC
4140: ST_TO_ADDR
4141: LD_VAR 0 4
4145: PUSH
4146: LD_INT 1
4148: MINUS
4149: PUSH
4150: FOR_TO
4151: IFFALSE 4197
// a = a ^ get_human ( get_sex , class_soldier , LEVELY_AMICI [ difficulty ] + 1 ,  ) ;
4153: LD_ADDR_VAR 0 3
4157: PUSH
4158: LD_VAR 0 3
4162: PUSH
4163: CALL 4033 0 0
4167: PPUSH
4168: LD_INT 1
4170: PPUSH
4171: LD_EXP 40
4175: PUSH
4176: LD_OWVAR 67
4180: ARRAY
4181: PUSH
4182: LD_INT 1
4184: PLUS
4185: PPUSH
4186: LD_STRING 
4188: PPUSH
4189: CALL 3779 0 4
4193: ADD
4194: ST_TO_ADDR
4195: GO 4150
4197: POP
4198: POP
// AMICI_PAST_LIST = a ;
4199: LD_ADDR_EXP 37
4203: PUSH
4204: LD_VAR 0 3
4208: ST_TO_ADDR
// end ;
4209: LD_VAR 0 1
4213: RET
// export function create_amici_staveni_w ; var a ; begin
4214: LD_INT 0
4216: PPUSH
4217: PPUSH
// a = get_human ( get_sex , class_soldier , LEVELY_AMICI [ difficulty ] ,  ) ;
4218: LD_ADDR_VAR 0 2
4222: PUSH
4223: CALL 4033 0 0
4227: PPUSH
4228: LD_INT 1
4230: PPUSH
4231: LD_EXP 40
4235: PUSH
4236: LD_OWVAR 67
4240: ARRAY
4241: PPUSH
4242: LD_STRING 
4244: PPUSH
4245: CALL 3779 0 4
4249: ST_TO_ADDR
// a = a ^ get_human ( get_sex , class_soldier , LEVELY_AMICI [ difficulty ] ,  ) ;
4250: LD_ADDR_VAR 0 2
4254: PUSH
4255: LD_VAR 0 2
4259: PUSH
4260: CALL 4033 0 0
4264: PPUSH
4265: LD_INT 1
4267: PPUSH
4268: LD_EXP 40
4272: PUSH
4273: LD_OWVAR 67
4277: ARRAY
4278: PPUSH
4279: LD_STRING 
4281: PPUSH
4282: CALL 3779 0 4
4286: ADD
4287: ST_TO_ADDR
// a = a ^ get_human ( get_sex , class_engineer , LEVELY_AMICI [ difficulty ] ,  ) ;
4288: LD_ADDR_VAR 0 2
4292: PUSH
4293: LD_VAR 0 2
4297: PUSH
4298: CALL 4033 0 0
4302: PPUSH
4303: LD_INT 2
4305: PPUSH
4306: LD_EXP 40
4310: PUSH
4311: LD_OWVAR 67
4315: ARRAY
4316: PPUSH
4317: LD_STRING 
4319: PPUSH
4320: CALL 3779 0 4
4324: ADD
4325: ST_TO_ADDR
// a = a ^ get_human ( get_sex , class_engineer , LEVELY_AMICI [ difficulty ] ,  ) ;
4326: LD_ADDR_VAR 0 2
4330: PUSH
4331: LD_VAR 0 2
4335: PUSH
4336: CALL 4033 0 0
4340: PPUSH
4341: LD_INT 2
4343: PPUSH
4344: LD_EXP 40
4348: PUSH
4349: LD_OWVAR 67
4353: ARRAY
4354: PPUSH
4355: LD_STRING 
4357: PPUSH
4358: CALL 3779 0 4
4362: ADD
4363: ST_TO_ADDR
// AMICI_STAVENI_BASE_LIST = a ;
4364: LD_ADDR_EXP 38
4368: PUSH
4369: LD_VAR 0 2
4373: ST_TO_ADDR
// end ;
4374: LD_VAR 0 1
4378: RET
// export function vyber_cloveka ( list , cla ) ; var i ; var a ; begin
4379: LD_INT 0
4381: PPUSH
4382: PPUSH
4383: PPUSH
// a = 0 ;
4384: LD_ADDR_VAR 0 5
4388: PUSH
4389: LD_INT 0
4391: ST_TO_ADDR
// for i in list do
4392: LD_ADDR_VAR 0 4
4396: PUSH
4397: LD_VAR 0 1
4401: PUSH
4402: FOR_IN
4403: IFFALSE 4434
// if GetClass ( i ) = cla then
4405: LD_VAR 0 4
4409: PPUSH
4410: CALL_OW 257
4414: PUSH
4415: LD_VAR 0 2
4419: EQUAL
4420: IFFALSE 4432
// a = i ;
4422: LD_ADDR_VAR 0 5
4426: PUSH
4427: LD_VAR 0 4
4431: ST_TO_ADDR
4432: GO 4402
4434: POP
4435: POP
// result = a ;
4436: LD_ADDR_VAR 0 3
4440: PUSH
4441: LD_VAR 0 5
4445: ST_TO_ADDR
// end ;
4446: LD_VAR 0 3
4450: RET
// export function create_utok_na_belkova ; var pom ; begin
4451: LD_INT 0
4453: PPUSH
4454: PPUSH
// uc_side = Amici ;
4455: LD_ADDR_OWVAR 20
4459: PUSH
4460: LD_EXP 2
4464: ST_TO_ADDR
// uc_nation = nation_american ;
4465: LD_ADDR_OWVAR 21
4469: PUSH
4470: LD_INT 1
4472: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , LEVELY_AMICI [ difficulty ] ,  ) ;
4473: LD_ADDR_VAR 0 2
4477: PUSH
4478: CALL 4033 0 0
4482: PPUSH
4483: LD_INT 1
4485: PPUSH
4486: LD_EXP 40
4490: PUSH
4491: LD_OWVAR 67
4495: ARRAY
4496: PPUSH
4497: LD_STRING 
4499: PPUSH
4500: CALL 3779 0 4
4504: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , LEVELY_AMICI [ difficulty ] ,  ) ;
4505: LD_ADDR_VAR 0 2
4509: PUSH
4510: LD_VAR 0 2
4514: PUSH
4515: CALL 4033 0 0
4519: PPUSH
4520: LD_INT 1
4522: PPUSH
4523: LD_EXP 40
4527: PUSH
4528: LD_OWVAR 67
4532: ARRAY
4533: PPUSH
4534: LD_STRING 
4536: PPUSH
4537: CALL 3779 0 4
4541: ADD
4542: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , LEVELY_AMICI [ difficulty ] ,  ) ;
4543: LD_ADDR_VAR 0 2
4547: PUSH
4548: LD_VAR 0 2
4552: PUSH
4553: CALL 4033 0 0
4557: PPUSH
4558: LD_INT 1
4560: PPUSH
4561: LD_EXP 40
4565: PUSH
4566: LD_OWVAR 67
4570: ARRAY
4571: PPUSH
4572: LD_STRING 
4574: PPUSH
4575: CALL 3779 0 4
4579: ADD
4580: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , LEVELY_AMICI [ difficulty ] ,  ) ;
4581: LD_ADDR_VAR 0 2
4585: PUSH
4586: LD_VAR 0 2
4590: PUSH
4591: CALL 4033 0 0
4595: PPUSH
4596: LD_INT 1
4598: PPUSH
4599: LD_EXP 40
4603: PUSH
4604: LD_OWVAR 67
4608: ARRAY
4609: PPUSH
4610: LD_STRING 
4612: PPUSH
4613: CALL 3779 0 4
4617: ADD
4618: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , LEVELY_AMICI [ difficulty ] ,  ) ;
4619: LD_ADDR_VAR 0 2
4623: PUSH
4624: LD_VAR 0 2
4628: PUSH
4629: CALL 4033 0 0
4633: PPUSH
4634: LD_INT 1
4636: PPUSH
4637: LD_EXP 40
4641: PUSH
4642: LD_OWVAR 67
4646: ARRAY
4647: PPUSH
4648: LD_STRING 
4650: PPUSH
4651: CALL 3779 0 4
4655: ADD
4656: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , LEVELY_AMICI [ difficulty ] ,  ) ;
4657: LD_ADDR_VAR 0 2
4661: PUSH
4662: LD_VAR 0 2
4666: PUSH
4667: CALL 4033 0 0
4671: PPUSH
4672: LD_INT 1
4674: PPUSH
4675: LD_EXP 40
4679: PUSH
4680: LD_OWVAR 67
4684: ARRAY
4685: PPUSH
4686: LD_STRING 
4688: PPUSH
4689: CALL 3779 0 4
4693: ADD
4694: ST_TO_ADDR
// AMICI_UTOK_BELKOV_LIST = pom ;
4695: LD_ADDR_EXP 39
4699: PUSH
4700: LD_VAR 0 2
4704: ST_TO_ADDR
// end ;
4705: LD_VAR 0 1
4709: RET
// export function create_vojaci_zacatek ; var pom_gny ; begin
4710: LD_INT 0
4712: PPUSH
4713: PPUSH
// uc_nation = nation_russian ;
4714: LD_ADDR_OWVAR 21
4718: PUSH
4719: LD_INT 3
4721: ST_TO_ADDR
// uc_side = You ;
4722: LD_ADDR_OWVAR 20
4726: PUSH
4727: LD_EXP 1
4731: ST_TO_ADDR
// SetSide ( Kurin , You2 ) ;
4732: LD_EXP 53
4736: PPUSH
4737: LD_EXP 4
4741: PPUSH
4742: CALL_OW 235
// PlaceUnitXY ( kurin , 121 , 101 , false ) ;
4746: LD_EXP 53
4750: PPUSH
4751: LD_INT 121
4753: PPUSH
4754: LD_INT 101
4756: PPUSH
4757: LD_INT 0
4759: PPUSH
4760: CALL_OW 48
// Setclass ( bel , class_soldier ) ;
4764: LD_EXP 52
4768: PPUSH
4769: LD_INT 1
4771: PPUSH
4772: CALL_OW 336
// SetSide ( bel , You2 ) ;
4776: LD_EXP 52
4780: PPUSH
4781: LD_EXP 4
4785: PPUSH
4786: CALL_OW 235
// PlaceUnitXY ( bel , 121 , 104 , false ) ;
4790: LD_EXP 52
4794: PPUSH
4795: LD_INT 121
4797: PPUSH
4798: LD_INT 104
4800: PPUSH
4801: LD_INT 0
4803: PPUSH
4804: CALL_OW 48
// SetSide ( kov , You ) ;
4808: LD_EXP 51
4812: PPUSH
4813: LD_EXP 1
4817: PPUSH
4818: CALL_OW 235
// PlaceUnitXY ( kov , 126 , 105 , false ) ;
4822: LD_EXP 51
4826: PPUSH
4827: LD_INT 126
4829: PPUSH
4830: LD_INT 105
4832: PPUSH
4833: LD_INT 0
4835: PPUSH
4836: CALL_OW 48
// SetClass ( bur , class_mechanic ) ;
4840: LD_EXP 50
4844: PPUSH
4845: LD_INT 3
4847: PPUSH
4848: CALL_OW 336
// SetSide ( bur , You ) ;
4852: LD_EXP 50
4856: PPUSH
4857: LD_EXP 1
4861: PPUSH
4862: CALL_OW 235
// PlaceUnitXY ( bur , 124 , 105 , false ) ;
4866: LD_EXP 50
4870: PPUSH
4871: LD_INT 124
4873: PPUSH
4874: LD_INT 105
4876: PPUSH
4877: LD_INT 0
4879: PPUSH
4880: CALL_OW 48
// if gny <> 0 then
4884: LD_EXP 49
4888: PUSH
4889: LD_INT 0
4891: NONEQUAL
4892: IFFALSE 4940
// begin SetClass ( gny , class_soldier ) ;
4894: LD_EXP 49
4898: PPUSH
4899: LD_INT 1
4901: PPUSH
4902: CALL_OW 336
// SetSide ( gny , You ) ;
4906: LD_EXP 49
4910: PPUSH
4911: LD_EXP 1
4915: PPUSH
4916: CALL_OW 235
// PlaceUnitXY ( gny , 120 , 103 , false ) ;
4920: LD_EXP 49
4924: PPUSH
4925: LD_INT 120
4927: PPUSH
4928: LD_INT 103
4930: PPUSH
4931: LD_INT 0
4933: PPUSH
4934: CALL_OW 48
// end else
4938: GO 4980
// begin pom_gny = get_human ( sex_male , class_soldier , 2 ,  ) ;
4940: LD_ADDR_VAR 0 2
4944: PUSH
4945: LD_INT 1
4947: PPUSH
4948: LD_INT 1
4950: PPUSH
4951: LD_INT 2
4953: PPUSH
4954: LD_STRING 
4956: PPUSH
4957: CALL 3779 0 4
4961: ST_TO_ADDR
// PlaceUnitXY ( pom_gny , 120 , 103 , false ) ;
4962: LD_VAR 0 2
4966: PPUSH
4967: LD_INT 120
4969: PPUSH
4970: LD_INT 103
4972: PPUSH
4973: LD_INT 0
4975: PPUSH
4976: CALL_OW 48
// end ; SetSide ( plat , You3 ) ;
4980: LD_EXP 54
4984: PPUSH
4985: LD_EXP 6
4989: PPUSH
4990: CALL_OW 235
// PlaceUnitXY ( plat , 66 , 90 , false ) ;
4994: LD_EXP 54
4998: PPUSH
4999: LD_INT 66
5001: PPUSH
5002: LD_INT 90
5004: PPUSH
5005: LD_INT 0
5007: PPUSH
5008: CALL_OW 48
// end ;
5012: LD_VAR 0 1
5016: RET
// export function nacti_osobu ( ident ) ; begin
5017: LD_INT 0
5019: PPUSH
// if CheckCharacterSet ( ident ) then
5020: LD_VAR 0 1
5024: PPUSH
5025: CALL_OW 29
5029: IFFALSE 5048
// result := CreateCharacter ( ident ) else
5031: LD_ADDR_VAR 0 2
5035: PUSH
5036: LD_VAR 0 1
5040: PPUSH
5041: CALL_OW 34
5045: ST_TO_ADDR
5046: GO 5056
// result := 0 ;
5048: LD_ADDR_VAR 0 2
5052: PUSH
5053: LD_INT 0
5055: ST_TO_ADDR
// end ;
5056: LD_VAR 0 2
5060: RET
// export function place_amik_k_videni ; begin
5061: LD_INT 0
5063: PPUSH
// uc_side = Amici ;
5064: LD_ADDR_OWVAR 20
5068: PUSH
5069: LD_EXP 2
5073: ST_TO_ADDR
// uc_nation = nation_american ;
5074: LD_ADDR_OWVAR 21
5078: PUSH
5079: LD_INT 1
5081: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , 3 ,  ) ;
5082: LD_ADDR_LOC 1
5086: PUSH
5087: CALL 4033 0 0
5091: PPUSH
5092: LD_INT 1
5094: PPUSH
5095: LD_INT 3
5097: PPUSH
5098: LD_STRING 
5100: PPUSH
5101: CALL 3779 0 4
5105: ST_TO_ADDR
// PlaceUnitXYR ( ah , 72 , 28 , 3 , false ) ;
5106: LD_LOC 1
5110: PPUSH
5111: LD_INT 72
5113: PPUSH
5114: LD_INT 28
5116: PPUSH
5117: LD_INT 3
5119: PPUSH
5120: LD_INT 0
5122: PPUSH
5123: CALL_OW 50
// result := ah ;
5127: LD_ADDR_VAR 0 1
5131: PUSH
5132: LD_LOC 1
5136: ST_TO_ADDR
// end ;
5137: LD_VAR 0 1
5141: RET
// every 0 0$1 trigger GetLives ( plat ) < 1000 do
5142: LD_EXP 54
5146: PPUSH
5147: CALL_OW 256
5151: PUSH
5152: LD_INT 1000
5154: LESS
5155: IFFALSE 5173
5157: GO 5159
5159: DISABLE
// begin enable ;
5160: ENABLE
// SetLives ( plat , 1000 ) ;
5161: LD_EXP 54
5165: PPUSH
5166: LD_INT 1000
5168: PPUSH
5169: CALL_OW 234
// end ; end_of_file
5173: END
// export LEVELY_AMICI ; export amici_past_pocet ; export procento_odkrytych_pro_vyhru ; export cas_na_zachranu_belkova ; export levely_bw_na_zapade ; export levely_bw_na_vychode ; export BELKOV_MRTVY ; export function set_difficulty ; begin
5174: LD_INT 0
5176: PPUSH
// LEVELY_AMICI = [ 1 , 2 , 3 ] ;
5177: LD_ADDR_EXP 40
5181: PUSH
5182: LD_INT 1
5184: PUSH
5185: LD_INT 2
5187: PUSH
5188: LD_INT 3
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: LIST
5195: ST_TO_ADDR
// amici_past_pocet = [ 3 , 5 , 7 ] ;
5196: LD_ADDR_EXP 41
5200: PUSH
5201: LD_INT 3
5203: PUSH
5204: LD_INT 5
5206: PUSH
5207: LD_INT 7
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: LIST
5214: ST_TO_ADDR
// procento_odkrytych_pro_vyhru = [ 3400 , 3600 , 3800 ] ;
5215: LD_ADDR_EXP 42
5219: PUSH
5220: LD_INT 3400
5222: PUSH
5223: LD_INT 3600
5225: PUSH
5226: LD_INT 3800
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: LIST
5233: ST_TO_ADDR
// cas_na_zachranu_belkova = [ 20 20$0 , 15 15$0 , 10 10$0 ] ;
5234: LD_ADDR_EXP 43
5238: PUSH
5239: LD_INT 42000
5241: PUSH
5242: LD_INT 31500
5244: PUSH
5245: LD_INT 21000
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: LIST
5252: ST_TO_ADDR
// levely_bw_na_zapade = [ 1 , 2 , 3 ] ;
5253: LD_ADDR_EXP 44
5257: PUSH
5258: LD_INT 1
5260: PUSH
5261: LD_INT 2
5263: PUSH
5264: LD_INT 3
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: LIST
5271: ST_TO_ADDR
// levely_bw_na_vychode = [ 1 , 2 , 3 ] ;
5272: LD_ADDR_EXP 45
5276: PUSH
5277: LD_INT 1
5279: PUSH
5280: LD_INT 2
5282: PUSH
5283: LD_INT 3
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: LIST
5290: ST_TO_ADDR
// end ;
5291: LD_VAR 0 1
5295: RET
// every 0 0$0.1 do
5296: GO 5298
5298: DISABLE
// begin SetBName ( RU1_dep , kirov ) ;
5299: LD_INT 1
5301: PPUSH
5302: LD_STRING kirov
5304: PPUSH
5305: CALL_OW 500
// SetBName ( RU2_dep , beria ) ;
5309: LD_INT 26
5311: PPUSH
5312: LD_STRING beria
5314: PPUSH
5315: CALL_OW 500
// end ; end_of_file
5319: END
// var prilis_na_north ; var is_out_base ; var wasattack ; var ridic_1_auta ; var je_mimo ; var byl_v_zakladne ; var kecal_s_platonovem ; var znicene_bw ; var bw_e_nasli ; var cont_mission ; var kecy_bw_w ; export navrat_a_konec ; export belkov_solved ; var skurveny_mission_objectiv_uz_prosel ; var konstanta_utoceni ; var kecy_pri_vraceni_belkova ; every 0 0$0.1 do var i ;
5320: GO 5322
5322: DISABLE
5323: LD_INT 0
5325: PPUSH
// begin prilis_na_north = [ 1 , 2 , 4 , 5 , 6 ] ;
5326: LD_ADDR_LOC 3
5330: PUSH
5331: LD_INT 1
5333: PUSH
5334: LD_INT 2
5336: PUSH
5337: LD_INT 4
5339: PUSH
5340: LD_INT 5
5342: PUSH
5343: LD_INT 6
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: ST_TO_ADDR
// is_out_base = [ 3 ] ;
5353: LD_ADDR_LOC 4
5357: PUSH
5358: LD_INT 3
5360: PUSH
5361: EMPTY
5362: LIST
5363: ST_TO_ADDR
// bw_e_nasli = false ;
5364: LD_ADDR_LOC 11
5368: PUSH
5369: LD_INT 0
5371: ST_TO_ADDR
// kecy_bw_w = false ;
5372: LD_ADDR_LOC 13
5376: PUSH
5377: LD_INT 0
5379: ST_TO_ADDR
// wasattack = false ;
5380: LD_ADDR_LOC 5
5384: PUSH
5385: LD_INT 0
5387: ST_TO_ADDR
// je_mimo = false ;
5388: LD_ADDR_LOC 7
5392: PUSH
5393: LD_INT 0
5395: ST_TO_ADDR
// byl_v_zakladne = false ;
5396: LD_ADDR_LOC 8
5400: PUSH
5401: LD_INT 0
5403: ST_TO_ADDR
// kecal_s_platonovem = false ;
5404: LD_ADDR_LOC 9
5408: PUSH
5409: LD_INT 0
5411: ST_TO_ADDR
// znicene_bw = false ;
5412: LD_ADDR_LOC 10
5416: PUSH
5417: LD_INT 0
5419: ST_TO_ADDR
// belkov_solved = 1 ;
5420: LD_ADDR_EXP 48
5424: PUSH
5425: LD_INT 1
5427: ST_TO_ADDR
// konstanta_utoceni = 0 ;
5428: LD_ADDR_LOC 15
5432: PUSH
5433: LD_INT 0
5435: ST_TO_ADDR
// navrat_a_konec = false ;
5436: LD_ADDR_EXP 47
5440: PUSH
5441: LD_INT 0
5443: ST_TO_ADDR
// cont_mission = false ;
5444: LD_ADDR_LOC 12
5448: PUSH
5449: LD_INT 0
5451: ST_TO_ADDR
// skurveny_mission_objectiv_uz_prosel = false ;
5452: LD_ADDR_LOC 14
5456: PUSH
5457: LD_INT 0
5459: ST_TO_ADDR
// kecy_pri_vraceni_belkova = 0 ;
5460: LD_ADDR_LOC 16
5464: PUSH
5465: LD_INT 0
5467: ST_TO_ADDR
// for i in [ 991 , 992 ] do
5468: LD_ADDR_VAR 0 1
5472: PUSH
5473: LD_INT 991
5475: PUSH
5476: LD_INT 992
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: PUSH
5483: FOR_IN
5484: IFFALSE 5493
// disable ( i ) ;
5486: LD_VAR 0 1
5490: DISABLE_MARKED
5491: GO 5483
5493: POP
5494: POP
// end ;
5495: PPOPN 1
5497: END
// every 0 0$3 do
5498: GO 5500
5500: DISABLE
// begin ComTurnUnit ( kurin , bur ) ;
5501: LD_EXP 53
5505: PPUSH
5506: LD_EXP 50
5510: PPUSH
5511: CALL_OW 119
// ComTurnUnit ( bur , kurin ) ;
5515: LD_EXP 50
5519: PPUSH
5520: LD_EXP 53
5524: PPUSH
5525: CALL_OW 119
// Say ( kurin , D1-Kur-1 ) ;
5529: LD_EXP 53
5533: PPUSH
5534: LD_STRING D1-Kur-1
5536: PPUSH
5537: CALL_OW 88
// Say ( bur , D1-Bur-1 ) ;
5541: LD_EXP 50
5545: PPUSH
5546: LD_STRING D1-Bur-1
5548: PPUSH
5549: CALL_OW 88
// Say ( kurin , D1-Kur-2 ) ;
5553: LD_EXP 53
5557: PPUSH
5558: LD_STRING D1-Kur-2
5560: PPUSH
5561: CALL_OW 88
// Say ( bur , D1-Bur-2 ) ;
5565: LD_EXP 50
5569: PPUSH
5570: LD_STRING D1-Bur-2
5572: PPUSH
5573: CALL_OW 88
// Say ( kurin , D1-Kur-3 ) ;
5577: LD_EXP 53
5581: PPUSH
5582: LD_STRING D1-Kur-3
5584: PPUSH
5585: CALL_OW 88
// if gny <> 0 then
5589: LD_EXP 49
5593: PUSH
5594: LD_INT 0
5596: NONEQUAL
5597: IFFALSE 5611
// Say ( kurin , D1-Kur-3a ) ;
5599: LD_EXP 53
5603: PPUSH
5604: LD_STRING D1-Kur-3a
5606: PPUSH
5607: CALL_OW 88
// SaveForQuickRestart ;
5611: CALL_OW 22
// wait ( 0 0$1 ) ;
5615: LD_INT 35
5617: PPUSH
5618: CALL_OW 67
// ChangeMissionObjectives ( M1 ) ;
5622: LD_STRING M1
5624: PPUSH
5625: CALL_OW 337
// InGameOff ;
5629: CALL_OW 9
// stav = 1 ;
5633: LD_ADDR_EXP 60
5637: PUSH
5638: LD_INT 1
5640: ST_TO_ADDR
// enable ( 991 ) ;
5641: LD_INT 991
5643: ENABLE_MARKED
// end ;
5644: END
// every 0 0$1 trigger SeeXY ( You , 69 , 83 ) or SeeXY ( You , 73 , 96 ) and ( not kecal_s_platonovem ) do var pom ; var sq ;
5645: LD_EXP 1
5649: PPUSH
5650: LD_INT 69
5652: PPUSH
5653: LD_INT 83
5655: PPUSH
5656: CALL_OW 293
5660: PUSH
5661: LD_EXP 1
5665: PPUSH
5666: LD_INT 73
5668: PPUSH
5669: LD_INT 96
5671: PPUSH
5672: CALL_OW 293
5676: PUSH
5677: LD_LOC 9
5681: NOT
5682: AND
5683: OR
5684: IFFALSE 5780
5686: GO 5688
5688: DISABLE
5689: LD_INT 0
5691: PPUSH
5692: PPUSH
// begin DialogueOn ;
5693: CALL_OW 6
// if SeeXY ( You , 71 , 84 ) then
5697: LD_EXP 1
5701: PPUSH
5702: LD_INT 71
5704: PPUSH
5705: LD_INT 84
5707: PPUSH
5708: CALL_OW 293
5712: IFFALSE 5724
// pom = Ru2_vb1 else
5714: LD_ADDR_VAR 0 1
5718: PUSH
5719: LD_INT 9
5721: ST_TO_ADDR
5722: GO 5732
// pom = Ru2_vb2 ;
5724: LD_ADDR_VAR 0 1
5728: PUSH
5729: LD_INT 10
5731: ST_TO_ADDR
// Say ( pom , D2-RSol1-1 ) ;
5732: LD_VAR 0 1
5736: PPUSH
5737: LD_STRING D2-RSol1-1
5739: PPUSH
5740: CALL_OW 88
// Say ( bur , D2-Bur-1 ) ;
5744: LD_EXP 50
5748: PPUSH
5749: LD_STRING D2-Bur-1
5751: PPUSH
5752: CALL_OW 88
// Say ( pom , D2-RSol1-2 ) ;
5756: LD_VAR 0 1
5760: PPUSH
5761: LD_STRING D2-RSol1-2
5763: PPUSH
5764: CALL_OW 88
// stav = 2 ;
5768: LD_ADDR_EXP 60
5772: PUSH
5773: LD_INT 2
5775: ST_TO_ADDR
// DialogueOff ;
5776: CALL_OW 7
// end ;
5780: PPOPN 2
5782: END
// every 0 0$1 trigger IsInArea ( bur , near_plat ) do
5783: LD_EXP 50
5787: PPUSH
5788: LD_INT 5
5790: PPUSH
5791: CALL_OW 308
5795: IFFALSE 6149
5797: GO 5799
5799: DISABLE
// begin kecal_s_platonovem = true ;
5800: LD_ADDR_LOC 9
5804: PUSH
5805: LD_INT 1
5807: ST_TO_ADDR
// DialogueOn ;
5808: CALL_OW 6
// ComHold ( bur ) ;
5812: LD_EXP 50
5816: PPUSH
5817: CALL_OW 140
// ComTurnUnit ( plat , bur ) ;
5821: LD_EXP 54
5825: PPUSH
5826: LD_EXP 50
5830: PPUSH
5831: CALL_OW 119
// AddComTurnUnit ( bur , plat ) ;
5835: LD_EXP 50
5839: PPUSH
5840: LD_EXP 54
5844: PPUSH
5845: CALL_OW 179
// Say ( plat , D2-Pla-2 ) ;
5849: LD_EXP 54
5853: PPUSH
5854: LD_STRING D2-Pla-2
5856: PPUSH
5857: CALL_OW 88
// Say ( bur , D2-Bur-2 ) ;
5861: LD_EXP 50
5865: PPUSH
5866: LD_STRING D2-Bur-2
5868: PPUSH
5869: CALL_OW 88
// Say ( plat , D2-Pla-3 ) ;
5873: LD_EXP 54
5877: PPUSH
5878: LD_STRING D2-Pla-3
5880: PPUSH
5881: CALL_OW 88
// Say ( bur , D2-Bur-3 ) ;
5885: LD_EXP 50
5889: PPUSH
5890: LD_STRING D2-Bur-3
5892: PPUSH
5893: CALL_OW 88
// Say ( plat , D2-Pla-4 ) ;
5897: LD_EXP 54
5901: PPUSH
5902: LD_STRING D2-Pla-4
5904: PPUSH
5905: CALL_OW 88
// Say ( bur , D2-Bur-4 ) ;
5909: LD_EXP 50
5913: PPUSH
5914: LD_STRING D2-Bur-4
5916: PPUSH
5917: CALL_OW 88
// Say ( plat , D2-Pla-5 ) ;
5921: LD_EXP 54
5925: PPUSH
5926: LD_STRING D2-Pla-5
5928: PPUSH
5929: CALL_OW 88
// info_q ( [ 1 , 2 , 3 , 4 ] ) ;
5933: LD_INT 1
5935: PUSH
5936: LD_INT 2
5938: PUSH
5939: LD_INT 3
5941: PUSH
5942: LD_INT 4
5944: PUSH
5945: EMPTY
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: PPUSH
5951: CALL 6150 0 1
// Say ( plat , D3-Pla-1 ) ;
5955: LD_EXP 54
5959: PPUSH
5960: LD_STRING D3-Pla-1
5962: PPUSH
5963: CALL_OW 88
// Say ( bur , D3-Bur-1 ) ;
5967: LD_EXP 50
5971: PPUSH
5972: LD_STRING D3-Bur-1
5974: PPUSH
5975: CALL_OW 88
// ChangeMissionObjectives ( M2a ) ;
5979: LD_STRING M2a
5981: PPUSH
5982: CALL_OW 337
// Hint ( Base ) ;
5986: LD_STRING Base
5988: PPUSH
5989: CALL_OW 339
// Hint ( Depot ) ;
5993: LD_STRING Depot
5995: PPUSH
5996: CALL_OW 339
// Hint ( Construction ) ;
6000: LD_STRING Construction
6002: PPUSH
6003: CALL_OW 339
// DialogueOff ;
6007: CALL_OW 7
// ComFree ( plat ) ;
6011: LD_EXP 54
6015: PPUSH
6016: CALL_OW 139
// AddComFree ( bur ) ;
6020: LD_EXP 50
6024: PPUSH
6025: CALL_OW 199
// stav = 3 ;
6029: LD_ADDR_EXP 60
6033: PUSH
6034: LD_INT 3
6036: ST_TO_ADDR
// SetSide ( RU2_dep , You ) ;
6037: LD_INT 26
6039: PPUSH
6040: LD_EXP 1
6044: PPUSH
6045: CALL_OW 235
// SetSide ( plat , You2 ) ;
6049: LD_EXP 54
6053: PPUSH
6054: LD_EXP 4
6058: PPUSH
6059: CALL_OW 235
// SetSide ( RU2_bu1 , You2 ) ;
6063: LD_INT 4
6065: PPUSH
6066: LD_EXP 4
6070: PPUSH
6071: CALL_OW 235
// SetSide ( RU2_bu2 , You2 ) ;
6075: LD_INT 11
6077: PPUSH
6078: LD_EXP 4
6082: PPUSH
6083: CALL_OW 235
// SetSide ( RU2_vb1 , You2 ) ;
6087: LD_INT 9
6089: PPUSH
6090: LD_EXP 4
6094: PPUSH
6095: CALL_OW 235
// SetSide ( RU2_vb2 , You2 ) ;
6099: LD_INT 10
6101: PPUSH
6102: LD_EXP 4
6106: PPUSH
6107: CALL_OW 235
// SetSide ( RU2_hv1 , You2 ) ;
6111: LD_INT 15
6113: PPUSH
6114: LD_EXP 4
6118: PPUSH
6119: CALL_OW 235
// SetSide ( RU2_hv2 , You2 ) ;
6123: LD_INT 16
6125: PPUSH
6126: LD_EXP 4
6130: PPUSH
6131: CALL_OW 235
// ComStop ( RU2_hv1 ) ;
6135: LD_INT 15
6137: PPUSH
6138: CALL_OW 141
// ComStop ( RU2_hv2 ) ;
6142: LD_INT 16
6144: PPUSH
6145: CALL_OW 141
// end ;
6149: END
// function info_q ( q ) ; var pom ; var q1 ; begin
6150: LD_INT 0
6152: PPUSH
6153: PPUSH
6154: PPUSH
// pom = SelectiveQuery ( QMoreInfo , q ) ;
6155: LD_ADDR_VAR 0 3
6159: PUSH
6160: LD_STRING QMoreInfo
6162: PPUSH
6163: LD_VAR 0 1
6167: PPUSH
6168: CALL_OW 98
6172: ST_TO_ADDR
// case pom of 1 :
6173: LD_VAR 0 3
6177: PUSH
6178: LD_INT 1
6180: DOUBLE
6181: EQUAL
6182: IFTRUE 6186
6184: GO 6246
6186: POP
// begin Say ( bur , D2a-Bur-1 ) ;
6187: LD_EXP 50
6191: PPUSH
6192: LD_STRING D2a-Bur-1
6194: PPUSH
6195: CALL_OW 88
// Say ( plat , D2a-Pla-1 ) ;
6199: LD_EXP 54
6203: PPUSH
6204: LD_STRING D2a-Pla-1
6206: PPUSH
6207: CALL_OW 88
// q1 = q diff 1 ;
6211: LD_ADDR_VAR 0 4
6215: PUSH
6216: LD_VAR 0 1
6220: PUSH
6221: LD_INT 1
6223: DIFF
6224: ST_TO_ADDR
// if q1 >= 2 then
6225: LD_VAR 0 4
6229: PUSH
6230: LD_INT 2
6232: GREATEREQUAL
6233: IFFALSE 6244
// info_q ( q1 ) ;
6235: LD_VAR 0 4
6239: PPUSH
6240: CALL 6150 0 1
// end ; 2 :
6244: GO 6383
6246: LD_INT 2
6248: DOUBLE
6249: EQUAL
6250: IFTRUE 6254
6252: GO 6314
6254: POP
// begin Say ( bur , D2b-Bur-1 ) ;
6255: LD_EXP 50
6259: PPUSH
6260: LD_STRING D2b-Bur-1
6262: PPUSH
6263: CALL_OW 88
// Say ( plat , D2b-Pla-1 ) ;
6267: LD_EXP 54
6271: PPUSH
6272: LD_STRING D2b-Pla-1
6274: PPUSH
6275: CALL_OW 88
// q1 = q diff 2 ;
6279: LD_ADDR_VAR 0 4
6283: PUSH
6284: LD_VAR 0 1
6288: PUSH
6289: LD_INT 2
6291: DIFF
6292: ST_TO_ADDR
// if q1 >= 2 then
6293: LD_VAR 0 4
6297: PUSH
6298: LD_INT 2
6300: GREATEREQUAL
6301: IFFALSE 6312
// info_q ( q1 ) ;
6303: LD_VAR 0 4
6307: PPUSH
6308: CALL 6150 0 1
// end ; 3 :
6312: GO 6383
6314: LD_INT 3
6316: DOUBLE
6317: EQUAL
6318: IFTRUE 6322
6320: GO 6382
6322: POP
// begin Say ( bur , D2c-Bur-1 ) ;
6323: LD_EXP 50
6327: PPUSH
6328: LD_STRING D2c-Bur-1
6330: PPUSH
6331: CALL_OW 88
// Say ( plat , D2c-Pla-1 ) ;
6335: LD_EXP 54
6339: PPUSH
6340: LD_STRING D2c-Pla-1
6342: PPUSH
6343: CALL_OW 88
// q1 = q diff 3 ;
6347: LD_ADDR_VAR 0 4
6351: PUSH
6352: LD_VAR 0 1
6356: PUSH
6357: LD_INT 3
6359: DIFF
6360: ST_TO_ADDR
// if q1 >= 2 then
6361: LD_VAR 0 4
6365: PUSH
6366: LD_INT 2
6368: GREATEREQUAL
6369: IFFALSE 6380
// info_q ( q1 ) ;
6371: LD_VAR 0 4
6375: PPUSH
6376: CALL 6150 0 1
// end ; end ;
6380: GO 6383
6382: POP
// end ;
6383: LD_VAR 0 2
6387: RET
// every 0 0$1 trigger stav in prilis_na_north do var pom ;
6388: LD_EXP 60
6392: PUSH
6393: LD_LOC 3
6397: IN
6398: IFFALSE 6553
6400: GO 6402
6402: DISABLE
6403: LD_INT 0
6405: PPUSH
// begin pom = FilterUnitsInArea ( Upozarea , [ [ f_side , You ] ] ) ;
6406: LD_ADDR_VAR 0 1
6410: PUSH
6411: LD_INT 2
6413: PPUSH
6414: LD_INT 22
6416: PUSH
6417: LD_EXP 1
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: PUSH
6426: EMPTY
6427: LIST
6428: PPUSH
6429: CALL_OW 70
6433: ST_TO_ADDR
// if pom > 0 then
6434: LD_VAR 0 1
6438: PUSH
6439: LD_INT 0
6441: GREATER
6442: IFFALSE 6552
// begin ComHold ( pom ) ;
6444: LD_VAR 0 1
6448: PPUSH
6449: CALL_OW 140
// DialogueOn ;
6453: CALL_OW 6
// posli_lidi_zpet ;
6457: CALL 16254 0 0
// if bur in pom then
6461: LD_EXP 50
6465: PUSH
6466: LD_VAR 0 1
6470: IN
6471: IFFALSE 6487
// Say ( Bur , D1b-Bur-1 ) else
6473: LD_EXP 50
6477: PPUSH
6478: LD_STRING D1b-Bur-1
6480: PPUSH
6481: CALL_OW 88
6485: GO 6499
// Say ( Kov , D1b-Kov-1 ) ;
6487: LD_EXP 51
6491: PPUSH
6492: LD_STRING D1b-Kov-1
6494: PPUSH
6495: CALL_OW 88
// DialogueOff ;
6499: CALL_OW 7
// InGameOn ;
6503: CALL_OW 8
// while FilterUnitsInArea ( Upozarea , [ [ f_side , You ] ] ) <> 0 do
6507: LD_INT 2
6509: PPUSH
6510: LD_INT 22
6512: PUSH
6513: LD_EXP 1
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: PUSH
6522: EMPTY
6523: LIST
6524: PPUSH
6525: CALL_OW 70
6529: PUSH
6530: LD_INT 0
6532: NONEQUAL
6533: IFFALSE 6548
// begin wait ( 0 0$2 ) ;
6535: LD_INT 70
6537: PPUSH
6538: CALL_OW 67
// posli_lidi_zpet ;
6542: CALL 16254 0 0
// end ;
6546: GO 6507
// InGameOff ;
6548: CALL_OW 9
// end ; enable ;
6552: ENABLE
// end ;
6553: PPOPN 1
6555: END
// every 0 0$1 trigger FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_lab ] ] ) = 1 do var pom , pom1 ;
6556: LD_INT 1
6558: PPUSH
6559: LD_INT 22
6561: PUSH
6562: LD_EXP 1
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: LD_INT 30
6573: PUSH
6574: LD_INT 6
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: PPUSH
6585: CALL_OW 70
6589: PUSH
6590: LD_INT 1
6592: EQUAL
6593: IFFALSE 6840
6595: GO 6597
6597: DISABLE
6598: LD_INT 0
6600: PPUSH
6601: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_lab ] ] ) ;
6602: LD_ADDR_VAR 0 1
6606: PUSH
6607: LD_INT 1
6609: PPUSH
6610: LD_INT 22
6612: PUSH
6613: LD_EXP 1
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PUSH
6622: LD_INT 30
6624: PUSH
6625: LD_INT 6
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: PPUSH
6636: CALL_OW 70
6640: ST_TO_ADDR
// pom1 = 7 ;
6641: LD_ADDR_VAR 0 2
6645: PUSH
6646: LD_INT 7
6648: ST_TO_ADDR
// while IsConstructed ( pom [ 1 ] ) <> 0 do
6649: LD_VAR 0 1
6653: PUSH
6654: LD_INT 1
6656: ARRAY
6657: PPUSH
6658: CALL_OW 304
6662: PUSH
6663: LD_INT 0
6665: NONEQUAL
6666: IFFALSE 6677
// wait ( 0 0$2 ) ;
6668: LD_INT 70
6670: PPUSH
6671: CALL_OW 67
6675: GO 6649
// DialogueOn ;
6677: CALL_OW 6
// Hint ( Laboratory ) ;
6681: LD_STRING Laboratory
6683: PPUSH
6684: CALL_OW 339
// Hint ( Healing ) ;
6688: LD_STRING Healing
6690: PPUSH
6691: CALL_OW 339
// Say ( bur , D5a-Bur-1 ) ;
6695: LD_EXP 50
6699: PPUSH
6700: LD_STRING D5a-Bur-1
6702: PPUSH
6703: CALL_OW 88
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_workshop ] ] ) ;
6707: LD_ADDR_VAR 0 1
6711: PUSH
6712: LD_INT 1
6714: PPUSH
6715: LD_INT 22
6717: PUSH
6718: LD_EXP 1
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PUSH
6727: LD_INT 30
6729: PUSH
6730: LD_INT 2
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PPUSH
6741: CALL_OW 70
6745: ST_TO_ADDR
// if pom > 0 then
6746: LD_VAR 0 1
6750: PUSH
6751: LD_INT 0
6753: GREATER
6754: IFFALSE 6775
// pom1 = IsConstructed ( pom [ 1 ] ) ;
6756: LD_ADDR_VAR 0 2
6760: PUSH
6761: LD_VAR 0 1
6765: PUSH
6766: LD_INT 1
6768: ARRAY
6769: PPUSH
6770: CALL_OW 304
6774: ST_TO_ADDR
// if pom1 = 0 then
6775: LD_VAR 0 2
6779: PUSH
6780: LD_INT 0
6782: EQUAL
6783: IFFALSE 6817
// begin Say ( plat , D5a-Pla-1 ) ;
6785: LD_EXP 54
6789: PPUSH
6790: LD_STRING D5a-Pla-1
6792: PPUSH
6793: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
6797: LD_STRING M2
6799: PPUSH
6800: CALL_OW 337
// pokracovani_rozhovoru ;
6804: CALL 7150 0 0
// Hint ( BuildingVehicles ) ;
6808: LD_STRING BuildingVehicles
6810: PPUSH
6811: CALL_OW 339
// end else
6815: GO 6836
// begin Say ( plat , D5a-Pla-1a ) ;
6817: LD_EXP 54
6821: PPUSH
6822: LD_STRING D5a-Pla-1a
6824: PPUSH
6825: CALL_OW 88
// ChangeMissionObjectives ( M2b ) ;
6829: LD_STRING M2b
6831: PPUSH
6832: CALL_OW 337
// end ; DialogueOff ;
6836: CALL_OW 7
// end ;
6840: PPOPN 2
6842: END
// every 0 0$1 trigger FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_workshop ] ] ) = 1 do var pom , pom1 ;
6843: LD_INT 1
6845: PPUSH
6846: LD_INT 22
6848: PUSH
6849: LD_EXP 1
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PUSH
6858: LD_INT 30
6860: PUSH
6861: LD_INT 2
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: PPUSH
6872: CALL_OW 70
6876: PUSH
6877: LD_INT 1
6879: EQUAL
6880: IFFALSE 7147
6882: GO 6884
6884: DISABLE
6885: LD_INT 0
6887: PPUSH
6888: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_workshop ] ] ) ;
6889: LD_ADDR_VAR 0 1
6893: PUSH
6894: LD_INT 1
6896: PPUSH
6897: LD_INT 22
6899: PUSH
6900: LD_EXP 1
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: PUSH
6909: LD_INT 30
6911: PUSH
6912: LD_INT 2
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: PPUSH
6923: CALL_OW 70
6927: ST_TO_ADDR
// pom1 = 7 ;
6928: LD_ADDR_VAR 0 2
6932: PUSH
6933: LD_INT 7
6935: ST_TO_ADDR
// while IsConstructed ( pom [ 1 ] ) <> 0 do
6936: LD_VAR 0 1
6940: PUSH
6941: LD_INT 1
6943: ARRAY
6944: PPUSH
6945: CALL_OW 304
6949: PUSH
6950: LD_INT 0
6952: NONEQUAL
6953: IFFALSE 6964
// wait ( 0 0$2 ) ;
6955: LD_INT 70
6957: PPUSH
6958: CALL_OW 67
6962: GO 6936
// DialogueOn ;
6964: CALL_OW 6
// if GetTech ( tech_OilEng , You ) = state_researched then
6968: LD_INT 47
6970: PPUSH
6971: LD_EXP 1
6975: PPUSH
6976: CALL_OW 321
6980: PUSH
6981: LD_INT 2
6983: EQUAL
6984: IFFALSE 6995
// Hint ( Workshop2 ) else
6986: LD_STRING Workshop2
6988: PPUSH
6989: CALL_OW 339
6993: GO 7002
// Hint ( Workshop1 ) ;
6995: LD_STRING Workshop1
6997: PPUSH
6998: CALL_OW 339
// Say ( bur , D5b-Bur-1 ) ;
7002: LD_EXP 50
7006: PPUSH
7007: LD_STRING D5b-Bur-1
7009: PPUSH
7010: CALL_OW 88
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_lab ] ] ) ;
7014: LD_ADDR_VAR 0 1
7018: PUSH
7019: LD_INT 1
7021: PPUSH
7022: LD_INT 22
7024: PUSH
7025: LD_EXP 1
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: LD_INT 30
7036: PUSH
7037: LD_INT 6
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PPUSH
7048: CALL_OW 70
7052: ST_TO_ADDR
// if pom > 0 then
7053: LD_VAR 0 1
7057: PUSH
7058: LD_INT 0
7060: GREATER
7061: IFFALSE 7082
// pom1 = IsConstructed ( pom [ 1 ] ) ;
7063: LD_ADDR_VAR 0 2
7067: PUSH
7068: LD_VAR 0 1
7072: PUSH
7073: LD_INT 1
7075: ARRAY
7076: PPUSH
7077: CALL_OW 304
7081: ST_TO_ADDR
// if pom1 = 0 then
7082: LD_VAR 0 2
7086: PUSH
7087: LD_INT 0
7089: EQUAL
7090: IFFALSE 7124
// begin Say ( plat , D5b-Pla-1 ) ;
7092: LD_EXP 54
7096: PPUSH
7097: LD_STRING D5b-Pla-1
7099: PPUSH
7100: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
7104: LD_STRING M2
7106: PPUSH
7107: CALL_OW 337
// pokracovani_rozhovoru ;
7111: CALL 7150 0 0
// Hint ( BuildingVehicles ) ;
7115: LD_STRING BuildingVehicles
7117: PPUSH
7118: CALL_OW 339
// end else
7122: GO 7143
// begin Say ( plat , D5b-Pla-1a ) ;
7124: LD_EXP 54
7128: PPUSH
7129: LD_STRING D5b-Pla-1a
7131: PPUSH
7132: CALL_OW 88
// ChangeMissionObjectives ( M2c ) ;
7136: LD_STRING M2c
7138: PPUSH
7139: CALL_OW 337
// end ; DialogueOff ;
7143: CALL_OW 7
// end ;
7147: PPOPN 2
7149: END
// function pokracovani_rozhovoru ; begin
7150: LD_INT 0
7152: PPUSH
// if Researched ( You , tech_OilEng ) then
7153: LD_EXP 1
7157: PPUSH
7158: LD_INT 47
7160: PPUSH
7161: CALL_OW 325
7165: IFFALSE 7193
// begin Say ( bur , D7b-Bur-1 ) ;
7167: LD_EXP 50
7171: PPUSH
7172: LD_STRING D7b-Bur-1
7174: PPUSH
7175: CALL_OW 88
// Say ( plat , D7b-Pla-1 ) ;
7179: LD_EXP 54
7183: PPUSH
7184: LD_STRING D7b-Pla-1
7186: PPUSH
7187: CALL_OW 88
// end else
7191: GO 7217
// begin Say ( bur , D7a-Bur-1 ) ;
7193: LD_EXP 50
7197: PPUSH
7198: LD_STRING D7a-Bur-1
7200: PPUSH
7201: CALL_OW 88
// Say ( plat , D7a-Pla-1 ) ;
7205: LD_EXP 54
7209: PPUSH
7210: LD_STRING D7a-Pla-1
7212: PPUSH
7213: CALL_OW 88
// end ; end ;
7217: LD_VAR 0 1
7221: RET
// every 0 0$1 trigger stav in is_out_base do var pom , pom1 ;
7222: LD_EXP 60
7226: PUSH
7227: LD_LOC 4
7231: IN
7232: IFFALSE 7420
7234: GO 7236
7236: DISABLE
7237: LD_INT 0
7239: PPUSH
7240: PPUSH
// begin pom = FilterUnitsInArea ( Out_base , [ [ f_side , You ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
7241: LD_ADDR_VAR 0 1
7245: PUSH
7246: LD_INT 6
7248: PPUSH
7249: LD_INT 22
7251: PUSH
7252: LD_EXP 1
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PUSH
7261: LD_INT 2
7263: PUSH
7264: LD_INT 21
7266: PUSH
7267: LD_INT 2
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PUSH
7274: LD_INT 21
7276: PUSH
7277: LD_INT 1
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: LIST
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: PPUSH
7293: CALL_OW 70
7297: ST_TO_ADDR
// if pom > 0 then
7298: LD_VAR 0 1
7302: PUSH
7303: LD_INT 0
7305: GREATER
7306: IFFALSE 7419
// begin ComHold ( pom ) ;
7308: LD_VAR 0 1
7312: PPUSH
7313: CALL_OW 140
// DialogueOn ;
7317: CALL_OW 6
// Say ( plat , D8-Pla-1 ) ;
7321: LD_EXP 54
7325: PPUSH
7326: LD_STRING D8-Pla-1
7328: PPUSH
7329: CALL_OW 88
// DialogueOff ;
7333: CALL_OW 7
// InGameOn ;
7337: CALL_OW 8
// posli_rusi_zpet_out_base ;
7341: CALL 16303 0 0
// while FilterUnitsInArea ( Out_base , [ [ f_side , You ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) <> 0 do
7345: LD_INT 6
7347: PPUSH
7348: LD_INT 22
7350: PUSH
7351: LD_EXP 1
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: PUSH
7360: LD_INT 2
7362: PUSH
7363: LD_INT 21
7365: PUSH
7366: LD_INT 2
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: PUSH
7373: LD_INT 21
7375: PUSH
7376: LD_INT 1
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: LIST
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PPUSH
7392: CALL_OW 70
7396: PUSH
7397: LD_INT 0
7399: NONEQUAL
7400: IFFALSE 7415
// begin wait ( 0 0$2 ) ;
7402: LD_INT 70
7404: PPUSH
7405: CALL_OW 67
// posli_rusi_zpet_out_base ;
7409: CALL 16303 0 0
// end ;
7413: GO 7345
// InGameOff ;
7415: CALL_OW 9
// end ; enable ;
7419: ENABLE
// end ;
7420: PPOPN 2
7422: END
// every 0 0$1 marked 300 do var pom ;
7423: GO 7425
7425: DISABLE
7426: LD_INT 0
7428: PPUSH
// begin wait ( 0 0$4 ) ;
7429: LD_INT 140
7431: PPUSH
7432: CALL_OW 67
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
7436: LD_ADDR_VAR 0 1
7440: PUSH
7441: LD_INT 1
7443: PPUSH
7444: LD_INT 22
7446: PUSH
7447: LD_EXP 1
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PUSH
7456: LD_INT 21
7458: PUSH
7459: LD_INT 2
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: PPUSH
7470: CALL_OW 70
7474: ST_TO_ADDR
// DialogueOn ;
7475: CALL_OW 6
// Say ( bur , D9-Bur-1 ) ;
7479: LD_EXP 50
7483: PPUSH
7484: LD_STRING D9-Bur-1
7486: PPUSH
7487: CALL_OW 88
// Say ( plat , D9-Pla-1 ) ;
7491: LD_EXP 54
7495: PPUSH
7496: LD_STRING D9-Pla-1
7498: PPUSH
7499: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7503: LD_STRING M3
7505: PPUSH
7506: CALL_OW 337
// stav = 4 ;
7510: LD_ADDR_EXP 60
7514: PUSH
7515: LD_INT 4
7517: ST_TO_ADDR
// DialogueOff ;
7518: CALL_OW 7
// Hint ( Driving ) ;
7522: LD_STRING Driving
7524: PPUSH
7525: CALL_OW 339
// wait ( 0 0$10 ) ;
7529: LD_INT 350
7531: PPUSH
7532: CALL_OW 67
// end ;
7536: PPOPN 1
7538: END
// every 0 0$5 trigger stav > 3 do var pom , i ; var a ;
7539: LD_EXP 60
7543: PUSH
7544: LD_INT 3
7546: GREATER
7547: IFFALSE 7657
7549: GO 7551
7551: DISABLE
7552: LD_INT 0
7554: PPUSH
7555: PPUSH
7556: PPUSH
// begin a = false ;
7557: LD_ADDR_VAR 0 3
7561: PUSH
7562: LD_INT 0
7564: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
7565: LD_ADDR_VAR 0 1
7569: PUSH
7570: LD_INT 22
7572: PUSH
7573: LD_EXP 1
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: PUSH
7582: LD_INT 21
7584: PUSH
7585: LD_INT 2
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: PPUSH
7596: CALL_OW 69
7600: ST_TO_ADDR
// for i in pom do
7601: LD_ADDR_VAR 0 2
7605: PUSH
7606: LD_VAR 0 1
7610: PUSH
7611: FOR_IN
7612: IFFALSE 7639
// if GetLives ( i ) < 900 then
7614: LD_VAR 0 2
7618: PPUSH
7619: CALL_OW 256
7623: PUSH
7624: LD_INT 900
7626: LESS
7627: IFFALSE 7637
// a = true ;
7629: LD_ADDR_VAR 0 3
7633: PUSH
7634: LD_INT 1
7636: ST_TO_ADDR
7637: GO 7611
7639: POP
7640: POP
// if a then
7641: LD_VAR 0 3
7645: IFFALSE 7656
// Hint ( Repair ) else
7647: LD_STRING Repair
7649: PPUSH
7650: CALL_OW 339
7654: GO 7657
// enable ;
7656: ENABLE
// end ;
7657: PPOPN 3
7659: END
// every 0 0$5 trigger stav > 3 do var pom , i ; var a ;
7660: LD_EXP 60
7664: PUSH
7665: LD_INT 3
7667: GREATER
7668: IFFALSE 7778
7670: GO 7672
7672: DISABLE
7673: LD_INT 0
7675: PPUSH
7676: PPUSH
7677: PPUSH
// begin a = false ;
7678: LD_ADDR_VAR 0 3
7682: PUSH
7683: LD_INT 0
7685: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
7686: LD_ADDR_VAR 0 1
7690: PUSH
7691: LD_INT 22
7693: PUSH
7694: LD_EXP 1
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: PUSH
7703: LD_INT 21
7705: PUSH
7706: LD_INT 2
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PPUSH
7717: CALL_OW 69
7721: ST_TO_ADDR
// for i in pom do
7722: LD_ADDR_VAR 0 2
7726: PUSH
7727: LD_VAR 0 1
7731: PUSH
7732: FOR_IN
7733: IFFALSE 7760
// if GetFuel ( i ) < 20 then
7735: LD_VAR 0 2
7739: PPUSH
7740: CALL_OW 261
7744: PUSH
7745: LD_INT 20
7747: LESS
7748: IFFALSE 7758
// a = true ;
7750: LD_ADDR_VAR 0 3
7754: PUSH
7755: LD_INT 1
7757: ST_TO_ADDR
7758: GO 7732
7760: POP
7761: POP
// if a then
7762: LD_VAR 0 3
7766: IFFALSE 7777
// Hint ( Fuel ) else
7768: LD_STRING Fuel
7770: PPUSH
7771: CALL_OW 339
7775: GO 7778
// enable ;
7777: ENABLE
// end ;
7778: PPOPN 3
7780: END
// every 0 0$2 trigger stav = 4 and test_is_auto_in_area do var auto ; var ridic ; var mechs , i ;
7781: LD_EXP 60
7785: PUSH
7786: LD_INT 4
7788: EQUAL
7789: PUSH
7790: CALL 15926 0 0
7794: AND
7795: IFFALSE 8499
7797: GO 7799
7799: DISABLE
7800: LD_INT 0
7802: PPUSH
7803: PPUSH
7804: PPUSH
7805: PPUSH
// begin disable ( 991 ) ;
7806: LD_INT 991
7808: DISABLE_MARKED
// InGameOn ;
7809: CALL_OW 8
// auto = FilterUnitsInArea ( RU1_base , [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
7813: LD_ADDR_VAR 0 1
7817: PUSH
7818: LD_INT 3
7820: PPUSH
7821: LD_INT 22
7823: PUSH
7824: LD_EXP 1
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: PUSH
7833: LD_INT 21
7835: PUSH
7836: LD_INT 2
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: PPUSH
7847: CALL_OW 70
7851: ST_TO_ADDR
// auto = auto [ 1 ] ;
7852: LD_ADDR_VAR 0 1
7856: PUSH
7857: LD_VAR 0 1
7861: PUSH
7862: LD_INT 1
7864: ARRAY
7865: ST_TO_ADDR
// ridic = IsDrivenBy ( auto ) ;
7866: LD_ADDR_VAR 0 2
7870: PUSH
7871: LD_VAR 0 1
7875: PPUSH
7876: CALL_OW 311
7880: ST_TO_ADDR
// ComMoveXY ( ridic , 117 , 101 ) ;
7881: LD_VAR 0 2
7885: PPUSH
7886: LD_INT 117
7888: PPUSH
7889: LD_INT 101
7891: PPUSH
7892: CALL_OW 111
// CenterOnUnits ( [ auto ] ) ;
7896: LD_VAR 0 1
7900: PUSH
7901: EMPTY
7902: LIST
7903: PPUSH
7904: CALL_OW 85
// Say ( kurin , D10-Kur-1 ) ;
7908: LD_EXP 53
7912: PPUSH
7913: LD_STRING D10-Kur-1
7915: PPUSH
7916: CALL_OW 88
// Say ( bel , D10-Bel-1 ) ;
7920: LD_EXP 52
7924: PPUSH
7925: LD_STRING D10-Bel-1
7927: PPUSH
7928: CALL_OW 88
// repeat ComExitVehicle ( ridic ) ;
7932: LD_VAR 0 2
7936: PPUSH
7937: CALL_OW 121
// wait ( 0 0$1 ) ;
7941: LD_INT 35
7943: PPUSH
7944: CALL_OW 67
// until not IsInUnit ( ridic ) ;
7948: LD_VAR 0 2
7952: PPUSH
7953: CALL_OW 310
7957: NOT
7958: IFFALSE 7932
// SetFuel ( auto , 100 ) ;
7960: LD_VAR 0 1
7964: PPUSH
7965: LD_INT 100
7967: PPUSH
7968: CALL_OW 240
// AddComHold ( ridic ) ;
7972: LD_VAR 0 2
7976: PPUSH
7977: CALL_OW 200
// wait ( 0 0$1 ) ;
7981: LD_INT 35
7983: PPUSH
7984: CALL_OW 67
// if BELKOV_MRTVY then
7988: LD_EXP 46
7992: IFFALSE 8030
// begin Say ( bur , D10-Bur-1 ) ;
7994: LD_EXP 50
7998: PPUSH
7999: LD_STRING D10-Bur-1
8001: PPUSH
8002: CALL_OW 88
// Say ( bel , D10-Bel-2 ) ;
8006: LD_EXP 52
8010: PPUSH
8011: LD_STRING D10-Bel-2
8013: PPUSH
8014: CALL_OW 88
// Say ( bur , D10-Bur-2 ) ;
8018: LD_EXP 50
8022: PPUSH
8023: LD_STRING D10-Bur-2
8025: PPUSH
8026: CALL_OW 88
// end ; AddComHold ( ridic ) ;
8030: LD_VAR 0 2
8034: PPUSH
8035: CALL_OW 200
// if BELKOV_MRTVY then
8039: LD_EXP 46
8043: IFFALSE 8059
// Say ( kurin , D10-Kur-2a ) else
8045: LD_EXP 53
8049: PPUSH
8050: LD_STRING D10-Kur-2a
8052: PPUSH
8053: CALL_OW 88
8057: GO 8071
// Say ( kurin , D10-Kur-2 ) ;
8059: LD_EXP 53
8063: PPUSH
8064: LD_STRING D10-Kur-2
8066: PPUSH
8067: CALL_OW 88
// ComExitBuilding ( bel ) ;
8071: LD_EXP 52
8075: PPUSH
8076: CALL_OW 122
// while IsInUnit ( ridic ) do
8080: LD_VAR 0 2
8084: PPUSH
8085: CALL_OW 310
8089: IFFALSE 8109
// begin wait ( 0 0$1 ) ;
8091: LD_INT 35
8093: PPUSH
8094: CALL_OW 67
// ComExitVehicle ( ridic ) ;
8098: LD_VAR 0 2
8102: PPUSH
8103: CALL_OW 121
// end ;
8107: GO 8080
// AddComEnterUnit ( bel , auto ) ;
8109: LD_EXP 52
8113: PPUSH
8114: LD_VAR 0 1
8118: PPUSH
8119: CALL_OW 180
// wait ( 0 0$1 ) ;
8123: LD_INT 35
8125: PPUSH
8126: CALL_OW 67
// while IsInUnit ( bel ) = 0 do
8130: LD_EXP 52
8134: PPUSH
8135: CALL_OW 310
8139: PUSH
8140: LD_INT 0
8142: EQUAL
8143: IFFALSE 8177
// begin wait ( 0 0$1 ) ;
8145: LD_INT 35
8147: PPUSH
8148: CALL_OW 67
// ComExitBuilding ( bel ) ;
8152: LD_EXP 52
8156: PPUSH
8157: CALL_OW 122
// AddComEnterUnit ( bel , auto ) ;
8161: LD_EXP 52
8165: PPUSH
8166: LD_VAR 0 1
8170: PPUSH
8171: CALL_OW 180
// end ;
8175: GO 8130
// ComFree ( ridic ) ;
8177: LD_VAR 0 2
8181: PPUSH
8182: CALL_OW 139
// Say ( kurin , D10-Kur-2b ) ;
8186: LD_EXP 53
8190: PPUSH
8191: LD_STRING D10-Kur-2b
8193: PPUSH
8194: CALL_OW 88
// ridic_1_auta = ridic ;
8198: LD_ADDR_LOC 6
8202: PUSH
8203: LD_VAR 0 2
8207: ST_TO_ADDR
// ChangeMissionObjectives ( M4 ) ;
8208: LD_STRING M4
8210: PPUSH
8211: CALL_OW 337
// ComMoveXY ( ridic_1_auta , 68 , 92 ) ;
8215: LD_LOC 6
8219: PPUSH
8220: LD_INT 68
8222: PPUSH
8223: LD_INT 92
8225: PPUSH
8226: CALL_OW 111
// wait ( 0 0$2 ) ;
8230: LD_INT 70
8232: PPUSH
8233: CALL_OW 67
// objReturn := true ;
8237: LD_ADDR_EXP 29
8241: PUSH
8242: LD_INT 1
8244: ST_TO_ADDR
// stav = 5 ;
8245: LD_ADDR_EXP 60
8249: PUSH
8250: LD_INT 5
8252: ST_TO_ADDR
// InGameOff ;
8253: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) then
8257: LD_INT 22
8259: PUSH
8260: LD_INT 6
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: PUSH
8267: LD_INT 3
8269: PUSH
8270: LD_INT 24
8272: PUSH
8273: LD_INT 1000
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: PUSH
8284: LD_INT 21
8286: PUSH
8287: LD_INT 2
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: LIST
8298: PPUSH
8299: CALL_OW 69
8303: IFFALSE 8492
// begin mechs := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 3 ] ] ) ;
8305: LD_ADDR_VAR 0 3
8309: PUSH
8310: LD_INT 22
8312: PUSH
8313: LD_INT 6
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: LD_INT 25
8322: PUSH
8323: LD_INT 3
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PPUSH
8334: CALL_OW 69
8338: ST_TO_ADDR
// ComExitBuilding ( mechs ) ;
8339: LD_VAR 0 3
8343: PPUSH
8344: CALL_OW 122
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) do
8348: LD_ADDR_VAR 0 4
8352: PUSH
8353: LD_INT 22
8355: PUSH
8356: LD_INT 6
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: LD_INT 3
8365: PUSH
8366: LD_INT 24
8368: PUSH
8369: LD_INT 1000
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: PUSH
8380: LD_INT 21
8382: PUSH
8383: LD_INT 2
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: LIST
8394: PPUSH
8395: CALL_OW 69
8399: PUSH
8400: FOR_IN
8401: IFFALSE 8419
// AddComRepairVehicle ( mechs , i ) ;
8403: LD_VAR 0 3
8407: PPUSH
8408: LD_VAR 0 4
8412: PPUSH
8413: CALL_OW 189
8417: GO 8400
8419: POP
8420: POP
// repeat wait ( 0 0$1 ) ;
8421: LD_INT 35
8423: PPUSH
8424: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) = 0 ;
8428: LD_INT 22
8430: PUSH
8431: LD_INT 6
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PUSH
8438: LD_INT 3
8440: PUSH
8441: LD_INT 24
8443: PUSH
8444: LD_INT 1000
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: PUSH
8455: LD_INT 21
8457: PUSH
8458: LD_INT 2
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: LIST
8469: PPUSH
8470: CALL_OW 69
8474: PUSH
8475: LD_INT 0
8477: EQUAL
8478: IFFALSE 8421
// AddComEnterUnit ( mechs , RU1_tov ) ;
8480: LD_VAR 0 3
8484: PPUSH
8485: LD_INT 2
8487: PPUSH
8488: CALL_OW 180
// end ; rusi_cesta_na_sever ;
8492: CALL 14630 0 0
// enable ( 992 ) ;
8496: LD_INT 992
8498: ENABLE_MARKED
// end ;
8499: PPOPN 4
8501: END
// every 0 0$1 trigger stav = 5 and IsInArea ( ridic_1_auta , RU2_base ) do var poc , i ;
8502: LD_EXP 60
8506: PUSH
8507: LD_INT 5
8509: EQUAL
8510: PUSH
8511: LD_LOC 6
8515: PPUSH
8516: LD_INT 1
8518: PPUSH
8519: CALL_OW 308
8523: AND
8524: IFFALSE 8681
8526: GO 8528
8528: DISABLE
8529: LD_INT 0
8531: PPUSH
8532: PPUSH
// begin poc = 0 ;
8533: LD_ADDR_VAR 0 1
8537: PUSH
8538: LD_INT 0
8540: ST_TO_ADDR
// DialogueOn ;
8541: CALL_OW 6
// Say ( plat , D11-Pla-1 ) ;
8545: LD_EXP 54
8549: PPUSH
8550: LD_STRING D11-Pla-1
8552: PPUSH
8553: CALL_OW 88
// for i in Rusi_enter do
8557: LD_ADDR_VAR 0 2
8561: PUSH
8562: LD_EXP 55
8566: PUSH
8567: FOR_IN
8568: IFFALSE 8597
// if IsLive ( i ) then
8570: LD_VAR 0 2
8574: PPUSH
8575: CALL_OW 300
8579: IFFALSE 8595
// poc = poc + 1 ;
8581: LD_ADDR_VAR 0 1
8585: PUSH
8586: LD_VAR 0 1
8590: PUSH
8591: LD_INT 1
8593: PLUS
8594: ST_TO_ADDR
8595: GO 8567
8597: POP
8598: POP
// if poc > 1 then
8599: LD_VAR 0 1
8603: PUSH
8604: LD_INT 1
8606: GREATER
8607: IFFALSE 8623
// Say ( bur , D11-Bur-1a ) else
8609: LD_EXP 50
8613: PPUSH
8614: LD_STRING D11-Bur-1a
8616: PPUSH
8617: CALL_OW 88
8621: GO 8635
// Say ( bur , D11-Bur-1 ) ;
8623: LD_EXP 50
8627: PPUSH
8628: LD_STRING D11-Bur-1
8630: PPUSH
8631: CALL_OW 88
// ChangeMissionObjectives ( M5 ) ;
8635: LD_STRING M5
8637: PPUSH
8638: CALL_OW 337
// objReturn := false ;
8642: LD_ADDR_EXP 29
8646: PUSH
8647: LD_INT 0
8649: ST_TO_ADDR
// CreateCratesXYR ( 2 , 64 , 83 , 6 , true ) ;
8650: LD_INT 2
8652: PPUSH
8653: LD_INT 64
8655: PPUSH
8656: LD_INT 83
8658: PPUSH
8659: LD_INT 6
8661: PPUSH
8662: LD_INT 1
8664: PPUSH
8665: CALL_OW 56
// stav = 6 ;
8669: LD_ADDR_EXP 60
8673: PUSH
8674: LD_INT 6
8676: ST_TO_ADDR
// DialogueOff ;
8677: CALL_OW 7
// end ;
8681: PPOPN 2
8683: END
// export function dialog_boreni ; begin
8684: LD_INT 0
8686: PPUSH
// Say ( plat , D6-Pla-1 ) ;
8687: LD_EXP 54
8691: PPUSH
8692: LD_STRING D6-Pla-1
8694: PPUSH
8695: CALL_OW 88
// Say ( bur , D6-Bur-1 ) ;
8699: LD_EXP 50
8703: PPUSH
8704: LD_STRING D6-Bur-1
8706: PPUSH
8707: CALL_OW 88
// end ;
8711: LD_VAR 0 1
8715: RET
// export function dialog_past_amici ; var pom , i ; begin
8716: LD_INT 0
8718: PPUSH
8719: PPUSH
8720: PPUSH
// DialogueOn ;
8721: CALL_OW 6
// CenterOnUnits ( Rusi_sever ) ;
8725: LD_EXP 56
8729: PPUSH
8730: CALL_OW 85
// wait ( 0 0$2 ) ;
8734: LD_INT 70
8736: PPUSH
8737: CALL_OW 67
// pom = UnitFilter ( Amici_past , [ [ f_ok ] , [ f_type , unit_human ] ] ) ;
8741: LD_ADDR_VAR 0 2
8745: PUSH
8746: LD_EXP 72
8750: PPUSH
8751: LD_INT 50
8753: PUSH
8754: EMPTY
8755: LIST
8756: PUSH
8757: LD_INT 21
8759: PUSH
8760: LD_INT 1
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: PPUSH
8771: CALL_OW 72
8775: ST_TO_ADDR
// for i in pom do
8776: LD_ADDR_VAR 0 3
8780: PUSH
8781: LD_VAR 0 2
8785: PUSH
8786: FOR_IN
8787: IFFALSE 8820
// if GetSex ( i ) = sex_male then
8789: LD_VAR 0 3
8793: PPUSH
8794: CALL_OW 258
8798: PUSH
8799: LD_INT 1
8801: EQUAL
8802: IFFALSE 8818
// begin SayRadio ( i , D13-Sol1-1 ) ;
8804: LD_VAR 0 3
8808: PPUSH
8809: LD_STRING D13-Sol1-1
8811: PPUSH
8812: CALL_OW 94
// break ;
8816: GO 8820
// end ;
8818: GO 8786
8820: POP
8821: POP
// SayRadio ( bel , D13-Bel-1 ) ;
8822: LD_EXP 52
8826: PPUSH
8827: LD_STRING D13-Bel-1
8829: PPUSH
8830: CALL_OW 94
// SayRadio ( kurin , D13-Kur-1 ) ;
8834: LD_EXP 53
8838: PPUSH
8839: LD_STRING D13-Kur-1
8841: PPUSH
8842: CALL_OW 94
// SayRadio ( bel , D13-Bel-2 ) ;
8846: LD_EXP 52
8850: PPUSH
8851: LD_STRING D13-Bel-2
8853: PPUSH
8854: CALL_OW 94
// end ;
8858: LD_VAR 0 1
8862: RET
// export function rozhovor_ukonceni_m5 ; begin
8863: LD_INT 0
8865: PPUSH
// wait ( 0 0$2 ) ;
8866: LD_INT 70
8868: PPUSH
8869: CALL_OW 67
// DialogueOn ;
8873: CALL_OW 6
// Say ( bur , D12-Bur-1 ) ;
8877: LD_EXP 50
8881: PPUSH
8882: LD_STRING D12-Bur-1
8884: PPUSH
8885: CALL_OW 88
// Say ( plat , D12-Pla-1 ) ;
8889: LD_EXP 54
8893: PPUSH
8894: LD_STRING D12-Pla-1
8896: PPUSH
8897: CALL_OW 88
// Say ( bur , D12-Bur-2 ) ;
8901: LD_EXP 50
8905: PPUSH
8906: LD_STRING D12-Bur-2
8908: PPUSH
8909: CALL_OW 88
// Say ( plat , D12-Pla-2 ) ;
8913: LD_EXP 54
8917: PPUSH
8918: LD_STRING D12-Pla-2
8920: PPUSH
8921: CALL_OW 88
// Say ( bur , D12-Bur-3 ) ;
8925: LD_EXP 50
8929: PPUSH
8930: LD_STRING D12-Bur-3
8932: PPUSH
8933: CALL_OW 88
// Say ( plat , D12-Pla-3 ) ;
8937: LD_EXP 54
8941: PPUSH
8942: LD_STRING D12-Pla-3
8944: PPUSH
8945: CALL_OW 88
// ChangeMissionObjectives ( M6 ) ;
8949: LD_STRING M6
8951: PPUSH
8952: CALL_OW 337
// DialogueOff ;
8956: CALL_OW 7
// disable ( 992 ) ;
8960: LD_INT 992
8962: DISABLE_MARKED
// MissionProper ;
8963: CALL 2120 0 0
// end ;
8967: LD_VAR 0 1
8971: RET
// every 0 0$5 trigger stav = 7 do var i ; var pom ; var avideni ;
8972: LD_EXP 60
8976: PUSH
8977: LD_INT 7
8979: EQUAL
8980: IFFALSE 9769
8982: GO 8984
8984: DISABLE
8985: LD_INT 0
8987: PPUSH
8988: PPUSH
8989: PPUSH
// begin wait ( 0 0$1 ) ;
8990: LD_INT 35
8992: PPUSH
8993: CALL_OW 67
// dialog_past_amici ;
8997: CALL 8716 0 0
// CenterNowOnXY ( 58 , 17 ) ;
9001: LD_INT 58
9003: PPUSH
9004: LD_INT 17
9006: PPUSH
9007: CALL_OW 86
// ComMoveXY ( Rusi_sever , 59 , 16 ) ;
9011: LD_EXP 56
9015: PPUSH
9016: LD_INT 59
9018: PPUSH
9019: LD_INT 16
9021: PPUSH
9022: CALL_OW 111
// pom = FilterAllUnits ( [ [ f_side , You ] ] ) ;
9026: LD_ADDR_VAR 0 2
9030: PUSH
9031: LD_INT 22
9033: PUSH
9034: LD_EXP 1
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: PUSH
9043: EMPTY
9044: LIST
9045: PPUSH
9046: CALL_OW 69
9050: ST_TO_ADDR
// ComStop ( pom ) ;
9051: LD_VAR 0 2
9055: PPUSH
9056: CALL_OW 141
// for i in pom do
9060: LD_ADDR_VAR 0 1
9064: PUSH
9065: LD_VAR 0 2
9069: PUSH
9070: FOR_IN
9071: IFFALSE 9089
// DoNotAttack ( Amici , i ) ;
9073: LD_EXP 2
9077: PPUSH
9078: LD_VAR 0 1
9082: PPUSH
9083: CALL_OW 471
9087: GO 9070
9089: POP
9090: POP
// DoNotAttack ( Amici , bel ) ;
9091: LD_EXP 2
9095: PPUSH
9096: LD_EXP 52
9100: PPUSH
9101: CALL_OW 471
// DialogueOff ;
9105: CALL_OW 7
// InGameOn ;
9109: CALL_OW 8
// avideni = place_amik_k_videni ;
9113: LD_ADDR_VAR 0 3
9117: PUSH
9118: CALL 5061 0 0
9122: ST_TO_ADDR
// ComMoveXY ( avideni , 55 , 11 ) ;
9123: LD_VAR 0 3
9127: PPUSH
9128: LD_INT 55
9130: PPUSH
9131: LD_INT 11
9133: PPUSH
9134: CALL_OW 111
// while FilterAllUnits ( [ [ f_side , Amici ] , [ f_see , You2 ] ] ) = 0 do
9138: LD_INT 22
9140: PUSH
9141: LD_EXP 2
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: PUSH
9150: LD_INT 101
9152: PUSH
9153: LD_EXP 4
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: PPUSH
9166: CALL_OW 69
9170: PUSH
9171: LD_INT 0
9173: EQUAL
9174: IFFALSE 9200
// begin wait ( 0 0$03 ) ;
9176: LD_INT 105
9178: PPUSH
9179: CALL_OW 67
// ComMoveXY ( avideni , 55 , 11 ) ;
9183: LD_VAR 0 3
9187: PPUSH
9188: LD_INT 55
9190: PPUSH
9191: LD_INT 11
9193: PPUSH
9194: CALL_OW 111
// end ;
9198: GO 9138
// DoNotAttack ( Amici , auto_belkov ) ;
9200: LD_EXP 2
9204: PPUSH
9205: LD_EXP 70
9209: PPUSH
9210: CALL_OW 471
// while IsInUnit ( bel ) do
9214: LD_EXP 52
9218: PPUSH
9219: CALL_OW 310
9223: IFFALSE 9243
// begin ComExitVehicle ( bel ) ;
9225: LD_EXP 52
9229: PPUSH
9230: CALL_OW 121
// wait ( 0 0$0.1 ) ;
9234: LD_INT 4
9236: PPUSH
9237: CALL_OW 67
// end ;
9241: GO 9214
// Amici_past = Amici_past ^ avideni ;
9243: LD_ADDR_EXP 72
9247: PUSH
9248: LD_EXP 72
9252: PUSH
9253: LD_VAR 0 3
9257: ADD
9258: ST_TO_ADDR
// wait ( 0 0$0.5 ) ;
9259: LD_INT 18
9261: PPUSH
9262: CALL_OW 67
// AddComMoveXY ( bel , 47 , 7 ) ;
9266: LD_EXP 52
9270: PPUSH
9271: LD_INT 47
9273: PPUSH
9274: LD_INT 7
9276: PPUSH
9277: CALL_OW 171
// AddComMoveXY ( bel , 33 , 5 ) ;
9281: LD_EXP 52
9285: PPUSH
9286: LD_INT 33
9288: PPUSH
9289: LD_INT 5
9291: PPUSH
9292: CALL_OW 171
// AddComMoveXY ( bel , 34 , 11 ) ;
9296: LD_EXP 52
9300: PPUSH
9301: LD_INT 34
9303: PPUSH
9304: LD_INT 11
9306: PPUSH
9307: CALL_OW 171
// AddComMoveXY ( bel , 45 , 13 ) ;
9311: LD_EXP 52
9315: PPUSH
9316: LD_INT 45
9318: PPUSH
9319: LD_INT 13
9321: PPUSH
9322: CALL_OW 171
// SetLives ( IsInUnit ( bel ) , 600 ) ;
9326: LD_EXP 52
9330: PPUSH
9331: CALL_OW 310
9335: PPUSH
9336: LD_INT 600
9338: PPUSH
9339: CALL_OW 234
// ComWalk ( Amici_past ) ;
9343: LD_EXP 72
9347: PPUSH
9348: CALL_OW 138
// InGameOff ;
9352: CALL_OW 9
// DialogueOn ;
9356: CALL_OW 6
// Say ( Amici_past [ 1 ] , D14-Sol1-1 ) ;
9360: LD_EXP 72
9364: PUSH
9365: LD_INT 1
9367: ARRAY
9368: PPUSH
9369: LD_STRING D14-Sol1-1
9371: PPUSH
9372: CALL_OW 88
// DialogueOff ;
9376: CALL_OW 7
// music_class = music_combat ;
9380: LD_ADDR_OWVAR 72
9384: PUSH
9385: LD_INT 1
9387: ST_TO_ADDR
// InGameOn ;
9388: CALL_OW 8
// for i in Rusi_sever do
9392: LD_ADDR_VAR 0 1
9396: PUSH
9397: LD_EXP 56
9401: PUSH
9402: FOR_IN
9403: IFFALSE 9438
// if GetType ( i ) = unit_vehicle then
9405: LD_VAR 0 1
9409: PPUSH
9410: CALL_OW 247
9414: PUSH
9415: LD_INT 2
9417: EQUAL
9418: IFFALSE 9436
// Rusi_sever = Rusi_sever diff i ;
9420: LD_ADDR_EXP 56
9424: PUSH
9425: LD_EXP 56
9429: PUSH
9430: LD_VAR 0 1
9434: DIFF
9435: ST_TO_ADDR
9436: GO 9402
9438: POP
9439: POP
// ComMoveXY ( Rusi_sever , 47 , 7 ) ;
9440: LD_EXP 56
9444: PPUSH
9445: LD_INT 47
9447: PPUSH
9448: LD_INT 7
9450: PPUSH
9451: CALL_OW 111
// AddComMoveXY ( Rusi_sever , 33 , 5 ) ;
9455: LD_EXP 56
9459: PPUSH
9460: LD_INT 33
9462: PPUSH
9463: LD_INT 5
9465: PPUSH
9466: CALL_OW 171
// AddComMoveXY ( Rusi_sever , 34 , 11 ) ;
9470: LD_EXP 56
9474: PPUSH
9475: LD_INT 34
9477: PPUSH
9478: LD_INT 11
9480: PPUSH
9481: CALL_OW 171
// AddComMoveXY ( Rusi_sever , 45 , 13 ) ;
9485: LD_EXP 56
9489: PPUSH
9490: LD_INT 45
9492: PPUSH
9493: LD_INT 13
9495: PPUSH
9496: CALL_OW 171
// Rusi_sever = Rusi_sever ^ bel ;
9500: LD_ADDR_EXP 56
9504: PUSH
9505: LD_EXP 56
9509: PUSH
9510: LD_EXP 52
9514: ADD
9515: ST_TO_ADDR
// InGameOff ;
9516: CALL_OW 9
// DialogueOn ;
9520: CALL_OW 6
// Say ( bel , D14-Bel-1 ) ;
9524: LD_EXP 52
9528: PPUSH
9529: LD_STRING D14-Bel-1
9531: PPUSH
9532: CALL_OW 88
// DialogueOff ;
9536: CALL_OW 7
// InGameOn ;
9540: CALL_OW 8
// ComAgressiveMove ( Amici_past , 62 , 18 ) ;
9544: LD_EXP 72
9548: PPUSH
9549: LD_INT 62
9551: PPUSH
9552: LD_INT 18
9554: PPUSH
9555: CALL_OW 114
// wait ( 2 ) ;
9559: LD_INT 2
9561: PPUSH
9562: CALL_OW 67
// rusi_save_belkov ;
9566: CALL 16355 0 0
// amici_boj ;
9570: CALL 18205 0 0
// belkov_solved = 1 ;
9574: LD_ADDR_EXP 48
9578: PUSH
9579: LD_INT 1
9581: ST_TO_ADDR
// CenterOnUnits ( [ bel ] ) ;
9582: LD_EXP 52
9586: PUSH
9587: EMPTY
9588: LIST
9589: PPUSH
9590: CALL_OW 85
// wait ( 0 0$2 ) ;
9594: LD_INT 70
9596: PPUSH
9597: CALL_OW 67
// while not See ( Amici , bel ) do
9601: LD_EXP 2
9605: PPUSH
9606: LD_EXP 52
9610: PPUSH
9611: CALL_OW 292
9615: NOT
9616: IFFALSE 9641
// begin AddComMoveUnit ( Amici_past , bel ) ;
9618: LD_EXP 72
9622: PPUSH
9623: LD_EXP 52
9627: PPUSH
9628: CALL_OW 172
// wait ( 0 0$1 ) ;
9632: LD_INT 35
9634: PPUSH
9635: CALL_OW 67
// end ;
9639: GO 9601
// InGameOff ;
9641: CALL_OW 9
// DialogueOn ;
9645: CALL_OW 6
// SayRadio ( bel , D14-Bel-1a ) ;
9649: LD_EXP 52
9653: PPUSH
9654: LD_STRING D14-Bel-1a
9656: PPUSH
9657: CALL_OW 94
// SayRadio ( kurin , D14-Kur-1 ) ;
9661: LD_EXP 53
9665: PPUSH
9666: LD_STRING D14-Kur-1
9668: PPUSH
9669: CALL_OW 94
// SayRadio ( bel , D14-Bel-2 ) ;
9673: LD_EXP 52
9677: PPUSH
9678: LD_STRING D14-Bel-2
9680: PPUSH
9681: CALL_OW 94
// SayRadio ( kurin , D14-Kur-2 ) ;
9685: LD_EXP 53
9689: PPUSH
9690: LD_STRING D14-Kur-2
9692: PPUSH
9693: CALL_OW 94
// DialogueOff ;
9697: CALL_OW 7
// music_class = 0 ;
9701: LD_ADDR_OWVAR 72
9705: PUSH
9706: LD_INT 0
9708: ST_TO_ADDR
// for i in pom do
9709: LD_ADDR_VAR 0 1
9713: PUSH
9714: LD_VAR 0 2
9718: PUSH
9719: FOR_IN
9720: IFFALSE 9738
// NormalAttack ( Amici , i ) ;
9722: LD_EXP 2
9726: PPUSH
9727: LD_VAR 0 1
9731: PPUSH
9732: CALL_OW 472
9736: GO 9719
9738: POP
9739: POP
// NormalAttack ( Amici , bel ) ;
9740: LD_EXP 2
9744: PPUSH
9745: LD_EXP 52
9749: PPUSH
9750: CALL_OW 472
// amici_po_kecech ;
9754: CALL 19483 0 0
// wait ( 0 0$5 ) ;
9758: LD_INT 175
9760: PPUSH
9761: CALL_OW 67
// dialog_burlak_help ;
9765: CALL 9772 0 0
// end ;
9769: PPOPN 3
9771: END
// function dialog_burlak_help ; begin
9772: LD_INT 0
9774: PPUSH
// DialogueOn ;
9775: CALL_OW 6
// Say ( bur , D14a-Bur-1 ) ;
9779: LD_EXP 50
9783: PPUSH
9784: LD_STRING D14a-Bur-1
9786: PPUSH
9787: CALL_OW 88
// Say ( plat , D14a-Pla-1 ) ;
9791: LD_EXP 54
9795: PPUSH
9796: LD_STRING D14a-Pla-1
9798: PPUSH
9799: CALL_OW 88
// Say ( bur , D14a-Bur-2 ) ;
9803: LD_EXP 50
9807: PPUSH
9808: LD_STRING D14a-Bur-2
9810: PPUSH
9811: CALL_OW 88
// Say ( plat , D14a-Pla-2 ) ;
9815: LD_EXP 54
9819: PPUSH
9820: LD_STRING D14a-Pla-2
9822: PPUSH
9823: CALL_OW 88
// Say ( bur , D14a-Bur-3 ) ;
9827: LD_EXP 50
9831: PPUSH
9832: LD_STRING D14a-Bur-3
9834: PPUSH
9835: CALL_OW 88
// Say ( plat , D14a-Pla-3 ) ;
9839: LD_EXP 54
9843: PPUSH
9844: LD_STRING D14a-Pla-3
9846: PPUSH
9847: CALL_OW 88
// Say ( bur , D14a-Bur-4 ) ;
9851: LD_EXP 50
9855: PPUSH
9856: LD_STRING D14a-Bur-4
9858: PPUSH
9859: CALL_OW 88
// Say ( plat , D14a-Pla-4 ) ;
9863: LD_EXP 54
9867: PPUSH
9868: LD_STRING D14a-Pla-4
9870: PPUSH
9871: CALL_OW 88
// DialogueOff ;
9875: CALL_OW 7
// end ;
9879: LD_VAR 0 1
9883: RET
// every 0 0$6 trigger bedny_hint do
9884: LD_EXP 65
9888: IFFALSE 9900
9890: GO 9892
9892: DISABLE
// begin Hint ( GatheringMaterial ) ;
9893: LD_STRING GatheringMaterial
9895: PPUSH
9896: CALL_OW 339
// end ;
9900: END
// export function hlaska_platonov_bedny ; begin
9901: LD_INT 0
9903: PPUSH
// Say ( plat , D4-Pla-1 ) ;
9904: LD_EXP 54
9908: PPUSH
9909: LD_STRING D4-Pla-1
9911: PPUSH
9912: CALL_OW 88
// end ;
9916: LD_VAR 0 1
9920: RET
// function GetPeople ( sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 ; begin
9921: LD_INT 0
9923: PPUSH
9924: PPUSH
9925: PPUSH
9926: PPUSH
9927: PPUSH
9928: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
9929: LD_ADDR_VAR 0 6
9933: PUSH
9934: LD_INT 22
9936: PUSH
9937: LD_EXP 1
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: PUSH
9946: LD_INT 25
9948: PUSH
9949: LD_INT 4
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: PUSH
9956: LD_INT 26
9958: PUSH
9959: LD_VAR 0 1
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: LIST
9972: PPUSH
9973: CALL_OW 69
9977: ST_TO_ADDR
// pom2 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
9978: LD_ADDR_VAR 0 7
9982: PUSH
9983: LD_INT 22
9985: PUSH
9986: LD_EXP 1
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PUSH
9995: LD_INT 25
9997: PUSH
9998: LD_INT 3
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: PUSH
10005: LD_INT 26
10007: PUSH
10008: LD_VAR 0 1
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: PPUSH
10022: CALL_OW 69
10026: ST_TO_ADDR
// pom3 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
10027: LD_ADDR_VAR 0 8
10031: PUSH
10032: LD_INT 22
10034: PUSH
10035: LD_EXP 1
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PUSH
10044: LD_INT 25
10046: PUSH
10047: LD_INT 2
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PUSH
10054: LD_INT 26
10056: PUSH
10057: LD_VAR 0 1
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: PPUSH
10071: CALL_OW 69
10075: ST_TO_ADDR
// pom4 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
10076: LD_ADDR_VAR 0 9
10080: PUSH
10081: LD_INT 22
10083: PUSH
10084: LD_EXP 1
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: PUSH
10093: LD_INT 25
10095: PUSH
10096: LD_INT 1
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PUSH
10103: LD_INT 26
10105: PUSH
10106: LD_VAR 0 1
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: LIST
10119: PPUSH
10120: CALL_OW 69
10124: ST_TO_ADDR
// case povolani of class_scientistic :
10125: LD_VAR 0 2
10129: PUSH
10130: LD_INT 4
10132: DOUBLE
10133: EQUAL
10134: IFTRUE 10138
10136: GO 10151
10138: POP
// pom = pom1 ; class_mechanic :
10139: LD_ADDR_VAR 0 5
10143: PUSH
10144: LD_VAR 0 6
10148: ST_TO_ADDR
10149: GO 10215
10151: LD_INT 3
10153: DOUBLE
10154: EQUAL
10155: IFTRUE 10159
10157: GO 10172
10159: POP
// pom = pom2 ; class_engineer :
10160: LD_ADDR_VAR 0 5
10164: PUSH
10165: LD_VAR 0 7
10169: ST_TO_ADDR
10170: GO 10215
10172: LD_INT 2
10174: DOUBLE
10175: EQUAL
10176: IFTRUE 10180
10178: GO 10193
10180: POP
// pom = pom3 ; class_soldier :
10181: LD_ADDR_VAR 0 5
10185: PUSH
10186: LD_VAR 0 8
10190: ST_TO_ADDR
10191: GO 10215
10193: LD_INT 1
10195: DOUBLE
10196: EQUAL
10197: IFTRUE 10201
10199: GO 10214
10201: POP
// pom = pom4 ; end ;
10202: LD_ADDR_VAR 0 5
10206: PUSH
10207: LD_VAR 0 9
10211: ST_TO_ADDR
10212: GO 10215
10214: POP
// if povolani <> class_scientistic then
10215: LD_VAR 0 2
10219: PUSH
10220: LD_INT 4
10222: NONEQUAL
10223: IFFALSE 10241
// pom = pom ^ pom1 ;
10225: LD_ADDR_VAR 0 5
10229: PUSH
10230: LD_VAR 0 5
10234: PUSH
10235: LD_VAR 0 6
10239: ADD
10240: ST_TO_ADDR
// if povolani <> class_mechanic then
10241: LD_VAR 0 2
10245: PUSH
10246: LD_INT 3
10248: NONEQUAL
10249: IFFALSE 10267
// pom = pom ^ pom2 ;
10251: LD_ADDR_VAR 0 5
10255: PUSH
10256: LD_VAR 0 5
10260: PUSH
10261: LD_VAR 0 7
10265: ADD
10266: ST_TO_ADDR
// if povolani <> class_engineer then
10267: LD_VAR 0 2
10271: PUSH
10272: LD_INT 2
10274: NONEQUAL
10275: IFFALSE 10293
// pom = pom ^ pom3 ;
10277: LD_ADDR_VAR 0 5
10281: PUSH
10282: LD_VAR 0 5
10286: PUSH
10287: LD_VAR 0 8
10291: ADD
10292: ST_TO_ADDR
// if povolani <> class_soldier then
10293: LD_VAR 0 2
10297: PUSH
10298: LD_INT 1
10300: NONEQUAL
10301: IFFALSE 10319
// pom = pom ^ pom4 ;
10303: LD_ADDR_VAR 0 5
10307: PUSH
10308: LD_VAR 0 5
10312: PUSH
10313: LD_VAR 0 9
10317: ADD
10318: ST_TO_ADDR
// result := pom diff diffseznam ;
10319: LD_ADDR_VAR 0 4
10323: PUSH
10324: LD_VAR 0 5
10328: PUSH
10329: LD_VAR 0 3
10333: DIFF
10334: ST_TO_ADDR
// end ;
10335: LD_VAR 0 4
10339: RET
// every 0 0$1 trigger test_is_in_area_burlak and venku marked 991 do var pom ;
10340: CALL 13845 0 0
10344: PUSH
10345: LD_EXP 61
10349: AND
10350: IFFALSE 10437
10352: GO 10354
10354: DISABLE
10355: LD_INT 0
10357: PPUSH
// begin pom = FilterUnitsInArea ( RU1_base , [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
10358: LD_ADDR_VAR 0 1
10362: PUSH
10363: LD_INT 3
10365: PPUSH
10366: LD_INT 22
10368: PUSH
10369: LD_EXP 1
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 21
10380: PUSH
10381: LD_INT 2
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: PPUSH
10392: CALL_OW 70
10396: ST_TO_ADDR
// if pom > 0 then
10397: LD_VAR 0 1
10401: PUSH
10402: LD_INT 0
10404: GREATER
10405: IFFALSE 10409
// exit ;
10407: GO 10437
// InGameOn ;
10409: CALL_OW 8
// Say ( kurin , D1a-Kur-1 ) ;
10413: LD_EXP 53
10417: PPUSH
10418: LD_STRING D1a-Kur-1
10420: PPUSH
10421: CALL_OW 88
// InGameOff ;
10425: CALL_OW 9
// venku = false ;
10429: LD_ADDR_EXP 61
10433: PUSH
10434: LD_INT 0
10436: ST_TO_ADDR
// end ;
10437: PPOPN 1
10439: END
// every 0 0$1 trigger test_is_in_area_burlak and venku marked 992 do var pom ;
10440: CALL 13845 0 0
10444: PUSH
10445: LD_EXP 61
10449: AND
10450: IFFALSE 10538
10452: GO 10454
10454: DISABLE
10455: LD_INT 0
10457: PPUSH
// begin pom = FilterUnitsInArea ( RU1_base , [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
10458: LD_ADDR_VAR 0 1
10462: PUSH
10463: LD_INT 3
10465: PPUSH
10466: LD_INT 22
10468: PUSH
10469: LD_EXP 1
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PUSH
10478: LD_INT 21
10480: PUSH
10481: LD_INT 2
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PPUSH
10492: CALL_OW 70
10496: ST_TO_ADDR
// if pom > 0 then
10497: LD_VAR 0 1
10501: PUSH
10502: LD_INT 0
10504: GREATER
10505: IFFALSE 10537
// begin InGameOn ;
10507: CALL_OW 8
// Say ( kurin , D1a-Kur-1a ) ;
10511: LD_EXP 53
10515: PPUSH
10516: LD_STRING D1a-Kur-1a
10518: PPUSH
10519: CALL_OW 88
// InGameOff ;
10523: CALL_OW 9
// venku = false ;
10527: LD_ADDR_EXP 61
10531: PUSH
10532: LD_INT 0
10534: ST_TO_ADDR
// end else
10535: GO 10538
// enable ;
10537: ENABLE
// end ;
10538: PPOPN 1
10540: END
// every 0 0$2 trigger stav > 6 and not IsInArea ( bur , RU2_base ) do
10541: LD_EXP 60
10545: PUSH
10546: LD_INT 6
10548: GREATER
10549: PUSH
10550: LD_EXP 50
10554: PPUSH
10555: LD_INT 1
10557: PPUSH
10558: CALL_OW 308
10562: NOT
10563: AND
10564: IFFALSE 10578
10566: GO 10568
10568: DISABLE
// begin je_mimo = true ;
10569: LD_ADDR_LOC 7
10573: PUSH
10574: LD_INT 1
10576: ST_TO_ADDR
// enable ;
10577: ENABLE
// end ;
10578: END
// export function dialog_belkov_smrt ; var pom ; begin
10579: LD_INT 0
10581: PPUSH
10582: PPUSH
// InGameOn ;
10583: CALL_OW 8
// belkov_solved = 3 ;
10587: LD_ADDR_EXP 48
10591: PUSH
10592: LD_INT 3
10594: ST_TO_ADDR
// if pom >= procento_odkrytych_pro_vyhru [ difficulty ] and FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) = 0 then
10595: LD_VAR 0 2
10599: PUSH
10600: LD_EXP 42
10604: PUSH
10605: LD_OWVAR 67
10609: ARRAY
10610: GREATEREQUAL
10611: PUSH
10612: LD_INT 9
10614: PPUSH
10615: LD_INT 22
10617: PUSH
10618: LD_EXP 2
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PUSH
10627: LD_INT 30
10629: PUSH
10630: LD_INT 31
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PPUSH
10641: CALL_OW 70
10645: PUSH
10646: LD_INT 0
10648: EQUAL
10649: AND
10650: IFFALSE 10669
// begin navrat_a_konec = true ;
10652: LD_ADDR_EXP 47
10656: PUSH
10657: LD_INT 1
10659: ST_TO_ADDR
// ChangeMissionObjectives ( M10a ) ;
10660: LD_STRING M10a
10662: PPUSH
10663: CALL_OW 337
// end else
10667: GO 10676
// ChangeMissionObjectives ( M9a ) ;
10669: LD_STRING M9a
10671: PPUSH
10672: CALL_OW 337
// InGameOff ;
10676: CALL_OW 9
// end ;
10680: LD_VAR 0 1
10684: RET
// every 0 0$1 do var pom , i ; var Ru_Units ;
10685: GO 10687
10687: DISABLE
10688: LD_INT 0
10690: PPUSH
10691: PPUSH
10692: PPUSH
// begin Ru_Units = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
10693: LD_ADDR_VAR 0 3
10697: PUSH
10698: LD_INT 22
10700: PUSH
10701: LD_EXP 1
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 2
10712: PUSH
10713: LD_INT 21
10715: PUSH
10716: LD_INT 1
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: PUSH
10723: LD_INT 21
10725: PUSH
10726: LD_INT 2
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: LIST
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PPUSH
10742: CALL_OW 69
10746: ST_TO_ADDR
// for i in Ru_Units do
10747: LD_ADDR_VAR 0 2
10751: PUSH
10752: LD_VAR 0 3
10756: PUSH
10757: FOR_IN
10758: IFFALSE 10877
// begin pom = Attacks ( i ) ;
10760: LD_ADDR_VAR 0 1
10764: PUSH
10765: LD_VAR 0 2
10769: PPUSH
10770: CALL_OW 320
10774: ST_TO_ADDR
// if pom <> 0 then
10775: LD_VAR 0 1
10779: PUSH
10780: LD_INT 0
10782: NONEQUAL
10783: IFFALSE 10825
// if Getside ( pom ) in [ You2 , You3 ] then
10785: LD_VAR 0 1
10789: PPUSH
10790: CALL_OW 255
10794: PUSH
10795: LD_EXP 4
10799: PUSH
10800: LD_EXP 6
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: IN
10809: IFFALSE 10825
// konstanta_utoceni = konstanta_utoceni + 1 ;
10811: LD_ADDR_LOC 15
10815: PUSH
10816: LD_LOC 15
10820: PUSH
10821: LD_INT 1
10823: PLUS
10824: ST_TO_ADDR
// if pom = bel or pom = plat or pom = kurin then
10825: LD_VAR 0 1
10829: PUSH
10830: LD_EXP 52
10834: EQUAL
10835: PUSH
10836: LD_VAR 0 1
10840: PUSH
10841: LD_EXP 54
10845: EQUAL
10846: OR
10847: PUSH
10848: LD_VAR 0 1
10852: PUSH
10853: LD_EXP 53
10857: EQUAL
10858: OR
10859: IFFALSE 10875
// konstanta_utoceni = konstanta_utoceni + 10 ;
10861: LD_ADDR_LOC 15
10865: PUSH
10866: LD_LOC 15
10870: PUSH
10871: LD_INT 10
10873: PLUS
10874: ST_TO_ADDR
// end ;
10875: GO 10757
10877: POP
10878: POP
// if konstanta_utoceni < 10 then
10879: LD_LOC 15
10883: PUSH
10884: LD_INT 10
10886: LESS
10887: IFFALSE 10890
// enable ;
10889: ENABLE
// end ;
10890: PPOPN 3
10892: END
// every 0 0$1 trigger konstanta_utoceni >= 10 do
10893: LD_LOC 15
10897: PUSH
10898: LD_INT 10
10900: GREATEREQUAL
10901: IFFALSE 10910
10903: GO 10905
10905: DISABLE
// begin konec_mise_utok ;
10906: CALL 234 0 0
// end ;
10910: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 999 ] ] ] ) or GetLives ( kurin ) < 999 do
10911: LD_INT 22
10913: PUSH
10914: LD_INT 6
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PUSH
10921: LD_INT 21
10923: PUSH
10924: LD_INT 3
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: PUSH
10931: LD_INT 3
10933: PUSH
10934: LD_INT 24
10936: PUSH
10937: LD_INT 999
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: LIST
10952: PPUSH
10953: CALL_OW 69
10957: PUSH
10958: LD_EXP 53
10962: PPUSH
10963: CALL_OW 256
10967: PUSH
10968: LD_INT 999
10970: LESS
10971: OR
10972: IFFALSE 10981
10974: GO 10976
10976: DISABLE
// konec_mise_utok ;
10977: CALL 234 0 0
10981: END
// export function hint_skilly ; begin
10982: LD_INT 0
10984: PPUSH
// Hint ( Skills ) ;
10985: LD_STRING Skills
10987: PPUSH
10988: CALL_OW 339
// end ;
10992: LD_VAR 0 1
10996: RET
// every 0 0$2 do var pom ; var i ; var hinton ;
10997: GO 10999
10999: DISABLE
11000: LD_INT 0
11002: PPUSH
11003: PPUSH
11004: PPUSH
// begin hinton = false ;
11005: LD_ADDR_VAR 0 3
11009: PUSH
11010: LD_INT 0
11012: ST_TO_ADDR
// pom = FilterUnitsInArea ( VEHCAP , [ [ f_side , Amici ] , [ f_type , unit_vehicle ] ] ) ;
11013: LD_ADDR_VAR 0 1
11017: PUSH
11018: LD_INT 30
11020: PPUSH
11021: LD_INT 22
11023: PUSH
11024: LD_EXP 2
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: PUSH
11033: LD_INT 21
11035: PUSH
11036: LD_INT 2
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PPUSH
11047: CALL_OW 70
11051: ST_TO_ADDR
// for i in pom do
11052: LD_ADDR_VAR 0 2
11056: PUSH
11057: LD_VAR 0 1
11061: PUSH
11062: FOR_IN
11063: IFFALSE 11090
// if IsDrivenBy ( i ) = 0 then
11065: LD_VAR 0 2
11069: PPUSH
11070: CALL_OW 311
11074: PUSH
11075: LD_INT 0
11077: EQUAL
11078: IFFALSE 11088
// hinton = true ;
11080: LD_ADDR_VAR 0 3
11084: PUSH
11085: LD_INT 1
11087: ST_TO_ADDR
11088: GO 11062
11090: POP
11091: POP
// if hinton then
11092: LD_VAR 0 3
11096: IFFALSE 11107
// Hint ( CapturingVehicles1 ) else
11098: LD_STRING CapturingVehicles1
11100: PPUSH
11101: CALL_OW 339
11105: GO 11108
// enable ;
11107: ENABLE
// end ;
11108: PPOPN 3
11110: END
// every 0 0$2 do var pom , i ; var BUDE_hint ;
11111: GO 11113
11113: DISABLE
11114: LD_INT 0
11116: PPUSH
11117: PPUSH
11118: PPUSH
// begin BUDE_hint = false ;
11119: LD_ADDR_VAR 0 3
11123: PUSH
11124: LD_INT 0
11126: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_building ] ] ) ;
11127: LD_ADDR_VAR 0 1
11131: PUSH
11132: LD_INT 22
11134: PUSH
11135: LD_EXP 1
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: PUSH
11144: LD_INT 21
11146: PUSH
11147: LD_INT 3
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PPUSH
11158: CALL_OW 69
11162: ST_TO_ADDR
// for i in pom do
11163: LD_ADDR_VAR 0 2
11167: PUSH
11168: LD_VAR 0 1
11172: PUSH
11173: FOR_IN
11174: IFFALSE 11201
// if IsConstructed ( i ) <> 0 then
11176: LD_VAR 0 2
11180: PPUSH
11181: CALL_OW 304
11185: PUSH
11186: LD_INT 0
11188: NONEQUAL
11189: IFFALSE 11199
// BUDE_hint = true ;
11191: LD_ADDR_VAR 0 3
11195: PUSH
11196: LD_INT 1
11198: ST_TO_ADDR
11199: GO 11173
11201: POP
11202: POP
// if BUDE_hint then
11203: LD_VAR 0 3
11207: IFFALSE 11218
// Hint ( Building2 ) else
11209: LD_STRING Building2
11211: PPUSH
11212: CALL_OW 339
11216: GO 11219
// enable ;
11218: ENABLE
// end ; end_of_file
11219: PPOPN 3
11221: END
// var PlayingLooped ; export function play_dialog_15 ; begin
11222: LD_INT 0
11224: PPUSH
// while playing do
11225: LD_EXP 34
11229: IFFALSE 11240
// wait ( 0 0$1 ) ;
11231: LD_INT 35
11233: PPUSH
11234: CALL_OW 67
11238: GO 11225
// playing := true ;
11240: LD_ADDR_EXP 34
11244: PUSH
11245: LD_INT 1
11247: ST_TO_ADDR
// CenterOnXY ( 60 , 52 ) ;
11248: LD_INT 60
11250: PPUSH
11251: LD_INT 52
11253: PPUSH
11254: CALL_OW 84
// DialogueOn ;
11258: CALL_OW 6
// say ( Bur , D15-Bur-1 ) ;
11262: LD_EXP 50
11266: PPUSH
11267: LD_STRING D15-Bur-1
11269: PPUSH
11270: CALL_OW 88
// if IsOK ( Gny ) then
11274: LD_EXP 49
11278: PPUSH
11279: CALL_OW 302
11283: IFFALSE 11299
// say ( Gny , D15-Gny-1 ) else
11285: LD_EXP 49
11289: PPUSH
11290: LD_STRING D15-Gny-1
11292: PPUSH
11293: CALL_OW 88
11297: GO 11338
// if not BelkovFreed and IsOK ( Kov ) then
11299: LD_EXP 16
11303: NOT
11304: PUSH
11305: LD_EXP 51
11309: PPUSH
11310: CALL_OW 302
11314: AND
11315: IFFALSE 11331
// say ( Kov , D15-Kov-1 ) else
11317: LD_EXP 51
11321: PPUSH
11322: LD_STRING D15-Kov-1
11324: PPUSH
11325: CALL_OW 88
11329: GO 11338
// Wait ( 0 0$5 ) ;
11331: LD_INT 175
11333: PPUSH
11334: CALL_OW 67
// if not InWest then
11338: LD_EXP 31
11342: NOT
11343: IFFALSE 11401
// begin say ( Bur , D15-Bur-2 ) ;
11345: LD_EXP 50
11349: PPUSH
11350: LD_STRING D15-Bur-2
11352: PPUSH
11353: CALL_OW 88
// if IsOK ( Kov ) then
11357: LD_EXP 51
11361: PPUSH
11362: CALL_OW 302
11366: IFFALSE 11382
// say ( Kov , D15-Kov-2 ) else
11368: LD_EXP 51
11372: PPUSH
11373: LD_STRING D15-Kov-2
11375: PPUSH
11376: CALL_OW 88
11380: GO 11389
// wait ( 0 0$5 ) ;
11382: LD_INT 175
11384: PPUSH
11385: CALL_OW 67
// say ( Bur , D15-Bur-3 ) ;
11389: LD_EXP 50
11393: PPUSH
11394: LD_STRING D15-Bur-3
11396: PPUSH
11397: CALL_OW 88
// end ; DialogueOff ;
11401: CALL_OW 7
// CenterOnUnits ( BurlakComp ) ;
11405: LD_EXP 14
11409: PPUSH
11410: CALL_OW 85
// playing := false ;
11414: LD_ADDR_EXP 34
11418: PUSH
11419: LD_INT 0
11421: ST_TO_ADDR
// end ;
11422: LD_VAR 0 1
11426: RET
// export function play_dialog_qwbw1 ; begin
11427: LD_INT 0
11429: PPUSH
// while playing do
11430: LD_EXP 34
11434: IFFALSE 11445
// wait ( 0 0$1 ) ;
11436: LD_INT 35
11438: PPUSH
11439: CALL_OW 67
11443: GO 11430
// playing := true ;
11445: LD_ADDR_EXP 34
11449: PUSH
11450: LD_INT 1
11452: ST_TO_ADDR
// say ( Bur , D17-Bur-1 ) ;
11453: LD_EXP 50
11457: PPUSH
11458: LD_STRING D17-Bur-1
11460: PPUSH
11461: CALL_OW 88
// say ( Plat , D17-Pla-1 ) ;
11465: LD_EXP 54
11469: PPUSH
11470: LD_STRING D17-Pla-1
11472: PPUSH
11473: CALL_OW 88
// say ( Bur , D17-Bur-2 ) ;
11477: LD_EXP 50
11481: PPUSH
11482: LD_STRING D17-Bur-2
11484: PPUSH
11485: CALL_OW 88
// say ( Plat , D17-Pla-2 ) ;
11489: LD_EXP 54
11493: PPUSH
11494: LD_STRING D17-Pla-2
11496: PPUSH
11497: CALL_OW 88
// playing := false ;
11501: LD_ADDR_EXP 34
11505: PUSH
11506: LD_INT 0
11508: ST_TO_ADDR
// end ;
11509: LD_VAR 0 1
11513: RET
// export function play_dialog_qwbw2 ; begin
11514: LD_INT 0
11516: PPUSH
// while playing do
11517: LD_EXP 34
11521: IFFALSE 11532
// wait ( 0 0$1 ) ;
11523: LD_INT 35
11525: PPUSH
11526: CALL_OW 67
11530: GO 11517
// playing := true ;
11532: LD_ADDR_EXP 34
11536: PUSH
11537: LD_INT 1
11539: ST_TO_ADDR
// say ( Bur , D18-Bur-1 ) ;
11540: LD_EXP 50
11544: PPUSH
11545: LD_STRING D18-Bur-1
11547: PPUSH
11548: CALL_OW 88
// say ( Plat , D18-Pla-1 ) ;
11552: LD_EXP 54
11556: PPUSH
11557: LD_STRING D18-Pla-1
11559: PPUSH
11560: CALL_OW 88
// say ( Bur , D18-Bur-2 ) ;
11564: LD_EXP 50
11568: PPUSH
11569: LD_STRING D18-Bur-2
11571: PPUSH
11572: CALL_OW 88
// say ( Plat , D18-Pla-2 ) ;
11576: LD_EXP 54
11580: PPUSH
11581: LD_STRING D18-Pla-2
11583: PPUSH
11584: CALL_OW 88
// playing := false ;
11588: LD_ADDR_EXP 34
11592: PUSH
11593: LD_INT 0
11595: ST_TO_ADDR
// end ;
11596: LD_VAR 0 1
11600: RET
// export function play_dialog_19 ; begin
11601: LD_INT 0
11603: PPUSH
// while playing do
11604: LD_EXP 34
11608: IFFALSE 11619
// wait ( 0 0$1 ) ;
11610: LD_INT 35
11612: PPUSH
11613: CALL_OW 67
11617: GO 11604
// playing := true ;
11619: LD_ADDR_EXP 34
11623: PUSH
11624: LD_INT 1
11626: ST_TO_ADDR
// if IsOK ( Gny ) then
11627: LD_EXP 49
11631: PPUSH
11632: CALL_OW 302
11636: IFFALSE 11664
// begin say ( Gny , D19-Gny-1 ) ;
11638: LD_EXP 49
11642: PPUSH
11643: LD_STRING D19-Gny-1
11645: PPUSH
11646: CALL_OW 88
// say ( Bur , D19-Bur-1 ) ;
11650: LD_EXP 50
11654: PPUSH
11655: LD_STRING D19-Bur-1
11657: PPUSH
11658: CALL_OW 88
// end else
11662: GO 11699
// if IsOK ( Kov ) then
11664: LD_EXP 51
11668: PPUSH
11669: CALL_OW 302
11673: IFFALSE 11699
// begin say ( Kov , D19-Kov-1 ) ;
11675: LD_EXP 51
11679: PPUSH
11680: LD_STRING D19-Kov-1
11682: PPUSH
11683: CALL_OW 88
// say ( Bur , D19-Bur-2 ) ;
11687: LD_EXP 50
11691: PPUSH
11692: LD_STRING D19-Bur-2
11694: PPUSH
11695: CALL_OW 88
// end ; playing := false ;
11699: LD_ADDR_EXP 34
11703: PUSH
11704: LD_INT 0
11706: ST_TO_ADDR
// end ;
11707: LD_VAR 0 1
11711: RET
// export function play_dialog_19a ; begin
11712: LD_INT 0
11714: PPUSH
// while playing do
11715: LD_EXP 34
11719: IFFALSE 11730
// wait ( 0 0$1 ) ;
11721: LD_INT 35
11723: PPUSH
11724: CALL_OW 67
11728: GO 11715
// playing := true ;
11730: LD_ADDR_EXP 34
11734: PUSH
11735: LD_INT 1
11737: ST_TO_ADDR
// if IsOK ( Gny ) then
11738: LD_EXP 49
11742: PPUSH
11743: CALL_OW 302
11747: IFFALSE 11763
// say ( Gny , D19A-Gny-1 ) else
11749: LD_EXP 49
11753: PPUSH
11754: LD_STRING D19A-Gny-1
11756: PPUSH
11757: CALL_OW 88
11761: GO 11786
// if IsOK ( Kov ) then
11763: LD_EXP 51
11767: PPUSH
11768: CALL_OW 302
11772: IFFALSE 11786
// say ( Kov , D19A-Kov-1 ) ;
11774: LD_EXP 51
11778: PPUSH
11779: LD_STRING D19A-Kov-1
11781: PPUSH
11782: CALL_OW 88
// playing := false ;
11786: LD_ADDR_EXP 34
11790: PUSH
11791: LD_INT 0
11793: ST_TO_ADDR
// end ;
11794: LD_VAR 0 1
11798: RET
// export function play_dialog_16 ; begin
11799: LD_INT 0
11801: PPUSH
// while playing do
11802: LD_EXP 34
11806: IFFALSE 11817
// wait ( 0 0$1 ) ;
11808: LD_INT 35
11810: PPUSH
11811: CALL_OW 67
11815: GO 11802
// playing := true ;
11817: LD_ADDR_EXP 34
11821: PUSH
11822: LD_INT 1
11824: ST_TO_ADDR
// CenterOnXY ( 90 , 57 ) ;
11825: LD_INT 90
11827: PPUSH
11828: LD_INT 57
11830: PPUSH
11831: CALL_OW 84
// DialogueOn ;
11835: CALL_OW 6
// if IsOK ( Kov ) then
11839: LD_EXP 51
11843: PPUSH
11844: CALL_OW 302
11848: IFFALSE 11883
// if not WBWSpotted then
11850: LD_EXP 18
11854: NOT
11855: IFFALSE 11871
// say ( Kov , D16-Kov-1 ) else
11857: LD_EXP 51
11861: PPUSH
11862: LD_STRING D16-Kov-1
11864: PPUSH
11865: CALL_OW 88
11869: GO 11883
// say ( Kov , D16-Kov-1a ) ;
11871: LD_EXP 51
11875: PPUSH
11876: LD_STRING D16-Kov-1a
11878: PPUSH
11879: CALL_OW 88
// say ( Bur , D16-Bur-1 ) ;
11883: LD_EXP 50
11887: PPUSH
11888: LD_STRING D16-Bur-1
11890: PPUSH
11891: CALL_OW 88
// if IsOK ( Gny ) then
11895: LD_EXP 49
11899: PPUSH
11900: CALL_OW 302
11904: IFFALSE 11918
// say ( Gny , D16-Gny-1 ) ;
11906: LD_EXP 49
11910: PPUSH
11911: LD_STRING D16-Gny-1
11913: PPUSH
11914: CALL_OW 88
// DialogueOff ;
11918: CALL_OW 7
// CenterOnUnits ( BurlakComp ) ;
11922: LD_EXP 14
11926: PPUSH
11927: CALL_OW 85
// playing := false ;
11931: LD_ADDR_EXP 34
11935: PUSH
11936: LD_INT 0
11938: ST_TO_ADDR
// end ;
11939: LD_VAR 0 1
11943: RET
// export function play_dialog_20 ; begin
11944: LD_INT 0
11946: PPUSH
// while playing do
11947: LD_EXP 34
11951: IFFALSE 11962
// wait ( 0 0$1 ) ;
11953: LD_INT 35
11955: PPUSH
11956: CALL_OW 67
11960: GO 11947
// playing := true ;
11962: LD_ADDR_EXP 34
11966: PUSH
11967: LD_INT 1
11969: ST_TO_ADDR
// say ( Bur , D20-Bur-1 ) ;
11970: LD_EXP 50
11974: PPUSH
11975: LD_STRING D20-Bur-1
11977: PPUSH
11978: CALL_OW 88
// say ( Plat , D20-Pla-1 ) ;
11982: LD_EXP 54
11986: PPUSH
11987: LD_STRING D20-Pla-1
11989: PPUSH
11990: CALL_OW 88
// playing := false ;
11994: LD_ADDR_EXP 34
11998: PUSH
11999: LD_INT 0
12001: ST_TO_ADDR
// end ;
12002: LD_VAR 0 1
12006: RET
// export function play_dialog_20a ; begin
12007: LD_INT 0
12009: PPUSH
// while playing do
12010: LD_EXP 34
12014: IFFALSE 12025
// wait ( 0 0$1 ) ;
12016: LD_INT 35
12018: PPUSH
12019: CALL_OW 67
12023: GO 12010
// playing := true ;
12025: LD_ADDR_EXP 34
12029: PUSH
12030: LD_INT 1
12032: ST_TO_ADDR
// say ( Bur , D20a-Bur-1 ) ;
12033: LD_EXP 50
12037: PPUSH
12038: LD_STRING D20a-Bur-1
12040: PPUSH
12041: CALL_OW 88
// say ( Plat , D20a-Pla-1 ) ;
12045: LD_EXP 54
12049: PPUSH
12050: LD_STRING D20a-Pla-1
12052: PPUSH
12053: CALL_OW 88
// playing := false ;
12057: LD_ADDR_EXP 34
12061: PUSH
12062: LD_INT 0
12064: ST_TO_ADDR
// end ;
12065: LD_VAR 0 1
12069: RET
// export function play_dialog_qAtAm1 ; begin
12070: LD_INT 0
12072: PPUSH
// while playing do
12073: LD_EXP 34
12077: IFFALSE 12088
// wait ( 0 0$1 ) ;
12079: LD_INT 35
12081: PPUSH
12082: CALL_OW 67
12086: GO 12073
// playing := true ;
12088: LD_ADDR_EXP 34
12092: PUSH
12093: LD_INT 1
12095: ST_TO_ADDR
// say ( Bur , D21-Bur-1 ) ;
12096: LD_EXP 50
12100: PPUSH
12101: LD_STRING D21-Bur-1
12103: PPUSH
12104: CALL_OW 88
// say ( Plat , D21-Pla-1 ) ;
12108: LD_EXP 54
12112: PPUSH
12113: LD_STRING D21-Pla-1
12115: PPUSH
12116: CALL_OW 88
// playing := false ;
12120: LD_ADDR_EXP 34
12124: PUSH
12125: LD_INT 0
12127: ST_TO_ADDR
// end ;
12128: LD_VAR 0 1
12132: RET
// export function play_dialog_qAtAm2 ; begin
12133: LD_INT 0
12135: PPUSH
// while playing do
12136: LD_EXP 34
12140: IFFALSE 12151
// wait ( 0 0$1 ) ;
12142: LD_INT 35
12144: PPUSH
12145: CALL_OW 67
12149: GO 12136
// playing := true ;
12151: LD_ADDR_EXP 34
12155: PUSH
12156: LD_INT 1
12158: ST_TO_ADDR
// say ( Bur , D22-Bur-1 ) ;
12159: LD_EXP 50
12163: PPUSH
12164: LD_STRING D22-Bur-1
12166: PPUSH
12167: CALL_OW 88
// if ( not Reinforcements ) and ( WBWDestroyed ) then
12171: LD_EXP 30
12175: NOT
12176: PUSH
12177: LD_EXP 20
12181: AND
12182: IFFALSE 12198
// say ( Plat , D22-Pla-1 ) else
12184: LD_EXP 54
12188: PPUSH
12189: LD_STRING D22-Pla-1
12191: PPUSH
12192: CALL_OW 88
12196: GO 12236
// if ( Reinforcements ) and ( WBWDestroyed ) then
12198: LD_EXP 30
12202: PUSH
12203: LD_EXP 20
12207: AND
12208: IFFALSE 12224
// say ( Plat , D22-Pla-1b ) else
12210: LD_EXP 54
12214: PPUSH
12215: LD_STRING D22-Pla-1b
12217: PPUSH
12218: CALL_OW 88
12222: GO 12236
// say ( Plat , D22-Pla-1a ) ;
12224: LD_EXP 54
12228: PPUSH
12229: LD_STRING D22-Pla-1a
12231: PPUSH
12232: CALL_OW 88
// playing := false ;
12236: LD_ADDR_EXP 34
12240: PUSH
12241: LD_INT 0
12243: ST_TO_ADDR
// end ;
12244: LD_VAR 0 1
12248: RET
// export function play_dialog_23 ; begin
12249: LD_INT 0
12251: PPUSH
// while playing do
12252: LD_EXP 34
12256: IFFALSE 12267
// wait ( 0 0$1 ) ;
12258: LD_INT 35
12260: PPUSH
12261: CALL_OW 67
12265: GO 12252
// playing := true ;
12267: LD_ADDR_EXP 34
12271: PUSH
12272: LD_INT 1
12274: ST_TO_ADDR
// if IsOK ( Gny ) then
12275: LD_EXP 49
12279: PPUSH
12280: CALL_OW 302
12284: IFFALSE 12310
// begin say ( Gny , D23-Gny-1 ) ;
12286: LD_EXP 49
12290: PPUSH
12291: LD_STRING D23-Gny-1
12293: PPUSH
12294: CALL_OW 88
// say ( Bur , D23-Bur-1 ) ;
12298: LD_EXP 50
12302: PPUSH
12303: LD_STRING D23-Bur-1
12305: PPUSH
12306: CALL_OW 88
// end ; playing := false ;
12310: LD_ADDR_EXP 34
12314: PUSH
12315: LD_INT 0
12317: ST_TO_ADDR
// end ;
12318: LD_VAR 0 1
12322: RET
// export function play_dialog_24 ; begin
12323: LD_INT 0
12325: PPUSH
// while playing do
12326: LD_EXP 34
12330: IFFALSE 12341
// wait ( 0 0$1 ) ;
12332: LD_INT 35
12334: PPUSH
12335: CALL_OW 67
12339: GO 12326
// playing := true ;
12341: LD_ADDR_EXP 34
12345: PUSH
12346: LD_INT 1
12348: ST_TO_ADDR
// if not IsOK ( Bel ) then
12349: LD_EXP 52
12353: PPUSH
12354: CALL_OW 302
12358: NOT
12359: IFFALSE 12372
// begin Msg ( Bel is killed. Please report this bug. Mission will now be terminated. ) ;
12361: LD_STRING Bel is killed. Please report this bug. Mission will now be terminated.
12363: PPUSH
12364: CALL_OW 100
// konec_mise ;
12368: CALL 249 0 0
// end ; say ( Bel , D24-Bel-1 ) ;
12372: LD_EXP 52
12376: PPUSH
12377: LD_STRING D24-Bel-1
12379: PPUSH
12380: CALL_OW 88
// if BELKOV_MRTVY then
12384: LD_EXP 46
12388: IFFALSE 12404
// say ( Bur , D24-Bur-1a ) else
12390: LD_EXP 50
12394: PPUSH
12395: LD_STRING D24-Bur-1a
12397: PPUSH
12398: CALL_OW 88
12402: GO 12416
// say ( Bur , D24-Bur-1 ) ;
12404: LD_EXP 50
12408: PPUSH
12409: LD_STRING D24-Bur-1
12411: PPUSH
12412: CALL_OW 88
// say ( Bel , D24-Bel-2 ) ;
12416: LD_EXP 52
12420: PPUSH
12421: LD_STRING D24-Bel-2
12423: PPUSH
12424: CALL_OW 88
// say ( Bur , D24-Bur-2 ) ;
12428: LD_EXP 50
12432: PPUSH
12433: LD_STRING D24-Bur-2
12435: PPUSH
12436: CALL_OW 88
// if ( GetSide ( auto_belkov ) = you ) then
12440: LD_EXP 70
12444: PPUSH
12445: CALL_OW 255
12449: PUSH
12450: LD_EXP 1
12454: EQUAL
12455: IFFALSE 12469
// begin say ( Bur , D24-Bur-2a ) ;
12457: LD_EXP 50
12461: PPUSH
12462: LD_STRING D24-Bur-2a
12464: PPUSH
12465: CALL_OW 88
// end ; say ( Plat , D24-Pla-2 ) ;
12469: LD_EXP 54
12473: PPUSH
12474: LD_STRING D24-Pla-2
12476: PPUSH
12477: CALL_OW 88
// if WBWSpotted and ( not WBWDestroyed ) then
12481: LD_EXP 18
12485: PUSH
12486: LD_EXP 20
12490: NOT
12491: AND
12492: IFFALSE 12506
// begin say ( Plat , D24-Pla-2a ) ;
12494: LD_EXP 54
12498: PPUSH
12499: LD_STRING D24-Pla-2a
12501: PPUSH
12502: CALL_OW 88
// end ; playing := false ;
12506: LD_ADDR_EXP 34
12510: PUSH
12511: LD_INT 0
12513: ST_TO_ADDR
// end ;
12514: LD_VAR 0 1
12518: RET
// export function play_dialog_25 ; var SomethingNew ; begin
12519: LD_INT 0
12521: PPUSH
12522: PPUSH
// while playing do
12523: LD_EXP 34
12527: IFFALSE 12538
// wait ( 0 0$1 ) ;
12529: LD_INT 35
12531: PPUSH
12532: CALL_OW 67
12536: GO 12523
// playing := true ;
12538: LD_ADDR_EXP 34
12542: PUSH
12543: LD_INT 1
12545: ST_TO_ADDR
// say ( Plat , D25-Pla-1 ) ;
12546: LD_EXP 54
12550: PPUSH
12551: LD_STRING D25-Pla-1
12553: PPUSH
12554: CALL_OW 88
// SomethingNew := false ;
12558: LD_ADDR_VAR 0 2
12562: PUSH
12563: LD_INT 0
12565: ST_TO_ADDR
// if ( WBWSpotted ) and ( not WBWDestroyed ) and ( not WBWReported ) and ( EBWSpotted ) and ( not EBWDestroyed ) and ( not EBWReported ) then
12566: LD_EXP 18
12570: PUSH
12571: LD_EXP 20
12575: NOT
12576: AND
12577: PUSH
12578: LD_EXP 21
12582: NOT
12583: AND
12584: PUSH
12585: LD_EXP 22
12589: AND
12590: PUSH
12591: LD_EXP 23
12595: NOT
12596: AND
12597: PUSH
12598: LD_EXP 24
12602: NOT
12603: AND
12604: IFFALSE 12642
// begin say ( Bur , D25-Bur-1 ) ;
12606: LD_EXP 50
12610: PPUSH
12611: LD_STRING D25-Bur-1
12613: PPUSH
12614: CALL_OW 88
// WBWReported := true ;
12618: LD_ADDR_EXP 21
12622: PUSH
12623: LD_INT 1
12625: ST_TO_ADDR
// EBWReported := true ;
12626: LD_ADDR_EXP 24
12630: PUSH
12631: LD_INT 1
12633: ST_TO_ADDR
// SomethingNew := true ;
12634: LD_ADDR_VAR 0 2
12638: PUSH
12639: LD_INT 1
12641: ST_TO_ADDR
// end ; if EBWSpotted and ( not EBWDestroyed ) and ( not EBWReported ) then
12642: LD_EXP 22
12646: PUSH
12647: LD_EXP 23
12651: NOT
12652: AND
12653: PUSH
12654: LD_EXP 24
12658: NOT
12659: AND
12660: IFFALSE 12690
// begin say ( Bur , D25-Bur-1a ) ;
12662: LD_EXP 50
12666: PPUSH
12667: LD_STRING D25-Bur-1a
12669: PPUSH
12670: CALL_OW 88
// EBWReported := true ;
12674: LD_ADDR_EXP 24
12678: PUSH
12679: LD_INT 1
12681: ST_TO_ADDR
// SomethingNew := true ;
12682: LD_ADDR_VAR 0 2
12686: PUSH
12687: LD_INT 1
12689: ST_TO_ADDR
// end ; if WBWSpotted and ( not WBWDestroyed ) and ( not WBWReported ) then
12690: LD_EXP 18
12694: PUSH
12695: LD_EXP 20
12699: NOT
12700: AND
12701: PUSH
12702: LD_EXP 21
12706: NOT
12707: AND
12708: IFFALSE 12750
// begin say ( Bur , D25-Bur-1b ) ;
12710: LD_EXP 50
12714: PPUSH
12715: LD_STRING D25-Bur-1b
12717: PPUSH
12718: CALL_OW 88
// say ( Bur , D25b-Bur-1 ) ;
12722: LD_EXP 50
12726: PPUSH
12727: LD_STRING D25b-Bur-1
12729: PPUSH
12730: CALL_OW 88
// WBWReported := true ;
12734: LD_ADDR_EXP 21
12738: PUSH
12739: LD_INT 1
12741: ST_TO_ADDR
// SomethingNew := true ;
12742: LD_ADDR_VAR 0 2
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// end ; if ( not SomethingNew ) then
12750: LD_VAR 0 2
12754: NOT
12755: IFFALSE 12769
// say ( Bur , D25-Bur-1c ) ;
12757: LD_EXP 50
12761: PPUSH
12762: LD_STRING D25-Bur-1c
12764: PPUSH
12765: CALL_OW 88
// playing := false ;
12769: LD_ADDR_EXP 34
12773: PUSH
12774: LD_INT 0
12776: ST_TO_ADDR
// end ;
12777: LD_VAR 0 1
12781: RET
// export function play_dialog_25a ; var SomethingNew ; begin
12782: LD_INT 0
12784: PPUSH
12785: PPUSH
// while playing do
12786: LD_EXP 34
12790: IFFALSE 12801
// wait ( 0 0$1 ) ;
12792: LD_INT 35
12794: PPUSH
12795: CALL_OW 67
12799: GO 12786
// playing := true ;
12801: LD_ADDR_EXP 34
12805: PUSH
12806: LD_INT 1
12808: ST_TO_ADDR
// say ( Plat , D25a-Pla-1 ) ;
12809: LD_EXP 54
12813: PPUSH
12814: LD_STRING D25a-Pla-1
12816: PPUSH
12817: CALL_OW 88
// SomethingNew := false ;
12821: LD_ADDR_VAR 0 2
12825: PUSH
12826: LD_INT 0
12828: ST_TO_ADDR
// if WBWSpotted and ( not WBWDestroyed ) and ( not WBWReported ) then
12829: LD_EXP 18
12833: PUSH
12834: LD_EXP 20
12838: NOT
12839: AND
12840: PUSH
12841: LD_EXP 21
12845: NOT
12846: AND
12847: IFFALSE 12889
// begin say ( Bur , D25a-Bur-1b ) ;
12849: LD_EXP 50
12853: PPUSH
12854: LD_STRING D25a-Bur-1b
12856: PPUSH
12857: CALL_OW 88
// say ( Bur , D25b-Bur-1 ) ;
12861: LD_EXP 50
12865: PPUSH
12866: LD_STRING D25b-Bur-1
12868: PPUSH
12869: CALL_OW 88
// WBWReported := true ;
12873: LD_ADDR_EXP 21
12877: PUSH
12878: LD_INT 1
12880: ST_TO_ADDR
// SomethingNew := true ;
12881: LD_ADDR_VAR 0 2
12885: PUSH
12886: LD_INT 1
12888: ST_TO_ADDR
// end ; if EBWSpotted and ( not EBWDestroyed ) and ( not EBWReported ) then
12889: LD_EXP 22
12893: PUSH
12894: LD_EXP 23
12898: NOT
12899: AND
12900: PUSH
12901: LD_EXP 24
12905: NOT
12906: AND
12907: IFFALSE 12937
// begin say ( Bur , D25a-Bur-1a ) ;
12909: LD_EXP 50
12913: PPUSH
12914: LD_STRING D25a-Bur-1a
12916: PPUSH
12917: CALL_OW 88
// EBWReported := true ;
12921: LD_ADDR_EXP 24
12925: PUSH
12926: LD_INT 1
12928: ST_TO_ADDR
// SomethingNew := true ;
12929: LD_ADDR_VAR 0 2
12933: PUSH
12934: LD_INT 1
12936: ST_TO_ADDR
// end ; if ( not SomethingNew ) then
12937: LD_VAR 0 2
12941: NOT
12942: IFFALSE 12956
// say ( Bur , D25a-Bur-1 ) ;
12944: LD_EXP 50
12948: PPUSH
12949: LD_STRING D25a-Bur-1
12951: PPUSH
12952: CALL_OW 88
// playing := false ;
12956: LD_ADDR_EXP 34
12960: PUSH
12961: LD_INT 0
12963: ST_TO_ADDR
// end ;
12964: LD_VAR 0 1
12968: RET
// export function play_dialog_25b ; begin
12969: LD_INT 0
12971: PPUSH
// while playing do
12972: LD_EXP 34
12976: IFFALSE 12987
// wait ( 0 0$1 ) ;
12978: LD_INT 35
12980: PPUSH
12981: CALL_OW 67
12985: GO 12972
// playing := true ;
12987: LD_ADDR_EXP 34
12991: PUSH
12992: LD_INT 1
12994: ST_TO_ADDR
// say ( Plat , D25b-Pla-1 ) ;
12995: LD_EXP 54
12999: PPUSH
13000: LD_STRING D25b-Pla-1
13002: PPUSH
13003: CALL_OW 88
// playing := false ;
13007: LD_ADDR_EXP 34
13011: PUSH
13012: LD_INT 0
13014: ST_TO_ADDR
// end ;
13015: LD_VAR 0 1
13019: RET
// export function play_dialog_25c ; begin
13020: LD_INT 0
13022: PPUSH
// while playing do
13023: LD_EXP 34
13027: IFFALSE 13038
// wait ( 0 0$1 ) ;
13029: LD_INT 35
13031: PPUSH
13032: CALL_OW 67
13036: GO 13023
// playing := true ;
13038: LD_ADDR_EXP 34
13042: PUSH
13043: LD_INT 1
13045: ST_TO_ADDR
// if ( not WBWSpotted ) then
13046: LD_EXP 18
13050: NOT
13051: IFFALSE 13067
// say ( Plat , D25c-Pla-1 ) else
13053: LD_EXP 54
13057: PPUSH
13058: LD_STRING D25c-Pla-1
13060: PPUSH
13061: CALL_OW 88
13065: GO 13079
// say ( Plat , D25c-Pla-1a ) ;
13067: LD_EXP 54
13071: PPUSH
13072: LD_STRING D25c-Pla-1a
13074: PPUSH
13075: CALL_OW 88
// playing := false ;
13079: LD_ADDR_EXP 34
13083: PUSH
13084: LD_INT 0
13086: ST_TO_ADDR
// end ;
13087: LD_VAR 0 1
13091: RET
// every 0 0$5 do
13092: GO 13094
13094: DISABLE
// begin if Playing then
13095: LD_EXP 34
13099: IFFALSE 13117
// PlayingLooped := PlayingLooped + 1 else
13101: LD_ADDR_LOC 17
13105: PUSH
13106: LD_LOC 17
13110: PUSH
13111: LD_INT 1
13113: PLUS
13114: ST_TO_ADDR
13115: GO 13125
// PlayingLooped := 0 ;
13117: LD_ADDR_LOC 17
13121: PUSH
13122: LD_INT 0
13124: ST_TO_ADDR
// if PlayingLooped >= 30 then
13125: LD_LOC 17
13129: PUSH
13130: LD_INT 30
13132: GREATEREQUAL
13133: IFFALSE 13150
// begin msg ( Playing too long. Possible bug. Please report. ) ;
13135: LD_STRING Playing too long. Possible bug. Please report.
13137: PPUSH
13138: CALL_OW 100
// Playing := false ;
13142: LD_ADDR_EXP 34
13146: PUSH
13147: LD_INT 0
13149: ST_TO_ADDR
// end ; enable end ; end_of_file
13150: ENABLE
13151: END
// export Gny ; export bur ; export Kov ; export bel ; export kurin ; export plat ; export Rusi_enter ; export Rusi_sever ; export Rusi_01 ; export rusi_survivors ; export stav_utoku ; export stav ; export venku ; export videli_w ; export videli_e ; export bedny ; export bedny_hint ; export videne ; export zasilek ; export posily_go ; export saved_bel ; export auto_belkov ; var pocet_uukazani ; var BurSk ; var BelSk ; var GnySk ; every 0 0$0.1 do var i ;
13152: GO 13154
13154: DISABLE
13155: LD_INT 0
13157: PPUSH
// begin zasilek = 0 ;
13158: LD_ADDR_EXP 67
13162: PUSH
13163: LD_INT 0
13165: ST_TO_ADDR
// bedny_hint = false ;
13166: LD_ADDR_EXP 65
13170: PUSH
13171: LD_INT 0
13173: ST_TO_ADDR
// stav = 0 ;
13174: LD_ADDR_EXP 60
13178: PUSH
13179: LD_INT 0
13181: ST_TO_ADDR
// Rusi_enter = FilterUnitsInArea ( RU1_base , [ [ f_side , You ] ] ) ;
13182: LD_ADDR_EXP 55
13186: PUSH
13187: LD_INT 3
13189: PPUSH
13190: LD_INT 22
13192: PUSH
13193: LD_EXP 1
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PUSH
13202: EMPTY
13203: LIST
13204: PPUSH
13205: CALL_OW 70
13209: ST_TO_ADDR
// BurlakComp = Rusi_enter ;
13210: LD_ADDR_EXP 14
13214: PUSH
13215: LD_EXP 55
13219: ST_TO_ADDR
// venku = false ;
13220: LD_ADDR_EXP 61
13224: PUSH
13225: LD_INT 0
13227: ST_TO_ADDR
// stav_utoku = 0 ;
13228: LD_ADDR_EXP 59
13232: PUSH
13233: LD_INT 0
13235: ST_TO_ADDR
// videli_w = false ;
13236: LD_ADDR_EXP 62
13240: PUSH
13241: LD_INT 0
13243: ST_TO_ADDR
// videli_e = false ;
13244: LD_ADDR_EXP 63
13248: PUSH
13249: LD_INT 0
13251: ST_TO_ADDR
// bedny = [ ] ;
13252: LD_ADDR_EXP 64
13256: PUSH
13257: EMPTY
13258: ST_TO_ADDR
// videne = [ ] ;
13259: LD_ADDR_EXP 66
13263: PUSH
13264: EMPTY
13265: ST_TO_ADDR
// Rusi_sever = [ bel ] ;
13266: LD_ADDR_EXP 56
13270: PUSH
13271: LD_EXP 52
13275: PUSH
13276: EMPTY
13277: LIST
13278: ST_TO_ADDR
// Rusi_01 = [ ] ;
13279: LD_ADDR_EXP 57
13283: PUSH
13284: EMPTY
13285: ST_TO_ADDR
// posily_go = false ;
13286: LD_ADDR_EXP 68
13290: PUSH
13291: LD_INT 0
13293: ST_TO_ADDR
// saved_bel = false ;
13294: LD_ADDR_EXP 69
13298: PUSH
13299: LD_INT 0
13301: ST_TO_ADDR
// pocet_uukazani = 0 ;
13302: LD_ADDR_LOC 18
13306: PUSH
13307: LD_INT 0
13309: ST_TO_ADDR
// for i in [ 501 , 502 , 503 , 599 ] do
13310: LD_ADDR_VAR 0 1
13314: PUSH
13315: LD_INT 501
13317: PUSH
13318: LD_INT 502
13320: PUSH
13321: LD_INT 503
13323: PUSH
13324: LD_INT 599
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: PUSH
13333: FOR_IN
13334: IFFALSE 13343
// disable ( i ) ;
13336: LD_VAR 0 1
13340: DISABLE_MARKED
13341: GO 13333
13343: POP
13344: POP
// nastaveni_zacatku_skillu ;
13345: CALL 13352 0 0
// end ;
13349: PPOPN 1
13351: END
// function nastaveni_zacatku_skillu ; begin
13352: LD_INT 0
13354: PPUSH
// if IsOK ( bur ) then
13355: LD_EXP 50
13359: PPUSH
13360: CALL_OW 302
13364: IFFALSE 13429
// BurSk := [ GetSkill ( bur , 1 ) , GetSkill ( bur , 2 ) , GetSkill ( bur , 3 ) , GetSkill ( bur , 4 ) ] ;
13366: LD_ADDR_LOC 19
13370: PUSH
13371: LD_EXP 50
13375: PPUSH
13376: LD_INT 1
13378: PPUSH
13379: CALL_OW 259
13383: PUSH
13384: LD_EXP 50
13388: PPUSH
13389: LD_INT 2
13391: PPUSH
13392: CALL_OW 259
13396: PUSH
13397: LD_EXP 50
13401: PPUSH
13402: LD_INT 3
13404: PPUSH
13405: CALL_OW 259
13409: PUSH
13410: LD_EXP 50
13414: PPUSH
13415: LD_INT 4
13417: PPUSH
13418: CALL_OW 259
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: ST_TO_ADDR
// if IsOK ( Gny ) then
13429: LD_EXP 49
13433: PPUSH
13434: CALL_OW 302
13438: IFFALSE 13503
// GnySk := [ GetSkill ( Gny , 1 ) , GetSkill ( Gny , 2 ) , GetSkill ( Gny , 3 ) , GetSkill ( Gny , 4 ) ] ;
13440: LD_ADDR_LOC 21
13444: PUSH
13445: LD_EXP 49
13449: PPUSH
13450: LD_INT 1
13452: PPUSH
13453: CALL_OW 259
13457: PUSH
13458: LD_EXP 49
13462: PPUSH
13463: LD_INT 2
13465: PPUSH
13466: CALL_OW 259
13470: PUSH
13471: LD_EXP 49
13475: PPUSH
13476: LD_INT 3
13478: PPUSH
13479: CALL_OW 259
13483: PUSH
13484: LD_EXP 49
13488: PPUSH
13489: LD_INT 4
13491: PPUSH
13492: CALL_OW 259
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: ST_TO_ADDR
// if IsOK ( bel ) then
13503: LD_EXP 52
13507: PPUSH
13508: CALL_OW 302
13512: IFFALSE 13577
// BelSk := [ GetSkill ( bel , 1 ) , GetSkill ( bel , 2 ) , GetSkill ( bel , 3 ) , GetSkill ( bel , 4 ) ] ;
13514: LD_ADDR_LOC 20
13518: PUSH
13519: LD_EXP 52
13523: PPUSH
13524: LD_INT 1
13526: PPUSH
13527: CALL_OW 259
13531: PUSH
13532: LD_EXP 52
13536: PPUSH
13537: LD_INT 2
13539: PPUSH
13540: CALL_OW 259
13544: PUSH
13545: LD_EXP 52
13549: PPUSH
13550: LD_INT 3
13552: PPUSH
13553: CALL_OW 259
13557: PUSH
13558: LD_EXP 52
13562: PPUSH
13563: LD_INT 4
13565: PPUSH
13566: CALL_OW 259
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: ST_TO_ADDR
// end ;
13577: LD_VAR 0 1
13581: RET
// export function uklid_rusu ; begin
13582: LD_INT 0
13584: PPUSH
// ComEnterUnit ( RU1_vb1 , RU1_bu1 ) ;
13585: LD_INT 12
13587: PPUSH
13588: LD_INT 6
13590: PPUSH
13591: CALL_OW 120
// ComEnterUnit ( RU1_vb2 , RU1_bu2 ) ;
13595: LD_INT 13
13597: PPUSH
13598: LD_INT 14
13600: PPUSH
13601: CALL_OW 120
// ComEnterUnit ( bel , RU1_bar ) ;
13605: LD_EXP 52
13609: PPUSH
13610: LD_INT 5
13612: PPUSH
13613: CALL_OW 120
// ComEnterUnit ( RU1_sol1 , RU1_bar ) ;
13617: LD_INT 28
13619: PPUSH
13620: LD_INT 5
13622: PPUSH
13623: CALL_OW 120
// ComEnterUnit ( RU1_sol2 , RU1_bar ) ;
13627: LD_INT 29
13629: PPUSH
13630: LD_INT 5
13632: PPUSH
13633: CALL_OW 120
// ComEnterUnit ( RU1_vo1 , RU1_bar ) ;
13637: LD_INT 20
13639: PPUSH
13640: LD_INT 5
13642: PPUSH
13643: CALL_OW 120
// ComEnterUnit ( RU1_sci1 , RU1_lab ) ;
13647: LD_INT 27
13649: PPUSH
13650: LD_INT 3
13652: PPUSH
13653: CALL_OW 120
// ComEnterUnit ( RU1_sci2 , RU1_lab ) ;
13657: LD_INT 19
13659: PPUSH
13660: LD_INT 3
13662: PPUSH
13663: CALL_OW 120
// ComEnterUnit ( RU1_eng1 , RU1_dep ) ;
13667: LD_INT 18
13669: PPUSH
13670: LD_INT 1
13672: PPUSH
13673: CALL_OW 120
// ComEnterUnit ( RU1_me1 , RU1_tov ) ;
13677: LD_INT 17
13679: PPUSH
13680: LD_INT 2
13682: PPUSH
13683: CALL_OW 120
// ComMoveXY ( plat , 67 , 90 ) ;
13687: LD_EXP 54
13691: PPUSH
13692: LD_INT 67
13694: PPUSH
13695: LD_INT 90
13697: PPUSH
13698: CALL_OW 111
// AddComHold ( plat ) ;
13702: LD_EXP 54
13706: PPUSH
13707: CALL_OW 200
// ComEnterUnit ( Ru2_vb1 , Ru2_bu1 ) ;
13711: LD_INT 9
13713: PPUSH
13714: LD_INT 4
13716: PPUSH
13717: CALL_OW 120
// ComEnterUnit ( Ru2_vb2 , Ru2_bu2 ) ;
13721: LD_INT 10
13723: PPUSH
13724: LD_INT 11
13726: PPUSH
13727: CALL_OW 120
// end ;
13731: LD_VAR 0 1
13735: RET
// every 0 0$30 trigger stav > 2 and stav < 7 do var pom ;
13736: LD_EXP 60
13740: PUSH
13741: LD_INT 2
13743: GREATER
13744: PUSH
13745: LD_EXP 60
13749: PUSH
13750: LD_INT 7
13752: LESS
13753: AND
13754: IFFALSE 13815
13756: GO 13758
13758: DISABLE
13759: LD_INT 0
13761: PPUSH
// begin ComFree ( plat ) ;
13762: LD_EXP 54
13766: PPUSH
13767: CALL_OW 139
// pom = RandHexArea ( RU2_base , true ) ;
13771: LD_ADDR_VAR 0 1
13775: PUSH
13776: LD_INT 1
13778: PPUSH
13779: LD_INT 1
13781: PPUSH
13782: CALL_OW 16
13786: ST_TO_ADDR
// AddComMoveXY ( plat , pom [ 1 ] , pom [ 2 ] ) ;
13787: LD_EXP 54
13791: PPUSH
13792: LD_VAR 0 1
13796: PUSH
13797: LD_INT 1
13799: ARRAY
13800: PPUSH
13801: LD_VAR 0 1
13805: PUSH
13806: LD_INT 2
13808: ARRAY
13809: PPUSH
13810: CALL_OW 171
// enable ;
13814: ENABLE
// end ;
13815: PPOPN 1
13817: END
// every 0 0$1 trigger not venku and not test_is_in_area_burlak do
13818: LD_EXP 61
13822: NOT
13823: PUSH
13824: CALL 13845 0 0
13828: NOT
13829: AND
13830: IFFALSE 13844
13832: GO 13834
13834: DISABLE
// begin venku = true ;
13835: LD_ADDR_EXP 61
13839: PUSH
13840: LD_INT 1
13842: ST_TO_ADDR
// enable ;
13843: ENABLE
// end ;
13844: END
// export function test_is_in_area_burlak ; var a ; var pom , i ; begin
13845: LD_INT 0
13847: PPUSH
13848: PPUSH
13849: PPUSH
13850: PPUSH
// a = false ;
13851: LD_ADDR_VAR 0 2
13855: PUSH
13856: LD_INT 0
13858: ST_TO_ADDR
// if IsInArea ( bur , RU1_base ) then
13859: LD_EXP 50
13863: PPUSH
13864: LD_INT 3
13866: PPUSH
13867: CALL_OW 308
13871: IFFALSE 13881
// a = true ;
13873: LD_ADDR_VAR 0 2
13877: PUSH
13878: LD_INT 1
13880: ST_TO_ADDR
// pom = FilterUnitsInArea ( RU1_base , [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
13881: LD_ADDR_VAR 0 3
13885: PUSH
13886: LD_INT 3
13888: PPUSH
13889: LD_INT 22
13891: PUSH
13892: LD_EXP 1
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: LD_INT 21
13903: PUSH
13904: LD_INT 2
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PPUSH
13915: CALL_OW 70
13919: ST_TO_ADDR
// if pom > 0 then
13920: LD_VAR 0 3
13924: PUSH
13925: LD_INT 0
13927: GREATER
13928: IFFALSE 13972
// for i in pom do
13930: LD_ADDR_VAR 0 4
13934: PUSH
13935: LD_VAR 0 3
13939: PUSH
13940: FOR_IN
13941: IFFALSE 13970
// if IsDrivenBy ( i ) = bur then
13943: LD_VAR 0 4
13947: PPUSH
13948: CALL_OW 311
13952: PUSH
13953: LD_EXP 50
13957: EQUAL
13958: IFFALSE 13968
// a = true ;
13960: LD_ADDR_VAR 0 2
13964: PUSH
13965: LD_INT 1
13967: ST_TO_ADDR
13968: GO 13940
13970: POP
13971: POP
// result = a ;
13972: LD_ADDR_VAR 0 1
13976: PUSH
13977: LD_VAR 0 2
13981: ST_TO_ADDR
// end ;
13982: LD_VAR 0 1
13986: RET
// every 0 0$7 do var pom ;
13987: GO 13989
13989: DISABLE
13990: LD_INT 0
13992: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_breastwork ] , [ f_nation , nation_russian ] ] ) ;
13993: LD_ADDR_VAR 0 1
13997: PUSH
13998: LD_INT 22
14000: PUSH
14001: LD_EXP 1
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: LD_INT 30
14012: PUSH
14013: LD_INT 31
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: LD_INT 23
14022: PUSH
14023: LD_INT 3
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: LIST
14034: PPUSH
14035: CALL_OW 69
14039: ST_TO_ADDR
// if pom > 0 then
14040: LD_VAR 0 1
14044: PUSH
14045: LD_INT 0
14047: GREATER
14048: IFFALSE 14062
// destroy ( pom , b_breastwork ) ;
14050: LD_VAR 0 1
14054: PPUSH
14055: LD_INT 31
14057: PPUSH
14058: CALL 14204 0 2
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_armoury ] , [ f_nation , nation_russian ] ] ) ;
14062: LD_ADDR_VAR 0 1
14066: PUSH
14067: LD_INT 22
14069: PUSH
14070: LD_EXP 1
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PUSH
14079: LD_INT 30
14081: PUSH
14082: LD_INT 4
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: LD_INT 23
14091: PUSH
14092: LD_INT 3
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: LIST
14103: PPUSH
14104: CALL_OW 69
14108: ST_TO_ADDR
// if pom > 0 then
14109: LD_VAR 0 1
14113: PUSH
14114: LD_INT 0
14116: GREATER
14117: IFFALSE 14131
// destroy ( pom , b_armoury ) ;
14119: LD_VAR 0 1
14123: PPUSH
14124: LD_INT 4
14126: PPUSH
14127: CALL 14204 0 2
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_oil_power ] , [ f_nation , nation_russian ] ] ) ;
14131: LD_ADDR_VAR 0 1
14135: PUSH
14136: LD_INT 22
14138: PUSH
14139: LD_EXP 1
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: PUSH
14148: LD_INT 30
14150: PUSH
14151: LD_INT 26
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: PUSH
14158: LD_INT 23
14160: PUSH
14161: LD_INT 3
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: LIST
14172: PPUSH
14173: CALL_OW 69
14177: ST_TO_ADDR
// if pom > 0 then
14178: LD_VAR 0 1
14182: PUSH
14183: LD_INT 0
14185: GREATER
14186: IFFALSE 14200
// destroy ( pom , b_oil_power ) ;
14188: LD_VAR 0 1
14192: PPUSH
14193: LD_INT 26
14195: PPUSH
14196: CALL 14204 0 2
// enable ;
14200: ENABLE
// end ;
14201: PPOPN 1
14203: END
// function destroy ( sez , typ ) ; var i , j ; var pom ; var res ; begin
14204: LD_INT 0
14206: PPUSH
14207: PPUSH
14208: PPUSH
14209: PPUSH
14210: PPUSH
// InGameOn ;
14211: CALL_OW 8
// dialog_boreni ;
14215: CALL 8684 0 0
// for i in sez do
14219: LD_ADDR_VAR 0 4
14223: PUSH
14224: LD_VAR 0 1
14228: PUSH
14229: FOR_IN
14230: IFFALSE 14414
// begin pom = UnitsInside ( i ) ;
14232: LD_ADDR_VAR 0 6
14236: PUSH
14237: LD_VAR 0 4
14241: PPUSH
14242: CALL_OW 313
14246: ST_TO_ADDR
// ComExitBuilding ( pom ) ;
14247: LD_VAR 0 6
14251: PPUSH
14252: CALL_OW 122
// wait ( 0 0$2 ) ;
14256: LD_INT 70
14258: PPUSH
14259: CALL_OW 67
// DestroyUnit ( i ) ;
14263: LD_VAR 0 4
14267: PPUSH
14268: CALL_OW 65
// case typ of b_breastwork :
14272: LD_VAR 0 2
14276: PUSH
14277: LD_INT 31
14279: DOUBLE
14280: EQUAL
14281: IFTRUE 14285
14283: GO 14306
14285: POP
// res = [ [ mat_cans , 10 ] ] ; b_armoury :
14286: LD_ADDR_VAR 0 7
14290: PUSH
14291: LD_INT 1
14293: PUSH
14294: LD_INT 10
14296: PUSH
14297: EMPTY
14298: LIST
14299: LIST
14300: PUSH
14301: EMPTY
14302: LIST
14303: ST_TO_ADDR
14304: GO 14365
14306: LD_INT 4
14308: DOUBLE
14309: EQUAL
14310: IFTRUE 14314
14312: GO 14335
14314: POP
// res = [ [ mat_cans , 30 ] ] ; b_oil_power :
14315: LD_ADDR_VAR 0 7
14319: PUSH
14320: LD_INT 1
14322: PUSH
14323: LD_INT 30
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PUSH
14330: EMPTY
14331: LIST
14332: ST_TO_ADDR
14333: GO 14365
14335: LD_INT 26
14337: DOUBLE
14338: EQUAL
14339: IFTRUE 14343
14341: GO 14364
14343: POP
// res = [ [ mat_cans , 20 ] ] ; end ;
14344: LD_ADDR_VAR 0 7
14348: PUSH
14349: LD_INT 1
14351: PUSH
14352: LD_INT 20
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: PUSH
14359: EMPTY
14360: LIST
14361: ST_TO_ADDR
14362: GO 14365
14364: POP
// for j in res do
14365: LD_ADDR_VAR 0 5
14369: PUSH
14370: LD_VAR 0 7
14374: PUSH
14375: FOR_IN
14376: IFFALSE 14410
// AddResourceType ( GetBase ( RU2_dep ) , j [ 1 ] , j [ 2 ] ) ;
14378: LD_INT 26
14380: PPUSH
14381: CALL_OW 274
14385: PPUSH
14386: LD_VAR 0 5
14390: PUSH
14391: LD_INT 1
14393: ARRAY
14394: PPUSH
14395: LD_VAR 0 5
14399: PUSH
14400: LD_INT 2
14402: ARRAY
14403: PPUSH
14404: CALL_OW 276
14408: GO 14375
14410: POP
14411: POP
// end ;
14412: GO 14229
14414: POP
14415: POP
// InGameOff ;
14416: CALL_OW 9
// end ;
14420: LD_VAR 0 3
14424: RET
// on McDone ( ID , state ) do var u , w , dist , tol , Arrived ;
14425: LD_INT 0
14427: PPUSH
14428: PPUSH
14429: PPUSH
14430: PPUSH
14431: PPUSH
// begin tol := 8 ;
14432: LD_ADDR_VAR 0 6
14436: PUSH
14437: LD_INT 8
14439: ST_TO_ADDR
// if ID <> McCestaNaSever then
14440: LD_VAR 0 1
14444: PUSH
14445: LD_EXP 36
14449: NONEQUAL
14450: IFFALSE 14454
// exit ;
14452: GO 14627
// repeat Arrived := true ;
14454: LD_ADDR_VAR 0 7
14458: PUSH
14459: LD_INT 1
14461: ST_TO_ADDR
// for u in Rusi_sever do
14462: LD_ADDR_VAR 0 3
14466: PUSH
14467: LD_EXP 56
14471: PUSH
14472: FOR_IN
14473: IFFALSE 14612
// if GetDistUnitXY ( u , wptCestaNaSever [ wptCestaNaSever ] [ 1 ] , wptCestaNaSever [ wptCestaNaSever ] [ 2 ] ) > tol then
14475: LD_VAR 0 3
14479: PPUSH
14480: LD_EXP 71
14484: PUSH
14485: LD_EXP 71
14489: ARRAY
14490: PUSH
14491: LD_INT 1
14493: ARRAY
14494: PPUSH
14495: LD_EXP 71
14499: PUSH
14500: LD_EXP 71
14504: ARRAY
14505: PUSH
14506: LD_INT 2
14508: ARRAY
14509: PPUSH
14510: CALL_OW 297
14514: PUSH
14515: LD_VAR 0 6
14519: GREATER
14520: IFFALSE 14610
// begin Arrived := false ;
14522: LD_ADDR_VAR 0 7
14526: PUSH
14527: LD_INT 0
14529: ST_TO_ADDR
// ComStop ( u ) ;
14530: LD_VAR 0 3
14534: PPUSH
14535: CALL_OW 141
// for w in wptCestaNaSever do
14539: LD_ADDR_VAR 0 4
14543: PUSH
14544: LD_EXP 71
14548: PUSH
14549: FOR_IN
14550: IFFALSE 14608
// begin if GetY ( u ) > w [ 2 ] + tol then
14552: LD_VAR 0 3
14556: PPUSH
14557: CALL_OW 251
14561: PUSH
14562: LD_VAR 0 4
14566: PUSH
14567: LD_INT 2
14569: ARRAY
14570: PUSH
14571: LD_VAR 0 6
14575: PLUS
14576: GREATER
14577: IFFALSE 14606
// begin AddComMoveXY ( u , w [ 1 ] , w [ 2 ] ) ;
14579: LD_VAR 0 3
14583: PPUSH
14584: LD_VAR 0 4
14588: PUSH
14589: LD_INT 1
14591: ARRAY
14592: PPUSH
14593: LD_VAR 0 4
14597: PUSH
14598: LD_INT 2
14600: ARRAY
14601: PPUSH
14602: CALL_OW 171
// end ; end ;
14606: GO 14549
14608: POP
14609: POP
// end ;
14610: GO 14472
14612: POP
14613: POP
// wait ( 0 0$15 ) until Arrived ;
14614: LD_INT 525
14616: PPUSH
14617: CALL_OW 67
14621: LD_VAR 0 7
14625: IFFALSE 14454
// end ;
14627: PPOPN 7
14629: END
// export wptCestaNaSever ; export function rusi_cesta_na_sever ; var pom ; begin
14630: LD_INT 0
14632: PPUSH
14633: PPUSH
// if rusi_survivors < 3 then
14634: LD_EXP 58
14638: PUSH
14639: LD_INT 3
14641: LESS
14642: IFFALSE 14669
// rusi_survivors = rusi_survivors ^ [ RU1_sol1 , RU1_sol2 , RU1_sci1 ] ;
14644: LD_ADDR_EXP 58
14648: PUSH
14649: LD_EXP 58
14653: PUSH
14654: LD_INT 28
14656: PUSH
14657: LD_INT 29
14659: PUSH
14660: LD_INT 27
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: LIST
14667: ADD
14668: ST_TO_ADDR
// Rusi_01 = rusi_survivors ;
14669: LD_ADDR_EXP 57
14673: PUSH
14674: LD_EXP 58
14678: ST_TO_ADDR
// pom = [ IsInUnit ( bel ) , Rusi_01 [ 1 ] , Rusi_01 [ 2 ] , Rusi_01 [ 3 ] ] ;
14679: LD_ADDR_VAR 0 2
14683: PUSH
14684: LD_EXP 52
14688: PPUSH
14689: CALL_OW 310
14693: PUSH
14694: LD_EXP 57
14698: PUSH
14699: LD_INT 1
14701: ARRAY
14702: PUSH
14703: LD_EXP 57
14707: PUSH
14708: LD_INT 2
14710: ARRAY
14711: PUSH
14712: LD_EXP 57
14716: PUSH
14717: LD_INT 3
14719: ARRAY
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: ST_TO_ADDR
// ComExitBuilding ( [ Rusi_01 [ 1 ] , Rusi_01 [ 2 ] , Rusi_01 [ 3 ] ] ) ;
14727: LD_EXP 57
14731: PUSH
14732: LD_INT 1
14734: ARRAY
14735: PUSH
14736: LD_EXP 57
14740: PUSH
14741: LD_INT 2
14743: ARRAY
14744: PUSH
14745: LD_EXP 57
14749: PUSH
14750: LD_INT 3
14752: ARRAY
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: LIST
14758: PPUSH
14759: CALL_OW 122
// wptCestaNaSever := [ [ 87 , 93 ] , [ 77 , 74 ] , [ 68 , 58 ] , [ 66 , 46 ] , [ 59 , 28 ] , [ 59 , 12 ] ] ;
14763: LD_ADDR_EXP 71
14767: PUSH
14768: LD_INT 87
14770: PUSH
14771: LD_INT 93
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 77
14780: PUSH
14781: LD_INT 74
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: LD_INT 68
14790: PUSH
14791: LD_INT 58
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: LD_INT 66
14800: PUSH
14801: LD_INT 46
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 59
14810: PUSH
14811: LD_INT 28
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: LD_INT 59
14820: PUSH
14821: LD_INT 12
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: ST_TO_ADDR
// mcCestaNaSever = McMove ( 1 , pom , wptCestaNaSever , [ mc_move_waitwp ] ) ;
14836: LD_ADDR_EXP 36
14840: PUSH
14841: LD_INT 1
14843: PPUSH
14844: LD_VAR 0 2
14848: PPUSH
14849: LD_EXP 71
14853: PPUSH
14854: LD_INT 3
14856: PUSH
14857: EMPTY
14858: LIST
14859: PPUSH
14860: CALL_OW 398
14864: ST_TO_ADDR
// Rusi_sever = pom ;
14865: LD_ADDR_EXP 56
14869: PUSH
14870: LD_VAR 0 2
14874: ST_TO_ADDR
// rusi_survivors = Rusi_01 diff pom ;
14875: LD_ADDR_EXP 58
14879: PUSH
14880: LD_EXP 57
14884: PUSH
14885: LD_VAR 0 2
14889: DIFF
14890: ST_TO_ADDR
// repeat wait ( 0 0$5 ) until ( FilterUnitsInArea ( RU1_base , [ ] ) isect Rusi_sever ) = 0 ;
14891: LD_INT 175
14893: PPUSH
14894: CALL_OW 67
14898: LD_INT 3
14900: PPUSH
14901: EMPTY
14902: PPUSH
14903: CALL_OW 70
14907: PUSH
14908: LD_EXP 56
14912: ISECT
14913: PUSH
14914: LD_INT 0
14916: EQUAL
14917: IFFALSE 14891
// wait ( 1 1$0 ) ;
14919: LD_INT 2100
14921: PPUSH
14922: CALL_OW 67
// stavba_am_baze ;
14926: CALL 17374 0 0
// end ;
14930: LD_VAR 0 1
14934: RET
// every 0 0$4 do var pom ;
14935: GO 14937
14937: DISABLE
14938: LD_INT 0
14940: PPUSH
// begin pom = FilterUnitsInArea ( Test2 , [ [ f_side , You2 ] ] ) ;
14941: LD_ADDR_VAR 0 1
14945: PUSH
14946: LD_INT 10
14948: PPUSH
14949: LD_INT 22
14951: PUSH
14952: LD_EXP 4
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PUSH
14961: EMPTY
14962: LIST
14963: PPUSH
14964: CALL_OW 70
14968: ST_TO_ADDR
// if pom + 0 = Rusi_sever + 0 then
14969: LD_VAR 0 1
14973: PUSH
14974: LD_INT 0
14976: PLUS
14977: PUSH
14978: LD_EXP 56
14982: PUSH
14983: LD_INT 0
14985: PLUS
14986: EQUAL
14987: IFFALSE 14996
// begin manage_rusi_sever ;
14989: CALL 16002 0 0
// disable ;
14993: DISABLE
// end else
14994: GO 14997
// enable ;
14996: ENABLE
// end ;
14997: PPOPN 1
14999: END
// every 0 0$20 trigger stav > 2 and stav < 7 do var i ; var misto ;
15000: LD_EXP 60
15004: PUSH
15005: LD_INT 2
15007: GREATER
15008: PUSH
15009: LD_EXP 60
15013: PUSH
15014: LD_INT 7
15016: LESS
15017: AND
15018: IFFALSE 15306
15020: GO 15022
15022: DISABLE
15023: LD_INT 0
15025: PPUSH
15026: PPUSH
// begin misto = [ ] ;
15027: LD_ADDR_VAR 0 2
15031: PUSH
15032: EMPTY
15033: ST_TO_ADDR
// for i in bedny do
15034: LD_ADDR_VAR 0 1
15038: PUSH
15039: LD_EXP 64
15043: PUSH
15044: FOR_IN
15045: IFFALSE 15131
// if SeeXY ( You2 , i [ 1 ] , i [ 2 ] ) then
15047: LD_EXP 4
15051: PPUSH
15052: LD_VAR 0 1
15056: PUSH
15057: LD_INT 1
15059: ARRAY
15060: PPUSH
15061: LD_VAR 0 1
15065: PUSH
15066: LD_INT 2
15068: ARRAY
15069: PPUSH
15070: CALL_OW 293
15074: IFFALSE 15129
// if i in videne then
15076: LD_VAR 0 1
15080: PUSH
15081: LD_EXP 66
15085: IN
15086: IFFALSE 15100
// misto = misto else
15088: LD_ADDR_VAR 0 2
15092: PUSH
15093: LD_VAR 0 2
15097: ST_TO_ADDR
15098: GO 15129
// begin misto = i ;
15100: LD_ADDR_VAR 0 2
15104: PUSH
15105: LD_VAR 0 1
15109: ST_TO_ADDR
// videne = videne ^ [ i ] ;
15110: LD_ADDR_EXP 66
15114: PUSH
15115: LD_EXP 66
15119: PUSH
15120: LD_VAR 0 1
15124: PUSH
15125: EMPTY
15126: LIST
15127: ADD
15128: ST_TO_ADDR
// end ;
15129: GO 15044
15131: POP
15132: POP
// if misto <> 0 then
15133: LD_VAR 0 2
15137: PUSH
15138: LD_INT 0
15140: NONEQUAL
15141: IFFALSE 15278
// begin bedny_hint = true ;
15143: LD_ADDR_EXP 65
15147: PUSH
15148: LD_INT 1
15150: ST_TO_ADDR
// ComMoveXY ( plat , misto [ 1 ] , misto [ 2 ] ) ;
15151: LD_EXP 54
15155: PPUSH
15156: LD_VAR 0 2
15160: PUSH
15161: LD_INT 1
15163: ARRAY
15164: PPUSH
15165: LD_VAR 0 2
15169: PUSH
15170: LD_INT 2
15172: ARRAY
15173: PPUSH
15174: CALL_OW 111
// wait ( 0 0$5 ) ;
15178: LD_INT 175
15180: PPUSH
15181: CALL_OW 67
// if HexInfo ( misto [ 1 ] , misto [ 2 ] ) <> 0 or HexInfo ( misto [ 1 ] , misto [ 2 ] ) <> plat then
15185: LD_VAR 0 2
15189: PUSH
15190: LD_INT 1
15192: ARRAY
15193: PPUSH
15194: LD_VAR 0 2
15198: PUSH
15199: LD_INT 2
15201: ARRAY
15202: PPUSH
15203: CALL_OW 428
15207: PUSH
15208: LD_INT 0
15210: NONEQUAL
15211: PUSH
15212: LD_VAR 0 2
15216: PUSH
15217: LD_INT 1
15219: ARRAY
15220: PPUSH
15221: LD_VAR 0 2
15225: PUSH
15226: LD_INT 2
15228: ARRAY
15229: PPUSH
15230: CALL_OW 428
15234: PUSH
15235: LD_EXP 54
15239: NONEQUAL
15240: OR
15241: IFFALSE 15278
// begin hlaska_platonov_bedny ;
15243: CALL 9901 0 0
// pocet_uukazani = pocet_uukazani + 1 ;
15247: LD_ADDR_LOC 18
15251: PUSH
15252: LD_LOC 18
15256: PUSH
15257: LD_INT 1
15259: PLUS
15260: ST_TO_ADDR
// debug_strings = [ Platonov bvedny , pocet_uukazani ] ;
15261: LD_ADDR_OWVAR 48
15265: PUSH
15266: LD_STRING Platonov bvedny
15268: PUSH
15269: LD_LOC 18
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: ST_TO_ADDR
// end ; end ; debug_strings = [ Platonov bvedny , pocet_uukazani ] ;
15278: LD_ADDR_OWVAR 48
15282: PUSH
15283: LD_STRING Platonov bvedny
15285: PUSH
15286: LD_LOC 18
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: ST_TO_ADDR
// if pocet_uukazani < 6 then
15295: LD_LOC 18
15299: PUSH
15300: LD_INT 6
15302: LESS
15303: IFFALSE 15306
// enable ;
15305: ENABLE
// end ;
15306: PPOPN 2
15308: END
// every 0 0$13 trigger stav > 2 and stav < 7 do var i ; var a ;
15309: LD_EXP 60
15313: PUSH
15314: LD_INT 2
15316: GREATER
15317: PUSH
15318: LD_EXP 60
15322: PUSH
15323: LD_INT 7
15325: LESS
15326: AND
15327: IFFALSE 15418
15329: GO 15331
15331: DISABLE
15332: LD_INT 0
15334: PPUSH
15335: PPUSH
// begin a = [ ] ;
15336: LD_ADDR_VAR 0 2
15340: PUSH
15341: EMPTY
15342: ST_TO_ADDR
// for i in bedny do
15343: LD_ADDR_VAR 0 1
15347: PUSH
15348: LD_EXP 64
15352: PUSH
15353: FOR_IN
15354: IFFALSE 15405
// if GetResourceAmountXY ( i [ 1 ] , i [ 2 ] ) <> 0 then
15356: LD_VAR 0 1
15360: PUSH
15361: LD_INT 1
15363: ARRAY
15364: PPUSH
15365: LD_VAR 0 1
15369: PUSH
15370: LD_INT 2
15372: ARRAY
15373: PPUSH
15374: CALL_OW 284
15378: PUSH
15379: LD_INT 0
15381: NONEQUAL
15382: IFFALSE 15403
// a = a ^ [ i ] ;
15384: LD_ADDR_VAR 0 2
15388: PUSH
15389: LD_VAR 0 2
15393: PUSH
15394: LD_VAR 0 1
15398: PUSH
15399: EMPTY
15400: LIST
15401: ADD
15402: ST_TO_ADDR
15403: GO 15353
15405: POP
15406: POP
// bedny = a ;
15407: LD_ADDR_EXP 64
15411: PUSH
15412: LD_VAR 0 2
15416: ST_TO_ADDR
// enable ;
15417: ENABLE
// end ;
15418: PPOPN 2
15420: END
// every 0 0$10 trigger stav = 3 do var hex ;
15421: LD_EXP 60
15425: PUSH
15426: LD_INT 3
15428: EQUAL
15429: IFFALSE 15561
15431: GO 15433
15433: DISABLE
15434: LD_INT 0
15436: PPUSH
// begin wait ( Rand ( 0 0$30 , 1 1$0 ) ) ;
15437: LD_INT 1050
15439: PPUSH
15440: LD_INT 2100
15442: PPUSH
15443: CALL_OW 12
15447: PPUSH
15448: CALL_OW 67
// hex = RandHexArea ( bedny_ar , true ) ;
15452: LD_ADDR_VAR 0 1
15456: PUSH
15457: LD_INT 28
15459: PPUSH
15460: LD_INT 1
15462: PPUSH
15463: CALL_OW 16
15467: ST_TO_ADDR
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) <> 0 do
15468: LD_VAR 0 1
15472: PUSH
15473: LD_INT 1
15475: ARRAY
15476: PPUSH
15477: LD_VAR 0 1
15481: PUSH
15482: LD_INT 2
15484: ARRAY
15485: PPUSH
15486: CALL_OW 428
15490: PUSH
15491: LD_INT 0
15493: NONEQUAL
15494: IFFALSE 15514
// hex = RandHexArea ( bedny_ar , true ) ;
15496: LD_ADDR_VAR 0 1
15500: PUSH
15501: LD_INT 28
15503: PPUSH
15504: LD_INT 1
15506: PPUSH
15507: CALL_OW 16
15511: ST_TO_ADDR
15512: GO 15468
// CreateCratesXY ( 4 , hex [ 1 ] , hex [ 2 ] , true ) ;
15514: LD_INT 4
15516: PPUSH
15517: LD_VAR 0 1
15521: PUSH
15522: LD_INT 1
15524: ARRAY
15525: PPUSH
15526: LD_VAR 0 1
15530: PUSH
15531: LD_INT 2
15533: ARRAY
15534: PPUSH
15535: LD_INT 1
15537: PPUSH
15538: CALL_OW 54
// bedny = bedny ^ [ hex ] ;
15542: LD_ADDR_EXP 64
15546: PUSH
15547: LD_EXP 64
15551: PUSH
15552: LD_VAR 0 1
15556: PUSH
15557: EMPTY
15558: LIST
15559: ADD
15560: ST_TO_ADDR
// end ;
15561: PPOPN 1
15563: END
// every 0 0$10 trigger stav >= 6 and stav < 7 do var hex ;
15564: LD_EXP 60
15568: PUSH
15569: LD_INT 6
15571: GREATEREQUAL
15572: PUSH
15573: LD_EXP 60
15577: PUSH
15578: LD_INT 7
15580: LESS
15581: AND
15582: IFFALSE 15737
15584: GO 15586
15586: DISABLE
15587: LD_INT 0
15589: PPUSH
// begin wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
15590: LD_INT 1050
15592: PPUSH
15593: LD_INT 3150
15595: PPUSH
15596: CALL_OW 12
15600: PPUSH
15601: CALL_OW 67
// hex = RandHexArea ( bedny_ar , true ) ;
15605: LD_ADDR_VAR 0 1
15609: PUSH
15610: LD_INT 28
15612: PPUSH
15613: LD_INT 1
15615: PPUSH
15616: CALL_OW 16
15620: ST_TO_ADDR
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) <> 0 do
15621: LD_VAR 0 1
15625: PUSH
15626: LD_INT 1
15628: ARRAY
15629: PPUSH
15630: LD_VAR 0 1
15634: PUSH
15635: LD_INT 2
15637: ARRAY
15638: PPUSH
15639: CALL_OW 428
15643: PUSH
15644: LD_INT 0
15646: NONEQUAL
15647: IFFALSE 15667
// hex = RandHexArea ( bedny_ar , true ) ;
15649: LD_ADDR_VAR 0 1
15653: PUSH
15654: LD_INT 28
15656: PPUSH
15657: LD_INT 1
15659: PPUSH
15660: CALL_OW 16
15664: ST_TO_ADDR
15665: GO 15621
// CreateCratesXY ( Rand ( 3 , 5 ) , hex [ 1 ] , hex [ 2 ] , true ) ;
15667: LD_INT 3
15669: PPUSH
15670: LD_INT 5
15672: PPUSH
15673: CALL_OW 12
15677: PPUSH
15678: LD_VAR 0 1
15682: PUSH
15683: LD_INT 1
15685: ARRAY
15686: PPUSH
15687: LD_VAR 0 1
15691: PUSH
15692: LD_INT 2
15694: ARRAY
15695: PPUSH
15696: LD_INT 1
15698: PPUSH
15699: CALL_OW 54
// bedny = bedny ^ [ hex ] ;
15703: LD_ADDR_EXP 64
15707: PUSH
15708: LD_EXP 64
15712: PUSH
15713: LD_VAR 0 1
15717: PUSH
15718: EMPTY
15719: LIST
15720: ADD
15721: ST_TO_ADDR
// zasilek = zasilek + 1 ;
15722: LD_ADDR_EXP 67
15726: PUSH
15727: LD_EXP 67
15731: PUSH
15732: LD_INT 1
15734: PLUS
15735: ST_TO_ADDR
// enable ;
15736: ENABLE
// end ;
15737: PPOPN 1
15739: END
// every 0 0$10 trigger stav >= 5 and stav < 7 marked 503 do var hex ;
15740: LD_EXP 60
15744: PUSH
15745: LD_INT 5
15747: GREATEREQUAL
15748: PUSH
15749: LD_EXP 60
15753: PUSH
15754: LD_INT 7
15756: LESS
15757: AND
15758: IFFALSE 15923
15760: GO 15762
15762: DISABLE
15763: LD_INT 0
15765: PPUSH
// begin wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
15766: LD_INT 1050
15768: PPUSH
15769: LD_INT 3150
15771: PPUSH
15772: CALL_OW 12
15776: PPUSH
15777: CALL_OW 67
// hex = RandHexArea ( RU2_base , true ) ;
15781: LD_ADDR_VAR 0 1
15785: PUSH
15786: LD_INT 1
15788: PPUSH
15789: LD_INT 1
15791: PPUSH
15792: CALL_OW 16
15796: ST_TO_ADDR
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) <> 0 do
15797: LD_VAR 0 1
15801: PUSH
15802: LD_INT 1
15804: ARRAY
15805: PPUSH
15806: LD_VAR 0 1
15810: PUSH
15811: LD_INT 2
15813: ARRAY
15814: PPUSH
15815: CALL_OW 428
15819: PUSH
15820: LD_INT 0
15822: NONEQUAL
15823: IFFALSE 15843
// hex = RandHexArea ( RU2_base , true ) ;
15825: LD_ADDR_VAR 0 1
15829: PUSH
15830: LD_INT 1
15832: PPUSH
15833: LD_INT 1
15835: PPUSH
15836: CALL_OW 16
15840: ST_TO_ADDR
15841: GO 15797
// CreateCratesXY ( Rand ( 3 , 5 ) , hex [ 1 ] , hex [ 2 ] , true ) ;
15843: LD_INT 3
15845: PPUSH
15846: LD_INT 5
15848: PPUSH
15849: CALL_OW 12
15853: PPUSH
15854: LD_VAR 0 1
15858: PUSH
15859: LD_INT 1
15861: ARRAY
15862: PPUSH
15863: LD_VAR 0 1
15867: PUSH
15868: LD_INT 2
15870: ARRAY
15871: PPUSH
15872: LD_INT 1
15874: PPUSH
15875: CALL_OW 54
// bedny = bedny ^ [ hex ] ;
15879: LD_ADDR_EXP 64
15883: PUSH
15884: LD_EXP 64
15888: PUSH
15889: LD_VAR 0 1
15893: PUSH
15894: EMPTY
15895: LIST
15896: ADD
15897: ST_TO_ADDR
// zasilek = zasilek + 1 ;
15898: LD_ADDR_EXP 67
15902: PUSH
15903: LD_EXP 67
15907: PUSH
15908: LD_INT 1
15910: PLUS
15911: ST_TO_ADDR
// if zasilek < 4 then
15912: LD_EXP 67
15916: PUSH
15917: LD_INT 4
15919: LESS
15920: IFFALSE 15923
// enable ;
15922: ENABLE
// end ;
15923: PPOPN 1
15925: END
// export function test_is_auto_in_area ; var pom ; begin
15926: LD_INT 0
15928: PPUSH
15929: PPUSH
// pom = FilterUnitsInArea ( RU1_base , [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
15930: LD_ADDR_VAR 0 2
15934: PUSH
15935: LD_INT 3
15937: PPUSH
15938: LD_INT 22
15940: PUSH
15941: LD_EXP 1
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 21
15952: PUSH
15953: LD_INT 2
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PPUSH
15964: CALL_OW 70
15968: ST_TO_ADDR
// if pom > 0 then
15969: LD_VAR 0 2
15973: PUSH
15974: LD_INT 0
15976: GREATER
15977: IFFALSE 15989
// result = true else
15979: LD_ADDR_VAR 0 1
15983: PUSH
15984: LD_INT 1
15986: ST_TO_ADDR
15987: GO 15997
// result = false ;
15989: LD_ADDR_VAR 0 1
15993: PUSH
15994: LD_INT 0
15996: ST_TO_ADDR
// end ;
15997: LD_VAR 0 1
16001: RET
// function manage_rusi_sever ; begin
16002: LD_INT 0
16004: PPUSH
// wait ( 0 0$20 ) ;
16005: LD_INT 700
16007: PPUSH
16008: CALL_OW 67
// ComMoveXY ( Rusi_sever , 90 , 25 ) ;
16012: LD_EXP 56
16016: PPUSH
16017: LD_INT 90
16019: PPUSH
16020: LD_INT 25
16022: PPUSH
16023: CALL_OW 111
// end ;
16027: LD_VAR 0 1
16031: RET
// every 0 0$1 trigger FilterUnitsInArea ( Odber_bel , [ [ f_side , You2 ] ] ) > 0 do var pom , i ;
16032: LD_INT 14
16034: PPUSH
16035: LD_INT 22
16037: PUSH
16038: LD_EXP 4
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: PUSH
16047: EMPTY
16048: LIST
16049: PPUSH
16050: CALL_OW 70
16054: PUSH
16055: LD_INT 0
16057: GREATER
16058: IFFALSE 16168
16060: GO 16062
16062: DISABLE
16063: LD_INT 0
16065: PPUSH
16066: PPUSH
// begin pom = FilterUnitsInArea ( Odber_bel , [ [ f_side , You2 ] ] ) ;
16067: LD_ADDR_VAR 0 1
16071: PUSH
16072: LD_INT 14
16074: PPUSH
16075: LD_INT 22
16077: PUSH
16078: LD_EXP 4
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: EMPTY
16088: LIST
16089: PPUSH
16090: CALL_OW 70
16094: ST_TO_ADDR
// for i in pom do
16095: LD_ADDR_VAR 0 2
16099: PUSH
16100: LD_VAR 0 1
16104: PUSH
16105: FOR_IN
16106: IFFALSE 16131
// if i in Rusi_sever then
16108: LD_VAR 0 2
16112: PUSH
16113: LD_EXP 56
16117: IN
16118: IFFALSE 16129
// RemoveUnit ( i ) ;
16120: LD_VAR 0 2
16124: PPUSH
16125: CALL_OW 64
16129: GO 16105
16131: POP
16132: POP
// pom = UnitFilter ( Rusi_sever , [ [ f_OK ] ] ) ;
16133: LD_ADDR_VAR 0 1
16137: PUSH
16138: LD_EXP 56
16142: PPUSH
16143: LD_INT 50
16145: PUSH
16146: EMPTY
16147: LIST
16148: PUSH
16149: EMPTY
16150: LIST
16151: PPUSH
16152: CALL_OW 72
16156: ST_TO_ADDR
// if pom > 0 then
16157: LD_VAR 0 1
16161: PUSH
16162: LD_INT 0
16164: GREATER
16165: IFFALSE 16168
// enable ;
16167: ENABLE
// end ;
16168: PPOPN 2
16170: END
// every 0 0$1 trigger belkov_returns do
16171: LD_EXP 8
16175: IFFALSE 16188
16177: GO 16179
16179: DISABLE
// begin placni_amiky_past ;
16180: CALL 17212 0 0
// placni_zpet_rusy_sever ;
16184: CALL 16189 0 0
// end ;
16188: END
// function placni_zpet_rusy_sever ; var i ; begin
16189: LD_INT 0
16191: PPUSH
16192: PPUSH
// for i in Rusi_sever do
16193: LD_ADDR_VAR 0 2
16197: PUSH
16198: LD_EXP 56
16202: PUSH
16203: FOR_IN
16204: IFFALSE 16223
// PlaceUnitArea ( i , Zpet_bel , false ) ;
16206: LD_VAR 0 2
16210: PPUSH
16211: LD_INT 15
16213: PPUSH
16214: LD_INT 0
16216: PPUSH
16217: CALL_OW 49
16221: GO 16203
16223: POP
16224: POP
// ComMoveXY ( Rusi_sever , 56 , 9 ) ;
16225: LD_EXP 56
16229: PPUSH
16230: LD_INT 56
16232: PPUSH
16233: LD_INT 9
16235: PPUSH
16236: CALL_OW 111
// AddComHold ( Rusi_sever ) ;
16240: LD_EXP 56
16244: PPUSH
16245: CALL_OW 200
// end ;
16249: LD_VAR 0 1
16253: RET
// export function posli_lidi_zpet ; var pom ; begin
16254: LD_INT 0
16256: PPUSH
16257: PPUSH
// pom = FilterUnitsInArea ( Upozarea , [ [ f_side , You ] ] ) ;
16258: LD_ADDR_VAR 0 2
16262: PUSH
16263: LD_INT 2
16265: PPUSH
16266: LD_INT 22
16268: PUSH
16269: LD_EXP 1
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: PUSH
16278: EMPTY
16279: LIST
16280: PPUSH
16281: CALL_OW 70
16285: ST_TO_ADDR
// ComMoveToArea ( pom , RU2_base ) ;
16286: LD_VAR 0 2
16290: PPUSH
16291: LD_INT 1
16293: PPUSH
16294: CALL_OW 113
// end ;
16298: LD_VAR 0 1
16302: RET
// export function posli_rusi_zpet_out_base ; var pom ; begin
16303: LD_INT 0
16305: PPUSH
16306: PPUSH
// pom = FilterUnitsInArea ( Out_base , [ [ f_side , You ] ] ) ;
16307: LD_ADDR_VAR 0 2
16311: PUSH
16312: LD_INT 6
16314: PPUSH
16315: LD_INT 22
16317: PUSH
16318: LD_EXP 1
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PUSH
16327: EMPTY
16328: LIST
16329: PPUSH
16330: CALL_OW 70
16334: ST_TO_ADDR
// ComMoveXY ( pom , 66 , 91 ) ;
16335: LD_VAR 0 2
16339: PPUSH
16340: LD_INT 66
16342: PPUSH
16343: LD_INT 91
16345: PPUSH
16346: CALL_OW 111
// end ;
16350: LD_VAR 0 1
16354: RET
// export function rusi_save_belkov ; begin
16355: LD_INT 0
16357: PPUSH
// enable ( 501 ) ;
16358: LD_INT 501
16360: ENABLE_MARKED
// enable ( 502 ) ;
16361: LD_INT 502
16363: ENABLE_MARKED
// enable ( 599 ) ;
16364: LD_INT 599
16366: ENABLE_MARKED
// end ;
16367: LD_VAR 0 1
16371: RET
// every 0 0$1 trigger GetLives ( bel ) < 800 marked 501 do
16372: LD_EXP 52
16376: PPUSH
16377: CALL_OW 256
16381: PUSH
16382: LD_INT 800
16384: LESS
16385: IFFALSE 16403
16387: GO 16389
16389: DISABLE
// begin SetLives ( bel , 800 ) ;
16390: LD_EXP 52
16394: PPUSH
16395: LD_INT 800
16397: PPUSH
16398: CALL_OW 234
// enable ;
16402: ENABLE
// end ;
16403: END
// every 0 0$1 trigger saved_bel do
16404: LD_EXP 69
16408: IFFALSE 16416
16410: GO 16412
16412: DISABLE
// begin disable ( 501 ) ;
16413: LD_INT 501
16415: DISABLE_MARKED
// end ;
16416: END
// every 0 0$1 trigger GetSide ( bel ) = You marked 599 do
16417: LD_EXP 52
16421: PPUSH
16422: CALL_OW 255
16426: PUSH
16427: LD_EXP 1
16431: EQUAL
16432: IFFALSE 16440
16434: GO 16436
16436: DISABLE
// begin disable ( 501 ) ;
16437: LD_INT 501
16439: DISABLE_MARKED
// end ;
16440: END
// every 0 0$1 marked 502 do var i ; var pom ;
16441: GO 16443
16443: DISABLE
16444: LD_INT 0
16446: PPUSH
16447: PPUSH
// begin pom = false ;
16448: LD_ADDR_VAR 0 2
16452: PUSH
16453: LD_INT 0
16455: ST_TO_ADDR
// wait ( cas_na_zachranu_belkova [ difficulty ] ) ;
16456: LD_EXP 43
16460: PUSH
16461: LD_OWVAR 67
16465: ARRAY
16466: PPUSH
16467: CALL_OW 67
// disable ( 501 ) ;
16471: LD_INT 501
16473: DISABLE_MARKED
// if IsOK ( bel ) and ( not saved_bel ) then
16474: LD_EXP 52
16478: PPUSH
16479: CALL_OW 302
16483: PUSH
16484: LD_EXP 69
16488: NOT
16489: AND
16490: IFFALSE 16496
// amici_attack_belkov ;
16492: CALL 18553 0 0
// while ( FilterUnitsInArea ( Belkov_kop , [ f_side , You2 ] ) + 0 > 0 ) and ( UnitFilter ( AMICI_UTOK_BELKOV_LIST , [ f_OK ] ) + 0 > 0 ) do
16496: LD_INT 25
16498: PPUSH
16499: LD_INT 22
16501: PUSH
16502: LD_EXP 4
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PPUSH
16511: CALL_OW 70
16515: PUSH
16516: LD_INT 0
16518: PLUS
16519: PUSH
16520: LD_INT 0
16522: GREATER
16523: PUSH
16524: LD_EXP 39
16528: PPUSH
16529: LD_INT 50
16531: PUSH
16532: EMPTY
16533: LIST
16534: PPUSH
16535: CALL_OW 72
16539: PUSH
16540: LD_INT 0
16542: PLUS
16543: PUSH
16544: LD_INT 0
16546: GREATER
16547: AND
16548: IFFALSE 16608
// begin wait ( 0 0$1 ) ;
16550: LD_INT 35
16552: PPUSH
16553: CALL_OW 67
// if objBelkov and IsDead ( bel ) and GetSide ( bel ) = 6 then
16557: LD_EXP 28
16561: PUSH
16562: LD_EXP 52
16566: PPUSH
16567: CALL_OW 301
16571: AND
16572: PUSH
16573: LD_EXP 52
16577: PPUSH
16578: CALL_OW 255
16582: PUSH
16583: LD_INT 6
16585: EQUAL
16586: AND
16587: IFFALSE 16606
// begin belkovSave = false ;
16589: LD_ADDR_EXP 10
16593: PUSH
16594: LD_INT 0
16596: ST_TO_ADDR
// wait ( 1 ) ;
16597: LD_INT 1
16599: PPUSH
16600: CALL_OW 67
// exit ;
16604: GO 16612
// end ; end ;
16606: GO 16496
// amici_retreat ;
16608: CALL 18700 0 0
// end ;
16612: PPOPN 2
16614: END
// every 0 0$2 trigger saved_bel do
16615: LD_EXP 69
16619: IFFALSE 16627
16621: GO 16623
16623: DISABLE
// begin disable ( 502 ) ;
16624: LD_INT 502
16626: DISABLE_MARKED
// end ;
16627: END
// export function create_rusi_navic ; var pom , i ; begin
16628: LD_INT 0
16630: PPUSH
16631: PPUSH
16632: PPUSH
// if CheckCharacterSet ( survivors1 ) then
16633: LD_STRING survivors1
16635: PPUSH
16636: CALL_OW 29
16640: IFFALSE 16657
// pom = CreateCharacterSet ( survivors1 ) else
16642: LD_ADDR_VAR 0 2
16646: PUSH
16647: LD_STRING survivors1
16649: PPUSH
16650: CALL_OW 31
16654: ST_TO_ADDR
16655: GO 16664
// pom = [ ] ;
16657: LD_ADDR_VAR 0 2
16661: PUSH
16662: EMPTY
16663: ST_TO_ADDR
// for i in pom do
16664: LD_ADDR_VAR 0 3
16668: PUSH
16669: LD_VAR 0 2
16673: PUSH
16674: FOR_IN
16675: IFFALSE 16714
// begin SetSide ( i , You2 ) ;
16677: LD_VAR 0 3
16681: PPUSH
16682: LD_EXP 4
16686: PPUSH
16687: CALL_OW 235
// PlaceUnitXYR ( i , 129 , 111 , 5 , false ) ;
16691: LD_VAR 0 3
16695: PPUSH
16696: LD_INT 129
16698: PPUSH
16699: LD_INT 111
16701: PPUSH
16702: LD_INT 5
16704: PPUSH
16705: LD_INT 0
16707: PPUSH
16708: CALL_OW 50
// end ;
16712: GO 16674
16714: POP
16715: POP
// if pom <> 0 then
16716: LD_VAR 0 2
16720: PUSH
16721: LD_INT 0
16723: NONEQUAL
16724: IFFALSE 16738
// ComEnterUnit ( pom , RU1_tov ) ;
16726: LD_VAR 0 2
16730: PPUSH
16731: LD_INT 2
16733: PPUSH
16734: CALL_OW 120
// rusi_survivors = pom ;
16738: LD_ADDR_EXP 58
16742: PUSH
16743: LD_VAR 0 2
16747: ST_TO_ADDR
// end ;
16748: LD_VAR 0 1
16752: RET
// every 0 0$5 do var zmena ;
16753: GO 16755
16755: DISABLE
16756: LD_INT 0
16758: PPUSH
// begin zmena = false ;
16759: LD_ADDR_VAR 0 1
16763: PUSH
16764: LD_INT 0
16766: ST_TO_ADDR
// if IsOk ( bur ) then
16767: LD_EXP 50
16771: PPUSH
16772: CALL_OW 302
16776: IFFALSE 16882
// if ( ( GetSkill ( bur , 1 ) <> BurSk [ 1 ] ) or ( GetSkill ( bur , 2 ) <> BurSk [ 2 ] ) or ( GetSkill ( bur , 3 ) <> BurSk [ 3 ] ) or ( GetSkill ( bur , 4 ) <> BurSk [ 4 ] ) ) then
16778: LD_EXP 50
16782: PPUSH
16783: LD_INT 1
16785: PPUSH
16786: CALL_OW 259
16790: PUSH
16791: LD_LOC 19
16795: PUSH
16796: LD_INT 1
16798: ARRAY
16799: NONEQUAL
16800: PUSH
16801: LD_EXP 50
16805: PPUSH
16806: LD_INT 2
16808: PPUSH
16809: CALL_OW 259
16813: PUSH
16814: LD_LOC 19
16818: PUSH
16819: LD_INT 2
16821: ARRAY
16822: NONEQUAL
16823: OR
16824: PUSH
16825: LD_EXP 50
16829: PPUSH
16830: LD_INT 3
16832: PPUSH
16833: CALL_OW 259
16837: PUSH
16838: LD_LOC 19
16842: PUSH
16843: LD_INT 3
16845: ARRAY
16846: NONEQUAL
16847: OR
16848: PUSH
16849: LD_EXP 50
16853: PPUSH
16854: LD_INT 4
16856: PPUSH
16857: CALL_OW 259
16861: PUSH
16862: LD_LOC 19
16866: PUSH
16867: LD_INT 4
16869: ARRAY
16870: NONEQUAL
16871: OR
16872: IFFALSE 16882
// zmena = true ;
16874: LD_ADDR_VAR 0 1
16878: PUSH
16879: LD_INT 1
16881: ST_TO_ADDR
// if IsOk ( Gny ) then
16882: LD_EXP 49
16886: PPUSH
16887: CALL_OW 302
16891: IFFALSE 16997
// if ( ( GetSkill ( Gny , 1 ) <> GnySk [ 1 ] ) or ( GetSkill ( Gny , 2 ) <> GnySk [ 2 ] ) or ( GetSkill ( Gny , 3 ) <> GnySk [ 3 ] ) or ( GetSkill ( Gny , 4 ) <> GnySk [ 4 ] ) ) then
16893: LD_EXP 49
16897: PPUSH
16898: LD_INT 1
16900: PPUSH
16901: CALL_OW 259
16905: PUSH
16906: LD_LOC 21
16910: PUSH
16911: LD_INT 1
16913: ARRAY
16914: NONEQUAL
16915: PUSH
16916: LD_EXP 49
16920: PPUSH
16921: LD_INT 2
16923: PPUSH
16924: CALL_OW 259
16928: PUSH
16929: LD_LOC 21
16933: PUSH
16934: LD_INT 2
16936: ARRAY
16937: NONEQUAL
16938: OR
16939: PUSH
16940: LD_EXP 49
16944: PPUSH
16945: LD_INT 3
16947: PPUSH
16948: CALL_OW 259
16952: PUSH
16953: LD_LOC 21
16957: PUSH
16958: LD_INT 3
16960: ARRAY
16961: NONEQUAL
16962: OR
16963: PUSH
16964: LD_EXP 49
16968: PPUSH
16969: LD_INT 4
16971: PPUSH
16972: CALL_OW 259
16976: PUSH
16977: LD_LOC 21
16981: PUSH
16982: LD_INT 4
16984: ARRAY
16985: NONEQUAL
16986: OR
16987: IFFALSE 16997
// zmena = true ;
16989: LD_ADDR_VAR 0 1
16993: PUSH
16994: LD_INT 1
16996: ST_TO_ADDR
// if IsOk ( bel ) then
16997: LD_EXP 52
17001: PPUSH
17002: CALL_OW 302
17006: IFFALSE 17112
// if ( ( GetSkill ( bel , 1 ) <> BelSk [ 1 ] ) or ( GetSkill ( bel , 2 ) <> BelSk [ 2 ] ) or ( GetSkill ( bel , 3 ) <> BelSk [ 3 ] ) or ( GetSkill ( bel , 4 ) <> BelSk [ 4 ] ) ) then
17008: LD_EXP 52
17012: PPUSH
17013: LD_INT 1
17015: PPUSH
17016: CALL_OW 259
17020: PUSH
17021: LD_LOC 20
17025: PUSH
17026: LD_INT 1
17028: ARRAY
17029: NONEQUAL
17030: PUSH
17031: LD_EXP 52
17035: PPUSH
17036: LD_INT 2
17038: PPUSH
17039: CALL_OW 259
17043: PUSH
17044: LD_LOC 20
17048: PUSH
17049: LD_INT 2
17051: ARRAY
17052: NONEQUAL
17053: OR
17054: PUSH
17055: LD_EXP 52
17059: PPUSH
17060: LD_INT 3
17062: PPUSH
17063: CALL_OW 259
17067: PUSH
17068: LD_LOC 20
17072: PUSH
17073: LD_INT 3
17075: ARRAY
17076: NONEQUAL
17077: OR
17078: PUSH
17079: LD_EXP 52
17083: PPUSH
17084: LD_INT 4
17086: PPUSH
17087: CALL_OW 259
17091: PUSH
17092: LD_LOC 20
17096: PUSH
17097: LD_INT 4
17099: ARRAY
17100: NONEQUAL
17101: OR
17102: IFFALSE 17112
// zmena = true ;
17104: LD_ADDR_VAR 0 1
17108: PUSH
17109: LD_INT 1
17111: ST_TO_ADDR
// if zmena then
17112: LD_VAR 0 1
17116: IFFALSE 17124
// hint_skilly else
17118: CALL 10982 0 0
17122: GO 17125
// enable ;
17124: ENABLE
// end ;
17125: PPOPN 1
17127: END
// every 0 0$3 trigger IsOk ( plat ) do
17128: LD_EXP 54
17132: PPUSH
17133: CALL_OW 302
17137: IFFALSE 17199
17139: GO 17141
17141: DISABLE
// begin enable ;
17142: ENABLE
// if GetLives ( plat ) < 1000 then
17143: LD_EXP 54
17147: PPUSH
17148: CALL_OW 256
17152: PUSH
17153: LD_INT 1000
17155: LESS
17156: IFFALSE 17170
// SetLives ( plat , 1000 ) ;
17158: LD_EXP 54
17162: PPUSH
17163: LD_INT 1000
17165: PPUSH
17166: CALL_OW 234
// if IsInArea ( plat , Out_base ) then
17170: LD_EXP 54
17174: PPUSH
17175: LD_INT 6
17177: PPUSH
17178: CALL_OW 308
17182: IFFALSE 17199
// ComMoveXY ( plat , 66 , 92 ) ;
17184: LD_EXP 54
17188: PPUSH
17189: LD_INT 66
17191: PPUSH
17192: LD_INT 92
17194: PPUSH
17195: CALL_OW 111
// end ; end_of_file
17199: END
// export Amici_past ; export Amici_baze ; export BWW_1 , BWW_2 ; export ABW1 , ABW2 ; var opravy ; var Am_opravari ; every 0 0$0.1 do
17200: GO 17202
17202: DISABLE
// begin opravy = false ;
17203: LD_ADDR_LOC 22
17207: PUSH
17208: LD_INT 0
17210: ST_TO_ADDR
// end ;
17211: END
// export function placni_amiky_past ; var i ; begin
17212: LD_INT 0
17214: PPUSH
17215: PPUSH
// for i in AMICI_PAST_LIST do
17216: LD_ADDR_VAR 0 2
17220: PUSH
17221: LD_EXP 37
17225: PUSH
17226: FOR_IN
17227: IFFALSE 17246
// PlaceUnitArea ( i , Am_past , false ) ;
17229: LD_VAR 0 2
17233: PPUSH
17234: LD_INT 7
17236: PPUSH
17237: LD_INT 0
17239: PPUSH
17240: CALL_OW 49
17244: GO 17226
17246: POP
17247: POP
// Amici_past = AMICI_PAST_LIST ;
17248: LD_ADDR_EXP 72
17252: PUSH
17253: LD_EXP 37
17257: ST_TO_ADDR
// AddComCrawl ( AMICI_PAST_LIST ) ;
17258: LD_EXP 37
17262: PPUSH
17263: CALL_OW 197
// for i = 1 to 3 do
17267: LD_ADDR_VAR 0 2
17271: PUSH
17272: DOUBLE
17273: LD_INT 1
17275: DEC
17276: ST_TO_ADDR
17277: LD_INT 3
17279: PUSH
17280: FOR_TO
17281: IFFALSE 17320
// begin if i > AMICI_PAST_LIST then
17283: LD_VAR 0 2
17287: PUSH
17288: LD_EXP 37
17292: GREATER
17293: IFFALSE 17297
// break ;
17295: GO 17320
// AddComMoveXY ( AMICI_PAST_LIST [ i ] , 60 , 28 ) ;
17297: LD_EXP 37
17301: PUSH
17302: LD_VAR 0 2
17306: ARRAY
17307: PPUSH
17308: LD_INT 60
17310: PPUSH
17311: LD_INT 28
17313: PPUSH
17314: CALL_OW 171
// end ;
17318: GO 17280
17320: POP
17321: POP
// for i = 4 to AMICI_PAST_LIST + 0 do
17322: LD_ADDR_VAR 0 2
17326: PUSH
17327: DOUBLE
17328: LD_INT 4
17330: DEC
17331: ST_TO_ADDR
17332: LD_EXP 37
17336: PUSH
17337: LD_INT 0
17339: PLUS
17340: PUSH
17341: FOR_TO
17342: IFFALSE 17367
// AddComMoveXY ( AMICI_PAST_LIST [ i ] , 73 , 21 ) ;
17344: LD_EXP 37
17348: PUSH
17349: LD_VAR 0 2
17353: ARRAY
17354: PPUSH
17355: LD_INT 73
17357: PPUSH
17358: LD_INT 21
17360: PPUSH
17361: CALL_OW 171
17365: GO 17341
17367: POP
17368: POP
// end ;
17369: LD_VAR 0 1
17373: RET
// export function stavba_am_baze ; var i ; var pom ; begin
17374: LD_INT 0
17376: PPUSH
17377: PPUSH
17378: PPUSH
// Amici_baze = AMICI_STAVENI_BASE_LIST ;
17379: LD_ADDR_EXP 73
17383: PUSH
17384: LD_EXP 38
17388: ST_TO_ADDR
// for i in AMICI_STAVENI_BASE_LIST do
17389: LD_ADDR_VAR 0 2
17393: PUSH
17394: LD_EXP 38
17398: PUSH
17399: FOR_IN
17400: IFFALSE 17419
// PlaceUnitArea ( i , Amici_enter , false ) ;
17402: LD_VAR 0 2
17406: PPUSH
17407: LD_INT 8
17409: PPUSH
17410: LD_INT 0
17412: PPUSH
17413: CALL_OW 49
17417: GO 17399
17419: POP
17420: POP
// ComMoveXY ( Amici_baze , 53 , 55 ) ;
17421: LD_EXP 73
17425: PPUSH
17426: LD_INT 53
17428: PPUSH
17429: LD_INT 55
17431: PPUSH
17432: CALL_OW 111
// uc_nation := nation_american ;
17436: LD_ADDR_OWVAR 21
17440: PUSH
17441: LD_INT 1
17443: ST_TO_ADDR
// uc_side := amici ;
17444: LD_ADDR_OWVAR 20
17448: PUSH
17449: LD_EXP 2
17453: ST_TO_ADDR
// bc_type := b_depot ;
17454: LD_ADDR_OWVAR 42
17458: PUSH
17459: LD_INT 0
17461: ST_TO_ADDR
// bc_level := 0 ;
17462: LD_ADDR_OWVAR 43
17466: PUSH
17467: LD_INT 0
17469: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 52 , 48 , 2 ) ;
17470: LD_INT 52
17472: PPUSH
17473: LD_INT 48
17475: PPUSH
17476: LD_INT 2
17478: PPUSH
17479: CALL_OW 47
// end ;
17483: LD_VAR 0 1
17487: RET
// every 0 0$5 trigger FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_depot ] ] ) > 0 do var pom , i ;
17488: LD_INT 9
17490: PPUSH
17491: LD_INT 22
17493: PUSH
17494: LD_EXP 2
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 30
17505: PUSH
17506: LD_INT 0
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PPUSH
17517: CALL_OW 70
17521: PUSH
17522: LD_INT 0
17524: GREATER
17525: IFFALSE 17688
17527: GO 17529
17529: DISABLE
17530: LD_INT 0
17532: PPUSH
17533: PPUSH
// begin pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_depot ] ] ) ;
17534: LD_ADDR_VAR 0 1
17538: PUSH
17539: LD_INT 9
17541: PPUSH
17542: LD_INT 22
17544: PUSH
17545: LD_EXP 2
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 30
17556: PUSH
17557: LD_INT 0
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PPUSH
17568: CALL_OW 70
17572: ST_TO_ADDR
// while IsConstructed ( pom [ 1 ] ) <> 0 do
17573: LD_VAR 0 1
17577: PUSH
17578: LD_INT 1
17580: ARRAY
17581: PPUSH
17582: CALL_OW 304
17586: PUSH
17587: LD_INT 0
17589: NONEQUAL
17590: IFFALSE 17601
// wait ( 0 0$2 ) ;
17592: LD_INT 70
17594: PPUSH
17595: CALL_OW 67
17599: GO 17573
// AddResourceType ( GetBase ( pom [ 1 ] ) , mat_cans , 40 ) ;
17601: LD_VAR 0 1
17605: PUSH
17606: LD_INT 1
17608: ARRAY
17609: PPUSH
17610: CALL_OW 274
17614: PPUSH
17615: LD_INT 1
17617: PPUSH
17618: LD_INT 40
17620: PPUSH
17621: CALL_OW 276
// for i in Amici_baze do
17625: LD_ADDR_VAR 0 2
17629: PUSH
17630: LD_EXP 73
17634: PUSH
17635: FOR_IN
17636: IFFALSE 17665
// if GetClass ( i ) = class_engineer then
17638: LD_VAR 0 2
17642: PPUSH
17643: CALL_OW 257
17647: PUSH
17648: LD_INT 2
17650: EQUAL
17651: IFFALSE 17663
// pom = i ;
17653: LD_ADDR_VAR 0 1
17657: PUSH
17658: LD_VAR 0 2
17662: ST_TO_ADDR
17663: GO 17635
17665: POP
17666: POP
// AddComBuild ( pom , b_breastwork , 61 , 52 , 4 ) ;
17667: LD_VAR 0 1
17671: PPUSH
17672: LD_INT 31
17674: PPUSH
17675: LD_INT 61
17677: PPUSH
17678: LD_INT 52
17680: PPUSH
17681: LD_INT 4
17683: PPUSH
17684: CALL_OW 205
// end ;
17688: PPOPN 2
17690: END
// every 0 0$5 trigger FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) > 0 do var pom , i ;
17691: LD_INT 9
17693: PPUSH
17694: LD_INT 22
17696: PUSH
17697: LD_EXP 2
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: PUSH
17706: LD_INT 30
17708: PUSH
17709: LD_INT 31
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PPUSH
17720: CALL_OW 70
17724: PUSH
17725: LD_INT 0
17727: GREATER
17728: IFFALSE 17867
17730: GO 17732
17732: DISABLE
17733: LD_INT 0
17735: PPUSH
17736: PPUSH
// begin pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) ;
17737: LD_ADDR_VAR 0 1
17741: PUSH
17742: LD_INT 9
17744: PPUSH
17745: LD_INT 22
17747: PUSH
17748: LD_EXP 2
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 30
17759: PUSH
17760: LD_INT 31
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PPUSH
17771: CALL_OW 70
17775: ST_TO_ADDR
// while IsConstructed ( pom [ 1 ] ) <> 0 do
17776: LD_VAR 0 1
17780: PUSH
17781: LD_INT 1
17783: ARRAY
17784: PPUSH
17785: CALL_OW 304
17789: PUSH
17790: LD_INT 0
17792: NONEQUAL
17793: IFFALSE 17804
// wait ( 0 0$2 ) ;
17795: LD_INT 70
17797: PPUSH
17798: CALL_OW 67
17802: GO 17776
// for i in Amici_baze do
17804: LD_ADDR_VAR 0 2
17808: PUSH
17809: LD_EXP 73
17813: PUSH
17814: FOR_IN
17815: IFFALSE 17844
// if GetClass ( i ) = class_engineer then
17817: LD_VAR 0 2
17821: PPUSH
17822: CALL_OW 257
17826: PUSH
17827: LD_INT 2
17829: EQUAL
17830: IFFALSE 17842
// pom = i ;
17832: LD_ADDR_VAR 0 1
17836: PUSH
17837: LD_VAR 0 2
17841: ST_TO_ADDR
17842: GO 17814
17844: POP
17845: POP
// AddComBuild ( pom , b_breastwork , 62 , 56 , 4 ) ;
17846: LD_VAR 0 1
17850: PPUSH
17851: LD_INT 31
17853: PPUSH
17854: LD_INT 62
17856: PPUSH
17857: LD_INT 56
17859: PPUSH
17860: LD_INT 4
17862: PPUSH
17863: CALL_OW 205
// end ;
17867: PPOPN 2
17869: END
// every 0 0$5 trigger FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) > 1 do var pom , i , pom1 ;
17870: LD_INT 9
17872: PPUSH
17873: LD_INT 22
17875: PUSH
17876: LD_EXP 2
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PUSH
17885: LD_INT 30
17887: PUSH
17888: LD_INT 31
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PPUSH
17899: CALL_OW 70
17903: PUSH
17904: LD_INT 1
17906: GREATER
17907: IFFALSE 18202
17909: GO 17911
17911: DISABLE
17912: LD_INT 0
17914: PPUSH
17915: PPUSH
17916: PPUSH
// begin pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) ;
17917: LD_ADDR_VAR 0 1
17921: PUSH
17922: LD_INT 9
17924: PPUSH
17925: LD_INT 22
17927: PUSH
17928: LD_EXP 2
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 30
17939: PUSH
17940: LD_INT 31
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PPUSH
17951: CALL_OW 70
17955: ST_TO_ADDR
// pom1 = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_class , class_soldier ] ] ) ;
17956: LD_ADDR_VAR 0 3
17960: PUSH
17961: LD_INT 9
17963: PPUSH
17964: LD_INT 22
17966: PUSH
17967: LD_EXP 2
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: LD_INT 25
17978: PUSH
17979: LD_INT 1
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PPUSH
17990: CALL_OW 70
17994: ST_TO_ADDR
// while IsConstructed ( pom [ 1 ] ) or IsConstructed ( pom [ 2 ] ) <> 0 do
17995: LD_VAR 0 1
17999: PUSH
18000: LD_INT 1
18002: ARRAY
18003: PPUSH
18004: CALL_OW 304
18008: PUSH
18009: LD_VAR 0 1
18013: PUSH
18014: LD_INT 2
18016: ARRAY
18017: PPUSH
18018: CALL_OW 304
18022: PUSH
18023: LD_INT 0
18025: NONEQUAL
18026: OR
18027: IFFALSE 18038
// wait ( 0 0$1 ) ;
18029: LD_INT 35
18031: PPUSH
18032: CALL_OW 67
18036: GO 17995
// ComEnterUnit ( pom1 [ 1 ] , pom [ 1 ] ) ;
18038: LD_VAR 0 3
18042: PUSH
18043: LD_INT 1
18045: ARRAY
18046: PPUSH
18047: LD_VAR 0 1
18051: PUSH
18052: LD_INT 1
18054: ARRAY
18055: PPUSH
18056: CALL_OW 120
// ComEnterUnit ( pom1 [ 2 ] , pom [ 2 ] ) ;
18060: LD_VAR 0 3
18064: PUSH
18065: LD_INT 2
18067: ARRAY
18068: PPUSH
18069: LD_VAR 0 1
18073: PUSH
18074: LD_INT 2
18076: ARRAY
18077: PPUSH
18078: CALL_OW 120
// SetBLevel ( pom , levely_bw_na_zapade [ difficulty ] ) ;
18082: LD_VAR 0 1
18086: PPUSH
18087: LD_EXP 44
18091: PUSH
18092: LD_OWVAR 67
18096: ARRAY
18097: PPUSH
18098: CALL_OW 241
// pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_depot ] ] ) ;
18102: LD_ADDR_VAR 0 1
18106: PUSH
18107: LD_INT 9
18109: PPUSH
18110: LD_INT 22
18112: PUSH
18113: LD_EXP 2
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: LD_INT 30
18124: PUSH
18125: LD_INT 0
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PPUSH
18136: CALL_OW 70
18140: ST_TO_ADDR
// pom1 = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_class , class_engineer ] ] ) ;
18141: LD_ADDR_VAR 0 3
18145: PUSH
18146: LD_INT 9
18148: PPUSH
18149: LD_INT 22
18151: PUSH
18152: LD_EXP 2
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: LD_INT 25
18163: PUSH
18164: LD_INT 2
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PPUSH
18175: CALL_OW 70
18179: ST_TO_ADDR
// ComEnterUnit ( pom1 , pom [ 1 ] ) ;
18180: LD_VAR 0 3
18184: PPUSH
18185: LD_VAR 0 1
18189: PUSH
18190: LD_INT 1
18192: ARRAY
18193: PPUSH
18194: CALL_OW 120
// nastav_levely_budov ;
18198: CALL 19776 0 0
// end ;
18202: PPOPN 3
18204: END
// export function amici_boj ; var mech ; var auto ; var i ; var AP ; begin
18205: LD_INT 0
18207: PPUSH
18208: PPUSH
18209: PPUSH
18210: PPUSH
18211: PPUSH
// ComMoveXY ( Amici_past , 64 , 16 ) ;
18212: LD_EXP 72
18216: PPUSH
18217: LD_INT 64
18219: PPUSH
18220: LD_INT 16
18222: PPUSH
18223: CALL_OW 111
// mech = vyber_cloveka ( Amici_past , class_mechanic ) ;
18227: LD_ADDR_VAR 0 2
18231: PUSH
18232: LD_EXP 72
18236: PPUSH
18237: LD_INT 3
18239: PPUSH
18240: CALL 4379 0 2
18244: ST_TO_ADDR
// if mech = 0 or ( not IsOK ( mech ) ) then
18245: LD_VAR 0 2
18249: PUSH
18250: LD_INT 0
18252: EQUAL
18253: PUSH
18254: LD_VAR 0 2
18258: PPUSH
18259: CALL_OW 302
18263: NOT
18264: OR
18265: IFFALSE 18295
// mech = UnitFilter ( Amici_past , [ [ f_ok ] ] ) [ 1 ] ;
18267: LD_ADDR_VAR 0 2
18271: PUSH
18272: LD_EXP 72
18276: PPUSH
18277: LD_INT 50
18279: PUSH
18280: EMPTY
18281: LIST
18282: PUSH
18283: EMPTY
18284: LIST
18285: PPUSH
18286: CALL_OW 72
18290: PUSH
18291: LD_INT 1
18293: ARRAY
18294: ST_TO_ADDR
// auto = FilterAllUnits ( [ [ f_side , You2 ] , [ f_type , unit_vehicle ] ] ) ;
18295: LD_ADDR_VAR 0 3
18299: PUSH
18300: LD_INT 22
18302: PUSH
18303: LD_EXP 4
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 21
18314: PUSH
18315: LD_INT 2
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PPUSH
18326: CALL_OW 69
18330: ST_TO_ADDR
// if auto > 0 then
18331: LD_VAR 0 3
18335: PUSH
18336: LD_INT 0
18338: GREATER
18339: IFFALSE 18355
// auto = auto [ 1 ] ;
18341: LD_ADDR_VAR 0 3
18345: PUSH
18346: LD_VAR 0 3
18350: PUSH
18351: LD_INT 1
18353: ARRAY
18354: ST_TO_ADDR
// if mech = 0 then
18355: LD_VAR 0 2
18359: PUSH
18360: LD_INT 0
18362: EQUAL
18363: IFFALSE 18379
// mech = Amici_past [ 1 ] ;
18365: LD_ADDR_VAR 0 2
18369: PUSH
18370: LD_EXP 72
18374: PUSH
18375: LD_INT 1
18377: ARRAY
18378: ST_TO_ADDR
// ComEnterUnit ( mech , auto ) ;
18379: LD_VAR 0 2
18383: PPUSH
18384: LD_VAR 0 3
18388: PPUSH
18389: CALL_OW 120
// AddComMoveXY ( Amici_past , 69 , 18 ) ;
18393: LD_EXP 72
18397: PPUSH
18398: LD_INT 69
18400: PPUSH
18401: LD_INT 18
18403: PPUSH
18404: CALL_OW 171
// AddComMoveXY ( auto , 72 , 21 ) ;
18408: LD_VAR 0 3
18412: PPUSH
18413: LD_INT 72
18415: PPUSH
18416: LD_INT 21
18418: PPUSH
18419: CALL_OW 171
// wait ( 0 0$3 ) ;
18423: LD_INT 105
18425: PPUSH
18426: CALL_OW 67
// zaber_to_auto ;
18430: CALL 19643 0 0
// while FilterAllUnits ( [ [ f_side , Amici ] , [ f_type , unit_vehicle ] ] ) = 0 do
18434: LD_INT 22
18436: PUSH
18437: LD_EXP 2
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 21
18448: PUSH
18449: LD_INT 2
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PPUSH
18460: CALL_OW 69
18464: PUSH
18465: LD_INT 0
18467: EQUAL
18468: IFFALSE 18548
// begin for i in Amici_past do
18470: LD_ADDR_VAR 0 4
18474: PUSH
18475: LD_EXP 72
18479: PUSH
18480: FOR_IN
18481: IFFALSE 18508
// if IsOK ( i ) then
18483: LD_VAR 0 4
18487: PPUSH
18488: CALL_OW 302
18492: IFFALSE 18506
// begin AP = i ;
18494: LD_ADDR_VAR 0 5
18498: PUSH
18499: LD_VAR 0 4
18503: ST_TO_ADDR
// break ;
18504: GO 18508
// end ;
18506: GO 18480
18508: POP
18509: POP
// ComEnterUnit ( AP , Auto_belkov ) ;
18510: LD_VAR 0 5
18514: PPUSH
18515: LD_EXP 70
18519: PPUSH
18520: CALL_OW 120
// AddComMoveXY ( AP , 73 , 22 ) ;
18524: LD_VAR 0 5
18528: PPUSH
18529: LD_INT 73
18531: PPUSH
18532: LD_INT 22
18534: PPUSH
18535: CALL_OW 171
// wait ( 0 0$2 ) ;
18539: LD_INT 70
18541: PPUSH
18542: CALL_OW 67
// end ;
18546: GO 18434
// end ;
18548: LD_VAR 0 1
18552: RET
// export function amici_attack_belkov ; var i ; begin
18553: LD_INT 0
18555: PPUSH
18556: PPUSH
// if GetSide ( bel ) <> You then
18557: LD_EXP 52
18561: PPUSH
18562: CALL_OW 255
18566: PUSH
18567: LD_EXP 1
18571: NONEQUAL
18572: IFFALSE 18695
// begin for i in AMICI_UTOK_BELKOV_LIST do
18574: LD_ADDR_VAR 0 2
18578: PUSH
18579: LD_EXP 39
18583: PUSH
18584: FOR_IN
18585: IFFALSE 18604
// PlaceUnitArea ( i , Zpet_bel , false ) ;
18587: LD_VAR 0 2
18591: PPUSH
18592: LD_INT 15
18594: PPUSH
18595: LD_INT 0
18597: PPUSH
18598: CALL_OW 49
18602: GO 18584
18604: POP
18605: POP
// McMove ( 1 , AMICI_UTOK_BELKOV_LIST , [ [ 44 , 6 ] , [ 36 , 5 ] , [ 36 , 10 ] , [ GetX ( bel ) , GetY ( bel ) ] , [ 52 , 2 ] ] , [ mc_move_agressive ] ) ;
18606: LD_INT 1
18608: PPUSH
18609: LD_EXP 39
18613: PPUSH
18614: LD_INT 44
18616: PUSH
18617: LD_INT 6
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: LD_INT 36
18626: PUSH
18627: LD_INT 5
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 36
18636: PUSH
18637: LD_INT 10
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_EXP 52
18648: PPUSH
18649: CALL_OW 250
18653: PUSH
18654: LD_EXP 52
18658: PPUSH
18659: CALL_OW 251
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 52
18670: PUSH
18671: LD_INT 2
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: PPUSH
18685: LD_INT 6
18687: PUSH
18688: EMPTY
18689: LIST
18690: PPUSH
18691: CALL_OW 398
// end ; end ;
18695: LD_VAR 0 1
18699: RET
// export function amici_retreat ; var i , Amici_All ; begin
18700: LD_INT 0
18702: PPUSH
18703: PPUSH
18704: PPUSH
// Amici_All := AMICI_UTOK_BELKOV_LIST union AMICI_PAST_LIST ^ auto_belkov ;
18705: LD_ADDR_VAR 0 3
18709: PUSH
18710: LD_EXP 39
18714: PUSH
18715: LD_EXP 37
18719: PUSH
18720: LD_EXP 70
18724: ADD
18725: UNION
18726: ST_TO_ADDR
// repeat ComMoveToArea ( Amici_All , Zpet_bel ) ;
18727: LD_VAR 0 3
18731: PPUSH
18732: LD_INT 15
18734: PPUSH
18735: CALL_OW 113
// wait ( 0 0$1 ) ;
18739: LD_INT 35
18741: PPUSH
18742: CALL_OW 67
// for i in Amici_All do
18746: LD_ADDR_VAR 0 2
18750: PUSH
18751: LD_VAR 0 3
18755: PUSH
18756: FOR_IN
18757: IFFALSE 18828
// begin if not ( IsOK ( i ) ) then
18759: LD_VAR 0 2
18763: PPUSH
18764: CALL_OW 302
18768: NOT
18769: IFFALSE 18787
// Amici_All := Amici_All diff i ;
18771: LD_ADDR_VAR 0 3
18775: PUSH
18776: LD_VAR 0 3
18780: PUSH
18781: LD_VAR 0 2
18785: DIFF
18786: ST_TO_ADDR
// if IsInArea ( i , Zpet_bel ) then
18787: LD_VAR 0 2
18791: PPUSH
18792: LD_INT 15
18794: PPUSH
18795: CALL_OW 308
18799: IFFALSE 18826
// begin Amici_All := Amici_All diff i ;
18801: LD_ADDR_VAR 0 3
18805: PUSH
18806: LD_VAR 0 3
18810: PUSH
18811: LD_VAR 0 2
18815: DIFF
18816: ST_TO_ADDR
// RemoveUnit ( i ) ;
18817: LD_VAR 0 2
18821: PPUSH
18822: CALL_OW 64
// end ; end ;
18826: GO 18756
18828: POP
18829: POP
// until Amici_All = [ ] ;
18830: LD_VAR 0 3
18834: PUSH
18835: EMPTY
18836: EQUAL
18837: IFFALSE 18727
// end ;
18839: LD_VAR 0 1
18843: RET
// every 0 0$2 trigger FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) = 2 do
18844: LD_INT 9
18846: PPUSH
18847: LD_INT 22
18849: PUSH
18850: LD_EXP 2
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 30
18861: PUSH
18862: LD_INT 31
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PPUSH
18873: CALL_OW 70
18877: PUSH
18878: LD_INT 2
18880: EQUAL
18881: IFFALSE 18922
18883: GO 18885
18885: DISABLE
// begin Am_opravari = UnitFilter ( Amici_baze , [ [ f_class , class_engineer ] ] ) ;
18886: LD_ADDR_LOC 23
18890: PUSH
18891: LD_EXP 73
18895: PPUSH
18896: LD_INT 25
18898: PUSH
18899: LD_INT 2
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: EMPTY
18907: LIST
18908: PPUSH
18909: CALL_OW 72
18913: ST_TO_ADDR
// opravy = true ;
18914: LD_ADDR_LOC 22
18918: PUSH
18919: LD_INT 1
18921: ST_TO_ADDR
// end ;
18922: END
// every 0 0$4 trigger opravy do var pom , i ; var pom1 , pom2 ;
18923: LD_LOC 22
18927: IFFALSE 19403
18929: GO 18931
18931: DISABLE
18932: LD_INT 0
18934: PPUSH
18935: PPUSH
18936: PPUSH
18937: PPUSH
// begin pom1 = [ ] ;
18938: LD_ADDR_VAR 0 3
18942: PUSH
18943: EMPTY
18944: ST_TO_ADDR
// pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) ;
18945: LD_ADDR_VAR 0 1
18949: PUSH
18950: LD_INT 9
18952: PPUSH
18953: LD_INT 22
18955: PUSH
18956: LD_EXP 2
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 30
18967: PUSH
18968: LD_INT 31
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PPUSH
18979: CALL_OW 70
18983: ST_TO_ADDR
// for i in pom do
18984: LD_ADDR_VAR 0 2
18988: PUSH
18989: LD_VAR 0 1
18993: PUSH
18994: FOR_IN
18995: IFFALSE 19030
// if GetLives ( i ) < 1000 then
18997: LD_VAR 0 2
19001: PPUSH
19002: CALL_OW 256
19006: PUSH
19007: LD_INT 1000
19009: LESS
19010: IFFALSE 19028
// pom1 = pom1 ^ i ;
19012: LD_ADDR_VAR 0 3
19016: PUSH
19017: LD_VAR 0 3
19021: PUSH
19022: LD_VAR 0 2
19026: ADD
19027: ST_TO_ADDR
19028: GO 18994
19030: POP
19031: POP
// case pom1 + 0 of 1 :
19032: LD_VAR 0 3
19036: PUSH
19037: LD_INT 0
19039: PLUS
19040: PUSH
19041: LD_INT 1
19043: DOUBLE
19044: EQUAL
19045: IFTRUE 19049
19047: GO 19153
19049: POP
// begin ComExitBuilding ( Am_opravari ) ;
19050: LD_LOC 23
19054: PPUSH
19055: CALL_OW 122
// AddComRepairBuilding ( Am_opravari , pom1 [ 1 ] ) ;
19059: LD_LOC 23
19063: PPUSH
19064: LD_VAR 0 3
19068: PUSH
19069: LD_INT 1
19071: ARRAY
19072: PPUSH
19073: CALL_OW 190
// pom2 = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_depot ] ] ) ;
19077: LD_ADDR_VAR 0 4
19081: PUSH
19082: LD_INT 9
19084: PPUSH
19085: LD_INT 22
19087: PUSH
19088: LD_EXP 2
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 30
19099: PUSH
19100: LD_INT 0
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PPUSH
19111: CALL_OW 70
19115: ST_TO_ADDR
// if pom2 > 0 then
19116: LD_VAR 0 4
19120: PUSH
19121: LD_INT 0
19123: GREATER
19124: IFFALSE 19144
// AddComEnterUnit ( Am_opravari , pom2 [ 1 ] ) ;
19126: LD_LOC 23
19130: PPUSH
19131: LD_VAR 0 4
19135: PUSH
19136: LD_INT 1
19138: ARRAY
19139: PPUSH
19140: CALL_OW 180
// wait ( 0 0$5 ) ;
19144: LD_INT 175
19146: PPUSH
19147: CALL_OW 67
// end ; 2 :
19151: GO 19402
19153: LD_INT 2
19155: DOUBLE
19156: EQUAL
19157: IFTRUE 19161
19159: GO 19401
19161: POP
// begin if Am_opravari + 0 = 2 then
19162: LD_LOC 23
19166: PUSH
19167: LD_INT 0
19169: PLUS
19170: PUSH
19171: LD_INT 2
19173: EQUAL
19174: IFFALSE 19298
// begin ComExitBuilding ( Am_opravari ) ;
19176: LD_LOC 23
19180: PPUSH
19181: CALL_OW 122
// AddComRepairBuilding ( Am_opravari [ 2 ] , pom1 [ 1 ] ) ;
19185: LD_LOC 23
19189: PUSH
19190: LD_INT 2
19192: ARRAY
19193: PPUSH
19194: LD_VAR 0 3
19198: PUSH
19199: LD_INT 1
19201: ARRAY
19202: PPUSH
19203: CALL_OW 190
// AddComRepairBuilding ( Am_opravari [ 1 ] , pom1 [ 1 ] ) ;
19207: LD_LOC 23
19211: PUSH
19212: LD_INT 1
19214: ARRAY
19215: PPUSH
19216: LD_VAR 0 3
19220: PUSH
19221: LD_INT 1
19223: ARRAY
19224: PPUSH
19225: CALL_OW 190
// pom2 = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_depot ] ] ) ;
19229: LD_ADDR_VAR 0 4
19233: PUSH
19234: LD_INT 9
19236: PPUSH
19237: LD_INT 22
19239: PUSH
19240: LD_EXP 2
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 30
19251: PUSH
19252: LD_INT 0
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PPUSH
19263: CALL_OW 70
19267: ST_TO_ADDR
// if pom2 > 0 then
19268: LD_VAR 0 4
19272: PUSH
19273: LD_INT 0
19275: GREATER
19276: IFFALSE 19296
// AddComEnterUnit ( Am_opravari , pom2 [ 1 ] ) ;
19278: LD_LOC 23
19282: PPUSH
19283: LD_VAR 0 4
19287: PUSH
19288: LD_INT 1
19290: ARRAY
19291: PPUSH
19292: CALL_OW 180
// end else
19296: GO 19392
// begin ComExitBuilding ( Am_opravari ) ;
19298: LD_LOC 23
19302: PPUSH
19303: CALL_OW 122
// AddComRepairBuilding ( Am_opravari , pom1 [ 1 ] ) ;
19307: LD_LOC 23
19311: PPUSH
19312: LD_VAR 0 3
19316: PUSH
19317: LD_INT 1
19319: ARRAY
19320: PPUSH
19321: CALL_OW 190
// pom2 = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_depot ] ] ) ;
19325: LD_ADDR_VAR 0 4
19329: PUSH
19330: LD_INT 9
19332: PPUSH
19333: LD_INT 22
19335: PUSH
19336: LD_EXP 2
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 30
19347: PUSH
19348: LD_INT 0
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PPUSH
19359: CALL_OW 70
19363: ST_TO_ADDR
// if pom2 > 0 then
19364: LD_VAR 0 4
19368: PUSH
19369: LD_INT 0
19371: GREATER
19372: IFFALSE 19392
// AddComEnterUnit ( Am_opravari , pom2 [ 1 ] ) ;
19374: LD_LOC 23
19378: PPUSH
19379: LD_VAR 0 4
19383: PUSH
19384: LD_INT 1
19386: ARRAY
19387: PPUSH
19388: CALL_OW 180
// end ; wait ( 0 0$5 ) ;
19392: LD_INT 175
19394: PPUSH
19395: CALL_OW 67
// end ; end ;
19399: GO 19402
19401: POP
// enable ;
19402: ENABLE
// end ;
19403: PPOPN 4
19405: END
// every 0 0$1 trigger opravy do var pom , i ;
19406: LD_LOC 22
19410: IFFALSE 19480
19412: GO 19414
19414: DISABLE
19415: LD_INT 0
19417: PPUSH
19418: PPUSH
// begin pom = [ ] ;
19419: LD_ADDR_VAR 0 1
19423: PUSH
19424: EMPTY
19425: ST_TO_ADDR
// for i in Am_opravari do
19426: LD_ADDR_VAR 0 2
19430: PUSH
19431: LD_LOC 23
19435: PUSH
19436: FOR_IN
19437: IFFALSE 19468
// if IsOK ( i ) then
19439: LD_VAR 0 2
19443: PPUSH
19444: CALL_OW 302
19448: IFFALSE 19466
// pom = pom ^ i ;
19450: LD_ADDR_VAR 0 1
19454: PUSH
19455: LD_VAR 0 1
19459: PUSH
19460: LD_VAR 0 2
19464: ADD
19465: ST_TO_ADDR
19466: GO 19436
19468: POP
19469: POP
// Am_opravari = pom ;
19470: LD_ADDR_LOC 23
19474: PUSH
19475: LD_VAR 0 1
19479: ST_TO_ADDR
// end ;
19480: PPOPN 2
19482: END
// export function amici_po_kecech ; var i , j ; var pom ; begin
19483: LD_INT 0
19485: PPUSH
19486: PPUSH
19487: PPUSH
19488: PPUSH
// i = 1 ;
19489: LD_ADDR_VAR 0 2
19493: PUSH
19494: LD_INT 1
19496: ST_TO_ADDR
// if GetSide ( auto_belkov ) <> Amici then
19497: LD_EXP 70
19501: PPUSH
19502: CALL_OW 255
19506: PUSH
19507: LD_EXP 2
19511: NONEQUAL
19512: IFFALSE 19595
// begin for i in Amici_past do
19514: LD_ADDR_VAR 0 2
19518: PUSH
19519: LD_EXP 72
19523: PUSH
19524: FOR_IN
19525: IFFALSE 19550
// if IsOK ( i ) then
19527: LD_VAR 0 2
19531: PPUSH
19532: CALL_OW 302
19536: IFFALSE 19548
// pom = i ;
19538: LD_ADDR_VAR 0 4
19542: PUSH
19543: LD_VAR 0 2
19547: ST_TO_ADDR
19548: GO 19524
19550: POP
19551: POP
// ComEnterUnit ( pom , auto_belkov ) ;
19552: LD_VAR 0 4
19556: PPUSH
19557: LD_EXP 70
19561: PPUSH
19562: CALL_OW 120
// AddComMoveXY ( pom , 74 , 22 ) ;
19566: LD_VAR 0 4
19570: PPUSH
19571: LD_INT 74
19573: PPUSH
19574: LD_INT 22
19576: PPUSH
19577: CALL_OW 171
// i = i + 1 ;
19581: LD_ADDR_VAR 0 2
19585: PUSH
19586: LD_VAR 0 2
19590: PUSH
19591: LD_INT 1
19593: PLUS
19594: ST_TO_ADDR
// end ; for i in Amici_past do
19595: LD_ADDR_VAR 0 2
19599: PUSH
19600: LD_EXP 72
19604: PUSH
19605: FOR_IN
19606: IFFALSE 19636
// if IsOK ( i ) then
19608: LD_VAR 0 2
19612: PPUSH
19613: CALL_OW 302
19617: IFFALSE 19634
// ComMoveXY ( i , 72 , 25 ) ;
19619: LD_VAR 0 2
19623: PPUSH
19624: LD_INT 72
19626: PPUSH
19627: LD_INT 25
19629: PPUSH
19630: CALL_OW 111
19634: GO 19605
19636: POP
19637: POP
// end ;
19638: LD_VAR 0 1
19642: RET
// function zaber_to_auto ; var i , pom ; begin
19643: LD_INT 0
19645: PPUSH
19646: PPUSH
19647: PPUSH
// while ( FilterAllUnits ( [ [ f_side , Amici ] , [ f_type , unit_vehicle ] ] ) = 0 ) and IsOK ( auto_belkov ) do
19648: LD_INT 22
19650: PUSH
19651: LD_EXP 2
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 21
19662: PUSH
19663: LD_INT 2
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PPUSH
19674: CALL_OW 69
19678: PUSH
19679: LD_INT 0
19681: EQUAL
19682: PUSH
19683: LD_EXP 70
19687: PPUSH
19688: CALL_OW 302
19692: AND
19693: IFFALSE 19771
// begin for i in Amici_past do
19695: LD_ADDR_VAR 0 2
19699: PUSH
19700: LD_EXP 72
19704: PUSH
19705: FOR_IN
19706: IFFALSE 19731
// if IsOK ( i ) then
19708: LD_VAR 0 2
19712: PPUSH
19713: CALL_OW 302
19717: IFFALSE 19729
// pom = i ;
19719: LD_ADDR_VAR 0 3
19723: PUSH
19724: LD_VAR 0 2
19728: ST_TO_ADDR
19729: GO 19705
19731: POP
19732: POP
// ComEnterUnit ( pom , auto_belkov ) ;
19733: LD_VAR 0 3
19737: PPUSH
19738: LD_EXP 70
19742: PPUSH
19743: CALL_OW 120
// AddComMoveXY ( pom , 72 , 20 ) ;
19747: LD_VAR 0 3
19751: PPUSH
19752: LD_INT 72
19754: PPUSH
19755: LD_INT 20
19757: PPUSH
19758: CALL_OW 171
// wait ( 0 0$2 ) ;
19762: LD_INT 70
19764: PPUSH
19765: CALL_OW 67
// end ;
19769: GO 19648
// end ;
19771: LD_VAR 0 1
19775: RET
// function nastav_levely_budov ; begin
19776: LD_INT 0
19778: PPUSH
// SetBLevel ( [ Am_bre1 , Am_bre2 ] , levely_bw_na_vychode ) ;
19779: LD_INT 30
19781: PUSH
19782: LD_INT 31
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PPUSH
19789: LD_EXP 45
19793: PPUSH
19794: CALL_OW 241
// SetBLevel ( [ BWW_1 , BWW_2 ] , levely_bw_na_vychode ) ;
19798: LD_EXP 74
19802: PUSH
19803: LD_EXP 75
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PPUSH
19812: LD_EXP 45
19816: PPUSH
19817: CALL_OW 241
// end ; end_of_file
19821: LD_VAR 0 1
19825: RET
// every 0 0$5 trigger posily_go do var pom ; var i ;
19826: LD_EXP 68
19830: IFFALSE 19944
19832: GO 19834
19834: DISABLE
19835: LD_INT 0
19837: PPUSH
19838: PPUSH
// begin pom = [ RU2_hv1 , RU2_hv2 ] ;
19839: LD_ADDR_VAR 0 1
19843: PUSH
19844: LD_INT 15
19846: PUSH
19847: LD_INT 16
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: ST_TO_ADDR
// wait ( 2 ) ;
19854: LD_INT 2
19856: PPUSH
19857: CALL_OW 67
// AddComAgressiveMove ( pom , GetX ( bur ) , GetY ( bur ) ) ;
19861: LD_VAR 0 1
19865: PPUSH
19866: LD_EXP 50
19870: PPUSH
19871: CALL_OW 250
19875: PPUSH
19876: LD_EXP 50
19880: PPUSH
19881: CALL_OW 251
19885: PPUSH
19886: CALL_OW 174
// wait ( 0 0$6 ) ;
19890: LD_INT 210
19892: PPUSH
19893: CALL_OW 67
// for i in pom do
19897: LD_ADDR_VAR 0 2
19901: PUSH
19902: LD_VAR 0 1
19906: PUSH
19907: FOR_IN
19908: IFFALSE 19942
// begin SetSide ( i , You ) ;
19910: LD_VAR 0 2
19914: PPUSH
19915: LD_EXP 1
19919: PPUSH
19920: CALL_OW 235
// BurlakComp = BurlakComp ^ i ;
19924: LD_ADDR_EXP 14
19928: PUSH
19929: LD_EXP 14
19933: PUSH
19934: LD_VAR 0 2
19938: ADD
19939: ST_TO_ADDR
// end ;
19940: GO 19907
19942: POP
19943: POP
// end ;
19944: PPOPN 2
19946: END
// on VehicleCaptured ( vehicle , ab , side , human ) do begin if side = 1 then
19947: LD_VAR 0 3
19951: PUSH
19952: LD_INT 1
19954: EQUAL
19955: IFFALSE 19961
// SA_RecaptureBielkovsTank ;
19957: CALL 20165 0 0
// if ab = auto_belkov then
19961: LD_VAR 0 2
19965: PUSH
19966: LD_EXP 70
19970: EQUAL
19971: IFFALSE 19983
// auto_belkov = vehicle ;
19973: LD_ADDR_EXP 70
19977: PUSH
19978: LD_VAR 0 1
19982: ST_TO_ADDR
// debug_strings = [ auto_belkov , GetSide ( auto_belkov ) , bel , IsDrivenBy ( auto_belkov ) ] ;
19983: LD_ADDR_OWVAR 48
19987: PUSH
19988: LD_EXP 70
19992: PUSH
19993: LD_EXP 70
19997: PPUSH
19998: CALL_OW 255
20002: PUSH
20003: LD_EXP 52
20007: PUSH
20008: LD_EXP 70
20012: PPUSH
20013: CALL_OW 311
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: ST_TO_ADDR
// enable ;
20024: ENABLE
// end ;
20025: PPOPN 4
20027: END
// on Command ( com ) do var i , j , temp ;
20028: LD_INT 0
20030: PPUSH
20031: PPUSH
20032: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
20033: LD_ADDR_VAR 0 2
20037: PUSH
20038: LD_INT 22
20040: PUSH
20041: LD_INT 3
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 21
20050: PUSH
20051: LD_INT 1
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: PPUSH
20062: CALL_OW 69
20066: PUSH
20067: FOR_IN
20068: IFFALSE 20160
// if GetTaskList ( i ) > 0 then
20070: LD_VAR 0 2
20074: PPUSH
20075: CALL_OW 437
20079: PUSH
20080: LD_INT 0
20082: GREATER
20083: IFFALSE 20158
// for j = 1 to GetTaskList ( i ) do
20085: LD_ADDR_VAR 0 3
20089: PUSH
20090: DOUBLE
20091: LD_INT 1
20093: DEC
20094: ST_TO_ADDR
20095: LD_VAR 0 2
20099: PPUSH
20100: CALL_OW 437
20104: PUSH
20105: FOR_TO
20106: IFFALSE 20156
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
20108: LD_ADDR_VAR 0 4
20112: PUSH
20113: LD_VAR 0 2
20117: PPUSH
20118: CALL_OW 437
20122: PUSH
20123: LD_VAR 0 3
20127: ARRAY
20128: PUSH
20129: LD_INT 4
20131: ARRAY
20132: ST_TO_ADDR
// if temp = RU1_dep then
20133: LD_VAR 0 4
20137: PUSH
20138: LD_INT 1
20140: EQUAL
20141: IFFALSE 20154
// SetTaskList ( i , [ ] ) ;
20143: LD_VAR 0 2
20147: PPUSH
20148: EMPTY
20149: PPUSH
20150: CALL_OW 446
// end ;
20154: GO 20105
20156: POP
20157: POP
20158: GO 20067
20160: POP
20161: POP
// end ; end_of_file
20162: PPOPN 4
20164: END
// export function SA_RecaptureBielkovsTank ; begin
20165: LD_INT 0
20167: PPUSH
// SetAchievement ( ACH_PRE ) ;
20168: LD_STRING ACH_PRE
20170: PPUSH
20171: CALL_OW 543
// end ;
20175: LD_VAR 0 1
20179: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) = 0 do
20180: LD_INT 22
20182: PUSH
20183: LD_INT 1
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: PUSH
20190: LD_INT 30
20192: PUSH
20193: LD_INT 31
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PPUSH
20204: CALL_OW 69
20208: PUSH
20209: LD_INT 0
20211: EQUAL
20212: IFFALSE 20224
20214: GO 20216
20216: DISABLE
// SetAchievement ( ACH_SEC ) ; end_of_file
20217: LD_STRING ACH_SEC
20219: PPUSH
20220: CALL_OW 543
20224: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
20225: LD_INT 0
20227: PPUSH
20228: PPUSH
// if not missionNumber then
20229: LD_VAR 0 2
20233: NOT
20234: IFFALSE 20238
// exit ;
20236: GO 20368
// achiv := false ;
20238: LD_ADDR_VAR 0 7
20242: PUSH
20243: LD_INT 0
20245: ST_TO_ADDR
// case campaignNumber of 1 :
20246: LD_VAR 0 1
20250: PUSH
20251: LD_INT 1
20253: DOUBLE
20254: EQUAL
20255: IFTRUE 20259
20257: GO 20270
20259: POP
// achiv := ACH_GOTA ; 2 :
20260: LD_ADDR_VAR 0 7
20264: PUSH
20265: LD_STRING ACH_GOTA
20267: ST_TO_ADDR
20268: GO 20320
20270: LD_INT 2
20272: DOUBLE
20273: EQUAL
20274: IFTRUE 20278
20276: GO 20281
20278: POP
// ; 3 :
20279: GO 20320
20281: LD_INT 3
20283: DOUBLE
20284: EQUAL
20285: IFTRUE 20289
20287: GO 20300
20289: POP
// achiv := ACH_MOTSU ; 4 :
20290: LD_ADDR_VAR 0 7
20294: PUSH
20295: LD_STRING ACH_MOTSU
20297: ST_TO_ADDR
20298: GO 20320
20300: LD_INT 4
20302: DOUBLE
20303: EQUAL
20304: IFTRUE 20308
20306: GO 20319
20308: POP
// achiv := ACH_LOP ; end ;
20309: LD_ADDR_VAR 0 7
20313: PUSH
20314: LD_STRING ACH_LOP
20316: ST_TO_ADDR
20317: GO 20320
20319: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
20320: LD_OWVAR 67
20324: PUSH
20325: LD_INT 3
20327: EQUAL
20328: PUSH
20329: LD_VAR 0 7
20333: AND
20334: PUSH
20335: LD_VAR 0 3
20339: AND
20340: PUSH
20341: LD_VAR 0 4
20345: AND
20346: PUSH
20347: LD_VAR 0 5
20351: AND
20352: IFFALSE 20368
// SetAchievementEX ( achiv , missionNumber ) ;
20354: LD_VAR 0 7
20358: PPUSH
20359: LD_VAR 0 2
20363: PPUSH
20364: CALL_OW 564
// end ;
20368: LD_VAR 0 6
20372: RET
// export function SA_BehemothConstructed ; begin
20373: LD_INT 0
20375: PPUSH
// SetAchievement ( ACH_SMC ) ;
20376: LD_STRING ACH_SMC
20378: PPUSH
20379: CALL_OW 543
// end ;
20383: LD_VAR 0 1
20387: RET
