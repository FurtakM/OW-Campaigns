// export You , Amici , Rusi , You2 , Rusi2 , You3 , NoLosses ; export belkov_returns , belkov_american_clash ; export belkovSave ; starting begin InitVars ;
   0: CALL 1607 0 0
// disable_prediction = true ;
   4: LD_ADDR_OWVAR 50
   8: PUSH
   9: LD_INT 1
  11: ST_TO_ADDR
// debug_strings = [ ] ;
  12: LD_ADDR_OWVAR 48
  16: PUSH
  17: EMPTY
  18: ST_TO_ADDR
// RandomizeAll ;
  19: CALL_OW 11
// InitHc ;
  23: CALL_OW 19
// InitUc ;
  27: CALL_OW 18
// InitVc ;
  31: CALL_OW 20
// You = 3 ;
  35: LD_ADDR_EXP 1
  39: PUSH
  40: LD_INT 3
  42: ST_TO_ADDR
// Rusi = You ;
  43: LD_ADDR_EXP 3
  47: PUSH
  48: LD_EXP 1
  52: ST_TO_ADDR
// Amici = 1 ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_INT 1
  60: ST_TO_ADDR
// You2 = 6 ;
  61: LD_ADDR_EXP 4
  65: PUSH
  66: LD_INT 6
  68: ST_TO_ADDR
// You3 = 5 ;
  69: LD_ADDR_EXP 6
  73: PUSH
  74: LD_INT 5
  76: ST_TO_ADDR
// Rusi2 = You2 ;
  77: LD_ADDR_EXP 5
  81: PUSH
  82: LD_EXP 4
  86: ST_TO_ADDR
// NoLosses := true ;
  87: LD_ADDR_EXP 7
  91: PUSH
  92: LD_INT 1
  94: ST_TO_ADDR
// belkovSave = false ;
  95: LD_ADDR_EXP 10
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// belkov_returns = false ;
 103: LD_ADDR_EXP 8
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// belkov_american_clash = false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// set_difficulty ;
 119: CALL 5161 0 0
// load_postav ;
 123: CALL 1449 0 0
// create_rusi_navic ;
 127: CALL 16615 0 0
// amici_breast ;
 131: CALL 3856 0 0
// create_amici_past ;
 135: CALL 4087 0 0
// create_amici_staveni_w ;
 139: CALL 4233 0 0
// create_utok_na_belkova ;
 143: CALL 4470 0 0
// create_vojaci_zacatek ;
 147: CALL 4729 0 0
// uklid_rusu ;
 151: CALL 13569 0 0
// InGameOn ;
 155: CALL_OW 8
// ChangeSideFog ( You , You2 ) ;
 159: LD_EXP 1
 163: PPUSH
 164: LD_EXP 4
 168: PPUSH
 169: CALL_OW 343
// InGameOn ;
 173: CALL_OW 8
// CenterOnXY ( 117 , 101 ) ;
 177: LD_INT 117
 179: PPUSH
 180: LD_INT 101
 182: PPUSH
 183: CALL_OW 84
// end ;
 187: END
// on UnitDestroyed ( un ) do begin if un = bur then
 188: LD_VAR 0 1
 192: PUSH
 193: LD_EXP 50
 197: EQUAL
 198: IFFALSE 207
// YouLost ( Burlak ) ;
 200: LD_STRING Burlak
 202: PPUSH
 203: CALL_OW 104
// enable ;
 207: ENABLE
// end ;
 208: PPOPN 1
 210: END
// on UnitGoesToRed ( un ) do begin if un = plat then
 211: LD_VAR 0 1
 215: PUSH
 216: LD_EXP 54
 220: EQUAL
 221: IFFALSE 227
// konec_mise_utok ;
 223: CALL 253 0 0
// end ;
 227: PPOPN 1
 229: END
// on HumanDestroyed ( un , side , nat , x , y , dir , sex , cl ) do begin if ( side = You ) then
 230: LD_VAR 0 2
 234: PUSH
 235: LD_EXP 1
 239: EQUAL
 240: IFFALSE 250
// NoLosses := false ;
 242: LD_ADDR_EXP 7
 246: PUSH
 247: LD_INT 0
 249: ST_TO_ADDR
// end ;
 250: PPOPN 8
 252: END
// export function konec_mise_utok ; begin
 253: LD_INT 0
 255: PPUSH
// YouLost ( SelfAttack ) ;
 256: LD_STRING SelfAttack
 258: PPUSH
 259: CALL_OW 104
// end ;
 263: LD_VAR 0 1
 267: RET
// export function konec_mise ; var i , pom , pom1 ; var zivi ; var drv ; var a , b , c , d , e , f ; var budovy ; var material ; var bw ; var all_lidi ; var medal1 , medal2 , medal3 ; var lidi ; begin
 268: LD_INT 0
 270: PPUSH
 271: PPUSH
 272: PPUSH
 273: PPUSH
 274: PPUSH
 275: PPUSH
 276: PPUSH
 277: PPUSH
 278: PPUSH
 279: PPUSH
 280: PPUSH
 281: PPUSH
 282: PPUSH
 283: PPUSH
 284: PPUSH
 285: PPUSH
 286: PPUSH
 287: PPUSH
 288: PPUSH
 289: PPUSH
// medal1 := false ;
 290: LD_ADDR_VAR 0 17
 294: PUSH
 295: LD_INT 0
 297: ST_TO_ADDR
// medal2 := false ;
 298: LD_ADDR_VAR 0 18
 302: PUSH
 303: LD_INT 0
 305: ST_TO_ADDR
// medal3 := false ;
 306: LD_ADDR_VAR 0 19
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// DisableExclamations ;
 314: CALL_OW 474
// gained_medals := [ ] ;
 318: LD_ADDR_OWVAR 61
 322: PUSH
 323: EMPTY
 324: ST_TO_ADDR
// missing_medals := [ ] ;
 325: LD_ADDR_OWVAR 62
 329: PUSH
 330: EMPTY
 331: ST_TO_ADDR
// zivi = 0 ;
 332: LD_ADDR_VAR 0 5
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// if NoLosses then
 340: LD_EXP 7
 344: IFFALSE 366
// begin medal1 := true ;
 346: LD_ADDR_VAR 0 17
 350: PUSH
 351: LD_INT 1
 353: ST_TO_ADDR
// AddMedal ( NoLosses , 1 ) ;
 354: LD_STRING NoLosses
 356: PPUSH
 357: LD_INT 1
 359: PPUSH
 360: CALL_OW 101
// end else
 364: GO 377
// AddMedal ( NoLosses , - 1 ) ;
 366: LD_STRING NoLosses
 368: PPUSH
 369: LD_INT 1
 371: NEG
 372: PPUSH
 373: CALL_OW 101
// if BelkovFreed then
 377: LD_EXP 16
 381: IFFALSE 472
// if IsOK ( bel ) then
 383: LD_EXP 52
 387: PPUSH
 388: CALL_OW 302
 392: IFFALSE 414
// begin medal2 := true ;
 394: LD_ADDR_VAR 0 18
 398: PUSH
 399: LD_INT 1
 401: ST_TO_ADDR
// AddMedal ( Belkov , 1 ) ;
 402: LD_STRING Belkov
 404: PPUSH
 405: LD_INT 1
 407: PPUSH
 408: CALL_OW 101
// end else
 412: GO 470
// if UnitFilter ( BelkovComp , [ f_OK ] ) + 0 > 0 then
 414: LD_EXP 17
 418: PPUSH
 419: LD_INT 50
 421: PUSH
 422: EMPTY
 423: LIST
 424: PPUSH
 425: CALL_OW 72
 429: PUSH
 430: LD_INT 0
 432: PLUS
 433: PUSH
 434: LD_INT 0
 436: GREATER
 437: IFFALSE 459
// begin medal2 := true ;
 439: LD_ADDR_VAR 0 18
 443: PUSH
 444: LD_INT 1
 446: ST_TO_ADDR
// AddMedal ( Belkov , 2 ) ;
 447: LD_STRING Belkov
 449: PPUSH
 450: LD_INT 2
 452: PPUSH
 453: CALL_OW 101
// end else
 457: GO 470
// AddMedal ( Belkov , - 3 ) else
 459: LD_STRING Belkov
 461: PPUSH
 462: LD_INT 3
 464: NEG
 465: PPUSH
 466: CALL_OW 101
 470: GO 512
// if objBelkov and belkovSave = false then
 472: LD_EXP 28
 476: PUSH
 477: LD_EXP 10
 481: PUSH
 482: LD_INT 0
 484: EQUAL
 485: AND
 486: IFFALSE 501
// AddMedal ( Belkov , - 2 ) else
 488: LD_STRING Belkov
 490: PPUSH
 491: LD_INT 2
 493: NEG
 494: PPUSH
 495: CALL_OW 101
 499: GO 512
// AddMedal ( Belkov , - 1 ) ;
 501: LD_STRING Belkov
 503: PPUSH
 504: LD_INT 1
 506: NEG
 507: PPUSH
 508: CALL_OW 101
// case stav_utoku of 1 :
 512: LD_EXP 59
 516: PUSH
 517: LD_INT 1
 519: DOUBLE
 520: EQUAL
 521: IFTRUE 525
 523: GO 546
 525: POP
// begin medal3 := true ;
 526: LD_ADDR_VAR 0 19
 530: PUSH
 531: LD_INT 1
 533: ST_TO_ADDR
// AddMedal ( Initiative , 1 ) ;
 534: LD_STRING Initiative
 536: PPUSH
 537: LD_INT 1
 539: PPUSH
 540: CALL_OW 101
// end ; 2 :
 544: GO 609
 546: LD_INT 2
 548: DOUBLE
 549: EQUAL
 550: IFTRUE 554
 552: GO 568
 554: POP
// AddMedal ( Initiative , - 2 ) ; 3 :
 555: LD_STRING Initiative
 557: PPUSH
 558: LD_INT 2
 560: NEG
 561: PPUSH
 562: CALL_OW 101
 566: GO 609
 568: LD_INT 3
 570: DOUBLE
 571: EQUAL
 572: IFTRUE 576
 574: GO 590
 576: POP
// AddMedal ( Initiative , - 1 ) ; else
 577: LD_STRING Initiative
 579: PPUSH
 580: LD_INT 1
 582: NEG
 583: PPUSH
 584: CALL_OW 101
 588: GO 609
 590: POP
// begin medal3 := true ;
 591: LD_ADDR_VAR 0 19
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// AddMedal ( Initiative , 1 ) ;
 599: LD_STRING Initiative
 601: PPUSH
 602: LD_INT 1
 604: PPUSH
 605: CALL_OW 101
// end ; end ; SA_EndMission ( 3 , 2 , medal1 , medal2 , medal3 ) ;
 609: LD_INT 3
 611: PPUSH
 612: LD_INT 2
 614: PPUSH
 615: LD_VAR 0 17
 619: PPUSH
 620: LD_VAR 0 18
 624: PPUSH
 625: LD_VAR 0 19
 629: PPUSH
 630: CALL 20212 0 5
// GiveMedals ( Main ) ;
 634: LD_STRING Main
 636: PPUSH
 637: CALL_OW 102
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
 641: LD_ADDR_VAR 0 3
 645: PUSH
 646: LD_INT 22
 648: PUSH
 649: LD_EXP 1
 653: PUSH
 654: EMPTY
 655: LIST
 656: LIST
 657: PUSH
 658: LD_INT 21
 660: PUSH
 661: LD_INT 1
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: PPUSH
 672: CALL_OW 69
 676: ST_TO_ADDR
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
 677: LD_ADDR_VAR 0 4
 681: PUSH
 682: LD_INT 22
 684: PUSH
 685: LD_EXP 1
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: PUSH
 694: LD_INT 21
 696: PUSH
 697: LD_INT 2
 699: PUSH
 700: EMPTY
 701: LIST
 702: LIST
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: PPUSH
 708: CALL_OW 69
 712: ST_TO_ADDR
// for i in pom1 do
 713: LD_ADDR_VAR 0 2
 717: PUSH
 718: LD_VAR 0 4
 722: PUSH
 723: FOR_IN
 724: IFFALSE 783
// if IsDrivenBy ( i ) then
 726: LD_VAR 0 2
 730: PPUSH
 731: CALL_OW 311
 735: IFFALSE 781
// begin drv = IsDrivenBy ( i ) ;
 737: LD_ADDR_VAR 0 6
 741: PUSH
 742: LD_VAR 0 2
 746: PPUSH
 747: CALL_OW 311
 751: ST_TO_ADDR
// if not ( drv in pom ) then
 752: LD_VAR 0 6
 756: PUSH
 757: LD_VAR 0 3
 761: IN
 762: NOT
 763: IFFALSE 781
// pom = pom ^ drv ;
 765: LD_ADDR_VAR 0 3
 769: PUSH
 770: LD_VAR 0 3
 774: PUSH
 775: LD_VAR 0 6
 779: ADD
 780: ST_TO_ADDR
// end ;
 781: GO 723
 783: POP
 784: POP
// all_lidi = pom ;
 785: LD_ADDR_VAR 0 16
 789: PUSH
 790: LD_VAR 0 3
 794: ST_TO_ADDR
// RewardPeople ( all_lidi ) ;
 795: LD_VAR 0 16
 799: PPUSH
 800: CALL_OW 43
// SaveCharacters ( bur , Burlak ) ;
 804: LD_EXP 50
 808: PPUSH
 809: LD_STRING Burlak
 811: PPUSH
 812: CALL_OW 38
// SaveCharacters ( plat , Platonov ) ;
 816: LD_EXP 54
 820: PPUSH
 821: LD_STRING Platonov
 823: PPUSH
 824: CALL_OW 38
// SaveCharacters ( kurin , Kurin ) ;
 828: LD_EXP 53
 832: PPUSH
 833: LD_STRING Kurin
 835: PPUSH
 836: CALL_OW 38
// SaveCharacters ( bel , Belkov ) ;
 840: LD_EXP 52
 844: PPUSH
 845: LD_STRING Belkov
 847: PPUSH
 848: CALL_OW 38
// SaveCharacters ( gny , Gnyevko ) ;
 852: LD_EXP 49
 856: PPUSH
 857: LD_STRING Gnyevko
 859: PPUSH
 860: CALL_OW 38
// SaveCharacters ( kov , Kovalyuk ) ;
 864: LD_EXP 51
 868: PPUSH
 869: LD_STRING Kovalyuk
 871: PPUSH
 872: CALL_OW 38
// all_lidi = pom diff [ bur , plat , kurin , bel , gny , kov ] ;
 876: LD_ADDR_VAR 0 16
 880: PUSH
 881: LD_VAR 0 3
 885: PUSH
 886: LD_EXP 50
 890: PUSH
 891: LD_EXP 54
 895: PUSH
 896: LD_EXP 53
 900: PUSH
 901: LD_EXP 52
 905: PUSH
 906: LD_EXP 49
 910: PUSH
 911: LD_EXP 51
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: DIFF
 924: ST_TO_ADDR
// all_lidi = all_lidi union rusi_survivors ;
 925: LD_ADDR_VAR 0 16
 929: PUSH
 930: LD_VAR 0 16
 934: PUSH
 935: LD_EXP 58
 939: UNION
 940: ST_TO_ADDR
// SaveCharacters ( all_lidi , survivors1 ) ;
 941: LD_VAR 0 16
 945: PPUSH
 946: LD_STRING survivors1
 948: PPUSH
 949: CALL_OW 38
// if BelkovFreed then
 953: LD_EXP 16
 957: IFFALSE 971
// SaveVariable ( 1 , belkov_saved ) else
 959: LD_INT 1
 961: PPUSH
 962: LD_STRING belkov_saved
 964: PPUSH
 965: CALL_OW 39
 969: GO 981
// SaveVariable ( 0 , belkov_saved ) ;
 971: LD_INT 0
 973: PPUSH
 974: LD_STRING belkov_saved
 976: PPUSH
 977: CALL_OW 39
// case stav_utoku of 0 :
 981: LD_EXP 59
 985: PUSH
 986: LD_INT 0
 988: DOUBLE
 989: EQUAL
 990: IFTRUE 994
 992: GO 1007
 994: POP
// SaveVariable ( 3 , utok_stav ) ; 1 :
 995: LD_INT 3
 997: PPUSH
 998: LD_STRING utok_stav
1000: PPUSH
1001: CALL_OW 39
1005: GO 1071
1007: LD_INT 1
1009: DOUBLE
1010: EQUAL
1011: IFTRUE 1015
1013: GO 1028
1015: POP
// SaveVariable ( 1 , utok_stav ) ; 2 :
1016: LD_INT 1
1018: PPUSH
1019: LD_STRING utok_stav
1021: PPUSH
1022: CALL_OW 39
1026: GO 1071
1028: LD_INT 2
1030: DOUBLE
1031: EQUAL
1032: IFTRUE 1036
1034: GO 1049
1036: POP
// SaveVariable ( 2 , utok_stav ) ; 3 :
1037: LD_INT 2
1039: PPUSH
1040: LD_STRING utok_stav
1042: PPUSH
1043: CALL_OW 39
1047: GO 1071
1049: LD_INT 3
1051: DOUBLE
1052: EQUAL
1053: IFTRUE 1057
1055: GO 1070
1057: POP
// SaveVariable ( 3 , utok_stav ) ; end ;
1058: LD_INT 3
1060: PPUSH
1061: LD_STRING utok_stav
1063: PPUSH
1064: CALL_OW 39
1068: GO 1071
1070: POP
// budovy = [ ] ;
1071: LD_ADDR_VAR 0 13
1075: PUSH
1076: EMPTY
1077: ST_TO_ADDR
// bw = 0 ;
1078: LD_ADDR_VAR 0 15
1082: PUSH
1083: LD_INT 0
1085: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_building ] ] ) ;
1086: LD_ADDR_VAR 0 3
1090: PUSH
1091: LD_INT 22
1093: PUSH
1094: LD_EXP 1
1098: PUSH
1099: EMPTY
1100: LIST
1101: LIST
1102: PUSH
1103: LD_INT 21
1105: PUSH
1106: LD_INT 3
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: PPUSH
1117: CALL_OW 69
1121: ST_TO_ADDR
// for i in pom do
1122: LD_ADDR_VAR 0 2
1126: PUSH
1127: LD_VAR 0 3
1131: PUSH
1132: FOR_IN
1133: IFFALSE 1289
// begin a = GetBType ( i ) ;
1135: LD_ADDR_VAR 0 7
1139: PUSH
1140: LD_VAR 0 2
1144: PPUSH
1145: CALL_OW 266
1149: ST_TO_ADDR
// b = GetBLevel ( i ) ;
1150: LD_ADDR_VAR 0 8
1154: PUSH
1155: LD_VAR 0 2
1159: PPUSH
1160: CALL_OW 267
1164: ST_TO_ADDR
// c = GetX ( i ) ;
1165: LD_ADDR_VAR 0 9
1169: PUSH
1170: LD_VAR 0 2
1174: PPUSH
1175: CALL_OW 250
1179: ST_TO_ADDR
// d = GetY ( i ) ;
1180: LD_ADDR_VAR 0 10
1184: PUSH
1185: LD_VAR 0 2
1189: PPUSH
1190: CALL_OW 251
1194: ST_TO_ADDR
// e = GetDir ( i ) ;
1195: LD_ADDR_VAR 0 11
1199: PUSH
1200: LD_VAR 0 2
1204: PPUSH
1205: CALL_OW 254
1209: ST_TO_ADDR
// f = GetNation ( i ) ;
1210: LD_ADDR_VAR 0 12
1214: PUSH
1215: LD_VAR 0 2
1219: PPUSH
1220: CALL_OW 248
1224: ST_TO_ADDR
// pom1 = [ a , b , c , d , e , f ] ;
1225: LD_ADDR_VAR 0 4
1229: PUSH
1230: LD_VAR 0 7
1234: PUSH
1235: LD_VAR 0 8
1239: PUSH
1240: LD_VAR 0 9
1244: PUSH
1245: LD_VAR 0 10
1249: PUSH
1250: LD_VAR 0 11
1254: PUSH
1255: LD_VAR 0 12
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: ST_TO_ADDR
// budovy = budovy ^ [ pom1 ] ;
1268: LD_ADDR_VAR 0 13
1272: PUSH
1273: LD_VAR 0 13
1277: PUSH
1278: LD_VAR 0 4
1282: PUSH
1283: EMPTY
1284: LIST
1285: ADD
1286: ST_TO_ADDR
// end ;
1287: GO 1132
1289: POP
1290: POP
// SaveVariable ( budovy , budovy ) ;
1291: LD_VAR 0 13
1295: PPUSH
1296: LD_STRING budovy
1298: PPUSH
1299: CALL_OW 39
// if isOK ( am_bre1 ) then
1303: LD_INT 30
1305: PPUSH
1306: CALL_OW 302
1310: IFFALSE 1326
// bw = bw + 1 ;
1312: LD_ADDR_VAR 0 15
1316: PUSH
1317: LD_VAR 0 15
1321: PUSH
1322: LD_INT 1
1324: PLUS
1325: ST_TO_ADDR
// if IsOK ( am_bre2 ) then
1326: LD_INT 31
1328: PPUSH
1329: CALL_OW 302
1333: IFFALSE 1349
// bw = bw + 2 ;
1335: LD_ADDR_VAR 0 15
1339: PUSH
1340: LD_VAR 0 15
1344: PUSH
1345: LD_INT 2
1347: PLUS
1348: ST_TO_ADDR
// SaveVariable ( bw , bw_east ) ;
1349: LD_VAR 0 15
1353: PPUSH
1354: LD_STRING bw_east
1356: PPUSH
1357: CALL_OW 39
// pom = [ ] ;
1361: LD_ADDR_VAR 0 3
1365: PUSH
1366: EMPTY
1367: ST_TO_ADDR
// if ISOK ( ABW1 ) then
1368: LD_EXP 76
1372: PPUSH
1373: CALL_OW 302
1377: IFFALSE 1395
// pom = pom ^ ABW1 ;
1379: LD_ADDR_VAR 0 3
1383: PUSH
1384: LD_VAR 0 3
1388: PUSH
1389: LD_EXP 76
1393: ADD
1394: ST_TO_ADDR
// if ISOK ( ABW2 ) then
1395: LD_EXP 77
1399: PPUSH
1400: CALL_OW 302
1404: IFFALSE 1422
// pom = pom ^ ABW2 ;
1406: LD_ADDR_VAR 0 3
1410: PUSH
1411: LD_VAR 0 3
1415: PUSH
1416: LD_EXP 77
1420: ADD
1421: ST_TO_ADDR
// SaveCharacters ( pom , amici_bw ) ;
1422: LD_VAR 0 3
1426: PPUSH
1427: LD_STRING amici_bw
1429: PPUSH
1430: CALL_OW 38
// YouWin ;
1434: CALL_OW 103
// EnableExclamations ;
1438: CALL_OW 473
// exit ;
1442: GO 1444
// end ;
1444: LD_VAR 0 1
1448: RET
// function load_postav ; begin
1449: LD_INT 0
1451: PPUSH
// kurin = NewCharacter ( kurin ) ;
1452: LD_ADDR_EXP 53
1456: PUSH
1457: LD_STRING kurin
1459: PPUSH
1460: CALL_OW 25
1464: ST_TO_ADDR
// if CheckCharacterSet ( Belkov ) then
1465: LD_STRING Belkov
1467: PPUSH
1468: CALL_OW 29
1472: IFFALSE 1484
// BELKOV_MRTVY = false else
1474: LD_ADDR_EXP 46
1478: PUSH
1479: LD_INT 0
1481: ST_TO_ADDR
1482: GO 1492
// BELKOV_MRTVY = true ;
1484: LD_ADDR_EXP 46
1488: PUSH
1489: LD_INT 1
1491: ST_TO_ADDR
// if BELKOV_MRTVY then
1492: LD_EXP 46
1496: IFFALSE 1513
// begin bel = NewCharacter ( Belkov2 ) ;
1498: LD_ADDR_EXP 52
1502: PUSH
1503: LD_STRING Belkov2
1505: PPUSH
1506: CALL_OW 25
1510: ST_TO_ADDR
// end else
1511: GO 1526
// bel = nacti_osobu ( Belkov ) ;
1513: LD_ADDR_EXP 52
1517: PUSH
1518: LD_STRING Belkov
1520: PPUSH
1521: CALL 5036 0 1
1525: ST_TO_ADDR
// kov = NewCharacter ( Kovalyuk ) ;
1526: LD_ADDR_EXP 51
1530: PUSH
1531: LD_STRING Kovalyuk
1533: PPUSH
1534: CALL_OW 25
1538: ST_TO_ADDR
// bur = nacti_osobu ( Burlak ) ;
1539: LD_ADDR_EXP 50
1543: PUSH
1544: LD_STRING Burlak
1546: PPUSH
1547: CALL 5036 0 1
1551: ST_TO_ADDR
// gny = nacti_osobu ( Gnyevko ) ;
1552: LD_ADDR_EXP 49
1556: PUSH
1557: LD_STRING Gnyevko
1559: PPUSH
1560: CALL 5036 0 1
1564: ST_TO_ADDR
// plat = NewCharacter ( Platonov ) ;
1565: LD_ADDR_EXP 54
1569: PUSH
1570: LD_STRING Platonov
1572: PPUSH
1573: CALL_OW 25
1577: ST_TO_ADDR
// DoNotAttack ( 1 , plat ) ;
1578: LD_INT 1
1580: PPUSH
1581: LD_EXP 54
1585: PPUSH
1586: CALL_OW 471
// DoNotAttack ( 4 , plat ) ;
1590: LD_INT 4
1592: PPUSH
1593: LD_EXP 54
1597: PPUSH
1598: CALL_OW 471
// end ; end_of_file
1602: LD_VAR 0 1
1606: RET
// export CarCount , WBW , EBW , BurlakComp , BurlakOut , BelkovFreed , BelkovComp , WBWSpotted , WBWAttacked , WBWDestroyed , WBWReported , EBWSpotted , EBWDestroyed , EBWReported , Charted , QAttAm , objAttack , objBelkov , objReturn , Reinforcements , InWest , BeriaVisited , CanReturn , playing , d19a , McCestaNaSever ; export function InitVars ; begin
1607: LD_INT 0
1609: PPUSH
// CarCount = 0 ;
1610: LD_ADDR_EXP 11
1614: PUSH
1615: LD_INT 0
1617: ST_TO_ADDR
// WBWSpotted := false ;
1618: LD_ADDR_EXP 18
1622: PUSH
1623: LD_INT 0
1625: ST_TO_ADDR
// WBWAttacked := false ;
1626: LD_ADDR_EXP 19
1630: PUSH
1631: LD_INT 0
1633: ST_TO_ADDR
// WBWDestroyed := false ;
1634: LD_ADDR_EXP 20
1638: PUSH
1639: LD_INT 0
1641: ST_TO_ADDR
// WBWReported := false ;
1642: LD_ADDR_EXP 21
1646: PUSH
1647: LD_INT 0
1649: ST_TO_ADDR
// EBWSpotted := false ;
1650: LD_ADDR_EXP 22
1654: PUSH
1655: LD_INT 0
1657: ST_TO_ADDR
// EBWDestroyed := false ;
1658: LD_ADDR_EXP 23
1662: PUSH
1663: LD_INT 0
1665: ST_TO_ADDR
// EBWReported := false ;
1666: LD_ADDR_EXP 24
1670: PUSH
1671: LD_INT 0
1673: ST_TO_ADDR
// BelkovFreed := false ;
1674: LD_ADDR_EXP 16
1678: PUSH
1679: LD_INT 0
1681: ST_TO_ADDR
// BelkovComp := [ ] ;
1682: LD_ADDR_EXP 17
1686: PUSH
1687: EMPTY
1688: ST_TO_ADDR
// QAttAm := false ;
1689: LD_ADDR_EXP 26
1693: PUSH
1694: LD_INT 0
1696: ST_TO_ADDR
// d19a := false ;
1697: LD_ADDR_EXP 35
1701: PUSH
1702: LD_INT 0
1704: ST_TO_ADDR
// objAttack := false ;
1705: LD_ADDR_EXP 27
1709: PUSH
1710: LD_INT 0
1712: ST_TO_ADDR
// Reinforcements := false ;
1713: LD_ADDR_EXP 30
1717: PUSH
1718: LD_INT 0
1720: ST_TO_ADDR
// Charted := false ;
1721: LD_ADDR_EXP 25
1725: PUSH
1726: LD_INT 0
1728: ST_TO_ADDR
// objBelkov := false ;
1729: LD_ADDR_EXP 28
1733: PUSH
1734: LD_INT 0
1736: ST_TO_ADDR
// objReturn := false ;
1737: LD_ADDR_EXP 29
1741: PUSH
1742: LD_INT 0
1744: ST_TO_ADDR
// BeriaVisited := false ;
1745: LD_ADDR_EXP 32
1749: PUSH
1750: LD_INT 0
1752: ST_TO_ADDR
// InWest := false ;
1753: LD_ADDR_EXP 31
1757: PUSH
1758: LD_INT 0
1760: ST_TO_ADDR
// playing := false ;
1761: LD_ADDR_EXP 34
1765: PUSH
1766: LD_INT 0
1768: ST_TO_ADDR
// EBW := [ Am_bre1 , Am_bre2 ] ;
1769: LD_ADDR_EXP 13
1773: PUSH
1774: LD_INT 30
1776: PUSH
1777: LD_INT 31
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: ST_TO_ADDR
// BurlakOut := [ ] ;
1784: LD_ADDR_EXP 15
1788: PUSH
1789: EMPTY
1790: ST_TO_ADDR
// CanReturn := false ;
1791: LD_ADDR_EXP 33
1795: PUSH
1796: LD_INT 0
1798: ST_TO_ADDR
// McCestaNaSever := 0 ;
1799: LD_ADDR_EXP 36
1803: PUSH
1804: LD_INT 0
1806: ST_TO_ADDR
// disable ( 99 ) ;
1807: LD_INT 99
1809: DISABLE_MARKED
// disable ( 100 ) ;
1810: LD_INT 100
1812: DISABLE_MARKED
// disable ( 101 ) ;
1813: LD_INT 101
1815: DISABLE_MARKED
// disable ( 300 ) ;
1816: LD_INT 300
1818: DISABLE_MARKED
// disable ( 301 ) ;
1819: LD_INT 301
1821: DISABLE_MARKED
// disable ( 302 ) ;
1822: LD_INT 302
1824: DISABLE_MARKED
// end ;
1825: LD_VAR 0 1
1829: RET
// function ListAttacks ( who , whom ) ; var i ; begin
1830: LD_INT 0
1832: PPUSH
1833: PPUSH
// result := false ;
1834: LD_ADDR_VAR 0 3
1838: PUSH
1839: LD_INT 0
1841: ST_TO_ADDR
// for i in who do
1842: LD_ADDR_VAR 0 4
1846: PUSH
1847: LD_VAR 0 1
1851: PUSH
1852: FOR_IN
1853: IFFALSE 1884
// begin if Attacks ( i ) in whom then
1855: LD_VAR 0 4
1859: PPUSH
1860: CALL_OW 320
1864: PUSH
1865: LD_VAR 0 2
1869: IN
1870: IFFALSE 1882
// begin result := true ;
1872: LD_ADDR_VAR 0 3
1876: PUSH
1877: LD_INT 1
1879: ST_TO_ADDR
// break end ;
1880: GO 1884
// end ;
1882: GO 1852
1884: POP
1885: POP
// end ;
1886: LD_VAR 0 3
1890: RET
// function ListSee ( side , who ) ; var i ; begin
1891: LD_INT 0
1893: PPUSH
1894: PPUSH
// result := false ;
1895: LD_ADDR_VAR 0 3
1899: PUSH
1900: LD_INT 0
1902: ST_TO_ADDR
// for i in who do
1903: LD_ADDR_VAR 0 4
1907: PUSH
1908: LD_VAR 0 2
1912: PUSH
1913: FOR_IN
1914: IFFALSE 1944
// begin if see ( side , i ) then
1916: LD_VAR 0 1
1920: PPUSH
1921: LD_VAR 0 4
1925: PPUSH
1926: CALL_OW 292
1930: IFFALSE 1942
// begin result := true ;
1932: LD_ADDR_VAR 0 3
1936: PUSH
1937: LD_INT 1
1939: ST_TO_ADDR
// break ;
1940: GO 1944
// end ; end ;
1942: GO 1913
1944: POP
1945: POP
// end ;
1946: LD_VAR 0 3
1950: RET
// function BurlakInArea ( area ) ; var i , pom , hum ; begin
1951: LD_INT 0
1953: PPUSH
1954: PPUSH
1955: PPUSH
1956: PPUSH
// hum := [ ] ;
1957: LD_ADDR_VAR 0 5
1961: PUSH
1962: EMPTY
1963: ST_TO_ADDR
// pom := FilterUnitsInArea ( area , [ [ f_side , you ] , [ f_ready ] ] ) ;
1964: LD_ADDR_VAR 0 4
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: LD_INT 22
1976: PUSH
1977: LD_EXP 1
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: PUSH
1986: LD_INT 53
1988: PUSH
1989: EMPTY
1990: LIST
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: PPUSH
1996: CALL_OW 70
2000: ST_TO_ADDR
// for i in pom do
2001: LD_ADDR_VAR 0 3
2005: PUSH
2006: LD_VAR 0 4
2010: PUSH
2011: FOR_IN
2012: IFFALSE 2098
// begin if GetType ( i ) = unit_human then
2014: LD_VAR 0 3
2018: PPUSH
2019: CALL_OW 247
2023: PUSH
2024: LD_INT 1
2026: EQUAL
2027: IFFALSE 2045
// begin hum := hum ^ i ;
2029: LD_ADDR_VAR 0 5
2033: PUSH
2034: LD_VAR 0 5
2038: PUSH
2039: LD_VAR 0 3
2043: ADD
2044: ST_TO_ADDR
// end ; if ( GetType ( i ) = unit_building ) or ( GetType ( i ) = unit_vehicle ) then
2045: LD_VAR 0 3
2049: PPUSH
2050: CALL_OW 247
2054: PUSH
2055: LD_INT 3
2057: EQUAL
2058: PUSH
2059: LD_VAR 0 3
2063: PPUSH
2064: CALL_OW 247
2068: PUSH
2069: LD_INT 2
2071: EQUAL
2072: OR
2073: IFFALSE 2096
// begin hum := hum union UnitsInside ( i ) ;
2075: LD_ADDR_VAR 0 5
2079: PUSH
2080: LD_VAR 0 5
2084: PUSH
2085: LD_VAR 0 3
2089: PPUSH
2090: CALL_OW 313
2094: UNION
2095: ST_TO_ADDR
// end ; end ;
2096: GO 2011
2098: POP
2099: POP
// if ( hum isect BurlakOut ) > 0 then
2100: LD_VAR 0 5
2104: PUSH
2105: LD_EXP 15
2109: ISECT
2110: PUSH
2111: LD_INT 0
2113: GREATER
2114: IFFALSE 2126
// result := true else
2116: LD_ADDR_VAR 0 2
2120: PUSH
2121: LD_INT 1
2123: ST_TO_ADDR
2124: GO 2134
// result := false ;
2126: LD_ADDR_VAR 0 2
2130: PUSH
2131: LD_INT 0
2133: ST_TO_ADDR
// end ;
2134: LD_VAR 0 2
2138: RET
// export function MissionProper ; begin
2139: LD_INT 0
2141: PPUSH
// enable ( 99 ) ;
2142: LD_INT 99
2144: ENABLE_MARKED
// enable ( 100 ) ;
2145: LD_INT 100
2147: ENABLE_MARKED
// CanReturn := false ;
2148: LD_ADDR_EXP 33
2152: PUSH
2153: LD_INT 0
2155: ST_TO_ADDR
// end ;
2156: LD_VAR 0 1
2160: RET
// function ShouldReturn ; begin
2161: LD_INT 0
2163: PPUSH
// if Charted and ( BelkovFreed or ( not objBelkov ) ) and ( WBWDestroyed or ( not objAttack ) ) and ( not objReturn ) then
2164: LD_EXP 25
2168: PUSH
2169: LD_EXP 16
2173: PUSH
2174: LD_EXP 28
2178: NOT
2179: OR
2180: AND
2181: PUSH
2182: LD_EXP 20
2186: PUSH
2187: LD_EXP 27
2191: NOT
2192: OR
2193: AND
2194: PUSH
2195: LD_EXP 29
2199: NOT
2200: AND
2201: IFFALSE 2218
// begin ChangeMissionObjectives ( M10a ) ;
2203: LD_STRING M10a
2205: PPUSH
2206: CALL_OW 337
// objReturn := true ;
2210: LD_ADDR_EXP 29
2214: PUSH
2215: LD_INT 1
2217: ST_TO_ADDR
// end ; end ;
2218: LD_VAR 0 1
2222: RET
// on VehicleConstructed ( veh , fact ) do begin CarCount := CarCount + 1 ;
2223: LD_ADDR_EXP 11
2227: PUSH
2228: LD_EXP 11
2232: PUSH
2233: LD_INT 1
2235: PLUS
2236: ST_TO_ADDR
// if CarCount = 1 then
2237: LD_EXP 11
2241: PUSH
2242: LD_INT 1
2244: EQUAL
2245: IFFALSE 2250
// enable ( 300 ) ;
2247: LD_INT 300
2249: ENABLE_MARKED
// if CarCount = UnitFilter ( Rusi_enter , [ f_OK ] ) and not belkov_returns then
2250: LD_EXP 11
2254: PUSH
2255: LD_EXP 55
2259: PPUSH
2260: LD_INT 50
2262: PUSH
2263: EMPTY
2264: LIST
2265: PPUSH
2266: CALL_OW 72
2270: EQUAL
2271: PUSH
2272: LD_EXP 8
2276: NOT
2277: AND
2278: IFFALSE 2288
// belkov_returns = true ;
2280: LD_ADDR_EXP 8
2284: PUSH
2285: LD_INT 1
2287: ST_TO_ADDR
// if CarCount = UnitFilter ( Rusi_enter , [ f_OK ] ) + 1 and not belkov_american_clash then
2288: LD_EXP 11
2292: PUSH
2293: LD_EXP 55
2297: PPUSH
2298: LD_INT 50
2300: PUSH
2301: EMPTY
2302: LIST
2303: PPUSH
2304: CALL_OW 72
2308: PUSH
2309: LD_INT 1
2311: PLUS
2312: EQUAL
2313: PUSH
2314: LD_EXP 9
2318: NOT
2319: AND
2320: IFFALSE 2330
// belkov_american_clash = true ;
2322: LD_ADDR_EXP 9
2326: PUSH
2327: LD_INT 1
2329: ST_TO_ADDR
// end ;
2330: PPOPN 2
2332: END
// every 0 0$1 trigger belkov_american_clash do
2333: LD_EXP 9
2337: IFFALSE 2354
2339: GO 2341
2341: DISABLE
// begin rozhovor_ukonceni_m5 ;
2342: CALL 8850 0 0
// stav = 7 ;
2346: LD_ADDR_EXP 60
2350: PUSH
2351: LD_INT 7
2353: ST_TO_ADDR
// end ;
2354: END
// every 0 0$5 trigger ( ListSee ( you , WBW ) or ListAttacks ( WBW , BurlakOut ) ) and ( not WBWDestroyed ) do
2355: LD_EXP 1
2359: PPUSH
2360: LD_EXP 12
2364: PPUSH
2365: CALL 1891 0 2
2369: PUSH
2370: LD_EXP 12
2374: PPUSH
2375: LD_EXP 15
2379: PPUSH
2380: CALL 1830 0 2
2384: OR
2385: PUSH
2386: LD_EXP 20
2390: NOT
2391: AND
2392: IFFALSE 2646
2394: GO 2396
2396: DISABLE
// begin if BurlakInArea ( kopec ) then
2397: LD_INT 26
2399: PPUSH
2400: CALL 1951 0 1
2404: IFFALSE 2414
// begin InWest := true ;
2406: LD_ADDR_EXP 31
2410: PUSH
2411: LD_INT 1
2413: ST_TO_ADDR
// end ; if not WBWSpotted then
2414: LD_EXP 18
2418: NOT
2419: IFFALSE 2425
// begin play_dialog_15 ;
2421: CALL 11209 0 0
// end ; WBWSpotted := true ;
2425: LD_ADDR_EXP 18
2429: PUSH
2430: LD_INT 1
2432: ST_TO_ADDR
// if InWest and ( not QAttAm ) and ( not objAttack ) then
2433: LD_EXP 31
2437: PUSH
2438: LD_EXP 26
2442: NOT
2443: AND
2444: PUSH
2445: LD_EXP 27
2449: NOT
2450: AND
2451: IFFALSE 2570
// begin case query ( QAttackBw ) of 1 :
2453: LD_STRING QAttackBw
2455: PPUSH
2456: CALL_OW 97
2460: PUSH
2461: LD_INT 1
2463: DOUBLE
2464: EQUAL
2465: IFTRUE 2469
2467: GO 2484
2469: POP
// begin play_dialog_qwbw1 ;
2470: CALL 11414 0 0
// stav_utoku := 1 ;
2474: LD_ADDR_EXP 59
2478: PUSH
2479: LD_INT 1
2481: ST_TO_ADDR
// end ; 2 :
2482: GO 2543
2484: LD_INT 2
2486: DOUBLE
2487: EQUAL
2488: IFTRUE 2492
2490: GO 2523
2492: POP
// begin play_dialog_qwbw2 ;
2493: CALL 11501 0 0
// posily_go := true ;
2497: LD_ADDR_EXP 68
2501: PUSH
2502: LD_INT 1
2504: ST_TO_ADDR
// Reinforcements := true ;
2505: LD_ADDR_EXP 30
2509: PUSH
2510: LD_INT 1
2512: ST_TO_ADDR
// stav_utoku := 2 ;
2513: LD_ADDR_EXP 59
2517: PUSH
2518: LD_INT 2
2520: ST_TO_ADDR
// end ; 3 :
2521: GO 2543
2523: LD_INT 3
2525: DOUBLE
2526: EQUAL
2527: IFTRUE 2531
2529: GO 2542
2531: POP
// begin stav_utoku := 3 end ; end ;
2532: LD_ADDR_EXP 59
2536: PUSH
2537: LD_INT 3
2539: ST_TO_ADDR
2540: GO 2543
2542: POP
// ChangeMissionObjectives ( M7 ) ;
2543: LD_STRING M7
2545: PPUSH
2546: CALL_OW 337
// objAttack := true ;
2550: LD_ADDR_EXP 27
2554: PUSH
2555: LD_INT 1
2557: ST_TO_ADDR
// play_dialog_19 ;
2558: CALL 11588 0 0
// WBWAttacked := true ;
2562: LD_ADDR_EXP 19
2566: PUSH
2567: LD_INT 1
2569: ST_TO_ADDR
// end ; if ( not InWest ) and ListAttacks ( BurlakOut , WBW ) and ( not d19a ) then
2570: LD_EXP 31
2574: NOT
2575: PUSH
2576: LD_EXP 15
2580: PPUSH
2581: LD_EXP 12
2585: PPUSH
2586: CALL 1830 0 2
2590: AND
2591: PUSH
2592: LD_EXP 35
2596: NOT
2597: AND
2598: IFFALSE 2635
// begin wait ( 0 0$5 ) ;
2600: LD_INT 175
2602: PPUSH
2603: CALL_OW 67
// if ListAttacks ( BurlakOut , WBW ) then
2607: LD_EXP 15
2611: PPUSH
2612: LD_EXP 12
2616: PPUSH
2617: CALL 1830 0 2
2621: IFFALSE 2635
// begin play_dialog_19a ;
2623: CALL 11699 0 0
// d19a := true ;
2627: LD_ADDR_EXP 35
2631: PUSH
2632: LD_INT 1
2634: ST_TO_ADDR
// end ; end ; if ( not InWest ) then
2635: LD_EXP 31
2639: NOT
2640: IFFALSE 2645
// enable else
2642: ENABLE
2643: GO 2646
// disable ;
2645: DISABLE
// end ;
2646: END
// every 0 0$5 trigger FilterUnitsInArea ( Am_base , [ [ f_OK ] , [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) do var pom ;
2647: LD_INT 9
2649: PPUSH
2650: LD_INT 50
2652: PUSH
2653: EMPTY
2654: LIST
2655: PUSH
2656: LD_INT 22
2658: PUSH
2659: LD_EXP 2
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PUSH
2668: LD_INT 30
2670: PUSH
2671: LD_INT 31
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: LIST
2682: PPUSH
2683: CALL_OW 70
2687: IFFALSE 2822
2689: GO 2691
2691: DISABLE
2692: LD_INT 0
2694: PPUSH
// begin pom := FilterUnitsInArea ( Am_base , [ [ f_OK ] , [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) ;
2695: LD_ADDR_VAR 0 1
2699: PUSH
2700: LD_INT 9
2702: PPUSH
2703: LD_INT 50
2705: PUSH
2706: EMPTY
2707: LIST
2708: PUSH
2709: LD_INT 22
2711: PUSH
2712: LD_EXP 2
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: PUSH
2721: LD_INT 30
2723: PUSH
2724: LD_INT 31
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: PUSH
2731: EMPTY
2732: LIST
2733: LIST
2734: LIST
2735: PPUSH
2736: CALL_OW 70
2740: ST_TO_ADDR
// BWW_1 = pom [ 1 ] ;
2741: LD_ADDR_EXP 74
2745: PUSH
2746: LD_VAR 0 1
2750: PUSH
2751: LD_INT 1
2753: ARRAY
2754: ST_TO_ADDR
// enable ( 101 ) ;
2755: LD_INT 101
2757: ENABLE_MARKED
// WBW := [ BWW_1 ] ;
2758: LD_ADDR_EXP 12
2762: PUSH
2763: LD_EXP 74
2767: PUSH
2768: EMPTY
2769: LIST
2770: ST_TO_ADDR
// if pom + 0 > 1 then
2771: LD_VAR 0 1
2775: PUSH
2776: LD_INT 0
2778: PLUS
2779: PUSH
2780: LD_INT 1
2782: GREATER
2783: IFFALSE 2821
// begin BWW_2 := pom [ 2 ] ;
2785: LD_ADDR_EXP 75
2789: PUSH
2790: LD_VAR 0 1
2794: PUSH
2795: LD_INT 2
2797: ARRAY
2798: ST_TO_ADDR
// WBW := WBW ^ [ BWW_2 ] ;
2799: LD_ADDR_EXP 12
2803: PUSH
2804: LD_EXP 12
2808: PUSH
2809: LD_EXP 75
2813: PUSH
2814: EMPTY
2815: LIST
2816: ADD
2817: ST_TO_ADDR
// disable ;
2818: DISABLE
// end else
2819: GO 2822
// begin enable ;
2821: ENABLE
// end ; end ;
2822: PPOPN 1
2824: END
// every 0 0$3 trigger ( UnitFilter ( WBW , [ [ f_OK ] , [ f_side , amici ] ] ) = 0 ) marked 101 do
2825: LD_EXP 12
2829: PPUSH
2830: LD_INT 50
2832: PUSH
2833: EMPTY
2834: LIST
2835: PUSH
2836: LD_INT 22
2838: PUSH
2839: LD_EXP 2
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PPUSH
2852: CALL_OW 72
2856: PUSH
2857: LD_INT 0
2859: EQUAL
2860: IFFALSE 2895
2862: GO 2864
2864: DISABLE
// begin play_dialog_20 ;
2865: CALL 11931 0 0
// WBWDestroyed := true ;
2869: LD_ADDR_EXP 20
2873: PUSH
2874: LD_INT 1
2876: ST_TO_ADDR
// if objAttack then
2877: LD_EXP 27
2881: IFFALSE 2890
// ChangeMissionObjectives ( M8 ) ;
2883: LD_STRING M8
2885: PPUSH
2886: CALL_OW 337
// ShouldReturn ;
2890: CALL 2161 0 0
// disable end ;
2894: DISABLE
2895: END
// every 0 0$5 trigger ListSee ( you , EBW ) or ListAttacks ( EBW , BurlakOut ) do var pom ;
2896: LD_EXP 1
2900: PPUSH
2901: LD_EXP 13
2905: PPUSH
2906: CALL 1891 0 2
2910: PUSH
2911: LD_EXP 13
2915: PPUSH
2916: LD_EXP 15
2920: PPUSH
2921: CALL 1830 0 2
2925: OR
2926: IFFALSE 2947
2928: GO 2930
2930: DISABLE
2931: LD_INT 0
2933: PPUSH
// begin play_dialog_16 ;
2934: CALL 11786 0 0
// EBWSpotted := true ;
2938: LD_ADDR_EXP 22
2942: PUSH
2943: LD_INT 1
2945: ST_TO_ADDR
// disable ;
2946: DISABLE
// end ;
2947: PPOPN 1
2949: END
// every 0 0$3 trigger ( UnitFilter ( EBW , [ f_OK ] ) = 0 ) do
2950: LD_EXP 13
2954: PPUSH
2955: LD_INT 50
2957: PUSH
2958: EMPTY
2959: LIST
2960: PPUSH
2961: CALL_OW 72
2965: PUSH
2966: LD_INT 0
2968: EQUAL
2969: IFFALSE 2987
2971: GO 2973
2973: DISABLE
// begin play_dialog_20a ;
2974: CALL 11994 0 0
// EBWDestroyed := true ;
2978: LD_ADDR_EXP 23
2982: PUSH
2983: LD_INT 1
2985: ST_TO_ADDR
// disable end ;
2986: DISABLE
2987: END
// every 0 0$5 trigger ( BurlakInArea ( Test4 ) ) do
2988: LD_INT 12
2990: PPUSH
2991: CALL 1951 0 1
2995: IFFALSE 3093
2997: GO 2999
2999: DISABLE
// begin if ( not objBelkov ) and ( IsOK ( Bel ) ) then
3000: LD_EXP 28
3004: NOT
3005: PUSH
3006: LD_EXP 52
3010: PPUSH
3011: CALL_OW 302
3015: AND
3016: IFFALSE 3084
// begin objBelkov := true ;
3018: LD_ADDR_EXP 28
3022: PUSH
3023: LD_INT 1
3025: ST_TO_ADDR
// case query ( QAttackAm ) of 1 :
3026: LD_STRING QAttackAm
3028: PPUSH
3029: CALL_OW 97
3033: PUSH
3034: LD_INT 1
3036: DOUBLE
3037: EQUAL
3038: IFTRUE 3042
3040: GO 3049
3042: POP
// play_dialog_qAtAm1 ; 2 :
3043: CALL 12057 0 0
3047: GO 3073
3049: LD_INT 2
3051: DOUBLE
3052: EQUAL
3053: IFTRUE 3057
3055: GO 3072
3057: POP
// begin play_dialog_qAtAm2 ;
3058: CALL 12120 0 0
// posily_go = true ;
3062: LD_ADDR_EXP 68
3066: PUSH
3067: LD_INT 1
3069: ST_TO_ADDR
// end ; end ;
3070: GO 3073
3072: POP
// ChangeMissionObjectives ( M9 ) ;
3073: LD_STRING M9
3075: PPUSH
3076: CALL_OW 337
// play_dialog_23 ;
3080: CALL 12236 0 0
// end ; QAttAm := true ;
3084: LD_ADDR_EXP 26
3088: PUSH
3089: LD_INT 1
3091: ST_TO_ADDR
// disable end ;
3092: DISABLE
3093: END
// every 0 0$5 trigger ( BurlakInArea ( belkov_kop ) ) do var i ;
3094: LD_INT 25
3096: PPUSH
3097: CALL 1951 0 1
3101: IFFALSE 3250
3103: GO 3105
3105: DISABLE
3106: LD_INT 0
3108: PPUSH
// begin if ( not objBelkov ) then
3109: LD_EXP 28
3113: NOT
3114: IFFALSE 3118
// exit ;
3116: GO 3250
// play_dialog_24 ;
3118: CALL 12310 0 0
// BelkovFreed := true ;
3122: LD_ADDR_EXP 16
3126: PUSH
3127: LD_INT 1
3129: ST_TO_ADDR
// if objBelkov then
3130: LD_EXP 28
3134: IFFALSE 3143
// ChangeMissionObjectives ( M9a ) ;
3136: LD_STRING M9a
3138: PPUSH
3139: CALL_OW 337
// if ( WBWSpotted ) and ( not WBWDestroyed ) and ( not objAttack ) then
3143: LD_EXP 18
3147: PUSH
3148: LD_EXP 20
3152: NOT
3153: AND
3154: PUSH
3155: LD_EXP 27
3159: NOT
3160: AND
3161: IFFALSE 3186
// begin ChangeMissionObjectives ( M7 ) ;
3163: LD_STRING M7
3165: PPUSH
3166: CALL_OW 337
// objAttack := true ;
3170: LD_ADDR_EXP 27
3174: PUSH
3175: LD_INT 1
3177: ST_TO_ADDR
// stav_utoku := 1 ;
3178: LD_ADDR_EXP 59
3182: PUSH
3183: LD_INT 1
3185: ST_TO_ADDR
// end ; BelkovComp = FilterUnitsInArea ( Belkov_kop_prebarvi , [ [ f_side , You2 ] ] ) ;
3186: LD_ADDR_EXP 17
3190: PUSH
3191: LD_INT 31
3193: PPUSH
3194: LD_INT 22
3196: PUSH
3197: LD_EXP 4
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PUSH
3206: EMPTY
3207: LIST
3208: PPUSH
3209: CALL_OW 70
3213: ST_TO_ADDR
// for i in BelkovComp do
3214: LD_ADDR_VAR 0 1
3218: PUSH
3219: LD_EXP 17
3223: PUSH
3224: FOR_IN
3225: IFFALSE 3243
// SetSide ( i , You ) ;
3227: LD_VAR 0 1
3231: PPUSH
3232: LD_EXP 1
3236: PPUSH
3237: CALL_OW 235
3241: GO 3224
3243: POP
3244: POP
// ShouldReturn ;
3245: CALL 2161 0 0
// disable end ;
3249: DISABLE
3250: PPOPN 1
3252: END
// every 0 0$10 do var pom ;
3253: GO 3255
3255: DISABLE
3256: LD_INT 0
3258: PPUSH
// begin pom = SeeGreyArea ( You , Narea ) ;
3259: LD_ADDR_VAR 0 1
3263: PUSH
3264: LD_EXP 1
3268: PPUSH
3269: LD_INT 24
3271: PPUSH
3272: CALL_OW 452
3276: ST_TO_ADDR
// if pom >= procento_odkrytych_pro_vyhru [ difficulty ] then
3277: LD_VAR 0 1
3281: PUSH
3282: LD_EXP 42
3286: PUSH
3287: LD_OWVAR 67
3291: ARRAY
3292: GREATEREQUAL
3293: IFFALSE 3316
// begin ChangeMissionObjectives ( M10 ) ;
3295: LD_STRING M10
3297: PPUSH
3298: CALL_OW 337
// Charted := true ;
3302: LD_ADDR_EXP 25
3306: PUSH
3307: LD_INT 1
3309: ST_TO_ADDR
// ShouldReturn ;
3310: CALL 2161 0 0
// end else
3314: GO 3317
// enable ;
3316: ENABLE
// end ;
3317: PPOPN 1
3319: END
// every 0 0$5 trigger ( not BurlakInArea ( RU2_base ) ) marked 99 do var i ;
3320: LD_INT 1
3322: PPUSH
3323: CALL 1951 0 1
3327: NOT
3328: IFFALSE 3448
3330: GO 3332
3332: DISABLE
3333: LD_INT 0
3335: PPUSH
// begin BurlakComp := UnitFilter ( BurlakComp , [ f_alive ] ) ;
3336: LD_ADDR_EXP 14
3340: PUSH
3341: LD_EXP 14
3345: PPUSH
3346: LD_INT 51
3348: PUSH
3349: EMPTY
3350: LIST
3351: PPUSH
3352: CALL_OW 72
3356: ST_TO_ADDR
// BurlakOut := [ ] ;
3357: LD_ADDR_EXP 15
3361: PUSH
3362: EMPTY
3363: ST_TO_ADDR
// for i in BurlakComp do
3364: LD_ADDR_VAR 0 1
3368: PUSH
3369: LD_EXP 14
3373: PUSH
3374: FOR_IN
3375: IFFALSE 3413
// begin if ( not IsInArea ( i , Ru2_base ) ) then
3377: LD_VAR 0 1
3381: PPUSH
3382: LD_INT 1
3384: PPUSH
3385: CALL_OW 308
3389: NOT
3390: IFFALSE 3411
// BurlakOut := BurlakOut ^ [ i ] ;
3392: LD_ADDR_EXP 15
3396: PUSH
3397: LD_EXP 15
3401: PUSH
3402: LD_VAR 0 1
3406: PUSH
3407: EMPTY
3408: LIST
3409: ADD
3410: ST_TO_ADDR
// end ;
3411: GO 3374
3413: POP
3414: POP
// if BurlakOut + 0 > 0 then
3415: LD_EXP 15
3419: PUSH
3420: LD_INT 0
3422: PLUS
3423: PUSH
3424: LD_INT 0
3426: GREATER
3427: IFFALSE 3439
// CanReturn := true else
3429: LD_ADDR_EXP 33
3433: PUSH
3434: LD_INT 1
3436: ST_TO_ADDR
3437: GO 3447
// CanReturn := false ;
3439: LD_ADDR_EXP 33
3443: PUSH
3444: LD_INT 0
3446: ST_TO_ADDR
// enable ;
3447: ENABLE
// end ;
3448: PPOPN 1
3450: END
// every 0 0$5 trigger ( BurlakInArea ( RU2_base ) ) marked 100 do var i ;
3451: LD_INT 1
3453: PPUSH
3454: CALL 1951 0 1
3458: IFFALSE 3795
3460: GO 3462
3462: DISABLE
3463: LD_INT 0
3465: PPUSH
// begin enable ;
3466: ENABLE
// if objReturn then
3467: LD_EXP 29
3471: IFFALSE 3524
// begin for i in BurlakComp do
3473: LD_ADDR_VAR 0 1
3477: PUSH
3478: LD_EXP 14
3482: PUSH
3483: FOR_IN
3484: IFFALSE 3507
// begin if not IsInArea ( i , RU2_base ) then
3486: LD_VAR 0 1
3490: PPUSH
3491: LD_INT 1
3493: PPUSH
3494: CALL_OW 308
3498: NOT
3499: IFFALSE 3505
// exit ;
3501: POP
3502: POP
3503: GO 3795
// end ;
3505: GO 3483
3507: POP
3508: POP
// ChangeMissionObjectives ( M10b ) ;
3509: LD_STRING M10b
3511: PPUSH
3512: CALL_OW 337
// objReturn := false ;
3516: LD_ADDR_EXP 29
3520: PUSH
3521: LD_INT 0
3523: ST_TO_ADDR
// end ; if Charted and WBWDestroyed and ( BelkovFreed or not ( IsOK ( Bel ) ) ) then
3524: LD_EXP 25
3528: PUSH
3529: LD_EXP 20
3533: AND
3534: PUSH
3535: LD_EXP 16
3539: PUSH
3540: LD_EXP 52
3544: PPUSH
3545: CALL_OW 302
3549: NOT
3550: OR
3551: AND
3552: IFFALSE 3567
// begin konec_mise ;
3554: CALL 268 0 0
// wait ( 0 0$1 ) ;
3558: LD_INT 35
3560: PPUSH
3561: CALL_OW 67
// exit ;
3565: GO 3795
// end ; if Charted and WBWDestroyed and ( not objBelkov ) and ( IsOK ( Bel ) ) then
3567: LD_EXP 25
3571: PUSH
3572: LD_EXP 20
3576: AND
3577: PUSH
3578: LD_EXP 28
3582: NOT
3583: AND
3584: PUSH
3585: LD_EXP 52
3589: PPUSH
3590: CALL_OW 302
3594: AND
3595: IFFALSE 3649
// begin case Query ( QContMission ) of 1 :
3597: LD_STRING QContMission
3599: PPUSH
3600: CALL_OW 97
3604: PUSH
3605: LD_INT 1
3607: DOUBLE
3608: EQUAL
3609: IFTRUE 3613
3611: GO 3620
3613: POP
// konec_mise ; 2 :
3614: CALL 268 0 0
3618: GO 3647
3620: LD_INT 2
3622: DOUBLE
3623: EQUAL
3624: IFTRUE 3628
3626: GO 3646
3628: POP
// begin ChangeMissionObjectives ( M9 ) ;
3629: LD_STRING M9
3631: PPUSH
3632: CALL_OW 337
// objBelkov := true ;
3636: LD_ADDR_EXP 28
3640: PUSH
3641: LD_INT 1
3643: ST_TO_ADDR
// end ; end ;
3644: GO 3647
3646: POP
// exit ;
3647: GO 3795
// end ; if not CanReturn then
3649: LD_EXP 33
3653: NOT
3654: IFFALSE 3658
// exit ;
3656: GO 3795
// CanReturn := false ;
3658: LD_ADDR_EXP 33
3662: PUSH
3663: LD_INT 0
3665: ST_TO_ADDR
// if ( not WBWDestroyed ) or ( not EBWDestroyed ) then
3666: LD_EXP 20
3670: NOT
3671: PUSH
3672: LD_EXP 23
3676: NOT
3677: OR
3678: IFFALSE 3697
// begin if not BeriaVisited then
3680: LD_EXP 32
3684: NOT
3685: IFFALSE 3693
// play_dialog_25 else
3687: CALL 12506 0 0
3691: GO 3697
// play_dialog_25a ;
3693: CALL 12769 0 0
// end ; BeriaVisited := true ;
3697: LD_ADDR_EXP 32
3701: PUSH
3702: LD_INT 1
3704: ST_TO_ADDR
// if WBWSpotted and ( not WBWDestroyed ) and ( not Reinforcements ) then
3705: LD_EXP 18
3709: PUSH
3710: LD_EXP 20
3714: NOT
3715: AND
3716: PUSH
3717: LD_EXP 30
3721: NOT
3722: AND
3723: IFFALSE 3777
// begin play_dialog_25b ;
3725: CALL 12956 0 0
// posily_go := true ;
3729: LD_ADDR_EXP 68
3733: PUSH
3734: LD_INT 1
3736: ST_TO_ADDR
// Reinforcements := true ;
3737: LD_ADDR_EXP 30
3741: PUSH
3742: LD_INT 1
3744: ST_TO_ADDR
// if ( not objAttack ) then
3745: LD_EXP 27
3749: NOT
3750: IFFALSE 3775
// begin ChangeMissionObjectives ( M7 ) ;
3752: LD_STRING M7
3754: PPUSH
3755: CALL_OW 337
// objAttack := true ;
3759: LD_ADDR_EXP 27
3763: PUSH
3764: LD_INT 1
3766: ST_TO_ADDR
// stav_utoku := 1 ;
3767: LD_ADDR_EXP 59
3771: PUSH
3772: LD_INT 1
3774: ST_TO_ADDR
// end ; exit ;
3775: GO 3795
// end ; if ( not Charted ) or ( not WBWSpotted ) then
3777: LD_EXP 25
3781: NOT
3782: PUSH
3783: LD_EXP 18
3787: NOT
3788: OR
3789: IFFALSE 3795
// begin play_dialog_25c ;
3791: CALL 13007 0 0
// end ; end ; end_of_file
3795: PPOPN 1
3797: END
// export AMICI_PAST_LIST ; export AMICI_STAVENI_BASE_LIST ; export AMICI_UTOK_BELKOV_LIST ; var ah , av ; export function get_human ( sex , clas , level , name ) ; var pom ; begin
3798: LD_INT 0
3800: PPUSH
3801: PPUSH
// PrepareHuman ( sex , clas , level ) ;
3802: LD_VAR 0 1
3806: PPUSH
3807: LD_VAR 0 2
3811: PPUSH
3812: LD_VAR 0 3
3816: PPUSH
3817: CALL_OW 380
// hc_name := name ;
3821: LD_ADDR_OWVAR 26
3825: PUSH
3826: LD_VAR 0 4
3830: ST_TO_ADDR
// pom = CreateHuman ;
3831: LD_ADDR_VAR 0 6
3835: PUSH
3836: CALL_OW 44
3840: ST_TO_ADDR
// result := pom ;
3841: LD_ADDR_VAR 0 5
3845: PUSH
3846: LD_VAR 0 6
3850: ST_TO_ADDR
// end ;
3851: LD_VAR 0 5
3855: RET
// export function amici_breast ; begin
3856: LD_INT 0
3858: PPUSH
// uc_nation = nation_american ;
3859: LD_ADDR_OWVAR 21
3863: PUSH
3864: LD_INT 1
3866: ST_TO_ADDR
// uc_side = Amici ;
3867: LD_ADDR_OWVAR 20
3871: PUSH
3872: LD_EXP 2
3876: ST_TO_ADDR
// ah = get_human ( sex_male , class_soldier , LEVELY_AMICI [ difficulty ] , David Love ) ;
3877: LD_ADDR_LOC 1
3881: PUSH
3882: LD_INT 1
3884: PPUSH
3885: LD_INT 1
3887: PPUSH
3888: LD_EXP 40
3892: PUSH
3893: LD_OWVAR 67
3897: ARRAY
3898: PPUSH
3899: LD_STRING David Love
3901: PPUSH
3902: CALL 3798 0 4
3906: ST_TO_ADDR
// PlaceUnitXY ( ah , 107 , 63 , false ) ;
3907: LD_LOC 1
3911: PPUSH
3912: LD_INT 107
3914: PPUSH
3915: LD_INT 63
3917: PPUSH
3918: LD_INT 0
3920: PPUSH
3921: CALL_OW 48
// ComMoveXY ( ah , 92 , 56 ) ;
3925: LD_LOC 1
3929: PPUSH
3930: LD_INT 92
3932: PPUSH
3933: LD_INT 56
3935: PPUSH
3936: CALL_OW 111
// ABW1 = ah ;
3940: LD_ADDR_EXP 76
3944: PUSH
3945: LD_LOC 1
3949: ST_TO_ADDR
// AddComEnterUnit ( ah , am_bre1 ) ;
3950: LD_LOC 1
3954: PPUSH
3955: LD_INT 30
3957: PPUSH
3958: CALL_OW 180
// ah = get_human ( sex_male , class_soldier , LEVELY_AMICI [ difficulty ] , John Kraninger ) ;
3962: LD_ADDR_LOC 1
3966: PUSH
3967: LD_INT 1
3969: PPUSH
3970: LD_INT 1
3972: PPUSH
3973: LD_EXP 40
3977: PUSH
3978: LD_OWVAR 67
3982: ARRAY
3983: PPUSH
3984: LD_STRING John Kraninger
3986: PPUSH
3987: CALL 3798 0 4
3991: ST_TO_ADDR
// PlaceUnitXY ( ah , 106 , 65 , false ) ;
3992: LD_LOC 1
3996: PPUSH
3997: LD_INT 106
3999: PPUSH
4000: LD_INT 65
4002: PPUSH
4003: LD_INT 0
4005: PPUSH
4006: CALL_OW 48
// ComMoveXY ( ah , 95 , 61 ) ;
4010: LD_LOC 1
4014: PPUSH
4015: LD_INT 95
4017: PPUSH
4018: LD_INT 61
4020: PPUSH
4021: CALL_OW 111
// AddComEnterUnit ( ah , am_bre2 ) ;
4025: LD_LOC 1
4029: PPUSH
4030: LD_INT 31
4032: PPUSH
4033: CALL_OW 180
// ABW2 = ah ;
4037: LD_ADDR_EXP 77
4041: PUSH
4042: LD_LOC 1
4046: ST_TO_ADDR
// end ;
4047: LD_VAR 0 1
4051: RET
// function get_sex ; begin
4052: LD_INT 0
4054: PPUSH
// if Prob ( 20 ) then
4055: LD_INT 20
4057: PPUSH
4058: CALL_OW 13
4062: IFFALSE 4074
// result = sex_female else
4064: LD_ADDR_VAR 0 1
4068: PUSH
4069: LD_INT 2
4071: ST_TO_ADDR
4072: GO 4082
// result = sex_male ;
4074: LD_ADDR_VAR 0 1
4078: PUSH
4079: LD_INT 1
4081: ST_TO_ADDR
// end ;
4082: LD_VAR 0 1
4086: RET
// export function create_amici_past ; var i ; var a ; var p_vojaku ; begin
4087: LD_INT 0
4089: PPUSH
4090: PPUSH
4091: PPUSH
4092: PPUSH
// a = [ ] ;
4093: LD_ADDR_VAR 0 3
4097: PUSH
4098: EMPTY
4099: ST_TO_ADDR
// p_vojaku = amici_past_pocet [ difficulty ] ;
4100: LD_ADDR_VAR 0 4
4104: PUSH
4105: LD_EXP 41
4109: PUSH
4110: LD_OWVAR 67
4114: ARRAY
4115: ST_TO_ADDR
// a = get_human ( sex_male , class_soldier , LEVELY_AMICI [ difficulty ] + 1 ,  ) ;
4116: LD_ADDR_VAR 0 3
4120: PUSH
4121: LD_INT 1
4123: PPUSH
4124: LD_INT 1
4126: PPUSH
4127: LD_EXP 40
4131: PUSH
4132: LD_OWVAR 67
4136: ARRAY
4137: PUSH
4138: LD_INT 1
4140: PLUS
4141: PPUSH
4142: LD_STRING 
4144: PPUSH
4145: CALL 3798 0 4
4149: ST_TO_ADDR
// for i := 1 to p_vojaku - 1 do
4150: LD_ADDR_VAR 0 2
4154: PUSH
4155: DOUBLE
4156: LD_INT 1
4158: DEC
4159: ST_TO_ADDR
4160: LD_VAR 0 4
4164: PUSH
4165: LD_INT 1
4167: MINUS
4168: PUSH
4169: FOR_TO
4170: IFFALSE 4216
// a = a ^ get_human ( get_sex , class_soldier , LEVELY_AMICI [ difficulty ] + 1 ,  ) ;
4172: LD_ADDR_VAR 0 3
4176: PUSH
4177: LD_VAR 0 3
4181: PUSH
4182: CALL 4052 0 0
4186: PPUSH
4187: LD_INT 1
4189: PPUSH
4190: LD_EXP 40
4194: PUSH
4195: LD_OWVAR 67
4199: ARRAY
4200: PUSH
4201: LD_INT 1
4203: PLUS
4204: PPUSH
4205: LD_STRING 
4207: PPUSH
4208: CALL 3798 0 4
4212: ADD
4213: ST_TO_ADDR
4214: GO 4169
4216: POP
4217: POP
// AMICI_PAST_LIST = a ;
4218: LD_ADDR_EXP 37
4222: PUSH
4223: LD_VAR 0 3
4227: ST_TO_ADDR
// end ;
4228: LD_VAR 0 1
4232: RET
// export function create_amici_staveni_w ; var a ; begin
4233: LD_INT 0
4235: PPUSH
4236: PPUSH
// a = get_human ( get_sex , class_soldier , LEVELY_AMICI [ difficulty ] ,  ) ;
4237: LD_ADDR_VAR 0 2
4241: PUSH
4242: CALL 4052 0 0
4246: PPUSH
4247: LD_INT 1
4249: PPUSH
4250: LD_EXP 40
4254: PUSH
4255: LD_OWVAR 67
4259: ARRAY
4260: PPUSH
4261: LD_STRING 
4263: PPUSH
4264: CALL 3798 0 4
4268: ST_TO_ADDR
// a = a ^ get_human ( get_sex , class_soldier , LEVELY_AMICI [ difficulty ] ,  ) ;
4269: LD_ADDR_VAR 0 2
4273: PUSH
4274: LD_VAR 0 2
4278: PUSH
4279: CALL 4052 0 0
4283: PPUSH
4284: LD_INT 1
4286: PPUSH
4287: LD_EXP 40
4291: PUSH
4292: LD_OWVAR 67
4296: ARRAY
4297: PPUSH
4298: LD_STRING 
4300: PPUSH
4301: CALL 3798 0 4
4305: ADD
4306: ST_TO_ADDR
// a = a ^ get_human ( get_sex , class_engineer , LEVELY_AMICI [ difficulty ] ,  ) ;
4307: LD_ADDR_VAR 0 2
4311: PUSH
4312: LD_VAR 0 2
4316: PUSH
4317: CALL 4052 0 0
4321: PPUSH
4322: LD_INT 2
4324: PPUSH
4325: LD_EXP 40
4329: PUSH
4330: LD_OWVAR 67
4334: ARRAY
4335: PPUSH
4336: LD_STRING 
4338: PPUSH
4339: CALL 3798 0 4
4343: ADD
4344: ST_TO_ADDR
// a = a ^ get_human ( get_sex , class_engineer , LEVELY_AMICI [ difficulty ] ,  ) ;
4345: LD_ADDR_VAR 0 2
4349: PUSH
4350: LD_VAR 0 2
4354: PUSH
4355: CALL 4052 0 0
4359: PPUSH
4360: LD_INT 2
4362: PPUSH
4363: LD_EXP 40
4367: PUSH
4368: LD_OWVAR 67
4372: ARRAY
4373: PPUSH
4374: LD_STRING 
4376: PPUSH
4377: CALL 3798 0 4
4381: ADD
4382: ST_TO_ADDR
// AMICI_STAVENI_BASE_LIST = a ;
4383: LD_ADDR_EXP 38
4387: PUSH
4388: LD_VAR 0 2
4392: ST_TO_ADDR
// end ;
4393: LD_VAR 0 1
4397: RET
// export function vyber_cloveka ( list , cla ) ; var i ; var a ; begin
4398: LD_INT 0
4400: PPUSH
4401: PPUSH
4402: PPUSH
// a = 0 ;
4403: LD_ADDR_VAR 0 5
4407: PUSH
4408: LD_INT 0
4410: ST_TO_ADDR
// for i in list do
4411: LD_ADDR_VAR 0 4
4415: PUSH
4416: LD_VAR 0 1
4420: PUSH
4421: FOR_IN
4422: IFFALSE 4453
// if GetClass ( i ) = cla then
4424: LD_VAR 0 4
4428: PPUSH
4429: CALL_OW 257
4433: PUSH
4434: LD_VAR 0 2
4438: EQUAL
4439: IFFALSE 4451
// a = i ;
4441: LD_ADDR_VAR 0 5
4445: PUSH
4446: LD_VAR 0 4
4450: ST_TO_ADDR
4451: GO 4421
4453: POP
4454: POP
// result = a ;
4455: LD_ADDR_VAR 0 3
4459: PUSH
4460: LD_VAR 0 5
4464: ST_TO_ADDR
// end ;
4465: LD_VAR 0 3
4469: RET
// export function create_utok_na_belkova ; var pom ; begin
4470: LD_INT 0
4472: PPUSH
4473: PPUSH
// uc_side = Amici ;
4474: LD_ADDR_OWVAR 20
4478: PUSH
4479: LD_EXP 2
4483: ST_TO_ADDR
// uc_nation = nation_american ;
4484: LD_ADDR_OWVAR 21
4488: PUSH
4489: LD_INT 1
4491: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , LEVELY_AMICI [ difficulty ] ,  ) ;
4492: LD_ADDR_VAR 0 2
4496: PUSH
4497: CALL 4052 0 0
4501: PPUSH
4502: LD_INT 1
4504: PPUSH
4505: LD_EXP 40
4509: PUSH
4510: LD_OWVAR 67
4514: ARRAY
4515: PPUSH
4516: LD_STRING 
4518: PPUSH
4519: CALL 3798 0 4
4523: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , LEVELY_AMICI [ difficulty ] ,  ) ;
4524: LD_ADDR_VAR 0 2
4528: PUSH
4529: LD_VAR 0 2
4533: PUSH
4534: CALL 4052 0 0
4538: PPUSH
4539: LD_INT 1
4541: PPUSH
4542: LD_EXP 40
4546: PUSH
4547: LD_OWVAR 67
4551: ARRAY
4552: PPUSH
4553: LD_STRING 
4555: PPUSH
4556: CALL 3798 0 4
4560: ADD
4561: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , LEVELY_AMICI [ difficulty ] ,  ) ;
4562: LD_ADDR_VAR 0 2
4566: PUSH
4567: LD_VAR 0 2
4571: PUSH
4572: CALL 4052 0 0
4576: PPUSH
4577: LD_INT 1
4579: PPUSH
4580: LD_EXP 40
4584: PUSH
4585: LD_OWVAR 67
4589: ARRAY
4590: PPUSH
4591: LD_STRING 
4593: PPUSH
4594: CALL 3798 0 4
4598: ADD
4599: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , LEVELY_AMICI [ difficulty ] ,  ) ;
4600: LD_ADDR_VAR 0 2
4604: PUSH
4605: LD_VAR 0 2
4609: PUSH
4610: CALL 4052 0 0
4614: PPUSH
4615: LD_INT 1
4617: PPUSH
4618: LD_EXP 40
4622: PUSH
4623: LD_OWVAR 67
4627: ARRAY
4628: PPUSH
4629: LD_STRING 
4631: PPUSH
4632: CALL 3798 0 4
4636: ADD
4637: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , LEVELY_AMICI [ difficulty ] ,  ) ;
4638: LD_ADDR_VAR 0 2
4642: PUSH
4643: LD_VAR 0 2
4647: PUSH
4648: CALL 4052 0 0
4652: PPUSH
4653: LD_INT 1
4655: PPUSH
4656: LD_EXP 40
4660: PUSH
4661: LD_OWVAR 67
4665: ARRAY
4666: PPUSH
4667: LD_STRING 
4669: PPUSH
4670: CALL 3798 0 4
4674: ADD
4675: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , LEVELY_AMICI [ difficulty ] ,  ) ;
4676: LD_ADDR_VAR 0 2
4680: PUSH
4681: LD_VAR 0 2
4685: PUSH
4686: CALL 4052 0 0
4690: PPUSH
4691: LD_INT 1
4693: PPUSH
4694: LD_EXP 40
4698: PUSH
4699: LD_OWVAR 67
4703: ARRAY
4704: PPUSH
4705: LD_STRING 
4707: PPUSH
4708: CALL 3798 0 4
4712: ADD
4713: ST_TO_ADDR
// AMICI_UTOK_BELKOV_LIST = pom ;
4714: LD_ADDR_EXP 39
4718: PUSH
4719: LD_VAR 0 2
4723: ST_TO_ADDR
// end ;
4724: LD_VAR 0 1
4728: RET
// export function create_vojaci_zacatek ; var pom_gny ; begin
4729: LD_INT 0
4731: PPUSH
4732: PPUSH
// uc_nation = nation_russian ;
4733: LD_ADDR_OWVAR 21
4737: PUSH
4738: LD_INT 3
4740: ST_TO_ADDR
// uc_side = You ;
4741: LD_ADDR_OWVAR 20
4745: PUSH
4746: LD_EXP 1
4750: ST_TO_ADDR
// SetSide ( Kurin , You2 ) ;
4751: LD_EXP 53
4755: PPUSH
4756: LD_EXP 4
4760: PPUSH
4761: CALL_OW 235
// PlaceUnitXY ( kurin , 121 , 101 , false ) ;
4765: LD_EXP 53
4769: PPUSH
4770: LD_INT 121
4772: PPUSH
4773: LD_INT 101
4775: PPUSH
4776: LD_INT 0
4778: PPUSH
4779: CALL_OW 48
// Setclass ( bel , class_soldier ) ;
4783: LD_EXP 52
4787: PPUSH
4788: LD_INT 1
4790: PPUSH
4791: CALL_OW 336
// SetSide ( bel , You2 ) ;
4795: LD_EXP 52
4799: PPUSH
4800: LD_EXP 4
4804: PPUSH
4805: CALL_OW 235
// PlaceUnitXY ( bel , 121 , 104 , false ) ;
4809: LD_EXP 52
4813: PPUSH
4814: LD_INT 121
4816: PPUSH
4817: LD_INT 104
4819: PPUSH
4820: LD_INT 0
4822: PPUSH
4823: CALL_OW 48
// SetSide ( kov , You ) ;
4827: LD_EXP 51
4831: PPUSH
4832: LD_EXP 1
4836: PPUSH
4837: CALL_OW 235
// PlaceUnitXY ( kov , 126 , 105 , false ) ;
4841: LD_EXP 51
4845: PPUSH
4846: LD_INT 126
4848: PPUSH
4849: LD_INT 105
4851: PPUSH
4852: LD_INT 0
4854: PPUSH
4855: CALL_OW 48
// SetClass ( bur , class_mechanic ) ;
4859: LD_EXP 50
4863: PPUSH
4864: LD_INT 3
4866: PPUSH
4867: CALL_OW 336
// SetSide ( bur , You ) ;
4871: LD_EXP 50
4875: PPUSH
4876: LD_EXP 1
4880: PPUSH
4881: CALL_OW 235
// PlaceUnitXY ( bur , 124 , 105 , false ) ;
4885: LD_EXP 50
4889: PPUSH
4890: LD_INT 124
4892: PPUSH
4893: LD_INT 105
4895: PPUSH
4896: LD_INT 0
4898: PPUSH
4899: CALL_OW 48
// if gny <> 0 then
4903: LD_EXP 49
4907: PUSH
4908: LD_INT 0
4910: NONEQUAL
4911: IFFALSE 4959
// begin SetClass ( gny , class_soldier ) ;
4913: LD_EXP 49
4917: PPUSH
4918: LD_INT 1
4920: PPUSH
4921: CALL_OW 336
// SetSide ( gny , You ) ;
4925: LD_EXP 49
4929: PPUSH
4930: LD_EXP 1
4934: PPUSH
4935: CALL_OW 235
// PlaceUnitXY ( gny , 120 , 103 , false ) ;
4939: LD_EXP 49
4943: PPUSH
4944: LD_INT 120
4946: PPUSH
4947: LD_INT 103
4949: PPUSH
4950: LD_INT 0
4952: PPUSH
4953: CALL_OW 48
// end else
4957: GO 4999
// begin pom_gny = get_human ( sex_male , class_soldier , 2 ,  ) ;
4959: LD_ADDR_VAR 0 2
4963: PUSH
4964: LD_INT 1
4966: PPUSH
4967: LD_INT 1
4969: PPUSH
4970: LD_INT 2
4972: PPUSH
4973: LD_STRING 
4975: PPUSH
4976: CALL 3798 0 4
4980: ST_TO_ADDR
// PlaceUnitXY ( pom_gny , 120 , 103 , false ) ;
4981: LD_VAR 0 2
4985: PPUSH
4986: LD_INT 120
4988: PPUSH
4989: LD_INT 103
4991: PPUSH
4992: LD_INT 0
4994: PPUSH
4995: CALL_OW 48
// end ; SetSide ( plat , You3 ) ;
4999: LD_EXP 54
5003: PPUSH
5004: LD_EXP 6
5008: PPUSH
5009: CALL_OW 235
// PlaceUnitXY ( plat , 66 , 90 , false ) ;
5013: LD_EXP 54
5017: PPUSH
5018: LD_INT 66
5020: PPUSH
5021: LD_INT 90
5023: PPUSH
5024: LD_INT 0
5026: PPUSH
5027: CALL_OW 48
// end ;
5031: LD_VAR 0 1
5035: RET
// export function nacti_osobu ( ident ) ; begin
5036: LD_INT 0
5038: PPUSH
// if CheckCharacterSet ( ident ) then
5039: LD_VAR 0 1
5043: PPUSH
5044: CALL_OW 29
5048: IFFALSE 5067
// result := CreateCharacter ( ident ) else
5050: LD_ADDR_VAR 0 2
5054: PUSH
5055: LD_VAR 0 1
5059: PPUSH
5060: CALL_OW 34
5064: ST_TO_ADDR
5065: GO 5075
// result := 0 ;
5067: LD_ADDR_VAR 0 2
5071: PUSH
5072: LD_INT 0
5074: ST_TO_ADDR
// end ;
5075: LD_VAR 0 2
5079: RET
// export function place_amik_k_videni ; begin
5080: LD_INT 0
5082: PPUSH
// uc_side = Amici ;
5083: LD_ADDR_OWVAR 20
5087: PUSH
5088: LD_EXP 2
5092: ST_TO_ADDR
// uc_nation = nation_american ;
5093: LD_ADDR_OWVAR 21
5097: PUSH
5098: LD_INT 1
5100: ST_TO_ADDR
// ah = get_human ( get_sex , class_soldier , 3 ,  ) ;
5101: LD_ADDR_LOC 1
5105: PUSH
5106: CALL 4052 0 0
5110: PPUSH
5111: LD_INT 1
5113: PPUSH
5114: LD_INT 3
5116: PPUSH
5117: LD_STRING 
5119: PPUSH
5120: CALL 3798 0 4
5124: ST_TO_ADDR
// PlaceUnitXYR ( ah , 72 , 28 , 3 , false ) ;
5125: LD_LOC 1
5129: PPUSH
5130: LD_INT 72
5132: PPUSH
5133: LD_INT 28
5135: PPUSH
5136: LD_INT 3
5138: PPUSH
5139: LD_INT 0
5141: PPUSH
5142: CALL_OW 50
// result := ah ;
5146: LD_ADDR_VAR 0 1
5150: PUSH
5151: LD_LOC 1
5155: ST_TO_ADDR
// end ; end_of_file
5156: LD_VAR 0 1
5160: RET
// export LEVELY_AMICI ; export amici_past_pocet ; export procento_odkrytych_pro_vyhru ; export cas_na_zachranu_belkova ; export levely_bw_na_zapade ; export levely_bw_na_vychode ; export BELKOV_MRTVY ; export function set_difficulty ; begin
5161: LD_INT 0
5163: PPUSH
// LEVELY_AMICI = [ 1 , 2 , 3 ] ;
5164: LD_ADDR_EXP 40
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: LD_INT 2
5174: PUSH
5175: LD_INT 3
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: LIST
5182: ST_TO_ADDR
// amici_past_pocet = [ 3 , 5 , 7 ] ;
5183: LD_ADDR_EXP 41
5187: PUSH
5188: LD_INT 3
5190: PUSH
5191: LD_INT 5
5193: PUSH
5194: LD_INT 7
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: LIST
5201: ST_TO_ADDR
// procento_odkrytych_pro_vyhru = [ 3400 , 3600 , 3800 ] ;
5202: LD_ADDR_EXP 42
5206: PUSH
5207: LD_INT 3400
5209: PUSH
5210: LD_INT 3600
5212: PUSH
5213: LD_INT 3800
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: LIST
5220: ST_TO_ADDR
// cas_na_zachranu_belkova = [ 20 20$0 , 15 15$0 , 10 10$0 ] ;
5221: LD_ADDR_EXP 43
5225: PUSH
5226: LD_INT 42000
5228: PUSH
5229: LD_INT 31500
5231: PUSH
5232: LD_INT 21000
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: LIST
5239: ST_TO_ADDR
// levely_bw_na_zapade = [ 1 , 2 , 3 ] ;
5240: LD_ADDR_EXP 44
5244: PUSH
5245: LD_INT 1
5247: PUSH
5248: LD_INT 2
5250: PUSH
5251: LD_INT 3
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: LIST
5258: ST_TO_ADDR
// levely_bw_na_vychode = [ 1 , 2 , 3 ] ;
5259: LD_ADDR_EXP 45
5263: PUSH
5264: LD_INT 1
5266: PUSH
5267: LD_INT 2
5269: PUSH
5270: LD_INT 3
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: LIST
5277: ST_TO_ADDR
// end ;
5278: LD_VAR 0 1
5282: RET
// every 0 0$0.1 do
5283: GO 5285
5285: DISABLE
// begin SetBName ( RU1_dep , kirov ) ;
5286: LD_INT 1
5288: PPUSH
5289: LD_STRING kirov
5291: PPUSH
5292: CALL_OW 500
// SetBName ( RU2_dep , beria ) ;
5296: LD_INT 26
5298: PPUSH
5299: LD_STRING beria
5301: PPUSH
5302: CALL_OW 500
// end ; end_of_file
5306: END
// var prilis_na_north ; var is_out_base ; var wasattack ; var ridic_1_auta ; var je_mimo ; var byl_v_zakladne ; var kecal_s_platonovem ; var znicene_bw ; var bw_e_nasli ; var cont_mission ; var kecy_bw_w ; export navrat_a_konec ; export belkov_solved ; var skurveny_mission_objectiv_uz_prosel ; var konstanta_utoceni ; var kecy_pri_vraceni_belkova ; every 0 0$0.1 do var i ;
5307: GO 5309
5309: DISABLE
5310: LD_INT 0
5312: PPUSH
// begin prilis_na_north = [ 1 , 2 , 4 , 5 , 6 ] ;
5313: LD_ADDR_LOC 3
5317: PUSH
5318: LD_INT 1
5320: PUSH
5321: LD_INT 2
5323: PUSH
5324: LD_INT 4
5326: PUSH
5327: LD_INT 5
5329: PUSH
5330: LD_INT 6
5332: PUSH
5333: EMPTY
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: ST_TO_ADDR
// is_out_base = [ 3 ] ;
5340: LD_ADDR_LOC 4
5344: PUSH
5345: LD_INT 3
5347: PUSH
5348: EMPTY
5349: LIST
5350: ST_TO_ADDR
// bw_e_nasli = false ;
5351: LD_ADDR_LOC 11
5355: PUSH
5356: LD_INT 0
5358: ST_TO_ADDR
// kecy_bw_w = false ;
5359: LD_ADDR_LOC 13
5363: PUSH
5364: LD_INT 0
5366: ST_TO_ADDR
// wasattack = false ;
5367: LD_ADDR_LOC 5
5371: PUSH
5372: LD_INT 0
5374: ST_TO_ADDR
// je_mimo = false ;
5375: LD_ADDR_LOC 7
5379: PUSH
5380: LD_INT 0
5382: ST_TO_ADDR
// byl_v_zakladne = false ;
5383: LD_ADDR_LOC 8
5387: PUSH
5388: LD_INT 0
5390: ST_TO_ADDR
// kecal_s_platonovem = false ;
5391: LD_ADDR_LOC 9
5395: PUSH
5396: LD_INT 0
5398: ST_TO_ADDR
// znicene_bw = false ;
5399: LD_ADDR_LOC 10
5403: PUSH
5404: LD_INT 0
5406: ST_TO_ADDR
// belkov_solved = 1 ;
5407: LD_ADDR_EXP 48
5411: PUSH
5412: LD_INT 1
5414: ST_TO_ADDR
// konstanta_utoceni = 0 ;
5415: LD_ADDR_LOC 15
5419: PUSH
5420: LD_INT 0
5422: ST_TO_ADDR
// navrat_a_konec = false ;
5423: LD_ADDR_EXP 47
5427: PUSH
5428: LD_INT 0
5430: ST_TO_ADDR
// cont_mission = false ;
5431: LD_ADDR_LOC 12
5435: PUSH
5436: LD_INT 0
5438: ST_TO_ADDR
// skurveny_mission_objectiv_uz_prosel = false ;
5439: LD_ADDR_LOC 14
5443: PUSH
5444: LD_INT 0
5446: ST_TO_ADDR
// kecy_pri_vraceni_belkova = 0 ;
5447: LD_ADDR_LOC 16
5451: PUSH
5452: LD_INT 0
5454: ST_TO_ADDR
// for i in [ 991 , 992 ] do
5455: LD_ADDR_VAR 0 1
5459: PUSH
5460: LD_INT 991
5462: PUSH
5463: LD_INT 992
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: PUSH
5470: FOR_IN
5471: IFFALSE 5480
// disable ( i ) ;
5473: LD_VAR 0 1
5477: DISABLE_MARKED
5478: GO 5470
5480: POP
5481: POP
// end ;
5482: PPOPN 1
5484: END
// every 0 0$3 do
5485: GO 5487
5487: DISABLE
// begin ComTurnUnit ( kurin , bur ) ;
5488: LD_EXP 53
5492: PPUSH
5493: LD_EXP 50
5497: PPUSH
5498: CALL_OW 119
// ComTurnUnit ( bur , kurin ) ;
5502: LD_EXP 50
5506: PPUSH
5507: LD_EXP 53
5511: PPUSH
5512: CALL_OW 119
// Say ( kurin , D1-Kur-1 ) ;
5516: LD_EXP 53
5520: PPUSH
5521: LD_STRING D1-Kur-1
5523: PPUSH
5524: CALL_OW 88
// Say ( bur , D1-Bur-1 ) ;
5528: LD_EXP 50
5532: PPUSH
5533: LD_STRING D1-Bur-1
5535: PPUSH
5536: CALL_OW 88
// Say ( kurin , D1-Kur-2 ) ;
5540: LD_EXP 53
5544: PPUSH
5545: LD_STRING D1-Kur-2
5547: PPUSH
5548: CALL_OW 88
// Say ( bur , D1-Bur-2 ) ;
5552: LD_EXP 50
5556: PPUSH
5557: LD_STRING D1-Bur-2
5559: PPUSH
5560: CALL_OW 88
// Say ( kurin , D1-Kur-3 ) ;
5564: LD_EXP 53
5568: PPUSH
5569: LD_STRING D1-Kur-3
5571: PPUSH
5572: CALL_OW 88
// if gny <> 0 then
5576: LD_EXP 49
5580: PUSH
5581: LD_INT 0
5583: NONEQUAL
5584: IFFALSE 5598
// Say ( kurin , D1-Kur-3a ) ;
5586: LD_EXP 53
5590: PPUSH
5591: LD_STRING D1-Kur-3a
5593: PPUSH
5594: CALL_OW 88
// SaveForQuickRestart ;
5598: CALL_OW 22
// wait ( 0 0$1 ) ;
5602: LD_INT 35
5604: PPUSH
5605: CALL_OW 67
// ChangeMissionObjectives ( M1 ) ;
5609: LD_STRING M1
5611: PPUSH
5612: CALL_OW 337
// InGameOff ;
5616: CALL_OW 9
// stav = 1 ;
5620: LD_ADDR_EXP 60
5624: PUSH
5625: LD_INT 1
5627: ST_TO_ADDR
// enable ( 991 ) ;
5628: LD_INT 991
5630: ENABLE_MARKED
// end ;
5631: END
// every 0 0$1 trigger SeeXY ( You , 69 , 83 ) or SeeXY ( You , 73 , 96 ) and ( not kecal_s_platonovem ) do var pom ; var sq ;
5632: LD_EXP 1
5636: PPUSH
5637: LD_INT 69
5639: PPUSH
5640: LD_INT 83
5642: PPUSH
5643: CALL_OW 293
5647: PUSH
5648: LD_EXP 1
5652: PPUSH
5653: LD_INT 73
5655: PPUSH
5656: LD_INT 96
5658: PPUSH
5659: CALL_OW 293
5663: PUSH
5664: LD_LOC 9
5668: NOT
5669: AND
5670: OR
5671: IFFALSE 5767
5673: GO 5675
5675: DISABLE
5676: LD_INT 0
5678: PPUSH
5679: PPUSH
// begin DialogueOn ;
5680: CALL_OW 6
// if SeeXY ( You , 71 , 84 ) then
5684: LD_EXP 1
5688: PPUSH
5689: LD_INT 71
5691: PPUSH
5692: LD_INT 84
5694: PPUSH
5695: CALL_OW 293
5699: IFFALSE 5711
// pom = Ru2_vb1 else
5701: LD_ADDR_VAR 0 1
5705: PUSH
5706: LD_INT 9
5708: ST_TO_ADDR
5709: GO 5719
// pom = Ru2_vb2 ;
5711: LD_ADDR_VAR 0 1
5715: PUSH
5716: LD_INT 10
5718: ST_TO_ADDR
// Say ( pom , D2-RSol1-1 ) ;
5719: LD_VAR 0 1
5723: PPUSH
5724: LD_STRING D2-RSol1-1
5726: PPUSH
5727: CALL_OW 88
// Say ( bur , D2-Bur-1 ) ;
5731: LD_EXP 50
5735: PPUSH
5736: LD_STRING D2-Bur-1
5738: PPUSH
5739: CALL_OW 88
// Say ( pom , D2-RSol1-2 ) ;
5743: LD_VAR 0 1
5747: PPUSH
5748: LD_STRING D2-RSol1-2
5750: PPUSH
5751: CALL_OW 88
// stav = 2 ;
5755: LD_ADDR_EXP 60
5759: PUSH
5760: LD_INT 2
5762: ST_TO_ADDR
// DialogueOff ;
5763: CALL_OW 7
// end ;
5767: PPOPN 2
5769: END
// every 0 0$1 trigger IsInArea ( bur , near_plat ) do
5770: LD_EXP 50
5774: PPUSH
5775: LD_INT 5
5777: PPUSH
5778: CALL_OW 308
5782: IFFALSE 6136
5784: GO 5786
5786: DISABLE
// begin kecal_s_platonovem = true ;
5787: LD_ADDR_LOC 9
5791: PUSH
5792: LD_INT 1
5794: ST_TO_ADDR
// DialogueOn ;
5795: CALL_OW 6
// ComHold ( bur ) ;
5799: LD_EXP 50
5803: PPUSH
5804: CALL_OW 140
// ComTurnUnit ( plat , bur ) ;
5808: LD_EXP 54
5812: PPUSH
5813: LD_EXP 50
5817: PPUSH
5818: CALL_OW 119
// AddComTurnUnit ( bur , plat ) ;
5822: LD_EXP 50
5826: PPUSH
5827: LD_EXP 54
5831: PPUSH
5832: CALL_OW 179
// Say ( plat , D2-Pla-2 ) ;
5836: LD_EXP 54
5840: PPUSH
5841: LD_STRING D2-Pla-2
5843: PPUSH
5844: CALL_OW 88
// Say ( bur , D2-Bur-2 ) ;
5848: LD_EXP 50
5852: PPUSH
5853: LD_STRING D2-Bur-2
5855: PPUSH
5856: CALL_OW 88
// Say ( plat , D2-Pla-3 ) ;
5860: LD_EXP 54
5864: PPUSH
5865: LD_STRING D2-Pla-3
5867: PPUSH
5868: CALL_OW 88
// Say ( bur , D2-Bur-3 ) ;
5872: LD_EXP 50
5876: PPUSH
5877: LD_STRING D2-Bur-3
5879: PPUSH
5880: CALL_OW 88
// Say ( plat , D2-Pla-4 ) ;
5884: LD_EXP 54
5888: PPUSH
5889: LD_STRING D2-Pla-4
5891: PPUSH
5892: CALL_OW 88
// Say ( bur , D2-Bur-4 ) ;
5896: LD_EXP 50
5900: PPUSH
5901: LD_STRING D2-Bur-4
5903: PPUSH
5904: CALL_OW 88
// Say ( plat , D2-Pla-5 ) ;
5908: LD_EXP 54
5912: PPUSH
5913: LD_STRING D2-Pla-5
5915: PPUSH
5916: CALL_OW 88
// info_q ( [ 1 , 2 , 3 , 4 ] ) ;
5920: LD_INT 1
5922: PUSH
5923: LD_INT 2
5925: PUSH
5926: LD_INT 3
5928: PUSH
5929: LD_INT 4
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: PPUSH
5938: CALL 6137 0 1
// Say ( plat , D3-Pla-1 ) ;
5942: LD_EXP 54
5946: PPUSH
5947: LD_STRING D3-Pla-1
5949: PPUSH
5950: CALL_OW 88
// Say ( bur , D3-Bur-1 ) ;
5954: LD_EXP 50
5958: PPUSH
5959: LD_STRING D3-Bur-1
5961: PPUSH
5962: CALL_OW 88
// ChangeMissionObjectives ( M2a ) ;
5966: LD_STRING M2a
5968: PPUSH
5969: CALL_OW 337
// Hint ( Base ) ;
5973: LD_STRING Base
5975: PPUSH
5976: CALL_OW 339
// Hint ( Depot ) ;
5980: LD_STRING Depot
5982: PPUSH
5983: CALL_OW 339
// Hint ( Construction ) ;
5987: LD_STRING Construction
5989: PPUSH
5990: CALL_OW 339
// DialogueOff ;
5994: CALL_OW 7
// ComFree ( plat ) ;
5998: LD_EXP 54
6002: PPUSH
6003: CALL_OW 139
// AddComFree ( bur ) ;
6007: LD_EXP 50
6011: PPUSH
6012: CALL_OW 199
// stav = 3 ;
6016: LD_ADDR_EXP 60
6020: PUSH
6021: LD_INT 3
6023: ST_TO_ADDR
// SetSide ( RU2_dep , You ) ;
6024: LD_INT 26
6026: PPUSH
6027: LD_EXP 1
6031: PPUSH
6032: CALL_OW 235
// SetSide ( plat , You2 ) ;
6036: LD_EXP 54
6040: PPUSH
6041: LD_EXP 4
6045: PPUSH
6046: CALL_OW 235
// SetSide ( RU2_bu1 , You2 ) ;
6050: LD_INT 4
6052: PPUSH
6053: LD_EXP 4
6057: PPUSH
6058: CALL_OW 235
// SetSide ( RU2_bu2 , You2 ) ;
6062: LD_INT 11
6064: PPUSH
6065: LD_EXP 4
6069: PPUSH
6070: CALL_OW 235
// SetSide ( RU2_vb1 , You2 ) ;
6074: LD_INT 9
6076: PPUSH
6077: LD_EXP 4
6081: PPUSH
6082: CALL_OW 235
// SetSide ( RU2_vb2 , You2 ) ;
6086: LD_INT 10
6088: PPUSH
6089: LD_EXP 4
6093: PPUSH
6094: CALL_OW 235
// SetSide ( RU2_hv1 , You2 ) ;
6098: LD_INT 15
6100: PPUSH
6101: LD_EXP 4
6105: PPUSH
6106: CALL_OW 235
// SetSide ( RU2_hv2 , You2 ) ;
6110: LD_INT 16
6112: PPUSH
6113: LD_EXP 4
6117: PPUSH
6118: CALL_OW 235
// ComStop ( RU2_hv1 ) ;
6122: LD_INT 15
6124: PPUSH
6125: CALL_OW 141
// ComStop ( RU2_hv2 ) ;
6129: LD_INT 16
6131: PPUSH
6132: CALL_OW 141
// end ;
6136: END
// function info_q ( q ) ; var pom ; var q1 ; begin
6137: LD_INT 0
6139: PPUSH
6140: PPUSH
6141: PPUSH
// pom = SelectiveQuery ( QMoreInfo , q ) ;
6142: LD_ADDR_VAR 0 3
6146: PUSH
6147: LD_STRING QMoreInfo
6149: PPUSH
6150: LD_VAR 0 1
6154: PPUSH
6155: CALL_OW 98
6159: ST_TO_ADDR
// case pom of 1 :
6160: LD_VAR 0 3
6164: PUSH
6165: LD_INT 1
6167: DOUBLE
6168: EQUAL
6169: IFTRUE 6173
6171: GO 6233
6173: POP
// begin Say ( bur , D2a-Bur-1 ) ;
6174: LD_EXP 50
6178: PPUSH
6179: LD_STRING D2a-Bur-1
6181: PPUSH
6182: CALL_OW 88
// Say ( plat , D2a-Pla-1 ) ;
6186: LD_EXP 54
6190: PPUSH
6191: LD_STRING D2a-Pla-1
6193: PPUSH
6194: CALL_OW 88
// q1 = q diff 1 ;
6198: LD_ADDR_VAR 0 4
6202: PUSH
6203: LD_VAR 0 1
6207: PUSH
6208: LD_INT 1
6210: DIFF
6211: ST_TO_ADDR
// if q1 >= 2 then
6212: LD_VAR 0 4
6216: PUSH
6217: LD_INT 2
6219: GREATEREQUAL
6220: IFFALSE 6231
// info_q ( q1 ) ;
6222: LD_VAR 0 4
6226: PPUSH
6227: CALL 6137 0 1
// end ; 2 :
6231: GO 6370
6233: LD_INT 2
6235: DOUBLE
6236: EQUAL
6237: IFTRUE 6241
6239: GO 6301
6241: POP
// begin Say ( bur , D2b-Bur-1 ) ;
6242: LD_EXP 50
6246: PPUSH
6247: LD_STRING D2b-Bur-1
6249: PPUSH
6250: CALL_OW 88
// Say ( plat , D2b-Pla-1 ) ;
6254: LD_EXP 54
6258: PPUSH
6259: LD_STRING D2b-Pla-1
6261: PPUSH
6262: CALL_OW 88
// q1 = q diff 2 ;
6266: LD_ADDR_VAR 0 4
6270: PUSH
6271: LD_VAR 0 1
6275: PUSH
6276: LD_INT 2
6278: DIFF
6279: ST_TO_ADDR
// if q1 >= 2 then
6280: LD_VAR 0 4
6284: PUSH
6285: LD_INT 2
6287: GREATEREQUAL
6288: IFFALSE 6299
// info_q ( q1 ) ;
6290: LD_VAR 0 4
6294: PPUSH
6295: CALL 6137 0 1
// end ; 3 :
6299: GO 6370
6301: LD_INT 3
6303: DOUBLE
6304: EQUAL
6305: IFTRUE 6309
6307: GO 6369
6309: POP
// begin Say ( bur , D2c-Bur-1 ) ;
6310: LD_EXP 50
6314: PPUSH
6315: LD_STRING D2c-Bur-1
6317: PPUSH
6318: CALL_OW 88
// Say ( plat , D2c-Pla-1 ) ;
6322: LD_EXP 54
6326: PPUSH
6327: LD_STRING D2c-Pla-1
6329: PPUSH
6330: CALL_OW 88
// q1 = q diff 3 ;
6334: LD_ADDR_VAR 0 4
6338: PUSH
6339: LD_VAR 0 1
6343: PUSH
6344: LD_INT 3
6346: DIFF
6347: ST_TO_ADDR
// if q1 >= 2 then
6348: LD_VAR 0 4
6352: PUSH
6353: LD_INT 2
6355: GREATEREQUAL
6356: IFFALSE 6367
// info_q ( q1 ) ;
6358: LD_VAR 0 4
6362: PPUSH
6363: CALL 6137 0 1
// end ; end ;
6367: GO 6370
6369: POP
// end ;
6370: LD_VAR 0 2
6374: RET
// every 0 0$1 trigger stav in prilis_na_north do var pom ;
6375: LD_EXP 60
6379: PUSH
6380: LD_LOC 3
6384: IN
6385: IFFALSE 6540
6387: GO 6389
6389: DISABLE
6390: LD_INT 0
6392: PPUSH
// begin pom = FilterUnitsInArea ( Upozarea , [ [ f_side , You ] ] ) ;
6393: LD_ADDR_VAR 0 1
6397: PUSH
6398: LD_INT 2
6400: PPUSH
6401: LD_INT 22
6403: PUSH
6404: LD_EXP 1
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PUSH
6413: EMPTY
6414: LIST
6415: PPUSH
6416: CALL_OW 70
6420: ST_TO_ADDR
// if pom > 0 then
6421: LD_VAR 0 1
6425: PUSH
6426: LD_INT 0
6428: GREATER
6429: IFFALSE 6539
// begin ComHold ( pom ) ;
6431: LD_VAR 0 1
6435: PPUSH
6436: CALL_OW 140
// DialogueOn ;
6440: CALL_OW 6
// posli_lidi_zpet ;
6444: CALL 16241 0 0
// if bur in pom then
6448: LD_EXP 50
6452: PUSH
6453: LD_VAR 0 1
6457: IN
6458: IFFALSE 6474
// Say ( Bur , D1b-Bur-1 ) else
6460: LD_EXP 50
6464: PPUSH
6465: LD_STRING D1b-Bur-1
6467: PPUSH
6468: CALL_OW 88
6472: GO 6486
// Say ( Kov , D1b-Kov-1 ) ;
6474: LD_EXP 51
6478: PPUSH
6479: LD_STRING D1b-Kov-1
6481: PPUSH
6482: CALL_OW 88
// DialogueOff ;
6486: CALL_OW 7
// InGameOn ;
6490: CALL_OW 8
// while FilterUnitsInArea ( Upozarea , [ [ f_side , You ] ] ) <> 0 do
6494: LD_INT 2
6496: PPUSH
6497: LD_INT 22
6499: PUSH
6500: LD_EXP 1
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: EMPTY
6510: LIST
6511: PPUSH
6512: CALL_OW 70
6516: PUSH
6517: LD_INT 0
6519: NONEQUAL
6520: IFFALSE 6535
// begin wait ( 0 0$2 ) ;
6522: LD_INT 70
6524: PPUSH
6525: CALL_OW 67
// posli_lidi_zpet ;
6529: CALL 16241 0 0
// end ;
6533: GO 6494
// InGameOff ;
6535: CALL_OW 9
// end ; enable ;
6539: ENABLE
// end ;
6540: PPOPN 1
6542: END
// every 0 0$1 trigger FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_lab ] ] ) = 1 do var pom , pom1 ;
6543: LD_INT 1
6545: PPUSH
6546: LD_INT 22
6548: PUSH
6549: LD_EXP 1
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PUSH
6558: LD_INT 30
6560: PUSH
6561: LD_INT 6
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PPUSH
6572: CALL_OW 70
6576: PUSH
6577: LD_INT 1
6579: EQUAL
6580: IFFALSE 6827
6582: GO 6584
6584: DISABLE
6585: LD_INT 0
6587: PPUSH
6588: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_lab ] ] ) ;
6589: LD_ADDR_VAR 0 1
6593: PUSH
6594: LD_INT 1
6596: PPUSH
6597: LD_INT 22
6599: PUSH
6600: LD_EXP 1
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: LD_INT 30
6611: PUSH
6612: LD_INT 6
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: PPUSH
6623: CALL_OW 70
6627: ST_TO_ADDR
// pom1 = 7 ;
6628: LD_ADDR_VAR 0 2
6632: PUSH
6633: LD_INT 7
6635: ST_TO_ADDR
// while IsConstructed ( pom [ 1 ] ) <> 0 do
6636: LD_VAR 0 1
6640: PUSH
6641: LD_INT 1
6643: ARRAY
6644: PPUSH
6645: CALL_OW 304
6649: PUSH
6650: LD_INT 0
6652: NONEQUAL
6653: IFFALSE 6664
// wait ( 0 0$2 ) ;
6655: LD_INT 70
6657: PPUSH
6658: CALL_OW 67
6662: GO 6636
// DialogueOn ;
6664: CALL_OW 6
// Hint ( Laboratory ) ;
6668: LD_STRING Laboratory
6670: PPUSH
6671: CALL_OW 339
// Hint ( Healing ) ;
6675: LD_STRING Healing
6677: PPUSH
6678: CALL_OW 339
// Say ( bur , D5a-Bur-1 ) ;
6682: LD_EXP 50
6686: PPUSH
6687: LD_STRING D5a-Bur-1
6689: PPUSH
6690: CALL_OW 88
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_workshop ] ] ) ;
6694: LD_ADDR_VAR 0 1
6698: PUSH
6699: LD_INT 1
6701: PPUSH
6702: LD_INT 22
6704: PUSH
6705: LD_EXP 1
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: PUSH
6714: LD_INT 30
6716: PUSH
6717: LD_INT 2
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: PUSH
6724: EMPTY
6725: LIST
6726: LIST
6727: PPUSH
6728: CALL_OW 70
6732: ST_TO_ADDR
// if pom > 0 then
6733: LD_VAR 0 1
6737: PUSH
6738: LD_INT 0
6740: GREATER
6741: IFFALSE 6762
// pom1 = IsConstructed ( pom [ 1 ] ) ;
6743: LD_ADDR_VAR 0 2
6747: PUSH
6748: LD_VAR 0 1
6752: PUSH
6753: LD_INT 1
6755: ARRAY
6756: PPUSH
6757: CALL_OW 304
6761: ST_TO_ADDR
// if pom1 = 0 then
6762: LD_VAR 0 2
6766: PUSH
6767: LD_INT 0
6769: EQUAL
6770: IFFALSE 6804
// begin Say ( plat , D5a-Pla-1 ) ;
6772: LD_EXP 54
6776: PPUSH
6777: LD_STRING D5a-Pla-1
6779: PPUSH
6780: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
6784: LD_STRING M2
6786: PPUSH
6787: CALL_OW 337
// pokracovani_rozhovoru ;
6791: CALL 7137 0 0
// Hint ( BuildingVehicles ) ;
6795: LD_STRING BuildingVehicles
6797: PPUSH
6798: CALL_OW 339
// end else
6802: GO 6823
// begin Say ( plat , D5a-Pla-1a ) ;
6804: LD_EXP 54
6808: PPUSH
6809: LD_STRING D5a-Pla-1a
6811: PPUSH
6812: CALL_OW 88
// ChangeMissionObjectives ( M2b ) ;
6816: LD_STRING M2b
6818: PPUSH
6819: CALL_OW 337
// end ; DialogueOff ;
6823: CALL_OW 7
// end ;
6827: PPOPN 2
6829: END
// every 0 0$1 trigger FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_workshop ] ] ) = 1 do var pom , pom1 ;
6830: LD_INT 1
6832: PPUSH
6833: LD_INT 22
6835: PUSH
6836: LD_EXP 1
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PUSH
6845: LD_INT 30
6847: PUSH
6848: LD_INT 2
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PPUSH
6859: CALL_OW 70
6863: PUSH
6864: LD_INT 1
6866: EQUAL
6867: IFFALSE 7134
6869: GO 6871
6871: DISABLE
6872: LD_INT 0
6874: PPUSH
6875: PPUSH
// begin pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_workshop ] ] ) ;
6876: LD_ADDR_VAR 0 1
6880: PUSH
6881: LD_INT 1
6883: PPUSH
6884: LD_INT 22
6886: PUSH
6887: LD_EXP 1
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: PUSH
6896: LD_INT 30
6898: PUSH
6899: LD_INT 2
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PPUSH
6910: CALL_OW 70
6914: ST_TO_ADDR
// pom1 = 7 ;
6915: LD_ADDR_VAR 0 2
6919: PUSH
6920: LD_INT 7
6922: ST_TO_ADDR
// while IsConstructed ( pom [ 1 ] ) <> 0 do
6923: LD_VAR 0 1
6927: PUSH
6928: LD_INT 1
6930: ARRAY
6931: PPUSH
6932: CALL_OW 304
6936: PUSH
6937: LD_INT 0
6939: NONEQUAL
6940: IFFALSE 6951
// wait ( 0 0$2 ) ;
6942: LD_INT 70
6944: PPUSH
6945: CALL_OW 67
6949: GO 6923
// DialogueOn ;
6951: CALL_OW 6
// if GetTech ( tech_OilEng , You ) = state_researched then
6955: LD_INT 47
6957: PPUSH
6958: LD_EXP 1
6962: PPUSH
6963: CALL_OW 321
6967: PUSH
6968: LD_INT 2
6970: EQUAL
6971: IFFALSE 6982
// Hint ( Workshop2 ) else
6973: LD_STRING Workshop2
6975: PPUSH
6976: CALL_OW 339
6980: GO 6989
// Hint ( Workshop1 ) ;
6982: LD_STRING Workshop1
6984: PPUSH
6985: CALL_OW 339
// Say ( bur , D5b-Bur-1 ) ;
6989: LD_EXP 50
6993: PPUSH
6994: LD_STRING D5b-Bur-1
6996: PPUSH
6997: CALL_OW 88
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_btype , b_lab ] ] ) ;
7001: LD_ADDR_VAR 0 1
7005: PUSH
7006: LD_INT 1
7008: PPUSH
7009: LD_INT 22
7011: PUSH
7012: LD_EXP 1
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: LD_INT 30
7023: PUSH
7024: LD_INT 6
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: PPUSH
7035: CALL_OW 70
7039: ST_TO_ADDR
// if pom > 0 then
7040: LD_VAR 0 1
7044: PUSH
7045: LD_INT 0
7047: GREATER
7048: IFFALSE 7069
// pom1 = IsConstructed ( pom [ 1 ] ) ;
7050: LD_ADDR_VAR 0 2
7054: PUSH
7055: LD_VAR 0 1
7059: PUSH
7060: LD_INT 1
7062: ARRAY
7063: PPUSH
7064: CALL_OW 304
7068: ST_TO_ADDR
// if pom1 = 0 then
7069: LD_VAR 0 2
7073: PUSH
7074: LD_INT 0
7076: EQUAL
7077: IFFALSE 7111
// begin Say ( plat , D5b-Pla-1 ) ;
7079: LD_EXP 54
7083: PPUSH
7084: LD_STRING D5b-Pla-1
7086: PPUSH
7087: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
7091: LD_STRING M2
7093: PPUSH
7094: CALL_OW 337
// pokracovani_rozhovoru ;
7098: CALL 7137 0 0
// Hint ( BuildingVehicles ) ;
7102: LD_STRING BuildingVehicles
7104: PPUSH
7105: CALL_OW 339
// end else
7109: GO 7130
// begin Say ( plat , D5b-Pla-1a ) ;
7111: LD_EXP 54
7115: PPUSH
7116: LD_STRING D5b-Pla-1a
7118: PPUSH
7119: CALL_OW 88
// ChangeMissionObjectives ( M2c ) ;
7123: LD_STRING M2c
7125: PPUSH
7126: CALL_OW 337
// end ; DialogueOff ;
7130: CALL_OW 7
// end ;
7134: PPOPN 2
7136: END
// function pokracovani_rozhovoru ; begin
7137: LD_INT 0
7139: PPUSH
// if Researched ( You , tech_OilEng ) then
7140: LD_EXP 1
7144: PPUSH
7145: LD_INT 47
7147: PPUSH
7148: CALL_OW 325
7152: IFFALSE 7180
// begin Say ( bur , D7b-Bur-1 ) ;
7154: LD_EXP 50
7158: PPUSH
7159: LD_STRING D7b-Bur-1
7161: PPUSH
7162: CALL_OW 88
// Say ( plat , D7b-Pla-1 ) ;
7166: LD_EXP 54
7170: PPUSH
7171: LD_STRING D7b-Pla-1
7173: PPUSH
7174: CALL_OW 88
// end else
7178: GO 7204
// begin Say ( bur , D7a-Bur-1 ) ;
7180: LD_EXP 50
7184: PPUSH
7185: LD_STRING D7a-Bur-1
7187: PPUSH
7188: CALL_OW 88
// Say ( plat , D7a-Pla-1 ) ;
7192: LD_EXP 54
7196: PPUSH
7197: LD_STRING D7a-Pla-1
7199: PPUSH
7200: CALL_OW 88
// end ; end ;
7204: LD_VAR 0 1
7208: RET
// every 0 0$1 trigger stav in is_out_base do var pom , pom1 ;
7209: LD_EXP 60
7213: PUSH
7214: LD_LOC 4
7218: IN
7219: IFFALSE 7407
7221: GO 7223
7223: DISABLE
7224: LD_INT 0
7226: PPUSH
7227: PPUSH
// begin pom = FilterUnitsInArea ( Out_base , [ [ f_side , You ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
7228: LD_ADDR_VAR 0 1
7232: PUSH
7233: LD_INT 6
7235: PPUSH
7236: LD_INT 22
7238: PUSH
7239: LD_EXP 1
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: PUSH
7248: LD_INT 2
7250: PUSH
7251: LD_INT 21
7253: PUSH
7254: LD_INT 2
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PUSH
7261: LD_INT 21
7263: PUSH
7264: LD_INT 1
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: LIST
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PPUSH
7280: CALL_OW 70
7284: ST_TO_ADDR
// if pom > 0 then
7285: LD_VAR 0 1
7289: PUSH
7290: LD_INT 0
7292: GREATER
7293: IFFALSE 7406
// begin ComHold ( pom ) ;
7295: LD_VAR 0 1
7299: PPUSH
7300: CALL_OW 140
// DialogueOn ;
7304: CALL_OW 6
// Say ( plat , D8-Pla-1 ) ;
7308: LD_EXP 54
7312: PPUSH
7313: LD_STRING D8-Pla-1
7315: PPUSH
7316: CALL_OW 88
// DialogueOff ;
7320: CALL_OW 7
// InGameOn ;
7324: CALL_OW 8
// posli_rusi_zpet_out_base ;
7328: CALL 16290 0 0
// while FilterUnitsInArea ( Out_base , [ [ f_side , You ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) <> 0 do
7332: LD_INT 6
7334: PPUSH
7335: LD_INT 22
7337: PUSH
7338: LD_EXP 1
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: PUSH
7347: LD_INT 2
7349: PUSH
7350: LD_INT 21
7352: PUSH
7353: LD_INT 2
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: PUSH
7360: LD_INT 21
7362: PUSH
7363: LD_INT 1
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: LIST
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PPUSH
7379: CALL_OW 70
7383: PUSH
7384: LD_INT 0
7386: NONEQUAL
7387: IFFALSE 7402
// begin wait ( 0 0$2 ) ;
7389: LD_INT 70
7391: PPUSH
7392: CALL_OW 67
// posli_rusi_zpet_out_base ;
7396: CALL 16290 0 0
// end ;
7400: GO 7332
// InGameOff ;
7402: CALL_OW 9
// end ; enable ;
7406: ENABLE
// end ;
7407: PPOPN 2
7409: END
// every 0 0$1 marked 300 do var pom ;
7410: GO 7412
7412: DISABLE
7413: LD_INT 0
7415: PPUSH
// begin wait ( 0 0$4 ) ;
7416: LD_INT 140
7418: PPUSH
7419: CALL_OW 67
// pom = FilterUnitsInArea ( RU2_base , [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
7423: LD_ADDR_VAR 0 1
7427: PUSH
7428: LD_INT 1
7430: PPUSH
7431: LD_INT 22
7433: PUSH
7434: LD_EXP 1
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: PUSH
7443: LD_INT 21
7445: PUSH
7446: LD_INT 2
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: PPUSH
7457: CALL_OW 70
7461: ST_TO_ADDR
// DialogueOn ;
7462: CALL_OW 6
// Say ( bur , D9-Bur-1 ) ;
7466: LD_EXP 50
7470: PPUSH
7471: LD_STRING D9-Bur-1
7473: PPUSH
7474: CALL_OW 88
// Say ( plat , D9-Pla-1 ) ;
7478: LD_EXP 54
7482: PPUSH
7483: LD_STRING D9-Pla-1
7485: PPUSH
7486: CALL_OW 88
// ChangeMissionObjectives ( M3 ) ;
7490: LD_STRING M3
7492: PPUSH
7493: CALL_OW 337
// stav = 4 ;
7497: LD_ADDR_EXP 60
7501: PUSH
7502: LD_INT 4
7504: ST_TO_ADDR
// DialogueOff ;
7505: CALL_OW 7
// Hint ( Driving ) ;
7509: LD_STRING Driving
7511: PPUSH
7512: CALL_OW 339
// wait ( 0 0$10 ) ;
7516: LD_INT 350
7518: PPUSH
7519: CALL_OW 67
// end ;
7523: PPOPN 1
7525: END
// every 0 0$5 trigger stav > 3 do var pom , i ; var a ;
7526: LD_EXP 60
7530: PUSH
7531: LD_INT 3
7533: GREATER
7534: IFFALSE 7644
7536: GO 7538
7538: DISABLE
7539: LD_INT 0
7541: PPUSH
7542: PPUSH
7543: PPUSH
// begin a = false ;
7544: LD_ADDR_VAR 0 3
7548: PUSH
7549: LD_INT 0
7551: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
7552: LD_ADDR_VAR 0 1
7556: PUSH
7557: LD_INT 22
7559: PUSH
7560: LD_EXP 1
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PUSH
7569: LD_INT 21
7571: PUSH
7572: LD_INT 2
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: PPUSH
7583: CALL_OW 69
7587: ST_TO_ADDR
// for i in pom do
7588: LD_ADDR_VAR 0 2
7592: PUSH
7593: LD_VAR 0 1
7597: PUSH
7598: FOR_IN
7599: IFFALSE 7626
// if GetLives ( i ) < 900 then
7601: LD_VAR 0 2
7605: PPUSH
7606: CALL_OW 256
7610: PUSH
7611: LD_INT 900
7613: LESS
7614: IFFALSE 7624
// a = true ;
7616: LD_ADDR_VAR 0 3
7620: PUSH
7621: LD_INT 1
7623: ST_TO_ADDR
7624: GO 7598
7626: POP
7627: POP
// if a then
7628: LD_VAR 0 3
7632: IFFALSE 7643
// Hint ( Repair ) else
7634: LD_STRING Repair
7636: PPUSH
7637: CALL_OW 339
7641: GO 7644
// enable ;
7643: ENABLE
// end ;
7644: PPOPN 3
7646: END
// every 0 0$5 trigger stav > 3 do var pom , i ; var a ;
7647: LD_EXP 60
7651: PUSH
7652: LD_INT 3
7654: GREATER
7655: IFFALSE 7765
7657: GO 7659
7659: DISABLE
7660: LD_INT 0
7662: PPUSH
7663: PPUSH
7664: PPUSH
// begin a = false ;
7665: LD_ADDR_VAR 0 3
7669: PUSH
7670: LD_INT 0
7672: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
7673: LD_ADDR_VAR 0 1
7677: PUSH
7678: LD_INT 22
7680: PUSH
7681: LD_EXP 1
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: LD_INT 21
7692: PUSH
7693: LD_INT 2
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PPUSH
7704: CALL_OW 69
7708: ST_TO_ADDR
// for i in pom do
7709: LD_ADDR_VAR 0 2
7713: PUSH
7714: LD_VAR 0 1
7718: PUSH
7719: FOR_IN
7720: IFFALSE 7747
// if GetFuel ( i ) < 20 then
7722: LD_VAR 0 2
7726: PPUSH
7727: CALL_OW 261
7731: PUSH
7732: LD_INT 20
7734: LESS
7735: IFFALSE 7745
// a = true ;
7737: LD_ADDR_VAR 0 3
7741: PUSH
7742: LD_INT 1
7744: ST_TO_ADDR
7745: GO 7719
7747: POP
7748: POP
// if a then
7749: LD_VAR 0 3
7753: IFFALSE 7764
// Hint ( Fuel ) else
7755: LD_STRING Fuel
7757: PPUSH
7758: CALL_OW 339
7762: GO 7765
// enable ;
7764: ENABLE
// end ;
7765: PPOPN 3
7767: END
// every 0 0$2 trigger stav = 4 and test_is_auto_in_area do var auto ; var ridic ; var mechs , i ;
7768: LD_EXP 60
7772: PUSH
7773: LD_INT 4
7775: EQUAL
7776: PUSH
7777: CALL 15913 0 0
7781: AND
7782: IFFALSE 8486
7784: GO 7786
7786: DISABLE
7787: LD_INT 0
7789: PPUSH
7790: PPUSH
7791: PPUSH
7792: PPUSH
// begin disable ( 991 ) ;
7793: LD_INT 991
7795: DISABLE_MARKED
// InGameOn ;
7796: CALL_OW 8
// auto = FilterUnitsInArea ( RU1_base , [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
7800: LD_ADDR_VAR 0 1
7804: PUSH
7805: LD_INT 3
7807: PPUSH
7808: LD_INT 22
7810: PUSH
7811: LD_EXP 1
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: PUSH
7820: LD_INT 21
7822: PUSH
7823: LD_INT 2
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PPUSH
7834: CALL_OW 70
7838: ST_TO_ADDR
// auto = auto [ 1 ] ;
7839: LD_ADDR_VAR 0 1
7843: PUSH
7844: LD_VAR 0 1
7848: PUSH
7849: LD_INT 1
7851: ARRAY
7852: ST_TO_ADDR
// ridic = IsDrivenBy ( auto ) ;
7853: LD_ADDR_VAR 0 2
7857: PUSH
7858: LD_VAR 0 1
7862: PPUSH
7863: CALL_OW 311
7867: ST_TO_ADDR
// ComMoveXY ( ridic , 117 , 101 ) ;
7868: LD_VAR 0 2
7872: PPUSH
7873: LD_INT 117
7875: PPUSH
7876: LD_INT 101
7878: PPUSH
7879: CALL_OW 111
// CenterOnUnits ( [ auto ] ) ;
7883: LD_VAR 0 1
7887: PUSH
7888: EMPTY
7889: LIST
7890: PPUSH
7891: CALL_OW 85
// Say ( kurin , D10-Kur-1 ) ;
7895: LD_EXP 53
7899: PPUSH
7900: LD_STRING D10-Kur-1
7902: PPUSH
7903: CALL_OW 88
// Say ( bel , D10-Bel-1 ) ;
7907: LD_EXP 52
7911: PPUSH
7912: LD_STRING D10-Bel-1
7914: PPUSH
7915: CALL_OW 88
// repeat ComExitVehicle ( ridic ) ;
7919: LD_VAR 0 2
7923: PPUSH
7924: CALL_OW 121
// wait ( 0 0$1 ) ;
7928: LD_INT 35
7930: PPUSH
7931: CALL_OW 67
// until not IsInUnit ( ridic ) ;
7935: LD_VAR 0 2
7939: PPUSH
7940: CALL_OW 310
7944: NOT
7945: IFFALSE 7919
// SetFuel ( auto , 100 ) ;
7947: LD_VAR 0 1
7951: PPUSH
7952: LD_INT 100
7954: PPUSH
7955: CALL_OW 240
// AddComHold ( ridic ) ;
7959: LD_VAR 0 2
7963: PPUSH
7964: CALL_OW 200
// wait ( 0 0$1 ) ;
7968: LD_INT 35
7970: PPUSH
7971: CALL_OW 67
// if BELKOV_MRTVY then
7975: LD_EXP 46
7979: IFFALSE 8017
// begin Say ( bur , D10-Bur-1 ) ;
7981: LD_EXP 50
7985: PPUSH
7986: LD_STRING D10-Bur-1
7988: PPUSH
7989: CALL_OW 88
// Say ( bel , D10-Bel-2 ) ;
7993: LD_EXP 52
7997: PPUSH
7998: LD_STRING D10-Bel-2
8000: PPUSH
8001: CALL_OW 88
// Say ( bur , D10-Bur-2 ) ;
8005: LD_EXP 50
8009: PPUSH
8010: LD_STRING D10-Bur-2
8012: PPUSH
8013: CALL_OW 88
// end ; AddComHold ( ridic ) ;
8017: LD_VAR 0 2
8021: PPUSH
8022: CALL_OW 200
// if BELKOV_MRTVY then
8026: LD_EXP 46
8030: IFFALSE 8046
// Say ( kurin , D10-Kur-2a ) else
8032: LD_EXP 53
8036: PPUSH
8037: LD_STRING D10-Kur-2a
8039: PPUSH
8040: CALL_OW 88
8044: GO 8058
// Say ( kurin , D10-Kur-2 ) ;
8046: LD_EXP 53
8050: PPUSH
8051: LD_STRING D10-Kur-2
8053: PPUSH
8054: CALL_OW 88
// ComExitBuilding ( bel ) ;
8058: LD_EXP 52
8062: PPUSH
8063: CALL_OW 122
// while IsInUnit ( ridic ) do
8067: LD_VAR 0 2
8071: PPUSH
8072: CALL_OW 310
8076: IFFALSE 8096
// begin wait ( 0 0$1 ) ;
8078: LD_INT 35
8080: PPUSH
8081: CALL_OW 67
// ComExitVehicle ( ridic ) ;
8085: LD_VAR 0 2
8089: PPUSH
8090: CALL_OW 121
// end ;
8094: GO 8067
// AddComEnterUnit ( bel , auto ) ;
8096: LD_EXP 52
8100: PPUSH
8101: LD_VAR 0 1
8105: PPUSH
8106: CALL_OW 180
// wait ( 0 0$1 ) ;
8110: LD_INT 35
8112: PPUSH
8113: CALL_OW 67
// while IsInUnit ( bel ) = 0 do
8117: LD_EXP 52
8121: PPUSH
8122: CALL_OW 310
8126: PUSH
8127: LD_INT 0
8129: EQUAL
8130: IFFALSE 8164
// begin wait ( 0 0$1 ) ;
8132: LD_INT 35
8134: PPUSH
8135: CALL_OW 67
// ComExitBuilding ( bel ) ;
8139: LD_EXP 52
8143: PPUSH
8144: CALL_OW 122
// AddComEnterUnit ( bel , auto ) ;
8148: LD_EXP 52
8152: PPUSH
8153: LD_VAR 0 1
8157: PPUSH
8158: CALL_OW 180
// end ;
8162: GO 8117
// ComFree ( ridic ) ;
8164: LD_VAR 0 2
8168: PPUSH
8169: CALL_OW 139
// Say ( kurin , D10-Kur-2b ) ;
8173: LD_EXP 53
8177: PPUSH
8178: LD_STRING D10-Kur-2b
8180: PPUSH
8181: CALL_OW 88
// ridic_1_auta = ridic ;
8185: LD_ADDR_LOC 6
8189: PUSH
8190: LD_VAR 0 2
8194: ST_TO_ADDR
// ChangeMissionObjectives ( M4 ) ;
8195: LD_STRING M4
8197: PPUSH
8198: CALL_OW 337
// ComMoveXY ( ridic_1_auta , 68 , 92 ) ;
8202: LD_LOC 6
8206: PPUSH
8207: LD_INT 68
8209: PPUSH
8210: LD_INT 92
8212: PPUSH
8213: CALL_OW 111
// wait ( 0 0$2 ) ;
8217: LD_INT 70
8219: PPUSH
8220: CALL_OW 67
// objReturn := true ;
8224: LD_ADDR_EXP 29
8228: PUSH
8229: LD_INT 1
8231: ST_TO_ADDR
// stav = 5 ;
8232: LD_ADDR_EXP 60
8236: PUSH
8237: LD_INT 5
8239: ST_TO_ADDR
// InGameOff ;
8240: CALL_OW 9
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) then
8244: LD_INT 22
8246: PUSH
8247: LD_INT 6
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: PUSH
8254: LD_INT 3
8256: PUSH
8257: LD_INT 24
8259: PUSH
8260: LD_INT 1000
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 21
8273: PUSH
8274: LD_INT 2
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: PPUSH
8286: CALL_OW 69
8290: IFFALSE 8479
// begin mechs := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 3 ] ] ) ;
8292: LD_ADDR_VAR 0 3
8296: PUSH
8297: LD_INT 22
8299: PUSH
8300: LD_INT 6
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PUSH
8307: LD_INT 25
8309: PUSH
8310: LD_INT 3
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: PPUSH
8321: CALL_OW 69
8325: ST_TO_ADDR
// ComExitBuilding ( mechs ) ;
8326: LD_VAR 0 3
8330: PPUSH
8331: CALL_OW 122
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) do
8335: LD_ADDR_VAR 0 4
8339: PUSH
8340: LD_INT 22
8342: PUSH
8343: LD_INT 6
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: PUSH
8350: LD_INT 3
8352: PUSH
8353: LD_INT 24
8355: PUSH
8356: LD_INT 1000
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PUSH
8367: LD_INT 21
8369: PUSH
8370: LD_INT 2
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: LIST
8381: PPUSH
8382: CALL_OW 69
8386: PUSH
8387: FOR_IN
8388: IFFALSE 8406
// AddComRepairVehicle ( mechs , i ) ;
8390: LD_VAR 0 3
8394: PPUSH
8395: LD_VAR 0 4
8399: PPUSH
8400: CALL_OW 189
8404: GO 8387
8406: POP
8407: POP
// repeat wait ( 0 0$1 ) ;
8408: LD_INT 35
8410: PPUSH
8411: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) = 0 ;
8415: LD_INT 22
8417: PUSH
8418: LD_INT 6
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: PUSH
8425: LD_INT 3
8427: PUSH
8428: LD_INT 24
8430: PUSH
8431: LD_INT 1000
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: PUSH
8442: LD_INT 21
8444: PUSH
8445: LD_INT 2
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: LIST
8456: PPUSH
8457: CALL_OW 69
8461: PUSH
8462: LD_INT 0
8464: EQUAL
8465: IFFALSE 8408
// AddComEnterUnit ( mechs , RU1_tov ) ;
8467: LD_VAR 0 3
8471: PPUSH
8472: LD_INT 2
8474: PPUSH
8475: CALL_OW 180
// end ; rusi_cesta_na_sever ;
8479: CALL 14617 0 0
// enable ( 992 ) ;
8483: LD_INT 992
8485: ENABLE_MARKED
// end ;
8486: PPOPN 4
8488: END
// every 0 0$1 trigger stav = 5 and IsInArea ( ridic_1_auta , RU2_base ) do var poc , i ;
8489: LD_EXP 60
8493: PUSH
8494: LD_INT 5
8496: EQUAL
8497: PUSH
8498: LD_LOC 6
8502: PPUSH
8503: LD_INT 1
8505: PPUSH
8506: CALL_OW 308
8510: AND
8511: IFFALSE 8668
8513: GO 8515
8515: DISABLE
8516: LD_INT 0
8518: PPUSH
8519: PPUSH
// begin poc = 0 ;
8520: LD_ADDR_VAR 0 1
8524: PUSH
8525: LD_INT 0
8527: ST_TO_ADDR
// DialogueOn ;
8528: CALL_OW 6
// Say ( plat , D11-Pla-1 ) ;
8532: LD_EXP 54
8536: PPUSH
8537: LD_STRING D11-Pla-1
8539: PPUSH
8540: CALL_OW 88
// for i in Rusi_enter do
8544: LD_ADDR_VAR 0 2
8548: PUSH
8549: LD_EXP 55
8553: PUSH
8554: FOR_IN
8555: IFFALSE 8584
// if IsLive ( i ) then
8557: LD_VAR 0 2
8561: PPUSH
8562: CALL_OW 300
8566: IFFALSE 8582
// poc = poc + 1 ;
8568: LD_ADDR_VAR 0 1
8572: PUSH
8573: LD_VAR 0 1
8577: PUSH
8578: LD_INT 1
8580: PLUS
8581: ST_TO_ADDR
8582: GO 8554
8584: POP
8585: POP
// if poc > 1 then
8586: LD_VAR 0 1
8590: PUSH
8591: LD_INT 1
8593: GREATER
8594: IFFALSE 8610
// Say ( bur , D11-Bur-1a ) else
8596: LD_EXP 50
8600: PPUSH
8601: LD_STRING D11-Bur-1a
8603: PPUSH
8604: CALL_OW 88
8608: GO 8622
// Say ( bur , D11-Bur-1 ) ;
8610: LD_EXP 50
8614: PPUSH
8615: LD_STRING D11-Bur-1
8617: PPUSH
8618: CALL_OW 88
// ChangeMissionObjectives ( M5 ) ;
8622: LD_STRING M5
8624: PPUSH
8625: CALL_OW 337
// objReturn := false ;
8629: LD_ADDR_EXP 29
8633: PUSH
8634: LD_INT 0
8636: ST_TO_ADDR
// CreateCratesXYR ( 2 , 64 , 83 , 6 , true ) ;
8637: LD_INT 2
8639: PPUSH
8640: LD_INT 64
8642: PPUSH
8643: LD_INT 83
8645: PPUSH
8646: LD_INT 6
8648: PPUSH
8649: LD_INT 1
8651: PPUSH
8652: CALL_OW 56
// stav = 6 ;
8656: LD_ADDR_EXP 60
8660: PUSH
8661: LD_INT 6
8663: ST_TO_ADDR
// DialogueOff ;
8664: CALL_OW 7
// end ;
8668: PPOPN 2
8670: END
// export function dialog_boreni ; begin
8671: LD_INT 0
8673: PPUSH
// Say ( plat , D6-Pla-1 ) ;
8674: LD_EXP 54
8678: PPUSH
8679: LD_STRING D6-Pla-1
8681: PPUSH
8682: CALL_OW 88
// Say ( bur , D6-Bur-1 ) ;
8686: LD_EXP 50
8690: PPUSH
8691: LD_STRING D6-Bur-1
8693: PPUSH
8694: CALL_OW 88
// end ;
8698: LD_VAR 0 1
8702: RET
// export function dialog_past_amici ; var pom , i ; begin
8703: LD_INT 0
8705: PPUSH
8706: PPUSH
8707: PPUSH
// DialogueOn ;
8708: CALL_OW 6
// CenterOnUnits ( Rusi_sever ) ;
8712: LD_EXP 56
8716: PPUSH
8717: CALL_OW 85
// wait ( 0 0$2 ) ;
8721: LD_INT 70
8723: PPUSH
8724: CALL_OW 67
// pom = UnitFilter ( Amici_past , [ [ f_ok ] , [ f_type , unit_human ] ] ) ;
8728: LD_ADDR_VAR 0 2
8732: PUSH
8733: LD_EXP 72
8737: PPUSH
8738: LD_INT 50
8740: PUSH
8741: EMPTY
8742: LIST
8743: PUSH
8744: LD_INT 21
8746: PUSH
8747: LD_INT 1
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PPUSH
8758: CALL_OW 72
8762: ST_TO_ADDR
// for i in pom do
8763: LD_ADDR_VAR 0 3
8767: PUSH
8768: LD_VAR 0 2
8772: PUSH
8773: FOR_IN
8774: IFFALSE 8807
// if GetSex ( i ) = sex_male then
8776: LD_VAR 0 3
8780: PPUSH
8781: CALL_OW 258
8785: PUSH
8786: LD_INT 1
8788: EQUAL
8789: IFFALSE 8805
// begin SayRadio ( i , D13-Sol1-1 ) ;
8791: LD_VAR 0 3
8795: PPUSH
8796: LD_STRING D13-Sol1-1
8798: PPUSH
8799: CALL_OW 94
// break ;
8803: GO 8807
// end ;
8805: GO 8773
8807: POP
8808: POP
// SayRadio ( bel , D13-Bel-1 ) ;
8809: LD_EXP 52
8813: PPUSH
8814: LD_STRING D13-Bel-1
8816: PPUSH
8817: CALL_OW 94
// SayRadio ( kurin , D13-Kur-1 ) ;
8821: LD_EXP 53
8825: PPUSH
8826: LD_STRING D13-Kur-1
8828: PPUSH
8829: CALL_OW 94
// SayRadio ( bel , D13-Bel-2 ) ;
8833: LD_EXP 52
8837: PPUSH
8838: LD_STRING D13-Bel-2
8840: PPUSH
8841: CALL_OW 94
// end ;
8845: LD_VAR 0 1
8849: RET
// export function rozhovor_ukonceni_m5 ; begin
8850: LD_INT 0
8852: PPUSH
// wait ( 0 0$2 ) ;
8853: LD_INT 70
8855: PPUSH
8856: CALL_OW 67
// DialogueOn ;
8860: CALL_OW 6
// Say ( bur , D12-Bur-1 ) ;
8864: LD_EXP 50
8868: PPUSH
8869: LD_STRING D12-Bur-1
8871: PPUSH
8872: CALL_OW 88
// Say ( plat , D12-Pla-1 ) ;
8876: LD_EXP 54
8880: PPUSH
8881: LD_STRING D12-Pla-1
8883: PPUSH
8884: CALL_OW 88
// Say ( bur , D12-Bur-2 ) ;
8888: LD_EXP 50
8892: PPUSH
8893: LD_STRING D12-Bur-2
8895: PPUSH
8896: CALL_OW 88
// Say ( plat , D12-Pla-2 ) ;
8900: LD_EXP 54
8904: PPUSH
8905: LD_STRING D12-Pla-2
8907: PPUSH
8908: CALL_OW 88
// Say ( bur , D12-Bur-3 ) ;
8912: LD_EXP 50
8916: PPUSH
8917: LD_STRING D12-Bur-3
8919: PPUSH
8920: CALL_OW 88
// Say ( plat , D12-Pla-3 ) ;
8924: LD_EXP 54
8928: PPUSH
8929: LD_STRING D12-Pla-3
8931: PPUSH
8932: CALL_OW 88
// ChangeMissionObjectives ( M6 ) ;
8936: LD_STRING M6
8938: PPUSH
8939: CALL_OW 337
// DialogueOff ;
8943: CALL_OW 7
// disable ( 992 ) ;
8947: LD_INT 992
8949: DISABLE_MARKED
// MissionProper ;
8950: CALL 2139 0 0
// end ;
8954: LD_VAR 0 1
8958: RET
// every 0 0$5 trigger stav = 7 do var i ; var pom ; var avideni ;
8959: LD_EXP 60
8963: PUSH
8964: LD_INT 7
8966: EQUAL
8967: IFFALSE 9756
8969: GO 8971
8971: DISABLE
8972: LD_INT 0
8974: PPUSH
8975: PPUSH
8976: PPUSH
// begin wait ( 0 0$1 ) ;
8977: LD_INT 35
8979: PPUSH
8980: CALL_OW 67
// dialog_past_amici ;
8984: CALL 8703 0 0
// CenterNowOnXY ( 58 , 17 ) ;
8988: LD_INT 58
8990: PPUSH
8991: LD_INT 17
8993: PPUSH
8994: CALL_OW 86
// ComMoveXY ( Rusi_sever , 59 , 16 ) ;
8998: LD_EXP 56
9002: PPUSH
9003: LD_INT 59
9005: PPUSH
9006: LD_INT 16
9008: PPUSH
9009: CALL_OW 111
// pom = FilterAllUnits ( [ [ f_side , You ] ] ) ;
9013: LD_ADDR_VAR 0 2
9017: PUSH
9018: LD_INT 22
9020: PUSH
9021: LD_EXP 1
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PUSH
9030: EMPTY
9031: LIST
9032: PPUSH
9033: CALL_OW 69
9037: ST_TO_ADDR
// ComStop ( pom ) ;
9038: LD_VAR 0 2
9042: PPUSH
9043: CALL_OW 141
// for i in pom do
9047: LD_ADDR_VAR 0 1
9051: PUSH
9052: LD_VAR 0 2
9056: PUSH
9057: FOR_IN
9058: IFFALSE 9076
// DoNotAttack ( Amici , i ) ;
9060: LD_EXP 2
9064: PPUSH
9065: LD_VAR 0 1
9069: PPUSH
9070: CALL_OW 471
9074: GO 9057
9076: POP
9077: POP
// DoNotAttack ( Amici , bel ) ;
9078: LD_EXP 2
9082: PPUSH
9083: LD_EXP 52
9087: PPUSH
9088: CALL_OW 471
// DialogueOff ;
9092: CALL_OW 7
// InGameOn ;
9096: CALL_OW 8
// avideni = place_amik_k_videni ;
9100: LD_ADDR_VAR 0 3
9104: PUSH
9105: CALL 5080 0 0
9109: ST_TO_ADDR
// ComMoveXY ( avideni , 55 , 11 ) ;
9110: LD_VAR 0 3
9114: PPUSH
9115: LD_INT 55
9117: PPUSH
9118: LD_INT 11
9120: PPUSH
9121: CALL_OW 111
// while FilterAllUnits ( [ [ f_side , Amici ] , [ f_see , You2 ] ] ) = 0 do
9125: LD_INT 22
9127: PUSH
9128: LD_EXP 2
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: PUSH
9137: LD_INT 101
9139: PUSH
9140: LD_EXP 4
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: PPUSH
9153: CALL_OW 69
9157: PUSH
9158: LD_INT 0
9160: EQUAL
9161: IFFALSE 9187
// begin wait ( 0 0$03 ) ;
9163: LD_INT 105
9165: PPUSH
9166: CALL_OW 67
// ComMoveXY ( avideni , 55 , 11 ) ;
9170: LD_VAR 0 3
9174: PPUSH
9175: LD_INT 55
9177: PPUSH
9178: LD_INT 11
9180: PPUSH
9181: CALL_OW 111
// end ;
9185: GO 9125
// DoNotAttack ( Amici , auto_belkov ) ;
9187: LD_EXP 2
9191: PPUSH
9192: LD_EXP 70
9196: PPUSH
9197: CALL_OW 471
// while IsInUnit ( bel ) do
9201: LD_EXP 52
9205: PPUSH
9206: CALL_OW 310
9210: IFFALSE 9230
// begin ComExitVehicle ( bel ) ;
9212: LD_EXP 52
9216: PPUSH
9217: CALL_OW 121
// wait ( 0 0$0.1 ) ;
9221: LD_INT 4
9223: PPUSH
9224: CALL_OW 67
// end ;
9228: GO 9201
// Amici_past = Amici_past ^ avideni ;
9230: LD_ADDR_EXP 72
9234: PUSH
9235: LD_EXP 72
9239: PUSH
9240: LD_VAR 0 3
9244: ADD
9245: ST_TO_ADDR
// wait ( 0 0$0.5 ) ;
9246: LD_INT 18
9248: PPUSH
9249: CALL_OW 67
// AddComMoveXY ( bel , 47 , 7 ) ;
9253: LD_EXP 52
9257: PPUSH
9258: LD_INT 47
9260: PPUSH
9261: LD_INT 7
9263: PPUSH
9264: CALL_OW 171
// AddComMoveXY ( bel , 33 , 5 ) ;
9268: LD_EXP 52
9272: PPUSH
9273: LD_INT 33
9275: PPUSH
9276: LD_INT 5
9278: PPUSH
9279: CALL_OW 171
// AddComMoveXY ( bel , 34 , 11 ) ;
9283: LD_EXP 52
9287: PPUSH
9288: LD_INT 34
9290: PPUSH
9291: LD_INT 11
9293: PPUSH
9294: CALL_OW 171
// AddComMoveXY ( bel , 45 , 13 ) ;
9298: LD_EXP 52
9302: PPUSH
9303: LD_INT 45
9305: PPUSH
9306: LD_INT 13
9308: PPUSH
9309: CALL_OW 171
// SetLives ( IsInUnit ( bel ) , 600 ) ;
9313: LD_EXP 52
9317: PPUSH
9318: CALL_OW 310
9322: PPUSH
9323: LD_INT 600
9325: PPUSH
9326: CALL_OW 234
// ComWalk ( Amici_past ) ;
9330: LD_EXP 72
9334: PPUSH
9335: CALL_OW 138
// InGameOff ;
9339: CALL_OW 9
// DialogueOn ;
9343: CALL_OW 6
// Say ( Amici_past [ 1 ] , D14-Sol1-1 ) ;
9347: LD_EXP 72
9351: PUSH
9352: LD_INT 1
9354: ARRAY
9355: PPUSH
9356: LD_STRING D14-Sol1-1
9358: PPUSH
9359: CALL_OW 88
// DialogueOff ;
9363: CALL_OW 7
// music_class = music_combat ;
9367: LD_ADDR_OWVAR 72
9371: PUSH
9372: LD_INT 1
9374: ST_TO_ADDR
// InGameOn ;
9375: CALL_OW 8
// for i in Rusi_sever do
9379: LD_ADDR_VAR 0 1
9383: PUSH
9384: LD_EXP 56
9388: PUSH
9389: FOR_IN
9390: IFFALSE 9425
// if GetType ( i ) = unit_vehicle then
9392: LD_VAR 0 1
9396: PPUSH
9397: CALL_OW 247
9401: PUSH
9402: LD_INT 2
9404: EQUAL
9405: IFFALSE 9423
// Rusi_sever = Rusi_sever diff i ;
9407: LD_ADDR_EXP 56
9411: PUSH
9412: LD_EXP 56
9416: PUSH
9417: LD_VAR 0 1
9421: DIFF
9422: ST_TO_ADDR
9423: GO 9389
9425: POP
9426: POP
// ComMoveXY ( Rusi_sever , 47 , 7 ) ;
9427: LD_EXP 56
9431: PPUSH
9432: LD_INT 47
9434: PPUSH
9435: LD_INT 7
9437: PPUSH
9438: CALL_OW 111
// AddComMoveXY ( Rusi_sever , 33 , 5 ) ;
9442: LD_EXP 56
9446: PPUSH
9447: LD_INT 33
9449: PPUSH
9450: LD_INT 5
9452: PPUSH
9453: CALL_OW 171
// AddComMoveXY ( Rusi_sever , 34 , 11 ) ;
9457: LD_EXP 56
9461: PPUSH
9462: LD_INT 34
9464: PPUSH
9465: LD_INT 11
9467: PPUSH
9468: CALL_OW 171
// AddComMoveXY ( Rusi_sever , 45 , 13 ) ;
9472: LD_EXP 56
9476: PPUSH
9477: LD_INT 45
9479: PPUSH
9480: LD_INT 13
9482: PPUSH
9483: CALL_OW 171
// Rusi_sever = Rusi_sever ^ bel ;
9487: LD_ADDR_EXP 56
9491: PUSH
9492: LD_EXP 56
9496: PUSH
9497: LD_EXP 52
9501: ADD
9502: ST_TO_ADDR
// InGameOff ;
9503: CALL_OW 9
// DialogueOn ;
9507: CALL_OW 6
// Say ( bel , D14-Bel-1 ) ;
9511: LD_EXP 52
9515: PPUSH
9516: LD_STRING D14-Bel-1
9518: PPUSH
9519: CALL_OW 88
// DialogueOff ;
9523: CALL_OW 7
// InGameOn ;
9527: CALL_OW 8
// ComAgressiveMove ( Amici_past , 62 , 18 ) ;
9531: LD_EXP 72
9535: PPUSH
9536: LD_INT 62
9538: PPUSH
9539: LD_INT 18
9541: PPUSH
9542: CALL_OW 114
// wait ( 2 ) ;
9546: LD_INT 2
9548: PPUSH
9549: CALL_OW 67
// rusi_save_belkov ;
9553: CALL 16342 0 0
// amici_boj ;
9557: CALL 18192 0 0
// belkov_solved = 1 ;
9561: LD_ADDR_EXP 48
9565: PUSH
9566: LD_INT 1
9568: ST_TO_ADDR
// CenterOnUnits ( [ bel ] ) ;
9569: LD_EXP 52
9573: PUSH
9574: EMPTY
9575: LIST
9576: PPUSH
9577: CALL_OW 85
// wait ( 0 0$2 ) ;
9581: LD_INT 70
9583: PPUSH
9584: CALL_OW 67
// while not See ( Amici , bel ) do
9588: LD_EXP 2
9592: PPUSH
9593: LD_EXP 52
9597: PPUSH
9598: CALL_OW 292
9602: NOT
9603: IFFALSE 9628
// begin AddComMoveUnit ( Amici_past , bel ) ;
9605: LD_EXP 72
9609: PPUSH
9610: LD_EXP 52
9614: PPUSH
9615: CALL_OW 172
// wait ( 0 0$1 ) ;
9619: LD_INT 35
9621: PPUSH
9622: CALL_OW 67
// end ;
9626: GO 9588
// InGameOff ;
9628: CALL_OW 9
// DialogueOn ;
9632: CALL_OW 6
// SayRadio ( bel , D14-Bel-1a ) ;
9636: LD_EXP 52
9640: PPUSH
9641: LD_STRING D14-Bel-1a
9643: PPUSH
9644: CALL_OW 94
// SayRadio ( kurin , D14-Kur-1 ) ;
9648: LD_EXP 53
9652: PPUSH
9653: LD_STRING D14-Kur-1
9655: PPUSH
9656: CALL_OW 94
// SayRadio ( bel , D14-Bel-2 ) ;
9660: LD_EXP 52
9664: PPUSH
9665: LD_STRING D14-Bel-2
9667: PPUSH
9668: CALL_OW 94
// SayRadio ( kurin , D14-Kur-2 ) ;
9672: LD_EXP 53
9676: PPUSH
9677: LD_STRING D14-Kur-2
9679: PPUSH
9680: CALL_OW 94
// DialogueOff ;
9684: CALL_OW 7
// music_class = 0 ;
9688: LD_ADDR_OWVAR 72
9692: PUSH
9693: LD_INT 0
9695: ST_TO_ADDR
// for i in pom do
9696: LD_ADDR_VAR 0 1
9700: PUSH
9701: LD_VAR 0 2
9705: PUSH
9706: FOR_IN
9707: IFFALSE 9725
// NormalAttack ( Amici , i ) ;
9709: LD_EXP 2
9713: PPUSH
9714: LD_VAR 0 1
9718: PPUSH
9719: CALL_OW 472
9723: GO 9706
9725: POP
9726: POP
// NormalAttack ( Amici , bel ) ;
9727: LD_EXP 2
9731: PPUSH
9732: LD_EXP 52
9736: PPUSH
9737: CALL_OW 472
// amici_po_kecech ;
9741: CALL 19470 0 0
// wait ( 0 0$5 ) ;
9745: LD_INT 175
9747: PPUSH
9748: CALL_OW 67
// dialog_burlak_help ;
9752: CALL 9759 0 0
// end ;
9756: PPOPN 3
9758: END
// function dialog_burlak_help ; begin
9759: LD_INT 0
9761: PPUSH
// DialogueOn ;
9762: CALL_OW 6
// Say ( bur , D14a-Bur-1 ) ;
9766: LD_EXP 50
9770: PPUSH
9771: LD_STRING D14a-Bur-1
9773: PPUSH
9774: CALL_OW 88
// Say ( plat , D14a-Pla-1 ) ;
9778: LD_EXP 54
9782: PPUSH
9783: LD_STRING D14a-Pla-1
9785: PPUSH
9786: CALL_OW 88
// Say ( bur , D14a-Bur-2 ) ;
9790: LD_EXP 50
9794: PPUSH
9795: LD_STRING D14a-Bur-2
9797: PPUSH
9798: CALL_OW 88
// Say ( plat , D14a-Pla-2 ) ;
9802: LD_EXP 54
9806: PPUSH
9807: LD_STRING D14a-Pla-2
9809: PPUSH
9810: CALL_OW 88
// Say ( bur , D14a-Bur-3 ) ;
9814: LD_EXP 50
9818: PPUSH
9819: LD_STRING D14a-Bur-3
9821: PPUSH
9822: CALL_OW 88
// Say ( plat , D14a-Pla-3 ) ;
9826: LD_EXP 54
9830: PPUSH
9831: LD_STRING D14a-Pla-3
9833: PPUSH
9834: CALL_OW 88
// Say ( bur , D14a-Bur-4 ) ;
9838: LD_EXP 50
9842: PPUSH
9843: LD_STRING D14a-Bur-4
9845: PPUSH
9846: CALL_OW 88
// Say ( plat , D14a-Pla-4 ) ;
9850: LD_EXP 54
9854: PPUSH
9855: LD_STRING D14a-Pla-4
9857: PPUSH
9858: CALL_OW 88
// DialogueOff ;
9862: CALL_OW 7
// end ;
9866: LD_VAR 0 1
9870: RET
// every 0 0$6 trigger bedny_hint do
9871: LD_EXP 65
9875: IFFALSE 9887
9877: GO 9879
9879: DISABLE
// begin Hint ( GatheringMaterial ) ;
9880: LD_STRING GatheringMaterial
9882: PPUSH
9883: CALL_OW 339
// end ;
9887: END
// export function hlaska_platonov_bedny ; begin
9888: LD_INT 0
9890: PPUSH
// Say ( plat , D4-Pla-1 ) ;
9891: LD_EXP 54
9895: PPUSH
9896: LD_STRING D4-Pla-1
9898: PPUSH
9899: CALL_OW 88
// end ;
9903: LD_VAR 0 1
9907: RET
// function GetPeople ( sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 ; begin
9908: LD_INT 0
9910: PPUSH
9911: PPUSH
9912: PPUSH
9913: PPUSH
9914: PPUSH
9915: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
9916: LD_ADDR_VAR 0 6
9920: PUSH
9921: LD_INT 22
9923: PUSH
9924: LD_EXP 1
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: PUSH
9933: LD_INT 25
9935: PUSH
9936: LD_INT 4
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PUSH
9943: LD_INT 26
9945: PUSH
9946: LD_VAR 0 1
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: LIST
9959: PPUSH
9960: CALL_OW 69
9964: ST_TO_ADDR
// pom2 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
9965: LD_ADDR_VAR 0 7
9969: PUSH
9970: LD_INT 22
9972: PUSH
9973: LD_EXP 1
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: PUSH
9982: LD_INT 25
9984: PUSH
9985: LD_INT 3
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: PUSH
9992: LD_INT 26
9994: PUSH
9995: LD_VAR 0 1
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: LIST
10008: PPUSH
10009: CALL_OW 69
10013: ST_TO_ADDR
// pom3 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
10014: LD_ADDR_VAR 0 8
10018: PUSH
10019: LD_INT 22
10021: PUSH
10022: LD_EXP 1
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PUSH
10031: LD_INT 25
10033: PUSH
10034: LD_INT 2
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PUSH
10041: LD_INT 26
10043: PUSH
10044: LD_VAR 0 1
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: LIST
10057: PPUSH
10058: CALL_OW 69
10062: ST_TO_ADDR
// pom4 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
10063: LD_ADDR_VAR 0 9
10067: PUSH
10068: LD_INT 22
10070: PUSH
10071: LD_EXP 1
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: PUSH
10080: LD_INT 25
10082: PUSH
10083: LD_INT 1
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: PUSH
10090: LD_INT 26
10092: PUSH
10093: LD_VAR 0 1
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: LIST
10106: PPUSH
10107: CALL_OW 69
10111: ST_TO_ADDR
// case povolani of class_scientistic :
10112: LD_VAR 0 2
10116: PUSH
10117: LD_INT 4
10119: DOUBLE
10120: EQUAL
10121: IFTRUE 10125
10123: GO 10138
10125: POP
// pom = pom1 ; class_mechanic :
10126: LD_ADDR_VAR 0 5
10130: PUSH
10131: LD_VAR 0 6
10135: ST_TO_ADDR
10136: GO 10202
10138: LD_INT 3
10140: DOUBLE
10141: EQUAL
10142: IFTRUE 10146
10144: GO 10159
10146: POP
// pom = pom2 ; class_engineer :
10147: LD_ADDR_VAR 0 5
10151: PUSH
10152: LD_VAR 0 7
10156: ST_TO_ADDR
10157: GO 10202
10159: LD_INT 2
10161: DOUBLE
10162: EQUAL
10163: IFTRUE 10167
10165: GO 10180
10167: POP
// pom = pom3 ; class_soldier :
10168: LD_ADDR_VAR 0 5
10172: PUSH
10173: LD_VAR 0 8
10177: ST_TO_ADDR
10178: GO 10202
10180: LD_INT 1
10182: DOUBLE
10183: EQUAL
10184: IFTRUE 10188
10186: GO 10201
10188: POP
// pom = pom4 ; end ;
10189: LD_ADDR_VAR 0 5
10193: PUSH
10194: LD_VAR 0 9
10198: ST_TO_ADDR
10199: GO 10202
10201: POP
// if povolani <> class_scientistic then
10202: LD_VAR 0 2
10206: PUSH
10207: LD_INT 4
10209: NONEQUAL
10210: IFFALSE 10228
// pom = pom ^ pom1 ;
10212: LD_ADDR_VAR 0 5
10216: PUSH
10217: LD_VAR 0 5
10221: PUSH
10222: LD_VAR 0 6
10226: ADD
10227: ST_TO_ADDR
// if povolani <> class_mechanic then
10228: LD_VAR 0 2
10232: PUSH
10233: LD_INT 3
10235: NONEQUAL
10236: IFFALSE 10254
// pom = pom ^ pom2 ;
10238: LD_ADDR_VAR 0 5
10242: PUSH
10243: LD_VAR 0 5
10247: PUSH
10248: LD_VAR 0 7
10252: ADD
10253: ST_TO_ADDR
// if povolani <> class_engineer then
10254: LD_VAR 0 2
10258: PUSH
10259: LD_INT 2
10261: NONEQUAL
10262: IFFALSE 10280
// pom = pom ^ pom3 ;
10264: LD_ADDR_VAR 0 5
10268: PUSH
10269: LD_VAR 0 5
10273: PUSH
10274: LD_VAR 0 8
10278: ADD
10279: ST_TO_ADDR
// if povolani <> class_soldier then
10280: LD_VAR 0 2
10284: PUSH
10285: LD_INT 1
10287: NONEQUAL
10288: IFFALSE 10306
// pom = pom ^ pom4 ;
10290: LD_ADDR_VAR 0 5
10294: PUSH
10295: LD_VAR 0 5
10299: PUSH
10300: LD_VAR 0 9
10304: ADD
10305: ST_TO_ADDR
// result := pom diff diffseznam ;
10306: LD_ADDR_VAR 0 4
10310: PUSH
10311: LD_VAR 0 5
10315: PUSH
10316: LD_VAR 0 3
10320: DIFF
10321: ST_TO_ADDR
// end ;
10322: LD_VAR 0 4
10326: RET
// every 0 0$1 trigger test_is_in_area_burlak and venku marked 991 do var pom ;
10327: CALL 13832 0 0
10331: PUSH
10332: LD_EXP 61
10336: AND
10337: IFFALSE 10424
10339: GO 10341
10341: DISABLE
10342: LD_INT 0
10344: PPUSH
// begin pom = FilterUnitsInArea ( RU1_base , [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
10345: LD_ADDR_VAR 0 1
10349: PUSH
10350: LD_INT 3
10352: PPUSH
10353: LD_INT 22
10355: PUSH
10356: LD_EXP 1
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 21
10367: PUSH
10368: LD_INT 2
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PPUSH
10379: CALL_OW 70
10383: ST_TO_ADDR
// if pom > 0 then
10384: LD_VAR 0 1
10388: PUSH
10389: LD_INT 0
10391: GREATER
10392: IFFALSE 10396
// exit ;
10394: GO 10424
// InGameOn ;
10396: CALL_OW 8
// Say ( kurin , D1a-Kur-1 ) ;
10400: LD_EXP 53
10404: PPUSH
10405: LD_STRING D1a-Kur-1
10407: PPUSH
10408: CALL_OW 88
// InGameOff ;
10412: CALL_OW 9
// venku = false ;
10416: LD_ADDR_EXP 61
10420: PUSH
10421: LD_INT 0
10423: ST_TO_ADDR
// end ;
10424: PPOPN 1
10426: END
// every 0 0$1 trigger test_is_in_area_burlak and venku marked 992 do var pom ;
10427: CALL 13832 0 0
10431: PUSH
10432: LD_EXP 61
10436: AND
10437: IFFALSE 10525
10439: GO 10441
10441: DISABLE
10442: LD_INT 0
10444: PPUSH
// begin pom = FilterUnitsInArea ( RU1_base , [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
10445: LD_ADDR_VAR 0 1
10449: PUSH
10450: LD_INT 3
10452: PPUSH
10453: LD_INT 22
10455: PUSH
10456: LD_EXP 1
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PUSH
10465: LD_INT 21
10467: PUSH
10468: LD_INT 2
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: PPUSH
10479: CALL_OW 70
10483: ST_TO_ADDR
// if pom > 0 then
10484: LD_VAR 0 1
10488: PUSH
10489: LD_INT 0
10491: GREATER
10492: IFFALSE 10524
// begin InGameOn ;
10494: CALL_OW 8
// Say ( kurin , D1a-Kur-1a ) ;
10498: LD_EXP 53
10502: PPUSH
10503: LD_STRING D1a-Kur-1a
10505: PPUSH
10506: CALL_OW 88
// InGameOff ;
10510: CALL_OW 9
// venku = false ;
10514: LD_ADDR_EXP 61
10518: PUSH
10519: LD_INT 0
10521: ST_TO_ADDR
// end else
10522: GO 10525
// enable ;
10524: ENABLE
// end ;
10525: PPOPN 1
10527: END
// every 0 0$2 trigger stav > 6 and not IsInArea ( bur , RU2_base ) do
10528: LD_EXP 60
10532: PUSH
10533: LD_INT 6
10535: GREATER
10536: PUSH
10537: LD_EXP 50
10541: PPUSH
10542: LD_INT 1
10544: PPUSH
10545: CALL_OW 308
10549: NOT
10550: AND
10551: IFFALSE 10565
10553: GO 10555
10555: DISABLE
// begin je_mimo = true ;
10556: LD_ADDR_LOC 7
10560: PUSH
10561: LD_INT 1
10563: ST_TO_ADDR
// enable ;
10564: ENABLE
// end ;
10565: END
// export function dialog_belkov_smrt ; var pom ; begin
10566: LD_INT 0
10568: PPUSH
10569: PPUSH
// InGameOn ;
10570: CALL_OW 8
// belkov_solved = 3 ;
10574: LD_ADDR_EXP 48
10578: PUSH
10579: LD_INT 3
10581: ST_TO_ADDR
// if pom >= procento_odkrytych_pro_vyhru [ difficulty ] and FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) = 0 then
10582: LD_VAR 0 2
10586: PUSH
10587: LD_EXP 42
10591: PUSH
10592: LD_OWVAR 67
10596: ARRAY
10597: GREATEREQUAL
10598: PUSH
10599: LD_INT 9
10601: PPUSH
10602: LD_INT 22
10604: PUSH
10605: LD_EXP 2
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PUSH
10614: LD_INT 30
10616: PUSH
10617: LD_INT 31
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PPUSH
10628: CALL_OW 70
10632: PUSH
10633: LD_INT 0
10635: EQUAL
10636: AND
10637: IFFALSE 10656
// begin navrat_a_konec = true ;
10639: LD_ADDR_EXP 47
10643: PUSH
10644: LD_INT 1
10646: ST_TO_ADDR
// ChangeMissionObjectives ( M10a ) ;
10647: LD_STRING M10a
10649: PPUSH
10650: CALL_OW 337
// end else
10654: GO 10663
// ChangeMissionObjectives ( M9a ) ;
10656: LD_STRING M9a
10658: PPUSH
10659: CALL_OW 337
// InGameOff ;
10663: CALL_OW 9
// end ;
10667: LD_VAR 0 1
10671: RET
// every 0 0$1 do var pom , i ; var Ru_Units ;
10672: GO 10674
10674: DISABLE
10675: LD_INT 0
10677: PPUSH
10678: PPUSH
10679: PPUSH
// begin Ru_Units = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
10680: LD_ADDR_VAR 0 3
10684: PUSH
10685: LD_INT 22
10687: PUSH
10688: LD_EXP 1
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 2
10699: PUSH
10700: LD_INT 21
10702: PUSH
10703: LD_INT 1
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 21
10712: PUSH
10713: LD_INT 2
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: LIST
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PPUSH
10729: CALL_OW 69
10733: ST_TO_ADDR
// for i in Ru_Units do
10734: LD_ADDR_VAR 0 2
10738: PUSH
10739: LD_VAR 0 3
10743: PUSH
10744: FOR_IN
10745: IFFALSE 10864
// begin pom = Attacks ( i ) ;
10747: LD_ADDR_VAR 0 1
10751: PUSH
10752: LD_VAR 0 2
10756: PPUSH
10757: CALL_OW 320
10761: ST_TO_ADDR
// if pom <> 0 then
10762: LD_VAR 0 1
10766: PUSH
10767: LD_INT 0
10769: NONEQUAL
10770: IFFALSE 10812
// if Getside ( pom ) in [ You2 , You3 ] then
10772: LD_VAR 0 1
10776: PPUSH
10777: CALL_OW 255
10781: PUSH
10782: LD_EXP 4
10786: PUSH
10787: LD_EXP 6
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: IN
10796: IFFALSE 10812
// konstanta_utoceni = konstanta_utoceni + 1 ;
10798: LD_ADDR_LOC 15
10802: PUSH
10803: LD_LOC 15
10807: PUSH
10808: LD_INT 1
10810: PLUS
10811: ST_TO_ADDR
// if pom = bel or pom = plat or pom = kurin then
10812: LD_VAR 0 1
10816: PUSH
10817: LD_EXP 52
10821: EQUAL
10822: PUSH
10823: LD_VAR 0 1
10827: PUSH
10828: LD_EXP 54
10832: EQUAL
10833: OR
10834: PUSH
10835: LD_VAR 0 1
10839: PUSH
10840: LD_EXP 53
10844: EQUAL
10845: OR
10846: IFFALSE 10862
// konstanta_utoceni = konstanta_utoceni + 10 ;
10848: LD_ADDR_LOC 15
10852: PUSH
10853: LD_LOC 15
10857: PUSH
10858: LD_INT 10
10860: PLUS
10861: ST_TO_ADDR
// end ;
10862: GO 10744
10864: POP
10865: POP
// if konstanta_utoceni < 10 then
10866: LD_LOC 15
10870: PUSH
10871: LD_INT 10
10873: LESS
10874: IFFALSE 10877
// enable ;
10876: ENABLE
// end ;
10877: PPOPN 3
10879: END
// every 0 0$1 trigger konstanta_utoceni >= 10 do
10880: LD_LOC 15
10884: PUSH
10885: LD_INT 10
10887: GREATEREQUAL
10888: IFFALSE 10897
10890: GO 10892
10892: DISABLE
// begin konec_mise_utok ;
10893: CALL 253 0 0
// end ;
10897: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 999 ] ] ] ) or GetLives ( kurin ) < 999 do
10898: LD_INT 22
10900: PUSH
10901: LD_INT 6
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PUSH
10908: LD_INT 21
10910: PUSH
10911: LD_INT 3
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PUSH
10918: LD_INT 3
10920: PUSH
10921: LD_INT 24
10923: PUSH
10924: LD_INT 999
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: LIST
10939: PPUSH
10940: CALL_OW 69
10944: PUSH
10945: LD_EXP 53
10949: PPUSH
10950: CALL_OW 256
10954: PUSH
10955: LD_INT 999
10957: LESS
10958: OR
10959: IFFALSE 10968
10961: GO 10963
10963: DISABLE
// konec_mise_utok ;
10964: CALL 253 0 0
10968: END
// export function hint_skilly ; begin
10969: LD_INT 0
10971: PPUSH
// Hint ( Skills ) ;
10972: LD_STRING Skills
10974: PPUSH
10975: CALL_OW 339
// end ;
10979: LD_VAR 0 1
10983: RET
// every 0 0$2 do var pom ; var i ; var hinton ;
10984: GO 10986
10986: DISABLE
10987: LD_INT 0
10989: PPUSH
10990: PPUSH
10991: PPUSH
// begin hinton = false ;
10992: LD_ADDR_VAR 0 3
10996: PUSH
10997: LD_INT 0
10999: ST_TO_ADDR
// pom = FilterUnitsInArea ( VEHCAP , [ [ f_side , Amici ] , [ f_type , unit_vehicle ] ] ) ;
11000: LD_ADDR_VAR 0 1
11004: PUSH
11005: LD_INT 30
11007: PPUSH
11008: LD_INT 22
11010: PUSH
11011: LD_EXP 2
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PUSH
11020: LD_INT 21
11022: PUSH
11023: LD_INT 2
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: PPUSH
11034: CALL_OW 70
11038: ST_TO_ADDR
// for i in pom do
11039: LD_ADDR_VAR 0 2
11043: PUSH
11044: LD_VAR 0 1
11048: PUSH
11049: FOR_IN
11050: IFFALSE 11077
// if IsDrivenBy ( i ) = 0 then
11052: LD_VAR 0 2
11056: PPUSH
11057: CALL_OW 311
11061: PUSH
11062: LD_INT 0
11064: EQUAL
11065: IFFALSE 11075
// hinton = true ;
11067: LD_ADDR_VAR 0 3
11071: PUSH
11072: LD_INT 1
11074: ST_TO_ADDR
11075: GO 11049
11077: POP
11078: POP
// if hinton then
11079: LD_VAR 0 3
11083: IFFALSE 11094
// Hint ( CapturingVehicles1 ) else
11085: LD_STRING CapturingVehicles1
11087: PPUSH
11088: CALL_OW 339
11092: GO 11095
// enable ;
11094: ENABLE
// end ;
11095: PPOPN 3
11097: END
// every 0 0$2 do var pom , i ; var BUDE_hint ;
11098: GO 11100
11100: DISABLE
11101: LD_INT 0
11103: PPUSH
11104: PPUSH
11105: PPUSH
// begin BUDE_hint = false ;
11106: LD_ADDR_VAR 0 3
11110: PUSH
11111: LD_INT 0
11113: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_building ] ] ) ;
11114: LD_ADDR_VAR 0 1
11118: PUSH
11119: LD_INT 22
11121: PUSH
11122: LD_EXP 1
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: LD_INT 21
11133: PUSH
11134: LD_INT 3
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PPUSH
11145: CALL_OW 69
11149: ST_TO_ADDR
// for i in pom do
11150: LD_ADDR_VAR 0 2
11154: PUSH
11155: LD_VAR 0 1
11159: PUSH
11160: FOR_IN
11161: IFFALSE 11188
// if IsConstructed ( i ) <> 0 then
11163: LD_VAR 0 2
11167: PPUSH
11168: CALL_OW 304
11172: PUSH
11173: LD_INT 0
11175: NONEQUAL
11176: IFFALSE 11186
// BUDE_hint = true ;
11178: LD_ADDR_VAR 0 3
11182: PUSH
11183: LD_INT 1
11185: ST_TO_ADDR
11186: GO 11160
11188: POP
11189: POP
// if BUDE_hint then
11190: LD_VAR 0 3
11194: IFFALSE 11205
// Hint ( Building2 ) else
11196: LD_STRING Building2
11198: PPUSH
11199: CALL_OW 339
11203: GO 11206
// enable ;
11205: ENABLE
// end ; end_of_file
11206: PPOPN 3
11208: END
// var PlayingLooped ; export function play_dialog_15 ; begin
11209: LD_INT 0
11211: PPUSH
// while playing do
11212: LD_EXP 34
11216: IFFALSE 11227
// wait ( 0 0$1 ) ;
11218: LD_INT 35
11220: PPUSH
11221: CALL_OW 67
11225: GO 11212
// playing := true ;
11227: LD_ADDR_EXP 34
11231: PUSH
11232: LD_INT 1
11234: ST_TO_ADDR
// CenterOnXY ( 60 , 52 ) ;
11235: LD_INT 60
11237: PPUSH
11238: LD_INT 52
11240: PPUSH
11241: CALL_OW 84
// DialogueOn ;
11245: CALL_OW 6
// say ( Bur , D15-Bur-1 ) ;
11249: LD_EXP 50
11253: PPUSH
11254: LD_STRING D15-Bur-1
11256: PPUSH
11257: CALL_OW 88
// if IsOK ( Gny ) then
11261: LD_EXP 49
11265: PPUSH
11266: CALL_OW 302
11270: IFFALSE 11286
// say ( Gny , D15-Gny-1 ) else
11272: LD_EXP 49
11276: PPUSH
11277: LD_STRING D15-Gny-1
11279: PPUSH
11280: CALL_OW 88
11284: GO 11325
// if not BelkovFreed and IsOK ( Kov ) then
11286: LD_EXP 16
11290: NOT
11291: PUSH
11292: LD_EXP 51
11296: PPUSH
11297: CALL_OW 302
11301: AND
11302: IFFALSE 11318
// say ( Kov , D15-Kov-1 ) else
11304: LD_EXP 51
11308: PPUSH
11309: LD_STRING D15-Kov-1
11311: PPUSH
11312: CALL_OW 88
11316: GO 11325
// Wait ( 0 0$5 ) ;
11318: LD_INT 175
11320: PPUSH
11321: CALL_OW 67
// if not InWest then
11325: LD_EXP 31
11329: NOT
11330: IFFALSE 11388
// begin say ( Bur , D15-Bur-2 ) ;
11332: LD_EXP 50
11336: PPUSH
11337: LD_STRING D15-Bur-2
11339: PPUSH
11340: CALL_OW 88
// if IsOK ( Kov ) then
11344: LD_EXP 51
11348: PPUSH
11349: CALL_OW 302
11353: IFFALSE 11369
// say ( Kov , D15-Kov-2 ) else
11355: LD_EXP 51
11359: PPUSH
11360: LD_STRING D15-Kov-2
11362: PPUSH
11363: CALL_OW 88
11367: GO 11376
// wait ( 0 0$5 ) ;
11369: LD_INT 175
11371: PPUSH
11372: CALL_OW 67
// say ( Bur , D15-Bur-3 ) ;
11376: LD_EXP 50
11380: PPUSH
11381: LD_STRING D15-Bur-3
11383: PPUSH
11384: CALL_OW 88
// end ; DialogueOff ;
11388: CALL_OW 7
// CenterOnUnits ( BurlakComp ) ;
11392: LD_EXP 14
11396: PPUSH
11397: CALL_OW 85
// playing := false ;
11401: LD_ADDR_EXP 34
11405: PUSH
11406: LD_INT 0
11408: ST_TO_ADDR
// end ;
11409: LD_VAR 0 1
11413: RET
// export function play_dialog_qwbw1 ; begin
11414: LD_INT 0
11416: PPUSH
// while playing do
11417: LD_EXP 34
11421: IFFALSE 11432
// wait ( 0 0$1 ) ;
11423: LD_INT 35
11425: PPUSH
11426: CALL_OW 67
11430: GO 11417
// playing := true ;
11432: LD_ADDR_EXP 34
11436: PUSH
11437: LD_INT 1
11439: ST_TO_ADDR
// say ( Bur , D17-Bur-1 ) ;
11440: LD_EXP 50
11444: PPUSH
11445: LD_STRING D17-Bur-1
11447: PPUSH
11448: CALL_OW 88
// say ( Plat , D17-Pla-1 ) ;
11452: LD_EXP 54
11456: PPUSH
11457: LD_STRING D17-Pla-1
11459: PPUSH
11460: CALL_OW 88
// say ( Bur , D17-Bur-2 ) ;
11464: LD_EXP 50
11468: PPUSH
11469: LD_STRING D17-Bur-2
11471: PPUSH
11472: CALL_OW 88
// say ( Plat , D17-Pla-2 ) ;
11476: LD_EXP 54
11480: PPUSH
11481: LD_STRING D17-Pla-2
11483: PPUSH
11484: CALL_OW 88
// playing := false ;
11488: LD_ADDR_EXP 34
11492: PUSH
11493: LD_INT 0
11495: ST_TO_ADDR
// end ;
11496: LD_VAR 0 1
11500: RET
// export function play_dialog_qwbw2 ; begin
11501: LD_INT 0
11503: PPUSH
// while playing do
11504: LD_EXP 34
11508: IFFALSE 11519
// wait ( 0 0$1 ) ;
11510: LD_INT 35
11512: PPUSH
11513: CALL_OW 67
11517: GO 11504
// playing := true ;
11519: LD_ADDR_EXP 34
11523: PUSH
11524: LD_INT 1
11526: ST_TO_ADDR
// say ( Bur , D18-Bur-1 ) ;
11527: LD_EXP 50
11531: PPUSH
11532: LD_STRING D18-Bur-1
11534: PPUSH
11535: CALL_OW 88
// say ( Plat , D18-Pla-1 ) ;
11539: LD_EXP 54
11543: PPUSH
11544: LD_STRING D18-Pla-1
11546: PPUSH
11547: CALL_OW 88
// say ( Bur , D18-Bur-2 ) ;
11551: LD_EXP 50
11555: PPUSH
11556: LD_STRING D18-Bur-2
11558: PPUSH
11559: CALL_OW 88
// say ( Plat , D18-Pla-2 ) ;
11563: LD_EXP 54
11567: PPUSH
11568: LD_STRING D18-Pla-2
11570: PPUSH
11571: CALL_OW 88
// playing := false ;
11575: LD_ADDR_EXP 34
11579: PUSH
11580: LD_INT 0
11582: ST_TO_ADDR
// end ;
11583: LD_VAR 0 1
11587: RET
// export function play_dialog_19 ; begin
11588: LD_INT 0
11590: PPUSH
// while playing do
11591: LD_EXP 34
11595: IFFALSE 11606
// wait ( 0 0$1 ) ;
11597: LD_INT 35
11599: PPUSH
11600: CALL_OW 67
11604: GO 11591
// playing := true ;
11606: LD_ADDR_EXP 34
11610: PUSH
11611: LD_INT 1
11613: ST_TO_ADDR
// if IsOK ( Gny ) then
11614: LD_EXP 49
11618: PPUSH
11619: CALL_OW 302
11623: IFFALSE 11651
// begin say ( Gny , D19-Gny-1 ) ;
11625: LD_EXP 49
11629: PPUSH
11630: LD_STRING D19-Gny-1
11632: PPUSH
11633: CALL_OW 88
// say ( Bur , D19-Bur-1 ) ;
11637: LD_EXP 50
11641: PPUSH
11642: LD_STRING D19-Bur-1
11644: PPUSH
11645: CALL_OW 88
// end else
11649: GO 11686
// if IsOK ( Kov ) then
11651: LD_EXP 51
11655: PPUSH
11656: CALL_OW 302
11660: IFFALSE 11686
// begin say ( Kov , D19-Kov-1 ) ;
11662: LD_EXP 51
11666: PPUSH
11667: LD_STRING D19-Kov-1
11669: PPUSH
11670: CALL_OW 88
// say ( Bur , D19-Bur-2 ) ;
11674: LD_EXP 50
11678: PPUSH
11679: LD_STRING D19-Bur-2
11681: PPUSH
11682: CALL_OW 88
// end ; playing := false ;
11686: LD_ADDR_EXP 34
11690: PUSH
11691: LD_INT 0
11693: ST_TO_ADDR
// end ;
11694: LD_VAR 0 1
11698: RET
// export function play_dialog_19a ; begin
11699: LD_INT 0
11701: PPUSH
// while playing do
11702: LD_EXP 34
11706: IFFALSE 11717
// wait ( 0 0$1 ) ;
11708: LD_INT 35
11710: PPUSH
11711: CALL_OW 67
11715: GO 11702
// playing := true ;
11717: LD_ADDR_EXP 34
11721: PUSH
11722: LD_INT 1
11724: ST_TO_ADDR
// if IsOK ( Gny ) then
11725: LD_EXP 49
11729: PPUSH
11730: CALL_OW 302
11734: IFFALSE 11750
// say ( Gny , D19A-Gny-1 ) else
11736: LD_EXP 49
11740: PPUSH
11741: LD_STRING D19A-Gny-1
11743: PPUSH
11744: CALL_OW 88
11748: GO 11773
// if IsOK ( Kov ) then
11750: LD_EXP 51
11754: PPUSH
11755: CALL_OW 302
11759: IFFALSE 11773
// say ( Kov , D19A-Kov-1 ) ;
11761: LD_EXP 51
11765: PPUSH
11766: LD_STRING D19A-Kov-1
11768: PPUSH
11769: CALL_OW 88
// playing := false ;
11773: LD_ADDR_EXP 34
11777: PUSH
11778: LD_INT 0
11780: ST_TO_ADDR
// end ;
11781: LD_VAR 0 1
11785: RET
// export function play_dialog_16 ; begin
11786: LD_INT 0
11788: PPUSH
// while playing do
11789: LD_EXP 34
11793: IFFALSE 11804
// wait ( 0 0$1 ) ;
11795: LD_INT 35
11797: PPUSH
11798: CALL_OW 67
11802: GO 11789
// playing := true ;
11804: LD_ADDR_EXP 34
11808: PUSH
11809: LD_INT 1
11811: ST_TO_ADDR
// CenterOnXY ( 90 , 57 ) ;
11812: LD_INT 90
11814: PPUSH
11815: LD_INT 57
11817: PPUSH
11818: CALL_OW 84
// DialogueOn ;
11822: CALL_OW 6
// if IsOK ( Kov ) then
11826: LD_EXP 51
11830: PPUSH
11831: CALL_OW 302
11835: IFFALSE 11870
// if not WBWSpotted then
11837: LD_EXP 18
11841: NOT
11842: IFFALSE 11858
// say ( Kov , D16-Kov-1 ) else
11844: LD_EXP 51
11848: PPUSH
11849: LD_STRING D16-Kov-1
11851: PPUSH
11852: CALL_OW 88
11856: GO 11870
// say ( Kov , D16-Kov-1a ) ;
11858: LD_EXP 51
11862: PPUSH
11863: LD_STRING D16-Kov-1a
11865: PPUSH
11866: CALL_OW 88
// say ( Bur , D16-Bur-1 ) ;
11870: LD_EXP 50
11874: PPUSH
11875: LD_STRING D16-Bur-1
11877: PPUSH
11878: CALL_OW 88
// if IsOK ( Gny ) then
11882: LD_EXP 49
11886: PPUSH
11887: CALL_OW 302
11891: IFFALSE 11905
// say ( Gny , D16-Gny-1 ) ;
11893: LD_EXP 49
11897: PPUSH
11898: LD_STRING D16-Gny-1
11900: PPUSH
11901: CALL_OW 88
// DialogueOff ;
11905: CALL_OW 7
// CenterOnUnits ( BurlakComp ) ;
11909: LD_EXP 14
11913: PPUSH
11914: CALL_OW 85
// playing := false ;
11918: LD_ADDR_EXP 34
11922: PUSH
11923: LD_INT 0
11925: ST_TO_ADDR
// end ;
11926: LD_VAR 0 1
11930: RET
// export function play_dialog_20 ; begin
11931: LD_INT 0
11933: PPUSH
// while playing do
11934: LD_EXP 34
11938: IFFALSE 11949
// wait ( 0 0$1 ) ;
11940: LD_INT 35
11942: PPUSH
11943: CALL_OW 67
11947: GO 11934
// playing := true ;
11949: LD_ADDR_EXP 34
11953: PUSH
11954: LD_INT 1
11956: ST_TO_ADDR
// say ( Bur , D20-Bur-1 ) ;
11957: LD_EXP 50
11961: PPUSH
11962: LD_STRING D20-Bur-1
11964: PPUSH
11965: CALL_OW 88
// say ( Plat , D20-Pla-1 ) ;
11969: LD_EXP 54
11973: PPUSH
11974: LD_STRING D20-Pla-1
11976: PPUSH
11977: CALL_OW 88
// playing := false ;
11981: LD_ADDR_EXP 34
11985: PUSH
11986: LD_INT 0
11988: ST_TO_ADDR
// end ;
11989: LD_VAR 0 1
11993: RET
// export function play_dialog_20a ; begin
11994: LD_INT 0
11996: PPUSH
// while playing do
11997: LD_EXP 34
12001: IFFALSE 12012
// wait ( 0 0$1 ) ;
12003: LD_INT 35
12005: PPUSH
12006: CALL_OW 67
12010: GO 11997
// playing := true ;
12012: LD_ADDR_EXP 34
12016: PUSH
12017: LD_INT 1
12019: ST_TO_ADDR
// say ( Bur , D20a-Bur-1 ) ;
12020: LD_EXP 50
12024: PPUSH
12025: LD_STRING D20a-Bur-1
12027: PPUSH
12028: CALL_OW 88
// say ( Plat , D20a-Pla-1 ) ;
12032: LD_EXP 54
12036: PPUSH
12037: LD_STRING D20a-Pla-1
12039: PPUSH
12040: CALL_OW 88
// playing := false ;
12044: LD_ADDR_EXP 34
12048: PUSH
12049: LD_INT 0
12051: ST_TO_ADDR
// end ;
12052: LD_VAR 0 1
12056: RET
// export function play_dialog_qAtAm1 ; begin
12057: LD_INT 0
12059: PPUSH
// while playing do
12060: LD_EXP 34
12064: IFFALSE 12075
// wait ( 0 0$1 ) ;
12066: LD_INT 35
12068: PPUSH
12069: CALL_OW 67
12073: GO 12060
// playing := true ;
12075: LD_ADDR_EXP 34
12079: PUSH
12080: LD_INT 1
12082: ST_TO_ADDR
// say ( Bur , D21-Bur-1 ) ;
12083: LD_EXP 50
12087: PPUSH
12088: LD_STRING D21-Bur-1
12090: PPUSH
12091: CALL_OW 88
// say ( Plat , D21-Pla-1 ) ;
12095: LD_EXP 54
12099: PPUSH
12100: LD_STRING D21-Pla-1
12102: PPUSH
12103: CALL_OW 88
// playing := false ;
12107: LD_ADDR_EXP 34
12111: PUSH
12112: LD_INT 0
12114: ST_TO_ADDR
// end ;
12115: LD_VAR 0 1
12119: RET
// export function play_dialog_qAtAm2 ; begin
12120: LD_INT 0
12122: PPUSH
// while playing do
12123: LD_EXP 34
12127: IFFALSE 12138
// wait ( 0 0$1 ) ;
12129: LD_INT 35
12131: PPUSH
12132: CALL_OW 67
12136: GO 12123
// playing := true ;
12138: LD_ADDR_EXP 34
12142: PUSH
12143: LD_INT 1
12145: ST_TO_ADDR
// say ( Bur , D22-Bur-1 ) ;
12146: LD_EXP 50
12150: PPUSH
12151: LD_STRING D22-Bur-1
12153: PPUSH
12154: CALL_OW 88
// if ( not Reinforcements ) and ( WBWDestroyed ) then
12158: LD_EXP 30
12162: NOT
12163: PUSH
12164: LD_EXP 20
12168: AND
12169: IFFALSE 12185
// say ( Plat , D22-Pla-1 ) else
12171: LD_EXP 54
12175: PPUSH
12176: LD_STRING D22-Pla-1
12178: PPUSH
12179: CALL_OW 88
12183: GO 12223
// if ( Reinforcements ) and ( WBWDestroyed ) then
12185: LD_EXP 30
12189: PUSH
12190: LD_EXP 20
12194: AND
12195: IFFALSE 12211
// say ( Plat , D22-Pla-1b ) else
12197: LD_EXP 54
12201: PPUSH
12202: LD_STRING D22-Pla-1b
12204: PPUSH
12205: CALL_OW 88
12209: GO 12223
// say ( Plat , D22-Pla-1a ) ;
12211: LD_EXP 54
12215: PPUSH
12216: LD_STRING D22-Pla-1a
12218: PPUSH
12219: CALL_OW 88
// playing := false ;
12223: LD_ADDR_EXP 34
12227: PUSH
12228: LD_INT 0
12230: ST_TO_ADDR
// end ;
12231: LD_VAR 0 1
12235: RET
// export function play_dialog_23 ; begin
12236: LD_INT 0
12238: PPUSH
// while playing do
12239: LD_EXP 34
12243: IFFALSE 12254
// wait ( 0 0$1 ) ;
12245: LD_INT 35
12247: PPUSH
12248: CALL_OW 67
12252: GO 12239
// playing := true ;
12254: LD_ADDR_EXP 34
12258: PUSH
12259: LD_INT 1
12261: ST_TO_ADDR
// if IsOK ( Gny ) then
12262: LD_EXP 49
12266: PPUSH
12267: CALL_OW 302
12271: IFFALSE 12297
// begin say ( Gny , D23-Gny-1 ) ;
12273: LD_EXP 49
12277: PPUSH
12278: LD_STRING D23-Gny-1
12280: PPUSH
12281: CALL_OW 88
// say ( Bur , D23-Bur-1 ) ;
12285: LD_EXP 50
12289: PPUSH
12290: LD_STRING D23-Bur-1
12292: PPUSH
12293: CALL_OW 88
// end ; playing := false ;
12297: LD_ADDR_EXP 34
12301: PUSH
12302: LD_INT 0
12304: ST_TO_ADDR
// end ;
12305: LD_VAR 0 1
12309: RET
// export function play_dialog_24 ; begin
12310: LD_INT 0
12312: PPUSH
// while playing do
12313: LD_EXP 34
12317: IFFALSE 12328
// wait ( 0 0$1 ) ;
12319: LD_INT 35
12321: PPUSH
12322: CALL_OW 67
12326: GO 12313
// playing := true ;
12328: LD_ADDR_EXP 34
12332: PUSH
12333: LD_INT 1
12335: ST_TO_ADDR
// if not IsOK ( Bel ) then
12336: LD_EXP 52
12340: PPUSH
12341: CALL_OW 302
12345: NOT
12346: IFFALSE 12359
// begin Msg ( Bel is killed. Please report this bug. Mission will now be terminated. ) ;
12348: LD_STRING Bel is killed. Please report this bug. Mission will now be terminated.
12350: PPUSH
12351: CALL_OW 100
// konec_mise ;
12355: CALL 268 0 0
// end ; say ( Bel , D24-Bel-1 ) ;
12359: LD_EXP 52
12363: PPUSH
12364: LD_STRING D24-Bel-1
12366: PPUSH
12367: CALL_OW 88
// if BELKOV_MRTVY then
12371: LD_EXP 46
12375: IFFALSE 12391
// say ( Bur , D24-Bur-1a ) else
12377: LD_EXP 50
12381: PPUSH
12382: LD_STRING D24-Bur-1a
12384: PPUSH
12385: CALL_OW 88
12389: GO 12403
// say ( Bur , D24-Bur-1 ) ;
12391: LD_EXP 50
12395: PPUSH
12396: LD_STRING D24-Bur-1
12398: PPUSH
12399: CALL_OW 88
// say ( Bel , D24-Bel-2 ) ;
12403: LD_EXP 52
12407: PPUSH
12408: LD_STRING D24-Bel-2
12410: PPUSH
12411: CALL_OW 88
// say ( Bur , D24-Bur-2 ) ;
12415: LD_EXP 50
12419: PPUSH
12420: LD_STRING D24-Bur-2
12422: PPUSH
12423: CALL_OW 88
// if ( GetSide ( auto_belkov ) = you ) then
12427: LD_EXP 70
12431: PPUSH
12432: CALL_OW 255
12436: PUSH
12437: LD_EXP 1
12441: EQUAL
12442: IFFALSE 12456
// begin say ( Bur , D24-Bur-2a ) ;
12444: LD_EXP 50
12448: PPUSH
12449: LD_STRING D24-Bur-2a
12451: PPUSH
12452: CALL_OW 88
// end ; say ( Plat , D24-Pla-2 ) ;
12456: LD_EXP 54
12460: PPUSH
12461: LD_STRING D24-Pla-2
12463: PPUSH
12464: CALL_OW 88
// if WBWSpotted and ( not WBWDestroyed ) then
12468: LD_EXP 18
12472: PUSH
12473: LD_EXP 20
12477: NOT
12478: AND
12479: IFFALSE 12493
// begin say ( Plat , D24-Pla-2a ) ;
12481: LD_EXP 54
12485: PPUSH
12486: LD_STRING D24-Pla-2a
12488: PPUSH
12489: CALL_OW 88
// end ; playing := false ;
12493: LD_ADDR_EXP 34
12497: PUSH
12498: LD_INT 0
12500: ST_TO_ADDR
// end ;
12501: LD_VAR 0 1
12505: RET
// export function play_dialog_25 ; var SomethingNew ; begin
12506: LD_INT 0
12508: PPUSH
12509: PPUSH
// while playing do
12510: LD_EXP 34
12514: IFFALSE 12525
// wait ( 0 0$1 ) ;
12516: LD_INT 35
12518: PPUSH
12519: CALL_OW 67
12523: GO 12510
// playing := true ;
12525: LD_ADDR_EXP 34
12529: PUSH
12530: LD_INT 1
12532: ST_TO_ADDR
// say ( Plat , D25-Pla-1 ) ;
12533: LD_EXP 54
12537: PPUSH
12538: LD_STRING D25-Pla-1
12540: PPUSH
12541: CALL_OW 88
// SomethingNew := false ;
12545: LD_ADDR_VAR 0 2
12549: PUSH
12550: LD_INT 0
12552: ST_TO_ADDR
// if ( WBWSpotted ) and ( not WBWDestroyed ) and ( not WBWReported ) and ( EBWSpotted ) and ( not EBWDestroyed ) and ( not EBWReported ) then
12553: LD_EXP 18
12557: PUSH
12558: LD_EXP 20
12562: NOT
12563: AND
12564: PUSH
12565: LD_EXP 21
12569: NOT
12570: AND
12571: PUSH
12572: LD_EXP 22
12576: AND
12577: PUSH
12578: LD_EXP 23
12582: NOT
12583: AND
12584: PUSH
12585: LD_EXP 24
12589: NOT
12590: AND
12591: IFFALSE 12629
// begin say ( Bur , D25-Bur-1 ) ;
12593: LD_EXP 50
12597: PPUSH
12598: LD_STRING D25-Bur-1
12600: PPUSH
12601: CALL_OW 88
// WBWReported := true ;
12605: LD_ADDR_EXP 21
12609: PUSH
12610: LD_INT 1
12612: ST_TO_ADDR
// EBWReported := true ;
12613: LD_ADDR_EXP 24
12617: PUSH
12618: LD_INT 1
12620: ST_TO_ADDR
// SomethingNew := true ;
12621: LD_ADDR_VAR 0 2
12625: PUSH
12626: LD_INT 1
12628: ST_TO_ADDR
// end ; if EBWSpotted and ( not EBWDestroyed ) and ( not EBWReported ) then
12629: LD_EXP 22
12633: PUSH
12634: LD_EXP 23
12638: NOT
12639: AND
12640: PUSH
12641: LD_EXP 24
12645: NOT
12646: AND
12647: IFFALSE 12677
// begin say ( Bur , D25-Bur-1a ) ;
12649: LD_EXP 50
12653: PPUSH
12654: LD_STRING D25-Bur-1a
12656: PPUSH
12657: CALL_OW 88
// EBWReported := true ;
12661: LD_ADDR_EXP 24
12665: PUSH
12666: LD_INT 1
12668: ST_TO_ADDR
// SomethingNew := true ;
12669: LD_ADDR_VAR 0 2
12673: PUSH
12674: LD_INT 1
12676: ST_TO_ADDR
// end ; if WBWSpotted and ( not WBWDestroyed ) and ( not WBWReported ) then
12677: LD_EXP 18
12681: PUSH
12682: LD_EXP 20
12686: NOT
12687: AND
12688: PUSH
12689: LD_EXP 21
12693: NOT
12694: AND
12695: IFFALSE 12737
// begin say ( Bur , D25-Bur-1b ) ;
12697: LD_EXP 50
12701: PPUSH
12702: LD_STRING D25-Bur-1b
12704: PPUSH
12705: CALL_OW 88
// say ( Bur , D25b-Bur-1 ) ;
12709: LD_EXP 50
12713: PPUSH
12714: LD_STRING D25b-Bur-1
12716: PPUSH
12717: CALL_OW 88
// WBWReported := true ;
12721: LD_ADDR_EXP 21
12725: PUSH
12726: LD_INT 1
12728: ST_TO_ADDR
// SomethingNew := true ;
12729: LD_ADDR_VAR 0 2
12733: PUSH
12734: LD_INT 1
12736: ST_TO_ADDR
// end ; if ( not SomethingNew ) then
12737: LD_VAR 0 2
12741: NOT
12742: IFFALSE 12756
// say ( Bur , D25-Bur-1c ) ;
12744: LD_EXP 50
12748: PPUSH
12749: LD_STRING D25-Bur-1c
12751: PPUSH
12752: CALL_OW 88
// playing := false ;
12756: LD_ADDR_EXP 34
12760: PUSH
12761: LD_INT 0
12763: ST_TO_ADDR
// end ;
12764: LD_VAR 0 1
12768: RET
// export function play_dialog_25a ; var SomethingNew ; begin
12769: LD_INT 0
12771: PPUSH
12772: PPUSH
// while playing do
12773: LD_EXP 34
12777: IFFALSE 12788
// wait ( 0 0$1 ) ;
12779: LD_INT 35
12781: PPUSH
12782: CALL_OW 67
12786: GO 12773
// playing := true ;
12788: LD_ADDR_EXP 34
12792: PUSH
12793: LD_INT 1
12795: ST_TO_ADDR
// say ( Plat , D25a-Pla-1 ) ;
12796: LD_EXP 54
12800: PPUSH
12801: LD_STRING D25a-Pla-1
12803: PPUSH
12804: CALL_OW 88
// SomethingNew := false ;
12808: LD_ADDR_VAR 0 2
12812: PUSH
12813: LD_INT 0
12815: ST_TO_ADDR
// if WBWSpotted and ( not WBWDestroyed ) and ( not WBWReported ) then
12816: LD_EXP 18
12820: PUSH
12821: LD_EXP 20
12825: NOT
12826: AND
12827: PUSH
12828: LD_EXP 21
12832: NOT
12833: AND
12834: IFFALSE 12876
// begin say ( Bur , D25a-Bur-1b ) ;
12836: LD_EXP 50
12840: PPUSH
12841: LD_STRING D25a-Bur-1b
12843: PPUSH
12844: CALL_OW 88
// say ( Bur , D25b-Bur-1 ) ;
12848: LD_EXP 50
12852: PPUSH
12853: LD_STRING D25b-Bur-1
12855: PPUSH
12856: CALL_OW 88
// WBWReported := true ;
12860: LD_ADDR_EXP 21
12864: PUSH
12865: LD_INT 1
12867: ST_TO_ADDR
// SomethingNew := true ;
12868: LD_ADDR_VAR 0 2
12872: PUSH
12873: LD_INT 1
12875: ST_TO_ADDR
// end ; if EBWSpotted and ( not EBWDestroyed ) and ( not EBWReported ) then
12876: LD_EXP 22
12880: PUSH
12881: LD_EXP 23
12885: NOT
12886: AND
12887: PUSH
12888: LD_EXP 24
12892: NOT
12893: AND
12894: IFFALSE 12924
// begin say ( Bur , D25a-Bur-1a ) ;
12896: LD_EXP 50
12900: PPUSH
12901: LD_STRING D25a-Bur-1a
12903: PPUSH
12904: CALL_OW 88
// EBWReported := true ;
12908: LD_ADDR_EXP 24
12912: PUSH
12913: LD_INT 1
12915: ST_TO_ADDR
// SomethingNew := true ;
12916: LD_ADDR_VAR 0 2
12920: PUSH
12921: LD_INT 1
12923: ST_TO_ADDR
// end ; if ( not SomethingNew ) then
12924: LD_VAR 0 2
12928: NOT
12929: IFFALSE 12943
// say ( Bur , D25a-Bur-1 ) ;
12931: LD_EXP 50
12935: PPUSH
12936: LD_STRING D25a-Bur-1
12938: PPUSH
12939: CALL_OW 88
// playing := false ;
12943: LD_ADDR_EXP 34
12947: PUSH
12948: LD_INT 0
12950: ST_TO_ADDR
// end ;
12951: LD_VAR 0 1
12955: RET
// export function play_dialog_25b ; begin
12956: LD_INT 0
12958: PPUSH
// while playing do
12959: LD_EXP 34
12963: IFFALSE 12974
// wait ( 0 0$1 ) ;
12965: LD_INT 35
12967: PPUSH
12968: CALL_OW 67
12972: GO 12959
// playing := true ;
12974: LD_ADDR_EXP 34
12978: PUSH
12979: LD_INT 1
12981: ST_TO_ADDR
// say ( Plat , D25b-Pla-1 ) ;
12982: LD_EXP 54
12986: PPUSH
12987: LD_STRING D25b-Pla-1
12989: PPUSH
12990: CALL_OW 88
// playing := false ;
12994: LD_ADDR_EXP 34
12998: PUSH
12999: LD_INT 0
13001: ST_TO_ADDR
// end ;
13002: LD_VAR 0 1
13006: RET
// export function play_dialog_25c ; begin
13007: LD_INT 0
13009: PPUSH
// while playing do
13010: LD_EXP 34
13014: IFFALSE 13025
// wait ( 0 0$1 ) ;
13016: LD_INT 35
13018: PPUSH
13019: CALL_OW 67
13023: GO 13010
// playing := true ;
13025: LD_ADDR_EXP 34
13029: PUSH
13030: LD_INT 1
13032: ST_TO_ADDR
// if ( not WBWSpotted ) then
13033: LD_EXP 18
13037: NOT
13038: IFFALSE 13054
// say ( Plat , D25c-Pla-1 ) else
13040: LD_EXP 54
13044: PPUSH
13045: LD_STRING D25c-Pla-1
13047: PPUSH
13048: CALL_OW 88
13052: GO 13066
// say ( Plat , D25c-Pla-1a ) ;
13054: LD_EXP 54
13058: PPUSH
13059: LD_STRING D25c-Pla-1a
13061: PPUSH
13062: CALL_OW 88
// playing := false ;
13066: LD_ADDR_EXP 34
13070: PUSH
13071: LD_INT 0
13073: ST_TO_ADDR
// end ;
13074: LD_VAR 0 1
13078: RET
// every 0 0$5 do
13079: GO 13081
13081: DISABLE
// begin if Playing then
13082: LD_EXP 34
13086: IFFALSE 13104
// PlayingLooped := PlayingLooped + 1 else
13088: LD_ADDR_LOC 17
13092: PUSH
13093: LD_LOC 17
13097: PUSH
13098: LD_INT 1
13100: PLUS
13101: ST_TO_ADDR
13102: GO 13112
// PlayingLooped := 0 ;
13104: LD_ADDR_LOC 17
13108: PUSH
13109: LD_INT 0
13111: ST_TO_ADDR
// if PlayingLooped >= 30 then
13112: LD_LOC 17
13116: PUSH
13117: LD_INT 30
13119: GREATEREQUAL
13120: IFFALSE 13137
// begin msg ( Playing too long. Possible bug. Please report. ) ;
13122: LD_STRING Playing too long. Possible bug. Please report.
13124: PPUSH
13125: CALL_OW 100
// Playing := false ;
13129: LD_ADDR_EXP 34
13133: PUSH
13134: LD_INT 0
13136: ST_TO_ADDR
// end ; enable end ; end_of_file
13137: ENABLE
13138: END
// export Gny ; export bur ; export Kov ; export bel ; export kurin ; export plat ; export Rusi_enter ; export Rusi_sever ; export Rusi_01 ; export rusi_survivors ; export stav_utoku ; export stav ; export venku ; export videli_w ; export videli_e ; export bedny ; export bedny_hint ; export videne ; export zasilek ; export posily_go ; export saved_bel ; export auto_belkov ; var pocet_uukazani ; var BurSk ; var BelSk ; var GnySk ; every 0 0$0.1 do var i ;
13139: GO 13141
13141: DISABLE
13142: LD_INT 0
13144: PPUSH
// begin zasilek = 0 ;
13145: LD_ADDR_EXP 67
13149: PUSH
13150: LD_INT 0
13152: ST_TO_ADDR
// bedny_hint = false ;
13153: LD_ADDR_EXP 65
13157: PUSH
13158: LD_INT 0
13160: ST_TO_ADDR
// stav = 0 ;
13161: LD_ADDR_EXP 60
13165: PUSH
13166: LD_INT 0
13168: ST_TO_ADDR
// Rusi_enter = FilterUnitsInArea ( RU1_base , [ [ f_side , You ] ] ) ;
13169: LD_ADDR_EXP 55
13173: PUSH
13174: LD_INT 3
13176: PPUSH
13177: LD_INT 22
13179: PUSH
13180: LD_EXP 1
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: PUSH
13189: EMPTY
13190: LIST
13191: PPUSH
13192: CALL_OW 70
13196: ST_TO_ADDR
// BurlakComp = Rusi_enter ;
13197: LD_ADDR_EXP 14
13201: PUSH
13202: LD_EXP 55
13206: ST_TO_ADDR
// venku = false ;
13207: LD_ADDR_EXP 61
13211: PUSH
13212: LD_INT 0
13214: ST_TO_ADDR
// stav_utoku = 0 ;
13215: LD_ADDR_EXP 59
13219: PUSH
13220: LD_INT 0
13222: ST_TO_ADDR
// videli_w = false ;
13223: LD_ADDR_EXP 62
13227: PUSH
13228: LD_INT 0
13230: ST_TO_ADDR
// videli_e = false ;
13231: LD_ADDR_EXP 63
13235: PUSH
13236: LD_INT 0
13238: ST_TO_ADDR
// bedny = [ ] ;
13239: LD_ADDR_EXP 64
13243: PUSH
13244: EMPTY
13245: ST_TO_ADDR
// videne = [ ] ;
13246: LD_ADDR_EXP 66
13250: PUSH
13251: EMPTY
13252: ST_TO_ADDR
// Rusi_sever = [ bel ] ;
13253: LD_ADDR_EXP 56
13257: PUSH
13258: LD_EXP 52
13262: PUSH
13263: EMPTY
13264: LIST
13265: ST_TO_ADDR
// Rusi_01 = [ ] ;
13266: LD_ADDR_EXP 57
13270: PUSH
13271: EMPTY
13272: ST_TO_ADDR
// posily_go = false ;
13273: LD_ADDR_EXP 68
13277: PUSH
13278: LD_INT 0
13280: ST_TO_ADDR
// saved_bel = false ;
13281: LD_ADDR_EXP 69
13285: PUSH
13286: LD_INT 0
13288: ST_TO_ADDR
// pocet_uukazani = 0 ;
13289: LD_ADDR_LOC 18
13293: PUSH
13294: LD_INT 0
13296: ST_TO_ADDR
// for i in [ 501 , 502 , 503 , 599 ] do
13297: LD_ADDR_VAR 0 1
13301: PUSH
13302: LD_INT 501
13304: PUSH
13305: LD_INT 502
13307: PUSH
13308: LD_INT 503
13310: PUSH
13311: LD_INT 599
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: PUSH
13320: FOR_IN
13321: IFFALSE 13330
// disable ( i ) ;
13323: LD_VAR 0 1
13327: DISABLE_MARKED
13328: GO 13320
13330: POP
13331: POP
// nastaveni_zacatku_skillu ;
13332: CALL 13339 0 0
// end ;
13336: PPOPN 1
13338: END
// function nastaveni_zacatku_skillu ; begin
13339: LD_INT 0
13341: PPUSH
// if IsOK ( bur ) then
13342: LD_EXP 50
13346: PPUSH
13347: CALL_OW 302
13351: IFFALSE 13416
// BurSk := [ GetSkill ( bur , 1 ) , GetSkill ( bur , 2 ) , GetSkill ( bur , 3 ) , GetSkill ( bur , 4 ) ] ;
13353: LD_ADDR_LOC 19
13357: PUSH
13358: LD_EXP 50
13362: PPUSH
13363: LD_INT 1
13365: PPUSH
13366: CALL_OW 259
13370: PUSH
13371: LD_EXP 50
13375: PPUSH
13376: LD_INT 2
13378: PPUSH
13379: CALL_OW 259
13383: PUSH
13384: LD_EXP 50
13388: PPUSH
13389: LD_INT 3
13391: PPUSH
13392: CALL_OW 259
13396: PUSH
13397: LD_EXP 50
13401: PPUSH
13402: LD_INT 4
13404: PPUSH
13405: CALL_OW 259
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: ST_TO_ADDR
// if IsOK ( Gny ) then
13416: LD_EXP 49
13420: PPUSH
13421: CALL_OW 302
13425: IFFALSE 13490
// GnySk := [ GetSkill ( Gny , 1 ) , GetSkill ( Gny , 2 ) , GetSkill ( Gny , 3 ) , GetSkill ( Gny , 4 ) ] ;
13427: LD_ADDR_LOC 21
13431: PUSH
13432: LD_EXP 49
13436: PPUSH
13437: LD_INT 1
13439: PPUSH
13440: CALL_OW 259
13444: PUSH
13445: LD_EXP 49
13449: PPUSH
13450: LD_INT 2
13452: PPUSH
13453: CALL_OW 259
13457: PUSH
13458: LD_EXP 49
13462: PPUSH
13463: LD_INT 3
13465: PPUSH
13466: CALL_OW 259
13470: PUSH
13471: LD_EXP 49
13475: PPUSH
13476: LD_INT 4
13478: PPUSH
13479: CALL_OW 259
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: ST_TO_ADDR
// if IsOK ( bel ) then
13490: LD_EXP 52
13494: PPUSH
13495: CALL_OW 302
13499: IFFALSE 13564
// BelSk := [ GetSkill ( bel , 1 ) , GetSkill ( bel , 2 ) , GetSkill ( bel , 3 ) , GetSkill ( bel , 4 ) ] ;
13501: LD_ADDR_LOC 20
13505: PUSH
13506: LD_EXP 52
13510: PPUSH
13511: LD_INT 1
13513: PPUSH
13514: CALL_OW 259
13518: PUSH
13519: LD_EXP 52
13523: PPUSH
13524: LD_INT 2
13526: PPUSH
13527: CALL_OW 259
13531: PUSH
13532: LD_EXP 52
13536: PPUSH
13537: LD_INT 3
13539: PPUSH
13540: CALL_OW 259
13544: PUSH
13545: LD_EXP 52
13549: PPUSH
13550: LD_INT 4
13552: PPUSH
13553: CALL_OW 259
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: LIST
13562: LIST
13563: ST_TO_ADDR
// end ;
13564: LD_VAR 0 1
13568: RET
// export function uklid_rusu ; begin
13569: LD_INT 0
13571: PPUSH
// ComEnterUnit ( RU1_vb1 , RU1_bu1 ) ;
13572: LD_INT 12
13574: PPUSH
13575: LD_INT 6
13577: PPUSH
13578: CALL_OW 120
// ComEnterUnit ( RU1_vb2 , RU1_bu2 ) ;
13582: LD_INT 13
13584: PPUSH
13585: LD_INT 14
13587: PPUSH
13588: CALL_OW 120
// ComEnterUnit ( bel , RU1_bar ) ;
13592: LD_EXP 52
13596: PPUSH
13597: LD_INT 5
13599: PPUSH
13600: CALL_OW 120
// ComEnterUnit ( RU1_sol1 , RU1_bar ) ;
13604: LD_INT 28
13606: PPUSH
13607: LD_INT 5
13609: PPUSH
13610: CALL_OW 120
// ComEnterUnit ( RU1_sol2 , RU1_bar ) ;
13614: LD_INT 29
13616: PPUSH
13617: LD_INT 5
13619: PPUSH
13620: CALL_OW 120
// ComEnterUnit ( RU1_vo1 , RU1_bar ) ;
13624: LD_INT 20
13626: PPUSH
13627: LD_INT 5
13629: PPUSH
13630: CALL_OW 120
// ComEnterUnit ( RU1_sci1 , RU1_lab ) ;
13634: LD_INT 27
13636: PPUSH
13637: LD_INT 3
13639: PPUSH
13640: CALL_OW 120
// ComEnterUnit ( RU1_sci2 , RU1_lab ) ;
13644: LD_INT 19
13646: PPUSH
13647: LD_INT 3
13649: PPUSH
13650: CALL_OW 120
// ComEnterUnit ( RU1_eng1 , RU1_dep ) ;
13654: LD_INT 18
13656: PPUSH
13657: LD_INT 1
13659: PPUSH
13660: CALL_OW 120
// ComEnterUnit ( RU1_me1 , RU1_tov ) ;
13664: LD_INT 17
13666: PPUSH
13667: LD_INT 2
13669: PPUSH
13670: CALL_OW 120
// ComMoveXY ( plat , 67 , 90 ) ;
13674: LD_EXP 54
13678: PPUSH
13679: LD_INT 67
13681: PPUSH
13682: LD_INT 90
13684: PPUSH
13685: CALL_OW 111
// AddComHold ( plat ) ;
13689: LD_EXP 54
13693: PPUSH
13694: CALL_OW 200
// ComEnterUnit ( Ru2_vb1 , Ru2_bu1 ) ;
13698: LD_INT 9
13700: PPUSH
13701: LD_INT 4
13703: PPUSH
13704: CALL_OW 120
// ComEnterUnit ( Ru2_vb2 , Ru2_bu2 ) ;
13708: LD_INT 10
13710: PPUSH
13711: LD_INT 11
13713: PPUSH
13714: CALL_OW 120
// end ;
13718: LD_VAR 0 1
13722: RET
// every 0 0$30 trigger stav > 2 and stav < 7 do var pom ;
13723: LD_EXP 60
13727: PUSH
13728: LD_INT 2
13730: GREATER
13731: PUSH
13732: LD_EXP 60
13736: PUSH
13737: LD_INT 7
13739: LESS
13740: AND
13741: IFFALSE 13802
13743: GO 13745
13745: DISABLE
13746: LD_INT 0
13748: PPUSH
// begin ComFree ( plat ) ;
13749: LD_EXP 54
13753: PPUSH
13754: CALL_OW 139
// pom = RandHexArea ( RU2_base , true ) ;
13758: LD_ADDR_VAR 0 1
13762: PUSH
13763: LD_INT 1
13765: PPUSH
13766: LD_INT 1
13768: PPUSH
13769: CALL_OW 16
13773: ST_TO_ADDR
// AddComMoveXY ( plat , pom [ 1 ] , pom [ 2 ] ) ;
13774: LD_EXP 54
13778: PPUSH
13779: LD_VAR 0 1
13783: PUSH
13784: LD_INT 1
13786: ARRAY
13787: PPUSH
13788: LD_VAR 0 1
13792: PUSH
13793: LD_INT 2
13795: ARRAY
13796: PPUSH
13797: CALL_OW 171
// enable ;
13801: ENABLE
// end ;
13802: PPOPN 1
13804: END
// every 0 0$1 trigger not venku and not test_is_in_area_burlak do
13805: LD_EXP 61
13809: NOT
13810: PUSH
13811: CALL 13832 0 0
13815: NOT
13816: AND
13817: IFFALSE 13831
13819: GO 13821
13821: DISABLE
// begin venku = true ;
13822: LD_ADDR_EXP 61
13826: PUSH
13827: LD_INT 1
13829: ST_TO_ADDR
// enable ;
13830: ENABLE
// end ;
13831: END
// export function test_is_in_area_burlak ; var a ; var pom , i ; begin
13832: LD_INT 0
13834: PPUSH
13835: PPUSH
13836: PPUSH
13837: PPUSH
// a = false ;
13838: LD_ADDR_VAR 0 2
13842: PUSH
13843: LD_INT 0
13845: ST_TO_ADDR
// if IsInArea ( bur , RU1_base ) then
13846: LD_EXP 50
13850: PPUSH
13851: LD_INT 3
13853: PPUSH
13854: CALL_OW 308
13858: IFFALSE 13868
// a = true ;
13860: LD_ADDR_VAR 0 2
13864: PUSH
13865: LD_INT 1
13867: ST_TO_ADDR
// pom = FilterUnitsInArea ( RU1_base , [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
13868: LD_ADDR_VAR 0 3
13872: PUSH
13873: LD_INT 3
13875: PPUSH
13876: LD_INT 22
13878: PUSH
13879: LD_EXP 1
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: LD_INT 21
13890: PUSH
13891: LD_INT 2
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PPUSH
13902: CALL_OW 70
13906: ST_TO_ADDR
// if pom > 0 then
13907: LD_VAR 0 3
13911: PUSH
13912: LD_INT 0
13914: GREATER
13915: IFFALSE 13959
// for i in pom do
13917: LD_ADDR_VAR 0 4
13921: PUSH
13922: LD_VAR 0 3
13926: PUSH
13927: FOR_IN
13928: IFFALSE 13957
// if IsDrivenBy ( i ) = bur then
13930: LD_VAR 0 4
13934: PPUSH
13935: CALL_OW 311
13939: PUSH
13940: LD_EXP 50
13944: EQUAL
13945: IFFALSE 13955
// a = true ;
13947: LD_ADDR_VAR 0 2
13951: PUSH
13952: LD_INT 1
13954: ST_TO_ADDR
13955: GO 13927
13957: POP
13958: POP
// result = a ;
13959: LD_ADDR_VAR 0 1
13963: PUSH
13964: LD_VAR 0 2
13968: ST_TO_ADDR
// end ;
13969: LD_VAR 0 1
13973: RET
// every 0 0$7 do var pom ;
13974: GO 13976
13976: DISABLE
13977: LD_INT 0
13979: PPUSH
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_breastwork ] , [ f_nation , nation_russian ] ] ) ;
13980: LD_ADDR_VAR 0 1
13984: PUSH
13985: LD_INT 22
13987: PUSH
13988: LD_EXP 1
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PUSH
13997: LD_INT 30
13999: PUSH
14000: LD_INT 31
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PUSH
14007: LD_INT 23
14009: PUSH
14010: LD_INT 3
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: LIST
14021: PPUSH
14022: CALL_OW 69
14026: ST_TO_ADDR
// if pom > 0 then
14027: LD_VAR 0 1
14031: PUSH
14032: LD_INT 0
14034: GREATER
14035: IFFALSE 14049
// destroy ( pom , b_breastwork ) ;
14037: LD_VAR 0 1
14041: PPUSH
14042: LD_INT 31
14044: PPUSH
14045: CALL 14191 0 2
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_armoury ] , [ f_nation , nation_russian ] ] ) ;
14049: LD_ADDR_VAR 0 1
14053: PUSH
14054: LD_INT 22
14056: PUSH
14057: LD_EXP 1
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: PUSH
14066: LD_INT 30
14068: PUSH
14069: LD_INT 4
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: PUSH
14076: LD_INT 23
14078: PUSH
14079: LD_INT 3
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: LIST
14090: PPUSH
14091: CALL_OW 69
14095: ST_TO_ADDR
// if pom > 0 then
14096: LD_VAR 0 1
14100: PUSH
14101: LD_INT 0
14103: GREATER
14104: IFFALSE 14118
// destroy ( pom , b_armoury ) ;
14106: LD_VAR 0 1
14110: PPUSH
14111: LD_INT 4
14113: PPUSH
14114: CALL 14191 0 2
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_btype , b_oil_power ] , [ f_nation , nation_russian ] ] ) ;
14118: LD_ADDR_VAR 0 1
14122: PUSH
14123: LD_INT 22
14125: PUSH
14126: LD_EXP 1
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: PUSH
14135: LD_INT 30
14137: PUSH
14138: LD_INT 26
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: PUSH
14145: LD_INT 23
14147: PUSH
14148: LD_INT 3
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: LIST
14159: PPUSH
14160: CALL_OW 69
14164: ST_TO_ADDR
// if pom > 0 then
14165: LD_VAR 0 1
14169: PUSH
14170: LD_INT 0
14172: GREATER
14173: IFFALSE 14187
// destroy ( pom , b_oil_power ) ;
14175: LD_VAR 0 1
14179: PPUSH
14180: LD_INT 26
14182: PPUSH
14183: CALL 14191 0 2
// enable ;
14187: ENABLE
// end ;
14188: PPOPN 1
14190: END
// function destroy ( sez , typ ) ; var i , j ; var pom ; var res ; begin
14191: LD_INT 0
14193: PPUSH
14194: PPUSH
14195: PPUSH
14196: PPUSH
14197: PPUSH
// InGameOn ;
14198: CALL_OW 8
// dialog_boreni ;
14202: CALL 8671 0 0
// for i in sez do
14206: LD_ADDR_VAR 0 4
14210: PUSH
14211: LD_VAR 0 1
14215: PUSH
14216: FOR_IN
14217: IFFALSE 14401
// begin pom = UnitsInside ( i ) ;
14219: LD_ADDR_VAR 0 6
14223: PUSH
14224: LD_VAR 0 4
14228: PPUSH
14229: CALL_OW 313
14233: ST_TO_ADDR
// ComExitBuilding ( pom ) ;
14234: LD_VAR 0 6
14238: PPUSH
14239: CALL_OW 122
// wait ( 0 0$2 ) ;
14243: LD_INT 70
14245: PPUSH
14246: CALL_OW 67
// DestroyUnit ( i ) ;
14250: LD_VAR 0 4
14254: PPUSH
14255: CALL_OW 65
// case typ of b_breastwork :
14259: LD_VAR 0 2
14263: PUSH
14264: LD_INT 31
14266: DOUBLE
14267: EQUAL
14268: IFTRUE 14272
14270: GO 14293
14272: POP
// res = [ [ mat_cans , 10 ] ] ; b_armoury :
14273: LD_ADDR_VAR 0 7
14277: PUSH
14278: LD_INT 1
14280: PUSH
14281: LD_INT 10
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: PUSH
14288: EMPTY
14289: LIST
14290: ST_TO_ADDR
14291: GO 14352
14293: LD_INT 4
14295: DOUBLE
14296: EQUAL
14297: IFTRUE 14301
14299: GO 14322
14301: POP
// res = [ [ mat_cans , 30 ] ] ; b_oil_power :
14302: LD_ADDR_VAR 0 7
14306: PUSH
14307: LD_INT 1
14309: PUSH
14310: LD_INT 30
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PUSH
14317: EMPTY
14318: LIST
14319: ST_TO_ADDR
14320: GO 14352
14322: LD_INT 26
14324: DOUBLE
14325: EQUAL
14326: IFTRUE 14330
14328: GO 14351
14330: POP
// res = [ [ mat_cans , 20 ] ] ; end ;
14331: LD_ADDR_VAR 0 7
14335: PUSH
14336: LD_INT 1
14338: PUSH
14339: LD_INT 20
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: EMPTY
14347: LIST
14348: ST_TO_ADDR
14349: GO 14352
14351: POP
// for j in res do
14352: LD_ADDR_VAR 0 5
14356: PUSH
14357: LD_VAR 0 7
14361: PUSH
14362: FOR_IN
14363: IFFALSE 14397
// AddResourceType ( GetBase ( RU2_dep ) , j [ 1 ] , j [ 2 ] ) ;
14365: LD_INT 26
14367: PPUSH
14368: CALL_OW 274
14372: PPUSH
14373: LD_VAR 0 5
14377: PUSH
14378: LD_INT 1
14380: ARRAY
14381: PPUSH
14382: LD_VAR 0 5
14386: PUSH
14387: LD_INT 2
14389: ARRAY
14390: PPUSH
14391: CALL_OW 276
14395: GO 14362
14397: POP
14398: POP
// end ;
14399: GO 14216
14401: POP
14402: POP
// InGameOff ;
14403: CALL_OW 9
// end ;
14407: LD_VAR 0 3
14411: RET
// on McDone ( ID , state ) do var u , w , dist , tol , Arrived ;
14412: LD_INT 0
14414: PPUSH
14415: PPUSH
14416: PPUSH
14417: PPUSH
14418: PPUSH
// begin tol := 8 ;
14419: LD_ADDR_VAR 0 6
14423: PUSH
14424: LD_INT 8
14426: ST_TO_ADDR
// if ID <> McCestaNaSever then
14427: LD_VAR 0 1
14431: PUSH
14432: LD_EXP 36
14436: NONEQUAL
14437: IFFALSE 14441
// exit ;
14439: GO 14614
// repeat Arrived := true ;
14441: LD_ADDR_VAR 0 7
14445: PUSH
14446: LD_INT 1
14448: ST_TO_ADDR
// for u in Rusi_sever do
14449: LD_ADDR_VAR 0 3
14453: PUSH
14454: LD_EXP 56
14458: PUSH
14459: FOR_IN
14460: IFFALSE 14599
// if GetDistUnitXY ( u , wptCestaNaSever [ wptCestaNaSever ] [ 1 ] , wptCestaNaSever [ wptCestaNaSever ] [ 2 ] ) > tol then
14462: LD_VAR 0 3
14466: PPUSH
14467: LD_EXP 71
14471: PUSH
14472: LD_EXP 71
14476: ARRAY
14477: PUSH
14478: LD_INT 1
14480: ARRAY
14481: PPUSH
14482: LD_EXP 71
14486: PUSH
14487: LD_EXP 71
14491: ARRAY
14492: PUSH
14493: LD_INT 2
14495: ARRAY
14496: PPUSH
14497: CALL_OW 297
14501: PUSH
14502: LD_VAR 0 6
14506: GREATER
14507: IFFALSE 14597
// begin Arrived := false ;
14509: LD_ADDR_VAR 0 7
14513: PUSH
14514: LD_INT 0
14516: ST_TO_ADDR
// ComStop ( u ) ;
14517: LD_VAR 0 3
14521: PPUSH
14522: CALL_OW 141
// for w in wptCestaNaSever do
14526: LD_ADDR_VAR 0 4
14530: PUSH
14531: LD_EXP 71
14535: PUSH
14536: FOR_IN
14537: IFFALSE 14595
// begin if GetY ( u ) > w [ 2 ] + tol then
14539: LD_VAR 0 3
14543: PPUSH
14544: CALL_OW 251
14548: PUSH
14549: LD_VAR 0 4
14553: PUSH
14554: LD_INT 2
14556: ARRAY
14557: PUSH
14558: LD_VAR 0 6
14562: PLUS
14563: GREATER
14564: IFFALSE 14593
// begin AddComMoveXY ( u , w [ 1 ] , w [ 2 ] ) ;
14566: LD_VAR 0 3
14570: PPUSH
14571: LD_VAR 0 4
14575: PUSH
14576: LD_INT 1
14578: ARRAY
14579: PPUSH
14580: LD_VAR 0 4
14584: PUSH
14585: LD_INT 2
14587: ARRAY
14588: PPUSH
14589: CALL_OW 171
// end ; end ;
14593: GO 14536
14595: POP
14596: POP
// end ;
14597: GO 14459
14599: POP
14600: POP
// wait ( 0 0$15 ) until Arrived ;
14601: LD_INT 525
14603: PPUSH
14604: CALL_OW 67
14608: LD_VAR 0 7
14612: IFFALSE 14441
// end ;
14614: PPOPN 7
14616: END
// export wptCestaNaSever ; export function rusi_cesta_na_sever ; var pom ; begin
14617: LD_INT 0
14619: PPUSH
14620: PPUSH
// if rusi_survivors < 3 then
14621: LD_EXP 58
14625: PUSH
14626: LD_INT 3
14628: LESS
14629: IFFALSE 14656
// rusi_survivors = rusi_survivors ^ [ RU1_sol1 , RU1_sol2 , RU1_sci1 ] ;
14631: LD_ADDR_EXP 58
14635: PUSH
14636: LD_EXP 58
14640: PUSH
14641: LD_INT 28
14643: PUSH
14644: LD_INT 29
14646: PUSH
14647: LD_INT 27
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: LIST
14654: ADD
14655: ST_TO_ADDR
// Rusi_01 = rusi_survivors ;
14656: LD_ADDR_EXP 57
14660: PUSH
14661: LD_EXP 58
14665: ST_TO_ADDR
// pom = [ IsInUnit ( bel ) , Rusi_01 [ 1 ] , Rusi_01 [ 2 ] , Rusi_01 [ 3 ] ] ;
14666: LD_ADDR_VAR 0 2
14670: PUSH
14671: LD_EXP 52
14675: PPUSH
14676: CALL_OW 310
14680: PUSH
14681: LD_EXP 57
14685: PUSH
14686: LD_INT 1
14688: ARRAY
14689: PUSH
14690: LD_EXP 57
14694: PUSH
14695: LD_INT 2
14697: ARRAY
14698: PUSH
14699: LD_EXP 57
14703: PUSH
14704: LD_INT 3
14706: ARRAY
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: ST_TO_ADDR
// ComExitBuilding ( [ Rusi_01 [ 1 ] , Rusi_01 [ 2 ] , Rusi_01 [ 3 ] ] ) ;
14714: LD_EXP 57
14718: PUSH
14719: LD_INT 1
14721: ARRAY
14722: PUSH
14723: LD_EXP 57
14727: PUSH
14728: LD_INT 2
14730: ARRAY
14731: PUSH
14732: LD_EXP 57
14736: PUSH
14737: LD_INT 3
14739: ARRAY
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: LIST
14745: PPUSH
14746: CALL_OW 122
// wptCestaNaSever := [ [ 87 , 93 ] , [ 77 , 74 ] , [ 68 , 58 ] , [ 66 , 46 ] , [ 59 , 28 ] , [ 59 , 12 ] ] ;
14750: LD_ADDR_EXP 71
14754: PUSH
14755: LD_INT 87
14757: PUSH
14758: LD_INT 93
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PUSH
14765: LD_INT 77
14767: PUSH
14768: LD_INT 74
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PUSH
14775: LD_INT 68
14777: PUSH
14778: LD_INT 58
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: LD_INT 66
14787: PUSH
14788: LD_INT 46
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: LD_INT 59
14797: PUSH
14798: LD_INT 28
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: PUSH
14805: LD_INT 59
14807: PUSH
14808: LD_INT 12
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: ST_TO_ADDR
// mcCestaNaSever = McMove ( 1 , pom , wptCestaNaSever , [ mc_move_waitwp ] ) ;
14823: LD_ADDR_EXP 36
14827: PUSH
14828: LD_INT 1
14830: PPUSH
14831: LD_VAR 0 2
14835: PPUSH
14836: LD_EXP 71
14840: PPUSH
14841: LD_INT 3
14843: PUSH
14844: EMPTY
14845: LIST
14846: PPUSH
14847: CALL_OW 398
14851: ST_TO_ADDR
// Rusi_sever = pom ;
14852: LD_ADDR_EXP 56
14856: PUSH
14857: LD_VAR 0 2
14861: ST_TO_ADDR
// rusi_survivors = Rusi_01 diff pom ;
14862: LD_ADDR_EXP 58
14866: PUSH
14867: LD_EXP 57
14871: PUSH
14872: LD_VAR 0 2
14876: DIFF
14877: ST_TO_ADDR
// repeat wait ( 0 0$5 ) until ( FilterUnitsInArea ( RU1_base , [ ] ) isect Rusi_sever ) = 0 ;
14878: LD_INT 175
14880: PPUSH
14881: CALL_OW 67
14885: LD_INT 3
14887: PPUSH
14888: EMPTY
14889: PPUSH
14890: CALL_OW 70
14894: PUSH
14895: LD_EXP 56
14899: ISECT
14900: PUSH
14901: LD_INT 0
14903: EQUAL
14904: IFFALSE 14878
// wait ( 1 1$0 ) ;
14906: LD_INT 2100
14908: PPUSH
14909: CALL_OW 67
// stavba_am_baze ;
14913: CALL 17361 0 0
// end ;
14917: LD_VAR 0 1
14921: RET
// every 0 0$4 do var pom ;
14922: GO 14924
14924: DISABLE
14925: LD_INT 0
14927: PPUSH
// begin pom = FilterUnitsInArea ( Test2 , [ [ f_side , You2 ] ] ) ;
14928: LD_ADDR_VAR 0 1
14932: PUSH
14933: LD_INT 10
14935: PPUSH
14936: LD_INT 22
14938: PUSH
14939: LD_EXP 4
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: EMPTY
14949: LIST
14950: PPUSH
14951: CALL_OW 70
14955: ST_TO_ADDR
// if pom + 0 = Rusi_sever + 0 then
14956: LD_VAR 0 1
14960: PUSH
14961: LD_INT 0
14963: PLUS
14964: PUSH
14965: LD_EXP 56
14969: PUSH
14970: LD_INT 0
14972: PLUS
14973: EQUAL
14974: IFFALSE 14983
// begin manage_rusi_sever ;
14976: CALL 15989 0 0
// disable ;
14980: DISABLE
// end else
14981: GO 14984
// enable ;
14983: ENABLE
// end ;
14984: PPOPN 1
14986: END
// every 0 0$20 trigger stav > 2 and stav < 7 do var i ; var misto ;
14987: LD_EXP 60
14991: PUSH
14992: LD_INT 2
14994: GREATER
14995: PUSH
14996: LD_EXP 60
15000: PUSH
15001: LD_INT 7
15003: LESS
15004: AND
15005: IFFALSE 15293
15007: GO 15009
15009: DISABLE
15010: LD_INT 0
15012: PPUSH
15013: PPUSH
// begin misto = [ ] ;
15014: LD_ADDR_VAR 0 2
15018: PUSH
15019: EMPTY
15020: ST_TO_ADDR
// for i in bedny do
15021: LD_ADDR_VAR 0 1
15025: PUSH
15026: LD_EXP 64
15030: PUSH
15031: FOR_IN
15032: IFFALSE 15118
// if SeeXY ( You2 , i [ 1 ] , i [ 2 ] ) then
15034: LD_EXP 4
15038: PPUSH
15039: LD_VAR 0 1
15043: PUSH
15044: LD_INT 1
15046: ARRAY
15047: PPUSH
15048: LD_VAR 0 1
15052: PUSH
15053: LD_INT 2
15055: ARRAY
15056: PPUSH
15057: CALL_OW 293
15061: IFFALSE 15116
// if i in videne then
15063: LD_VAR 0 1
15067: PUSH
15068: LD_EXP 66
15072: IN
15073: IFFALSE 15087
// misto = misto else
15075: LD_ADDR_VAR 0 2
15079: PUSH
15080: LD_VAR 0 2
15084: ST_TO_ADDR
15085: GO 15116
// begin misto = i ;
15087: LD_ADDR_VAR 0 2
15091: PUSH
15092: LD_VAR 0 1
15096: ST_TO_ADDR
// videne = videne ^ [ i ] ;
15097: LD_ADDR_EXP 66
15101: PUSH
15102: LD_EXP 66
15106: PUSH
15107: LD_VAR 0 1
15111: PUSH
15112: EMPTY
15113: LIST
15114: ADD
15115: ST_TO_ADDR
// end ;
15116: GO 15031
15118: POP
15119: POP
// if misto <> 0 then
15120: LD_VAR 0 2
15124: PUSH
15125: LD_INT 0
15127: NONEQUAL
15128: IFFALSE 15265
// begin bedny_hint = true ;
15130: LD_ADDR_EXP 65
15134: PUSH
15135: LD_INT 1
15137: ST_TO_ADDR
// ComMoveXY ( plat , misto [ 1 ] , misto [ 2 ] ) ;
15138: LD_EXP 54
15142: PPUSH
15143: LD_VAR 0 2
15147: PUSH
15148: LD_INT 1
15150: ARRAY
15151: PPUSH
15152: LD_VAR 0 2
15156: PUSH
15157: LD_INT 2
15159: ARRAY
15160: PPUSH
15161: CALL_OW 111
// wait ( 0 0$5 ) ;
15165: LD_INT 175
15167: PPUSH
15168: CALL_OW 67
// if HexInfo ( misto [ 1 ] , misto [ 2 ] ) <> 0 or HexInfo ( misto [ 1 ] , misto [ 2 ] ) <> plat then
15172: LD_VAR 0 2
15176: PUSH
15177: LD_INT 1
15179: ARRAY
15180: PPUSH
15181: LD_VAR 0 2
15185: PUSH
15186: LD_INT 2
15188: ARRAY
15189: PPUSH
15190: CALL_OW 428
15194: PUSH
15195: LD_INT 0
15197: NONEQUAL
15198: PUSH
15199: LD_VAR 0 2
15203: PUSH
15204: LD_INT 1
15206: ARRAY
15207: PPUSH
15208: LD_VAR 0 2
15212: PUSH
15213: LD_INT 2
15215: ARRAY
15216: PPUSH
15217: CALL_OW 428
15221: PUSH
15222: LD_EXP 54
15226: NONEQUAL
15227: OR
15228: IFFALSE 15265
// begin hlaska_platonov_bedny ;
15230: CALL 9888 0 0
// pocet_uukazani = pocet_uukazani + 1 ;
15234: LD_ADDR_LOC 18
15238: PUSH
15239: LD_LOC 18
15243: PUSH
15244: LD_INT 1
15246: PLUS
15247: ST_TO_ADDR
// debug_strings = [ Platonov bvedny , pocet_uukazani ] ;
15248: LD_ADDR_OWVAR 48
15252: PUSH
15253: LD_STRING Platonov bvedny
15255: PUSH
15256: LD_LOC 18
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: ST_TO_ADDR
// end ; end ; debug_strings = [ Platonov bvedny , pocet_uukazani ] ;
15265: LD_ADDR_OWVAR 48
15269: PUSH
15270: LD_STRING Platonov bvedny
15272: PUSH
15273: LD_LOC 18
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: ST_TO_ADDR
// if pocet_uukazani < 6 then
15282: LD_LOC 18
15286: PUSH
15287: LD_INT 6
15289: LESS
15290: IFFALSE 15293
// enable ;
15292: ENABLE
// end ;
15293: PPOPN 2
15295: END
// every 0 0$13 trigger stav > 2 and stav < 7 do var i ; var a ;
15296: LD_EXP 60
15300: PUSH
15301: LD_INT 2
15303: GREATER
15304: PUSH
15305: LD_EXP 60
15309: PUSH
15310: LD_INT 7
15312: LESS
15313: AND
15314: IFFALSE 15405
15316: GO 15318
15318: DISABLE
15319: LD_INT 0
15321: PPUSH
15322: PPUSH
// begin a = [ ] ;
15323: LD_ADDR_VAR 0 2
15327: PUSH
15328: EMPTY
15329: ST_TO_ADDR
// for i in bedny do
15330: LD_ADDR_VAR 0 1
15334: PUSH
15335: LD_EXP 64
15339: PUSH
15340: FOR_IN
15341: IFFALSE 15392
// if GetResourceAmountXY ( i [ 1 ] , i [ 2 ] ) <> 0 then
15343: LD_VAR 0 1
15347: PUSH
15348: LD_INT 1
15350: ARRAY
15351: PPUSH
15352: LD_VAR 0 1
15356: PUSH
15357: LD_INT 2
15359: ARRAY
15360: PPUSH
15361: CALL_OW 284
15365: PUSH
15366: LD_INT 0
15368: NONEQUAL
15369: IFFALSE 15390
// a = a ^ [ i ] ;
15371: LD_ADDR_VAR 0 2
15375: PUSH
15376: LD_VAR 0 2
15380: PUSH
15381: LD_VAR 0 1
15385: PUSH
15386: EMPTY
15387: LIST
15388: ADD
15389: ST_TO_ADDR
15390: GO 15340
15392: POP
15393: POP
// bedny = a ;
15394: LD_ADDR_EXP 64
15398: PUSH
15399: LD_VAR 0 2
15403: ST_TO_ADDR
// enable ;
15404: ENABLE
// end ;
15405: PPOPN 2
15407: END
// every 0 0$10 trigger stav = 3 do var hex ;
15408: LD_EXP 60
15412: PUSH
15413: LD_INT 3
15415: EQUAL
15416: IFFALSE 15548
15418: GO 15420
15420: DISABLE
15421: LD_INT 0
15423: PPUSH
// begin wait ( Rand ( 0 0$30 , 1 1$0 ) ) ;
15424: LD_INT 1050
15426: PPUSH
15427: LD_INT 2100
15429: PPUSH
15430: CALL_OW 12
15434: PPUSH
15435: CALL_OW 67
// hex = RandHexArea ( bedny_ar , true ) ;
15439: LD_ADDR_VAR 0 1
15443: PUSH
15444: LD_INT 28
15446: PPUSH
15447: LD_INT 1
15449: PPUSH
15450: CALL_OW 16
15454: ST_TO_ADDR
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) <> 0 do
15455: LD_VAR 0 1
15459: PUSH
15460: LD_INT 1
15462: ARRAY
15463: PPUSH
15464: LD_VAR 0 1
15468: PUSH
15469: LD_INT 2
15471: ARRAY
15472: PPUSH
15473: CALL_OW 428
15477: PUSH
15478: LD_INT 0
15480: NONEQUAL
15481: IFFALSE 15501
// hex = RandHexArea ( bedny_ar , true ) ;
15483: LD_ADDR_VAR 0 1
15487: PUSH
15488: LD_INT 28
15490: PPUSH
15491: LD_INT 1
15493: PPUSH
15494: CALL_OW 16
15498: ST_TO_ADDR
15499: GO 15455
// CreateCratesXY ( 4 , hex [ 1 ] , hex [ 2 ] , true ) ;
15501: LD_INT 4
15503: PPUSH
15504: LD_VAR 0 1
15508: PUSH
15509: LD_INT 1
15511: ARRAY
15512: PPUSH
15513: LD_VAR 0 1
15517: PUSH
15518: LD_INT 2
15520: ARRAY
15521: PPUSH
15522: LD_INT 1
15524: PPUSH
15525: CALL_OW 54
// bedny = bedny ^ [ hex ] ;
15529: LD_ADDR_EXP 64
15533: PUSH
15534: LD_EXP 64
15538: PUSH
15539: LD_VAR 0 1
15543: PUSH
15544: EMPTY
15545: LIST
15546: ADD
15547: ST_TO_ADDR
// end ;
15548: PPOPN 1
15550: END
// every 0 0$10 trigger stav >= 6 and stav < 7 do var hex ;
15551: LD_EXP 60
15555: PUSH
15556: LD_INT 6
15558: GREATEREQUAL
15559: PUSH
15560: LD_EXP 60
15564: PUSH
15565: LD_INT 7
15567: LESS
15568: AND
15569: IFFALSE 15724
15571: GO 15573
15573: DISABLE
15574: LD_INT 0
15576: PPUSH
// begin wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
15577: LD_INT 1050
15579: PPUSH
15580: LD_INT 3150
15582: PPUSH
15583: CALL_OW 12
15587: PPUSH
15588: CALL_OW 67
// hex = RandHexArea ( bedny_ar , true ) ;
15592: LD_ADDR_VAR 0 1
15596: PUSH
15597: LD_INT 28
15599: PPUSH
15600: LD_INT 1
15602: PPUSH
15603: CALL_OW 16
15607: ST_TO_ADDR
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) <> 0 do
15608: LD_VAR 0 1
15612: PUSH
15613: LD_INT 1
15615: ARRAY
15616: PPUSH
15617: LD_VAR 0 1
15621: PUSH
15622: LD_INT 2
15624: ARRAY
15625: PPUSH
15626: CALL_OW 428
15630: PUSH
15631: LD_INT 0
15633: NONEQUAL
15634: IFFALSE 15654
// hex = RandHexArea ( bedny_ar , true ) ;
15636: LD_ADDR_VAR 0 1
15640: PUSH
15641: LD_INT 28
15643: PPUSH
15644: LD_INT 1
15646: PPUSH
15647: CALL_OW 16
15651: ST_TO_ADDR
15652: GO 15608
// CreateCratesXY ( Rand ( 3 , 5 ) , hex [ 1 ] , hex [ 2 ] , true ) ;
15654: LD_INT 3
15656: PPUSH
15657: LD_INT 5
15659: PPUSH
15660: CALL_OW 12
15664: PPUSH
15665: LD_VAR 0 1
15669: PUSH
15670: LD_INT 1
15672: ARRAY
15673: PPUSH
15674: LD_VAR 0 1
15678: PUSH
15679: LD_INT 2
15681: ARRAY
15682: PPUSH
15683: LD_INT 1
15685: PPUSH
15686: CALL_OW 54
// bedny = bedny ^ [ hex ] ;
15690: LD_ADDR_EXP 64
15694: PUSH
15695: LD_EXP 64
15699: PUSH
15700: LD_VAR 0 1
15704: PUSH
15705: EMPTY
15706: LIST
15707: ADD
15708: ST_TO_ADDR
// zasilek = zasilek + 1 ;
15709: LD_ADDR_EXP 67
15713: PUSH
15714: LD_EXP 67
15718: PUSH
15719: LD_INT 1
15721: PLUS
15722: ST_TO_ADDR
// enable ;
15723: ENABLE
// end ;
15724: PPOPN 1
15726: END
// every 0 0$10 trigger stav >= 5 and stav < 7 marked 503 do var hex ;
15727: LD_EXP 60
15731: PUSH
15732: LD_INT 5
15734: GREATEREQUAL
15735: PUSH
15736: LD_EXP 60
15740: PUSH
15741: LD_INT 7
15743: LESS
15744: AND
15745: IFFALSE 15910
15747: GO 15749
15749: DISABLE
15750: LD_INT 0
15752: PPUSH
// begin wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
15753: LD_INT 1050
15755: PPUSH
15756: LD_INT 3150
15758: PPUSH
15759: CALL_OW 12
15763: PPUSH
15764: CALL_OW 67
// hex = RandHexArea ( RU2_base , true ) ;
15768: LD_ADDR_VAR 0 1
15772: PUSH
15773: LD_INT 1
15775: PPUSH
15776: LD_INT 1
15778: PPUSH
15779: CALL_OW 16
15783: ST_TO_ADDR
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) <> 0 do
15784: LD_VAR 0 1
15788: PUSH
15789: LD_INT 1
15791: ARRAY
15792: PPUSH
15793: LD_VAR 0 1
15797: PUSH
15798: LD_INT 2
15800: ARRAY
15801: PPUSH
15802: CALL_OW 428
15806: PUSH
15807: LD_INT 0
15809: NONEQUAL
15810: IFFALSE 15830
// hex = RandHexArea ( RU2_base , true ) ;
15812: LD_ADDR_VAR 0 1
15816: PUSH
15817: LD_INT 1
15819: PPUSH
15820: LD_INT 1
15822: PPUSH
15823: CALL_OW 16
15827: ST_TO_ADDR
15828: GO 15784
// CreateCratesXY ( Rand ( 3 , 5 ) , hex [ 1 ] , hex [ 2 ] , true ) ;
15830: LD_INT 3
15832: PPUSH
15833: LD_INT 5
15835: PPUSH
15836: CALL_OW 12
15840: PPUSH
15841: LD_VAR 0 1
15845: PUSH
15846: LD_INT 1
15848: ARRAY
15849: PPUSH
15850: LD_VAR 0 1
15854: PUSH
15855: LD_INT 2
15857: ARRAY
15858: PPUSH
15859: LD_INT 1
15861: PPUSH
15862: CALL_OW 54
// bedny = bedny ^ [ hex ] ;
15866: LD_ADDR_EXP 64
15870: PUSH
15871: LD_EXP 64
15875: PUSH
15876: LD_VAR 0 1
15880: PUSH
15881: EMPTY
15882: LIST
15883: ADD
15884: ST_TO_ADDR
// zasilek = zasilek + 1 ;
15885: LD_ADDR_EXP 67
15889: PUSH
15890: LD_EXP 67
15894: PUSH
15895: LD_INT 1
15897: PLUS
15898: ST_TO_ADDR
// if zasilek < 4 then
15899: LD_EXP 67
15903: PUSH
15904: LD_INT 4
15906: LESS
15907: IFFALSE 15910
// enable ;
15909: ENABLE
// end ;
15910: PPOPN 1
15912: END
// export function test_is_auto_in_area ; var pom ; begin
15913: LD_INT 0
15915: PPUSH
15916: PPUSH
// pom = FilterUnitsInArea ( RU1_base , [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) ;
15917: LD_ADDR_VAR 0 2
15921: PUSH
15922: LD_INT 3
15924: PPUSH
15925: LD_INT 22
15927: PUSH
15928: LD_EXP 1
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PUSH
15937: LD_INT 21
15939: PUSH
15940: LD_INT 2
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PPUSH
15951: CALL_OW 70
15955: ST_TO_ADDR
// if pom > 0 then
15956: LD_VAR 0 2
15960: PUSH
15961: LD_INT 0
15963: GREATER
15964: IFFALSE 15976
// result = true else
15966: LD_ADDR_VAR 0 1
15970: PUSH
15971: LD_INT 1
15973: ST_TO_ADDR
15974: GO 15984
// result = false ;
15976: LD_ADDR_VAR 0 1
15980: PUSH
15981: LD_INT 0
15983: ST_TO_ADDR
// end ;
15984: LD_VAR 0 1
15988: RET
// function manage_rusi_sever ; begin
15989: LD_INT 0
15991: PPUSH
// wait ( 0 0$20 ) ;
15992: LD_INT 700
15994: PPUSH
15995: CALL_OW 67
// ComMoveXY ( Rusi_sever , 90 , 25 ) ;
15999: LD_EXP 56
16003: PPUSH
16004: LD_INT 90
16006: PPUSH
16007: LD_INT 25
16009: PPUSH
16010: CALL_OW 111
// end ;
16014: LD_VAR 0 1
16018: RET
// every 0 0$1 trigger FilterUnitsInArea ( Odber_bel , [ [ f_side , You2 ] ] ) > 0 do var pom , i ;
16019: LD_INT 14
16021: PPUSH
16022: LD_INT 22
16024: PUSH
16025: LD_EXP 4
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: EMPTY
16035: LIST
16036: PPUSH
16037: CALL_OW 70
16041: PUSH
16042: LD_INT 0
16044: GREATER
16045: IFFALSE 16155
16047: GO 16049
16049: DISABLE
16050: LD_INT 0
16052: PPUSH
16053: PPUSH
// begin pom = FilterUnitsInArea ( Odber_bel , [ [ f_side , You2 ] ] ) ;
16054: LD_ADDR_VAR 0 1
16058: PUSH
16059: LD_INT 14
16061: PPUSH
16062: LD_INT 22
16064: PUSH
16065: LD_EXP 4
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PUSH
16074: EMPTY
16075: LIST
16076: PPUSH
16077: CALL_OW 70
16081: ST_TO_ADDR
// for i in pom do
16082: LD_ADDR_VAR 0 2
16086: PUSH
16087: LD_VAR 0 1
16091: PUSH
16092: FOR_IN
16093: IFFALSE 16118
// if i in Rusi_sever then
16095: LD_VAR 0 2
16099: PUSH
16100: LD_EXP 56
16104: IN
16105: IFFALSE 16116
// RemoveUnit ( i ) ;
16107: LD_VAR 0 2
16111: PPUSH
16112: CALL_OW 64
16116: GO 16092
16118: POP
16119: POP
// pom = UnitFilter ( Rusi_sever , [ [ f_OK ] ] ) ;
16120: LD_ADDR_VAR 0 1
16124: PUSH
16125: LD_EXP 56
16129: PPUSH
16130: LD_INT 50
16132: PUSH
16133: EMPTY
16134: LIST
16135: PUSH
16136: EMPTY
16137: LIST
16138: PPUSH
16139: CALL_OW 72
16143: ST_TO_ADDR
// if pom > 0 then
16144: LD_VAR 0 1
16148: PUSH
16149: LD_INT 0
16151: GREATER
16152: IFFALSE 16155
// enable ;
16154: ENABLE
// end ;
16155: PPOPN 2
16157: END
// every 0 0$1 trigger belkov_returns do
16158: LD_EXP 8
16162: IFFALSE 16175
16164: GO 16166
16166: DISABLE
// begin placni_amiky_past ;
16167: CALL 17199 0 0
// placni_zpet_rusy_sever ;
16171: CALL 16176 0 0
// end ;
16175: END
// function placni_zpet_rusy_sever ; var i ; begin
16176: LD_INT 0
16178: PPUSH
16179: PPUSH
// for i in Rusi_sever do
16180: LD_ADDR_VAR 0 2
16184: PUSH
16185: LD_EXP 56
16189: PUSH
16190: FOR_IN
16191: IFFALSE 16210
// PlaceUnitArea ( i , Zpet_bel , false ) ;
16193: LD_VAR 0 2
16197: PPUSH
16198: LD_INT 15
16200: PPUSH
16201: LD_INT 0
16203: PPUSH
16204: CALL_OW 49
16208: GO 16190
16210: POP
16211: POP
// ComMoveXY ( Rusi_sever , 56 , 9 ) ;
16212: LD_EXP 56
16216: PPUSH
16217: LD_INT 56
16219: PPUSH
16220: LD_INT 9
16222: PPUSH
16223: CALL_OW 111
// AddComHold ( Rusi_sever ) ;
16227: LD_EXP 56
16231: PPUSH
16232: CALL_OW 200
// end ;
16236: LD_VAR 0 1
16240: RET
// export function posli_lidi_zpet ; var pom ; begin
16241: LD_INT 0
16243: PPUSH
16244: PPUSH
// pom = FilterUnitsInArea ( Upozarea , [ [ f_side , You ] ] ) ;
16245: LD_ADDR_VAR 0 2
16249: PUSH
16250: LD_INT 2
16252: PPUSH
16253: LD_INT 22
16255: PUSH
16256: LD_EXP 1
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: EMPTY
16266: LIST
16267: PPUSH
16268: CALL_OW 70
16272: ST_TO_ADDR
// ComMoveToArea ( pom , RU2_base ) ;
16273: LD_VAR 0 2
16277: PPUSH
16278: LD_INT 1
16280: PPUSH
16281: CALL_OW 113
// end ;
16285: LD_VAR 0 1
16289: RET
// export function posli_rusi_zpet_out_base ; var pom ; begin
16290: LD_INT 0
16292: PPUSH
16293: PPUSH
// pom = FilterUnitsInArea ( Out_base , [ [ f_side , You ] ] ) ;
16294: LD_ADDR_VAR 0 2
16298: PUSH
16299: LD_INT 6
16301: PPUSH
16302: LD_INT 22
16304: PUSH
16305: LD_EXP 1
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PUSH
16314: EMPTY
16315: LIST
16316: PPUSH
16317: CALL_OW 70
16321: ST_TO_ADDR
// ComMoveXY ( pom , 66 , 91 ) ;
16322: LD_VAR 0 2
16326: PPUSH
16327: LD_INT 66
16329: PPUSH
16330: LD_INT 91
16332: PPUSH
16333: CALL_OW 111
// end ;
16337: LD_VAR 0 1
16341: RET
// export function rusi_save_belkov ; begin
16342: LD_INT 0
16344: PPUSH
// enable ( 501 ) ;
16345: LD_INT 501
16347: ENABLE_MARKED
// enable ( 502 ) ;
16348: LD_INT 502
16350: ENABLE_MARKED
// enable ( 599 ) ;
16351: LD_INT 599
16353: ENABLE_MARKED
// end ;
16354: LD_VAR 0 1
16358: RET
// every 0 0$1 trigger GetLives ( bel ) < 800 marked 501 do
16359: LD_EXP 52
16363: PPUSH
16364: CALL_OW 256
16368: PUSH
16369: LD_INT 800
16371: LESS
16372: IFFALSE 16390
16374: GO 16376
16376: DISABLE
// begin SetLives ( bel , 800 ) ;
16377: LD_EXP 52
16381: PPUSH
16382: LD_INT 800
16384: PPUSH
16385: CALL_OW 234
// enable ;
16389: ENABLE
// end ;
16390: END
// every 0 0$1 trigger saved_bel do
16391: LD_EXP 69
16395: IFFALSE 16403
16397: GO 16399
16399: DISABLE
// begin disable ( 501 ) ;
16400: LD_INT 501
16402: DISABLE_MARKED
// end ;
16403: END
// every 0 0$1 trigger GetSide ( bel ) = You marked 599 do
16404: LD_EXP 52
16408: PPUSH
16409: CALL_OW 255
16413: PUSH
16414: LD_EXP 1
16418: EQUAL
16419: IFFALSE 16427
16421: GO 16423
16423: DISABLE
// begin disable ( 501 ) ;
16424: LD_INT 501
16426: DISABLE_MARKED
// end ;
16427: END
// every 0 0$1 marked 502 do var i ; var pom ;
16428: GO 16430
16430: DISABLE
16431: LD_INT 0
16433: PPUSH
16434: PPUSH
// begin pom = false ;
16435: LD_ADDR_VAR 0 2
16439: PUSH
16440: LD_INT 0
16442: ST_TO_ADDR
// wait ( cas_na_zachranu_belkova [ difficulty ] ) ;
16443: LD_EXP 43
16447: PUSH
16448: LD_OWVAR 67
16452: ARRAY
16453: PPUSH
16454: CALL_OW 67
// disable ( 501 ) ;
16458: LD_INT 501
16460: DISABLE_MARKED
// if IsOK ( bel ) and ( not saved_bel ) then
16461: LD_EXP 52
16465: PPUSH
16466: CALL_OW 302
16470: PUSH
16471: LD_EXP 69
16475: NOT
16476: AND
16477: IFFALSE 16483
// amici_attack_belkov ;
16479: CALL 18540 0 0
// while ( FilterUnitsInArea ( Belkov_kop , [ f_side , You2 ] ) + 0 > 0 ) and ( UnitFilter ( AMICI_UTOK_BELKOV_LIST , [ f_OK ] ) + 0 > 0 ) do
16483: LD_INT 25
16485: PPUSH
16486: LD_INT 22
16488: PUSH
16489: LD_EXP 4
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PPUSH
16498: CALL_OW 70
16502: PUSH
16503: LD_INT 0
16505: PLUS
16506: PUSH
16507: LD_INT 0
16509: GREATER
16510: PUSH
16511: LD_EXP 39
16515: PPUSH
16516: LD_INT 50
16518: PUSH
16519: EMPTY
16520: LIST
16521: PPUSH
16522: CALL_OW 72
16526: PUSH
16527: LD_INT 0
16529: PLUS
16530: PUSH
16531: LD_INT 0
16533: GREATER
16534: AND
16535: IFFALSE 16595
// begin wait ( 0 0$1 ) ;
16537: LD_INT 35
16539: PPUSH
16540: CALL_OW 67
// if objBelkov and IsDead ( bel ) and GetSide ( bel ) = 6 then
16544: LD_EXP 28
16548: PUSH
16549: LD_EXP 52
16553: PPUSH
16554: CALL_OW 301
16558: AND
16559: PUSH
16560: LD_EXP 52
16564: PPUSH
16565: CALL_OW 255
16569: PUSH
16570: LD_INT 6
16572: EQUAL
16573: AND
16574: IFFALSE 16593
// begin belkovSave = false ;
16576: LD_ADDR_EXP 10
16580: PUSH
16581: LD_INT 0
16583: ST_TO_ADDR
// wait ( 1 ) ;
16584: LD_INT 1
16586: PPUSH
16587: CALL_OW 67
// exit ;
16591: GO 16599
// end ; end ;
16593: GO 16483
// amici_retreat ;
16595: CALL 18687 0 0
// end ;
16599: PPOPN 2
16601: END
// every 0 0$2 trigger saved_bel do
16602: LD_EXP 69
16606: IFFALSE 16614
16608: GO 16610
16610: DISABLE
// begin disable ( 502 ) ;
16611: LD_INT 502
16613: DISABLE_MARKED
// end ;
16614: END
// export function create_rusi_navic ; var pom , i ; begin
16615: LD_INT 0
16617: PPUSH
16618: PPUSH
16619: PPUSH
// if CheckCharacterSet ( survivors1 ) then
16620: LD_STRING survivors1
16622: PPUSH
16623: CALL_OW 29
16627: IFFALSE 16644
// pom = CreateCharacterSet ( survivors1 ) else
16629: LD_ADDR_VAR 0 2
16633: PUSH
16634: LD_STRING survivors1
16636: PPUSH
16637: CALL_OW 31
16641: ST_TO_ADDR
16642: GO 16651
// pom = [ ] ;
16644: LD_ADDR_VAR 0 2
16648: PUSH
16649: EMPTY
16650: ST_TO_ADDR
// for i in pom do
16651: LD_ADDR_VAR 0 3
16655: PUSH
16656: LD_VAR 0 2
16660: PUSH
16661: FOR_IN
16662: IFFALSE 16701
// begin SetSide ( i , You2 ) ;
16664: LD_VAR 0 3
16668: PPUSH
16669: LD_EXP 4
16673: PPUSH
16674: CALL_OW 235
// PlaceUnitXYR ( i , 129 , 111 , 5 , false ) ;
16678: LD_VAR 0 3
16682: PPUSH
16683: LD_INT 129
16685: PPUSH
16686: LD_INT 111
16688: PPUSH
16689: LD_INT 5
16691: PPUSH
16692: LD_INT 0
16694: PPUSH
16695: CALL_OW 50
// end ;
16699: GO 16661
16701: POP
16702: POP
// if pom <> 0 then
16703: LD_VAR 0 2
16707: PUSH
16708: LD_INT 0
16710: NONEQUAL
16711: IFFALSE 16725
// ComEnterUnit ( pom , RU1_tov ) ;
16713: LD_VAR 0 2
16717: PPUSH
16718: LD_INT 2
16720: PPUSH
16721: CALL_OW 120
// rusi_survivors = pom ;
16725: LD_ADDR_EXP 58
16729: PUSH
16730: LD_VAR 0 2
16734: ST_TO_ADDR
// end ;
16735: LD_VAR 0 1
16739: RET
// every 0 0$5 do var zmena ;
16740: GO 16742
16742: DISABLE
16743: LD_INT 0
16745: PPUSH
// begin zmena = false ;
16746: LD_ADDR_VAR 0 1
16750: PUSH
16751: LD_INT 0
16753: ST_TO_ADDR
// if IsOk ( bur ) then
16754: LD_EXP 50
16758: PPUSH
16759: CALL_OW 302
16763: IFFALSE 16869
// if ( ( GetSkill ( bur , 1 ) <> BurSk [ 1 ] ) or ( GetSkill ( bur , 2 ) <> BurSk [ 2 ] ) or ( GetSkill ( bur , 3 ) <> BurSk [ 3 ] ) or ( GetSkill ( bur , 4 ) <> BurSk [ 4 ] ) ) then
16765: LD_EXP 50
16769: PPUSH
16770: LD_INT 1
16772: PPUSH
16773: CALL_OW 259
16777: PUSH
16778: LD_LOC 19
16782: PUSH
16783: LD_INT 1
16785: ARRAY
16786: NONEQUAL
16787: PUSH
16788: LD_EXP 50
16792: PPUSH
16793: LD_INT 2
16795: PPUSH
16796: CALL_OW 259
16800: PUSH
16801: LD_LOC 19
16805: PUSH
16806: LD_INT 2
16808: ARRAY
16809: NONEQUAL
16810: OR
16811: PUSH
16812: LD_EXP 50
16816: PPUSH
16817: LD_INT 3
16819: PPUSH
16820: CALL_OW 259
16824: PUSH
16825: LD_LOC 19
16829: PUSH
16830: LD_INT 3
16832: ARRAY
16833: NONEQUAL
16834: OR
16835: PUSH
16836: LD_EXP 50
16840: PPUSH
16841: LD_INT 4
16843: PPUSH
16844: CALL_OW 259
16848: PUSH
16849: LD_LOC 19
16853: PUSH
16854: LD_INT 4
16856: ARRAY
16857: NONEQUAL
16858: OR
16859: IFFALSE 16869
// zmena = true ;
16861: LD_ADDR_VAR 0 1
16865: PUSH
16866: LD_INT 1
16868: ST_TO_ADDR
// if IsOk ( Gny ) then
16869: LD_EXP 49
16873: PPUSH
16874: CALL_OW 302
16878: IFFALSE 16984
// if ( ( GetSkill ( Gny , 1 ) <> GnySk [ 1 ] ) or ( GetSkill ( Gny , 2 ) <> GnySk [ 2 ] ) or ( GetSkill ( Gny , 3 ) <> GnySk [ 3 ] ) or ( GetSkill ( Gny , 4 ) <> GnySk [ 4 ] ) ) then
16880: LD_EXP 49
16884: PPUSH
16885: LD_INT 1
16887: PPUSH
16888: CALL_OW 259
16892: PUSH
16893: LD_LOC 21
16897: PUSH
16898: LD_INT 1
16900: ARRAY
16901: NONEQUAL
16902: PUSH
16903: LD_EXP 49
16907: PPUSH
16908: LD_INT 2
16910: PPUSH
16911: CALL_OW 259
16915: PUSH
16916: LD_LOC 21
16920: PUSH
16921: LD_INT 2
16923: ARRAY
16924: NONEQUAL
16925: OR
16926: PUSH
16927: LD_EXP 49
16931: PPUSH
16932: LD_INT 3
16934: PPUSH
16935: CALL_OW 259
16939: PUSH
16940: LD_LOC 21
16944: PUSH
16945: LD_INT 3
16947: ARRAY
16948: NONEQUAL
16949: OR
16950: PUSH
16951: LD_EXP 49
16955: PPUSH
16956: LD_INT 4
16958: PPUSH
16959: CALL_OW 259
16963: PUSH
16964: LD_LOC 21
16968: PUSH
16969: LD_INT 4
16971: ARRAY
16972: NONEQUAL
16973: OR
16974: IFFALSE 16984
// zmena = true ;
16976: LD_ADDR_VAR 0 1
16980: PUSH
16981: LD_INT 1
16983: ST_TO_ADDR
// if IsOk ( bel ) then
16984: LD_EXP 52
16988: PPUSH
16989: CALL_OW 302
16993: IFFALSE 17099
// if ( ( GetSkill ( bel , 1 ) <> BelSk [ 1 ] ) or ( GetSkill ( bel , 2 ) <> BelSk [ 2 ] ) or ( GetSkill ( bel , 3 ) <> BelSk [ 3 ] ) or ( GetSkill ( bel , 4 ) <> BelSk [ 4 ] ) ) then
16995: LD_EXP 52
16999: PPUSH
17000: LD_INT 1
17002: PPUSH
17003: CALL_OW 259
17007: PUSH
17008: LD_LOC 20
17012: PUSH
17013: LD_INT 1
17015: ARRAY
17016: NONEQUAL
17017: PUSH
17018: LD_EXP 52
17022: PPUSH
17023: LD_INT 2
17025: PPUSH
17026: CALL_OW 259
17030: PUSH
17031: LD_LOC 20
17035: PUSH
17036: LD_INT 2
17038: ARRAY
17039: NONEQUAL
17040: OR
17041: PUSH
17042: LD_EXP 52
17046: PPUSH
17047: LD_INT 3
17049: PPUSH
17050: CALL_OW 259
17054: PUSH
17055: LD_LOC 20
17059: PUSH
17060: LD_INT 3
17062: ARRAY
17063: NONEQUAL
17064: OR
17065: PUSH
17066: LD_EXP 52
17070: PPUSH
17071: LD_INT 4
17073: PPUSH
17074: CALL_OW 259
17078: PUSH
17079: LD_LOC 20
17083: PUSH
17084: LD_INT 4
17086: ARRAY
17087: NONEQUAL
17088: OR
17089: IFFALSE 17099
// zmena = true ;
17091: LD_ADDR_VAR 0 1
17095: PUSH
17096: LD_INT 1
17098: ST_TO_ADDR
// if zmena then
17099: LD_VAR 0 1
17103: IFFALSE 17111
// hint_skilly else
17105: CALL 10969 0 0
17109: GO 17112
// enable ;
17111: ENABLE
// end ;
17112: PPOPN 1
17114: END
// every 0 0$3 trigger IsOk ( plat ) do
17115: LD_EXP 54
17119: PPUSH
17120: CALL_OW 302
17124: IFFALSE 17186
17126: GO 17128
17128: DISABLE
// begin enable ;
17129: ENABLE
// if GetLives ( plat ) < 1000 then
17130: LD_EXP 54
17134: PPUSH
17135: CALL_OW 256
17139: PUSH
17140: LD_INT 1000
17142: LESS
17143: IFFALSE 17157
// SetLives ( plat , 1000 ) ;
17145: LD_EXP 54
17149: PPUSH
17150: LD_INT 1000
17152: PPUSH
17153: CALL_OW 234
// if IsInArea ( plat , Out_base ) then
17157: LD_EXP 54
17161: PPUSH
17162: LD_INT 6
17164: PPUSH
17165: CALL_OW 308
17169: IFFALSE 17186
// ComMoveXY ( plat , 66 , 92 ) ;
17171: LD_EXP 54
17175: PPUSH
17176: LD_INT 66
17178: PPUSH
17179: LD_INT 92
17181: PPUSH
17182: CALL_OW 111
// end ; end_of_file
17186: END
// export Amici_past ; export Amici_baze ; export BWW_1 , BWW_2 ; export ABW1 , ABW2 ; var opravy ; var Am_opravari ; every 0 0$0.1 do
17187: GO 17189
17189: DISABLE
// begin opravy = false ;
17190: LD_ADDR_LOC 22
17194: PUSH
17195: LD_INT 0
17197: ST_TO_ADDR
// end ;
17198: END
// export function placni_amiky_past ; var i ; begin
17199: LD_INT 0
17201: PPUSH
17202: PPUSH
// for i in AMICI_PAST_LIST do
17203: LD_ADDR_VAR 0 2
17207: PUSH
17208: LD_EXP 37
17212: PUSH
17213: FOR_IN
17214: IFFALSE 17233
// PlaceUnitArea ( i , Am_past , false ) ;
17216: LD_VAR 0 2
17220: PPUSH
17221: LD_INT 7
17223: PPUSH
17224: LD_INT 0
17226: PPUSH
17227: CALL_OW 49
17231: GO 17213
17233: POP
17234: POP
// Amici_past = AMICI_PAST_LIST ;
17235: LD_ADDR_EXP 72
17239: PUSH
17240: LD_EXP 37
17244: ST_TO_ADDR
// AddComCrawl ( AMICI_PAST_LIST ) ;
17245: LD_EXP 37
17249: PPUSH
17250: CALL_OW 197
// for i = 1 to 3 do
17254: LD_ADDR_VAR 0 2
17258: PUSH
17259: DOUBLE
17260: LD_INT 1
17262: DEC
17263: ST_TO_ADDR
17264: LD_INT 3
17266: PUSH
17267: FOR_TO
17268: IFFALSE 17307
// begin if i > AMICI_PAST_LIST then
17270: LD_VAR 0 2
17274: PUSH
17275: LD_EXP 37
17279: GREATER
17280: IFFALSE 17284
// break ;
17282: GO 17307
// AddComMoveXY ( AMICI_PAST_LIST [ i ] , 60 , 28 ) ;
17284: LD_EXP 37
17288: PUSH
17289: LD_VAR 0 2
17293: ARRAY
17294: PPUSH
17295: LD_INT 60
17297: PPUSH
17298: LD_INT 28
17300: PPUSH
17301: CALL_OW 171
// end ;
17305: GO 17267
17307: POP
17308: POP
// for i = 4 to AMICI_PAST_LIST + 0 do
17309: LD_ADDR_VAR 0 2
17313: PUSH
17314: DOUBLE
17315: LD_INT 4
17317: DEC
17318: ST_TO_ADDR
17319: LD_EXP 37
17323: PUSH
17324: LD_INT 0
17326: PLUS
17327: PUSH
17328: FOR_TO
17329: IFFALSE 17354
// AddComMoveXY ( AMICI_PAST_LIST [ i ] , 73 , 21 ) ;
17331: LD_EXP 37
17335: PUSH
17336: LD_VAR 0 2
17340: ARRAY
17341: PPUSH
17342: LD_INT 73
17344: PPUSH
17345: LD_INT 21
17347: PPUSH
17348: CALL_OW 171
17352: GO 17328
17354: POP
17355: POP
// end ;
17356: LD_VAR 0 1
17360: RET
// export function stavba_am_baze ; var i ; var pom ; begin
17361: LD_INT 0
17363: PPUSH
17364: PPUSH
17365: PPUSH
// Amici_baze = AMICI_STAVENI_BASE_LIST ;
17366: LD_ADDR_EXP 73
17370: PUSH
17371: LD_EXP 38
17375: ST_TO_ADDR
// for i in AMICI_STAVENI_BASE_LIST do
17376: LD_ADDR_VAR 0 2
17380: PUSH
17381: LD_EXP 38
17385: PUSH
17386: FOR_IN
17387: IFFALSE 17406
// PlaceUnitArea ( i , Amici_enter , false ) ;
17389: LD_VAR 0 2
17393: PPUSH
17394: LD_INT 8
17396: PPUSH
17397: LD_INT 0
17399: PPUSH
17400: CALL_OW 49
17404: GO 17386
17406: POP
17407: POP
// ComMoveXY ( Amici_baze , 53 , 55 ) ;
17408: LD_EXP 73
17412: PPUSH
17413: LD_INT 53
17415: PPUSH
17416: LD_INT 55
17418: PPUSH
17419: CALL_OW 111
// uc_nation := nation_american ;
17423: LD_ADDR_OWVAR 21
17427: PUSH
17428: LD_INT 1
17430: ST_TO_ADDR
// uc_side := amici ;
17431: LD_ADDR_OWVAR 20
17435: PUSH
17436: LD_EXP 2
17440: ST_TO_ADDR
// bc_type := b_depot ;
17441: LD_ADDR_OWVAR 42
17445: PUSH
17446: LD_INT 0
17448: ST_TO_ADDR
// bc_level := 0 ;
17449: LD_ADDR_OWVAR 43
17453: PUSH
17454: LD_INT 0
17456: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 52 , 48 , 2 ) ;
17457: LD_INT 52
17459: PPUSH
17460: LD_INT 48
17462: PPUSH
17463: LD_INT 2
17465: PPUSH
17466: CALL_OW 47
// end ;
17470: LD_VAR 0 1
17474: RET
// every 0 0$5 trigger FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_depot ] ] ) > 0 do var pom , i ;
17475: LD_INT 9
17477: PPUSH
17478: LD_INT 22
17480: PUSH
17481: LD_EXP 2
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 30
17492: PUSH
17493: LD_INT 0
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PPUSH
17504: CALL_OW 70
17508: PUSH
17509: LD_INT 0
17511: GREATER
17512: IFFALSE 17675
17514: GO 17516
17516: DISABLE
17517: LD_INT 0
17519: PPUSH
17520: PPUSH
// begin pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_depot ] ] ) ;
17521: LD_ADDR_VAR 0 1
17525: PUSH
17526: LD_INT 9
17528: PPUSH
17529: LD_INT 22
17531: PUSH
17532: LD_EXP 2
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 30
17543: PUSH
17544: LD_INT 0
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PPUSH
17555: CALL_OW 70
17559: ST_TO_ADDR
// while IsConstructed ( pom [ 1 ] ) <> 0 do
17560: LD_VAR 0 1
17564: PUSH
17565: LD_INT 1
17567: ARRAY
17568: PPUSH
17569: CALL_OW 304
17573: PUSH
17574: LD_INT 0
17576: NONEQUAL
17577: IFFALSE 17588
// wait ( 0 0$2 ) ;
17579: LD_INT 70
17581: PPUSH
17582: CALL_OW 67
17586: GO 17560
// AddResourceType ( GetBase ( pom [ 1 ] ) , mat_cans , 40 ) ;
17588: LD_VAR 0 1
17592: PUSH
17593: LD_INT 1
17595: ARRAY
17596: PPUSH
17597: CALL_OW 274
17601: PPUSH
17602: LD_INT 1
17604: PPUSH
17605: LD_INT 40
17607: PPUSH
17608: CALL_OW 276
// for i in Amici_baze do
17612: LD_ADDR_VAR 0 2
17616: PUSH
17617: LD_EXP 73
17621: PUSH
17622: FOR_IN
17623: IFFALSE 17652
// if GetClass ( i ) = class_engineer then
17625: LD_VAR 0 2
17629: PPUSH
17630: CALL_OW 257
17634: PUSH
17635: LD_INT 2
17637: EQUAL
17638: IFFALSE 17650
// pom = i ;
17640: LD_ADDR_VAR 0 1
17644: PUSH
17645: LD_VAR 0 2
17649: ST_TO_ADDR
17650: GO 17622
17652: POP
17653: POP
// AddComBuild ( pom , b_breastwork , 61 , 52 , 4 ) ;
17654: LD_VAR 0 1
17658: PPUSH
17659: LD_INT 31
17661: PPUSH
17662: LD_INT 61
17664: PPUSH
17665: LD_INT 52
17667: PPUSH
17668: LD_INT 4
17670: PPUSH
17671: CALL_OW 205
// end ;
17675: PPOPN 2
17677: END
// every 0 0$5 trigger FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) > 0 do var pom , i ;
17678: LD_INT 9
17680: PPUSH
17681: LD_INT 22
17683: PUSH
17684: LD_EXP 2
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 30
17695: PUSH
17696: LD_INT 31
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PPUSH
17707: CALL_OW 70
17711: PUSH
17712: LD_INT 0
17714: GREATER
17715: IFFALSE 17854
17717: GO 17719
17719: DISABLE
17720: LD_INT 0
17722: PPUSH
17723: PPUSH
// begin pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) ;
17724: LD_ADDR_VAR 0 1
17728: PUSH
17729: LD_INT 9
17731: PPUSH
17732: LD_INT 22
17734: PUSH
17735: LD_EXP 2
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PUSH
17744: LD_INT 30
17746: PUSH
17747: LD_INT 31
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PPUSH
17758: CALL_OW 70
17762: ST_TO_ADDR
// while IsConstructed ( pom [ 1 ] ) <> 0 do
17763: LD_VAR 0 1
17767: PUSH
17768: LD_INT 1
17770: ARRAY
17771: PPUSH
17772: CALL_OW 304
17776: PUSH
17777: LD_INT 0
17779: NONEQUAL
17780: IFFALSE 17791
// wait ( 0 0$2 ) ;
17782: LD_INT 70
17784: PPUSH
17785: CALL_OW 67
17789: GO 17763
// for i in Amici_baze do
17791: LD_ADDR_VAR 0 2
17795: PUSH
17796: LD_EXP 73
17800: PUSH
17801: FOR_IN
17802: IFFALSE 17831
// if GetClass ( i ) = class_engineer then
17804: LD_VAR 0 2
17808: PPUSH
17809: CALL_OW 257
17813: PUSH
17814: LD_INT 2
17816: EQUAL
17817: IFFALSE 17829
// pom = i ;
17819: LD_ADDR_VAR 0 1
17823: PUSH
17824: LD_VAR 0 2
17828: ST_TO_ADDR
17829: GO 17801
17831: POP
17832: POP
// AddComBuild ( pom , b_breastwork , 62 , 56 , 4 ) ;
17833: LD_VAR 0 1
17837: PPUSH
17838: LD_INT 31
17840: PPUSH
17841: LD_INT 62
17843: PPUSH
17844: LD_INT 56
17846: PPUSH
17847: LD_INT 4
17849: PPUSH
17850: CALL_OW 205
// end ;
17854: PPOPN 2
17856: END
// every 0 0$5 trigger FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) > 1 do var pom , i , pom1 ;
17857: LD_INT 9
17859: PPUSH
17860: LD_INT 22
17862: PUSH
17863: LD_EXP 2
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 30
17874: PUSH
17875: LD_INT 31
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PPUSH
17886: CALL_OW 70
17890: PUSH
17891: LD_INT 1
17893: GREATER
17894: IFFALSE 18189
17896: GO 17898
17898: DISABLE
17899: LD_INT 0
17901: PPUSH
17902: PPUSH
17903: PPUSH
// begin pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) ;
17904: LD_ADDR_VAR 0 1
17908: PUSH
17909: LD_INT 9
17911: PPUSH
17912: LD_INT 22
17914: PUSH
17915: LD_EXP 2
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 30
17926: PUSH
17927: LD_INT 31
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PPUSH
17938: CALL_OW 70
17942: ST_TO_ADDR
// pom1 = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_class , class_soldier ] ] ) ;
17943: LD_ADDR_VAR 0 3
17947: PUSH
17948: LD_INT 9
17950: PPUSH
17951: LD_INT 22
17953: PUSH
17954: LD_EXP 2
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 25
17965: PUSH
17966: LD_INT 1
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PPUSH
17977: CALL_OW 70
17981: ST_TO_ADDR
// while IsConstructed ( pom [ 1 ] ) or IsConstructed ( pom [ 2 ] ) <> 0 do
17982: LD_VAR 0 1
17986: PUSH
17987: LD_INT 1
17989: ARRAY
17990: PPUSH
17991: CALL_OW 304
17995: PUSH
17996: LD_VAR 0 1
18000: PUSH
18001: LD_INT 2
18003: ARRAY
18004: PPUSH
18005: CALL_OW 304
18009: PUSH
18010: LD_INT 0
18012: NONEQUAL
18013: OR
18014: IFFALSE 18025
// wait ( 0 0$1 ) ;
18016: LD_INT 35
18018: PPUSH
18019: CALL_OW 67
18023: GO 17982
// ComEnterUnit ( pom1 [ 1 ] , pom [ 1 ] ) ;
18025: LD_VAR 0 3
18029: PUSH
18030: LD_INT 1
18032: ARRAY
18033: PPUSH
18034: LD_VAR 0 1
18038: PUSH
18039: LD_INT 1
18041: ARRAY
18042: PPUSH
18043: CALL_OW 120
// ComEnterUnit ( pom1 [ 2 ] , pom [ 2 ] ) ;
18047: LD_VAR 0 3
18051: PUSH
18052: LD_INT 2
18054: ARRAY
18055: PPUSH
18056: LD_VAR 0 1
18060: PUSH
18061: LD_INT 2
18063: ARRAY
18064: PPUSH
18065: CALL_OW 120
// SetBLevel ( pom , levely_bw_na_zapade [ difficulty ] ) ;
18069: LD_VAR 0 1
18073: PPUSH
18074: LD_EXP 44
18078: PUSH
18079: LD_OWVAR 67
18083: ARRAY
18084: PPUSH
18085: CALL_OW 241
// pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_depot ] ] ) ;
18089: LD_ADDR_VAR 0 1
18093: PUSH
18094: LD_INT 9
18096: PPUSH
18097: LD_INT 22
18099: PUSH
18100: LD_EXP 2
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 30
18111: PUSH
18112: LD_INT 0
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PPUSH
18123: CALL_OW 70
18127: ST_TO_ADDR
// pom1 = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_class , class_engineer ] ] ) ;
18128: LD_ADDR_VAR 0 3
18132: PUSH
18133: LD_INT 9
18135: PPUSH
18136: LD_INT 22
18138: PUSH
18139: LD_EXP 2
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 25
18150: PUSH
18151: LD_INT 2
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PPUSH
18162: CALL_OW 70
18166: ST_TO_ADDR
// ComEnterUnit ( pom1 , pom [ 1 ] ) ;
18167: LD_VAR 0 3
18171: PPUSH
18172: LD_VAR 0 1
18176: PUSH
18177: LD_INT 1
18179: ARRAY
18180: PPUSH
18181: CALL_OW 120
// nastav_levely_budov ;
18185: CALL 19763 0 0
// end ;
18189: PPOPN 3
18191: END
// export function amici_boj ; var mech ; var auto ; var i ; var AP ; begin
18192: LD_INT 0
18194: PPUSH
18195: PPUSH
18196: PPUSH
18197: PPUSH
18198: PPUSH
// ComMoveXY ( Amici_past , 64 , 16 ) ;
18199: LD_EXP 72
18203: PPUSH
18204: LD_INT 64
18206: PPUSH
18207: LD_INT 16
18209: PPUSH
18210: CALL_OW 111
// mech = vyber_cloveka ( Amici_past , class_mechanic ) ;
18214: LD_ADDR_VAR 0 2
18218: PUSH
18219: LD_EXP 72
18223: PPUSH
18224: LD_INT 3
18226: PPUSH
18227: CALL 4398 0 2
18231: ST_TO_ADDR
// if mech = 0 or ( not IsOK ( mech ) ) then
18232: LD_VAR 0 2
18236: PUSH
18237: LD_INT 0
18239: EQUAL
18240: PUSH
18241: LD_VAR 0 2
18245: PPUSH
18246: CALL_OW 302
18250: NOT
18251: OR
18252: IFFALSE 18282
// mech = UnitFilter ( Amici_past , [ [ f_ok ] ] ) [ 1 ] ;
18254: LD_ADDR_VAR 0 2
18258: PUSH
18259: LD_EXP 72
18263: PPUSH
18264: LD_INT 50
18266: PUSH
18267: EMPTY
18268: LIST
18269: PUSH
18270: EMPTY
18271: LIST
18272: PPUSH
18273: CALL_OW 72
18277: PUSH
18278: LD_INT 1
18280: ARRAY
18281: ST_TO_ADDR
// auto = FilterAllUnits ( [ [ f_side , You2 ] , [ f_type , unit_vehicle ] ] ) ;
18282: LD_ADDR_VAR 0 3
18286: PUSH
18287: LD_INT 22
18289: PUSH
18290: LD_EXP 4
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 21
18301: PUSH
18302: LD_INT 2
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PPUSH
18313: CALL_OW 69
18317: ST_TO_ADDR
// if auto > 0 then
18318: LD_VAR 0 3
18322: PUSH
18323: LD_INT 0
18325: GREATER
18326: IFFALSE 18342
// auto = auto [ 1 ] ;
18328: LD_ADDR_VAR 0 3
18332: PUSH
18333: LD_VAR 0 3
18337: PUSH
18338: LD_INT 1
18340: ARRAY
18341: ST_TO_ADDR
// if mech = 0 then
18342: LD_VAR 0 2
18346: PUSH
18347: LD_INT 0
18349: EQUAL
18350: IFFALSE 18366
// mech = Amici_past [ 1 ] ;
18352: LD_ADDR_VAR 0 2
18356: PUSH
18357: LD_EXP 72
18361: PUSH
18362: LD_INT 1
18364: ARRAY
18365: ST_TO_ADDR
// ComEnterUnit ( mech , auto ) ;
18366: LD_VAR 0 2
18370: PPUSH
18371: LD_VAR 0 3
18375: PPUSH
18376: CALL_OW 120
// AddComMoveXY ( Amici_past , 69 , 18 ) ;
18380: LD_EXP 72
18384: PPUSH
18385: LD_INT 69
18387: PPUSH
18388: LD_INT 18
18390: PPUSH
18391: CALL_OW 171
// AddComMoveXY ( auto , 72 , 21 ) ;
18395: LD_VAR 0 3
18399: PPUSH
18400: LD_INT 72
18402: PPUSH
18403: LD_INT 21
18405: PPUSH
18406: CALL_OW 171
// wait ( 0 0$3 ) ;
18410: LD_INT 105
18412: PPUSH
18413: CALL_OW 67
// zaber_to_auto ;
18417: CALL 19630 0 0
// while FilterAllUnits ( [ [ f_side , Amici ] , [ f_type , unit_vehicle ] ] ) = 0 do
18421: LD_INT 22
18423: PUSH
18424: LD_EXP 2
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 21
18435: PUSH
18436: LD_INT 2
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PPUSH
18447: CALL_OW 69
18451: PUSH
18452: LD_INT 0
18454: EQUAL
18455: IFFALSE 18535
// begin for i in Amici_past do
18457: LD_ADDR_VAR 0 4
18461: PUSH
18462: LD_EXP 72
18466: PUSH
18467: FOR_IN
18468: IFFALSE 18495
// if IsOK ( i ) then
18470: LD_VAR 0 4
18474: PPUSH
18475: CALL_OW 302
18479: IFFALSE 18493
// begin AP = i ;
18481: LD_ADDR_VAR 0 5
18485: PUSH
18486: LD_VAR 0 4
18490: ST_TO_ADDR
// break ;
18491: GO 18495
// end ;
18493: GO 18467
18495: POP
18496: POP
// ComEnterUnit ( AP , Auto_belkov ) ;
18497: LD_VAR 0 5
18501: PPUSH
18502: LD_EXP 70
18506: PPUSH
18507: CALL_OW 120
// AddComMoveXY ( AP , 73 , 22 ) ;
18511: LD_VAR 0 5
18515: PPUSH
18516: LD_INT 73
18518: PPUSH
18519: LD_INT 22
18521: PPUSH
18522: CALL_OW 171
// wait ( 0 0$2 ) ;
18526: LD_INT 70
18528: PPUSH
18529: CALL_OW 67
// end ;
18533: GO 18421
// end ;
18535: LD_VAR 0 1
18539: RET
// export function amici_attack_belkov ; var i ; begin
18540: LD_INT 0
18542: PPUSH
18543: PPUSH
// if GetSide ( bel ) <> You then
18544: LD_EXP 52
18548: PPUSH
18549: CALL_OW 255
18553: PUSH
18554: LD_EXP 1
18558: NONEQUAL
18559: IFFALSE 18682
// begin for i in AMICI_UTOK_BELKOV_LIST do
18561: LD_ADDR_VAR 0 2
18565: PUSH
18566: LD_EXP 39
18570: PUSH
18571: FOR_IN
18572: IFFALSE 18591
// PlaceUnitArea ( i , Zpet_bel , false ) ;
18574: LD_VAR 0 2
18578: PPUSH
18579: LD_INT 15
18581: PPUSH
18582: LD_INT 0
18584: PPUSH
18585: CALL_OW 49
18589: GO 18571
18591: POP
18592: POP
// McMove ( 1 , AMICI_UTOK_BELKOV_LIST , [ [ 44 , 6 ] , [ 36 , 5 ] , [ 36 , 10 ] , [ GetX ( bel ) , GetY ( bel ) ] , [ 52 , 2 ] ] , [ mc_move_agressive ] ) ;
18593: LD_INT 1
18595: PPUSH
18596: LD_EXP 39
18600: PPUSH
18601: LD_INT 44
18603: PUSH
18604: LD_INT 6
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 36
18613: PUSH
18614: LD_INT 5
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 36
18623: PUSH
18624: LD_INT 10
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_EXP 52
18635: PPUSH
18636: CALL_OW 250
18640: PUSH
18641: LD_EXP 52
18645: PPUSH
18646: CALL_OW 251
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 52
18657: PUSH
18658: LD_INT 2
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: PPUSH
18672: LD_INT 6
18674: PUSH
18675: EMPTY
18676: LIST
18677: PPUSH
18678: CALL_OW 398
// end ; end ;
18682: LD_VAR 0 1
18686: RET
// export function amici_retreat ; var i , Amici_All ; begin
18687: LD_INT 0
18689: PPUSH
18690: PPUSH
18691: PPUSH
// Amici_All := AMICI_UTOK_BELKOV_LIST union AMICI_PAST_LIST ^ auto_belkov ;
18692: LD_ADDR_VAR 0 3
18696: PUSH
18697: LD_EXP 39
18701: PUSH
18702: LD_EXP 37
18706: PUSH
18707: LD_EXP 70
18711: ADD
18712: UNION
18713: ST_TO_ADDR
// repeat ComMoveToArea ( Amici_All , Zpet_bel ) ;
18714: LD_VAR 0 3
18718: PPUSH
18719: LD_INT 15
18721: PPUSH
18722: CALL_OW 113
// wait ( 0 0$1 ) ;
18726: LD_INT 35
18728: PPUSH
18729: CALL_OW 67
// for i in Amici_All do
18733: LD_ADDR_VAR 0 2
18737: PUSH
18738: LD_VAR 0 3
18742: PUSH
18743: FOR_IN
18744: IFFALSE 18815
// begin if not ( IsOK ( i ) ) then
18746: LD_VAR 0 2
18750: PPUSH
18751: CALL_OW 302
18755: NOT
18756: IFFALSE 18774
// Amici_All := Amici_All diff i ;
18758: LD_ADDR_VAR 0 3
18762: PUSH
18763: LD_VAR 0 3
18767: PUSH
18768: LD_VAR 0 2
18772: DIFF
18773: ST_TO_ADDR
// if IsInArea ( i , Zpet_bel ) then
18774: LD_VAR 0 2
18778: PPUSH
18779: LD_INT 15
18781: PPUSH
18782: CALL_OW 308
18786: IFFALSE 18813
// begin Amici_All := Amici_All diff i ;
18788: LD_ADDR_VAR 0 3
18792: PUSH
18793: LD_VAR 0 3
18797: PUSH
18798: LD_VAR 0 2
18802: DIFF
18803: ST_TO_ADDR
// RemoveUnit ( i ) ;
18804: LD_VAR 0 2
18808: PPUSH
18809: CALL_OW 64
// end ; end ;
18813: GO 18743
18815: POP
18816: POP
// until Amici_All = [ ] ;
18817: LD_VAR 0 3
18821: PUSH
18822: EMPTY
18823: EQUAL
18824: IFFALSE 18714
// end ;
18826: LD_VAR 0 1
18830: RET
// every 0 0$2 trigger FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) = 2 do
18831: LD_INT 9
18833: PPUSH
18834: LD_INT 22
18836: PUSH
18837: LD_EXP 2
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 30
18848: PUSH
18849: LD_INT 31
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PPUSH
18860: CALL_OW 70
18864: PUSH
18865: LD_INT 2
18867: EQUAL
18868: IFFALSE 18909
18870: GO 18872
18872: DISABLE
// begin Am_opravari = UnitFilter ( Amici_baze , [ [ f_class , class_engineer ] ] ) ;
18873: LD_ADDR_LOC 23
18877: PUSH
18878: LD_EXP 73
18882: PPUSH
18883: LD_INT 25
18885: PUSH
18886: LD_INT 2
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: EMPTY
18894: LIST
18895: PPUSH
18896: CALL_OW 72
18900: ST_TO_ADDR
// opravy = true ;
18901: LD_ADDR_LOC 22
18905: PUSH
18906: LD_INT 1
18908: ST_TO_ADDR
// end ;
18909: END
// every 0 0$4 trigger opravy do var pom , i ; var pom1 , pom2 ;
18910: LD_LOC 22
18914: IFFALSE 19390
18916: GO 18918
18918: DISABLE
18919: LD_INT 0
18921: PPUSH
18922: PPUSH
18923: PPUSH
18924: PPUSH
// begin pom1 = [ ] ;
18925: LD_ADDR_VAR 0 3
18929: PUSH
18930: EMPTY
18931: ST_TO_ADDR
// pom = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_breastwork ] ] ) ;
18932: LD_ADDR_VAR 0 1
18936: PUSH
18937: LD_INT 9
18939: PPUSH
18940: LD_INT 22
18942: PUSH
18943: LD_EXP 2
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: LD_INT 30
18954: PUSH
18955: LD_INT 31
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PPUSH
18966: CALL_OW 70
18970: ST_TO_ADDR
// for i in pom do
18971: LD_ADDR_VAR 0 2
18975: PUSH
18976: LD_VAR 0 1
18980: PUSH
18981: FOR_IN
18982: IFFALSE 19017
// if GetLives ( i ) < 1000 then
18984: LD_VAR 0 2
18988: PPUSH
18989: CALL_OW 256
18993: PUSH
18994: LD_INT 1000
18996: LESS
18997: IFFALSE 19015
// pom1 = pom1 ^ i ;
18999: LD_ADDR_VAR 0 3
19003: PUSH
19004: LD_VAR 0 3
19008: PUSH
19009: LD_VAR 0 2
19013: ADD
19014: ST_TO_ADDR
19015: GO 18981
19017: POP
19018: POP
// case pom1 + 0 of 1 :
19019: LD_VAR 0 3
19023: PUSH
19024: LD_INT 0
19026: PLUS
19027: PUSH
19028: LD_INT 1
19030: DOUBLE
19031: EQUAL
19032: IFTRUE 19036
19034: GO 19140
19036: POP
// begin ComExitBuilding ( Am_opravari ) ;
19037: LD_LOC 23
19041: PPUSH
19042: CALL_OW 122
// AddComRepairBuilding ( Am_opravari , pom1 [ 1 ] ) ;
19046: LD_LOC 23
19050: PPUSH
19051: LD_VAR 0 3
19055: PUSH
19056: LD_INT 1
19058: ARRAY
19059: PPUSH
19060: CALL_OW 190
// pom2 = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_depot ] ] ) ;
19064: LD_ADDR_VAR 0 4
19068: PUSH
19069: LD_INT 9
19071: PPUSH
19072: LD_INT 22
19074: PUSH
19075: LD_EXP 2
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: LD_INT 30
19086: PUSH
19087: LD_INT 0
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PPUSH
19098: CALL_OW 70
19102: ST_TO_ADDR
// if pom2 > 0 then
19103: LD_VAR 0 4
19107: PUSH
19108: LD_INT 0
19110: GREATER
19111: IFFALSE 19131
// AddComEnterUnit ( Am_opravari , pom2 [ 1 ] ) ;
19113: LD_LOC 23
19117: PPUSH
19118: LD_VAR 0 4
19122: PUSH
19123: LD_INT 1
19125: ARRAY
19126: PPUSH
19127: CALL_OW 180
// wait ( 0 0$5 ) ;
19131: LD_INT 175
19133: PPUSH
19134: CALL_OW 67
// end ; 2 :
19138: GO 19389
19140: LD_INT 2
19142: DOUBLE
19143: EQUAL
19144: IFTRUE 19148
19146: GO 19388
19148: POP
// begin if Am_opravari + 0 = 2 then
19149: LD_LOC 23
19153: PUSH
19154: LD_INT 0
19156: PLUS
19157: PUSH
19158: LD_INT 2
19160: EQUAL
19161: IFFALSE 19285
// begin ComExitBuilding ( Am_opravari ) ;
19163: LD_LOC 23
19167: PPUSH
19168: CALL_OW 122
// AddComRepairBuilding ( Am_opravari [ 2 ] , pom1 [ 1 ] ) ;
19172: LD_LOC 23
19176: PUSH
19177: LD_INT 2
19179: ARRAY
19180: PPUSH
19181: LD_VAR 0 3
19185: PUSH
19186: LD_INT 1
19188: ARRAY
19189: PPUSH
19190: CALL_OW 190
// AddComRepairBuilding ( Am_opravari [ 1 ] , pom1 [ 1 ] ) ;
19194: LD_LOC 23
19198: PUSH
19199: LD_INT 1
19201: ARRAY
19202: PPUSH
19203: LD_VAR 0 3
19207: PUSH
19208: LD_INT 1
19210: ARRAY
19211: PPUSH
19212: CALL_OW 190
// pom2 = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_depot ] ] ) ;
19216: LD_ADDR_VAR 0 4
19220: PUSH
19221: LD_INT 9
19223: PPUSH
19224: LD_INT 22
19226: PUSH
19227: LD_EXP 2
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 30
19238: PUSH
19239: LD_INT 0
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PPUSH
19250: CALL_OW 70
19254: ST_TO_ADDR
// if pom2 > 0 then
19255: LD_VAR 0 4
19259: PUSH
19260: LD_INT 0
19262: GREATER
19263: IFFALSE 19283
// AddComEnterUnit ( Am_opravari , pom2 [ 1 ] ) ;
19265: LD_LOC 23
19269: PPUSH
19270: LD_VAR 0 4
19274: PUSH
19275: LD_INT 1
19277: ARRAY
19278: PPUSH
19279: CALL_OW 180
// end else
19283: GO 19379
// begin ComExitBuilding ( Am_opravari ) ;
19285: LD_LOC 23
19289: PPUSH
19290: CALL_OW 122
// AddComRepairBuilding ( Am_opravari , pom1 [ 1 ] ) ;
19294: LD_LOC 23
19298: PPUSH
19299: LD_VAR 0 3
19303: PUSH
19304: LD_INT 1
19306: ARRAY
19307: PPUSH
19308: CALL_OW 190
// pom2 = FilterUnitsInArea ( Am_base , [ [ f_side , Amici ] , [ f_btype , b_depot ] ] ) ;
19312: LD_ADDR_VAR 0 4
19316: PUSH
19317: LD_INT 9
19319: PPUSH
19320: LD_INT 22
19322: PUSH
19323: LD_EXP 2
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 30
19334: PUSH
19335: LD_INT 0
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PPUSH
19346: CALL_OW 70
19350: ST_TO_ADDR
// if pom2 > 0 then
19351: LD_VAR 0 4
19355: PUSH
19356: LD_INT 0
19358: GREATER
19359: IFFALSE 19379
// AddComEnterUnit ( Am_opravari , pom2 [ 1 ] ) ;
19361: LD_LOC 23
19365: PPUSH
19366: LD_VAR 0 4
19370: PUSH
19371: LD_INT 1
19373: ARRAY
19374: PPUSH
19375: CALL_OW 180
// end ; wait ( 0 0$5 ) ;
19379: LD_INT 175
19381: PPUSH
19382: CALL_OW 67
// end ; end ;
19386: GO 19389
19388: POP
// enable ;
19389: ENABLE
// end ;
19390: PPOPN 4
19392: END
// every 0 0$1 trigger opravy do var pom , i ;
19393: LD_LOC 22
19397: IFFALSE 19467
19399: GO 19401
19401: DISABLE
19402: LD_INT 0
19404: PPUSH
19405: PPUSH
// begin pom = [ ] ;
19406: LD_ADDR_VAR 0 1
19410: PUSH
19411: EMPTY
19412: ST_TO_ADDR
// for i in Am_opravari do
19413: LD_ADDR_VAR 0 2
19417: PUSH
19418: LD_LOC 23
19422: PUSH
19423: FOR_IN
19424: IFFALSE 19455
// if IsOK ( i ) then
19426: LD_VAR 0 2
19430: PPUSH
19431: CALL_OW 302
19435: IFFALSE 19453
// pom = pom ^ i ;
19437: LD_ADDR_VAR 0 1
19441: PUSH
19442: LD_VAR 0 1
19446: PUSH
19447: LD_VAR 0 2
19451: ADD
19452: ST_TO_ADDR
19453: GO 19423
19455: POP
19456: POP
// Am_opravari = pom ;
19457: LD_ADDR_LOC 23
19461: PUSH
19462: LD_VAR 0 1
19466: ST_TO_ADDR
// end ;
19467: PPOPN 2
19469: END
// export function amici_po_kecech ; var i , j ; var pom ; begin
19470: LD_INT 0
19472: PPUSH
19473: PPUSH
19474: PPUSH
19475: PPUSH
// i = 1 ;
19476: LD_ADDR_VAR 0 2
19480: PUSH
19481: LD_INT 1
19483: ST_TO_ADDR
// if GetSide ( auto_belkov ) <> Amici then
19484: LD_EXP 70
19488: PPUSH
19489: CALL_OW 255
19493: PUSH
19494: LD_EXP 2
19498: NONEQUAL
19499: IFFALSE 19582
// begin for i in Amici_past do
19501: LD_ADDR_VAR 0 2
19505: PUSH
19506: LD_EXP 72
19510: PUSH
19511: FOR_IN
19512: IFFALSE 19537
// if IsOK ( i ) then
19514: LD_VAR 0 2
19518: PPUSH
19519: CALL_OW 302
19523: IFFALSE 19535
// pom = i ;
19525: LD_ADDR_VAR 0 4
19529: PUSH
19530: LD_VAR 0 2
19534: ST_TO_ADDR
19535: GO 19511
19537: POP
19538: POP
// ComEnterUnit ( pom , auto_belkov ) ;
19539: LD_VAR 0 4
19543: PPUSH
19544: LD_EXP 70
19548: PPUSH
19549: CALL_OW 120
// AddComMoveXY ( pom , 74 , 22 ) ;
19553: LD_VAR 0 4
19557: PPUSH
19558: LD_INT 74
19560: PPUSH
19561: LD_INT 22
19563: PPUSH
19564: CALL_OW 171
// i = i + 1 ;
19568: LD_ADDR_VAR 0 2
19572: PUSH
19573: LD_VAR 0 2
19577: PUSH
19578: LD_INT 1
19580: PLUS
19581: ST_TO_ADDR
// end ; for i in Amici_past do
19582: LD_ADDR_VAR 0 2
19586: PUSH
19587: LD_EXP 72
19591: PUSH
19592: FOR_IN
19593: IFFALSE 19623
// if IsOK ( i ) then
19595: LD_VAR 0 2
19599: PPUSH
19600: CALL_OW 302
19604: IFFALSE 19621
// ComMoveXY ( i , 72 , 25 ) ;
19606: LD_VAR 0 2
19610: PPUSH
19611: LD_INT 72
19613: PPUSH
19614: LD_INT 25
19616: PPUSH
19617: CALL_OW 111
19621: GO 19592
19623: POP
19624: POP
// end ;
19625: LD_VAR 0 1
19629: RET
// function zaber_to_auto ; var i , pom ; begin
19630: LD_INT 0
19632: PPUSH
19633: PPUSH
19634: PPUSH
// while ( FilterAllUnits ( [ [ f_side , Amici ] , [ f_type , unit_vehicle ] ] ) = 0 ) and IsOK ( auto_belkov ) do
19635: LD_INT 22
19637: PUSH
19638: LD_EXP 2
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 21
19649: PUSH
19650: LD_INT 2
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PPUSH
19661: CALL_OW 69
19665: PUSH
19666: LD_INT 0
19668: EQUAL
19669: PUSH
19670: LD_EXP 70
19674: PPUSH
19675: CALL_OW 302
19679: AND
19680: IFFALSE 19758
// begin for i in Amici_past do
19682: LD_ADDR_VAR 0 2
19686: PUSH
19687: LD_EXP 72
19691: PUSH
19692: FOR_IN
19693: IFFALSE 19718
// if IsOK ( i ) then
19695: LD_VAR 0 2
19699: PPUSH
19700: CALL_OW 302
19704: IFFALSE 19716
// pom = i ;
19706: LD_ADDR_VAR 0 3
19710: PUSH
19711: LD_VAR 0 2
19715: ST_TO_ADDR
19716: GO 19692
19718: POP
19719: POP
// ComEnterUnit ( pom , auto_belkov ) ;
19720: LD_VAR 0 3
19724: PPUSH
19725: LD_EXP 70
19729: PPUSH
19730: CALL_OW 120
// AddComMoveXY ( pom , 72 , 20 ) ;
19734: LD_VAR 0 3
19738: PPUSH
19739: LD_INT 72
19741: PPUSH
19742: LD_INT 20
19744: PPUSH
19745: CALL_OW 171
// wait ( 0 0$2 ) ;
19749: LD_INT 70
19751: PPUSH
19752: CALL_OW 67
// end ;
19756: GO 19635
// end ;
19758: LD_VAR 0 1
19762: RET
// function nastav_levely_budov ; begin
19763: LD_INT 0
19765: PPUSH
// SetBLevel ( [ Am_bre1 , Am_bre2 ] , levely_bw_na_vychode ) ;
19766: LD_INT 30
19768: PUSH
19769: LD_INT 31
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PPUSH
19776: LD_EXP 45
19780: PPUSH
19781: CALL_OW 241
// SetBLevel ( [ BWW_1 , BWW_2 ] , levely_bw_na_vychode ) ;
19785: LD_EXP 74
19789: PUSH
19790: LD_EXP 75
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PPUSH
19799: LD_EXP 45
19803: PPUSH
19804: CALL_OW 241
// end ; end_of_file
19808: LD_VAR 0 1
19812: RET
// every 0 0$5 trigger posily_go do var pom ; var i ;
19813: LD_EXP 68
19817: IFFALSE 19931
19819: GO 19821
19821: DISABLE
19822: LD_INT 0
19824: PPUSH
19825: PPUSH
// begin pom = [ RU2_hv1 , RU2_hv2 ] ;
19826: LD_ADDR_VAR 0 1
19830: PUSH
19831: LD_INT 15
19833: PUSH
19834: LD_INT 16
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: ST_TO_ADDR
// wait ( 2 ) ;
19841: LD_INT 2
19843: PPUSH
19844: CALL_OW 67
// AddComAgressiveMove ( pom , GetX ( bur ) , GetY ( bur ) ) ;
19848: LD_VAR 0 1
19852: PPUSH
19853: LD_EXP 50
19857: PPUSH
19858: CALL_OW 250
19862: PPUSH
19863: LD_EXP 50
19867: PPUSH
19868: CALL_OW 251
19872: PPUSH
19873: CALL_OW 174
// wait ( 0 0$6 ) ;
19877: LD_INT 210
19879: PPUSH
19880: CALL_OW 67
// for i in pom do
19884: LD_ADDR_VAR 0 2
19888: PUSH
19889: LD_VAR 0 1
19893: PUSH
19894: FOR_IN
19895: IFFALSE 19929
// begin SetSide ( i , You ) ;
19897: LD_VAR 0 2
19901: PPUSH
19902: LD_EXP 1
19906: PPUSH
19907: CALL_OW 235
// BurlakComp = BurlakComp ^ i ;
19911: LD_ADDR_EXP 14
19915: PUSH
19916: LD_EXP 14
19920: PUSH
19921: LD_VAR 0 2
19925: ADD
19926: ST_TO_ADDR
// end ;
19927: GO 19894
19929: POP
19930: POP
// end ;
19931: PPOPN 2
19933: END
// on VehicleCaptured ( vehicle , ab , side , human ) do begin if side = 1 then
19934: LD_VAR 0 3
19938: PUSH
19939: LD_INT 1
19941: EQUAL
19942: IFFALSE 19948
// SA_RecaptureBielkovsTank ;
19944: CALL 20152 0 0
// if ab = auto_belkov then
19948: LD_VAR 0 2
19952: PUSH
19953: LD_EXP 70
19957: EQUAL
19958: IFFALSE 19970
// auto_belkov = vehicle ;
19960: LD_ADDR_EXP 70
19964: PUSH
19965: LD_VAR 0 1
19969: ST_TO_ADDR
// debug_strings = [ auto_belkov , GetSide ( auto_belkov ) , bel , IsDrivenBy ( auto_belkov ) ] ;
19970: LD_ADDR_OWVAR 48
19974: PUSH
19975: LD_EXP 70
19979: PUSH
19980: LD_EXP 70
19984: PPUSH
19985: CALL_OW 255
19989: PUSH
19990: LD_EXP 52
19994: PUSH
19995: LD_EXP 70
19999: PPUSH
20000: CALL_OW 311
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: ST_TO_ADDR
// enable ;
20011: ENABLE
// end ;
20012: PPOPN 4
20014: END
// on Command ( com ) do var i , j , temp ;
20015: LD_INT 0
20017: PPUSH
20018: PPUSH
20019: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
20020: LD_ADDR_VAR 0 2
20024: PUSH
20025: LD_INT 22
20027: PUSH
20028: LD_INT 3
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 21
20037: PUSH
20038: LD_INT 1
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PPUSH
20049: CALL_OW 69
20053: PUSH
20054: FOR_IN
20055: IFFALSE 20147
// if GetTaskList ( i ) > 0 then
20057: LD_VAR 0 2
20061: PPUSH
20062: CALL_OW 437
20066: PUSH
20067: LD_INT 0
20069: GREATER
20070: IFFALSE 20145
// for j = 1 to GetTaskList ( i ) do
20072: LD_ADDR_VAR 0 3
20076: PUSH
20077: DOUBLE
20078: LD_INT 1
20080: DEC
20081: ST_TO_ADDR
20082: LD_VAR 0 2
20086: PPUSH
20087: CALL_OW 437
20091: PUSH
20092: FOR_TO
20093: IFFALSE 20143
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
20095: LD_ADDR_VAR 0 4
20099: PUSH
20100: LD_VAR 0 2
20104: PPUSH
20105: CALL_OW 437
20109: PUSH
20110: LD_VAR 0 3
20114: ARRAY
20115: PUSH
20116: LD_INT 4
20118: ARRAY
20119: ST_TO_ADDR
// if temp = RU1_dep then
20120: LD_VAR 0 4
20124: PUSH
20125: LD_INT 1
20127: EQUAL
20128: IFFALSE 20141
// SetTaskList ( i , [ ] ) ;
20130: LD_VAR 0 2
20134: PPUSH
20135: EMPTY
20136: PPUSH
20137: CALL_OW 446
// end ;
20141: GO 20092
20143: POP
20144: POP
20145: GO 20054
20147: POP
20148: POP
// end ; end_of_file
20149: PPOPN 4
20151: END
// export function SA_RecaptureBielkovsTank ; begin
20152: LD_INT 0
20154: PPUSH
// SetAchievement ( ACH_PRE ) ;
20155: LD_STRING ACH_PRE
20157: PPUSH
20158: CALL_OW 543
// end ;
20162: LD_VAR 0 1
20166: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) = 0 do
20167: LD_INT 22
20169: PUSH
20170: LD_INT 1
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: LD_INT 30
20179: PUSH
20180: LD_INT 31
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PPUSH
20191: CALL_OW 69
20195: PUSH
20196: LD_INT 0
20198: EQUAL
20199: IFFALSE 20211
20201: GO 20203
20203: DISABLE
// SetAchievement ( ACH_SEC ) ; end_of_file
20204: LD_STRING ACH_SEC
20206: PPUSH
20207: CALL_OW 543
20211: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
20212: LD_INT 0
20214: PPUSH
20215: PPUSH
// if not missionNumber then
20216: LD_VAR 0 2
20220: NOT
20221: IFFALSE 20225
// exit ;
20223: GO 20355
// achiv := false ;
20225: LD_ADDR_VAR 0 7
20229: PUSH
20230: LD_INT 0
20232: ST_TO_ADDR
// case campaignNumber of 1 :
20233: LD_VAR 0 1
20237: PUSH
20238: LD_INT 1
20240: DOUBLE
20241: EQUAL
20242: IFTRUE 20246
20244: GO 20257
20246: POP
// achiv := ACH_GOTA ; 2 :
20247: LD_ADDR_VAR 0 7
20251: PUSH
20252: LD_STRING ACH_GOTA
20254: ST_TO_ADDR
20255: GO 20307
20257: LD_INT 2
20259: DOUBLE
20260: EQUAL
20261: IFTRUE 20265
20263: GO 20268
20265: POP
// ; 3 :
20266: GO 20307
20268: LD_INT 3
20270: DOUBLE
20271: EQUAL
20272: IFTRUE 20276
20274: GO 20287
20276: POP
// achiv := ACH_MOTSU ; 4 :
20277: LD_ADDR_VAR 0 7
20281: PUSH
20282: LD_STRING ACH_MOTSU
20284: ST_TO_ADDR
20285: GO 20307
20287: LD_INT 4
20289: DOUBLE
20290: EQUAL
20291: IFTRUE 20295
20293: GO 20306
20295: POP
// achiv := ACH_LOP ; end ;
20296: LD_ADDR_VAR 0 7
20300: PUSH
20301: LD_STRING ACH_LOP
20303: ST_TO_ADDR
20304: GO 20307
20306: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
20307: LD_OWVAR 67
20311: PUSH
20312: LD_INT 3
20314: EQUAL
20315: PUSH
20316: LD_VAR 0 7
20320: AND
20321: PUSH
20322: LD_VAR 0 3
20326: AND
20327: PUSH
20328: LD_VAR 0 4
20332: AND
20333: PUSH
20334: LD_VAR 0 5
20338: AND
20339: IFFALSE 20355
// SetAchievementEX ( achiv , missionNumber ) ;
20341: LD_VAR 0 7
20345: PPUSH
20346: LD_VAR 0 2
20350: PPUSH
20351: CALL_OW 564
// end ;
20355: LD_VAR 0 6
20359: RET
// export function SA_BehemothConstructed ; begin
20360: LD_INT 0
20362: PPUSH
// SetAchievement ( ACH_SMC ) ;
20363: LD_STRING ACH_SMC
20365: PPUSH
20366: CALL_OW 543
// end ;
20370: LD_VAR 0 1
20374: RET
