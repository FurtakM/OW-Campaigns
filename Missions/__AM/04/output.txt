// export rus , amer , amer2 ; export rh ; export amhsold3 , amhsold4 , amhsold5 , amhsold6 , amhsold8 , amhsold9 , amhsolda , amhsoldb , amhsoldc ; export rubdepo0 , rubbunk1 , rubbrwr2 ; export rusove2 ; export attacking ; export bunker_done , brwr_done ; export rubase1_gone ; export ruhmech3 ; export ruv1 , ruv2 ; export ruhsoldj , ruhsoldk , ruhsoldl ; export ruv4 , ruhmech5 ; var john , bobby , cyrus , lisa , frank , lucyd , amhsold7 ; var amhsold1 ; var i , j ; export depot_done ; var build_wrks ; var other_survivors ; function from_prev_mis ; var tmz ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// uc_side = amer ;
   4: LD_ADDR_OWVAR 20
   8: PUSH
   9: LD_EXP 2
  13: ST_TO_ADDR
// lisa = 0 ;
  14: LD_ADDR_LOC 4
  18: PUSH
  19: LD_INT 0
  21: ST_TO_ADDR
// bobby = 0 ;
  22: LD_ADDR_LOC 2
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// cyrus = 0 ;
  30: LD_ADDR_LOC 3
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// other_survivors = [ ] ;
  38: LD_ADDR_LOC 12
  42: PUSH
  43: EMPTY
  44: ST_TO_ADDR
// rh = newcharacter ( Harisson ) ;
  45: LD_ADDR_EXP 4
  49: PUSH
  50: LD_STRING Harisson
  52: PPUSH
  53: CALL_OW 25
  57: ST_TO_ADDR
// if not rh then
  58: LD_EXP 4
  62: NOT
  63: IFFALSE 78
// buildquery ( neny Harisson , [ OK ] ) ;
  65: LD_STRING neny Harisson
  67: PPUSH
  68: LD_STRING OK
  70: PUSH
  71: EMPTY
  72: LIST
  73: PPUSH
  74: CALL_OW 99
// if testcharacters ( JMM ) and checkcharacterset ( JMM ) then
  78: LD_STRING JMM
  80: PPUSH
  81: CALL_OW 28
  85: PUSH
  86: LD_STRING JMM
  88: PPUSH
  89: CALL_OW 29
  93: AND
  94: IFFALSE 114
// john = createcharacterwithclass ( JMM , class_soldier ) else
  96: LD_ADDR_LOC 1
 100: PUSH
 101: LD_STRING JMM
 103: PPUSH
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 35
 111: ST_TO_ADDR
 112: GO 127
// buildquery ( neny JMM , [ OK ] ) ;
 114: LD_STRING neny JMM
 116: PPUSH
 117: LD_STRING OK
 119: PUSH
 120: EMPTY
 121: LIST
 122: PPUSH
 123: CALL_OW 99
// if not testcharacters ( Lisa ) then
 127: LD_STRING Lisa
 129: PPUSH
 130: CALL_OW 28
 134: NOT
 135: IFFALSE 146
// msg ( neny Lisa ) else
 137: LD_STRING neny Lisa
 139: PPUSH
 140: CALL_OW 100
 144: GO 565
// if not checkcharacterset ( Lisa ) then
 146: LD_STRING Lisa
 148: PPUSH
 149: CALL_OW 29
 153: NOT
 154: IFFALSE 542
// if not testcharacters ( Cyrus ) then
 156: LD_STRING Cyrus
 158: PPUSH
 159: CALL_OW 28
 163: NOT
 164: IFFALSE 175
// msg ( neny Cyrus ) else
 166: LD_STRING neny Cyrus
 168: PPUSH
 169: CALL_OW 100
 173: GO 540
// if not checkcharacterset ( Cyrus ) then
 175: LD_STRING Cyrus
 177: PPUSH
 178: CALL_OW 29
 182: NOT
 183: IFFALSE 517
// if not testcharacters ( Bobby ) then
 185: LD_STRING Bobby
 187: PPUSH
 188: CALL_OW 28
 192: NOT
 193: IFFALSE 204
// msg ( neny Bobby ) else
 195: LD_STRING neny Bobby
 197: PPUSH
 198: CALL_OW 100
 202: GO 515
// if not checkcharacterset ( Bobby ) then
 204: LD_STRING Bobby
 206: PPUSH
 207: CALL_OW 29
 211: NOT
 212: IFFALSE 492
// if not testcharacters ( other_survivors ) then
 214: LD_STRING other_survivors
 216: PPUSH
 217: CALL_OW 28
 221: NOT
 222: IFFALSE 233
// msg ( neny other_survivors ) else
 224: LD_STRING neny other_survivors
 226: PPUSH
 227: CALL_OW 100
 231: GO 490
// if not checkcharacterset ( other_survivors ) then
 233: LD_STRING other_survivors
 235: PPUSH
 236: CALL_OW 29
 240: NOT
 241: IFFALSE 265
// begin preparesoldier ( sex_male , 3 ) ;
 243: LD_INT 1
 245: PPUSH
 246: LD_INT 3
 248: PPUSH
 249: CALL_OW 381
// amhsold3 = createhuman ;
 253: LD_ADDR_EXP 5
 257: PUSH
 258: CALL_OW 44
 262: ST_TO_ADDR
// end else
 263: GO 490
// begin other_survivors = createcharacterset ( other_survivors ) ;
 265: LD_ADDR_LOC 12
 269: PUSH
 270: LD_STRING other_survivors
 272: PPUSH
 273: CALL_OW 31
 277: ST_TO_ADDR
// amhsold3 = 0 ;
 278: LD_ADDR_EXP 5
 282: PUSH
 283: LD_INT 0
 285: ST_TO_ADDR
// for tmz in other_survivors do
 286: LD_ADDR_VAR 0 2
 290: PUSH
 291: LD_LOC 12
 295: PUSH
 296: FOR_IN
 297: IFFALSE 356
// if getclass ( tmz ) = class_soldier then
 299: LD_VAR 0 2
 303: PPUSH
 304: CALL_OW 257
 308: PUSH
 309: LD_INT 1
 311: EQUAL
 312: IFFALSE 354
// begin amhsold3 = other_survivors [ tmz ] ;
 314: LD_ADDR_EXP 5
 318: PUSH
 319: LD_LOC 12
 323: PUSH
 324: LD_VAR 0 2
 328: ARRAY
 329: ST_TO_ADDR
// other_survivors = other_survivors diff other_survivors [ tmz ] ;
 330: LD_ADDR_LOC 12
 334: PUSH
 335: LD_LOC 12
 339: PUSH
 340: LD_LOC 12
 344: PUSH
 345: LD_VAR 0 2
 349: ARRAY
 350: DIFF
 351: ST_TO_ADDR
// break ;
 352: GO 356
// end ;
 354: GO 296
 356: POP
 357: POP
// if not amhsold3 then
 358: LD_EXP 5
 362: NOT
 363: IFFALSE 437
// for tmz in other_survivors do
 365: LD_ADDR_VAR 0 2
 369: PUSH
 370: LD_LOC 12
 374: PUSH
 375: FOR_IN
 376: IFFALSE 435
// if getclass ( tmz ) = class_mechanic then
 378: LD_VAR 0 2
 382: PPUSH
 383: CALL_OW 257
 387: PUSH
 388: LD_INT 3
 390: EQUAL
 391: IFFALSE 433
// begin amhsold3 = other_survivors [ tmz ] ;
 393: LD_ADDR_EXP 5
 397: PUSH
 398: LD_LOC 12
 402: PUSH
 403: LD_VAR 0 2
 407: ARRAY
 408: ST_TO_ADDR
// other_survivors = other_survivors diff other_survivors [ tmz ] ;
 409: LD_ADDR_LOC 12
 413: PUSH
 414: LD_LOC 12
 418: PUSH
 419: LD_LOC 12
 423: PUSH
 424: LD_VAR 0 2
 428: ARRAY
 429: DIFF
 430: ST_TO_ADDR
// break ;
 431: GO 435
// end ;
 433: GO 375
 435: POP
 436: POP
// if not amhsold3 then
 437: LD_EXP 5
 441: NOT
 442: IFFALSE 478
// begin amhsold3 = other_survivors [ 1 ] ;
 444: LD_ADDR_EXP 5
 448: PUSH
 449: LD_LOC 12
 453: PUSH
 454: LD_INT 1
 456: ARRAY
 457: ST_TO_ADDR
// other_survivors = other_survivors diff other_survivors [ 1 ] ;
 458: LD_ADDR_LOC 12
 462: PUSH
 463: LD_LOC 12
 467: PUSH
 468: LD_LOC 12
 472: PUSH
 473: LD_INT 1
 475: ARRAY
 476: DIFF
 477: ST_TO_ADDR
// end ; savecharacters ( other_survivors , other_survivors ) ;
 478: LD_LOC 12
 482: PPUSH
 483: LD_STRING other_survivors
 485: PPUSH
 486: CALL_OW 38
// end else
 490: GO 515
// begin bobby = createcharacter ( Bobby ) ;
 492: LD_ADDR_LOC 2
 496: PUSH
 497: LD_STRING Bobby
 499: PPUSH
 500: CALL_OW 34
 504: ST_TO_ADDR
// amhsold3 = bobby ;
 505: LD_ADDR_EXP 5
 509: PUSH
 510: LD_LOC 2
 514: ST_TO_ADDR
// end else
 515: GO 540
// begin cyrus = createcharacter ( Cyrus ) ;
 517: LD_ADDR_LOC 3
 521: PUSH
 522: LD_STRING Cyrus
 524: PPUSH
 525: CALL_OW 34
 529: ST_TO_ADDR
// amhsold3 = cyrus ;
 530: LD_ADDR_EXP 5
 534: PUSH
 535: LD_LOC 3
 539: ST_TO_ADDR
// end else
 540: GO 565
// begin lisa = createcharacter ( Lisa ) ;
 542: LD_ADDR_LOC 4
 546: PUSH
 547: LD_STRING Lisa
 549: PPUSH
 550: CALL_OW 34
 554: ST_TO_ADDR
// amhsold3 = lisa ;
 555: LD_ADDR_EXP 5
 559: PUSH
 560: LD_LOC 4
 564: ST_TO_ADDR
// end ; if not testcharacters ( Frank ) or not checkcharacterset ( Frank ) then
 565: LD_STRING Frank
 567: PPUSH
 568: CALL_OW 28
 572: NOT
 573: PUSH
 574: LD_STRING Frank
 576: PPUSH
 577: CALL_OW 29
 581: NOT
 582: OR
 583: IFFALSE 595
// frank = 0 else
 585: LD_ADDR_LOC 5
 589: PUSH
 590: LD_INT 0
 592: ST_TO_ADDR
 593: GO 608
// frank = createcharacter ( Frank ) ;
 595: LD_ADDR_LOC 5
 599: PUSH
 600: LD_STRING Frank
 602: PPUSH
 603: CALL_OW 34
 607: ST_TO_ADDR
// lucyd = newcharacter ( Donaldson ) ;
 608: LD_ADDR_LOC 6
 612: PUSH
 613: LD_STRING Donaldson
 615: PPUSH
 616: CALL_OW 25
 620: ST_TO_ADDR
// if not lucyd then
 621: LD_LOC 6
 625: NOT
 626: IFFALSE 641
// buildquery ( neny Donaldson , [ OK ] ) ;
 628: LD_STRING neny Donaldson
 630: PPUSH
 631: LD_STRING OK
 633: PUSH
 634: EMPTY
 635: LIST
 636: PPUSH
 637: CALL_OW 99
// amhsold1 = newcharacter ( Brown ) ;
 641: LD_ADDR_LOC 8
 645: PUSH
 646: LD_STRING Brown
 648: PPUSH
 649: CALL_OW 25
 653: ST_TO_ADDR
// if not amhsold1 then
 654: LD_LOC 8
 658: NOT
 659: IFFALSE 674
// buildquery ( neny Brown , [ OK ] ) ;
 661: LD_STRING neny Brown
 663: PPUSH
 664: LD_STRING OK
 666: PUSH
 667: EMPTY
 668: LIST
 669: PPUSH
 670: CALL_OW 99
// setdir ( amhsold1 , 3 ) ;
 674: LD_LOC 8
 678: PPUSH
 679: LD_INT 3
 681: PPUSH
 682: CALL_OW 233
// placeunitxy ( amhsold1 , 55 , 24 , false ) ;
 686: LD_LOC 8
 690: PPUSH
 691: LD_INT 55
 693: PPUSH
 694: LD_INT 24
 696: PPUSH
 697: LD_INT 0
 699: PPUSH
 700: CALL_OW 48
// setdir ( amhsold3 , 3 ) ;
 704: LD_EXP 5
 708: PPUSH
 709: LD_INT 3
 711: PPUSH
 712: CALL_OW 233
// placeunitxy ( amhsold3 , 49 , 12 , false ) ;
 716: LD_EXP 5
 720: PPUSH
 721: LD_INT 49
 723: PPUSH
 724: LD_INT 12
 726: PPUSH
 727: LD_INT 0
 729: PPUSH
 730: CALL_OW 48
// placehumaninunit ( john , amvj ) ;
 734: LD_LOC 1
 738: PPUSH
 739: LD_INT 32
 741: PPUSH
 742: CALL_OW 52
// centeronxy ( 42 , 26 ) ;
 746: LD_INT 42
 748: PPUSH
 749: LD_INT 26
 751: PPUSH
 752: CALL_OW 84
// commovexy ( amvj , 53 , 24 ) ;
 756: LD_INT 32
 758: PPUSH
 759: LD_INT 53
 761: PPUSH
 762: LD_INT 24
 764: PPUSH
 765: CALL_OW 111
// addcomexitvehicle ( amvj ) ;
 769: LD_INT 32
 771: PPUSH
 772: CALL_OW 181
// end ;
 776: LD_VAR 0 1
 780: RET
// function saveitall ; var tmz , bz , tmzo ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
 786: PPUSH
// savecharacters ( john , JMM ) ;
 787: LD_LOC 1
 791: PPUSH
 792: LD_STRING JMM
 794: PPUSH
 795: CALL_OW 38
// if cyrus then
 799: LD_LOC 3
 803: IFFALSE 817
// savecharacters ( cyrus , Cyrus ) ;
 805: LD_LOC 3
 809: PPUSH
 810: LD_STRING Cyrus
 812: PPUSH
 813: CALL_OW 38
// if bobby then
 817: LD_LOC 2
 821: IFFALSE 835
// savecharacters ( bobby , Bobby ) ;
 823: LD_LOC 2
 827: PPUSH
 828: LD_STRING Bobby
 830: PPUSH
 831: CALL_OW 38
// if lisa then
 835: LD_LOC 4
 839: IFFALSE 853
// savecharacters ( lisa , Lisa ) ;
 841: LD_LOC 4
 845: PPUSH
 846: LD_STRING Lisa
 848: PPUSH
 849: CALL_OW 38
// savecharacters ( frank , Frank ) ;
 853: LD_LOC 5
 857: PPUSH
 858: LD_STRING Frank
 860: PPUSH
 861: CALL_OW 38
// savecharacters ( lucyd , Donaldson ) ;
 865: LD_LOC 6
 869: PPUSH
 870: LD_STRING Donaldson
 872: PPUSH
 873: CALL_OW 38
// savecharacters ( amhsold1 , Brown ) ;
 877: LD_LOC 8
 881: PPUSH
 882: LD_STRING Brown
 884: PPUSH
 885: CALL_OW 38
// savecharacters ( filterallunits ( [ [ f_side , amer ] , [ f_type , unit_human ] ] ) diff [ john , cyrus , bobby , lisa , frank , lucyd , amhsold1 ] , otherGamma2 ) ;
 889: LD_INT 22
 891: PUSH
 892: LD_EXP 2
 896: PUSH
 897: EMPTY
 898: LIST
 899: LIST
 900: PUSH
 901: LD_INT 21
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PPUSH
 915: CALL_OW 69
 919: PUSH
 920: LD_LOC 1
 924: PUSH
 925: LD_LOC 3
 929: PUSH
 930: LD_LOC 2
 934: PUSH
 935: LD_LOC 4
 939: PUSH
 940: LD_LOC 5
 944: PUSH
 945: LD_LOC 6
 949: PUSH
 950: LD_LOC 8
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: LIST
 962: LIST
 963: DIFF
 964: PPUSH
 965: LD_STRING otherGamma2
 967: PPUSH
 968: CALL_OW 38
// if lisa then
 972: LD_LOC 4
 976: IFFALSE 1013
// if isdead ( lisa ) then
 978: LD_LOC 4
 982: PPUSH
 983: CALL_OW 301
 987: IFFALSE 1001
// savevariable ( 0 , LisaLoc ) else
 989: LD_INT 0
 991: PPUSH
 992: LD_STRING LisaLoc
 994: PPUSH
 995: CALL_OW 39
 999: GO 1011
// savevariable ( 2 , LisaLoc ) else
1001: LD_INT 2
1003: PPUSH
1004: LD_STRING LisaLoc
1006: PPUSH
1007: CALL_OW 39
1011: GO 1023
// savevariable ( 1 , LisaLoc ) ;
1013: LD_INT 1
1015: PPUSH
1016: LD_STRING LisaLoc
1018: PPUSH
1019: CALL_OW 39
// if bobby then
1023: LD_LOC 2
1027: IFFALSE 1064
// if isdead ( bobby ) then
1029: LD_LOC 2
1033: PPUSH
1034: CALL_OW 301
1038: IFFALSE 1052
// savevariable ( 0 , BobbyLoc ) else
1040: LD_INT 0
1042: PPUSH
1043: LD_STRING BobbyLoc
1045: PPUSH
1046: CALL_OW 39
1050: GO 1062
// savevariable ( 2 , BobbyLoc ) else
1052: LD_INT 2
1054: PPUSH
1055: LD_STRING BobbyLoc
1057: PPUSH
1058: CALL_OW 39
1062: GO 1074
// savevariable ( 1 , BobbyLoc ) ;
1064: LD_INT 1
1066: PPUSH
1067: LD_STRING BobbyLoc
1069: PPUSH
1070: CALL_OW 39
// if cyrus then
1074: LD_LOC 3
1078: IFFALSE 1115
// if isdead ( cyrus ) then
1080: LD_LOC 3
1084: PPUSH
1085: CALL_OW 301
1089: IFFALSE 1103
// savevariable ( 0 , CyrusLoc ) else
1091: LD_INT 0
1093: PPUSH
1094: LD_STRING CyrusLoc
1096: PPUSH
1097: CALL_OW 39
1101: GO 1113
// savevariable ( 2 , CyrusLoc ) else
1103: LD_INT 2
1105: PPUSH
1106: LD_STRING CyrusLoc
1108: PPUSH
1109: CALL_OW 39
1113: GO 1125
// savevariable ( 1 , CyrusLoc ) ;
1115: LD_INT 1
1117: PPUSH
1118: LD_STRING CyrusLoc
1120: PPUSH
1121: CALL_OW 39
// if frank then
1125: LD_LOC 5
1129: IFFALSE 1166
// if isdead ( frank ) then
1131: LD_LOC 5
1135: PPUSH
1136: CALL_OW 301
1140: IFFALSE 1154
// savevariable ( 0 , FrankLoc ) else
1142: LD_INT 0
1144: PPUSH
1145: LD_STRING FrankLoc
1147: PPUSH
1148: CALL_OW 39
1152: GO 1164
// savevariable ( 2 , FrankLoc ) else
1154: LD_INT 2
1156: PPUSH
1157: LD_STRING FrankLoc
1159: PPUSH
1160: CALL_OW 39
1164: GO 1176
// savevariable ( 1 , FrankLoc ) ;
1166: LD_INT 1
1168: PPUSH
1169: LD_STRING FrankLoc
1171: PPUSH
1172: CALL_OW 39
// if isdead ( amhsold1 ) then
1176: LD_LOC 8
1180: PPUSH
1181: CALL_OW 301
1185: IFFALSE 1199
// savevariable ( 0 , BrownLoc ) else
1187: LD_INT 0
1189: PPUSH
1190: LD_STRING BrownLoc
1192: PPUSH
1193: CALL_OW 39
1197: GO 1209
// savevariable ( 2 , BrownLoc ) ;
1199: LD_INT 2
1201: PPUSH
1202: LD_STRING BrownLoc
1204: PPUSH
1205: CALL_OW 39
// if isdead ( frank ) then
1209: LD_LOC 5
1213: PPUSH
1214: CALL_OW 301
1218: IFFALSE 1232
// savevariable ( 0 , DonaldsonLoc ) else
1220: LD_INT 0
1222: PPUSH
1223: LD_STRING DonaldsonLoc
1225: PPUSH
1226: CALL_OW 39
1230: GO 1242
// savevariable ( 2 , DonaldsonLoc ) ;
1232: LD_INT 2
1234: PPUSH
1235: LD_STRING DonaldsonLoc
1237: PPUSH
1238: CALL_OW 39
// tmz = filterunitsinarea ( ambase , [ [ f_or , [ f_side , amer ] , [ f_side , amer2 ] ] , [ f_nation , nation_american ] , [ f_btype , b_factory ] ] ) ;
1242: LD_ADDR_VAR 0 2
1246: PUSH
1247: LD_INT 2
1249: PPUSH
1250: LD_INT 2
1252: PUSH
1253: LD_INT 22
1255: PUSH
1256: LD_EXP 2
1260: PUSH
1261: EMPTY
1262: LIST
1263: LIST
1264: PUSH
1265: LD_INT 22
1267: PUSH
1268: LD_EXP 3
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: LIST
1281: PUSH
1282: LD_INT 23
1284: PUSH
1285: LD_INT 1
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PUSH
1292: LD_INT 30
1294: PUSH
1295: LD_INT 3
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PUSH
1302: EMPTY
1303: LIST
1304: LIST
1305: LIST
1306: PPUSH
1307: CALL_OW 70
1311: ST_TO_ADDR
// tmz = tmz ^ filterunitsinarea ( ambase , [ [ f_or , [ f_side , amer ] , [ f_side , amer2 ] ] , [ f_nation , nation_american ] , [ f_type , unit_building ] , f_not , [ f_btype , b_factory ] ] ) ;
1312: LD_ADDR_VAR 0 2
1316: PUSH
1317: LD_VAR 0 2
1321: PUSH
1322: LD_INT 2
1324: PPUSH
1325: LD_INT 2
1327: PUSH
1328: LD_INT 22
1330: PUSH
1331: LD_EXP 2
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: PUSH
1340: LD_INT 22
1342: PUSH
1343: LD_EXP 3
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: LIST
1356: PUSH
1357: LD_INT 23
1359: PUSH
1360: LD_INT 1
1362: PUSH
1363: EMPTY
1364: LIST
1365: LIST
1366: PUSH
1367: LD_INT 21
1369: PUSH
1370: LD_INT 3
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: PUSH
1377: LD_INT 3
1379: PUSH
1380: LD_INT 30
1382: PUSH
1383: LD_INT 3
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: PUSH
1390: EMPTY
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: PPUSH
1397: CALL_OW 70
1401: ADD
1402: ST_TO_ADDR
// tmzo = [ ] ;
1403: LD_ADDR_VAR 0 4
1407: PUSH
1408: EMPTY
1409: ST_TO_ADDR
// for bz in tmz do
1410: LD_ADDR_VAR 0 3
1414: PUSH
1415: LD_VAR 0 2
1419: PUSH
1420: FOR_IN
1421: IFFALSE 1778
// case getbtype ( bz ) of b_lab_basic , b_lab_weapon :
1423: LD_VAR 0 3
1427: PPUSH
1428: CALL_OW 266
1432: PUSH
1433: LD_INT 9
1435: DOUBLE
1436: EQUAL
1437: IFTRUE 1447
1439: LD_INT 10
1441: DOUBLE
1442: EQUAL
1443: IFTRUE 1447
1445: GO 1450
1447: POP
// begin end ; b_lab , b_lab_half , b_lab_full :
1448: GO 1776
1450: LD_INT 6
1452: DOUBLE
1453: EQUAL
1454: IFTRUE 1470
1456: LD_INT 7
1458: DOUBLE
1459: EQUAL
1460: IFTRUE 1470
1462: LD_INT 8
1464: DOUBLE
1465: EQUAL
1466: IFTRUE 1470
1468: GO 1583
1470: POP
// tmzo = tmzo ^ [ [ getx ( bz ) , gety ( bz ) , getdir ( bz ) , getbtype ( bz ) , getblevel ( bz ) , getnation ( bz ) , getlabkind ( bz , 1 ) , getlabkind ( bz , 2 ) ] ] ; b_bunker , b_turret :
1471: LD_ADDR_VAR 0 4
1475: PUSH
1476: LD_VAR 0 4
1480: PUSH
1481: LD_VAR 0 3
1485: PPUSH
1486: CALL_OW 250
1490: PUSH
1491: LD_VAR 0 3
1495: PPUSH
1496: CALL_OW 251
1500: PUSH
1501: LD_VAR 0 3
1505: PPUSH
1506: CALL_OW 254
1510: PUSH
1511: LD_VAR 0 3
1515: PPUSH
1516: CALL_OW 266
1520: PUSH
1521: LD_VAR 0 3
1525: PPUSH
1526: CALL_OW 267
1530: PUSH
1531: LD_VAR 0 3
1535: PPUSH
1536: CALL_OW 248
1540: PUSH
1541: LD_VAR 0 3
1545: PPUSH
1546: LD_INT 1
1548: PPUSH
1549: CALL_OW 268
1553: PUSH
1554: LD_VAR 0 3
1558: PPUSH
1559: LD_INT 2
1561: PPUSH
1562: CALL_OW 268
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: PUSH
1577: EMPTY
1578: LIST
1579: ADD
1580: ST_TO_ADDR
1581: GO 1776
1583: LD_INT 32
1585: DOUBLE
1586: EQUAL
1587: IFTRUE 1597
1589: LD_INT 33
1591: DOUBLE
1592: EQUAL
1593: IFTRUE 1597
1595: GO 1693
1597: POP
// tmzo = tmzo ^ [ [ getx ( bz ) , gety ( bz ) , getdir ( bz ) , getbtype ( bz ) , getblevel ( bz ) , getnation ( bz ) , getbweapon ( bz ) ] ] ; else
1598: LD_ADDR_VAR 0 4
1602: PUSH
1603: LD_VAR 0 4
1607: PUSH
1608: LD_VAR 0 3
1612: PPUSH
1613: CALL_OW 250
1617: PUSH
1618: LD_VAR 0 3
1622: PPUSH
1623: CALL_OW 251
1627: PUSH
1628: LD_VAR 0 3
1632: PPUSH
1633: CALL_OW 254
1637: PUSH
1638: LD_VAR 0 3
1642: PPUSH
1643: CALL_OW 266
1647: PUSH
1648: LD_VAR 0 3
1652: PPUSH
1653: CALL_OW 267
1657: PUSH
1658: LD_VAR 0 3
1662: PPUSH
1663: CALL_OW 248
1667: PUSH
1668: LD_VAR 0 3
1672: PPUSH
1673: CALL_OW 269
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: PUSH
1687: EMPTY
1688: LIST
1689: ADD
1690: ST_TO_ADDR
1691: GO 1776
1693: POP
// tmzo = tmzo ^ [ [ getx ( bz ) , gety ( bz ) , getdir ( bz ) , getbtype ( bz ) , getblevel ( bz ) , getnation ( bz ) ] ] ; end ;
1694: LD_ADDR_VAR 0 4
1698: PUSH
1699: LD_VAR 0 4
1703: PUSH
1704: LD_VAR 0 3
1708: PPUSH
1709: CALL_OW 250
1713: PUSH
1714: LD_VAR 0 3
1718: PPUSH
1719: CALL_OW 251
1723: PUSH
1724: LD_VAR 0 3
1728: PPUSH
1729: CALL_OW 254
1733: PUSH
1734: LD_VAR 0 3
1738: PPUSH
1739: CALL_OW 266
1743: PUSH
1744: LD_VAR 0 3
1748: PPUSH
1749: CALL_OW 267
1753: PUSH
1754: LD_VAR 0 3
1758: PPUSH
1759: CALL_OW 248
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: EMPTY
1773: LIST
1774: ADD
1775: ST_TO_ADDR
1776: GO 1420
1778: POP
1779: POP
// savevariable ( tmzo , Gamma2 ) ;
1780: LD_VAR 0 4
1784: PPUSH
1785: LD_STRING Gamma2
1787: PPUSH
1788: CALL_OW 39
// end ;
1792: LD_VAR 0 1
1796: RET
// export rusove , rusove0 ; var rusove1 ; export healeri ; var brwr_lev , bunk_lev ; function prepare_units ; begin
1797: LD_INT 0
1799: PPUSH
// amer = 1 ;
1800: LD_ADDR_EXP 2
1804: PUSH
1805: LD_INT 1
1807: ST_TO_ADDR
// amer2 = 4 ;
1808: LD_ADDR_EXP 3
1812: PUSH
1813: LD_INT 4
1815: ST_TO_ADDR
// rus = 3 ;
1816: LD_ADDR_EXP 1
1820: PUSH
1821: LD_INT 3
1823: ST_TO_ADDR
// inituc ;
1824: CALL_OW 18
// inithc ;
1828: CALL_OW 19
// initvc ;
1832: CALL_OW 20
// initbc ;
1836: CALL_OW 21
// from_prev_mis ;
1840: CALL 0 0 0
// comenterunit ( rusoldff , rubunkff ) ;
1844: LD_INT 40
1846: PPUSH
1847: LD_INT 39
1849: PPUSH
1850: CALL_OW 120
// uc_nation = nation_russian ;
1854: LD_ADDR_OWVAR 21
1858: PUSH
1859: LD_INT 3
1861: ST_TO_ADDR
// uc_side = rus ;
1862: LD_ADDR_OWVAR 20
1866: PUSH
1867: LD_EXP 1
1871: ST_TO_ADDR
// case difficulty of 2 :
1872: LD_OWVAR 67
1876: PUSH
1877: LD_INT 2
1879: DOUBLE
1880: EQUAL
1881: IFTRUE 1885
1883: GO 1898
1885: POP
// preparemechanic ( sex_male , 1 ) ; 3 :
1886: LD_INT 1
1888: PPUSH
1889: LD_INT 1
1891: PPUSH
1892: CALL_OW 383
1896: GO 1941
1898: LD_INT 3
1900: DOUBLE
1901: EQUAL
1902: IFTRUE 1906
1904: GO 1919
1906: POP
// preparemechanic ( sex_male , 2 ) ; 1 :
1907: LD_INT 1
1909: PPUSH
1910: LD_INT 2
1912: PPUSH
1913: CALL_OW 383
1917: GO 1941
1919: LD_INT 1
1921: DOUBLE
1922: EQUAL
1923: IFTRUE 1927
1925: GO 1940
1927: POP
// preparemechanic ( sex_male , 0 ) ; end ;
1928: LD_INT 1
1930: PPUSH
1931: LD_INT 0
1933: PPUSH
1934: CALL_OW 383
1938: GO 1941
1940: POP
// hc_sex = sex_male ;
1941: LD_ADDR_OWVAR 27
1945: PUSH
1946: LD_INT 1
1948: ST_TO_ADDR
// ruhmech3 = createhuman ;
1949: LD_ADDR_EXP 22
1953: PUSH
1954: CALL_OW 44
1958: ST_TO_ADDR
// case difficulty of 2 :
1959: LD_OWVAR 67
1963: PUSH
1964: LD_INT 2
1966: DOUBLE
1967: EQUAL
1968: IFTRUE 1972
1970: GO 1991
1972: POP
// begin vc_chassis = ru_medium_wheeled ;
1973: LD_ADDR_OWVAR 37
1977: PUSH
1978: LD_INT 21
1980: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
1981: LD_ADDR_OWVAR 40
1985: PUSH
1986: LD_INT 42
1988: ST_TO_ADDR
// end ; 3 :
1989: GO 2019
1991: LD_INT 3
1993: DOUBLE
1994: EQUAL
1995: IFTRUE 1999
1997: GO 2018
1999: POP
// begin vc_chassis = ru_medium_wheeled ;
2000: LD_ADDR_OWVAR 37
2004: PUSH
2005: LD_INT 21
2007: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
2008: LD_ADDR_OWVAR 40
2012: PUSH
2013: LD_INT 43
2015: ST_TO_ADDR
// end ; end ;
2016: GO 2019
2018: POP
// vc_control = control_manual ;
2019: LD_ADDR_OWVAR 38
2023: PUSH
2024: LD_INT 1
2026: ST_TO_ADDR
// vc_engine = engine_combustion ;
2027: LD_ADDR_OWVAR 39
2031: PUSH
2032: LD_INT 1
2034: ST_TO_ADDR
// if difficulty > 1 then
2035: LD_OWVAR 67
2039: PUSH
2040: LD_INT 1
2042: GREATER
2043: IFFALSE 2057
// ruv2 = createvehicle else
2045: LD_ADDR_EXP 24
2049: PUSH
2050: CALL_OW 45
2054: ST_TO_ADDR
2055: GO 2065
// ruv2 = 0 ;
2057: LD_ADDR_EXP 24
2061: PUSH
2062: LD_INT 0
2064: ST_TO_ADDR
// setdir ( ruv2 , 5 ) ;
2065: LD_EXP 24
2069: PPUSH
2070: LD_INT 5
2072: PPUSH
2073: CALL_OW 233
// placeunitxy ( ruv2 , 72 , 91 , false ) ;
2077: LD_EXP 24
2081: PPUSH
2082: LD_INT 72
2084: PPUSH
2085: LD_INT 91
2087: PPUSH
2088: LD_INT 0
2090: PPUSH
2091: CALL_OW 48
// placehumaninunit ( ruhmech3 , ruv2 ) ;
2095: LD_EXP 22
2099: PPUSH
2100: LD_EXP 24
2104: PPUSH
2105: CALL_OW 52
// case difficulty of 2 :
2109: LD_OWVAR 67
2113: PUSH
2114: LD_INT 2
2116: DOUBLE
2117: EQUAL
2118: IFTRUE 2122
2120: GO 2135
2122: POP
// preparemechanic ( sex_male , 1 ) ; 3 :
2123: LD_INT 1
2125: PPUSH
2126: LD_INT 1
2128: PPUSH
2129: CALL_OW 383
2133: GO 2178
2135: LD_INT 3
2137: DOUBLE
2138: EQUAL
2139: IFTRUE 2143
2141: GO 2156
2143: POP
// preparemechanic ( sex_male , 2 ) ; 1 :
2144: LD_INT 1
2146: PPUSH
2147: LD_INT 2
2149: PPUSH
2150: CALL_OW 383
2154: GO 2178
2156: LD_INT 1
2158: DOUBLE
2159: EQUAL
2160: IFTRUE 2164
2162: GO 2177
2164: POP
// preparemechanic ( sex_male , 0 ) ; end ;
2165: LD_INT 1
2167: PPUSH
2168: LD_INT 0
2170: PPUSH
2171: CALL_OW 383
2175: GO 2178
2177: POP
// ruhmech5 = createhuman ;
2178: LD_ADDR_EXP 29
2182: PUSH
2183: CALL_OW 44
2187: ST_TO_ADDR
// case difficulty of 2 :
2188: LD_OWVAR 67
2192: PUSH
2193: LD_INT 2
2195: DOUBLE
2196: EQUAL
2197: IFTRUE 2201
2199: GO 2220
2201: POP
// begin vc_chassis = ru_medium_wheeled ;
2202: LD_ADDR_OWVAR 37
2206: PUSH
2207: LD_INT 21
2209: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
2210: LD_ADDR_OWVAR 40
2214: PUSH
2215: LD_INT 42
2217: ST_TO_ADDR
// end ; 3 :
2218: GO 2275
2220: LD_INT 3
2222: DOUBLE
2223: EQUAL
2224: IFTRUE 2228
2226: GO 2247
2228: POP
// begin vc_chassis = ru_medium_wheeled ;
2229: LD_ADDR_OWVAR 37
2233: PUSH
2234: LD_INT 21
2236: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
2237: LD_ADDR_OWVAR 40
2241: PUSH
2242: LD_INT 43
2244: ST_TO_ADDR
// end ; 1 :
2245: GO 2275
2247: LD_INT 1
2249: DOUBLE
2250: EQUAL
2251: IFTRUE 2255
2253: GO 2274
2255: POP
// begin vc_chassis = ru_medium_wheeled ;
2256: LD_ADDR_OWVAR 37
2260: PUSH
2261: LD_INT 21
2263: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
2264: LD_ADDR_OWVAR 40
2268: PUSH
2269: LD_INT 42
2271: ST_TO_ADDR
// end ; end ;
2272: GO 2275
2274: POP
// vc_control = control_manual ;
2275: LD_ADDR_OWVAR 38
2279: PUSH
2280: LD_INT 1
2282: ST_TO_ADDR
// vc_engine = engine_combustion ;
2283: LD_ADDR_OWVAR 39
2287: PUSH
2288: LD_INT 1
2290: ST_TO_ADDR
// ruv4 = createvehicle ;
2291: LD_ADDR_EXP 28
2295: PUSH
2296: CALL_OW 45
2300: ST_TO_ADDR
// setdir ( ruv4 , 5 ) ;
2301: LD_EXP 28
2305: PPUSH
2306: LD_INT 5
2308: PPUSH
2309: CALL_OW 233
// placeunitxy ( ruv4 , 68 , 69 , false ) ;
2313: LD_EXP 28
2317: PPUSH
2318: LD_INT 68
2320: PPUSH
2321: LD_INT 69
2323: PPUSH
2324: LD_INT 0
2326: PPUSH
2327: CALL_OW 48
// placehumaninunit ( ruhmech5 , ruv4 ) ;
2331: LD_EXP 29
2335: PPUSH
2336: LD_EXP 28
2340: PPUSH
2341: CALL_OW 52
// case difficulty of 2 :
2345: LD_OWVAR 67
2349: PUSH
2350: LD_INT 2
2352: DOUBLE
2353: EQUAL
2354: IFTRUE 2358
2356: GO 2377
2358: POP
// begin vc_chassis = ru_medium_wheeled ;
2359: LD_ADDR_OWVAR 37
2363: PUSH
2364: LD_INT 21
2366: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
2367: LD_ADDR_OWVAR 40
2371: PUSH
2372: LD_INT 42
2374: ST_TO_ADDR
// end ; 3 :
2375: GO 2405
2377: LD_INT 3
2379: DOUBLE
2380: EQUAL
2381: IFTRUE 2385
2383: GO 2404
2385: POP
// begin vc_chassis = ru_medium_wheeled ;
2386: LD_ADDR_OWVAR 37
2390: PUSH
2391: LD_INT 21
2393: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
2394: LD_ADDR_OWVAR 40
2398: PUSH
2399: LD_INT 43
2401: ST_TO_ADDR
// end ; end ;
2402: GO 2405
2404: POP
// vc_control = control_manual ;
2405: LD_ADDR_OWVAR 38
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// vc_engine = engine_combustion ;
2413: LD_ADDR_OWVAR 39
2417: PUSH
2418: LD_INT 1
2420: ST_TO_ADDR
// if difficulty > 1 then
2421: LD_OWVAR 67
2425: PUSH
2426: LD_INT 1
2428: GREATER
2429: IFFALSE 2443
// ruv1 = createvehicle else
2431: LD_ADDR_EXP 23
2435: PUSH
2436: CALL_OW 45
2440: ST_TO_ADDR
2441: GO 2451
// ruv1 = 0 ;
2443: LD_ADDR_EXP 23
2447: PUSH
2448: LD_INT 0
2450: ST_TO_ADDR
// setdir ( ruv1 , 5 ) ;
2451: LD_EXP 23
2455: PPUSH
2456: LD_INT 5
2458: PPUSH
2459: CALL_OW 233
// placeunitxy ( ruv1 , 80 , 85 , false ) ;
2463: LD_EXP 23
2467: PPUSH
2468: LD_INT 80
2470: PPUSH
2471: LD_INT 85
2473: PPUSH
2474: LD_INT 0
2476: PPUSH
2477: CALL_OW 48
// commoveunit ( ruhmech0 , ruv1 ) ;
2481: LD_INT 3
2483: PPUSH
2484: LD_EXP 23
2488: PPUSH
2489: CALL_OW 112
// commoveunit ( ruhmech2 , ruv0 ) ;
2493: LD_INT 29
2495: PPUSH
2496: LD_INT 7
2498: PPUSH
2499: CALL_OW 112
// rusove1 = [ ruv0 , ruhsold1 , ruhsold2 ] ;
2503: LD_ADDR_LOC 13
2507: PUSH
2508: LD_INT 7
2510: PUSH
2511: LD_INT 12
2513: PUSH
2514: LD_INT 10
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: LIST
2521: ST_TO_ADDR
// rusove2 = [ ruhsold6 , ruhsold7 , ruv4 ] ;
2522: LD_ADDR_EXP 17
2526: PUSH
2527: LD_INT 27
2529: PUSH
2530: LD_INT 28
2532: PUSH
2533: LD_EXP 28
2537: PUSH
2538: EMPTY
2539: LIST
2540: LIST
2541: LIST
2542: ST_TO_ADDR
// rusove = [ ruv1 , ruv2 , ruhsold0 ] ;
2543: LD_ADDR_EXP 31
2547: PUSH
2548: LD_EXP 23
2552: PUSH
2553: LD_EXP 24
2557: PUSH
2558: LD_INT 8
2560: PUSH
2561: EMPTY
2562: LIST
2563: LIST
2564: LIST
2565: ST_TO_ADDR
// rusove0 = [ ] ;
2566: LD_ADDR_EXP 32
2570: PUSH
2571: EMPTY
2572: ST_TO_ADDR
// healeri = [ ruhscie0 , ruhscie1 ] ;
2573: LD_ADDR_EXP 33
2577: PUSH
2578: LD_INT 37
2580: PUSH
2581: LD_INT 36
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: ST_TO_ADDR
// comremember ( rusove ) ;
2588: LD_EXP 31
2592: PPUSH
2593: CALL_OW 143
// commoveunit ( ruhmech1 , rubfact0 ) ;
2597: LD_INT 19
2599: PPUSH
2600: LD_INT 24
2602: PPUSH
2603: CALL_OW 112
// comremember ( rusove2 ) ;
2607: LD_EXP 17
2611: PPUSH
2612: CALL_OW 143
// comhold ( rusove2 ) ;
2616: LD_EXP 17
2620: PPUSH
2621: CALL_OW 140
// commoveunit ( ruhsold3 , rubbrwr0 ) ;
2625: LD_INT 11
2627: PPUSH
2628: LD_INT 26
2630: PPUSH
2631: CALL_OW 112
// commoveunit ( ruhsold4 , rubbrwr1 ) ;
2635: LD_INT 9
2637: PPUSH
2638: LD_INT 23
2640: PPUSH
2641: CALL_OW 112
// commoveunit ( ruhsold5 , rubbunk0 ) ;
2645: LD_INT 20
2647: PPUSH
2648: LD_INT 25
2650: PPUSH
2651: CALL_OW 112
// commovexy ( rusove1 , 47 , 51 ) ;
2655: LD_LOC 13
2659: PPUSH
2660: LD_INT 47
2662: PPUSH
2663: LD_INT 51
2665: PPUSH
2666: CALL_OW 111
// case difficulty of 2 :
2670: LD_OWVAR 67
2674: PUSH
2675: LD_INT 2
2677: DOUBLE
2678: EQUAL
2679: IFTRUE 2683
2681: GO 2783
2683: POP
// begin setskill ( [ ruhmech0 , ruhmech2 ] , skill_mechanical , 2 ) ;
2684: LD_INT 3
2686: PUSH
2687: LD_INT 29
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: PPUSH
2694: LD_INT 3
2696: PPUSH
2697: LD_INT 2
2699: PPUSH
2700: CALL_OW 237
// complaceweapon ( rubbunk0 , ru_gatling_gun ) ;
2704: LD_INT 25
2706: PPUSH
2707: LD_INT 43
2709: PPUSH
2710: CALL_OW 148
// setskill ( [ ruhsold2 , ruhsold6 , ruhsold7 ] , skill_combat , 3 ) ;
2714: LD_INT 10
2716: PUSH
2717: LD_INT 27
2719: PUSH
2720: LD_INT 28
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: LIST
2727: PPUSH
2728: LD_INT 1
2730: PPUSH
2731: LD_INT 3
2733: PPUSH
2734: CALL_OW 237
// setskill ( ruhsold1 , skill_combat , 2 ) ;
2738: LD_INT 12
2740: PPUSH
2741: LD_INT 1
2743: PPUSH
2744: LD_INT 2
2746: PPUSH
2747: CALL_OW 237
// setblevel ( [ rubbrwr0 , rubbrwr1 ] , 2 ) ;
2751: LD_INT 26
2753: PUSH
2754: LD_INT 23
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PPUSH
2761: LD_INT 2
2763: PPUSH
2764: CALL_OW 241
// setblevel ( [ rubbunk0 ] , 2 ) ;
2768: LD_INT 25
2770: PUSH
2771: EMPTY
2772: LIST
2773: PPUSH
2774: LD_INT 2
2776: PPUSH
2777: CALL_OW 241
// end ; 3 :
2781: GO 3000
2783: LD_INT 3
2785: DOUBLE
2786: EQUAL
2787: IFTRUE 2791
2789: GO 2891
2791: POP
// begin setskill ( [ ruhmech0 , ruhmech2 ] , skill_mechanical , 2 ) ;
2792: LD_INT 3
2794: PUSH
2795: LD_INT 29
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: PPUSH
2802: LD_INT 3
2804: PPUSH
2805: LD_INT 2
2807: PPUSH
2808: CALL_OW 237
// complaceweapon ( rubbunk0 , ru_gun ) ;
2812: LD_INT 25
2814: PPUSH
2815: LD_INT 44
2817: PPUSH
2818: CALL_OW 148
// setskill ( [ ruhsold1 , ruhsold6 , ruhsold7 ] , skill_combat , 3 ) ;
2822: LD_INT 12
2824: PUSH
2825: LD_INT 27
2827: PUSH
2828: LD_INT 28
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: PPUSH
2836: LD_INT 1
2838: PPUSH
2839: LD_INT 3
2841: PPUSH
2842: CALL_OW 237
// setskill ( ruhsold2 , skill_combat , 4 ) ;
2846: LD_INT 10
2848: PPUSH
2849: LD_INT 1
2851: PPUSH
2852: LD_INT 4
2854: PPUSH
2855: CALL_OW 237
// setblevel ( [ rubbrwr0 , rubbrwr1 ] , 4 ) ;
2859: LD_INT 26
2861: PUSH
2862: LD_INT 23
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: PPUSH
2869: LD_INT 4
2871: PPUSH
2872: CALL_OW 241
// setblevel ( [ rubbunk0 ] , 5 ) ;
2876: LD_INT 25
2878: PUSH
2879: EMPTY
2880: LIST
2881: PPUSH
2882: LD_INT 5
2884: PPUSH
2885: CALL_OW 241
// end ; 1 :
2889: GO 3000
2891: LD_INT 1
2893: DOUBLE
2894: EQUAL
2895: IFTRUE 2899
2897: GO 2999
2899: POP
// begin setskill ( [ ruhmech0 , ruhmech2 ] , skill_mechanical , 1 ) ;
2900: LD_INT 3
2902: PUSH
2903: LD_INT 29
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PPUSH
2910: LD_INT 3
2912: PPUSH
2913: LD_INT 1
2915: PPUSH
2916: CALL_OW 237
// complaceweapon ( rubbunk0 , ru_heavy_machine_gun ) ;
2920: LD_INT 25
2922: PPUSH
2923: LD_INT 42
2925: PPUSH
2926: CALL_OW 148
// setskill ( [ ruhsold2 , ruhsold6 , ruhsold7 ] , skill_combat , 1 ) ;
2930: LD_INT 10
2932: PUSH
2933: LD_INT 27
2935: PUSH
2936: LD_INT 28
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: LIST
2943: PPUSH
2944: LD_INT 1
2946: PPUSH
2947: LD_INT 1
2949: PPUSH
2950: CALL_OW 237
// setskill ( ruhsold1 , skill_combat , 0 ) ;
2954: LD_INT 12
2956: PPUSH
2957: LD_INT 1
2959: PPUSH
2960: LD_INT 0
2962: PPUSH
2963: CALL_OW 237
// setblevel ( [ rubbrwr0 , rubbrwr1 ] , 1 ) ;
2967: LD_INT 26
2969: PUSH
2970: LD_INT 23
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: PPUSH
2977: LD_INT 1
2979: PPUSH
2980: CALL_OW 241
// setblevel ( [ rubbunk0 ] , 0 ) ;
2984: LD_INT 25
2986: PUSH
2987: EMPTY
2988: LIST
2989: PPUSH
2990: LD_INT 0
2992: PPUSH
2993: CALL_OW 241
// end ; end ;
2997: GO 3000
2999: POP
// brwr_lev = [ 1 , 3 , 5 ] [ difficulty ] ;
3000: LD_ADDR_LOC 14
3004: PUSH
3005: LD_INT 1
3007: PUSH
3008: LD_INT 3
3010: PUSH
3011: LD_INT 5
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: LIST
3018: PUSH
3019: LD_OWVAR 67
3023: ARRAY
3024: ST_TO_ADDR
// bunk_lev = [ 0 , 2 , 4 ] [ difficulty ] ;
3025: LD_ADDR_LOC 15
3029: PUSH
3030: LD_INT 0
3032: PUSH
3033: LD_INT 2
3035: PUSH
3036: LD_INT 4
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: LIST
3043: PUSH
3044: LD_OWVAR 67
3048: ARRAY
3049: ST_TO_ADDR
// end ;
3050: LD_VAR 0 1
3054: RET
// var supply , which_dlg ; var opev_start ; var flaka_se ; export retreat ; var chciplo , zbaven_veleni ; export poskoz , pacienti ; var dial1_ended ; export hr_lidi , hr_auta ; export mpora ; export mpard ; export prebytek , debug ; var revealed , hint_capt ; export brownIsDead , donaldsonIsDead ; starting begin disable ( 02 ) ;
3055: LD_INT 2
3057: DISABLE_MARKED
// setbname ( ambdept0 , gamma ) ;
3058: LD_INT 4
3060: PPUSH
3061: LD_STRING gamma
3063: PPUSH
3064: CALL_OW 500
// debug = false ;
3068: LD_ADDR_EXP 42
3072: PUSH
3073: LD_INT 0
3075: ST_TO_ADDR
// if debug then
3076: LD_EXP 42
3080: IFFALSE 3089
// msg ( Bacha, debug is ON! ) ;
3082: LD_STRING Bacha, debug is ON!
3084: PPUSH
3085: CALL_OW 100
// amer = 1 ;
3089: LD_ADDR_EXP 2
3093: PUSH
3094: LD_INT 1
3096: ST_TO_ADDR
// rus = 3 ;
3097: LD_ADDR_EXP 1
3101: PUSH
3102: LD_INT 3
3104: ST_TO_ADDR
// setresourcevisibility ( 42 , 54 , rus ) ;
3105: LD_INT 42
3107: PPUSH
3108: LD_INT 54
3110: PPUSH
3111: LD_EXP 1
3115: PPUSH
3116: CALL_OW 441
// revealfogarea ( amer , odrkfog ) ;
3120: LD_EXP 2
3124: PPUSH
3125: LD_INT 14
3127: PPUSH
3128: CALL_OW 332
// brownIsDead := true ;
3132: LD_ADDR_EXP 43
3136: PUSH
3137: LD_INT 1
3139: ST_TO_ADDR
// donaldsonIsDead := true ;
3140: LD_ADDR_EXP 44
3144: PUSH
3145: LD_INT 1
3147: ST_TO_ADDR
// rubbunk1 = 0 ;
3148: LD_ADDR_EXP 15
3152: PUSH
3153: LD_INT 0
3155: ST_TO_ADDR
// rubbrwr2 = 0 ;
3156: LD_ADDR_EXP 16
3160: PUSH
3161: LD_INT 0
3163: ST_TO_ADDR
// ruboilp1 = 0 ;
3164: LD_ADDR_LOC 33
3168: PUSH
3169: LD_INT 0
3171: ST_TO_ADDR
// rubwrks0 = 0 ;
3172: LD_ADDR_LOC 32
3176: PUSH
3177: LD_INT 0
3179: ST_TO_ADDR
// revealed = 0 ;
3180: LD_ADDR_LOC 23
3184: PUSH
3185: LD_INT 0
3187: ST_TO_ADDR
// randomize ;
3188: CALL_OW 10
// dial1_ended = false ;
3192: LD_ADDR_LOC 22
3196: PUSH
3197: LD_INT 0
3199: ST_TO_ADDR
// hint_capt = false ;
3200: LD_ADDR_LOC 24
3204: PUSH
3205: LD_INT 0
3207: ST_TO_ADDR
// case difficulty of 1 :
3208: LD_OWVAR 67
3212: PUSH
3213: LD_INT 1
3215: DOUBLE
3216: EQUAL
3217: IFTRUE 3221
3219: GO 3271
3221: POP
// begin hr_lidi = 450 ;
3222: LD_ADDR_EXP 37
3226: PUSH
3227: LD_INT 450
3229: ST_TO_ADDR
// hr_auta = 490 ;
3230: LD_ADDR_EXP 38
3234: PUSH
3235: LD_INT 490
3237: ST_TO_ADDR
// mpora = 2 ;
3238: LD_ADDR_EXP 39
3242: PUSH
3243: LD_INT 2
3245: ST_TO_ADDR
// mpard = 0 ;
3246: LD_ADDR_EXP 40
3250: PUSH
3251: LD_INT 0
3253: ST_TO_ADDR
// settech ( tech_tech1 , rus , state_enabled ) ;
3254: LD_INT 48
3256: PPUSH
3257: LD_EXP 1
3261: PPUSH
3262: LD_INT 1
3264: PPUSH
3265: CALL_OW 322
// end ; 2 :
3269: GO 3388
3271: LD_INT 2
3273: DOUBLE
3274: EQUAL
3275: IFTRUE 3279
3277: GO 3329
3279: POP
// begin hr_lidi = 487 ;
3280: LD_ADDR_EXP 37
3284: PUSH
3285: LD_INT 487
3287: ST_TO_ADDR
// hr_auta = 532 ;
3288: LD_ADDR_EXP 38
3292: PUSH
3293: LD_INT 532
3295: ST_TO_ADDR
// mpora = 3 ;
3296: LD_ADDR_EXP 39
3300: PUSH
3301: LD_INT 3
3303: ST_TO_ADDR
// mpard = 1 ;
3304: LD_ADDR_EXP 40
3308: PUSH
3309: LD_INT 1
3311: ST_TO_ADDR
// settech ( tech_tech1 , rus , state_enabled ) ;
3312: LD_INT 48
3314: PPUSH
3315: LD_EXP 1
3319: PPUSH
3320: LD_INT 1
3322: PPUSH
3323: CALL_OW 322
// end ; 3 :
3327: GO 3388
3329: LD_INT 3
3331: DOUBLE
3332: EQUAL
3333: IFTRUE 3337
3335: GO 3387
3337: POP
// begin hr_lidi = 524 ;
3338: LD_ADDR_EXP 37
3342: PUSH
3343: LD_INT 524
3345: ST_TO_ADDR
// hr_auta = 574 ;
3346: LD_ADDR_EXP 38
3350: PUSH
3351: LD_INT 574
3353: ST_TO_ADDR
// mpora = 4 ;
3354: LD_ADDR_EXP 39
3358: PUSH
3359: LD_INT 4
3361: ST_TO_ADDR
// mpard = 3 ;
3362: LD_ADDR_EXP 40
3366: PUSH
3367: LD_INT 3
3369: ST_TO_ADDR
// settech ( tech_tech1 , rus , state_researched ) ;
3370: LD_INT 48
3372: PPUSH
3373: LD_EXP 1
3377: PPUSH
3378: LD_INT 2
3380: PPUSH
3381: CALL_OW 322
// end ; end ;
3385: GO 3388
3387: POP
// powerhint = false ;
3388: LD_ADDR_LOC 31
3392: PUSH
3393: LD_INT 0
3395: ST_TO_ADDR
// which_dlg = 0 ;
3396: LD_ADDR_LOC 17
3400: PUSH
3401: LD_INT 0
3403: ST_TO_ADDR
// zbaven_veleni = false ;
3404: LD_ADDR_LOC 21
3408: PUSH
3409: LD_INT 0
3411: ST_TO_ADDR
// chciplo = 8 ;
3412: LD_ADDR_LOC 20
3416: PUSH
3417: LD_INT 8
3419: ST_TO_ADDR
// depot_done = false ;
3420: LD_ADDR_EXP 30
3424: PUSH
3425: LD_INT 0
3427: ST_TO_ADDR
// rubdepo0 = 0 ;
3428: LD_ADDR_EXP 14
3432: PUSH
3433: LD_INT 0
3435: ST_TO_ADDR
// ruboilp1 = 0 ;
3436: LD_ADDR_LOC 33
3440: PUSH
3441: LD_INT 0
3443: ST_TO_ADDR
// bunker_done = false ;
3444: LD_ADDR_EXP 19
3448: PUSH
3449: LD_INT 0
3451: ST_TO_ADDR
// brwr_done = false ;
3452: LD_ADDR_EXP 20
3456: PUSH
3457: LD_INT 0
3459: ST_TO_ADDR
// attacking = false ;
3460: LD_ADDR_EXP 18
3464: PUSH
3465: LD_INT 0
3467: ST_TO_ADDR
// opev_start = false ;
3468: LD_ADDR_LOC 18
3472: PUSH
3473: LD_INT 0
3475: ST_TO_ADDR
// rubase1_gone = false ;
3476: LD_ADDR_EXP 21
3480: PUSH
3481: LD_INT 0
3483: ST_TO_ADDR
// build_wrks = false ;
3484: LD_ADDR_LOC 11
3488: PUSH
3489: LD_INT 0
3491: ST_TO_ADDR
// flaka_se = false ;
3492: LD_ADDR_LOC 19
3496: PUSH
3497: LD_INT 0
3499: ST_TO_ADDR
// vracet_se = true ;
3500: LD_ADDR_EXP 58
3504: PUSH
3505: LD_INT 1
3507: ST_TO_ADDR
// retreat = false ;
3508: LD_ADDR_EXP 34
3512: PUSH
3513: LD_INT 0
3515: ST_TO_ADDR
// rubbunk1 = 0 ;
3516: LD_ADDR_EXP 15
3520: PUSH
3521: LD_INT 0
3523: ST_TO_ADDR
// poskoz = [ ] ;
3524: LD_ADDR_EXP 35
3528: PUSH
3529: EMPTY
3530: ST_TO_ADDR
// prebytek = [ ] ;
3531: LD_ADDR_EXP 41
3535: PUSH
3536: EMPTY
3537: ST_TO_ADDR
// pacienti = [ ] ;
3538: LD_ADDR_EXP 36
3542: PUSH
3543: EMPTY
3544: ST_TO_ADDR
// supply = 11 ;
3545: LD_ADDR_LOC 16
3549: PUSH
3550: LD_INT 11
3552: ST_TO_ADDR
// bu1_done = false ;
3553: LD_ADDR_LOC 26
3557: PUSH
3558: LD_INT 0
3560: ST_TO_ADDR
// br2_done = false ;
3561: LD_ADDR_LOC 27
3565: PUSH
3566: LD_INT 0
3568: ST_TO_ADDR
// op1_done = false ;
3569: LD_ADDR_LOC 28
3573: PUSH
3574: LD_INT 0
3576: ST_TO_ADDR
// oilpowpldone = false ;
3577: LD_ADDR_LOC 29
3581: PUSH
3582: LD_INT 0
3584: ST_TO_ADDR
// scndoildrill = false ;
3585: LD_ADDR_LOC 30
3589: PUSH
3590: LD_INT 0
3592: ST_TO_ADDR
// ingameon ;
3593: CALL_OW 8
// prepare_units ;
3597: CALL 1797 0 0
// comhold ( [ john , amhsold0 , amhsold1 , amhmech0 , bobby , cyrus , lisa ] ) ;
3601: LD_LOC 1
3605: PUSH
3606: LD_INT 34
3608: PUSH
3609: LD_LOC 8
3613: PUSH
3614: LD_INT 17
3616: PUSH
3617: LD_LOC 2
3621: PUSH
3622: LD_LOC 3
3626: PUSH
3627: LD_LOC 4
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: PPUSH
3641: CALL_OW 140
// wait ( 0 0$4 ) ;
3645: LD_INT 140
3647: PPUSH
3648: CALL_OW 67
// centeronxy ( 53 , 21 ) ;
3652: LD_INT 53
3654: PPUSH
3655: LD_INT 21
3657: PPUSH
3658: CALL_OW 84
// end ;
3662: END
// function auto_ve_zlutem ; var tmp , tmp1 ; begin
3663: LD_INT 0
3665: PPUSH
3666: PPUSH
3667: PPUSH
// tmp = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_vehicle ] ] ) ;
3668: LD_ADDR_VAR 0 2
3672: PUSH
3673: LD_INT 22
3675: PUSH
3676: LD_EXP 2
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PUSH
3685: LD_INT 21
3687: PUSH
3688: LD_INT 2
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PUSH
3695: EMPTY
3696: LIST
3697: LIST
3698: PPUSH
3699: CALL_OW 69
3703: ST_TO_ADDR
// for tmp1 in tmp do
3704: LD_ADDR_VAR 0 3
3708: PUSH
3709: LD_VAR 0 2
3713: PUSH
3714: FOR_IN
3715: IFFALSE 3746
// if getlives ( tmp1 ) < hranice_zraneni then
3717: LD_VAR 0 3
3721: PPUSH
3722: CALL_OW 256
3726: PUSH
3727: LD_INT 500
3729: LESS
3730: IFFALSE 3744
// begin result = true ;
3732: LD_ADDR_VAR 0 1
3736: PUSH
3737: LD_INT 1
3739: ST_TO_ADDR
// exit ;
3740: POP
3741: POP
3742: GO 3756
// end ;
3744: GO 3714
3746: POP
3747: POP
// result = false ;
3748: LD_ADDR_VAR 0 1
3752: PUSH
3753: LD_INT 0
3755: ST_TO_ADDR
// end ;
3756: LD_VAR 0 1
3760: RET
// every 0 0$1 trigger auto_ve_zlutem do
3761: CALL 3663 0 0
3765: IFFALSE 3777
3767: GO 3769
3769: DISABLE
// hint ( Repair ) ;
3770: LD_STRING Repair
3772: PPUSH
3773: CALL_OW 339
3777: END
// on unitgoestored ( un ) marked 13 do if ( difficulty = 2 ) and ( un = rubdepo0 ) then
3778: LD_OWVAR 67
3782: PUSH
3783: LD_INT 2
3785: EQUAL
3786: PUSH
3787: LD_VAR 0 1
3791: PUSH
3792: LD_EXP 14
3796: EQUAL
3797: AND
3798: IFFALSE 3817
// begin settech ( tech_tech1 , rus , state_researched ) ;
3800: LD_INT 48
3802: PPUSH
3803: LD_EXP 1
3807: PPUSH
3808: LD_INT 2
3810: PPUSH
3811: CALL_OW 322
// end else
3815: GO 3877
// if ( not hint_capt ) and ( un in filterallunits ( [ [ f_side , rus ] , [ f_type , unit_vehicle ] ] ) ) then
3817: LD_LOC 24
3821: NOT
3822: PUSH
3823: LD_VAR 0 1
3827: PUSH
3828: LD_INT 22
3830: PUSH
3831: LD_EXP 1
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: LD_INT 21
3842: PUSH
3843: LD_INT 2
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PUSH
3850: EMPTY
3851: LIST
3852: LIST
3853: PPUSH
3854: CALL_OW 69
3858: IN
3859: AND
3860: IFFALSE 3877
// begin hint_capt = true ;
3862: LD_ADDR_LOC 24
3866: PUSH
3867: LD_INT 1
3869: ST_TO_ADDR
// hint ( CapturingVehicles1 ) ;
3870: LD_STRING CapturingVehicles1
3872: PPUSH
3873: CALL_OW 339
// end ;
3877: PPOPN 1
3879: END
// every 0 0$1 trigger see ( amer , rubdepo0 ) or see ( amer , rubwrks0 ) do
3880: LD_EXP 2
3884: PPUSH
3885: LD_EXP 14
3889: PPUSH
3890: CALL_OW 292
3894: PUSH
3895: LD_EXP 2
3899: PPUSH
3900: LD_LOC 32
3904: PPUSH
3905: CALL_OW 292
3909: OR
3910: IFFALSE 3922
3912: GO 3914
3914: DISABLE
// begin hint ( Capturing2 ) ;
3915: LD_STRING Capturing2
3917: PPUSH
3918: CALL_OW 339
// end ;
3922: END
// every 0 0$1 trigger isinunit ( john ) = false do
3923: LD_LOC 1
3927: PPUSH
3928: CALL_OW 310
3932: PUSH
3933: LD_INT 0
3935: EQUAL
3936: IFFALSE 4384
3938: GO 3940
3940: DISABLE
// begin centeronunits ( john ) ;
3941: LD_LOC 1
3945: PPUSH
3946: CALL_OW 85
// commovexy ( john , 50 , 14 ) ;
3950: LD_LOC 1
3954: PPUSH
3955: LD_INT 50
3957: PPUSH
3958: LD_INT 14
3960: PPUSH
3961: CALL_OW 111
// commovexy ( amhsold1 , 50 , 14 ) ;
3965: LD_LOC 8
3969: PPUSH
3970: LD_INT 50
3972: PPUSH
3973: LD_INT 14
3975: PPUSH
3976: CALL_OW 111
// say ( john , D1-JMM-1 ) ;
3980: LD_LOC 1
3984: PPUSH
3985: LD_STRING D1-JMM-1
3987: PPUSH
3988: CALL_OW 88
// centeronxy ( 50 , 14 ) ;
3992: LD_INT 50
3994: PPUSH
3995: LD_INT 14
3997: PPUSH
3998: CALL_OW 84
// say ( amhsold1 , D1-Brown-1 ) ;
4002: LD_LOC 8
4006: PPUSH
4007: LD_STRING D1-Brown-1
4009: PPUSH
4010: CALL_OW 88
// say ( john , D1-JMM-2 ) ;
4014: LD_LOC 1
4018: PPUSH
4019: LD_STRING D1-JMM-2
4021: PPUSH
4022: CALL_OW 88
// say ( amhsold1 , D1-Brown-2 ) ;
4026: LD_LOC 8
4030: PPUSH
4031: LD_STRING D1-Brown-2
4033: PPUSH
4034: CALL_OW 88
// say ( amhsold0 , D1-FSol1-2 ) ;
4038: LD_INT 34
4040: PPUSH
4041: LD_STRING D1-FSol1-2
4043: PPUSH
4044: CALL_OW 88
// say ( amhmech0 , D1-Sol2-2 ) ;
4048: LD_INT 17
4050: PPUSH
4051: LD_STRING D1-Sol2-2
4053: PPUSH
4054: CALL_OW 88
// if bobby then
4058: LD_LOC 2
4062: IFFALSE 4076
// say ( bobby , D1-Bobby-2 ) ;
4064: LD_LOC 2
4068: PPUSH
4069: LD_STRING D1-Bobby-2
4071: PPUSH
4072: CALL_OW 88
// if cyrus then
4076: LD_LOC 3
4080: IFFALSE 4094
// say ( cyrus , D1-Cyrus-2 ) ;
4082: LD_LOC 3
4086: PPUSH
4087: LD_STRING D1-Cyrus-2
4089: PPUSH
4090: CALL_OW 88
// if lisa then
4094: LD_LOC 4
4098: IFFALSE 4112
// say ( lisa , D1-Lisa-2 ) ;
4100: LD_LOC 4
4104: PPUSH
4105: LD_STRING D1-Lisa-2
4107: PPUSH
4108: CALL_OW 88
// say ( john , D1-JMM-3 ) ;
4112: LD_LOC 1
4116: PPUSH
4117: LD_STRING D1-JMM-3
4119: PPUSH
4120: CALL_OW 88
// commovexy ( john , 42 , 6 ) ;
4124: LD_LOC 1
4128: PPUSH
4129: LD_INT 42
4131: PPUSH
4132: LD_INT 6
4134: PPUSH
4135: CALL_OW 111
// wait ( 0 0$2.2 ) ;
4139: LD_INT 77
4141: PPUSH
4142: CALL_OW 67
// centeronunits ( john ) ;
4146: LD_LOC 1
4150: PPUSH
4151: CALL_OW 85
// say ( john , D1-JMM-3a ) ;
4155: LD_LOC 1
4159: PPUSH
4160: LD_STRING D1-JMM-3a
4162: PPUSH
4163: CALL_OW 88
// say ( amhsold1 , D1-Brown-3 ) ;
4167: LD_LOC 8
4171: PPUSH
4172: LD_STRING D1-Brown-3
4174: PPUSH
4175: CALL_OW 88
// sayradio ( rh , D1-Har-3 ) ;
4179: LD_EXP 4
4183: PPUSH
4184: LD_STRING D1-Har-3
4186: PPUSH
4187: CALL_OW 94
// say ( john , D1-JMM-4 ) ;
4191: LD_LOC 1
4195: PPUSH
4196: LD_STRING D1-JMM-4
4198: PPUSH
4199: CALL_OW 88
// sayradio ( rh , D1-Har-4 ) ;
4203: LD_EXP 4
4207: PPUSH
4208: LD_STRING D1-Har-4
4210: PPUSH
4211: CALL_OW 94
// say ( john , D1-JMM-5 ) ;
4215: LD_LOC 1
4219: PPUSH
4220: LD_STRING D1-JMM-5
4222: PPUSH
4223: CALL_OW 88
// sayradio ( rh , D1-Har-5 ) ;
4227: LD_EXP 4
4231: PPUSH
4232: LD_STRING D1-Har-5
4234: PPUSH
4235: CALL_OW 94
// say ( john , D1-JMM-6 ) ;
4239: LD_LOC 1
4243: PPUSH
4244: LD_STRING D1-JMM-6
4246: PPUSH
4247: CALL_OW 88
// ingameoff ;
4251: CALL_OW 9
// saveforquickrestart ;
4255: CALL_OW 22
// wait ( 0 0$0.7 ) ;
4259: LD_INT 24
4261: PPUSH
4262: CALL_OW 67
// changemissionobjectives ( M1 ) ;
4266: LD_STRING M1
4268: PPUSH
4269: CALL_OW 337
// comfree ( [ john , amhsold0 , amhsold1 , amhmech0 , bobby , cyrus , lisa ] ) ;
4273: LD_LOC 1
4277: PUSH
4278: LD_INT 34
4280: PUSH
4281: LD_LOC 8
4285: PUSH
4286: LD_INT 17
4288: PUSH
4289: LD_LOC 2
4293: PUSH
4294: LD_LOC 3
4298: PUSH
4299: LD_LOC 4
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: PPUSH
4313: CALL_OW 139
// wait ( 0 0$1 ) ;
4317: LD_INT 35
4319: PPUSH
4320: CALL_OW 67
// hint ( Oil ) ;
4324: LD_STRING Oil
4326: PPUSH
4327: CALL_OW 339
// rubdepo0 = combuild ( ruhengi1 , b_depot , 50 , 61 , 5 ) ;
4331: LD_ADDR_EXP 14
4335: PUSH
4336: LD_INT 18
4338: PPUSH
4339: LD_INT 0
4341: PPUSH
4342: LD_INT 50
4344: PPUSH
4345: LD_INT 61
4347: PPUSH
4348: LD_INT 5
4350: PPUSH
4351: CALL_OW 145
4355: ST_TO_ADDR
// commovexy ( ruhengi0 , 50 , 57 ) ;
4356: LD_INT 2
4358: PPUSH
4359: LD_INT 50
4361: PPUSH
4362: LD_INT 57
4364: PPUSH
4365: CALL_OW 111
// wait ( 0 0$10 ) ;
4369: LD_INT 350
4371: PPUSH
4372: CALL_OW 67
// dial1_ended = true ;
4376: LD_ADDR_LOC 22
4380: PUSH
4381: LD_INT 1
4383: ST_TO_ADDR
// end ;
4384: END
// every 0 0$2 + 1 1$0 trigger dial1_ended do
4385: LD_LOC 22
4389: IFFALSE 4464
4391: GO 4393
4393: DISABLE
// begin if not unitfilter ( [ ambwrks0 ] , [ [ f_btype , b_factory ] ] ) then
4394: LD_INT 5
4396: PUSH
4397: EMPTY
4398: LIST
4399: PPUSH
4400: LD_INT 30
4402: PUSH
4403: LD_INT 3
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: EMPTY
4411: LIST
4412: PPUSH
4413: CALL_OW 72
4417: NOT
4418: IFFALSE 4464
// begin dialogueon ;
4420: CALL_OW 6
// say ( amhmech0 , D9-Mech1-1 ) ;
4424: LD_INT 17
4426: PPUSH
4427: LD_STRING D9-Mech1-1
4429: PPUSH
4430: CALL_OW 88
// say ( john , D9-JMM-1 ) ;
4434: LD_LOC 1
4438: PPUSH
4439: LD_STRING D9-JMM-1
4441: PPUSH
4442: CALL_OW 88
// dialogueoff ;
4446: CALL_OW 7
// wait ( 0 0$1 ) ;
4450: LD_INT 35
4452: PPUSH
4453: CALL_OW 67
// hint ( Upgrade ) ;
4457: LD_STRING Upgrade
4459: PPUSH
4460: CALL_OW 339
// end ; end ;
4464: END
// on upgradecomplete ( un ) do if getbtype ( un ) = b_factory then
4465: LD_VAR 0 1
4469: PPUSH
4470: CALL_OW 266
4474: PUSH
4475: LD_INT 3
4477: EQUAL
4478: IFFALSE 4488
// begin hint ( Turrets ) ;
4480: LD_STRING Turrets
4482: PPUSH
4483: CALL_OW 339
// disable ;
4487: DISABLE
// end ;
4488: PPOPN 1
4490: END
// every 0 0$1 + 0 0$30 trigger unitfilter ( [ ambwrks0 ] , [ [ f_btype , b_factory ] ] ) and ( not isconstructed ( ambwrks0 ) ) and ( not unitfilter ( filterallunits ( [ [ f_side , amer ] ] ) , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] ] ) ) do
4491: LD_INT 5
4493: PUSH
4494: EMPTY
4495: LIST
4496: PPUSH
4497: LD_INT 30
4499: PUSH
4500: LD_INT 3
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: PUSH
4507: EMPTY
4508: LIST
4509: PPUSH
4510: CALL_OW 72
4514: PUSH
4515: LD_INT 5
4517: PPUSH
4518: CALL_OW 304
4522: NOT
4523: AND
4524: PUSH
4525: LD_INT 22
4527: PUSH
4528: LD_EXP 2
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: PUSH
4537: EMPTY
4538: LIST
4539: PPUSH
4540: CALL_OW 69
4544: PPUSH
4545: LD_INT 2
4547: PUSH
4548: LD_INT 30
4550: PUSH
4551: LD_INT 26
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: PUSH
4558: LD_INT 30
4560: PUSH
4561: LD_INT 27
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: LIST
4572: PPUSH
4573: CALL_OW 72
4577: NOT
4578: AND
4579: IFFALSE 4602
4581: GO 4583
4583: DISABLE
// begin if which_dlg <> 11 then
4584: LD_LOC 17
4588: PUSH
4589: LD_INT 11
4591: NONEQUAL
4592: IFFALSE 4602
// which_dlg = 10 ;
4594: LD_ADDR_LOC 17
4598: PUSH
4599: LD_INT 10
4601: ST_TO_ADDR
// end ;
4602: END
// every 0 0$1 + 0 0$5 trigger filterallunits ( [ [ f_side , amer ] , [ f_btype , b_bunker ] ] ) and not unitfilter ( filterallunits ( [ [ f_side , amer ] ] ) , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] ] ) do
4603: LD_INT 22
4605: PUSH
4606: LD_EXP 2
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: PUSH
4615: LD_INT 30
4617: PUSH
4618: LD_INT 32
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PPUSH
4629: CALL_OW 69
4633: PUSH
4634: LD_INT 22
4636: PUSH
4637: LD_EXP 2
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: PUSH
4646: EMPTY
4647: LIST
4648: PPUSH
4649: CALL_OW 69
4653: PPUSH
4654: LD_INT 2
4656: PUSH
4657: LD_INT 30
4659: PUSH
4660: LD_INT 26
4662: PUSH
4663: EMPTY
4664: LIST
4665: LIST
4666: PUSH
4667: LD_INT 30
4669: PUSH
4670: LD_INT 27
4672: PUSH
4673: EMPTY
4674: LIST
4675: LIST
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: LIST
4681: PPUSH
4682: CALL_OW 72
4686: NOT
4687: AND
4688: IFFALSE 4711
4690: GO 4692
4692: DISABLE
// begin if which_dlg <> 10 then
4693: LD_LOC 17
4697: PUSH
4698: LD_INT 10
4700: NONEQUAL
4701: IFFALSE 4711
// which_dlg = 11 ;
4703: LD_ADDR_LOC 17
4707: PUSH
4708: LD_INT 11
4710: ST_TO_ADDR
// end ;
4711: END
// every 0 0$1 + 0 0$5.5 trigger which_dlg <> 0 do
4712: LD_LOC 17
4716: PUSH
4717: LD_INT 0
4719: NONEQUAL
4720: IFFALSE 4955
4722: GO 4724
4724: DISABLE
// begin dialogueon ;
4725: CALL_OW 6
// if which_dlg = 10 then
4729: LD_LOC 17
4733: PUSH
4734: LD_INT 10
4736: EQUAL
4737: IFFALSE 4761
// begin say ( john , D9a-JMM-1 ) ;
4739: LD_LOC 1
4743: PPUSH
4744: LD_STRING D9a-JMM-1
4746: PPUSH
4747: CALL_OW 88
// say ( amhmech0 , D9a-Mech1-1 ) ;
4751: LD_INT 17
4753: PPUSH
4754: LD_STRING D9a-Mech1-1
4756: PPUSH
4757: CALL_OW 88
// end ; if which_dlg = 11 then
4761: LD_LOC 17
4765: PUSH
4766: LD_INT 11
4768: EQUAL
4769: IFFALSE 4781
// begin say ( amhengi0 , D9b-Eng1-1 ) ;
4771: LD_INT 15
4773: PPUSH
4774: LD_STRING D9b-Eng1-1
4776: PPUSH
4777: CALL_OW 88
// end ; if ( not researched ( amer , tech_oilpow ) ) and ( not researched ( amer , tech_solpow ) ) then
4781: LD_EXP 2
4785: PPUSH
4786: LD_INT 46
4788: PPUSH
4789: CALL_OW 325
4793: NOT
4794: PUSH
4795: LD_EXP 2
4799: PPUSH
4800: LD_INT 35
4802: PPUSH
4803: CALL_OW 325
4807: NOT
4808: AND
4809: IFFALSE 4825
// say ( john , D9c-JMM-1 ) else
4811: LD_LOC 1
4815: PPUSH
4816: LD_STRING D9c-JMM-1
4818: PPUSH
4819: CALL_OW 88
4823: GO 4951
// if ( not researched ( amer , tech_oilpow ) ) and researched ( amer , tech_solpow ) then
4825: LD_EXP 2
4829: PPUSH
4830: LD_INT 46
4832: PPUSH
4833: CALL_OW 325
4837: NOT
4838: PUSH
4839: LD_EXP 2
4843: PPUSH
4844: LD_INT 35
4846: PPUSH
4847: CALL_OW 325
4851: AND
4852: IFFALSE 4868
// say ( john , D9c-JMM-1a ) else
4854: LD_LOC 1
4858: PPUSH
4859: LD_STRING D9c-JMM-1a
4861: PPUSH
4862: CALL_OW 88
4866: GO 4951
// if researched ( amer , tech_oilpow ) and ( not researched ( amer , tech_solpow ) ) then
4868: LD_EXP 2
4872: PPUSH
4873: LD_INT 46
4875: PPUSH
4876: CALL_OW 325
4880: PUSH
4881: LD_EXP 2
4885: PPUSH
4886: LD_INT 35
4888: PPUSH
4889: CALL_OW 325
4893: NOT
4894: AND
4895: IFFALSE 4911
// say ( john , D9c-JMM-1b ) else
4897: LD_LOC 1
4901: PPUSH
4902: LD_STRING D9c-JMM-1b
4904: PPUSH
4905: CALL_OW 88
4909: GO 4951
// if researched ( amer , tech_oilpow ) and researched ( amer , tech_solpow ) then
4911: LD_EXP 2
4915: PPUSH
4916: LD_INT 46
4918: PPUSH
4919: CALL_OW 325
4923: PUSH
4924: LD_EXP 2
4928: PPUSH
4929: LD_INT 35
4931: PPUSH
4932: CALL_OW 325
4936: AND
4937: IFFALSE 4951
// say ( john , D9c-JMM-1c ) ;
4939: LD_LOC 1
4943: PPUSH
4944: LD_STRING D9c-JMM-1c
4946: PPUSH
4947: CALL_OW 88
// dialogueoff ;
4951: CALL_OW 7
// end ;
4955: END
// function postavena_fact ; var zatr ; begin
4956: LD_INT 0
4958: PPUSH
4959: PPUSH
// zatr = unitfilter ( [ ambwrks0 ] , [ [ f_btype , b_factory ] ] ) ;
4960: LD_ADDR_VAR 0 2
4964: PUSH
4965: LD_INT 5
4967: PUSH
4968: EMPTY
4969: LIST
4970: PPUSH
4971: LD_INT 30
4973: PUSH
4974: LD_INT 3
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: EMPTY
4982: LIST
4983: PPUSH
4984: CALL_OW 72
4988: ST_TO_ADDR
// result = false ;
4989: LD_ADDR_VAR 0 1
4993: PUSH
4994: LD_INT 0
4996: ST_TO_ADDR
// if zatr then
4997: LD_VAR 0 2
5001: IFFALSE 5027
// if not isconstructed ( zatr [ 1 ] ) then
5003: LD_VAR 0 2
5007: PUSH
5008: LD_INT 1
5010: ARRAY
5011: PPUSH
5012: CALL_OW 304
5016: NOT
5017: IFFALSE 5027
// result = true ;
5019: LD_ADDR_VAR 0 1
5023: PUSH
5024: LD_INT 1
5026: ST_TO_ADDR
// end ;
5027: LD_VAR 0 1
5031: RET
// function postavena_elekt ; var tmp , ii ; begin
5032: LD_INT 0
5034: PPUSH
5035: PPUSH
5036: PPUSH
// result = false ;
5037: LD_ADDR_VAR 0 1
5041: PUSH
5042: LD_INT 0
5044: ST_TO_ADDR
// tmp = unitfilter ( filterallunits ( [ [ f_side , amer ] ] ) , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] ] ) ;
5045: LD_ADDR_VAR 0 2
5049: PUSH
5050: LD_INT 22
5052: PUSH
5053: LD_EXP 2
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: PUSH
5062: EMPTY
5063: LIST
5064: PPUSH
5065: CALL_OW 69
5069: PPUSH
5070: LD_INT 2
5072: PUSH
5073: LD_INT 30
5075: PUSH
5076: LD_INT 26
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: PUSH
5083: LD_INT 30
5085: PUSH
5086: LD_INT 27
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: LIST
5097: PPUSH
5098: CALL_OW 72
5102: ST_TO_ADDR
// if tmp then
5103: LD_VAR 0 2
5107: IFFALSE 5150
// for ii in tmp do
5109: LD_ADDR_VAR 0 3
5113: PUSH
5114: LD_VAR 0 2
5118: PUSH
5119: FOR_IN
5120: IFFALSE 5148
// if not isconstructed ( ii ) then
5122: LD_VAR 0 3
5126: PPUSH
5127: CALL_OW 304
5131: NOT
5132: IFFALSE 5146
// begin result = true ;
5134: LD_ADDR_VAR 0 1
5138: PUSH
5139: LD_INT 1
5141: ST_TO_ADDR
// exit ;
5142: POP
5143: POP
5144: GO 5150
// end ;
5146: GO 5119
5148: POP
5149: POP
// end ;
5150: LD_VAR 0 1
5154: RET
// every 0 0$2.5 trigger postavena_fact and postavena_elekt do
5155: CALL 4956 0 0
5159: PUSH
5160: CALL 5032 0 0
5164: AND
5165: IFFALSE 5188
5167: GO 5169
5169: DISABLE
// begin dialogueon ;
5170: CALL_OW 6
// say ( amhmech0 , D10-Mech1-1 ) ;
5174: LD_INT 17
5176: PPUSH
5177: LD_STRING D10-Mech1-1
5179: PPUSH
5180: CALL_OW 88
// dialogueoff ;
5184: CALL_OW 7
// end ;
5188: END
// var zatr ; function postaveny_bunkr ; begin
5189: LD_INT 0
5191: PPUSH
// zatr = filterallunits ( [ [ f_side , amer ] , [ f_btype , b_bunker ] , [ f_nation , nation_american ] ] ) ;
5192: LD_ADDR_LOC 25
5196: PUSH
5197: LD_INT 22
5199: PUSH
5200: LD_EXP 2
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: PUSH
5209: LD_INT 30
5211: PUSH
5212: LD_INT 32
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: PUSH
5219: LD_INT 23
5221: PUSH
5222: LD_INT 1
5224: PUSH
5225: EMPTY
5226: LIST
5227: LIST
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: LIST
5233: PPUSH
5234: CALL_OW 69
5238: ST_TO_ADDR
// result = false ;
5239: LD_ADDR_VAR 0 1
5243: PUSH
5244: LD_INT 0
5246: ST_TO_ADDR
// if zatr then
5247: LD_LOC 25
5251: IFFALSE 5277
// if not isconstructed ( zatr [ 1 ] ) then
5253: LD_LOC 25
5257: PUSH
5258: LD_INT 1
5260: ARRAY
5261: PPUSH
5262: CALL_OW 304
5266: NOT
5267: IFFALSE 5277
// result = true ;
5269: LD_ADDR_VAR 0 1
5273: PUSH
5274: LD_INT 1
5276: ST_TO_ADDR
// end ;
5277: LD_VAR 0 1
5281: RET
// every 0 0$1 + 0 0$5.1 trigger postaveny_bunkr do
5282: CALL 5189 0 0
5286: IFFALSE 5309
5288: GO 5290
5290: DISABLE
// begin dialogueon ;
5291: CALL_OW 6
// say ( amhengi0 , D11-Eng1-1 ) ;
5295: LD_INT 15
5297: PPUSH
5298: LD_STRING D11-Eng1-1
5300: PPUSH
5301: CALL_OW 88
// dialogueoff ;
5305: CALL_OW 7
// end ;
5309: END
// every 2 2$0 + 0 0$15 do
5310: GO 5312
5312: DISABLE
// begin createcratesarea ( 5 , targetarea , true ) ;
5313: LD_INT 5
5315: PPUSH
5316: LD_INT 11
5318: PPUSH
5319: LD_INT 1
5321: PPUSH
5322: CALL_OW 55
// if supply then
5326: LD_LOC 16
5330: IFFALSE 5347
// begin supply = supply - 1 ;
5332: LD_ADDR_LOC 16
5336: PUSH
5337: LD_LOC 16
5341: PUSH
5342: LD_INT 1
5344: MINUS
5345: ST_TO_ADDR
// enable ;
5346: ENABLE
// end ; end ;
5347: END
// every 0 0$7 do
5348: GO 5350
5350: DISABLE
// begin randomize ;
5351: CALL_OW 10
// enable ;
5355: ENABLE
// end ;
5356: END
// var bu1_done , br2_done , op1_done ; var oilpowpldone , scndoildrill , powerhint ; on buildingcomplete ( un ) marked 01 do if un = rubbunk1 then
5357: LD_VAR 0 1
5361: PUSH
5362: LD_EXP 15
5366: EQUAL
5367: IFFALSE 5379
// bu1_done = true else
5369: LD_ADDR_LOC 26
5373: PUSH
5374: LD_INT 1
5376: ST_TO_ADDR
5377: GO 5678
// if un = rubbrwr2 then
5379: LD_VAR 0 1
5383: PUSH
5384: LD_EXP 16
5388: EQUAL
5389: IFFALSE 5401
// br2_done = true else
5391: LD_ADDR_LOC 27
5395: PUSH
5396: LD_INT 1
5398: ST_TO_ADDR
5399: GO 5678
// if un = ruboilp1 then
5401: LD_VAR 0 1
5405: PUSH
5406: LD_LOC 33
5410: EQUAL
5411: IFFALSE 5423
// op1_done = true else
5413: LD_ADDR_LOC 28
5417: PUSH
5418: LD_INT 1
5420: ST_TO_ADDR
5421: GO 5678
// if un = rubwrks0 then
5423: LD_VAR 0 1
5427: PUSH
5428: LD_LOC 32
5432: EQUAL
5433: IFFALSE 5445
// build_wrks = true else
5435: LD_ADDR_LOC 11
5439: PUSH
5440: LD_INT 1
5442: ST_TO_ADDR
5443: GO 5678
// if ( getnation ( un ) = nation_american ) and ( getbtype ( un ) = b_oil_power ) and not oilpowpldone then
5445: LD_VAR 0 1
5449: PPUSH
5450: CALL_OW 248
5454: PUSH
5455: LD_INT 1
5457: EQUAL
5458: PUSH
5459: LD_VAR 0 1
5463: PPUSH
5464: CALL_OW 266
5468: PUSH
5469: LD_INT 26
5471: EQUAL
5472: AND
5473: PUSH
5474: LD_LOC 29
5478: NOT
5479: AND
5480: IFFALSE 5527
// begin oilpowpldone = true ;
5482: LD_ADDR_LOC 29
5486: PUSH
5487: LD_INT 1
5489: ST_TO_ADDR
// if not powerhint then
5490: LD_LOC 31
5494: NOT
5495: IFFALSE 5512
// begin powerhint = true ;
5497: LD_ADDR_LOC 31
5501: PUSH
5502: LD_INT 1
5504: ST_TO_ADDR
// hint ( PowerPlant ) ;
5505: LD_STRING PowerPlant
5507: PPUSH
5508: CALL_OW 339
// end ; if scndoildrill then
5512: LD_LOC 30
5516: IFFALSE 5525
// changemissionobjectives ( M1a ) ;
5518: LD_STRING M1a
5520: PPUSH
5521: CALL_OW 337
// end else
5525: GO 5678
// if ( getnation ( un ) = nation_american ) and ( getbtype ( un ) = b_oil_mine ) and ( getx ( un ) <> 38 ) and ( gety ( un ) <> 3 ) and not scndoildrill then
5527: LD_VAR 0 1
5531: PPUSH
5532: CALL_OW 248
5536: PUSH
5537: LD_INT 1
5539: EQUAL
5540: PUSH
5541: LD_VAR 0 1
5545: PPUSH
5546: CALL_OW 266
5550: PUSH
5551: LD_INT 29
5553: EQUAL
5554: AND
5555: PUSH
5556: LD_VAR 0 1
5560: PPUSH
5561: CALL_OW 250
5565: PUSH
5566: LD_INT 38
5568: NONEQUAL
5569: AND
5570: PUSH
5571: LD_VAR 0 1
5575: PPUSH
5576: CALL_OW 251
5580: PUSH
5581: LD_INT 3
5583: NONEQUAL
5584: AND
5585: PUSH
5586: LD_LOC 30
5590: NOT
5591: AND
5592: IFFALSE 5617
// begin scndoildrill = true ;
5594: LD_ADDR_LOC 30
5598: PUSH
5599: LD_INT 1
5601: ST_TO_ADDR
// if oilpowpldone then
5602: LD_LOC 29
5606: IFFALSE 5615
// changemissionobjectives ( M1a ) ;
5608: LD_STRING M1a
5610: PPUSH
5611: CALL_OW 337
// end else
5615: GO 5678
// if ( getbtype ( un ) = b_solar_power ) and ( not powerhint ) then
5617: LD_VAR 0 1
5621: PPUSH
5622: CALL_OW 266
5626: PUSH
5627: LD_INT 27
5629: EQUAL
5630: PUSH
5631: LD_LOC 31
5635: NOT
5636: AND
5637: IFFALSE 5656
// begin powerhint = true ;
5639: LD_ADDR_LOC 31
5643: PUSH
5644: LD_INT 1
5646: ST_TO_ADDR
// hint ( PowerPlant ) ;
5647: LD_STRING PowerPlant
5649: PPUSH
5650: CALL_OW 339
// end else
5654: GO 5678
// if getbtype ( un ) = b_bunker then
5656: LD_VAR 0 1
5660: PPUSH
5661: CALL_OW 266
5665: PUSH
5666: LD_INT 32
5668: EQUAL
5669: IFFALSE 5678
// hint ( Turrets2 ) ;
5671: LD_STRING Turrets2
5673: PPUSH
5674: CALL_OW 339
5678: PPOPN 1
5680: END
// every 0 0$3 + 1 1$25 trigger isinarea ( ruhengi1 , rubase1rng ) and not isconstructed ( rubdepo0 ) and rubdepo0 > 0 do
5681: LD_INT 18
5683: PPUSH
5684: LD_INT 3
5686: PPUSH
5687: CALL_OW 308
5691: PUSH
5692: LD_EXP 14
5696: PPUSH
5697: CALL_OW 304
5701: NOT
5702: AND
5703: PUSH
5704: LD_EXP 14
5708: PUSH
5709: LD_INT 0
5711: GREATER
5712: AND
5713: IFFALSE 5766
5715: GO 5717
5717: DISABLE
// begin depot_done = true ;
5718: LD_ADDR_EXP 30
5722: PUSH
5723: LD_INT 1
5725: ST_TO_ADDR
// comcollect ( [ ruhengi1 , ruhengi0 ] , 40 , 54 ) ;
5726: LD_INT 18
5728: PUSH
5729: LD_INT 2
5731: PUSH
5732: EMPTY
5733: LIST
5734: LIST
5735: PPUSH
5736: LD_INT 40
5738: PPUSH
5739: LD_INT 54
5741: PPUSH
5742: CALL_OW 117
// commovexy ( ruv0 , 48 , 53 ) ;
5746: LD_INT 7
5748: PPUSH
5749: LD_INT 48
5751: PPUSH
5752: LD_INT 53
5754: PPUSH
5755: CALL_OW 111
// addcomhold ( ruv0 ) ;
5759: LD_INT 7
5761: PPUSH
5762: CALL_OW 200
// end ;
5766: END
// every 0 0$3 + 1 1$40 trigger depot_done and getresourcetype ( getbase ( rubdepo0 ) , mat_cans ) >= 30 do
5767: LD_EXP 30
5771: PUSH
5772: LD_EXP 14
5776: PPUSH
5777: CALL_OW 274
5781: PPUSH
5782: LD_INT 1
5784: PPUSH
5785: CALL_OW 275
5789: PUSH
5790: LD_INT 30
5792: GREATEREQUAL
5793: AND
5794: IFFALSE 5891
5796: GO 5798
5798: DISABLE
// begin comhold ( [ ruhengi0 , ruhengi1 ] ) ;
5799: LD_INT 2
5801: PUSH
5802: LD_INT 18
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: PPUSH
5809: CALL_OW 140
// addresourcetype ( getbase ( rubdepo0 ) , mat_cans , 50 ) ;
5813: LD_EXP 14
5817: PPUSH
5818: CALL_OW 274
5822: PPUSH
5823: LD_INT 1
5825: PPUSH
5826: LD_INT 50
5828: PPUSH
5829: CALL_OW 276
// rubbunk1 = combuild ( ruhengi1 , b_bunker , 44 , 50 , 3 ) ;
5833: LD_ADDR_EXP 15
5837: PUSH
5838: LD_INT 18
5840: PPUSH
5841: LD_INT 32
5843: PPUSH
5844: LD_INT 44
5846: PPUSH
5847: LD_INT 50
5849: PPUSH
5850: LD_INT 3
5852: PPUSH
5853: CALL_OW 145
5857: ST_TO_ADDR
// rubbrwr2 = combuild ( ruhengi0 , b_breastwork , 52 , 57 , 3 ) ;
5858: LD_ADDR_EXP 16
5862: PUSH
5863: LD_INT 2
5865: PPUSH
5866: LD_INT 31
5868: PPUSH
5869: LD_INT 52
5871: PPUSH
5872: LD_INT 57
5874: PPUSH
5875: LD_INT 3
5877: PPUSH
5878: CALL_OW 145
5882: ST_TO_ADDR
// opev_start = true ;
5883: LD_ADDR_LOC 18
5887: PUSH
5888: LD_INT 1
5890: ST_TO_ADDR
// end ;
5891: END
// every 0 0$3 + 1 1$55 trigger opev_start and bu1_done do
5892: LD_LOC 18
5896: PUSH
5897: LD_LOC 26
5901: AND
5902: IFFALSE 5961
5904: GO 5906
5906: DISABLE
// begin setblevel ( rubbunk1 , bunk_lev ) ;
5907: LD_EXP 15
5911: PPUSH
5912: LD_LOC 15
5916: PPUSH
5917: CALL_OW 241
// commoveunit ( ruhsold1 , rubbunk1 ) ;
5921: LD_INT 12
5923: PPUSH
5924: LD_EXP 15
5928: PPUSH
5929: CALL_OW 112
// addresourcetype ( getbase ( rubdepo0 ) , mat_cans , 90 ) ;
5933: LD_EXP 14
5937: PPUSH
5938: CALL_OW 274
5942: PPUSH
5943: LD_INT 1
5945: PPUSH
5946: LD_INT 90
5948: PPUSH
5949: CALL_OW 276
// bunker_done = true ;
5953: LD_ADDR_EXP 19
5957: PUSH
5958: LD_INT 1
5960: ST_TO_ADDR
// end ;
5961: END
// every 0 0$2.5 + 1 1$57 trigger bunker_done and not isinunit ( ruhsold1 ) = rubbunk1 do
5962: LD_EXP 19
5966: PUSH
5967: LD_INT 12
5969: PPUSH
5970: CALL_OW 310
5974: PUSH
5975: LD_EXP 15
5979: EQUAL
5980: NOT
5981: AND
5982: IFFALSE 6023
5984: GO 5986
5986: DISABLE
// begin commoveunit ( ruhsold1 , rubbunk1 ) ;
5987: LD_INT 12
5989: PPUSH
5990: LD_EXP 15
5994: PPUSH
5995: CALL_OW 112
// wait ( 0 0$3 ) ;
5999: LD_INT 105
6001: PPUSH
6002: CALL_OW 67
// if not isinunit ( ruhsold1 ) = rubbunk1 then
6006: LD_INT 12
6008: PPUSH
6009: CALL_OW 310
6013: PUSH
6014: LD_EXP 15
6018: EQUAL
6019: NOT
6020: IFFALSE 6023
// enable ;
6022: ENABLE
// end ;
6023: END
// every 0 0$5 + 2 2$0 trigger bunker_done do
6024: LD_EXP 19
6028: IFFALSE 6059
6030: GO 6032
6032: DISABLE
// begin comfree ( ruhengi0 ) ;
6033: LD_INT 2
6035: PPUSH
6036: CALL_OW 139
// combuild ( ruhengi1 , b_oil_mine , 42 , 54 , 0 ) ;
6040: LD_INT 18
6042: PPUSH
6043: LD_INT 29
6045: PPUSH
6046: LD_INT 42
6048: PPUSH
6049: LD_INT 54
6051: PPUSH
6052: LD_INT 0
6054: PPUSH
6055: CALL_OW 145
// end ;
6059: END
// var rubwrks0 ; every 0 0$5 + 3 3$15 trigger depot_done and getresourcetype ( getbase ( rubdepo0 ) , mat_oil ) > 0 do
6060: LD_EXP 30
6064: PUSH
6065: LD_EXP 14
6069: PPUSH
6070: CALL_OW 274
6074: PPUSH
6075: LD_INT 2
6077: PPUSH
6078: CALL_OW 275
6082: PUSH
6083: LD_INT 0
6085: GREATER
6086: AND
6087: IFFALSE 6117
6089: GO 6091
6091: DISABLE
// begin rubwrks0 = combuild ( ruhengi1 , b_workshop , 39 , 48 , 2 ) ;
6092: LD_ADDR_LOC 32
6096: PUSH
6097: LD_INT 18
6099: PPUSH
6100: LD_INT 2
6102: PPUSH
6103: LD_INT 39
6105: PPUSH
6106: LD_INT 48
6108: PPUSH
6109: LD_INT 2
6111: PPUSH
6112: CALL_OW 145
6116: ST_TO_ADDR
// end ;
6117: END
// var ruboilp1 ; every 0 0$5 + 4 4$25 trigger build_wrks and not IsConstructed ( rubwrks0 ) do
6118: LD_LOC 11
6122: PUSH
6123: LD_LOC 32
6127: PPUSH
6128: CALL_OW 304
6132: NOT
6133: AND
6134: IFFALSE 6176
6136: GO 6138
6138: DISABLE
// begin ruboilp1 = combuild ( ruhengi1 , b_oil_power , 34 , 49 , 0 ) ;
6139: LD_ADDR_LOC 33
6143: PUSH
6144: LD_INT 18
6146: PPUSH
6147: LD_INT 26
6149: PPUSH
6150: LD_INT 34
6152: PPUSH
6153: LD_INT 49
6155: PPUSH
6156: LD_INT 0
6158: PPUSH
6159: CALL_OW 145
6163: ST_TO_ADDR
// commoveunit ( ruhmech1 , rubwrks0 ) ;
6164: LD_INT 19
6166: PPUSH
6167: LD_LOC 32
6171: PPUSH
6172: CALL_OW 112
// end ;
6176: END
// every 0 0$6 + 4 4$20 trigger build_wrks and Isinunit ( ruhmech1 ) = rubwrks0 do
6177: LD_LOC 11
6181: PUSH
6182: LD_INT 19
6184: PPUSH
6185: CALL_OW 310
6189: PUSH
6190: LD_LOC 32
6194: EQUAL
6195: AND
6196: IFFALSE 6223
6198: GO 6200
6200: DISABLE
// begin commoveunit ( ruhengi0 , rubware0 ) ;
6201: LD_INT 2
6203: PPUSH
6204: LD_INT 21
6206: PPUSH
6207: CALL_OW 112
// complaceweapon ( rubbunk1 , ru_heavy_machine_gun ) ;
6211: LD_EXP 15
6215: PPUSH
6216: LD_INT 42
6218: PPUSH
6219: CALL_OW 148
// end ;
6223: END
// on weaponplaced ( bunk , fact ) do if bunk = rubbunk1 then
6224: LD_VAR 0 1
6228: PUSH
6229: LD_EXP 15
6233: EQUAL
6234: IFFALSE 6259
// begin commovexy ( ruv0 , 73 , 78 ) ;
6236: LD_INT 7
6238: PPUSH
6239: LD_INT 73
6241: PPUSH
6242: LD_INT 78
6244: PPUSH
6245: CALL_OW 111
// commoveunit ( ruhmech1 , rubfact0 ) ;
6249: LD_INT 19
6251: PPUSH
6252: LD_INT 24
6254: PPUSH
6255: CALL_OW 112
// end ;
6259: PPOPN 2
6261: END
// every 0 0$7 + 4 4$55 trigger ruboilp1 and op1_done do
6262: LD_LOC 33
6266: PUSH
6267: LD_LOC 28
6271: AND
6272: IFFALSE 6289
6274: GO 6276
6276: DISABLE
// begin commoveunit ( ruhengi1 , rubdepo0 ) ;
6277: LD_INT 18
6279: PPUSH
6280: LD_EXP 14
6284: PPUSH
6285: CALL_OW 112
// end ;
6289: END
// every 0 0$3 + 1 1$54 trigger opev_start and br2_done do
6290: LD_LOC 18
6294: PUSH
6295: LD_LOC 27
6299: AND
6300: IFFALSE 6352
6302: GO 6304
6304: DISABLE
// begin brwr_done = true ;
6305: LD_ADDR_EXP 20
6309: PUSH
6310: LD_INT 1
6312: ST_TO_ADDR
// setblevel ( rubbrwr2 , brwr_lev ) ;
6313: LD_EXP 16
6317: PPUSH
6318: LD_LOC 14
6322: PPUSH
6323: CALL_OW 241
// commoveunit ( ruhsold2 , rubbrwr2 ) ;
6327: LD_INT 10
6329: PPUSH
6330: LD_EXP 16
6334: PPUSH
6335: CALL_OW 112
// comcollect ( ruhengi0 , 40 , 53 ) ;
6339: LD_INT 2
6341: PPUSH
6342: LD_INT 40
6344: PPUSH
6345: LD_INT 53
6347: PPUSH
6348: CALL_OW 117
// end ;
6352: END
// every 0 0$3 + 2 2$00 trigger brwr_done do
6353: LD_EXP 20
6357: IFFALSE 6404
6359: GO 6361
6361: DISABLE
// begin wait ( 0 0$5 ) ;
6362: LD_INT 175
6364: PPUSH
6365: CALL_OW 67
// com_queue = true ;
6369: LD_ADDR_OWVAR 49
6373: PUSH
6374: LD_INT 1
6376: ST_TO_ADDR
// commoveunit ( ruhengi0 , rubdepo0 ) ;
6377: LD_INT 2
6379: PPUSH
6380: LD_EXP 14
6384: PPUSH
6385: CALL_OW 112
// comexitbuilding ( ruhengi0 ) ;
6389: LD_INT 2
6391: PPUSH
6392: CALL_OW 122
// com_queue = false ;
6396: LD_ADDR_OWVAR 49
6400: PUSH
6401: LD_INT 0
6403: ST_TO_ADDR
// end ;
6404: END
// every 6 6$0 do
6405: GO 6407
6407: DISABLE
// begin uc_nation = nation_russian ;
6408: LD_ADDR_OWVAR 21
6412: PUSH
6413: LD_INT 3
6415: ST_TO_ADDR
// uc_side = rus ;
6416: LD_ADDR_OWVAR 20
6420: PUSH
6421: LD_EXP 1
6425: ST_TO_ADDR
// case difficulty of 1 :
6426: LD_OWVAR 67
6430: PUSH
6431: LD_INT 1
6433: DOUBLE
6434: EQUAL
6435: IFTRUE 6439
6437: GO 6452
6439: POP
// preparesoldier ( sex_male , 1 ) ; 2 :
6440: LD_INT 1
6442: PPUSH
6443: LD_INT 1
6445: PPUSH
6446: CALL_OW 381
6450: GO 6495
6452: LD_INT 2
6454: DOUBLE
6455: EQUAL
6456: IFTRUE 6460
6458: GO 6473
6460: POP
// preparesoldier ( sex_male , 2 ) ; 3 :
6461: LD_INT 1
6463: PPUSH
6464: LD_INT 2
6466: PPUSH
6467: CALL_OW 381
6471: GO 6495
6473: LD_INT 3
6475: DOUBLE
6476: EQUAL
6477: IFTRUE 6481
6479: GO 6494
6481: POP
// preparesoldier ( sex_male , 3 ) ; end ;
6482: LD_INT 1
6484: PPUSH
6485: LD_INT 3
6487: PPUSH
6488: CALL_OW 381
6492: GO 6495
6494: POP
// ruhsoldj = createhuman ;
6495: LD_ADDR_EXP 25
6499: PUSH
6500: CALL_OW 44
6504: ST_TO_ADDR
// placeunitarea ( ruhsoldj , rusreinf0 , false ) ;
6505: LD_EXP 25
6509: PPUSH
6510: LD_INT 6
6512: PPUSH
6513: LD_INT 0
6515: PPUSH
6516: CALL_OW 49
// case difficulty of 1 :
6520: LD_OWVAR 67
6524: PUSH
6525: LD_INT 1
6527: DOUBLE
6528: EQUAL
6529: IFTRUE 6533
6531: GO 6546
6533: POP
// preparesoldier ( sex_male , 2 ) ; 2 :
6534: LD_INT 1
6536: PPUSH
6537: LD_INT 2
6539: PPUSH
6540: CALL_OW 381
6544: GO 6589
6546: LD_INT 2
6548: DOUBLE
6549: EQUAL
6550: IFTRUE 6554
6552: GO 6567
6554: POP
// preparesoldier ( sex_male , 3 ) ; 3 :
6555: LD_INT 1
6557: PPUSH
6558: LD_INT 3
6560: PPUSH
6561: CALL_OW 381
6565: GO 6589
6567: LD_INT 3
6569: DOUBLE
6570: EQUAL
6571: IFTRUE 6575
6573: GO 6588
6575: POP
// preparesoldier ( sex_male , 3 ) ; end ;
6576: LD_INT 1
6578: PPUSH
6579: LD_INT 3
6581: PPUSH
6582: CALL_OW 381
6586: GO 6589
6588: POP
// ruhsoldk = createhuman ;
6589: LD_ADDR_EXP 26
6593: PUSH
6594: CALL_OW 44
6598: ST_TO_ADDR
// placeunitarea ( ruhsoldk , rusreinf0 , false ) ;
6599: LD_EXP 26
6603: PPUSH
6604: LD_INT 6
6606: PPUSH
6607: LD_INT 0
6609: PPUSH
6610: CALL_OW 49
// case difficulty of 1 :
6614: LD_OWVAR 67
6618: PUSH
6619: LD_INT 1
6621: DOUBLE
6622: EQUAL
6623: IFTRUE 6627
6625: GO 6640
6627: POP
// preparesoldier ( sex_male , 1 ) ; 2 :
6628: LD_INT 1
6630: PPUSH
6631: LD_INT 1
6633: PPUSH
6634: CALL_OW 381
6638: GO 6683
6640: LD_INT 2
6642: DOUBLE
6643: EQUAL
6644: IFTRUE 6648
6646: GO 6661
6648: POP
// preparesoldier ( sex_male , 2 ) ; 3 :
6649: LD_INT 1
6651: PPUSH
6652: LD_INT 2
6654: PPUSH
6655: CALL_OW 381
6659: GO 6683
6661: LD_INT 3
6663: DOUBLE
6664: EQUAL
6665: IFTRUE 6669
6667: GO 6682
6669: POP
// preparesoldier ( sex_male , 3 ) ; end ;
6670: LD_INT 1
6672: PPUSH
6673: LD_INT 3
6675: PPUSH
6676: CALL_OW 381
6680: GO 6683
6682: POP
// ruhsoldl = createhuman ;
6683: LD_ADDR_EXP 27
6687: PUSH
6688: CALL_OW 44
6692: ST_TO_ADDR
// placeunitarea ( ruhsoldl , rusreinf0 , false ) ;
6693: LD_EXP 27
6697: PPUSH
6698: LD_INT 6
6700: PPUSH
6701: LD_INT 0
6703: PPUSH
6704: CALL_OW 49
// comremember ( [ ruhsoldj , ruhsoldk , ruhsoldl ] ) ;
6708: LD_EXP 25
6712: PUSH
6713: LD_EXP 26
6717: PUSH
6718: LD_EXP 27
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: LIST
6727: PPUSH
6728: CALL_OW 143
// comagressivemove ( [ ruhsoldj , ruhsoldk , ruhsoldl ] , 78 , 46 ) ;
6732: LD_EXP 25
6736: PUSH
6737: LD_EXP 26
6741: PUSH
6742: LD_EXP 27
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: LIST
6751: PPUSH
6752: LD_INT 78
6754: PPUSH
6755: LD_INT 46
6757: PPUSH
6758: CALL_OW 114
// end ;
6762: END
// every 0 0$1 + 6 6$0 trigger not ( [ ruhsoldj , ruhsoldk , ruhsoldl ] diff filterunitsinarea ( wayarea1 , [ [ f_ok ] , [ f_side , rus ] , [ f_type , unit_human ] ] ) ) do
6763: LD_EXP 25
6767: PUSH
6768: LD_EXP 26
6772: PUSH
6773: LD_EXP 27
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: LIST
6782: PUSH
6783: LD_INT 9
6785: PPUSH
6786: LD_INT 50
6788: PUSH
6789: EMPTY
6790: LIST
6791: PUSH
6792: LD_INT 22
6794: PUSH
6795: LD_EXP 1
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: PUSH
6804: LD_INT 21
6806: PUSH
6807: LD_INT 1
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: LIST
6818: PPUSH
6819: CALL_OW 70
6823: DIFF
6824: NOT
6825: IFFALSE 6867
6827: GO 6829
6829: DISABLE
// begin comagressivemove ( [ ruhsoldj , ruhsoldk , ruhsoldl ] , 55 , 16 ) ;
6830: LD_EXP 25
6834: PUSH
6835: LD_EXP 26
6839: PUSH
6840: LD_EXP 27
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: LIST
6849: PPUSH
6850: LD_INT 55
6852: PPUSH
6853: LD_INT 16
6855: PPUSH
6856: CALL_OW 114
// hint ( Shift ) ;
6860: LD_STRING Shift
6862: PPUSH
6863: CALL_OW 339
// end ;
6867: END
// every 0 0$0.7 + 6 6$5 trigger unitfilter ( [ ruhsoldj , ruhsoldk , ruhsoldl ] , [ [ f_ok ] ] ) < 3 do var pomsold , pomsold2 ;
6868: LD_EXP 25
6872: PUSH
6873: LD_EXP 26
6877: PUSH
6878: LD_EXP 27
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: LIST
6887: PPUSH
6888: LD_INT 50
6890: PUSH
6891: EMPTY
6892: LIST
6893: PUSH
6894: EMPTY
6895: LIST
6896: PPUSH
6897: CALL_OW 72
6901: PUSH
6902: LD_INT 3
6904: LESS
6905: IFFALSE 7616
6907: GO 6909
6909: DISABLE
6910: LD_INT 0
6912: PPUSH
6913: PPUSH
// begin comreturn ( [ ruhsoldj , ruhsoldk , ruhsoldl ] ) ;
6914: LD_EXP 25
6918: PUSH
6919: LD_EXP 26
6923: PUSH
6924: LD_EXP 27
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: LIST
6933: PPUSH
6934: CALL_OW 144
// wait ( 0 0$1 ) ;
6938: LD_INT 35
6940: PPUSH
6941: CALL_OW 67
// pomsold = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ john ] ;
6945: LD_ADDR_VAR 0 1
6949: PUSH
6950: LD_INT 22
6952: PUSH
6953: LD_EXP 2
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PUSH
6962: LD_INT 21
6964: PUSH
6965: LD_INT 1
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PUSH
6972: LD_INT 50
6974: PUSH
6975: EMPTY
6976: LIST
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: LIST
6982: PPUSH
6983: CALL_OW 69
6987: PUSH
6988: LD_LOC 1
6992: PUSH
6993: EMPTY
6994: LIST
6995: DIFF
6996: ST_TO_ADDR
// if pomsold <> 0 then
6997: LD_VAR 0 1
7001: PUSH
7002: LD_INT 0
7004: NONEQUAL
7005: IFFALSE 7579
// begin pomsold2 = unitfilter ( pomsold , [ [ f_class , classtype_soldier ] ] ) ;
7007: LD_ADDR_VAR 0 2
7011: PUSH
7012: LD_VAR 0 1
7016: PPUSH
7017: LD_INT 25
7019: PUSH
7020: LD_INT 1
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: PPUSH
7030: CALL_OW 72
7034: ST_TO_ADDR
// if pomsold2 <> 0 then
7035: LD_VAR 0 2
7039: PUSH
7040: LD_INT 0
7042: NONEQUAL
7043: IFFALSE 7061
// pomsold = pomsold2 [ 1 ] else
7045: LD_ADDR_VAR 0 1
7049: PUSH
7050: LD_VAR 0 2
7054: PUSH
7055: LD_INT 1
7057: ARRAY
7058: ST_TO_ADDR
7059: GO 7075
// pomsold = pomsold [ 1 ] ;
7061: LD_ADDR_VAR 0 1
7065: PUSH
7066: LD_VAR 0 1
7070: PUSH
7071: LD_INT 1
7073: ARRAY
7074: ST_TO_ADDR
// wait ( 0 0$1 ) ;
7075: LD_INT 35
7077: PPUSH
7078: CALL_OW 67
// dialogueon ;
7082: CALL_OW 6
// if getsex ( pomsold ) = sex_female then
7086: LD_VAR 0 1
7090: PPUSH
7091: CALL_OW 258
7095: PUSH
7096: LD_INT 2
7098: EQUAL
7099: IFFALSE 7115
// say ( pomsold , DAtt1-FSol1-1 ) else
7101: LD_VAR 0 1
7105: PPUSH
7106: LD_STRING DAtt1-FSol1-1
7108: PPUSH
7109: CALL_OW 88
7113: GO 7127
// say ( pomsold , DAtt1-Sol1-1 ) ;
7115: LD_VAR 0 1
7119: PPUSH
7120: LD_STRING DAtt1-Sol1-1
7122: PPUSH
7123: CALL_OW 88
// say ( john , DAtt1-JMM-1 ) ;
7127: LD_LOC 1
7131: PPUSH
7132: LD_STRING DAtt1-JMM-1
7134: PPUSH
7135: CALL_OW 88
// if ( 0 + filterallunits ( [ [ f_side , amer ] , [ f_btype , b_breastwork ] ] ) + filterallunits ( [ [ f_side , amer ] , [ f_btype , b_bunker ] ] ) ) <= 3 then
7139: LD_INT 0
7141: PUSH
7142: LD_INT 22
7144: PUSH
7145: LD_EXP 2
7149: PUSH
7150: EMPTY
7151: LIST
7152: LIST
7153: PUSH
7154: LD_INT 30
7156: PUSH
7157: LD_INT 31
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PPUSH
7168: CALL_OW 69
7172: PLUS
7173: PUSH
7174: LD_INT 22
7176: PUSH
7177: LD_EXP 2
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: PUSH
7186: LD_INT 30
7188: PUSH
7189: LD_INT 32
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PPUSH
7200: CALL_OW 69
7204: PLUS
7205: PUSH
7206: LD_INT 3
7208: LESSEQUAL
7209: IFFALSE 7461
// begin if isok ( lisa ) then
7211: LD_LOC 4
7215: PPUSH
7216: CALL_OW 302
7220: IFFALSE 7236
// say ( lisa , DAtt1a-Lisa-1 ) else
7222: LD_LOC 4
7226: PPUSH
7227: LD_STRING DAtt1a-Lisa-1
7229: PPUSH
7230: CALL_OW 88
7234: GO 7421
// if getsex ( pomsold ) = sex_male then
7236: LD_VAR 0 1
7240: PPUSH
7241: CALL_OW 258
7245: PUSH
7246: LD_INT 1
7248: EQUAL
7249: IFFALSE 7265
// say ( pomsold , DAtt1a-Sol1-1 ) else
7251: LD_VAR 0 1
7255: PPUSH
7256: LD_STRING DAtt1a-Sol1-1
7258: PPUSH
7259: CALL_OW 88
7263: GO 7421
// begin pomsold = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) diff john ;
7265: LD_ADDR_VAR 0 1
7269: PUSH
7270: LD_INT 22
7272: PUSH
7273: LD_EXP 2
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: LD_INT 21
7284: PUSH
7285: LD_INT 1
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: PUSH
7292: LD_INT 50
7294: PUSH
7295: EMPTY
7296: LIST
7297: PUSH
7298: LD_INT 26
7300: PUSH
7301: LD_INT 1
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: PPUSH
7314: CALL_OW 69
7318: PUSH
7319: LD_LOC 1
7323: DIFF
7324: ST_TO_ADDR
// if pomsold then
7325: LD_VAR 0 1
7329: IFFALSE 7413
// begin pomsold2 = unitfilter ( pomsold , [ [ f_class , classtype_soldier ] ] ) ;
7331: LD_ADDR_VAR 0 2
7335: PUSH
7336: LD_VAR 0 1
7340: PPUSH
7341: LD_INT 25
7343: PUSH
7344: LD_INT 1
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: EMPTY
7352: LIST
7353: PPUSH
7354: CALL_OW 72
7358: ST_TO_ADDR
// if pomsold2 <> 0 then
7359: LD_VAR 0 2
7363: PUSH
7364: LD_INT 0
7366: NONEQUAL
7367: IFFALSE 7385
// pomsold = pomsold2 [ 1 ] else
7369: LD_ADDR_VAR 0 1
7373: PUSH
7374: LD_VAR 0 2
7378: PUSH
7379: LD_INT 1
7381: ARRAY
7382: ST_TO_ADDR
7383: GO 7399
// pomsold = pomsold [ 1 ] ;
7385: LD_ADDR_VAR 0 1
7389: PUSH
7390: LD_VAR 0 1
7394: PUSH
7395: LD_INT 1
7397: ARRAY
7398: ST_TO_ADDR
// say ( pomsold , DAtt1a-Sol1-1 ) ;
7399: LD_VAR 0 1
7403: PPUSH
7404: LD_STRING DAtt1a-Sol1-1
7406: PPUSH
7407: CALL_OW 88
// end else
7411: GO 7421
// pomsold = 0 ;
7413: LD_ADDR_VAR 0 1
7417: PUSH
7418: LD_INT 0
7420: ST_TO_ADDR
// end ; if isok ( lisa ) or getsex ( pomsold ) = sex_male then
7421: LD_LOC 4
7425: PPUSH
7426: CALL_OW 302
7430: PUSH
7431: LD_VAR 0 1
7435: PPUSH
7436: CALL_OW 258
7440: PUSH
7441: LD_INT 1
7443: EQUAL
7444: OR
7445: IFFALSE 7459
// say ( john , DAtt1a-JMM-1 ) ;
7447: LD_LOC 1
7451: PPUSH
7452: LD_STRING DAtt1a-JMM-1
7454: PPUSH
7455: CALL_OW 88
// end else
7459: GO 7575
// if getsex ( pomsold ) = sex_male then
7461: LD_VAR 0 1
7465: PPUSH
7466: CALL_OW 258
7470: PUSH
7471: LD_INT 1
7473: EQUAL
7474: IFFALSE 7490
// say ( pomsold , DAtt1b-Sol1-1 ) else
7476: LD_VAR 0 1
7480: PPUSH
7481: LD_STRING DAtt1b-Sol1-1
7483: PPUSH
7484: CALL_OW 88
7488: GO 7575
// begin pomsold = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) diff [ john ] ;
7490: LD_ADDR_VAR 0 1
7494: PUSH
7495: LD_INT 22
7497: PUSH
7498: LD_EXP 2
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: PUSH
7507: LD_INT 21
7509: PUSH
7510: LD_INT 1
7512: PUSH
7513: EMPTY
7514: LIST
7515: LIST
7516: PUSH
7517: LD_INT 50
7519: PUSH
7520: EMPTY
7521: LIST
7522: PUSH
7523: LD_INT 26
7525: PUSH
7526: LD_INT 1
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: PPUSH
7539: CALL_OW 69
7543: PUSH
7544: LD_LOC 1
7548: PUSH
7549: EMPTY
7550: LIST
7551: DIFF
7552: ST_TO_ADDR
// if pomsold then
7553: LD_VAR 0 1
7557: IFFALSE 7575
// say ( pomsold [ 1 ] , DAtt1b-Sol1-1 ) ;
7559: LD_VAR 0 1
7563: PUSH
7564: LD_INT 1
7566: ARRAY
7567: PPUSH
7568: LD_STRING DAtt1b-Sol1-1
7570: PPUSH
7571: CALL_OW 88
// end ; dialogueoff ;
7575: CALL_OW 7
// end ; wait ( 0 0$7 ) ;
7579: LD_INT 245
7581: PPUSH
7582: CALL_OW 67
// commovexy ( [ ruhsoldj , ruhsoldk , ruhsoldl ] , 76 , 77 ) ;
7586: LD_EXP 25
7590: PUSH
7591: LD_EXP 26
7595: PUSH
7596: LD_EXP 27
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: LIST
7605: PPUSH
7606: LD_INT 76
7608: PPUSH
7609: LD_INT 77
7611: PPUSH
7612: CALL_OW 111
// end ;
7616: PPOPN 2
7618: END
// every 0 0$10 + 9 9$0 do
7619: GO 7621
7621: DISABLE
// begin dialogueon ;
7622: CALL_OW 6
// sayradio ( lucyd , D2-Don-1 ) ;
7626: LD_LOC 6
7630: PPUSH
7631: LD_STRING D2-Don-1
7633: PPUSH
7634: CALL_OW 94
// say ( john , D2-JMM-1 ) ;
7638: LD_LOC 1
7642: PPUSH
7643: LD_STRING D2-JMM-1
7645: PPUSH
7646: CALL_OW 88
// sayradio ( lucyd , D2-Don-2 ) ;
7650: LD_LOC 6
7654: PPUSH
7655: LD_STRING D2-Don-2
7657: PPUSH
7658: CALL_OW 94
// say ( john , D2-JMM-2 ) ;
7662: LD_LOC 1
7666: PPUSH
7667: LD_STRING D2-JMM-2
7669: PPUSH
7670: CALL_OW 88
// sayradio ( lucyd , D2-Don-3 ) ;
7674: LD_LOC 6
7678: PPUSH
7679: LD_STRING D2-Don-3
7681: PPUSH
7682: CALL_OW 94
// dialogueoff ;
7686: CALL_OW 7
// end ;
7690: END
// every 12 12$10 do
7691: GO 7693
7693: DISABLE
// begin placeunitarea ( lucyd , reinf0 , false ) ;
7694: LD_LOC 6
7698: PPUSH
7699: LD_INT 4
7701: PPUSH
7702: LD_INT 0
7704: PPUSH
7705: CALL_OW 49
// uc_nation = nation_american ;
7709: LD_ADDR_OWVAR 21
7713: PUSH
7714: LD_INT 1
7716: ST_TO_ADDR
// uc_side = amer ;
7717: LD_ADDR_OWVAR 20
7721: PUSH
7722: LD_EXP 2
7726: ST_TO_ADDR
// if frank then
7727: LD_LOC 5
7731: IFFALSE 7760
// begin placeunitarea ( frank , reinf0 , false ) ;
7733: LD_LOC 5
7737: PPUSH
7738: LD_INT 4
7740: PPUSH
7741: LD_INT 0
7743: PPUSH
7744: CALL_OW 49
// amhsold4 = frank ;
7748: LD_ADDR_EXP 6
7752: PUSH
7753: LD_LOC 5
7757: ST_TO_ADDR
// end else
7758: GO 7795
// begin preparesoldier ( sex_male , 3 ) ;
7760: LD_INT 1
7762: PPUSH
7763: LD_INT 3
7765: PPUSH
7766: CALL_OW 381
// amhsold4 = createhuman ;
7770: LD_ADDR_EXP 6
7774: PUSH
7775: CALL_OW 44
7779: ST_TO_ADDR
// placeunitarea ( amhsold4 , reinf0 , false ) ;
7780: LD_EXP 6
7784: PPUSH
7785: LD_INT 4
7787: PPUSH
7788: LD_INT 0
7790: PPUSH
7791: CALL_OW 49
// end ; preparesoldier ( sex_male , 3 ) ;
7795: LD_INT 1
7797: PPUSH
7798: LD_INT 3
7800: PPUSH
7801: CALL_OW 381
// amhsold5 = createhuman ;
7805: LD_ADDR_EXP 7
7809: PUSH
7810: CALL_OW 44
7814: ST_TO_ADDR
// placeunitarea ( amhsold5 , reinf0 , false ) ;
7815: LD_EXP 7
7819: PPUSH
7820: LD_INT 4
7822: PPUSH
7823: LD_INT 0
7825: PPUSH
7826: CALL_OW 49
// if difficulty = 3 then
7830: LD_OWVAR 67
7834: PUSH
7835: LD_INT 3
7837: EQUAL
7838: IFFALSE 7852
// preparemechanic ( sex_female , 2 ) else
7840: LD_INT 2
7842: PPUSH
7843: LD_INT 2
7845: PPUSH
7846: CALL_OW 383
7850: GO 7862
// preparemechanic ( sex_female , 3 ) ;
7852: LD_INT 2
7854: PPUSH
7855: LD_INT 3
7857: PPUSH
7858: CALL_OW 383
// amhsold6 = createhuman ;
7862: LD_ADDR_EXP 8
7866: PUSH
7867: CALL_OW 44
7871: ST_TO_ADDR
// placeunitarea ( amhsold6 , reinf0 , false ) ;
7872: LD_EXP 8
7876: PPUSH
7877: LD_INT 4
7879: PPUSH
7880: LD_INT 0
7882: PPUSH
7883: CALL_OW 49
// if difficulty = 3 then
7887: LD_OWVAR 67
7891: PUSH
7892: LD_INT 3
7894: EQUAL
7895: IFFALSE 7909
// preparemechanic ( sex_male , 1 ) else
7897: LD_INT 1
7899: PPUSH
7900: LD_INT 1
7902: PPUSH
7903: CALL_OW 383
7907: GO 7919
// preparemechanic ( sex_male , 2 ) ;
7909: LD_INT 1
7911: PPUSH
7912: LD_INT 2
7914: PPUSH
7915: CALL_OW 383
// amhsold7 = createhuman ;
7919: LD_ADDR_LOC 7
7923: PUSH
7924: CALL_OW 44
7928: ST_TO_ADDR
// placeunitarea ( amhsold7 , reinf0 , false ) ;
7929: LD_LOC 7
7933: PPUSH
7934: LD_INT 4
7936: PPUSH
7937: LD_INT 0
7939: PPUSH
7940: CALL_OW 49
// chciplo = chciplo + 5 ;
7944: LD_ADDR_LOC 20
7948: PUSH
7949: LD_LOC 20
7953: PUSH
7954: LD_INT 5
7956: PLUS
7957: ST_TO_ADDR
// if difficulty = 1 then
7958: LD_OWVAR 67
7962: PUSH
7963: LD_INT 1
7965: EQUAL
7966: IFFALSE 8017
// begin preparesoldier ( sex_male , 2 ) ;
7968: LD_INT 1
7970: PPUSH
7971: LD_INT 2
7973: PPUSH
7974: CALL_OW 381
// amhsold7 = createhuman ;
7978: LD_ADDR_LOC 7
7982: PUSH
7983: CALL_OW 44
7987: ST_TO_ADDR
// placeunitarea ( amhsold7 , reinf0 , false ) ;
7988: LD_LOC 7
7992: PPUSH
7993: LD_INT 4
7995: PPUSH
7996: LD_INT 0
7998: PPUSH
7999: CALL_OW 49
// chciplo = chciplo + 1 ;
8003: LD_ADDR_LOC 20
8007: PUSH
8008: LD_LOC 20
8012: PUSH
8013: LD_INT 1
8015: PLUS
8016: ST_TO_ADDR
// end ; centeronunits ( [ lucyd , amhsold4 , amhsold5 , amhsold6 ] ) ;
8017: LD_LOC 6
8021: PUSH
8022: LD_EXP 6
8026: PUSH
8027: LD_EXP 7
8031: PUSH
8032: LD_EXP 8
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: PPUSH
8043: CALL_OW 85
// dialogueon ;
8047: CALL_OW 6
// say ( amhsold5 , D3-Sol1-1 ) ;
8051: LD_EXP 7
8055: PPUSH
8056: LD_STRING D3-Sol1-1
8058: PPUSH
8059: CALL_OW 88
// say ( amhsold7 , D3-Sol2-1 ) ;
8063: LD_LOC 7
8067: PPUSH
8068: LD_STRING D3-Sol2-1
8070: PPUSH
8071: CALL_OW 88
// if frank then
8075: LD_LOC 5
8079: IFFALSE 8093
// say ( frank , D3-Frank-1 ) ;
8081: LD_LOC 5
8085: PPUSH
8086: LD_STRING D3-Frank-1
8088: PPUSH
8089: CALL_OW 88
// say ( lucyd , D3-Don-1 ) ;
8093: LD_LOC 6
8097: PPUSH
8098: LD_STRING D3-Don-1
8100: PPUSH
8101: CALL_OW 88
// sayradio ( lucyd , D3-Don-1a ) ;
8105: LD_LOC 6
8109: PPUSH
8110: LD_STRING D3-Don-1a
8112: PPUSH
8113: CALL_OW 94
// say ( john , D3-JMM-1 ) ;
8117: LD_LOC 1
8121: PPUSH
8122: LD_STRING D3-JMM-1
8124: PPUSH
8125: CALL_OW 88
// sayradio ( lucyd , D3-Don-2 ) ;
8129: LD_LOC 6
8133: PPUSH
8134: LD_STRING D3-Don-2
8136: PPUSH
8137: CALL_OW 94
// if rubase1_notrazed then
8141: CALL 8220 0 0
8145: IFFALSE 8203
// begin say ( john , D3-JMM-2 ) ;
8147: LD_LOC 1
8151: PPUSH
8152: LD_STRING D3-JMM-2
8154: PPUSH
8155: CALL_OW 88
// sayradio ( lucyd , D3-Don-3 ) ;
8159: LD_LOC 6
8163: PPUSH
8164: LD_STRING D3-Don-3
8166: PPUSH
8167: CALL_OW 94
// say ( john , D3-JMM-3 ) ;
8171: LD_LOC 1
8175: PPUSH
8176: LD_STRING D3-JMM-3
8178: PPUSH
8179: CALL_OW 88
// if frank then
8183: LD_LOC 5
8187: IFFALSE 8201
// say ( frank , D3-Frank-3 ) ;
8189: LD_LOC 5
8193: PPUSH
8194: LD_STRING D3-Frank-3
8196: PPUSH
8197: CALL_OW 88
// end else
8201: GO 8215
// begin say ( john , D3-JMM-4 ) ;
8203: LD_LOC 1
8207: PPUSH
8208: LD_STRING D3-JMM-4
8210: PPUSH
8211: CALL_OW 88
// end ; dialogueoff ;
8215: CALL_OW 7
// end ;
8219: END
// function rubase1_notrazed ; begin
8220: LD_INT 0
8222: PPUSH
// result = filterunitsinarea ( rubase1rng , [ [ f_side , rus ] , [ f_alive ] ] ) ;
8223: LD_ADDR_VAR 0 1
8227: PUSH
8228: LD_INT 3
8230: PPUSH
8231: LD_INT 22
8233: PUSH
8234: LD_EXP 1
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: PUSH
8243: LD_INT 51
8245: PUSH
8246: EMPTY
8247: LIST
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: PPUSH
8253: CALL_OW 70
8257: ST_TO_ADDR
// end ;
8258: LD_VAR 0 1
8262: RET
// every 0 0$2 + 12 12$20 trigger getdistunits ( john , frank ) < 5 do
8263: LD_LOC 1
8267: PPUSH
8268: LD_LOC 5
8272: PPUSH
8273: CALL_OW 296
8277: PUSH
8278: LD_INT 5
8280: LESS
8281: IFFALSE 8396
8283: GO 8285
8285: DISABLE
// begin rubase1_gone = true ;
8286: LD_ADDR_EXP 21
8290: PUSH
8291: LD_INT 1
8293: ST_TO_ADDR
// dialogueon ;
8294: CALL_OW 6
// if isok ( frank ) then
8298: LD_LOC 5
8302: PPUSH
8303: CALL_OW 302
8307: IFFALSE 8392
// begin say ( frank , D3a-Frank-1 ) ;
8309: LD_LOC 5
8313: PPUSH
8314: LD_STRING D3a-Frank-1
8316: PPUSH
8317: CALL_OW 88
// if isok ( lisa ) then
8321: LD_LOC 4
8325: PPUSH
8326: CALL_OW 302
8330: IFFALSE 8380
// begin say ( lisa , D3a-Lisa-1 ) ;
8332: LD_LOC 4
8336: PPUSH
8337: LD_STRING D3a-Lisa-1
8339: PPUSH
8340: CALL_OW 88
// say ( frank , D3a-Frank-2 ) ;
8344: LD_LOC 5
8348: PPUSH
8349: LD_STRING D3a-Frank-2
8351: PPUSH
8352: CALL_OW 88
// say ( lisa , D3a-Lisa-2 ) ;
8356: LD_LOC 4
8360: PPUSH
8361: LD_STRING D3a-Lisa-2
8363: PPUSH
8364: CALL_OW 88
// say ( frank , D3a-Frank-3 ) ;
8368: LD_LOC 5
8372: PPUSH
8373: LD_STRING D3a-Frank-3
8375: PPUSH
8376: CALL_OW 88
// end ; say ( john , D3a-JMM-3 ) ;
8380: LD_LOC 1
8384: PPUSH
8385: LD_STRING D3a-JMM-3
8387: PPUSH
8388: CALL_OW 88
// end ; dialogueoff ;
8392: CALL_OW 7
// end ;
8396: END
// every 0 0$3 + 12 12$52 trigger ( [ lucyd , amhsold4 , amhsold5 , amhsold6 ] diff filterunitsinarea ( reinf0ex , [ [ f_side , amer ] ] ) ) <= 2 do
8397: LD_LOC 6
8401: PUSH
8402: LD_EXP 6
8406: PUSH
8407: LD_EXP 7
8411: PUSH
8412: LD_EXP 8
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: PUSH
8423: LD_INT 21
8425: PPUSH
8426: LD_INT 22
8428: PUSH
8429: LD_EXP 2
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PUSH
8438: EMPTY
8439: LIST
8440: PPUSH
8441: CALL_OW 70
8445: DIFF
8446: PUSH
8447: LD_INT 2
8449: LESSEQUAL
8450: IFFALSE 8475
8452: GO 8454
8454: DISABLE
// begin dialogueon ;
8455: CALL_OW 6
// sayradio ( lucyd , D3b-Don-1 ) ;
8459: LD_LOC 6
8463: PPUSH
8464: LD_STRING D3b-Don-1
8466: PPUSH
8467: CALL_OW 94
// dialogueoff ;
8471: CALL_OW 7
// end ;
8475: END
// every 0 0$1 + 1 1$0 trigger ( not filterallunits ( [ [ f_side , rus ] , [ f_ok ] , [ f_type , unit_human ] ] ) ) do var tmp , tmp2 , medal1 , medal2 , medal3 ;
8476: LD_INT 22
8478: PUSH
8479: LD_EXP 1
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PUSH
8488: LD_INT 50
8490: PUSH
8491: EMPTY
8492: LIST
8493: PUSH
8494: LD_INT 21
8496: PUSH
8497: LD_INT 1
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: LIST
8508: PPUSH
8509: CALL_OW 69
8513: NOT
8514: IFFALSE 8876
8516: GO 8518
8518: DISABLE
8519: LD_INT 0
8521: PPUSH
8522: PPUSH
8523: PPUSH
8524: PPUSH
8525: PPUSH
// begin medal1 := false ;
8526: LD_ADDR_VAR 0 3
8530: PUSH
8531: LD_INT 0
8533: ST_TO_ADDR
// medal2 := false ;
8534: LD_ADDR_VAR 0 4
8538: PUSH
8539: LD_INT 0
8541: ST_TO_ADDR
// medal3 := false ;
8542: LD_ADDR_VAR 0 5
8546: PUSH
8547: LD_INT 0
8549: ST_TO_ADDR
// if debug then
8550: LD_EXP 42
8554: IFFALSE 8563
// msg ( koncime! ) ;
8556: LD_STRING koncime!
8558: PPUSH
8559: CALL_OW 100
// wait ( 0 0$1 ) ;
8563: LD_INT 35
8565: PPUSH
8566: CALL_OW 67
// chciplo = chciplo - filterallunits ( [ [ f_alive ] , [ f_side , amer ] , [ f_type , unit_human ] ] ) ;
8570: LD_ADDR_LOC 20
8574: PUSH
8575: LD_LOC 20
8579: PUSH
8580: LD_INT 51
8582: PUSH
8583: EMPTY
8584: LIST
8585: PUSH
8586: LD_INT 22
8588: PUSH
8589: LD_EXP 2
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PUSH
8598: LD_INT 21
8600: PUSH
8601: LD_INT 1
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: LIST
8612: PPUSH
8613: CALL_OW 69
8617: MINUS
8618: ST_TO_ADDR
// if chciplo > 3 then
8619: LD_LOC 20
8623: PUSH
8624: LD_INT 3
8626: GREATER
8627: IFFALSE 8642
// addmedal ( deaths , - 1 ) else
8629: LD_STRING deaths
8631: PPUSH
8632: LD_INT 1
8634: NEG
8635: PPUSH
8636: CALL_OW 101
8640: GO 8660
// begin AddMedal ( deaths , 1 ) ;
8642: LD_STRING deaths
8644: PPUSH
8645: LD_INT 1
8647: PPUSH
8648: CALL_OW 101
// medal1 := true ;
8652: LD_ADDR_VAR 0 3
8656: PUSH
8657: LD_INT 1
8659: ST_TO_ADDR
// end ; if oilpowpldone and scndoildrill then
8660: LD_LOC 29
8664: PUSH
8665: LD_LOC 30
8669: AND
8670: IFFALSE 8692
// begin AddMedal ( oil , 1 ) ;
8672: LD_STRING oil
8674: PPUSH
8675: LD_INT 1
8677: PPUSH
8678: CALL_OW 101
// medal2 := true ;
8682: LD_ADDR_VAR 0 4
8686: PUSH
8687: LD_INT 1
8689: ST_TO_ADDR
// end else
8690: GO 8757
// if not oilpowpldone and not scndoildrill then
8692: LD_LOC 29
8696: NOT
8697: PUSH
8698: LD_LOC 30
8702: NOT
8703: AND
8704: IFFALSE 8719
// addmedal ( oil , - 3 ) else
8706: LD_STRING oil
8708: PPUSH
8709: LD_INT 3
8711: NEG
8712: PPUSH
8713: CALL_OW 101
8717: GO 8757
// if not oilpowpldone then
8719: LD_LOC 29
8723: NOT
8724: IFFALSE 8739
// addmedal ( oil , - 1 ) else
8726: LD_STRING oil
8728: PPUSH
8729: LD_INT 1
8731: NEG
8732: PPUSH
8733: CALL_OW 101
8737: GO 8757
// if not scndoildrill then
8739: LD_LOC 30
8743: NOT
8744: IFFALSE 8757
// addmedal ( oil , - 2 ) ;
8746: LD_STRING oil
8748: PPUSH
8749: LD_INT 2
8751: NEG
8752: PPUSH
8753: CALL_OW 101
// if zbaven_veleni then
8757: LD_LOC 21
8761: IFFALSE 8776
// addmedal ( honour , - 1 ) else
8763: LD_STRING honour
8765: PPUSH
8766: LD_INT 1
8768: NEG
8769: PPUSH
8770: CALL_OW 101
8774: GO 8794
// begin AddMedal ( honour , 1 ) ;
8776: LD_STRING honour
8778: PPUSH
8779: LD_INT 1
8781: PPUSH
8782: CALL_OW 101
// medal3 := true ;
8786: LD_ADDR_VAR 0 5
8790: PUSH
8791: LD_INT 1
8793: ST_TO_ADDR
// end ; SA_EndMission ( 1 , 4 , medal1 , medal2 , medal3 ) ;
8794: LD_INT 1
8796: PPUSH
8797: LD_INT 4
8799: PPUSH
8800: LD_VAR 0 3
8804: PPUSH
8805: LD_VAR 0 4
8809: PPUSH
8810: LD_VAR 0 5
8814: PPUSH
8815: CALL 17370 0 5
// givemedals ( Main ) ;
8819: LD_STRING Main
8821: PPUSH
8822: CALL_OW 102
// rewardpeople ( filterallunits ( [ [ f_alive ] , [ f_side , amer ] , [ f_type , unit_human ] ] ) ) ;
8826: LD_INT 51
8828: PUSH
8829: EMPTY
8830: LIST
8831: PUSH
8832: LD_INT 22
8834: PUSH
8835: LD_EXP 2
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: PUSH
8844: LD_INT 21
8846: PUSH
8847: LD_INT 1
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: LIST
8858: PPUSH
8859: CALL_OW 69
8863: PPUSH
8864: CALL_OW 43
// saveitall ;
8868: CALL 781 0 0
// youwin ;
8872: CALL_OW 103
// end ;
8876: PPOPN 5
8878: END
// on UnitDestroyed ( un ) do begin if un = John then
8879: LD_VAR 0 1
8883: PUSH
8884: LD_LOC 1
8888: EQUAL
8889: IFFALSE 8898
// YouLost ( JMM ) ;
8891: LD_STRING JMM
8893: PPUSH
8894: CALL_OW 104
// if un = amhsold1 then
8898: LD_VAR 0 1
8902: PUSH
8903: LD_LOC 8
8907: EQUAL
8908: IFFALSE 8918
// brownIsDead := true ;
8910: LD_ADDR_EXP 43
8914: PUSH
8915: LD_INT 1
8917: ST_TO_ADDR
// if un = lucyd then
8918: LD_VAR 0 1
8922: PUSH
8923: LD_LOC 6
8927: EQUAL
8928: IFFALSE 8938
// donaldsonIsDead := true ;
8930: LD_ADDR_EXP 44
8934: PUSH
8935: LD_INT 1
8937: ST_TO_ADDR
// end ;
8938: PPOPN 1
8940: END
// every 0 0$1 trigger brownIsDead and donaldsonIsDead do
8941: LD_EXP 43
8945: PUSH
8946: LD_EXP 44
8950: AND
8951: IFFALSE 8960
8953: GO 8955
8955: DISABLE
// SA_BrownAndDonaldsonDead ;
8956: CALL 17355 0 0
8960: END
// every 0 0$1 trigger not filterallunits ( [ [ f_or , [ f_side , amer ] , [ f_side , amer2 ] ] , [ f_type , unit_building ] ] ) do
8961: LD_INT 2
8963: PUSH
8964: LD_INT 22
8966: PUSH
8967: LD_EXP 2
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PUSH
8976: LD_INT 22
8978: PUSH
8979: LD_EXP 3
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: LIST
8992: PUSH
8993: LD_INT 21
8995: PUSH
8996: LD_INT 3
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PPUSH
9007: CALL_OW 69
9011: NOT
9012: IFFALSE 9031
9014: GO 9016
9016: DISABLE
// begin wait ( 0 0$3 ) ;
9017: LD_INT 105
9019: PPUSH
9020: CALL_OW 67
// youlost ( Base ) ;
9024: LD_STRING Base
9026: PPUSH
9027: CALL_OW 104
// end ;
9031: END
// every 0 0$1 trigger filterallunits ( [ [ f_side , rus ] , [ f_ok ] , [ f_type , unit_human ] ] ) <= 5 do
9032: LD_INT 22
9034: PUSH
9035: LD_EXP 1
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: PUSH
9044: LD_INT 50
9046: PUSH
9047: EMPTY
9048: LIST
9049: PUSH
9050: LD_INT 21
9052: PUSH
9053: LD_INT 1
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: LIST
9064: PPUSH
9065: CALL_OW 69
9069: PUSH
9070: LD_INT 5
9072: LESSEQUAL
9073: IFFALSE 9237
9075: GO 9077
9077: DISABLE
// begin zbytek = filterallunits ( [ [ f_side , rus ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
9078: LD_ADDR_LOC 34
9082: PUSH
9083: LD_INT 22
9085: PUSH
9086: LD_EXP 1
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: PUSH
9095: LD_INT 50
9097: PUSH
9098: EMPTY
9099: LIST
9100: PUSH
9101: LD_INT 21
9103: PUSH
9104: LD_INT 1
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: LIST
9115: PPUSH
9116: CALL_OW 69
9120: ST_TO_ADDR
// commovetoarea ( zbytek , retr_ar ) ;
9121: LD_LOC 34
9125: PPUSH
9126: LD_INT 20
9128: PPUSH
9129: CALL_OW 113
// changesidefog ( rus , amer ) ;
9133: LD_EXP 1
9137: PPUSH
9138: LD_EXP 2
9142: PPUSH
9143: CALL_OW 343
// setattitude ( rus , amer , att_friend , false ) ;
9147: LD_EXP 1
9151: PPUSH
9152: LD_EXP 2
9156: PPUSH
9157: LD_INT 1
9159: PPUSH
9160: LD_INT 0
9162: PPUSH
9163: CALL_OW 80
// commovetoarea ( filterunitsexceptarea ( targetarea , [ [ f_side , amer ] , [ f_ok ] ] ) , retr_ar_AM ) ;
9167: LD_INT 11
9169: PPUSH
9170: LD_INT 22
9172: PUSH
9173: LD_EXP 2
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: PUSH
9182: LD_INT 50
9184: PUSH
9185: EMPTY
9186: LIST
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: PPUSH
9192: CALL_OW 71
9196: PPUSH
9197: LD_INT 23
9199: PPUSH
9200: CALL_OW 113
// ingame_video = true ;
9204: LD_ADDR_OWVAR 52
9208: PUSH
9209: LD_INT 1
9211: ST_TO_ADDR
// interface_hidden = true ;
9212: LD_ADDR_OWVAR 54
9216: PUSH
9217: LD_INT 1
9219: ST_TO_ADDR
// centeronunits ( zbytek ) ;
9220: LD_LOC 34
9224: PPUSH
9225: CALL_OW 85
// retreat = true ;
9229: LD_ADDR_EXP 34
9233: PUSH
9234: LD_INT 1
9236: ST_TO_ADDR
// end ;
9237: END
// var zbytek ; every 0 0$0.7 trigger retreat do var ii ;
9238: LD_EXP 34
9242: IFFALSE 9490
9244: GO 9246
9246: DISABLE
9247: LD_INT 0
9249: PPUSH
// begin zbytek = filterunitsinarea ( retr_ar , [ [ f_side , rus ] , [ f_alive ] , [ f_or , [ f_type , unit_human ] , [ f_and , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ] ) ;
9250: LD_ADDR_LOC 34
9254: PUSH
9255: LD_INT 20
9257: PPUSH
9258: LD_INT 22
9260: PUSH
9261: LD_EXP 1
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PUSH
9270: LD_INT 51
9272: PUSH
9273: EMPTY
9274: LIST
9275: PUSH
9276: LD_INT 2
9278: PUSH
9279: LD_INT 21
9281: PUSH
9282: LD_INT 1
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PUSH
9289: LD_INT 1
9291: PUSH
9292: LD_INT 21
9294: PUSH
9295: LD_INT 2
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: PUSH
9302: LD_INT 59
9304: PUSH
9305: EMPTY
9306: LIST
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: LIST
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: LIST
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: LIST
9322: PPUSH
9323: CALL_OW 70
9327: ST_TO_ADDR
// for ii in zbytek do
9328: LD_ADDR_VAR 0 1
9332: PUSH
9333: LD_LOC 34
9337: PUSH
9338: FOR_IN
9339: IFFALSE 9352
// destroyunit ( ii ) ;
9341: LD_VAR 0 1
9345: PPUSH
9346: CALL_OW 65
9350: GO 9338
9352: POP
9353: POP
// zbytek = filterallunits ( [ [ f_side , rus ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_and , [ f_type , unit_vehicle ] , [ f_occupied ] ] ] ] ) ;
9354: LD_ADDR_LOC 34
9358: PUSH
9359: LD_INT 22
9361: PUSH
9362: LD_EXP 1
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PUSH
9371: LD_INT 50
9373: PUSH
9374: EMPTY
9375: LIST
9376: PUSH
9377: LD_INT 2
9379: PUSH
9380: LD_INT 21
9382: PUSH
9383: LD_INT 1
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PUSH
9390: LD_INT 1
9392: PUSH
9393: LD_INT 21
9395: PUSH
9396: LD_INT 2
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: PUSH
9403: LD_INT 59
9405: PUSH
9406: EMPTY
9407: LIST
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: LIST
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: LIST
9423: PPUSH
9424: CALL_OW 69
9428: ST_TO_ADDR
// if zbytek then
9429: LD_LOC 34
9433: IFFALSE 9474
// begin enable ;
9435: ENABLE
// centeronunits ( zbytek ) ;
9436: LD_LOC 34
9440: PPUSH
9441: CALL_OW 85
// commovetoarea ( zbytek , retr_ar ) ;
9445: LD_LOC 34
9449: PPUSH
9450: LD_INT 20
9452: PPUSH
9453: CALL_OW 113
// addcommovexy ( zbytek , 126 , 98 ) ;
9457: LD_LOC 34
9461: PPUSH
9462: LD_INT 126
9464: PPUSH
9465: LD_INT 98
9467: PPUSH
9468: CALL_OW 171
// end else
9472: GO 9490
// begin ingame_video = false ;
9474: LD_ADDR_OWVAR 52
9478: PUSH
9479: LD_INT 0
9481: ST_TO_ADDR
// interface_hidden = false ;
9482: LD_ADDR_OWVAR 54
9486: PUSH
9487: LD_INT 0
9489: ST_TO_ADDR
// end ; end ;
9490: PPOPN 1
9492: END
// var qres ; every 0 0$10 + 20 20$0 do
9493: GO 9495
9495: DISABLE
// begin dialogueon ;
9496: CALL_OW 6
// sayradio ( rh , D4-Har-1 ) ;
9500: LD_EXP 4
9504: PPUSH
9505: LD_STRING D4-Har-1
9507: PPUSH
9508: CALL_OW 94
// say ( john , D4-JMM-1 ) ;
9512: LD_LOC 1
9516: PPUSH
9517: LD_STRING D4-JMM-1
9519: PPUSH
9520: CALL_OW 88
// sayradio ( rh , D4-Har-2 ) ;
9524: LD_EXP 4
9528: PPUSH
9529: LD_STRING D4-Har-2
9531: PPUSH
9532: CALL_OW 94
// qres = query ( Q1 ) ;
9536: LD_ADDR_LOC 35
9540: PUSH
9541: LD_STRING Q1
9543: PPUSH
9544: CALL_OW 97
9548: ST_TO_ADDR
// case qres of 1 :
9549: LD_LOC 35
9553: PUSH
9554: LD_INT 1
9556: DOUBLE
9557: EQUAL
9558: IFTRUE 9562
9560: GO 9589
9562: POP
// begin say ( john , D5-JMM-1 ) ;
9563: LD_LOC 1
9567: PPUSH
9568: LD_STRING D5-JMM-1
9570: PPUSH
9571: CALL_OW 88
// sayradio ( rh , D5-Har-1 ) ;
9575: LD_EXP 4
9579: PPUSH
9580: LD_STRING D5-Har-1
9582: PPUSH
9583: CALL_OW 94
// end ; 2 :
9587: GO 9660
9589: LD_INT 2
9591: DOUBLE
9592: EQUAL
9593: IFTRUE 9597
9595: GO 9624
9597: POP
// begin say ( john , D5-JMM-2 ) ;
9598: LD_LOC 1
9602: PPUSH
9603: LD_STRING D5-JMM-2
9605: PPUSH
9606: CALL_OW 88
// sayradio ( rh , D5-Har-2 ) ;
9610: LD_EXP 4
9614: PPUSH
9615: LD_STRING D5-Har-2
9617: PPUSH
9618: CALL_OW 94
// end ; 3 :
9622: GO 9660
9624: LD_INT 3
9626: DOUBLE
9627: EQUAL
9628: IFTRUE 9632
9630: GO 9659
9632: POP
// begin say ( john , D5-JMM-3 ) ;
9633: LD_LOC 1
9637: PPUSH
9638: LD_STRING D5-JMM-3
9640: PPUSH
9641: CALL_OW 88
// sayradio ( rh , D5-Har-3 ) ;
9645: LD_EXP 4
9649: PPUSH
9650: LD_STRING D5-Har-3
9652: PPUSH
9653: CALL_OW 94
// end ; end ;
9657: GO 9660
9659: POP
// dialogueoff ;
9660: CALL_OW 7
// end ;
9664: END
// every 0 0$10 + 26 26$0 do
9665: GO 9667
9667: DISABLE
// begin uc_nation = nation_american ;
9668: LD_ADDR_OWVAR 21
9672: PUSH
9673: LD_INT 1
9675: ST_TO_ADDR
// uc_side = amer ;
9676: LD_ADDR_OWVAR 20
9680: PUSH
9681: LD_EXP 2
9685: ST_TO_ADDR
// preparemechanic ( sex_male , 3 ) ;
9686: LD_INT 1
9688: PPUSH
9689: LD_INT 3
9691: PPUSH
9692: CALL_OW 383
// amhsold8 = createhuman ;
9696: LD_ADDR_EXP 9
9700: PUSH
9701: CALL_OW 44
9705: ST_TO_ADDR
// placeunitarea ( amhsold8 , reinf1 , false ) ;
9706: LD_EXP 9
9710: PPUSH
9711: LD_INT 5
9713: PPUSH
9714: LD_INT 0
9716: PPUSH
9717: CALL_OW 49
// preparesoldier ( sex_male , 3 ) ;
9721: LD_INT 1
9723: PPUSH
9724: LD_INT 3
9726: PPUSH
9727: CALL_OW 381
// amhsold9 = createhuman ;
9731: LD_ADDR_EXP 10
9735: PUSH
9736: CALL_OW 44
9740: ST_TO_ADDR
// placeunitarea ( amhsold9 , reinf1 , false ) ;
9741: LD_EXP 10
9745: PPUSH
9746: LD_INT 5
9748: PPUSH
9749: LD_INT 0
9751: PPUSH
9752: CALL_OW 49
// preparesoldier ( sex_male , 3 ) ;
9756: LD_INT 1
9758: PPUSH
9759: LD_INT 3
9761: PPUSH
9762: CALL_OW 381
// amhsolda = createhuman ;
9766: LD_ADDR_EXP 11
9770: PUSH
9771: CALL_OW 44
9775: ST_TO_ADDR
// placeunitarea ( amhsolda , reinf1 , false ) ;
9776: LD_EXP 11
9780: PPUSH
9781: LD_INT 5
9783: PPUSH
9784: LD_INT 0
9786: PPUSH
9787: CALL_OW 49
// case qres of 1 :
9791: LD_LOC 35
9795: PUSH
9796: LD_INT 1
9798: DOUBLE
9799: EQUAL
9800: IFTRUE 9804
9802: GO 9845
9804: POP
// begin centeronunits ( [ amhsold8 , amhsold9 , amhsolda ] ) ;
9805: LD_EXP 9
9809: PUSH
9810: LD_EXP 10
9814: PUSH
9815: LD_EXP 11
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: LIST
9824: PPUSH
9825: CALL_OW 85
// chciplo = chciplo + 3 ;
9829: LD_ADDR_LOC 20
9833: PUSH
9834: LD_LOC 20
9838: PUSH
9839: LD_INT 3
9841: PLUS
9842: ST_TO_ADDR
// end ; 2 :
9843: GO 10067
9845: LD_INT 2
9847: DOUBLE
9848: EQUAL
9849: IFTRUE 9853
9851: GO 9935
9853: POP
// begin preparesoldier ( sex_female , 4 ) ;
9854: LD_INT 2
9856: PPUSH
9857: LD_INT 4
9859: PPUSH
9860: CALL_OW 381
// amhsoldb = createhuman ;
9864: LD_ADDR_EXP 12
9868: PUSH
9869: CALL_OW 44
9873: ST_TO_ADDR
// placeunitarea ( amhsoldb , reinf1 , false ) ;
9874: LD_EXP 12
9878: PPUSH
9879: LD_INT 5
9881: PPUSH
9882: LD_INT 0
9884: PPUSH
9885: CALL_OW 49
// chciplo = chciplo + 4 ;
9889: LD_ADDR_LOC 20
9893: PUSH
9894: LD_LOC 20
9898: PUSH
9899: LD_INT 4
9901: PLUS
9902: ST_TO_ADDR
// centeronunits ( [ amhsold8 , amhsold9 , amhsolda , amhsoldb ] ) ;
9903: LD_EXP 9
9907: PUSH
9908: LD_EXP 10
9912: PUSH
9913: LD_EXP 11
9917: PUSH
9918: LD_EXP 12
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: PPUSH
9929: CALL_OW 85
// end ; 3 :
9933: GO 10067
9935: LD_INT 3
9937: DOUBLE
9938: EQUAL
9939: IFTRUE 9943
9941: GO 10066
9943: POP
// begin preparesoldier ( sex_female , 3 ) ;
9944: LD_INT 2
9946: PPUSH
9947: LD_INT 3
9949: PPUSH
9950: CALL_OW 381
// amhsoldb = createhuman ;
9954: LD_ADDR_EXP 12
9958: PUSH
9959: CALL_OW 44
9963: ST_TO_ADDR
// placeunitarea ( amhsoldb , reinf1 , false ) ;
9964: LD_EXP 12
9968: PPUSH
9969: LD_INT 5
9971: PPUSH
9972: LD_INT 0
9974: PPUSH
9975: CALL_OW 49
// preparesoldier ( sex_male , 4 ) ;
9979: LD_INT 1
9981: PPUSH
9982: LD_INT 4
9984: PPUSH
9985: CALL_OW 381
// amhsoldc = createhuman ;
9989: LD_ADDR_EXP 13
9993: PUSH
9994: CALL_OW 44
9998: ST_TO_ADDR
// placeunitarea ( amhsoldc , reinf1 , false ) ;
9999: LD_EXP 13
10003: PPUSH
10004: LD_INT 5
10006: PPUSH
10007: LD_INT 0
10009: PPUSH
10010: CALL_OW 49
// chciplo = chciplo + 5 ;
10014: LD_ADDR_LOC 20
10018: PUSH
10019: LD_LOC 20
10023: PUSH
10024: LD_INT 5
10026: PLUS
10027: ST_TO_ADDR
// centeronunits ( [ amhsold8 , amhsold9 , amhsolda , amhsoldb , amhsoldc ] ) ;
10028: LD_EXP 9
10032: PUSH
10033: LD_EXP 10
10037: PUSH
10038: LD_EXP 11
10042: PUSH
10043: LD_EXP 12
10047: PUSH
10048: LD_EXP 13
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: PPUSH
10060: CALL_OW 85
// end ; end ;
10064: GO 10067
10066: POP
// dialogueon ;
10067: CALL_OW 6
// sayradio ( amhsold8 , D6-Sol3-1 ) ;
10071: LD_EXP 9
10075: PPUSH
10076: LD_STRING D6-Sol3-1
10078: PPUSH
10079: CALL_OW 94
// dialogueoff ;
10083: CALL_OW 7
// end ;
10087: END
// var utoci , cas , utoci_ , utocil ; every 0 0$10 + 30 30$30 do
10088: GO 10090
10090: DISABLE
// begin dialogueon ;
10091: CALL_OW 6
// sayradio ( rh , D7-Har-1 ) ;
10095: LD_EXP 4
10099: PPUSH
10100: LD_STRING D7-Har-1
10102: PPUSH
10103: CALL_OW 94
// wait ( 0 0$2 ) ;
10107: LD_INT 70
10109: PPUSH
10110: CALL_OW 67
// changemissionobjectives ( M2 ) ;
10114: LD_STRING M2
10116: PPUSH
10117: CALL_OW 337
// dialogueoff ;
10121: CALL_OW 7
// utoci = false ;
10125: LD_ADDR_LOC 36
10129: PUSH
10130: LD_INT 0
10132: ST_TO_ADDR
// utocil = 0 ;
10133: LD_ADDR_LOC 39
10137: PUSH
10138: LD_INT 0
10140: ST_TO_ADDR
// utoci_ = 0 ;
10141: LD_ADDR_LOC 38
10145: PUSH
10146: LD_INT 0
10148: ST_TO_ADDR
// cas = 0 ;
10149: LD_ADDR_LOC 37
10153: PUSH
10154: LD_INT 0
10156: ST_TO_ADDR
// enable ( 02 ) ;
10157: LD_INT 2
10159: ENABLE_MARKED
// end ;
10160: END
// every 0 0$1 + 3 3$0 marked 02 do
10161: GO 10163
10163: DISABLE
// begin cas = cas + 1 ;
10164: LD_ADDR_LOC 37
10168: PUSH
10169: LD_LOC 37
10173: PUSH
10174: LD_INT 1
10176: PLUS
10177: ST_TO_ADDR
// if inbattle ( amer ) then
10178: LD_EXP 2
10182: PPUSH
10183: CALL_OW 463
10187: IFFALSE 10203
// utoci_ = utoci_ + 1 ;
10189: LD_ADDR_LOC 38
10193: PUSH
10194: LD_LOC 38
10198: PUSH
10199: LD_INT 1
10201: PLUS
10202: ST_TO_ADDR
// if debug then
10203: LD_EXP 42
10207: IFFALSE 10236
// debug_strings = [ utoci_: & utoci_ , cas: & cas ] ;
10209: LD_ADDR_OWVAR 48
10213: PUSH
10214: LD_STRING utoci_:
10216: PUSH
10217: LD_LOC 38
10221: STR
10222: PUSH
10223: LD_STRING cas:
10225: PUSH
10226: LD_LOC 37
10230: STR
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: ST_TO_ADDR
// if cas > 119 then
10236: LD_LOC 37
10240: PUSH
10241: LD_INT 119
10243: GREATER
10244: IFFALSE 10305
// begin cas = 0 ;
10246: LD_ADDR_LOC 37
10250: PUSH
10251: LD_INT 0
10253: ST_TO_ADDR
// if utoci_ > 24 then
10254: LD_LOC 38
10258: PUSH
10259: LD_INT 24
10261: GREATER
10262: IFFALSE 10297
// begin utoci = true ;
10264: LD_ADDR_LOC 36
10268: PUSH
10269: LD_INT 1
10271: ST_TO_ADDR
// if not utocil then
10272: LD_LOC 39
10276: NOT
10277: IFFALSE 10287
// utocil = true ;
10279: LD_ADDR_LOC 39
10283: PUSH
10284: LD_INT 1
10286: ST_TO_ADDR
// utoci_ = 0 ;
10287: LD_ADDR_LOC 38
10291: PUSH
10292: LD_INT 0
10294: ST_TO_ADDR
// end else
10295: GO 10305
// utoci = false ;
10297: LD_ADDR_LOC 36
10301: PUSH
10302: LD_INT 0
10304: ST_TO_ADDR
// end ; enable ;
10305: ENABLE
// end ;
10306: END
// every 0 0$10 + 34 34$30 do var tmp , tmp1 , tmp2 ;
10307: GO 10309
10309: DISABLE
10310: LD_INT 0
10312: PPUSH
10313: PPUSH
10314: PPUSH
// begin case difficulty of 3 :
10315: LD_OWVAR 67
10319: PUSH
10320: LD_INT 3
10322: DOUBLE
10323: EQUAL
10324: IFTRUE 10328
10326: GO 10338
10328: POP
// wait ( 0 0$1 ) ; 2 :
10329: LD_INT 35
10331: PPUSH
10332: CALL_OW 67
10336: GO 10375
10338: LD_INT 2
10340: DOUBLE
10341: EQUAL
10342: IFTRUE 10346
10344: GO 10356
10346: POP
// wait ( 2 2$0 ) ; 1 :
10347: LD_INT 4200
10349: PPUSH
10350: CALL_OW 67
10354: GO 10375
10356: LD_INT 1
10358: DOUBLE
10359: EQUAL
10360: IFTRUE 10364
10362: GO 10374
10364: POP
// wait ( 6 6$0 ) ; end ;
10365: LD_INT 12600
10367: PPUSH
10368: CALL_OW 67
10372: GO 10375
10374: POP
// while true do
10375: LD_INT 1
10377: IFFALSE 10437
// if utoci then
10379: LD_LOC 36
10383: IFFALSE 10394
// wait ( 2 2$0 ) else
10385: LD_INT 4200
10387: PPUSH
10388: CALL_OW 67
10392: GO 10435
// if utoci_ > 0 then
10394: LD_LOC 38
10398: PUSH
10399: LD_INT 0
10401: GREATER
10402: IFFALSE 10433
// if ( ( cas / utoci_ ) <= 6 ) then
10404: LD_LOC 37
10408: PUSH
10409: LD_LOC 38
10413: DIVREAL
10414: PUSH
10415: LD_INT 6
10417: LESSEQUAL
10418: IFFALSE 10429
// wait ( 2 2$0 ) else
10420: LD_INT 4200
10422: PPUSH
10423: CALL_OW 67
10427: GO 10431
// break else
10429: GO 10437
10431: GO 10435
// break ;
10433: GO 10437
10435: GO 10375
// tmp = filterunitsinarea ( rubase0 , [ [ f_side , rus ] ] ) ;
10437: LD_ADDR_VAR 0 1
10441: PUSH
10442: LD_INT 1
10444: PPUSH
10445: LD_INT 22
10447: PUSH
10448: LD_EXP 1
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: PUSH
10457: EMPTY
10458: LIST
10459: PPUSH
10460: CALL_OW 70
10464: ST_TO_ADDR
// tmp2 = [ ] ;
10465: LD_ADDR_VAR 0 3
10469: PUSH
10470: EMPTY
10471: ST_TO_ADDR
// for tmp1 in tmp do
10472: LD_ADDR_VAR 0 2
10476: PUSH
10477: LD_VAR 0 1
10481: PUSH
10482: FOR_IN
10483: IFFALSE 10566
// case gettype ( tmp1 ) of unit_human :
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 247
10494: PUSH
10495: LD_INT 1
10497: DOUBLE
10498: EQUAL
10499: IFTRUE 10503
10501: GO 10525
10503: POP
// tmp2 = tmp2 ^ [ tmp1 ] ; unit_building , unit_vehicle :
10504: LD_ADDR_VAR 0 3
10508: PUSH
10509: LD_VAR 0 3
10513: PUSH
10514: LD_VAR 0 2
10518: PUSH
10519: EMPTY
10520: LIST
10521: ADD
10522: ST_TO_ADDR
10523: GO 10564
10525: LD_INT 3
10527: DOUBLE
10528: EQUAL
10529: IFTRUE 10539
10531: LD_INT 2
10533: DOUBLE
10534: EQUAL
10535: IFTRUE 10539
10537: GO 10563
10539: POP
// tmp2 = tmp2 ^ unitsinside ( tmp1 ) ; end ;
10540: LD_ADDR_VAR 0 3
10544: PUSH
10545: LD_VAR 0 3
10549: PUSH
10550: LD_VAR 0 2
10554: PPUSH
10555: CALL_OW 313
10559: ADD
10560: ST_TO_ADDR
10561: GO 10564
10563: POP
10564: GO 10482
10566: POP
10567: POP
// tmp2 = tmp2 diff [ 0 ] ;
10568: LD_ADDR_VAR 0 3
10572: PUSH
10573: LD_VAR 0 3
10577: PUSH
10578: LD_INT 0
10580: PUSH
10581: EMPTY
10582: LIST
10583: DIFF
10584: ST_TO_ADDR
// if tmp2 > 5 then
10585: LD_VAR 0 3
10589: PUSH
10590: LD_INT 5
10592: GREATER
10593: IFFALSE 10630
// begin dialogueon ;
10595: CALL_OW 6
// sayradio ( rh , D7a-Har-1 ) ;
10599: LD_EXP 4
10603: PPUSH
10604: LD_STRING D7a-Har-1
10606: PPUSH
10607: CALL_OW 94
// dialogueoff ;
10611: CALL_OW 7
// changemissionobjectives ( M2a ) ;
10615: LD_STRING M2a
10617: PPUSH
10618: CALL_OW 337
// flaka_se = true ;
10622: LD_ADDR_LOC 19
10626: PUSH
10627: LD_INT 1
10629: ST_TO_ADDR
// end ; end ;
10630: PPOPN 3
10632: END
// var pom8 , pom8_ ; every 0 0$10 + 40 40$0 trigger flaka_se do
10633: LD_LOC 19
10637: IFFALSE 10977
10639: GO 10641
10641: DISABLE
// begin case difficulty of 3 :
10642: LD_OWVAR 67
10646: PUSH
10647: LD_INT 3
10649: DOUBLE
10650: EQUAL
10651: IFTRUE 10655
10653: GO 10665
10655: POP
// wait ( 0 0$1 ) ; 2 :
10656: LD_INT 35
10658: PPUSH
10659: CALL_OW 67
10663: GO 10702
10665: LD_INT 2
10667: DOUBLE
10668: EQUAL
10669: IFTRUE 10673
10671: GO 10683
10673: POP
// wait ( 3 3$0 ) ; 1 :
10674: LD_INT 6300
10676: PPUSH
10677: CALL_OW 67
10681: GO 10702
10683: LD_INT 1
10685: DOUBLE
10686: EQUAL
10687: IFTRUE 10691
10689: GO 10701
10691: POP
// wait ( 9 9$0 ) ; end ;
10692: LD_INT 18900
10694: PPUSH
10695: CALL_OW 67
10699: GO 10702
10701: POP
// if not filterunitsinarea ( rubase0 , [ [ f_side , amer ] , [ f_alive ] ] ) then
10702: LD_INT 1
10704: PPUSH
10705: LD_INT 22
10707: PUSH
10708: LD_EXP 2
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: LD_INT 51
10719: PUSH
10720: EMPTY
10721: LIST
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: PPUSH
10727: CALL_OW 70
10731: NOT
10732: IFFALSE 10977
// begin dialogueon ;
10734: CALL_OW 6
// if isok ( lucyd ) then
10738: LD_LOC 6
10742: PPUSH
10743: CALL_OW 302
10747: IFFALSE 10763
// sayradio ( rh , D8-Har-1 ) else
10749: LD_EXP 4
10753: PPUSH
10754: LD_STRING D8-Har-1
10756: PPUSH
10757: CALL_OW 94
10761: GO 10775
// sayradio ( rh , D8-Har-1a ) ;
10763: LD_EXP 4
10767: PPUSH
10768: LD_STRING D8-Har-1a
10770: PPUSH
10771: CALL_OW 94
// dialogueoff ;
10775: CALL_OW 7
// pom8 = unitfilter ( filterallunits ( [ [ f_side , amer ] ] ) , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) diff [ john , isinunit ( john ) ] ;
10779: LD_ADDR_LOC 40
10783: PUSH
10784: LD_INT 22
10786: PUSH
10787: LD_EXP 2
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PUSH
10796: EMPTY
10797: LIST
10798: PPUSH
10799: CALL_OW 69
10803: PPUSH
10804: LD_INT 2
10806: PUSH
10807: LD_INT 21
10809: PUSH
10810: LD_INT 1
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PUSH
10817: LD_INT 21
10819: PUSH
10820: LD_INT 2
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: LIST
10831: PPUSH
10832: CALL_OW 72
10836: PUSH
10837: LD_LOC 1
10841: PUSH
10842: LD_LOC 1
10846: PPUSH
10847: CALL_OW 310
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: DIFF
10856: ST_TO_ADDR
// setattitude ( amer , amer2 , att_neutral , true ) ;
10857: LD_EXP 2
10861: PPUSH
10862: LD_EXP 3
10866: PPUSH
10867: LD_INT 0
10869: PPUSH
10870: LD_INT 1
10872: PPUSH
10873: CALL_OW 80
// setside ( pom8 , amer2 ) ;
10877: LD_LOC 40
10881: PPUSH
10882: LD_EXP 3
10886: PPUSH
10887: CALL_OW 235
// setsidebase ( getbase ( ambdept0 ) , amer2 ) ;
10891: LD_INT 4
10893: PPUSH
10894: CALL_OW 274
10898: PPUSH
10899: LD_EXP 3
10903: PPUSH
10904: CALL_OW 236
// changesidefog ( amer2 , amer ) ;
10908: LD_EXP 3
10912: PPUSH
10913: LD_EXP 2
10917: PPUSH
10918: CALL_OW 343
// pom8 = unitfilter ( pom8 , [ f_not , [ f_type , unit_building ] ] ) ;
10922: LD_ADDR_LOC 40
10926: PUSH
10927: LD_LOC 40
10931: PPUSH
10932: LD_INT 3
10934: PUSH
10935: LD_INT 21
10937: PUSH
10938: LD_INT 3
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PPUSH
10949: CALL_OW 72
10953: ST_TO_ADDR
// comagressivemove ( pom8 , 88 , 89 ) ;
10954: LD_LOC 40
10958: PPUSH
10959: LD_INT 88
10961: PPUSH
10962: LD_INT 89
10964: PPUSH
10965: CALL_OW 114
// zbaven_veleni = true ;
10969: LD_ADDR_LOC 21
10973: PUSH
10974: LD_INT 1
10976: ST_TO_ADDR
// end ; end ;
10977: END
// on Command ( com ) do var i , j , temp , x , y , typeTask ;
10978: LD_INT 0
10980: PPUSH
10981: PPUSH
10982: PPUSH
10983: PPUSH
10984: PPUSH
10985: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , amer ] , [ f_type , unit_human ] ] ) do
10986: LD_ADDR_VAR 0 2
10990: PUSH
10991: LD_INT 22
10993: PUSH
10994: LD_EXP 2
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: PUSH
11003: LD_INT 21
11005: PUSH
11006: LD_INT 1
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PPUSH
11017: CALL_OW 69
11021: PUSH
11022: FOR_IN
11023: IFFALSE 11229
// if GetTaskList ( i ) > 0 then
11025: LD_VAR 0 2
11029: PPUSH
11030: CALL_OW 437
11034: PUSH
11035: LD_INT 0
11037: GREATER
11038: IFFALSE 11227
// for j = 1 to GetTaskList ( i ) do
11040: LD_ADDR_VAR 0 3
11044: PUSH
11045: DOUBLE
11046: LD_INT 1
11048: DEC
11049: ST_TO_ADDR
11050: LD_VAR 0 2
11054: PPUSH
11055: CALL_OW 437
11059: PUSH
11060: FOR_TO
11061: IFFALSE 11225
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
11063: LD_ADDR_VAR 0 4
11067: PUSH
11068: LD_VAR 0 2
11072: PPUSH
11073: CALL_OW 437
11077: PUSH
11078: LD_VAR 0 3
11082: ARRAY
11083: PUSH
11084: LD_INT 4
11086: ARRAY
11087: ST_TO_ADDR
// x = GetTaskList ( i ) [ j ] [ 2 ] ;
11088: LD_ADDR_VAR 0 5
11092: PUSH
11093: LD_VAR 0 2
11097: PPUSH
11098: CALL_OW 437
11102: PUSH
11103: LD_VAR 0 3
11107: ARRAY
11108: PUSH
11109: LD_INT 2
11111: ARRAY
11112: ST_TO_ADDR
// y = GetTaskList ( i ) [ j ] [ 3 ] ;
11113: LD_ADDR_VAR 0 6
11117: PUSH
11118: LD_VAR 0 2
11122: PPUSH
11123: CALL_OW 437
11127: PUSH
11128: LD_VAR 0 3
11132: ARRAY
11133: PUSH
11134: LD_INT 3
11136: ARRAY
11137: ST_TO_ADDR
// typeTask = GetTaskList ( i ) [ j ] [ 1 ] ;
11138: LD_ADDR_VAR 0 7
11142: PUSH
11143: LD_VAR 0 2
11147: PPUSH
11148: CALL_OW 437
11152: PUSH
11153: LD_VAR 0 3
11157: ARRAY
11158: PUSH
11159: LD_INT 1
11161: ARRAY
11162: ST_TO_ADDR
// if x > 0 and y > 0 and typeTask = B and InArea ( x , y , BlockBuildArea ) then
11163: LD_VAR 0 5
11167: PUSH
11168: LD_INT 0
11170: GREATER
11171: PUSH
11172: LD_VAR 0 6
11176: PUSH
11177: LD_INT 0
11179: GREATER
11180: AND
11181: PUSH
11182: LD_VAR 0 7
11186: PUSH
11187: LD_STRING B
11189: EQUAL
11190: AND
11191: PUSH
11192: LD_VAR 0 5
11196: PPUSH
11197: LD_VAR 0 6
11201: PPUSH
11202: LD_INT 22
11204: PPUSH
11205: CALL_OW 309
11209: AND
11210: IFFALSE 11223
// SetTaskList ( i , [ ] ) ;
11212: LD_VAR 0 2
11216: PPUSH
11217: EMPTY
11218: PPUSH
11219: CALL_OW 446
// end ;
11223: GO 11060
11225: POP
11226: POP
11227: GO 11022
11229: POP
11230: POP
// end ;
11231: PPOPN 7
11233: END
// function return_am ; var pom ; begin
11234: LD_INT 0
11236: PPUSH
11237: PPUSH
// pom = FilterUnitsInArea ( retr_ar , [ [ f_side , amer ] ] ) ;
11238: LD_ADDR_VAR 0 2
11242: PUSH
11243: LD_INT 20
11245: PPUSH
11246: LD_INT 22
11248: PUSH
11249: LD_EXP 2
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: EMPTY
11259: LIST
11260: PPUSH
11261: CALL_OW 70
11265: ST_TO_ADDR
// ComMoveToArea ( pom , retr_ar_AM ) ;
11266: LD_VAR 0 2
11270: PPUSH
11271: LD_INT 23
11273: PPUSH
11274: CALL_OW 113
// end ;
11278: LD_VAR 0 1
11282: RET
// every 0 0$1 do var pom ;
11283: GO 11285
11285: DISABLE
11286: LD_INT 0
11288: PPUSH
// begin pom = FilterUnitsInArea ( retr_ar , [ [ f_side , amer ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
11289: LD_ADDR_VAR 0 1
11293: PUSH
11294: LD_INT 20
11296: PPUSH
11297: LD_INT 22
11299: PUSH
11300: LD_EXP 2
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PUSH
11309: LD_INT 2
11311: PUSH
11312: LD_INT 21
11314: PUSH
11315: LD_INT 2
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: PUSH
11322: LD_INT 21
11324: PUSH
11325: LD_INT 1
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: LIST
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PPUSH
11341: CALL_OW 70
11345: ST_TO_ADDR
// if pom > 0 then
11346: LD_VAR 0 1
11350: PUSH
11351: LD_INT 0
11353: GREATER
11354: IFFALSE 11360
// begin return_am ;
11356: CALL 11234 0 0
// end ; enable ;
11360: ENABLE
// end ; end_of_file
11361: PPOPN 1
11363: END
// export ruv3 , ruhsold8 , ruhsold9 , ruhmech4 , ruhsolda , ruhsoldb , ruhsoldc , ruhsoldd , ruhsolde , ruhsoldf , ruhsoldg , ruhsoldh , ruhsoldi ; export vracet_se ; export ruhmech6 , ruv5 , ruhmech7 , ruv6 , ruhsoldm , ruhsoldn ; var pom , enemy ; function enemies_rb1 ; begin
11364: LD_INT 0
11366: PPUSH
// enemy = FilterUnitsInArea ( rubase1rng , [ [ f_side , amer ] , [ f_alive ] ] ) ;
11367: LD_ADDR_LOC 43
11371: PUSH
11372: LD_INT 3
11374: PPUSH
11375: LD_INT 22
11377: PUSH
11378: LD_EXP 2
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PUSH
11387: LD_INT 51
11389: PUSH
11390: EMPTY
11391: LIST
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PPUSH
11397: CALL_OW 70
11401: ST_TO_ADDR
// result = enemy ;
11402: LD_ADDR_VAR 0 1
11406: PUSH
11407: LD_LOC 43
11411: ST_TO_ADDR
// if enemy then
11412: LD_LOC 43
11416: IFFALSE 11462
// begin pom = unitfilter ( enemy , [ [ f_type , unit_vehicle ] ] ) ;
11418: LD_ADDR_LOC 42
11422: PUSH
11423: LD_LOC 43
11427: PPUSH
11428: LD_INT 21
11430: PUSH
11431: LD_INT 2
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: PUSH
11438: EMPTY
11439: LIST
11440: PPUSH
11441: CALL_OW 72
11445: ST_TO_ADDR
// if pom then
11446: LD_LOC 42
11450: IFFALSE 11462
// enemy = pom ;
11452: LD_ADDR_LOC 43
11456: PUSH
11457: LD_LOC 42
11461: ST_TO_ADDR
// end ; end ;
11462: LD_VAR 0 1
11466: RET
// every 0 0$1 + 0 0$20 trigger not rubase1_gone and not attacking and enemies_rb1 do
11467: LD_EXP 21
11471: NOT
11472: PUSH
11473: LD_EXP 18
11477: NOT
11478: AND
11479: PUSH
11480: CALL 11364 0 0
11484: AND
11485: IFFALSE 11567
11487: GO 11489
11489: DISABLE
// begin comfree ( rusove2 ) ;
11490: LD_EXP 17
11494: PPUSH
11495: CALL_OW 139
// comagressivemove ( rusove2 , getx ( enemy [ 1 ] ) , gety ( enemy [ 1 ] ) ) ;
11499: LD_EXP 17
11503: PPUSH
11504: LD_LOC 43
11508: PUSH
11509: LD_INT 1
11511: ARRAY
11512: PPUSH
11513: CALL_OW 250
11517: PPUSH
11518: LD_LOC 43
11522: PUSH
11523: LD_INT 1
11525: ARRAY
11526: PPUSH
11527: CALL_OW 251
11531: PPUSH
11532: CALL_OW 114
// if not isinunit ( ruhengi1 ) then
11536: LD_INT 18
11538: PPUSH
11539: CALL_OW 310
11543: NOT
11544: IFFALSE 11558
// commoveunit ( ruhengi1 , rubdepo0 ) ;
11546: LD_INT 18
11548: PPUSH
11549: LD_EXP 14
11553: PPUSH
11554: CALL_OW 112
// attacking = true ;
11558: LD_ADDR_EXP 18
11562: PUSH
11563: LD_INT 1
11565: ST_TO_ADDR
// enable ;
11566: ENABLE
// end ;
11567: END
// var rusaci_mimo_ ; function rusaci_mimo ; begin
11568: LD_INT 0
11570: PPUSH
// rusaci_mimo_ = rusove2 diff filterunitsinarea ( RuBase1rng , [ [ f_side , rus ] ] ) ;
11571: LD_ADDR_LOC 44
11575: PUSH
11576: LD_EXP 17
11580: PUSH
11581: LD_INT 3
11583: PPUSH
11584: LD_INT 22
11586: PUSH
11587: LD_EXP 1
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: PUSH
11596: EMPTY
11597: LIST
11598: PPUSH
11599: CALL_OW 70
11603: DIFF
11604: ST_TO_ADDR
// result = rusaci_mimo_ ;
11605: LD_ADDR_VAR 0 1
11609: PUSH
11610: LD_LOC 44
11614: ST_TO_ADDR
// end ;
11615: LD_VAR 0 1
11619: RET
// every 0 0$1.3 + 0 0$20.7 trigger attacking and rusaci_mimo do
11620: LD_EXP 18
11624: PUSH
11625: CALL 11568 0 0
11629: AND
11630: IFFALSE 11650
11632: GO 11634
11634: DISABLE
// begin comagressivemove ( rusove2 , 44 , 53 ) ;
11635: LD_EXP 17
11639: PPUSH
11640: LD_INT 44
11642: PPUSH
11643: LD_INT 53
11645: PPUSH
11646: CALL_OW 114
// end ;
11650: END
// every 0 0$1 + 0 0$20.3 trigger attacking and not FilterUnitsInArea ( rubase1rng , [ [ f_side , amer ] , [ f_alive ] ] ) do
11651: LD_EXP 18
11655: PUSH
11656: LD_INT 3
11658: PPUSH
11659: LD_INT 22
11661: PUSH
11662: LD_EXP 2
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 51
11673: PUSH
11674: EMPTY
11675: LIST
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: PPUSH
11681: CALL_OW 70
11685: NOT
11686: AND
11687: IFFALSE 11726
11689: GO 11691
11691: DISABLE
// begin comhold ( rusove2 ) ;
11692: LD_EXP 17
11696: PPUSH
11697: CALL_OW 140
// comreturn ( rusove2 ) ;
11701: LD_EXP 17
11705: PPUSH
11706: CALL_OW 144
// attacking = false ;
11710: LD_ADDR_EXP 18
11714: PUSH
11715: LD_INT 0
11717: ST_TO_ADDR
// if not rubase1_gone then
11718: LD_EXP 21
11722: NOT
11723: IFFALSE 11726
// enable ;
11725: ENABLE
// end ;
11726: END
// function manage_prebytek ( zaklad ) ; var bz , bzz ; begin
11727: LD_INT 0
11729: PPUSH
11730: PPUSH
11731: PPUSH
// bzz = [ ] ;
11732: LD_ADDR_VAR 0 4
11736: PUSH
11737: EMPTY
11738: ST_TO_ADDR
// for bz in rusove0 do
11739: LD_ADDR_VAR 0 3
11743: PUSH
11744: LD_EXP 32
11748: PUSH
11749: FOR_IN
11750: IFFALSE 11807
// if gettype ( bz ) = unit_vehicle then
11752: LD_VAR 0 3
11756: PPUSH
11757: CALL_OW 247
11761: PUSH
11762: LD_INT 2
11764: EQUAL
11765: IFFALSE 11805
// begin rusove0 = rusove0 diff [ bz ] ;
11767: LD_ADDR_EXP 32
11771: PUSH
11772: LD_EXP 32
11776: PUSH
11777: LD_VAR 0 3
11781: PUSH
11782: EMPTY
11783: LIST
11784: DIFF
11785: ST_TO_ADDR
// bzz = bzz ^ [ bz ] ;
11786: LD_ADDR_VAR 0 4
11790: PUSH
11791: LD_VAR 0 4
11795: PUSH
11796: LD_VAR 0 3
11800: PUSH
11801: EMPTY
11802: LIST
11803: ADD
11804: ST_TO_ADDR
// end ;
11805: GO 11749
11807: POP
11808: POP
// for bz = 1 to ( 0 + bzz ) do
11809: LD_ADDR_VAR 0 3
11813: PUSH
11814: DOUBLE
11815: LD_INT 1
11817: DEC
11818: ST_TO_ADDR
11819: LD_INT 0
11821: PUSH
11822: LD_VAR 0 4
11826: PLUS
11827: PUSH
11828: FOR_TO
11829: IFFALSE 11903
// if bz <= ( mpora - zaklad ) then
11831: LD_VAR 0 3
11835: PUSH
11836: LD_EXP 39
11840: PUSH
11841: LD_VAR 0 1
11845: MINUS
11846: LESSEQUAL
11847: IFFALSE 11876
// rusove0 = rusove0 ^ [ bzz [ bz ] ] else
11849: LD_ADDR_EXP 32
11853: PUSH
11854: LD_EXP 32
11858: PUSH
11859: LD_VAR 0 4
11863: PUSH
11864: LD_VAR 0 3
11868: ARRAY
11869: PUSH
11870: EMPTY
11871: LIST
11872: ADD
11873: ST_TO_ADDR
11874: GO 11901
// prebytek = prebytek ^ [ bzz [ bz ] ] ;
11876: LD_ADDR_EXP 41
11880: PUSH
11881: LD_EXP 41
11885: PUSH
11886: LD_VAR 0 4
11890: PUSH
11891: LD_VAR 0 3
11895: ARRAY
11896: PUSH
11897: EMPTY
11898: LIST
11899: ADD
11900: ST_TO_ADDR
11901: GO 11828
11903: POP
11904: POP
// end ;
11905: LD_VAR 0 2
11909: RET
// var nppp ; every 17 17$0 do
11910: GO 11912
11912: DISABLE
// begin if retreat then
11913: LD_EXP 34
11917: IFFALSE 11921
// exit ;
11919: GO 12866
// disable ( 17 ) ;
11921: LD_INT 17
11923: DISABLE_MARKED
// case difficulty of 1 :
11924: LD_OWVAR 67
11928: PUSH
11929: LD_INT 1
11931: DOUBLE
11932: EQUAL
11933: IFTRUE 11937
11935: GO 11947
11937: POP
// wait ( 1 1$0 ) ; 2 :
11938: LD_INT 2100
11940: PPUSH
11941: CALL_OW 67
11945: GO 11966
11947: LD_INT 2
11949: DOUBLE
11950: EQUAL
11951: IFTRUE 11955
11953: GO 11965
11955: POP
// wait ( 0 0$30 ) ; end ;
11956: LD_INT 1050
11958: PPUSH
11959: CALL_OW 67
11963: GO 11966
11965: POP
// uc_nation = nation_russian ;
11966: LD_ADDR_OWVAR 21
11970: PUSH
11971: LD_INT 3
11973: ST_TO_ADDR
// uc_side = rus ;
11974: LD_ADDR_OWVAR 20
11978: PUSH
11979: LD_EXP 1
11983: ST_TO_ADDR
// case difficulty of 2 :
11984: LD_OWVAR 67
11988: PUSH
11989: LD_INT 2
11991: DOUBLE
11992: EQUAL
11993: IFTRUE 11997
11995: GO 12010
11997: POP
// preparemechanic ( sex_female , 1 ) ; 3 :
11998: LD_INT 2
12000: PPUSH
12001: LD_INT 1
12003: PPUSH
12004: CALL_OW 383
12008: GO 12053
12010: LD_INT 3
12012: DOUBLE
12013: EQUAL
12014: IFTRUE 12018
12016: GO 12031
12018: POP
// preparemechanic ( sex_female , 2 ) ; 1 :
12019: LD_INT 2
12021: PPUSH
12022: LD_INT 2
12024: PPUSH
12025: CALL_OW 383
12029: GO 12053
12031: LD_INT 1
12033: DOUBLE
12034: EQUAL
12035: IFTRUE 12039
12037: GO 12052
12039: POP
// preparemechanic ( sex_female , 0 ) ; end ;
12040: LD_INT 2
12042: PPUSH
12043: LD_INT 0
12045: PPUSH
12046: CALL_OW 383
12050: GO 12053
12052: POP
// ruhmech6 = createhuman ;
12053: LD_ADDR_EXP 59
12057: PUSH
12058: CALL_OW 44
12062: ST_TO_ADDR
// case difficulty of 1 :
12063: LD_OWVAR 67
12067: PUSH
12068: LD_INT 1
12070: DOUBLE
12071: EQUAL
12072: IFTRUE 12076
12074: GO 12095
12076: POP
// begin vc_chassis = ru_medium_wheeled ;
12077: LD_ADDR_OWVAR 37
12081: PUSH
12082: LD_INT 21
12084: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
12085: LD_ADDR_OWVAR 40
12089: PUSH
12090: LD_INT 42
12092: ST_TO_ADDR
// end ; 2 :
12093: GO 12150
12095: LD_INT 2
12097: DOUBLE
12098: EQUAL
12099: IFTRUE 12103
12101: GO 12122
12103: POP
// begin vc_chassis = ru_medium_wheeled ;
12104: LD_ADDR_OWVAR 37
12108: PUSH
12109: LD_INT 21
12111: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
12112: LD_ADDR_OWVAR 40
12116: PUSH
12117: LD_INT 42
12119: ST_TO_ADDR
// end ; 3 :
12120: GO 12150
12122: LD_INT 3
12124: DOUBLE
12125: EQUAL
12126: IFTRUE 12130
12128: GO 12149
12130: POP
// begin vc_chassis = ru_medium_wheeled ;
12131: LD_ADDR_OWVAR 37
12135: PUSH
12136: LD_INT 21
12138: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
12139: LD_ADDR_OWVAR 40
12143: PUSH
12144: LD_INT 43
12146: ST_TO_ADDR
// end ; end ;
12147: GO 12150
12149: POP
// vc_control = control_manual ;
12150: LD_ADDR_OWVAR 38
12154: PUSH
12155: LD_INT 1
12157: ST_TO_ADDR
// vc_engine = engine_combustion ;
12158: LD_ADDR_OWVAR 39
12162: PUSH
12163: LD_INT 1
12165: ST_TO_ADDR
// ruv5 = createvehicle ;
12166: LD_ADDR_EXP 60
12170: PUSH
12171: CALL_OW 45
12175: ST_TO_ADDR
// setdir ( ruv5 , 0 ) ;
12176: LD_EXP 60
12180: PPUSH
12181: LD_INT 0
12183: PPUSH
12184: CALL_OW 233
// placeunitarea ( ruv5 , rusreinf1 , false ) ;
12188: LD_EXP 60
12192: PPUSH
12193: LD_INT 7
12195: PPUSH
12196: LD_INT 0
12198: PPUSH
12199: CALL_OW 49
// placehumaninunit ( ruhmech6 , ruv5 ) ;
12203: LD_EXP 59
12207: PPUSH
12208: LD_EXP 60
12212: PPUSH
12213: CALL_OW 52
// case difficulty of 2 :
12217: LD_OWVAR 67
12221: PUSH
12222: LD_INT 2
12224: DOUBLE
12225: EQUAL
12226: IFTRUE 12230
12228: GO 12243
12230: POP
// preparemechanic ( sex_male , 1 ) ; 3 :
12231: LD_INT 1
12233: PPUSH
12234: LD_INT 1
12236: PPUSH
12237: CALL_OW 383
12241: GO 12286
12243: LD_INT 3
12245: DOUBLE
12246: EQUAL
12247: IFTRUE 12251
12249: GO 12264
12251: POP
// preparemechanic ( sex_male , 2 ) ; 1 :
12252: LD_INT 1
12254: PPUSH
12255: LD_INT 2
12257: PPUSH
12258: CALL_OW 383
12262: GO 12286
12264: LD_INT 1
12266: DOUBLE
12267: EQUAL
12268: IFTRUE 12272
12270: GO 12285
12272: POP
// preparemechanic ( sex_male , 0 ) ; end ;
12273: LD_INT 1
12275: PPUSH
12276: LD_INT 0
12278: PPUSH
12279: CALL_OW 383
12283: GO 12286
12285: POP
// ruhmech7 = createhuman ;
12286: LD_ADDR_EXP 61
12290: PUSH
12291: CALL_OW 44
12295: ST_TO_ADDR
// case difficulty of 1 :
12296: LD_OWVAR 67
12300: PUSH
12301: LD_INT 1
12303: DOUBLE
12304: EQUAL
12305: IFTRUE 12309
12307: GO 12328
12309: POP
// begin vc_chassis = ru_medium_wheeled ;
12310: LD_ADDR_OWVAR 37
12314: PUSH
12315: LD_INT 21
12317: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
12318: LD_ADDR_OWVAR 40
12322: PUSH
12323: LD_INT 42
12325: ST_TO_ADDR
// end ; 2 :
12326: GO 12383
12328: LD_INT 2
12330: DOUBLE
12331: EQUAL
12332: IFTRUE 12336
12334: GO 12355
12336: POP
// begin vc_chassis = ru_medium_wheeled ;
12337: LD_ADDR_OWVAR 37
12341: PUSH
12342: LD_INT 21
12344: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
12345: LD_ADDR_OWVAR 40
12349: PUSH
12350: LD_INT 43
12352: ST_TO_ADDR
// end ; 3 :
12353: GO 12383
12355: LD_INT 3
12357: DOUBLE
12358: EQUAL
12359: IFTRUE 12363
12361: GO 12382
12363: POP
// begin vc_chassis = ru_medium_wheeled ;
12364: LD_ADDR_OWVAR 37
12368: PUSH
12369: LD_INT 21
12371: ST_TO_ADDR
// vc_weapon = ru_gun ;
12372: LD_ADDR_OWVAR 40
12376: PUSH
12377: LD_INT 44
12379: ST_TO_ADDR
// end ; end ;
12380: GO 12383
12382: POP
// vc_control = control_manual ;
12383: LD_ADDR_OWVAR 38
12387: PUSH
12388: LD_INT 1
12390: ST_TO_ADDR
// vc_engine = engine_combustion ;
12391: LD_ADDR_OWVAR 39
12395: PUSH
12396: LD_INT 1
12398: ST_TO_ADDR
// ruv6 = createvehicle ;
12399: LD_ADDR_EXP 62
12403: PUSH
12404: CALL_OW 45
12408: ST_TO_ADDR
// setdir ( ruv6 , 0 ) ;
12409: LD_EXP 62
12413: PPUSH
12414: LD_INT 0
12416: PPUSH
12417: CALL_OW 233
// placeunitarea ( ruv6 , rusreinf1 , false ) ;
12421: LD_EXP 62
12425: PPUSH
12426: LD_INT 7
12428: PPUSH
12429: LD_INT 0
12431: PPUSH
12432: CALL_OW 49
// placehumaninunit ( ruhmech7 , ruv6 ) ;
12436: LD_EXP 61
12440: PPUSH
12441: LD_EXP 62
12445: PPUSH
12446: CALL_OW 52
// comfree ( [ ruv5 , ruv6 ] ) ;
12450: LD_EXP 60
12454: PUSH
12455: LD_EXP 62
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PPUSH
12464: CALL_OW 139
// if filterunitsinarea ( rubase1rng , [ [ f_side , amer ] , [ f_alive ] ] ) then
12468: LD_INT 3
12470: PPUSH
12471: LD_INT 22
12473: PUSH
12474: LD_EXP 2
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: PUSH
12483: LD_INT 51
12485: PUSH
12486: EMPTY
12487: LIST
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PPUSH
12493: CALL_OW 70
12497: IFFALSE 12525
// comagressivemove ( [ ruv5 , ruv6 ] , 56 , 61 ) else
12499: LD_EXP 60
12503: PUSH
12504: LD_EXP 62
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: PPUSH
12513: LD_INT 56
12515: PPUSH
12516: LD_INT 61
12518: PPUSH
12519: CALL_OW 114
12523: GO 12549
// comagressivemove ( [ ruv5 , ruv6 ] , 47 , 45 ) ;
12525: LD_EXP 60
12529: PUSH
12530: LD_EXP 62
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PPUSH
12539: LD_INT 47
12541: PPUSH
12542: LD_INT 45
12544: PPUSH
12545: CALL_OW 114
// nppp = unitfilter ( [ ruhsoldj , ruhsoldk , ruhsoldl ] , [ [ f_ok ] ] ) ;
12549: LD_ADDR_LOC 45
12553: PUSH
12554: LD_EXP 25
12558: PUSH
12559: LD_EXP 26
12563: PUSH
12564: LD_EXP 27
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: LIST
12573: PPUSH
12574: LD_INT 50
12576: PUSH
12577: EMPTY
12578: LIST
12579: PUSH
12580: EMPTY
12581: LIST
12582: PPUSH
12583: CALL_OW 72
12587: ST_TO_ADDR
// case difficulty of 1 :
12588: LD_OWVAR 67
12592: PUSH
12593: LD_INT 1
12595: DOUBLE
12596: EQUAL
12597: IFTRUE 12601
12599: GO 12614
12601: POP
// preparesoldier ( sex_female , 2 ) ; 2 :
12602: LD_INT 2
12604: PPUSH
12605: LD_INT 2
12607: PPUSH
12608: CALL_OW 381
12612: GO 12657
12614: LD_INT 2
12616: DOUBLE
12617: EQUAL
12618: IFTRUE 12622
12620: GO 12635
12622: POP
// preparesoldier ( sex_female , 2 ) ; 3 :
12623: LD_INT 2
12625: PPUSH
12626: LD_INT 2
12628: PPUSH
12629: CALL_OW 381
12633: GO 12657
12635: LD_INT 3
12637: DOUBLE
12638: EQUAL
12639: IFTRUE 12643
12641: GO 12656
12643: POP
// preparesoldier ( sex_female , 3 ) ; end ;
12644: LD_INT 2
12646: PPUSH
12647: LD_INT 3
12649: PPUSH
12650: CALL_OW 381
12654: GO 12657
12656: POP
// ruhsoldm = createhuman ;
12657: LD_ADDR_EXP 63
12661: PUSH
12662: CALL_OW 44
12666: ST_TO_ADDR
// placeunitarea ( ruhsoldm , rusreinf0 , false ) ;
12667: LD_EXP 63
12671: PPUSH
12672: LD_INT 6
12674: PPUSH
12675: LD_INT 0
12677: PPUSH
12678: CALL_OW 49
// case difficulty of 1 :
12682: LD_OWVAR 67
12686: PUSH
12687: LD_INT 1
12689: DOUBLE
12690: EQUAL
12691: IFTRUE 12695
12693: GO 12708
12695: POP
// preparesoldier ( sex_male , 1 ) ; 2 :
12696: LD_INT 1
12698: PPUSH
12699: LD_INT 1
12701: PPUSH
12702: CALL_OW 381
12706: GO 12751
12708: LD_INT 2
12710: DOUBLE
12711: EQUAL
12712: IFTRUE 12716
12714: GO 12729
12716: POP
// preparesoldier ( sex_male , 2 ) ; 3 :
12717: LD_INT 1
12719: PPUSH
12720: LD_INT 2
12722: PPUSH
12723: CALL_OW 381
12727: GO 12751
12729: LD_INT 3
12731: DOUBLE
12732: EQUAL
12733: IFTRUE 12737
12735: GO 12750
12737: POP
// preparesoldier ( sex_male , 2 ) ; end ;
12738: LD_INT 1
12740: PPUSH
12741: LD_INT 2
12743: PPUSH
12744: CALL_OW 381
12748: GO 12751
12750: POP
// ruhsoldn = createhuman ;
12751: LD_ADDR_EXP 64
12755: PUSH
12756: CALL_OW 44
12760: ST_TO_ADDR
// placeunitarea ( ruhsoldn , rusreinf0 , false ) ;
12761: LD_EXP 64
12765: PPUSH
12766: LD_INT 6
12768: PPUSH
12769: LD_INT 0
12771: PPUSH
12772: CALL_OW 49
// nppp = nppp ^ [ ruhsoldm , ruhsoldn ] ;
12776: LD_ADDR_LOC 45
12780: PUSH
12781: LD_LOC 45
12785: PUSH
12786: LD_EXP 63
12790: PUSH
12791: LD_EXP 64
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: ADD
12800: ST_TO_ADDR
// comfree ( nppp ) ;
12801: LD_LOC 45
12805: PPUSH
12806: CALL_OW 139
// comagressivemove ( nppp , 78 , 46 ) ;
12810: LD_LOC 45
12814: PPUSH
12815: LD_INT 78
12817: PPUSH
12818: LD_INT 46
12820: PPUSH
12821: CALL_OW 114
// manage_prebytek ( 2 ) ;
12825: LD_INT 2
12827: PPUSH
12828: CALL 11727 0 1
// rusove0 = rusove0 union ( [ ruv5 , ruv6 ] union nppp ) ;
12832: LD_ADDR_EXP 32
12836: PUSH
12837: LD_EXP 32
12841: PUSH
12842: LD_EXP 60
12846: PUSH
12847: LD_EXP 62
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: LD_LOC 45
12860: UNION
12861: UNION
12862: ST_TO_ADDR
// enable ( 17 ) ;
12863: LD_INT 17
12865: ENABLE_MARKED
// end ;
12866: END
// every 0 0$1 + 17 17$10 trigger not ( [ ruv5 , ruv6 ] diff filterunitsinarea ( wayarea2 , [ [ f_side , rus ] , [ f_type , unit_vehicle ] ] ) ) marked 17 do
12867: LD_EXP 60
12871: PUSH
12872: LD_EXP 62
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 10
12883: PPUSH
12884: LD_INT 22
12886: PUSH
12887: LD_EXP 1
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PUSH
12896: LD_INT 21
12898: PUSH
12899: LD_INT 2
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PPUSH
12910: CALL_OW 70
12914: DIFF
12915: NOT
12916: IFFALSE 12945
12918: GO 12920
12920: DISABLE
// begin comagressivemove ( [ ruv5 , ruv6 ] , 47 , 25 ) ;
12921: LD_EXP 60
12925: PUSH
12926: LD_EXP 62
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PPUSH
12935: LD_INT 47
12937: PPUSH
12938: LD_INT 25
12940: PPUSH
12941: CALL_OW 114
// end ;
12945: END
// every 0 0$1 + 17 17$10 trigger filterunitsinarea ( wayarea1 , [ [ f_side , rus ] , [ f_type , unit_human ] ] ) > 2 marked 17 do
12946: LD_INT 9
12948: PPUSH
12949: LD_INT 22
12951: PUSH
12952: LD_EXP 1
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: PUSH
12961: LD_INT 21
12963: PUSH
12964: LD_INT 1
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: PPUSH
12975: CALL_OW 70
12979: PUSH
12980: LD_INT 2
12982: GREATER
12983: IFFALSE 13003
12985: GO 12987
12987: DISABLE
// begin comagressivemove ( nppp , 61 , 22 ) ;
12988: LD_LOC 45
12992: PPUSH
12993: LD_INT 61
12995: PPUSH
12996: LD_INT 22
12998: PPUSH
12999: CALL_OW 114
// end ;
13003: END
// every 18 18$0 marked 17 do var tmp ;
13004: GO 13006
13006: DISABLE
13007: LD_INT 0
13009: PPUSH
// begin case difficulty of 1 :
13010: LD_OWVAR 67
13014: PUSH
13015: LD_INT 1
13017: DOUBLE
13018: EQUAL
13019: IFTRUE 13023
13021: GO 13033
13023: POP
// wait ( 1 1$0 ) ; 2 :
13024: LD_INT 2100
13026: PPUSH
13027: CALL_OW 67
13031: GO 13052
13033: LD_INT 2
13035: DOUBLE
13036: EQUAL
13037: IFTRUE 13041
13039: GO 13051
13041: POP
// wait ( 0 0$30 ) ; end ;
13042: LD_INT 1050
13044: PPUSH
13045: CALL_OW 67
13049: GO 13052
13051: POP
// tmp = filterallunits ( [ [ f_side , amer ] , [ f_btype , b_bunker ] , [ f_occupied ] ] ) ;
13052: LD_ADDR_VAR 0 1
13056: PUSH
13057: LD_INT 22
13059: PUSH
13060: LD_EXP 2
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PUSH
13069: LD_INT 30
13071: PUSH
13072: LD_INT 32
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PUSH
13079: LD_INT 59
13081: PUSH
13082: EMPTY
13083: LIST
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: LIST
13089: PPUSH
13090: CALL_OW 69
13094: ST_TO_ADDR
// if not tmp then
13095: LD_VAR 0 1
13099: NOT
13100: IFFALSE 13145
// tmp = filterallunits ( [ [ f_side , amer ] , [ f_btype , b_breastwork ] , [ f_occupied ] ] ) ;
13102: LD_ADDR_VAR 0 1
13106: PUSH
13107: LD_INT 22
13109: PUSH
13110: LD_EXP 2
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PUSH
13119: LD_INT 30
13121: PUSH
13122: LD_INT 31
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: LD_INT 59
13131: PUSH
13132: EMPTY
13133: LIST
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: LIST
13139: PPUSH
13140: CALL_OW 69
13144: ST_TO_ADDR
// if not tmp then
13145: LD_VAR 0 1
13149: NOT
13150: IFFALSE 13195
// tmp = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) ;
13152: LD_ADDR_VAR 0 1
13156: PUSH
13157: LD_INT 22
13159: PUSH
13160: LD_EXP 2
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 21
13171: PUSH
13172: LD_INT 2
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: LD_INT 59
13181: PUSH
13182: EMPTY
13183: LIST
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: LIST
13189: PPUSH
13190: CALL_OW 69
13194: ST_TO_ADDR
// if not tmp then
13195: LD_VAR 0 1
13199: NOT
13200: IFFALSE 13245
// tmp = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
13202: LD_ADDR_VAR 0 1
13206: PUSH
13207: LD_INT 22
13209: PUSH
13210: LD_EXP 2
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PUSH
13219: LD_INT 21
13221: PUSH
13222: LD_INT 1
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PUSH
13229: LD_INT 50
13231: PUSH
13232: EMPTY
13233: LIST
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: LIST
13239: PPUSH
13240: CALL_OW 69
13244: ST_TO_ADDR
// if tmp then
13245: LD_VAR 0 1
13249: IFFALSE 13269
// comattackunit ( rusove0 , tmp [ 1 ] ) ;
13251: LD_EXP 32
13255: PPUSH
13256: LD_VAR 0 1
13260: PUSH
13261: LD_INT 1
13263: ARRAY
13264: PPUSH
13265: CALL_OW 115
// end ;
13269: PPOPN 1
13271: END
// every 22 22$0 do
13272: GO 13274
13274: DISABLE
// begin if retreat then
13275: LD_EXP 34
13279: IFFALSE 13283
// exit ;
13281: GO 13911
// uc_nation = nation_russian ;
13283: LD_ADDR_OWVAR 21
13287: PUSH
13288: LD_INT 3
13290: ST_TO_ADDR
// uc_side = rus ;
13291: LD_ADDR_OWVAR 20
13295: PUSH
13296: LD_EXP 1
13300: ST_TO_ADDR
// case difficulty of 2 :
13301: LD_OWVAR 67
13305: PUSH
13306: LD_INT 2
13308: DOUBLE
13309: EQUAL
13310: IFTRUE 13314
13312: GO 13327
13314: POP
// preparemechanic ( sex_male , 1 ) ; 3 :
13315: LD_INT 1
13317: PPUSH
13318: LD_INT 1
13320: PPUSH
13321: CALL_OW 383
13325: GO 13370
13327: LD_INT 3
13329: DOUBLE
13330: EQUAL
13331: IFTRUE 13335
13333: GO 13348
13335: POP
// preparemechanic ( sex_male , 2 ) ; 1 :
13336: LD_INT 1
13338: PPUSH
13339: LD_INT 2
13341: PPUSH
13342: CALL_OW 383
13346: GO 13370
13348: LD_INT 1
13350: DOUBLE
13351: EQUAL
13352: IFTRUE 13356
13354: GO 13369
13356: POP
// preparemechanic ( sex_male , 0 ) ; end ;
13357: LD_INT 1
13359: PPUSH
13360: LD_INT 0
13362: PPUSH
13363: CALL_OW 383
13367: GO 13370
13369: POP
// ruhmech4 = createhuman ;
13370: LD_ADDR_EXP 48
13374: PUSH
13375: CALL_OW 44
13379: ST_TO_ADDR
// case difficulty of 1 :
13380: LD_OWVAR 67
13384: PUSH
13385: LD_INT 1
13387: DOUBLE
13388: EQUAL
13389: IFTRUE 13393
13391: GO 13406
13393: POP
// preparesoldier ( sex_female , 2 ) ; 2 :
13394: LD_INT 2
13396: PPUSH
13397: LD_INT 2
13399: PPUSH
13400: CALL_OW 381
13404: GO 13449
13406: LD_INT 2
13408: DOUBLE
13409: EQUAL
13410: IFTRUE 13414
13412: GO 13427
13414: POP
// preparesoldier ( sex_female , 3 ) ; 3 :
13415: LD_INT 2
13417: PPUSH
13418: LD_INT 3
13420: PPUSH
13421: CALL_OW 381
13425: GO 13449
13427: LD_INT 3
13429: DOUBLE
13430: EQUAL
13431: IFTRUE 13435
13433: GO 13448
13435: POP
// preparesoldier ( sex_female , 4 ) ; end ;
13436: LD_INT 2
13438: PPUSH
13439: LD_INT 4
13441: PPUSH
13442: CALL_OW 381
13446: GO 13449
13448: POP
// hc_class = class_soldier ;
13449: LD_ADDR_OWVAR 28
13453: PUSH
13454: LD_INT 1
13456: ST_TO_ADDR
// ruhsold8 = createhuman ;
13457: LD_ADDR_EXP 46
13461: PUSH
13462: CALL_OW 44
13466: ST_TO_ADDR
// if difficulty = 3 then
13467: LD_OWVAR 67
13471: PUSH
13472: LD_INT 3
13474: EQUAL
13475: IFFALSE 13492
// placeunitarea ( ruhsold8 , rusreinf0 , false ) ;
13477: LD_EXP 46
13481: PPUSH
13482: LD_INT 6
13484: PPUSH
13485: LD_INT 0
13487: PPUSH
13488: CALL_OW 49
// case difficulty of 1 :
13492: LD_OWVAR 67
13496: PUSH
13497: LD_INT 1
13499: DOUBLE
13500: EQUAL
13501: IFTRUE 13505
13503: GO 13518
13505: POP
// preparesoldier ( sex_female , 2 ) ; 2 :
13506: LD_INT 2
13508: PPUSH
13509: LD_INT 2
13511: PPUSH
13512: CALL_OW 381
13516: GO 13561
13518: LD_INT 2
13520: DOUBLE
13521: EQUAL
13522: IFTRUE 13526
13524: GO 13539
13526: POP
// preparesoldier ( sex_female , 3 ) ; 3 :
13527: LD_INT 2
13529: PPUSH
13530: LD_INT 3
13532: PPUSH
13533: CALL_OW 381
13537: GO 13561
13539: LD_INT 3
13541: DOUBLE
13542: EQUAL
13543: IFTRUE 13547
13545: GO 13560
13547: POP
// preparesoldier ( sex_female , 4 ) ; end ;
13548: LD_INT 2
13550: PPUSH
13551: LD_INT 4
13553: PPUSH
13554: CALL_OW 381
13558: GO 13561
13560: POP
// ruhsold9 = createhuman ;
13561: LD_ADDR_EXP 47
13565: PUSH
13566: CALL_OW 44
13570: ST_TO_ADDR
// placeunitarea ( ruhsold9 , rusreinf0 , false ) ;
13571: LD_EXP 47
13575: PPUSH
13576: LD_INT 6
13578: PPUSH
13579: LD_INT 0
13581: PPUSH
13582: CALL_OW 49
// case difficulty of 1 :
13586: LD_OWVAR 67
13590: PUSH
13591: LD_INT 1
13593: DOUBLE
13594: EQUAL
13595: IFTRUE 13599
13597: GO 13618
13599: POP
// begin vc_chassis = ru_medium_wheeled ;
13600: LD_ADDR_OWVAR 37
13604: PUSH
13605: LD_INT 21
13607: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
13608: LD_ADDR_OWVAR 40
13612: PUSH
13613: LD_INT 42
13615: ST_TO_ADDR
// end ; 2 :
13616: GO 13673
13618: LD_INT 2
13620: DOUBLE
13621: EQUAL
13622: IFTRUE 13626
13624: GO 13645
13626: POP
// begin vc_chassis = ru_medium_wheeled ;
13627: LD_ADDR_OWVAR 37
13631: PUSH
13632: LD_INT 21
13634: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
13635: LD_ADDR_OWVAR 40
13639: PUSH
13640: LD_INT 43
13642: ST_TO_ADDR
// end ; 3 :
13643: GO 13673
13645: LD_INT 3
13647: DOUBLE
13648: EQUAL
13649: IFTRUE 13653
13651: GO 13672
13653: POP
// begin vc_chassis = ru_heavy_wheeled ;
13654: LD_ADDR_OWVAR 37
13658: PUSH
13659: LD_INT 23
13661: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
13662: LD_ADDR_OWVAR 40
13666: PUSH
13667: LD_INT 43
13669: ST_TO_ADDR
// end ; end ;
13670: GO 13673
13672: POP
// vc_control = control_manual ;
13673: LD_ADDR_OWVAR 38
13677: PUSH
13678: LD_INT 1
13680: ST_TO_ADDR
// vc_engine = engine_combustion ;
13681: LD_ADDR_OWVAR 39
13685: PUSH
13686: LD_INT 1
13688: ST_TO_ADDR
// ruv3 = createvehicle ;
13689: LD_ADDR_EXP 45
13693: PUSH
13694: CALL_OW 45
13698: ST_TO_ADDR
// placeunitarea ( ruv3 , rusreinf0 , false ) ;
13699: LD_EXP 45
13703: PPUSH
13704: LD_INT 6
13706: PPUSH
13707: LD_INT 0
13709: PPUSH
13710: CALL_OW 49
// placehumaninunit ( ruhmech4 , ruv3 ) ;
13714: LD_EXP 48
13718: PPUSH
13719: LD_EXP 45
13723: PPUSH
13724: CALL_OW 52
// case difficulty of 1 :
13728: LD_OWVAR 67
13732: PUSH
13733: LD_INT 1
13735: DOUBLE
13736: EQUAL
13737: IFTRUE 13741
13739: GO 13754
13741: POP
// preparesoldier ( sex_male , 2 ) ; 2 :
13742: LD_INT 1
13744: PPUSH
13745: LD_INT 2
13747: PPUSH
13748: CALL_OW 381
13752: GO 13797
13754: LD_INT 2
13756: DOUBLE
13757: EQUAL
13758: IFTRUE 13762
13760: GO 13775
13762: POP
// preparesoldier ( sex_male , 3 ) ; 3 :
13763: LD_INT 1
13765: PPUSH
13766: LD_INT 3
13768: PPUSH
13769: CALL_OW 381
13773: GO 13797
13775: LD_INT 3
13777: DOUBLE
13778: EQUAL
13779: IFTRUE 13783
13781: GO 13796
13783: POP
// preparesoldier ( sex_male , 4 ) ; end ;
13784: LD_INT 1
13786: PPUSH
13787: LD_INT 4
13789: PPUSH
13790: CALL_OW 381
13794: GO 13797
13796: POP
// ruhsolda = createhuman ;
13797: LD_ADDR_EXP 49
13801: PUSH
13802: CALL_OW 44
13806: ST_TO_ADDR
// placeunitarea ( ruhsolda , rusreinf0 , false ) ;
13807: LD_EXP 49
13811: PPUSH
13812: LD_INT 6
13814: PPUSH
13815: LD_INT 0
13817: PPUSH
13818: CALL_OW 49
// manage_prebytek ( 1 ) ;
13822: LD_INT 1
13824: PPUSH
13825: CALL 11727 0 1
// rusove0 = rusove0 union [ ruhsold8 , ruhsold9 , ruhsolda , ruv3 ] ;
13829: LD_ADDR_EXP 32
13833: PUSH
13834: LD_EXP 32
13838: PUSH
13839: LD_EXP 46
13843: PUSH
13844: LD_EXP 47
13848: PUSH
13849: LD_EXP 49
13853: PUSH
13854: LD_EXP 45
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: UNION
13865: ST_TO_ADDR
// comfree ( [ ruhsold8 , ruhsold9 , ruhsolda , ruv3 ] ) ;
13866: LD_EXP 46
13870: PUSH
13871: LD_EXP 47
13875: PUSH
13876: LD_EXP 49
13880: PUSH
13881: LD_EXP 45
13885: PUSH
13886: EMPTY
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: PPUSH
13892: CALL_OW 139
// comagressivemove ( rusove0 , 66 , 66 ) ;
13896: LD_EXP 32
13900: PPUSH
13901: LD_INT 66
13903: PPUSH
13904: LD_INT 66
13906: PPUSH
13907: CALL_OW 114
// end ;
13911: END
// every 0 0$1 + 22 22$09 trigger isinarea ( ruhsold8 , wayarea0 ) or isinarea ( ruhsold9 , wayarea0 ) or isinarea ( ruhsolda , wayarea0 ) do
13912: LD_EXP 46
13916: PPUSH
13917: LD_INT 8
13919: PPUSH
13920: CALL_OW 308
13924: PUSH
13925: LD_EXP 47
13929: PPUSH
13930: LD_INT 8
13932: PPUSH
13933: CALL_OW 308
13937: OR
13938: PUSH
13939: LD_EXP 49
13943: PPUSH
13944: LD_INT 8
13946: PPUSH
13947: CALL_OW 308
13951: OR
13952: IFFALSE 13979
13954: GO 13956
13956: DISABLE
// begin wait ( 1 1$0 ) ;
13957: LD_INT 2100
13959: PPUSH
13960: CALL_OW 67
// comagressivemove ( rusove0 , 50 , 50 ) ;
13964: LD_EXP 32
13968: PPUSH
13969: LD_INT 50
13971: PPUSH
13972: LD_INT 50
13974: PPUSH
13975: CALL_OW 114
// end ;
13979: END
// every 0 0$1 + 22 22$19 trigger isinarea ( ruhsold8 , wayarea2 ) or isinarea ( ruhsold9 , wayarea2 ) or isinarea ( ruhsolda , wayarea2 ) do var tmp ;
13980: LD_EXP 46
13984: PPUSH
13985: LD_INT 10
13987: PPUSH
13988: CALL_OW 308
13992: PUSH
13993: LD_EXP 47
13997: PPUSH
13998: LD_INT 10
14000: PPUSH
14001: CALL_OW 308
14005: OR
14006: PUSH
14007: LD_EXP 49
14011: PPUSH
14012: LD_INT 10
14014: PPUSH
14015: CALL_OW 308
14019: OR
14020: IFFALSE 14277
14022: GO 14024
14024: DISABLE
14025: LD_INT 0
14027: PPUSH
// begin wait ( 0 0$30 ) ;
14028: LD_INT 1050
14030: PPUSH
14031: CALL_OW 67
// comagressivemove ( rusove0 , 40 , 30 ) ;
14035: LD_EXP 32
14039: PPUSH
14040: LD_INT 40
14042: PPUSH
14043: LD_INT 30
14045: PPUSH
14046: CALL_OW 114
// wait ( 0 0$10 ) ;
14050: LD_INT 350
14052: PPUSH
14053: CALL_OW 67
// tmp = filterunitsinarea ( ambase , [ [ f_side , amer ] , [ f_alive ] , [ f_type , unit_human ] ] ) ;
14057: LD_ADDR_VAR 0 1
14061: PUSH
14062: LD_INT 2
14064: PPUSH
14065: LD_INT 22
14067: PUSH
14068: LD_EXP 2
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PUSH
14077: LD_INT 51
14079: PUSH
14080: EMPTY
14081: LIST
14082: PUSH
14083: LD_INT 21
14085: PUSH
14086: LD_INT 1
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: LIST
14097: PPUSH
14098: CALL_OW 70
14102: ST_TO_ADDR
// if not tmp then
14103: LD_VAR 0 1
14107: NOT
14108: IFFALSE 14153
// tmp = filterallunits ( [ [ f_side , amer ] , [ f_btype , b_breastwork ] , [ f_occupied ] ] ) ;
14110: LD_ADDR_VAR 0 1
14114: PUSH
14115: LD_INT 22
14117: PUSH
14118: LD_EXP 2
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: PUSH
14127: LD_INT 30
14129: PUSH
14130: LD_INT 31
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: LD_INT 59
14139: PUSH
14140: EMPTY
14141: LIST
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: LIST
14147: PPUSH
14148: CALL_OW 69
14152: ST_TO_ADDR
// if not tmp then
14153: LD_VAR 0 1
14157: NOT
14158: IFFALSE 14203
// tmp = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) ;
14160: LD_ADDR_VAR 0 1
14164: PUSH
14165: LD_INT 22
14167: PUSH
14168: LD_EXP 2
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: PUSH
14177: LD_INT 21
14179: PUSH
14180: LD_INT 2
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: PUSH
14187: LD_INT 59
14189: PUSH
14190: EMPTY
14191: LIST
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: LIST
14197: PPUSH
14198: CALL_OW 69
14202: ST_TO_ADDR
// if not tmp then
14203: LD_VAR 0 1
14207: NOT
14208: IFFALSE 14253
// tmp = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
14210: LD_ADDR_VAR 0 1
14214: PUSH
14215: LD_INT 22
14217: PUSH
14218: LD_EXP 2
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PUSH
14227: LD_INT 21
14229: PUSH
14230: LD_INT 1
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: PUSH
14237: LD_INT 50
14239: PUSH
14240: EMPTY
14241: LIST
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: LIST
14247: PPUSH
14248: CALL_OW 69
14252: ST_TO_ADDR
// if tmp then
14253: LD_VAR 0 1
14257: IFFALSE 14277
// comattackunit ( rusove0 , tmp [ 1 ] ) ;
14259: LD_EXP 32
14263: PPUSH
14264: LD_VAR 0 1
14268: PUSH
14269: LD_INT 1
14271: ARRAY
14272: PPUSH
14273: CALL_OW 115
// end ;
14277: PPOPN 1
14279: END
// every 28 28$40 do
14280: GO 14282
14282: DISABLE
// begin if retreat then
14283: LD_EXP 34
14287: IFFALSE 14291
// exit ;
14289: GO 15321
// vracet_se = false ;
14291: LD_ADDR_EXP 58
14295: PUSH
14296: LD_INT 0
14298: ST_TO_ADDR
// uc_nation = nation_russian ;
14299: LD_ADDR_OWVAR 21
14303: PUSH
14304: LD_INT 3
14306: ST_TO_ADDR
// uc_side = rus ;
14307: LD_ADDR_OWVAR 20
14311: PUSH
14312: LD_EXP 1
14316: ST_TO_ADDR
// case difficulty of 1 :
14317: LD_OWVAR 67
14321: PUSH
14322: LD_INT 1
14324: DOUBLE
14325: EQUAL
14326: IFTRUE 14330
14328: GO 14343
14330: POP
// preparesoldier ( sex_male , 2 ) ; 2 :
14331: LD_INT 1
14333: PPUSH
14334: LD_INT 2
14336: PPUSH
14337: CALL_OW 381
14341: GO 14386
14343: LD_INT 2
14345: DOUBLE
14346: EQUAL
14347: IFTRUE 14351
14349: GO 14364
14351: POP
// preparesoldier ( sex_male , 3 ) ; 3 :
14352: LD_INT 1
14354: PPUSH
14355: LD_INT 3
14357: PPUSH
14358: CALL_OW 381
14362: GO 14386
14364: LD_INT 3
14366: DOUBLE
14367: EQUAL
14368: IFTRUE 14372
14370: GO 14385
14372: POP
// preparesoldier ( sex_male , 4 ) ; end ;
14373: LD_INT 1
14375: PPUSH
14376: LD_INT 4
14378: PPUSH
14379: CALL_OW 381
14383: GO 14386
14385: POP
// ruhsoldb = createhuman ;
14386: LD_ADDR_EXP 50
14390: PUSH
14391: CALL_OW 44
14395: ST_TO_ADDR
// placeunitarea ( ruhsoldb , rusreinf0 , false ) ;
14396: LD_EXP 50
14400: PPUSH
14401: LD_INT 6
14403: PPUSH
14404: LD_INT 0
14406: PPUSH
14407: CALL_OW 49
// case difficulty of 1 :
14411: LD_OWVAR 67
14415: PUSH
14416: LD_INT 1
14418: DOUBLE
14419: EQUAL
14420: IFTRUE 14424
14422: GO 14437
14424: POP
// preparesoldier ( sex_male , 2 ) ; 2 :
14425: LD_INT 1
14427: PPUSH
14428: LD_INT 2
14430: PPUSH
14431: CALL_OW 381
14435: GO 14480
14437: LD_INT 2
14439: DOUBLE
14440: EQUAL
14441: IFTRUE 14445
14443: GO 14458
14445: POP
// preparesoldier ( sex_male , 3 ) ; 3 :
14446: LD_INT 1
14448: PPUSH
14449: LD_INT 3
14451: PPUSH
14452: CALL_OW 381
14456: GO 14480
14458: LD_INT 3
14460: DOUBLE
14461: EQUAL
14462: IFTRUE 14466
14464: GO 14479
14466: POP
// preparesoldier ( sex_male , 3 ) ; end ;
14467: LD_INT 1
14469: PPUSH
14470: LD_INT 3
14472: PPUSH
14473: CALL_OW 381
14477: GO 14480
14479: POP
// ruhsoldc = createhuman ;
14480: LD_ADDR_EXP 51
14484: PUSH
14485: CALL_OW 44
14489: ST_TO_ADDR
// placeunitarea ( ruhsoldc , rusreinf0 , false ) ;
14490: LD_EXP 51
14494: PPUSH
14495: LD_INT 6
14497: PPUSH
14498: LD_INT 0
14500: PPUSH
14501: CALL_OW 49
// case difficulty of 1 :
14505: LD_OWVAR 67
14509: PUSH
14510: LD_INT 1
14512: DOUBLE
14513: EQUAL
14514: IFTRUE 14518
14516: GO 14531
14518: POP
// preparesoldier ( sex_male , 2 ) ; 2 :
14519: LD_INT 1
14521: PPUSH
14522: LD_INT 2
14524: PPUSH
14525: CALL_OW 381
14529: GO 14574
14531: LD_INT 2
14533: DOUBLE
14534: EQUAL
14535: IFTRUE 14539
14537: GO 14552
14539: POP
// preparesoldier ( sex_male , 3 ) ; 3 :
14540: LD_INT 1
14542: PPUSH
14543: LD_INT 3
14545: PPUSH
14546: CALL_OW 381
14550: GO 14574
14552: LD_INT 3
14554: DOUBLE
14555: EQUAL
14556: IFTRUE 14560
14558: GO 14573
14560: POP
// preparesoldier ( sex_male , 4 ) ; end ;
14561: LD_INT 1
14563: PPUSH
14564: LD_INT 4
14566: PPUSH
14567: CALL_OW 381
14571: GO 14574
14573: POP
// ruhsoldd = createhuman ;
14574: LD_ADDR_EXP 52
14578: PUSH
14579: CALL_OW 44
14583: ST_TO_ADDR
// placeunitarea ( ruhsoldd , rusreinf0 , false ) ;
14584: LD_EXP 52
14588: PPUSH
14589: LD_INT 6
14591: PPUSH
14592: LD_INT 0
14594: PPUSH
14595: CALL_OW 49
// case difficulty of 1 :
14599: LD_OWVAR 67
14603: PUSH
14604: LD_INT 1
14606: DOUBLE
14607: EQUAL
14608: IFTRUE 14612
14610: GO 14625
14612: POP
// preparesoldier ( sex_male , 2 ) ; 2 :
14613: LD_INT 1
14615: PPUSH
14616: LD_INT 2
14618: PPUSH
14619: CALL_OW 381
14623: GO 14668
14625: LD_INT 2
14627: DOUBLE
14628: EQUAL
14629: IFTRUE 14633
14631: GO 14646
14633: POP
// preparesoldier ( sex_male , 3 ) ; 3 :
14634: LD_INT 1
14636: PPUSH
14637: LD_INT 3
14639: PPUSH
14640: CALL_OW 381
14644: GO 14668
14646: LD_INT 3
14648: DOUBLE
14649: EQUAL
14650: IFTRUE 14654
14652: GO 14667
14654: POP
// preparesoldier ( sex_male , 3 ) ; end ;
14655: LD_INT 1
14657: PPUSH
14658: LD_INT 3
14660: PPUSH
14661: CALL_OW 381
14665: GO 14668
14667: POP
// ruhsolde = createhuman ;
14668: LD_ADDR_EXP 53
14672: PUSH
14673: CALL_OW 44
14677: ST_TO_ADDR
// placeunitarea ( ruhsolde , rusreinf0 , false ) ;
14678: LD_EXP 53
14682: PPUSH
14683: LD_INT 6
14685: PPUSH
14686: LD_INT 0
14688: PPUSH
14689: CALL_OW 49
// comfree ( [ ruhsoldb , ruhsoldc , ruhsoldd , ruhsolde ] ) ;
14693: LD_EXP 50
14697: PUSH
14698: LD_EXP 51
14702: PUSH
14703: LD_EXP 52
14707: PUSH
14708: LD_EXP 53
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: PPUSH
14719: CALL_OW 139
// comagressivemove ( [ ruhsoldb , ruhsoldc , ruhsoldd , ruhsolde ] , 78 , 46 ) ;
14723: LD_EXP 50
14727: PUSH
14728: LD_EXP 51
14732: PUSH
14733: LD_EXP 52
14737: PUSH
14738: LD_EXP 53
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: PPUSH
14749: LD_INT 78
14751: PPUSH
14752: LD_INT 46
14754: PPUSH
14755: CALL_OW 114
// rusove2 = [ ] ;
14759: LD_ADDR_EXP 17
14763: PUSH
14764: EMPTY
14765: ST_TO_ADDR
// if isok ( ruv1 ) then
14766: LD_EXP 23
14770: PPUSH
14771: CALL_OW 302
14775: IFFALSE 14796
// rusove2 = rusove2 ^ [ ruv1 ] ;
14777: LD_ADDR_EXP 17
14781: PUSH
14782: LD_EXP 17
14786: PUSH
14787: LD_EXP 23
14791: PUSH
14792: EMPTY
14793: LIST
14794: ADD
14795: ST_TO_ADDR
// if isok ( ruv2 ) then
14796: LD_EXP 24
14800: PPUSH
14801: CALL_OW 302
14805: IFFALSE 14826
// rusove2 = rusove2 ^ [ ruv2 ] ;
14807: LD_ADDR_EXP 17
14811: PUSH
14812: LD_EXP 17
14816: PUSH
14817: LD_EXP 24
14821: PUSH
14822: EMPTY
14823: LIST
14824: ADD
14825: ST_TO_ADDR
// manage_prebytek ( 0 + rusove2 ) ;
14826: LD_INT 0
14828: PUSH
14829: LD_EXP 17
14833: PLUS
14834: PPUSH
14835: CALL 11727 0 1
// if isok ( ruhsold0 ) then
14839: LD_INT 8
14841: PPUSH
14842: CALL_OW 302
14846: IFFALSE 14865
// rusove2 = rusove2 ^ [ ruhsold0 ] ;
14848: LD_ADDR_EXP 17
14852: PUSH
14853: LD_EXP 17
14857: PUSH
14858: LD_INT 8
14860: PUSH
14861: EMPTY
14862: LIST
14863: ADD
14864: ST_TO_ADDR
// if isok ( ruhsold6 ) then
14865: LD_INT 27
14867: PPUSH
14868: CALL_OW 302
14872: IFFALSE 14891
// rusove2 = rusove2 ^ [ ruhsold6 ] ;
14874: LD_ADDR_EXP 17
14878: PUSH
14879: LD_EXP 17
14883: PUSH
14884: LD_INT 27
14886: PUSH
14887: EMPTY
14888: LIST
14889: ADD
14890: ST_TO_ADDR
// if isok ( ruhsold7 ) then
14891: LD_INT 28
14893: PPUSH
14894: CALL_OW 302
14898: IFFALSE 14917
// rusove2 = rusove2 ^ [ ruhsold7 ] ;
14900: LD_ADDR_EXP 17
14904: PUSH
14905: LD_EXP 17
14909: PUSH
14910: LD_INT 28
14912: PUSH
14913: EMPTY
14914: LIST
14915: ADD
14916: ST_TO_ADDR
// case difficulty of 1 :
14917: LD_OWVAR 67
14921: PUSH
14922: LD_INT 1
14924: DOUBLE
14925: EQUAL
14926: IFTRUE 14930
14928: GO 14943
14930: POP
// preparesoldier ( sex_male , 2 ) ; 2 :
14931: LD_INT 1
14933: PPUSH
14934: LD_INT 2
14936: PPUSH
14937: CALL_OW 381
14941: GO 14986
14943: LD_INT 2
14945: DOUBLE
14946: EQUAL
14947: IFTRUE 14951
14949: GO 14964
14951: POP
// preparesoldier ( sex_male , 3 ) ; 3 :
14952: LD_INT 1
14954: PPUSH
14955: LD_INT 3
14957: PPUSH
14958: CALL_OW 381
14962: GO 14986
14964: LD_INT 3
14966: DOUBLE
14967: EQUAL
14968: IFTRUE 14972
14970: GO 14985
14972: POP
// preparesoldier ( sex_male , 4 ) ; end ;
14973: LD_INT 1
14975: PPUSH
14976: LD_INT 4
14978: PPUSH
14979: CALL_OW 381
14983: GO 14986
14985: POP
// ruhsoldf = createhuman ;
14986: LD_ADDR_EXP 54
14990: PUSH
14991: CALL_OW 44
14995: ST_TO_ADDR
// placeunitarea ( ruhsoldf , rusreinf1 , false ) ;
14996: LD_EXP 54
15000: PPUSH
15001: LD_INT 7
15003: PPUSH
15004: LD_INT 0
15006: PPUSH
15007: CALL_OW 49
// case difficulty of 1 :
15011: LD_OWVAR 67
15015: PUSH
15016: LD_INT 1
15018: DOUBLE
15019: EQUAL
15020: IFTRUE 15024
15022: GO 15037
15024: POP
// preparesoldier ( sex_male , 2 ) ; 2 :
15025: LD_INT 1
15027: PPUSH
15028: LD_INT 2
15030: PPUSH
15031: CALL_OW 381
15035: GO 15080
15037: LD_INT 2
15039: DOUBLE
15040: EQUAL
15041: IFTRUE 15045
15043: GO 15058
15045: POP
// preparesoldier ( sex_male , 3 ) ; 3 :
15046: LD_INT 1
15048: PPUSH
15049: LD_INT 3
15051: PPUSH
15052: CALL_OW 381
15056: GO 15080
15058: LD_INT 3
15060: DOUBLE
15061: EQUAL
15062: IFTRUE 15066
15064: GO 15079
15066: POP
// preparesoldier ( sex_male , 3 ) ; end ;
15067: LD_INT 1
15069: PPUSH
15070: LD_INT 3
15072: PPUSH
15073: CALL_OW 381
15077: GO 15080
15079: POP
// ruhsoldg = createhuman ;
15080: LD_ADDR_EXP 55
15084: PUSH
15085: CALL_OW 44
15089: ST_TO_ADDR
// if difficulty = 3 then
15090: LD_OWVAR 67
15094: PUSH
15095: LD_INT 3
15097: EQUAL
15098: IFFALSE 15115
// placeunitarea ( ruhsoldg , rusreinf1 , false ) ;
15100: LD_EXP 55
15104: PPUSH
15105: LD_INT 7
15107: PPUSH
15108: LD_INT 0
15110: PPUSH
15111: CALL_OW 49
// case difficulty of 1 :
15115: LD_OWVAR 67
15119: PUSH
15120: LD_INT 1
15122: DOUBLE
15123: EQUAL
15124: IFTRUE 15128
15126: GO 15141
15128: POP
// preparesoldier ( sex_male , 2 ) ; 2 :
15129: LD_INT 1
15131: PPUSH
15132: LD_INT 2
15134: PPUSH
15135: CALL_OW 381
15139: GO 15184
15141: LD_INT 2
15143: DOUBLE
15144: EQUAL
15145: IFTRUE 15149
15147: GO 15162
15149: POP
// preparesoldier ( sex_male , 3 ) ; 3 :
15150: LD_INT 1
15152: PPUSH
15153: LD_INT 3
15155: PPUSH
15156: CALL_OW 381
15160: GO 15184
15162: LD_INT 3
15164: DOUBLE
15165: EQUAL
15166: IFTRUE 15170
15168: GO 15183
15170: POP
// preparesoldier ( sex_male , 4 ) ; end ;
15171: LD_INT 1
15173: PPUSH
15174: LD_INT 4
15176: PPUSH
15177: CALL_OW 381
15181: GO 15184
15183: POP
// ruhsoldh = createhuman ;
15184: LD_ADDR_EXP 56
15188: PUSH
15189: CALL_OW 44
15193: ST_TO_ADDR
// placeunitarea ( ruhsoldh , rusreinf1 , false ) ;
15194: LD_EXP 56
15198: PPUSH
15199: LD_INT 7
15201: PPUSH
15202: LD_INT 0
15204: PPUSH
15205: CALL_OW 49
// preparesoldier ( sex_male , 4 ) ;
15209: LD_INT 1
15211: PPUSH
15212: LD_INT 4
15214: PPUSH
15215: CALL_OW 381
// ruhsoldi = createhuman ;
15219: LD_ADDR_EXP 57
15223: PUSH
15224: CALL_OW 44
15228: ST_TO_ADDR
// placeunitarea ( ruhsoldi , rusreinf1 , false ) ;
15229: LD_EXP 57
15233: PPUSH
15234: LD_INT 7
15236: PPUSH
15237: LD_INT 0
15239: PPUSH
15240: CALL_OW 49
// rusove2 = rusove2 ^ [ ruhsoldf , ruhsoldg , ruhsoldh , ruhsoldi ] ;
15244: LD_ADDR_EXP 17
15248: PUSH
15249: LD_EXP 17
15253: PUSH
15254: LD_EXP 54
15258: PUSH
15259: LD_EXP 55
15263: PUSH
15264: LD_EXP 56
15268: PUSH
15269: LD_EXP 57
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: ADD
15280: ST_TO_ADDR
// comfree ( rusove2 ) ;
15281: LD_EXP 17
15285: PPUSH
15286: CALL_OW 139
// rusove0 = rusove0 union rusove2 ;
15290: LD_ADDR_EXP 32
15294: PUSH
15295: LD_EXP 32
15299: PUSH
15300: LD_EXP 17
15304: UNION
15305: ST_TO_ADDR
// comagressivemove ( rusove0 , 47 , 45 ) ;
15306: LD_EXP 32
15310: PPUSH
15311: LD_INT 47
15313: PPUSH
15314: LD_INT 45
15316: PPUSH
15317: CALL_OW 114
// end ;
15321: END
// every 0 0$1 + 28 28$49 trigger isinarea ( ruhsoldb , wayarea1 ) or isinarea ( ruhsoldc , wayarea1 ) or isinarea ( ruhsoldd , wayarea1 ) or isinarea ( ruhsolde , wayarea1 ) do var tmp ;
15322: LD_EXP 50
15326: PPUSH
15327: LD_INT 9
15329: PPUSH
15330: CALL_OW 308
15334: PUSH
15335: LD_EXP 51
15339: PPUSH
15340: LD_INT 9
15342: PPUSH
15343: CALL_OW 308
15347: OR
15348: PUSH
15349: LD_EXP 52
15353: PPUSH
15354: LD_INT 9
15356: PPUSH
15357: CALL_OW 308
15361: OR
15362: PUSH
15363: LD_EXP 53
15367: PPUSH
15368: LD_INT 9
15370: PPUSH
15371: CALL_OW 308
15375: OR
15376: IFFALSE 15668
15378: GO 15380
15380: DISABLE
15381: LD_INT 0
15383: PPUSH
// begin comagressivemove ( [ ruhsoldb , ruhsoldc , ruhsoldd , ruhsolde ] , 53 , 13 ) ;
15384: LD_EXP 50
15388: PUSH
15389: LD_EXP 51
15393: PUSH
15394: LD_EXP 52
15398: PUSH
15399: LD_EXP 53
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: PPUSH
15410: LD_INT 53
15412: PPUSH
15413: LD_INT 13
15415: PPUSH
15416: CALL_OW 114
// wait ( 0 0$7 ) ;
15420: LD_INT 245
15422: PPUSH
15423: CALL_OW 67
// tmp = filterunitsinarea ( ambase , [ [ f_side , amer ] , [ f_alive ] , [ f_type , unit_human ] ] ) ;
15427: LD_ADDR_VAR 0 1
15431: PUSH
15432: LD_INT 2
15434: PPUSH
15435: LD_INT 22
15437: PUSH
15438: LD_EXP 2
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PUSH
15447: LD_INT 51
15449: PUSH
15450: EMPTY
15451: LIST
15452: PUSH
15453: LD_INT 21
15455: PUSH
15456: LD_INT 1
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: LIST
15467: PPUSH
15468: CALL_OW 70
15472: ST_TO_ADDR
// if not tmp then
15473: LD_VAR 0 1
15477: NOT
15478: IFFALSE 15523
// tmp = filterallunits ( [ [ f_side , amer ] , [ f_btype , b_breastwork ] , [ f_occupied ] ] ) ;
15480: LD_ADDR_VAR 0 1
15484: PUSH
15485: LD_INT 22
15487: PUSH
15488: LD_EXP 2
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 30
15499: PUSH
15500: LD_INT 31
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: LD_INT 59
15509: PUSH
15510: EMPTY
15511: LIST
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: LIST
15517: PPUSH
15518: CALL_OW 69
15522: ST_TO_ADDR
// if not tmp then
15523: LD_VAR 0 1
15527: NOT
15528: IFFALSE 15573
// tmp = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) ;
15530: LD_ADDR_VAR 0 1
15534: PUSH
15535: LD_INT 22
15537: PUSH
15538: LD_EXP 2
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: PUSH
15547: LD_INT 21
15549: PUSH
15550: LD_INT 2
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PUSH
15557: LD_INT 59
15559: PUSH
15560: EMPTY
15561: LIST
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: LIST
15567: PPUSH
15568: CALL_OW 69
15572: ST_TO_ADDR
// if not tmp then
15573: LD_VAR 0 1
15577: NOT
15578: IFFALSE 15623
// tmp = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
15580: LD_ADDR_VAR 0 1
15584: PUSH
15585: LD_INT 22
15587: PUSH
15588: LD_EXP 2
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 21
15599: PUSH
15600: LD_INT 1
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: LD_INT 50
15609: PUSH
15610: EMPTY
15611: LIST
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: LIST
15617: PPUSH
15618: CALL_OW 69
15622: ST_TO_ADDR
// if tmp then
15623: LD_VAR 0 1
15627: IFFALSE 15668
// comattackunit ( [ ruhsoldb , ruhsoldc , ruhsoldd , ruhsolde ] , tmp [ 1 ] ) ;
15629: LD_EXP 50
15633: PUSH
15634: LD_EXP 51
15638: PUSH
15639: LD_EXP 52
15643: PUSH
15644: LD_EXP 53
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: PPUSH
15655: LD_VAR 0 1
15659: PUSH
15660: LD_INT 1
15662: ARRAY
15663: PPUSH
15664: CALL_OW 115
// end ;
15668: PPOPN 1
15670: END
// every 0 0$1 + 28 28$49 trigger isinarea ( ruhsoldf , wayarea2 ) or isinarea ( ruhsoldg , wayarea2 ) or isinarea ( ruhsoldh , wayarea2 ) or isinarea ( ruhsoldi , wayarea2 ) do var tmp ;
15671: LD_EXP 54
15675: PPUSH
15676: LD_INT 10
15678: PPUSH
15679: CALL_OW 308
15683: PUSH
15684: LD_EXP 55
15688: PPUSH
15689: LD_INT 10
15691: PPUSH
15692: CALL_OW 308
15696: OR
15697: PUSH
15698: LD_EXP 56
15702: PPUSH
15703: LD_INT 10
15705: PPUSH
15706: CALL_OW 308
15710: OR
15711: PUSH
15712: LD_EXP 57
15716: PPUSH
15717: LD_INT 10
15719: PPUSH
15720: CALL_OW 308
15724: OR
15725: IFFALSE 16018
15727: GO 15729
15729: DISABLE
15730: LD_INT 0
15732: PPUSH
// begin if not filterunitsinarea ( rubase1rng , [ [ f_side , rus ] , [ f_btype , b_depot ] ] ) then
15733: LD_INT 3
15735: PPUSH
15736: LD_INT 22
15738: PUSH
15739: LD_EXP 1
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PUSH
15748: LD_INT 30
15750: PUSH
15751: LD_INT 0
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PPUSH
15762: CALL_OW 70
15766: NOT
15767: IFFALSE 15776
// wait ( 1 1$30 ) ;
15769: LD_INT 3150
15771: PPUSH
15772: CALL_OW 67
// comagressivemove ( rusove0 , 47 , 25 ) ;
15776: LD_EXP 32
15780: PPUSH
15781: LD_INT 47
15783: PPUSH
15784: LD_INT 25
15786: PPUSH
15787: CALL_OW 114
// wait ( 0 0$3 ) ;
15791: LD_INT 105
15793: PPUSH
15794: CALL_OW 67
// tmp = filterunitsinarea ( ambase , [ [ f_side , amer ] , [ f_alive ] , [ f_type , unit_human ] ] ) ;
15798: LD_ADDR_VAR 0 1
15802: PUSH
15803: LD_INT 2
15805: PPUSH
15806: LD_INT 22
15808: PUSH
15809: LD_EXP 2
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: LD_INT 51
15820: PUSH
15821: EMPTY
15822: LIST
15823: PUSH
15824: LD_INT 21
15826: PUSH
15827: LD_INT 1
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: LIST
15838: PPUSH
15839: CALL_OW 70
15843: ST_TO_ADDR
// if not tmp then
15844: LD_VAR 0 1
15848: NOT
15849: IFFALSE 15894
// tmp = filterallunits ( [ [ f_side , amer ] , [ f_btype , b_breastwork ] , [ f_occupied ] ] ) ;
15851: LD_ADDR_VAR 0 1
15855: PUSH
15856: LD_INT 22
15858: PUSH
15859: LD_EXP 2
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: LD_INT 30
15870: PUSH
15871: LD_INT 31
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PUSH
15878: LD_INT 59
15880: PUSH
15881: EMPTY
15882: LIST
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: LIST
15888: PPUSH
15889: CALL_OW 69
15893: ST_TO_ADDR
// if not tmp then
15894: LD_VAR 0 1
15898: NOT
15899: IFFALSE 15944
// tmp = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) ;
15901: LD_ADDR_VAR 0 1
15905: PUSH
15906: LD_INT 22
15908: PUSH
15909: LD_EXP 2
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: LD_INT 21
15920: PUSH
15921: LD_INT 2
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 59
15930: PUSH
15931: EMPTY
15932: LIST
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: LIST
15938: PPUSH
15939: CALL_OW 69
15943: ST_TO_ADDR
// if not tmp then
15944: LD_VAR 0 1
15948: NOT
15949: IFFALSE 15994
// tmp = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
15951: LD_ADDR_VAR 0 1
15955: PUSH
15956: LD_INT 22
15958: PUSH
15959: LD_EXP 2
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: LD_INT 21
15970: PUSH
15971: LD_INT 1
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: PUSH
15978: LD_INT 50
15980: PUSH
15981: EMPTY
15982: LIST
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: LIST
15988: PPUSH
15989: CALL_OW 69
15993: ST_TO_ADDR
// if tmp then
15994: LD_VAR 0 1
15998: IFFALSE 16018
// comattackunit ( rusove0 , tmp [ 1 ] ) ;
16000: LD_EXP 32
16004: PPUSH
16005: LD_VAR 0 1
16009: PUSH
16010: LD_INT 1
16012: ARRAY
16013: PPUSH
16014: CALL_OW 115
// end ;
16018: PPOPN 1
16020: END
// var zivi_amerikani_ ; function zivi_amerikani ; begin
16021: LD_INT 0
16023: PPUSH
// zivi_amerikani_ = filterunitsinarea ( ambase , [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
16024: LD_ADDR_LOC 46
16028: PUSH
16029: LD_INT 2
16031: PPUSH
16032: LD_INT 22
16034: PUSH
16035: LD_EXP 2
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 21
16046: PUSH
16047: LD_INT 1
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: LD_INT 50
16056: PUSH
16057: EMPTY
16058: LIST
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: LIST
16064: PPUSH
16065: CALL_OW 70
16069: ST_TO_ADDR
// if not zivi_amerikani_ then
16070: LD_LOC 46
16074: NOT
16075: IFFALSE 16120
// zivi_amerikani_ = filterallunits ( [ [ f_side , amer ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
16077: LD_ADDR_LOC 46
16081: PUSH
16082: LD_INT 22
16084: PUSH
16085: LD_EXP 2
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: PUSH
16094: LD_INT 21
16096: PUSH
16097: LD_INT 1
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PUSH
16104: LD_INT 50
16106: PUSH
16107: EMPTY
16108: LIST
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: LIST
16114: PPUSH
16115: CALL_OW 69
16119: ST_TO_ADDR
// result = zivi_amerikani_ ;
16120: LD_ADDR_VAR 0 1
16124: PUSH
16125: LD_LOC 46
16129: ST_TO_ADDR
// end ;
16130: LD_VAR 0 1
16134: RET
// every 0 0$1 + 30 30$0 trigger zivi_amerikani do
16135: CALL 16021 0 0
16139: IFFALSE 16169
16141: GO 16143
16143: DISABLE
// begin if not retreat then
16144: LD_EXP 34
16148: NOT
16149: IFFALSE 16169
// comattackunit ( rusove0 , zivi_amerikani_ [ 1 ] ) ;
16151: LD_EXP 32
16155: PPUSH
16156: LD_LOC 46
16160: PUSH
16161: LD_INT 1
16163: ARRAY
16164: PPUSH
16165: CALL_OW 115
// end ; end_of_file
16169: END
// var rusove_mimo ; var pom_rumi ; function rusove_mimo_bazi ; begin
16170: LD_INT 0
16172: PPUSH
// pom_rumi = rusove diff filterunitsinarea ( rubase0 , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
16173: LD_ADDR_LOC 48
16177: PUSH
16178: LD_EXP 31
16182: PUSH
16183: LD_INT 1
16185: PPUSH
16186: LD_INT 21
16188: PUSH
16189: LD_INT 1
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 50
16198: PUSH
16199: EMPTY
16200: LIST
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PPUSH
16206: CALL_OW 70
16210: DIFF
16211: ST_TO_ADDR
// rusove_mimo = pom_rumi diff filterunitsinarea ( rubase0 , [ [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
16212: LD_ADDR_LOC 47
16216: PUSH
16217: LD_LOC 48
16221: PUSH
16222: LD_INT 1
16224: PPUSH
16225: LD_INT 21
16227: PUSH
16228: LD_INT 2
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: PUSH
16235: LD_INT 50
16237: PUSH
16238: EMPTY
16239: LIST
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PPUSH
16245: CALL_OW 70
16249: DIFF
16250: ST_TO_ADDR
// result = rusove_mimo ;
16251: LD_ADDR_VAR 0 1
16255: PUSH
16256: LD_LOC 47
16260: ST_TO_ADDR
// end ;
16261: LD_VAR 0 1
16265: RET
// every 0 0$1 trigger rusove_mimo_bazi do
16266: CALL 16170 0 0
16270: IFFALSE 16293
16272: GO 16274
16274: DISABLE
// begin if retreat then
16275: LD_EXP 34
16279: IFFALSE 16283
// exit ;
16281: GO 16293
// comreturn ( rusove_mimo ) ;
16283: LD_LOC 47
16287: PPUSH
16288: CALL_OW 144
// enable ;
16292: ENABLE
// end ;
16293: END
// var healeri_mimo ; function healeri_mimo_rb ; begin
16294: LD_INT 0
16296: PPUSH
// healeri_mimo = healeri diff filterunitsinarea ( repairbay , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
16297: LD_ADDR_LOC 49
16301: PUSH
16302: LD_EXP 33
16306: PUSH
16307: LD_INT 12
16309: PPUSH
16310: LD_INT 21
16312: PUSH
16313: LD_INT 1
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 50
16322: PUSH
16323: EMPTY
16324: LIST
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PPUSH
16330: CALL_OW 70
16334: DIFF
16335: ST_TO_ADDR
// result = healeri_mimo ;
16336: LD_ADDR_VAR 0 1
16340: PUSH
16341: LD_LOC 49
16345: ST_TO_ADDR
// end ;
16346: LD_VAR 0 1
16350: RET
// every 0 0$0.9 trigger healeri_mimo_rb do
16351: CALL 16294 0 0
16355: IFFALSE 16384
16357: GO 16359
16359: DISABLE
// begin if retreat then
16360: LD_EXP 34
16364: IFFALSE 16368
// exit ;
16366: GO 16384
// commovexy ( healeri_mimo , 85 , 97 ) ;
16368: LD_LOC 49
16372: PPUSH
16373: LD_INT 85
16375: PPUSH
16376: LD_INT 97
16378: PPUSH
16379: CALL_OW 111
// enable ;
16383: ENABLE
// end ;
16384: END
// var poskoz_ ; var kn_ ; every 0 0$0.7 do
16385: GO 16387
16387: DISABLE
// begin if retreat then
16388: LD_EXP 34
16392: IFFALSE 16396
// exit ;
16394: GO 16606
// poskoz_ = unitfilter ( rusove0 , [ [ f_type , unit_vehicle ] ] ) ;
16396: LD_ADDR_LOC 50
16400: PUSH
16401: LD_EXP 32
16405: PPUSH
16406: LD_INT 21
16408: PUSH
16409: LD_INT 2
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: EMPTY
16417: LIST
16418: PPUSH
16419: CALL_OW 72
16423: ST_TO_ADDR
// for kn_ in poskoz_ do
16424: LD_ADDR_LOC 51
16428: PUSH
16429: LD_LOC 50
16433: PUSH
16434: FOR_IN
16435: IFFALSE 16491
// begin if getlives ( kn_ ) <= hr_auta then
16437: LD_LOC 51
16441: PPUSH
16442: CALL_OW 256
16446: PUSH
16447: LD_EXP 38
16451: LESSEQUAL
16452: IFFALSE 16489
// begin rusove0 = rusove0 diff kn_ ;
16454: LD_ADDR_EXP 32
16458: PUSH
16459: LD_EXP 32
16463: PUSH
16464: LD_LOC 51
16468: DIFF
16469: ST_TO_ADDR
// poskoz = poskoz ^ [ kn_ ] ;
16470: LD_ADDR_EXP 35
16474: PUSH
16475: LD_EXP 35
16479: PUSH
16480: LD_LOC 51
16484: PUSH
16485: EMPTY
16486: LIST
16487: ADD
16488: ST_TO_ADDR
// end ; end ;
16489: GO 16434
16491: POP
16492: POP
// poskoz_ = unitfilter ( rusove0 , [ [ f_type , unit_human ] ] ) ;
16493: LD_ADDR_LOC 50
16497: PUSH
16498: LD_EXP 32
16502: PPUSH
16503: LD_INT 21
16505: PUSH
16506: LD_INT 1
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PUSH
16513: EMPTY
16514: LIST
16515: PPUSH
16516: CALL_OW 72
16520: ST_TO_ADDR
// for kn_ in poskoz_ do
16521: LD_ADDR_LOC 51
16525: PUSH
16526: LD_LOC 50
16530: PUSH
16531: FOR_IN
16532: IFFALSE 16588
// begin if getlives ( kn_ ) <= hr_lidi then
16534: LD_LOC 51
16538: PPUSH
16539: CALL_OW 256
16543: PUSH
16544: LD_EXP 37
16548: LESSEQUAL
16549: IFFALSE 16586
// begin rusove0 = rusove0 diff kn_ ;
16551: LD_ADDR_EXP 32
16555: PUSH
16556: LD_EXP 32
16560: PUSH
16561: LD_LOC 51
16565: DIFF
16566: ST_TO_ADDR
// poskoz = poskoz ^ [ kn_ ] ;
16567: LD_ADDR_EXP 35
16571: PUSH
16572: LD_EXP 35
16576: PUSH
16577: LD_LOC 51
16581: PUSH
16582: EMPTY
16583: LIST
16584: ADD
16585: ST_TO_ADDR
// end ; end ;
16586: GO 16531
16588: POP
16589: POP
// commovexy ( poskoz , 80 , 96 ) ;
16590: LD_EXP 35
16594: PPUSH
16595: LD_INT 80
16597: PPUSH
16598: LD_INT 96
16600: PPUSH
16601: CALL_OW 111
// enable ;
16605: ENABLE
// end ;
16606: END
// var pom_rupo ; var driver ; var kn__ ; every 0 0$1.5 do var p95 , p96 , poskpom ;
16607: GO 16609
16609: DISABLE
16610: LD_INT 0
16612: PPUSH
16613: PPUSH
16614: PPUSH
// begin if retreat then
16615: LD_EXP 34
16619: IFFALSE 16623
// exit ;
16621: GO 17241
// poskpom = poskoz ;
16623: LD_ADDR_VAR 0 3
16627: PUSH
16628: LD_EXP 35
16632: ST_TO_ADDR
// poskoz = [ ] ;
16633: LD_ADDR_EXP 35
16637: PUSH
16638: EMPTY
16639: ST_TO_ADDR
// for p95 in poskpom do
16640: LD_ADDR_VAR 0 1
16644: PUSH
16645: LD_VAR 0 3
16649: PUSH
16650: FOR_IN
16651: IFFALSE 16685
// if islive ( p95 ) then
16653: LD_VAR 0 1
16657: PPUSH
16658: CALL_OW 300
16662: IFFALSE 16683
// poskoz = poskoz ^ [ p95 ] ;
16664: LD_ADDR_EXP 35
16668: PUSH
16669: LD_EXP 35
16673: PUSH
16674: LD_VAR 0 1
16678: PUSH
16679: EMPTY
16680: LIST
16681: ADD
16682: ST_TO_ADDR
16683: GO 16650
16685: POP
16686: POP
// pom_rupo = prebytek isect filterunitsinarea ( repairbay , [ [ f_side , rus ] , [ f_type , unit_vehicle ] ] ) ;
16687: LD_ADDR_LOC 52
16691: PUSH
16692: LD_EXP 41
16696: PUSH
16697: LD_INT 12
16699: PPUSH
16700: LD_INT 22
16702: PUSH
16703: LD_EXP 1
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: LD_INT 21
16714: PUSH
16715: LD_INT 2
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PPUSH
16726: CALL_OW 70
16730: ISECT
16731: ST_TO_ADDR
// if ( 0 + prebytek ) > mpard then
16732: LD_INT 0
16734: PUSH
16735: LD_EXP 41
16739: PLUS
16740: PUSH
16741: LD_EXP 40
16745: GREATER
16746: IFFALSE 16847
// begin if ( 0 + prebytek - mpard ) >= ( 0 + pom_rupo ) then
16748: LD_INT 0
16750: PUSH
16751: LD_EXP 41
16755: PLUS
16756: PUSH
16757: LD_EXP 40
16761: MINUS
16762: PUSH
16763: LD_INT 0
16765: PUSH
16766: LD_LOC 52
16770: PLUS
16771: GREATEREQUAL
16772: IFFALSE 16790
// p96 = ( 0 + pom_rupo ) else
16774: LD_ADDR_VAR 0 2
16778: PUSH
16779: LD_INT 0
16781: PUSH
16782: LD_LOC 52
16786: PLUS
16787: ST_TO_ADDR
16788: GO 16810
// p96 = ( 0 + prebytek - mpard ) ;
16790: LD_ADDR_VAR 0 2
16794: PUSH
16795: LD_INT 0
16797: PUSH
16798: LD_EXP 41
16802: PLUS
16803: PUSH
16804: LD_EXP 40
16808: MINUS
16809: ST_TO_ADDR
// for p95 = 1 to p96 do
16810: LD_ADDR_VAR 0 1
16814: PUSH
16815: DOUBLE
16816: LD_INT 1
16818: DEC
16819: ST_TO_ADDR
16820: LD_VAR 0 2
16824: PUSH
16825: FOR_TO
16826: IFFALSE 16845
// destroyunit ( pom_rupo [ p95 ] ) ;
16828: LD_LOC 52
16832: PUSH
16833: LD_VAR 0 1
16837: ARRAY
16838: PPUSH
16839: CALL_OW 65
16843: GO 16825
16845: POP
16846: POP
// end ; pom_rupo = filterunitsinarea ( repairbay , [ [ f_side , rus ] , [ f_type , unit_vehicle ] ] ) isect poskoz ;
16847: LD_ADDR_LOC 52
16851: PUSH
16852: LD_INT 12
16854: PPUSH
16855: LD_INT 22
16857: PUSH
16858: LD_EXP 1
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 21
16869: PUSH
16870: LD_INT 2
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PPUSH
16881: CALL_OW 70
16885: PUSH
16886: LD_EXP 35
16890: ISECT
16891: ST_TO_ADDR
// for kn__ in pom_rupo do
16892: LD_ADDR_LOC 54
16896: PUSH
16897: LD_LOC 52
16901: PUSH
16902: FOR_IN
16903: IFFALSE 17040
// begin driver = isdrivenby ( kn__ ) ;
16905: LD_ADDR_LOC 53
16909: PUSH
16910: LD_LOC 54
16914: PPUSH
16915: CALL_OW 311
16919: ST_TO_ADDR
// comhold ( driver ) ;
16920: LD_LOC 53
16924: PPUSH
16925: CALL_OW 140
// setfuel ( kn__ , 100 ) ;
16929: LD_LOC 54
16933: PPUSH
16934: LD_INT 100
16936: PPUSH
16937: CALL_OW 240
// comexitvehicle ( kn__ ) ;
16941: LD_LOC 54
16945: PPUSH
16946: CALL_OW 121
// wait ( 0 0$0.5 ) ;
16950: LD_INT 18
16952: PPUSH
16953: CALL_OW 67
// addcomrepairvehicle ( [ driver ] , kn__ ) ;
16957: LD_LOC 53
16961: PUSH
16962: EMPTY
16963: LIST
16964: PPUSH
16965: LD_LOC 54
16969: PPUSH
16970: CALL_OW 189
// addcommoveunit ( [ driver ] , kn__ ) ;
16974: LD_LOC 53
16978: PUSH
16979: EMPTY
16980: LIST
16981: PPUSH
16982: LD_LOC 54
16986: PPUSH
16987: CALL_OW 172
// addcomfree ( driver ) ;
16991: LD_LOC 53
16995: PPUSH
16996: CALL_OW 199
// poskoz = poskoz diff [ kn__ ] ;
17000: LD_ADDR_EXP 35
17004: PUSH
17005: LD_EXP 35
17009: PUSH
17010: LD_LOC 54
17014: PUSH
17015: EMPTY
17016: LIST
17017: DIFF
17018: ST_TO_ADDR
// rusove0 = rusove0 ^ [ kn__ ] ;
17019: LD_ADDR_EXP 32
17023: PUSH
17024: LD_EXP 32
17028: PUSH
17029: LD_LOC 54
17033: PUSH
17034: EMPTY
17035: LIST
17036: ADD
17037: ST_TO_ADDR
// end ;
17038: GO 16902
17040: POP
17041: POP
// pom_rupo = filterunitsinarea ( repairbay , [ [ f_side , rus ] , [ f_type , unit_human ] ] ) isect poskoz ;
17042: LD_ADDR_LOC 52
17046: PUSH
17047: LD_INT 12
17049: PPUSH
17050: LD_INT 22
17052: PUSH
17053: LD_EXP 1
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 21
17064: PUSH
17065: LD_INT 1
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PPUSH
17076: CALL_OW 70
17080: PUSH
17081: LD_EXP 35
17085: ISECT
17086: ST_TO_ADDR
// for kn__ in pom_rupo do
17087: LD_ADDR_LOC 54
17091: PUSH
17092: LD_LOC 52
17096: PUSH
17097: FOR_IN
17098: IFFALSE 17140
// begin poskoz = poskoz diff [ kn__ ] ;
17100: LD_ADDR_EXP 35
17104: PUSH
17105: LD_EXP 35
17109: PUSH
17110: LD_LOC 54
17114: PUSH
17115: EMPTY
17116: LIST
17117: DIFF
17118: ST_TO_ADDR
// pacienti = pacienti ^ [ kn__ ] ;
17119: LD_ADDR_EXP 36
17123: PUSH
17124: LD_EXP 36
17128: PUSH
17129: LD_LOC 54
17133: PUSH
17134: EMPTY
17135: LIST
17136: ADD
17137: ST_TO_ADDR
// end ;
17138: GO 17097
17140: POP
17141: POP
// for kn__ in pacienti do
17142: LD_ADDR_LOC 54
17146: PUSH
17147: LD_EXP 36
17151: PUSH
17152: FOR_IN
17153: IFFALSE 17210
// begin if getlives ( kn__ ) >= 950 then
17155: LD_LOC 54
17159: PPUSH
17160: CALL_OW 256
17164: PUSH
17165: LD_INT 950
17167: GREATEREQUAL
17168: IFFALSE 17208
// begin pacienti = pacienti diff [ kn__ ] ;
17170: LD_ADDR_EXP 36
17174: PUSH
17175: LD_EXP 36
17179: PUSH
17180: LD_LOC 54
17184: PUSH
17185: EMPTY
17186: LIST
17187: DIFF
17188: ST_TO_ADDR
// rusove0 = rusove0 ^ [ kn__ ] ;
17189: LD_ADDR_EXP 32
17193: PUSH
17194: LD_EXP 32
17198: PUSH
17199: LD_LOC 54
17203: PUSH
17204: EMPTY
17205: LIST
17206: ADD
17207: ST_TO_ADDR
// end ; end ;
17208: GO 17152
17210: POP
17211: POP
// if pacienti >= 1 then
17212: LD_EXP 36
17216: PUSH
17217: LD_INT 1
17219: GREATEREQUAL
17220: IFFALSE 17240
// comheal ( healeri , pacienti [ 1 ] ) ;
17222: LD_EXP 33
17226: PPUSH
17227: LD_EXP 36
17231: PUSH
17232: LD_INT 1
17234: ARRAY
17235: PPUSH
17236: CALL_OW 128
// enable ;
17240: ENABLE
// end ;
17241: PPOPN 3
17243: END
// on vehiclecaptured ( newid , oldid , origside , cptrdby ) do if origside = rus then
17244: LD_VAR 0 3
17248: PUSH
17249: LD_EXP 1
17253: EQUAL
17254: IFFALSE 17294
// begin rusove0 = rusove0 diff [ oldid ] ;
17256: LD_ADDR_EXP 32
17260: PUSH
17261: LD_EXP 32
17265: PUSH
17266: LD_VAR 0 2
17270: PUSH
17271: EMPTY
17272: LIST
17273: DIFF
17274: ST_TO_ADDR
// poskoz = poskoz diff [ oldid ] ;
17275: LD_ADDR_EXP 35
17279: PUSH
17280: LD_EXP 35
17284: PUSH
17285: LD_VAR 0 2
17289: PUSH
17290: EMPTY
17291: LIST
17292: DIFF
17293: ST_TO_ADDR
// end ; end_of_file
17294: PPOPN 4
17296: END
// every 0 0$1 do
17297: GO 17299
17299: DISABLE
// begin repeat wait ( 0 0$1 ) ;
17300: LD_INT 35
17302: PPUSH
17303: CALL_OW 67
// if depot_done then
17307: LD_EXP 30
17311: IFFALSE 17315
// exit ;
17313: GO 17354
// if UnitFilter ( [ ruhengi1 , ruhengi0 ] , [ f_alive ] ) = 0 then
17315: LD_INT 18
17317: PUSH
17318: LD_INT 2
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PPUSH
17325: LD_INT 51
17327: PUSH
17328: EMPTY
17329: LIST
17330: PPUSH
17331: CALL_OW 72
17335: PUSH
17336: LD_INT 0
17338: EQUAL
17339: IFFALSE 17350
// begin SetAchievement ( ACH_SAN ) ;
17341: LD_STRING ACH_SAN
17343: PPUSH
17344: CALL_OW 543
// exit ;
17348: GO 17354
// end ; until false ;
17350: LD_INT 0
17352: IFFALSE 17300
// end ;
17354: END
// export function SA_BrownAndDonaldsonDead ; begin
17355: LD_INT 0
17357: PPUSH
// SetAchievement ( ACH_ODE ) ;
17358: LD_STRING ACH_ODE
17360: PPUSH
17361: CALL_OW 543
// end ; end_of_file
17365: LD_VAR 0 1
17369: RET
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
17370: LD_INT 0
17372: PPUSH
17373: PPUSH
// if not missionNumber then
17374: LD_VAR 0 2
17378: NOT
17379: IFFALSE 17383
// exit ;
17381: GO 17513
// achiv := false ;
17383: LD_ADDR_VAR 0 7
17387: PUSH
17388: LD_INT 0
17390: ST_TO_ADDR
// case campaignNumber of 1 :
17391: LD_VAR 0 1
17395: PUSH
17396: LD_INT 1
17398: DOUBLE
17399: EQUAL
17400: IFTRUE 17404
17402: GO 17415
17404: POP
// achiv := ACH_GOTA ; 2 :
17405: LD_ADDR_VAR 0 7
17409: PUSH
17410: LD_STRING ACH_GOTA
17412: ST_TO_ADDR
17413: GO 17465
17415: LD_INT 2
17417: DOUBLE
17418: EQUAL
17419: IFTRUE 17423
17421: GO 17426
17423: POP
// ; 3 :
17424: GO 17465
17426: LD_INT 3
17428: DOUBLE
17429: EQUAL
17430: IFTRUE 17434
17432: GO 17445
17434: POP
// achiv := ACH_MOTSU ; 4 :
17435: LD_ADDR_VAR 0 7
17439: PUSH
17440: LD_STRING ACH_MOTSU
17442: ST_TO_ADDR
17443: GO 17465
17445: LD_INT 4
17447: DOUBLE
17448: EQUAL
17449: IFTRUE 17453
17451: GO 17464
17453: POP
// achiv := ACH_LOP ; end ;
17454: LD_ADDR_VAR 0 7
17458: PUSH
17459: LD_STRING ACH_LOP
17461: ST_TO_ADDR
17462: GO 17465
17464: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
17465: LD_OWVAR 67
17469: PUSH
17470: LD_INT 3
17472: EQUAL
17473: PUSH
17474: LD_VAR 0 7
17478: AND
17479: PUSH
17480: LD_VAR 0 3
17484: AND
17485: PUSH
17486: LD_VAR 0 4
17490: AND
17491: PUSH
17492: LD_VAR 0 5
17496: AND
17497: IFFALSE 17513
// SetAchievementEX ( achiv , missionNumber ) ;
17499: LD_VAR 0 7
17503: PPUSH
17504: LD_VAR 0 2
17508: PPUSH
17509: CALL_OW 564
// end ;
17513: LD_VAR 0 6
17517: RET
// export function SA_BehemothConstructed ; begin
17518: LD_INT 0
17520: PPUSH
// SetAchievement ( ACH_SMC ) ;
17521: LD_STRING ACH_SMC
17523: PPUSH
17524: CALL_OW 543
// end ;
17528: LD_VAR 0 1
17532: RET
