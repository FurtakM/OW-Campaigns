// export al , rus , ar , oth ; export maxlidi ; export ars0 , ars1 , ars2 , ars3 , ars4 , ars5 , ars6 , ars7 , ars8 , ars9 , ars10 , arm0 ; export arv1_ch , arv1_wp , arm1_sk , arv2_ch , arv2_wp , arm2_sk , arv3_ch , arv3_wp , arm3_sk , arv4_ch , arv4_wp , arm4_sk , arv5_ch , arv5_wp , arm5_sk , arv6_ch , arv6_wp , arm6_sk , arv7_ch , arv7_wp , arv8_ch , arv8_wp , arv9_ch , arv9_wp , arv10_ch , arv10_wp ; export ruv0_ch , ruv0_wp , ruv1_ch , ruv1_wp , ruv2_ch , ruv2_wp , ruv3_ch , ruv3_wp , ruv4_ch , ruv4_wp , ruv5_ch , ruv5_wp , ruv6_ch , ruv6_wp , ruv7_ch , ruv7_wp , ruv8_ch , ruv8_wp ; export rumech1_sk , rumech2_sk , rumech3_sk , rumech4_sk , rumech5_sk , rumech6_sk , rumech7_sk , rumech8_sk ; export hr_auta , time2wait , delay , arab_artef_zdrh , time2destmasha_ , time2destmasha ; export koncime , debug , artef_out , base_out ; function set_vars ; begin
   0: LD_INT 0
   2: PPUSH
// al = 7 ;
   3: LD_ADDR_EXP 1
   7: PUSH
   8: LD_INT 7
  10: ST_TO_ADDR
// rus = 3 ;
  11: LD_ADDR_EXP 2
  15: PUSH
  16: LD_INT 3
  18: ST_TO_ADDR
// ar = 2 ;
  19: LD_ADDR_EXP 3
  23: PUSH
  24: LD_INT 2
  26: ST_TO_ADDR
// oth = 4 ;
  27: LD_ADDR_EXP 4
  31: PUSH
  32: LD_INT 4
  34: ST_TO_ADDR
// rusove = [ ] ;
  35: LD_ADDR_EXP 115
  39: PUSH
  40: EMPTY
  41: ST_TO_ADDR
// rusoveu = [ ] ;
  42: LD_ADDR_EXP 116
  46: PUSH
  47: EMPTY
  48: ST_TO_ADDR
// maxlidi = 13 ;
  49: LD_ADDR_EXP 5
  53: PUSH
  54: LD_INT 13
  56: ST_TO_ADDR
// burlakmet = false ;
  57: LD_ADDR_EXP 113
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// ar_base_spotted = false ;
  65: LD_ADDR_EXP 153
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// vyjednavalo_se = false ;
  73: LD_ADDR_EXP 114
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// base_out = false ;
  81: LD_ADDR_EXP 79
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// lb1 = false ;
  89: LD_ADDR_EXP 111
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// supplies = 30 ;
  97: LD_ADDR_LOC 3
 101: PUSH
 102: LD_INT 30
 104: ST_TO_ADDR
// cperiode = [ 1 1$30 , 1 1$30 , 1 1$45 ] [ difficulty ] ;
 105: LD_ADDR_LOC 2
 109: PUSH
 110: LD_INT 3150
 112: PUSH
 113: LD_INT 3150
 115: PUSH
 116: LD_INT 3675
 118: PUSH
 119: EMPTY
 120: LIST
 121: LIST
 122: LIST
 123: PUSH
 124: LD_OWVAR 67
 128: ARRAY
 129: ST_TO_ADDR
// hr_auta = [ 500 , 500 , 500 ] [ difficulty ] ;
 130: LD_ADDR_EXP 70
 134: PUSH
 135: LD_INT 500
 137: PUSH
 138: LD_INT 500
 140: PUSH
 141: LD_INT 500
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: PUSH
 149: LD_OWVAR 67
 153: ARRAY
 154: ST_TO_ADDR
// time2wait = [ 3 3$0 , 1 1$30 , 0 0$30 ] [ difficulty ] ;
 155: LD_ADDR_EXP 71
 159: PUSH
 160: LD_INT 6300
 162: PUSH
 163: LD_INT 3150
 165: PUSH
 166: LD_INT 1050
 168: PUSH
 169: EMPTY
 170: LIST
 171: LIST
 172: LIST
 173: PUSH
 174: LD_OWVAR 67
 178: ARRAY
 179: ST_TO_ADDR
// arab_artef_zdrh = [ 30 30$0 , 15 15$0 , 5 5$0 ] [ difficulty ] ;
 180: LD_ADDR_EXP 73
 184: PUSH
 185: LD_INT 63000
 187: PUSH
 188: LD_INT 31500
 190: PUSH
 191: LD_INT 10500
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: LIST
 198: PUSH
 199: LD_OWVAR 67
 203: ARRAY
 204: ST_TO_ADDR
// time2destmasha = [ 10 10$0 , 7 7$0 , 5 5$0 ] [ difficulty ] ;
 205: LD_ADDR_EXP 75
 209: PUSH
 210: LD_INT 21000
 212: PUSH
 213: LD_INT 14700
 215: PUSH
 216: LD_INT 10500
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_OWVAR 67
 228: ARRAY
 229: ST_TO_ADDR
// ars0 = [ 3 , 5 , 7 ] [ difficulty ] ;
 230: LD_ADDR_EXP 6
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 5
 240: PUSH
 241: LD_INT 7
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// ars1 = [ 4 , 6 , 8 ] [ difficulty ] ;
 255: LD_ADDR_EXP 7
 259: PUSH
 260: LD_INT 4
 262: PUSH
 263: LD_INT 6
 265: PUSH
 266: LD_INT 8
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_OWVAR 67
 278: ARRAY
 279: ST_TO_ADDR
// ars2 = [ 4 , 6 , 8 ] [ difficulty ] ;
 280: LD_ADDR_EXP 8
 284: PUSH
 285: LD_INT 4
 287: PUSH
 288: LD_INT 6
 290: PUSH
 291: LD_INT 8
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: LIST
 298: PUSH
 299: LD_OWVAR 67
 303: ARRAY
 304: ST_TO_ADDR
// ars3 = [ 3 , 5 , 7 ] [ difficulty ] ;
 305: LD_ADDR_EXP 9
 309: PUSH
 310: LD_INT 3
 312: PUSH
 313: LD_INT 5
 315: PUSH
 316: LD_INT 7
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: LIST
 323: PUSH
 324: LD_OWVAR 67
 328: ARRAY
 329: ST_TO_ADDR
// ars4 = [ 5 , 7 , 9 ] [ difficulty ] ;
 330: LD_ADDR_EXP 10
 334: PUSH
 335: LD_INT 5
 337: PUSH
 338: LD_INT 7
 340: PUSH
 341: LD_INT 9
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: LIST
 348: PUSH
 349: LD_OWVAR 67
 353: ARRAY
 354: ST_TO_ADDR
// ars5 = [ 4 , 6 , 8 ] [ difficulty ] ;
 355: LD_ADDR_EXP 11
 359: PUSH
 360: LD_INT 4
 362: PUSH
 363: LD_INT 6
 365: PUSH
 366: LD_INT 8
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: PUSH
 374: LD_OWVAR 67
 378: ARRAY
 379: ST_TO_ADDR
// ars6 = [ 4 , 6 , 8 ] [ difficulty ] ;
 380: LD_ADDR_EXP 12
 384: PUSH
 385: LD_INT 4
 387: PUSH
 388: LD_INT 6
 390: PUSH
 391: LD_INT 8
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: LIST
 398: PUSH
 399: LD_OWVAR 67
 403: ARRAY
 404: ST_TO_ADDR
// ars7 = [ 3 , 5 , 7 ] [ difficulty ] ;
 405: LD_ADDR_EXP 13
 409: PUSH
 410: LD_INT 3
 412: PUSH
 413: LD_INT 5
 415: PUSH
 416: LD_INT 7
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: LIST
 423: PUSH
 424: LD_OWVAR 67
 428: ARRAY
 429: ST_TO_ADDR
// ars8 = [ 4 , 6 , 8 ] [ difficulty ] ;
 430: LD_ADDR_EXP 14
 434: PUSH
 435: LD_INT 4
 437: PUSH
 438: LD_INT 6
 440: PUSH
 441: LD_INT 8
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: PUSH
 449: LD_OWVAR 67
 453: ARRAY
 454: ST_TO_ADDR
// ars9 = [ 4 , 6 , 8 ] [ difficulty ] ;
 455: LD_ADDR_EXP 15
 459: PUSH
 460: LD_INT 4
 462: PUSH
 463: LD_INT 6
 465: PUSH
 466: LD_INT 8
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: LIST
 473: PUSH
 474: LD_OWVAR 67
 478: ARRAY
 479: ST_TO_ADDR
// ars10 = [ 4 , 6 , 8 ] [ difficulty ] ;
 480: LD_ADDR_EXP 16
 484: PUSH
 485: LD_INT 4
 487: PUSH
 488: LD_INT 6
 490: PUSH
 491: LD_INT 8
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: LD_OWVAR 67
 503: ARRAY
 504: ST_TO_ADDR
// ruv0_ch = [ ru_medium_wheeled , ru_medium_wheeled , ru_medium_wheeled ] [ difficulty ] ;
 505: LD_ADDR_EXP 44
 509: PUSH
 510: LD_INT 21
 512: PUSH
 513: LD_INT 21
 515: PUSH
 516: LD_INT 21
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: LIST
 523: PUSH
 524: LD_OWVAR 67
 528: ARRAY
 529: ST_TO_ADDR
// ruv0_wp = [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_heavy_machine_gun ] [ difficulty ] ;
 530: LD_ADDR_EXP 45
 534: PUSH
 535: LD_INT 42
 537: PUSH
 538: LD_INT 42
 540: PUSH
 541: LD_INT 42
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: LIST
 548: PUSH
 549: LD_OWVAR 67
 553: ARRAY
 554: ST_TO_ADDR
// ruv1_ch = [ ru_medium_wheeled , ru_medium_wheeled , ru_medium_wheeled ] [ difficulty ] ;
 555: LD_ADDR_EXP 46
 559: PUSH
 560: LD_INT 21
 562: PUSH
 563: LD_INT 21
 565: PUSH
 566: LD_INT 21
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: PUSH
 574: LD_OWVAR 67
 578: ARRAY
 579: ST_TO_ADDR
// ruv1_wp = [ ru_gatling_gun , ru_gatling_gun , ru_gun ] [ difficulty ] ;
 580: LD_ADDR_EXP 47
 584: PUSH
 585: LD_INT 43
 587: PUSH
 588: LD_INT 43
 590: PUSH
 591: LD_INT 44
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: PUSH
 599: LD_OWVAR 67
 603: ARRAY
 604: ST_TO_ADDR
// rumech1_sk = [ 4 , 6 , 7 ] [ difficulty ] ;
 605: LD_ADDR_EXP 62
 609: PUSH
 610: LD_INT 4
 612: PUSH
 613: LD_INT 6
 615: PUSH
 616: LD_INT 7
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_OWVAR 67
 628: ARRAY
 629: ST_TO_ADDR
// ruv2_ch = [ ru_heavy_wheeled , ru_heavy_wheeled , ru_heavy_wheeled ] [ difficulty ] ;
 630: LD_ADDR_EXP 48
 634: PUSH
 635: LD_INT 23
 637: PUSH
 638: LD_INT 23
 640: PUSH
 641: LD_INT 23
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: LD_OWVAR 67
 653: ARRAY
 654: ST_TO_ADDR
// ruv2_wp = [ ru_heavy_gun , ru_heavy_gun , ru_heavy_gun ] [ difficulty ] ;
 655: LD_ADDR_EXP 49
 659: PUSH
 660: LD_INT 46
 662: PUSH
 663: LD_INT 46
 665: PUSH
 666: LD_INT 46
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: PUSH
 674: LD_OWVAR 67
 678: ARRAY
 679: ST_TO_ADDR
// rumech2_sk = [ 3 , 5 , 7 ] [ difficulty ] ;
 680: LD_ADDR_EXP 63
 684: PUSH
 685: LD_INT 3
 687: PUSH
 688: LD_INT 5
 690: PUSH
 691: LD_INT 7
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: LIST
 698: PUSH
 699: LD_OWVAR 67
 703: ARRAY
 704: ST_TO_ADDR
// ruv3_ch = [ ru_medium_tracked , ru_medium_tracked , ru_medium_tracked ] [ difficulty ] ;
 705: LD_ADDR_EXP 50
 709: PUSH
 710: LD_INT 22
 712: PUSH
 713: LD_INT 22
 715: PUSH
 716: LD_INT 22
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: LIST
 723: PUSH
 724: LD_OWVAR 67
 728: ARRAY
 729: ST_TO_ADDR
// ruv3_wp = [ ru_gatling_gun , ru_gatling_gun , ru_gatling_gun ] [ difficulty ] ;
 730: LD_ADDR_EXP 51
 734: PUSH
 735: LD_INT 43
 737: PUSH
 738: LD_INT 43
 740: PUSH
 741: LD_INT 43
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: LIST
 748: PUSH
 749: LD_OWVAR 67
 753: ARRAY
 754: ST_TO_ADDR
// rumech3_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 755: LD_ADDR_EXP 64
 759: PUSH
 760: LD_INT 5
 762: PUSH
 763: LD_INT 7
 765: PUSH
 766: LD_INT 9
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: LIST
 773: PUSH
 774: LD_OWVAR 67
 778: ARRAY
 779: ST_TO_ADDR
// ruv4_ch = [ ru_medium_wheeled , ru_medium_wheeled , ru_medium_tracked ] [ difficulty ] ;
 780: LD_ADDR_EXP 52
 784: PUSH
 785: LD_INT 21
 787: PUSH
 788: LD_INT 21
 790: PUSH
 791: LD_INT 22
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: LIST
 798: PUSH
 799: LD_OWVAR 67
 803: ARRAY
 804: ST_TO_ADDR
// ruv4_wp = [ ru_gatling_gun , ru_gatling_gun , ru_gatling_gun ] [ difficulty ] ;
 805: LD_ADDR_EXP 53
 809: PUSH
 810: LD_INT 43
 812: PUSH
 813: LD_INT 43
 815: PUSH
 816: LD_INT 43
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: LIST
 823: PUSH
 824: LD_OWVAR 67
 828: ARRAY
 829: ST_TO_ADDR
// rumech4_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
 830: LD_ADDR_EXP 65
 834: PUSH
 835: LD_INT 4
 837: PUSH
 838: LD_INT 6
 840: PUSH
 841: LD_INT 8
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: LIST
 848: PUSH
 849: LD_OWVAR 67
 853: ARRAY
 854: ST_TO_ADDR
// ruv5_ch = [ ru_heavy_wheeled , ru_heavy_wheeled , ru_heavy_wheeled ] [ difficulty ] ;
 855: LD_ADDR_EXP 54
 859: PUSH
 860: LD_INT 23
 862: PUSH
 863: LD_INT 23
 865: PUSH
 866: LD_INT 23
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: PUSH
 874: LD_OWVAR 67
 878: ARRAY
 879: ST_TO_ADDR
// ruv5_wp = [ ru_gun , ru_heavy_gun , ru_heavy_gun ] [ difficulty ] ;
 880: LD_ADDR_EXP 55
 884: PUSH
 885: LD_INT 44
 887: PUSH
 888: LD_INT 46
 890: PUSH
 891: LD_INT 46
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: LIST
 898: PUSH
 899: LD_OWVAR 67
 903: ARRAY
 904: ST_TO_ADDR
// rumech5_sk = [ 4 , 5 , 8 ] [ difficulty ] ;
 905: LD_ADDR_EXP 66
 909: PUSH
 910: LD_INT 4
 912: PUSH
 913: LD_INT 5
 915: PUSH
 916: LD_INT 8
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_OWVAR 67
 928: ARRAY
 929: ST_TO_ADDR
// ruv6_ch = [ ru_medium_tracked , ru_medium_tracked , ru_medium_tracked ] [ difficulty ] ;
 930: LD_ADDR_EXP 56
 934: PUSH
 935: LD_INT 22
 937: PUSH
 938: LD_INT 22
 940: PUSH
 941: LD_INT 22
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: LIST
 948: PUSH
 949: LD_OWVAR 67
 953: ARRAY
 954: ST_TO_ADDR
// ruv6_wp = [ ru_rocket_launcher , ru_rocket_launcher , ru_rocket_launcher ] [ difficulty ] ;
 955: LD_ADDR_EXP 57
 959: PUSH
 960: LD_INT 45
 962: PUSH
 963: LD_INT 45
 965: PUSH
 966: LD_INT 45
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: LIST
 973: PUSH
 974: LD_OWVAR 67
 978: ARRAY
 979: ST_TO_ADDR
// rumech6_sk = [ 4 , 7 , 9 ] [ difficulty ] ;
 980: LD_ADDR_EXP 67
 984: PUSH
 985: LD_INT 4
 987: PUSH
 988: LD_INT 7
 990: PUSH
 991: LD_INT 9
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: PUSH
 999: LD_OWVAR 67
1003: ARRAY
1004: ST_TO_ADDR
// ruv7_ch = [ ru_medium_tracked , ru_medium_tracked , ru_medium_tracked ] [ difficulty ] ;
1005: LD_ADDR_EXP 58
1009: PUSH
1010: LD_INT 22
1012: PUSH
1013: LD_INT 22
1015: PUSH
1016: LD_INT 22
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: LIST
1023: PUSH
1024: LD_OWVAR 67
1028: ARRAY
1029: ST_TO_ADDR
// ruv7_wp = [ ru_gun , ru_gun , ru_gun ] [ difficulty ] ;
1030: LD_ADDR_EXP 59
1034: PUSH
1035: LD_INT 44
1037: PUSH
1038: LD_INT 44
1040: PUSH
1041: LD_INT 44
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: LIST
1048: PUSH
1049: LD_OWVAR 67
1053: ARRAY
1054: ST_TO_ADDR
// rumech7_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
1055: LD_ADDR_EXP 68
1059: PUSH
1060: LD_INT 5
1062: PUSH
1063: LD_INT 7
1065: PUSH
1066: LD_INT 9
1068: PUSH
1069: EMPTY
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: LD_OWVAR 67
1078: ARRAY
1079: ST_TO_ADDR
// ruv8_ch = [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ difficulty ] ;
1080: LD_ADDR_EXP 60
1084: PUSH
1085: LD_INT 21
1087: PUSH
1088: LD_INT 23
1090: PUSH
1091: LD_INT 24
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: LIST
1098: PUSH
1099: LD_OWVAR 67
1103: ARRAY
1104: ST_TO_ADDR
// ruv8_wp = [ ru_gatling_gun , ru_gatling_gun , ru_gatling_gun ] [ difficulty ] ;
1105: LD_ADDR_EXP 61
1109: PUSH
1110: LD_INT 43
1112: PUSH
1113: LD_INT 43
1115: PUSH
1116: LD_INT 43
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: PUSH
1124: LD_OWVAR 67
1128: ARRAY
1129: ST_TO_ADDR
// rumech8_sk = [ 5 , 7 , 8 ] [ difficulty ] ;
1130: LD_ADDR_EXP 69
1134: PUSH
1135: LD_INT 5
1137: PUSH
1138: LD_INT 7
1140: PUSH
1141: LD_INT 8
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: PUSH
1149: LD_OWVAR 67
1153: ARRAY
1154: ST_TO_ADDR
// arm0 = [ 6 , 8 , 10 ] [ difficulty ] ;
1155: LD_ADDR_EXP 17
1159: PUSH
1160: LD_INT 6
1162: PUSH
1163: LD_INT 8
1165: PUSH
1166: LD_INT 10
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: LD_OWVAR 67
1178: ARRAY
1179: ST_TO_ADDR
// arv1_ch = [ ar_medium_trike , ar_half_tracked , ar_half_tracked ] [ difficulty ] ;
1180: LD_ADDR_EXP 18
1184: PUSH
1185: LD_INT 13
1187: PUSH
1188: LD_INT 14
1190: PUSH
1191: LD_INT 14
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: LIST
1198: PUSH
1199: LD_OWVAR 67
1203: ARRAY
1204: ST_TO_ADDR
// arv1_wp = [ ar_flame_thrower , ar_flame_thrower , ar_flame_thrower ] [ difficulty ] ;
1205: LD_ADDR_EXP 19
1209: PUSH
1210: LD_INT 26
1212: PUSH
1213: LD_INT 26
1215: PUSH
1216: LD_INT 26
1218: PUSH
1219: EMPTY
1220: LIST
1221: LIST
1222: LIST
1223: PUSH
1224: LD_OWVAR 67
1228: ARRAY
1229: ST_TO_ADDR
// arm1_sk = [ 3 , 6 , 8 ] [ difficulty ] ;
1230: LD_ADDR_EXP 20
1234: PUSH
1235: LD_INT 3
1237: PUSH
1238: LD_INT 6
1240: PUSH
1241: LD_INT 8
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: PUSH
1249: LD_OWVAR 67
1253: ARRAY
1254: ST_TO_ADDR
// arv2_ch = [ ar_medium_trike , ar_medium_trike , ar_medium_trike ] [ difficulty ] ;
1255: LD_ADDR_EXP 21
1259: PUSH
1260: LD_INT 13
1262: PUSH
1263: LD_INT 13
1265: PUSH
1266: LD_INT 13
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: LIST
1273: PUSH
1274: LD_OWVAR 67
1278: ARRAY
1279: ST_TO_ADDR
// arv2_wp = [ ar_double_machine_gun , ar_gatling_gun , ar_gatling_gun ] [ difficulty ] ;
1280: LD_ADDR_EXP 22
1284: PUSH
1285: LD_INT 24
1287: PUSH
1288: LD_INT 25
1290: PUSH
1291: LD_INT 25
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: LIST
1298: PUSH
1299: LD_OWVAR 67
1303: ARRAY
1304: ST_TO_ADDR
// arm2_sk = [ 4 , 6 , 9 ] [ difficulty ] ;
1305: LD_ADDR_EXP 23
1309: PUSH
1310: LD_INT 4
1312: PUSH
1313: LD_INT 6
1315: PUSH
1316: LD_INT 9
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: LIST
1323: PUSH
1324: LD_OWVAR 67
1328: ARRAY
1329: ST_TO_ADDR
// arv3_ch = [ ar_medium_trike , ar_half_tracked , ar_half_tracked ] [ difficulty ] ;
1330: LD_ADDR_EXP 24
1334: PUSH
1335: LD_INT 13
1337: PUSH
1338: LD_INT 14
1340: PUSH
1341: LD_INT 14
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_OWVAR 67
1353: ARRAY
1354: ST_TO_ADDR
// arv3_wp = [ ar_gun , ar_gun , ar_gun ] [ difficulty ] ;
1355: LD_ADDR_EXP 25
1359: PUSH
1360: LD_INT 27
1362: PUSH
1363: LD_INT 27
1365: PUSH
1366: LD_INT 27
1368: PUSH
1369: EMPTY
1370: LIST
1371: LIST
1372: LIST
1373: PUSH
1374: LD_OWVAR 67
1378: ARRAY
1379: ST_TO_ADDR
// arm3_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
1380: LD_ADDR_EXP 26
1384: PUSH
1385: LD_INT 4
1387: PUSH
1388: LD_INT 6
1390: PUSH
1391: LD_INT 8
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_OWVAR 67
1403: ARRAY
1404: ST_TO_ADDR
// arv4_ch = [ ar_medium_trike , ar_medium_trike , ar_half_tracked ] [ difficulty ] ;
1405: LD_ADDR_EXP 27
1409: PUSH
1410: LD_INT 13
1412: PUSH
1413: LD_INT 13
1415: PUSH
1416: LD_INT 14
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: LIST
1423: PUSH
1424: LD_OWVAR 67
1428: ARRAY
1429: ST_TO_ADDR
// arv4_wp = [ ar_double_machine_gun , ar_gatling_gun , ar_gatling_gun ] [ difficulty ] ;
1430: LD_ADDR_EXP 28
1434: PUSH
1435: LD_INT 24
1437: PUSH
1438: LD_INT 25
1440: PUSH
1441: LD_INT 25
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: LIST
1448: PUSH
1449: LD_OWVAR 67
1453: ARRAY
1454: ST_TO_ADDR
// arm4_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
1455: LD_ADDR_EXP 29
1459: PUSH
1460: LD_INT 4
1462: PUSH
1463: LD_INT 6
1465: PUSH
1466: LD_INT 8
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: PUSH
1474: LD_OWVAR 67
1478: ARRAY
1479: ST_TO_ADDR
// arv5_ch = [ ar_hovercraft , ar_hovercraft , ar_hovercraft ] [ difficulty ] ;
1480: LD_ADDR_EXP 30
1484: PUSH
1485: LD_INT 11
1487: PUSH
1488: LD_INT 11
1490: PUSH
1491: LD_INT 11
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: LIST
1498: PUSH
1499: LD_OWVAR 67
1503: ARRAY
1504: ST_TO_ADDR
// arv5_wp = [ ar_multimissile_ballista , ar_double_machine_gun , ar_double_machine_gun ] [ difficulty ] ;
1505: LD_ADDR_EXP 31
1509: PUSH
1510: LD_INT 22
1512: PUSH
1513: LD_INT 24
1515: PUSH
1516: LD_INT 24
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: LIST
1523: PUSH
1524: LD_OWVAR 67
1528: ARRAY
1529: ST_TO_ADDR
// arm5_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
1530: LD_ADDR_EXP 32
1534: PUSH
1535: LD_INT 5
1537: PUSH
1538: LD_INT 7
1540: PUSH
1541: LD_INT 9
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: LIST
1548: PUSH
1549: LD_OWVAR 67
1553: ARRAY
1554: ST_TO_ADDR
// arv6_ch = [ ar_medium_trike , ar_medium_trike , ar_half_tracked ] [ difficulty ] ;
1555: LD_ADDR_EXP 33
1559: PUSH
1560: LD_INT 13
1562: PUSH
1563: LD_INT 13
1565: PUSH
1566: LD_INT 14
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: LIST
1573: PUSH
1574: LD_OWVAR 67
1578: ARRAY
1579: ST_TO_ADDR
// arv6_wp = [ ar_double_machine_gun , ar_gatling_gun , ar_gatling_gun ] [ difficulty ] ;
1580: LD_ADDR_EXP 34
1584: PUSH
1585: LD_INT 24
1587: PUSH
1588: LD_INT 25
1590: PUSH
1591: LD_INT 25
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: LIST
1598: PUSH
1599: LD_OWVAR 67
1603: ARRAY
1604: ST_TO_ADDR
// arm6_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
1605: LD_ADDR_EXP 35
1609: PUSH
1610: LD_INT 4
1612: PUSH
1613: LD_INT 6
1615: PUSH
1616: LD_INT 8
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_OWVAR 67
1628: ARRAY
1629: ST_TO_ADDR
// arv7_ch = [ 0 , ar_medium_trike , ar_half_tracked ] [ difficulty ] ;
1630: LD_ADDR_EXP 36
1634: PUSH
1635: LD_INT 0
1637: PUSH
1638: LD_INT 13
1640: PUSH
1641: LD_INT 14
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: LIST
1648: PUSH
1649: LD_OWVAR 67
1653: ARRAY
1654: ST_TO_ADDR
// arv7_wp = [ 0 , ar_rocket_launcher , ar_rocket_launcher ] [ difficulty ] ;
1655: LD_ADDR_EXP 37
1659: PUSH
1660: LD_INT 0
1662: PUSH
1663: LD_INT 28
1665: PUSH
1666: LD_INT 28
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: LIST
1673: PUSH
1674: LD_OWVAR 67
1678: ARRAY
1679: ST_TO_ADDR
// arv8_ch = [ 0 , ar_medium_trike , ar_half_tracked ] [ difficulty ] ;
1680: LD_ADDR_EXP 38
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 13
1690: PUSH
1691: LD_INT 14
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: PUSH
1699: LD_OWVAR 67
1703: ARRAY
1704: ST_TO_ADDR
// arv8_wp = [ 0 , ar_gun , ar_gun ] [ difficulty ] ;
1705: LD_ADDR_EXP 39
1709: PUSH
1710: LD_INT 0
1712: PUSH
1713: LD_INT 27
1715: PUSH
1716: LD_INT 27
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: LIST
1723: PUSH
1724: LD_OWVAR 67
1728: ARRAY
1729: ST_TO_ADDR
// arv9_ch = ar_half_tracked ;
1730: LD_ADDR_EXP 40
1734: PUSH
1735: LD_INT 14
1737: ST_TO_ADDR
// arv9_wp = ar_flame_thrower ;
1738: LD_ADDR_EXP 41
1742: PUSH
1743: LD_INT 26
1745: ST_TO_ADDR
// arv10_ch = ar_medium_trike ;
1746: LD_ADDR_EXP 42
1750: PUSH
1751: LD_INT 13
1753: ST_TO_ADDR
// arv10_wp = ar_flame_thrower ;
1754: LD_ADDR_EXP 43
1758: PUSH
1759: LD_INT 26
1761: ST_TO_ADDR
// setblevel ( [ arbunk0 , arbunk1 , arbunk2 , arbunk3 , arbunk4 , arbunk5 ] , [ 5 , 7 , 9 ] [ difficulty ] ) ;
1762: LD_INT 14
1764: PUSH
1765: LD_INT 15
1767: PUSH
1768: LD_INT 13
1770: PUSH
1771: LD_INT 16
1773: PUSH
1774: LD_INT 17
1776: PUSH
1777: LD_INT 18
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: PPUSH
1788: LD_INT 5
1790: PUSH
1791: LD_INT 7
1793: PUSH
1794: LD_INT 9
1796: PUSH
1797: EMPTY
1798: LIST
1799: LIST
1800: LIST
1801: PUSH
1802: LD_OWVAR 67
1806: ARRAY
1807: PPUSH
1808: CALL_OW 241
// setblevel ( [ arbarr ] , [ 4 , 6 , 8 ] [ difficulty ] ) ;
1812: LD_INT 2
1814: PUSH
1815: EMPTY
1816: LIST
1817: PPUSH
1818: LD_INT 4
1820: PUSH
1821: LD_INT 6
1823: PUSH
1824: LD_INT 8
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: LIST
1831: PUSH
1832: LD_OWVAR 67
1836: ARRAY
1837: PPUSH
1838: CALL_OW 241
// time2destmasha_ = time2destmasha ;
1842: LD_ADDR_EXP 74
1846: PUSH
1847: LD_EXP 75
1851: ST_TO_ADDR
// end ;
1852: LD_VAR 0 1
1856: RET
// starting begin debug = false ;
1857: LD_ADDR_EXP 77
1861: PUSH
1862: LD_INT 0
1864: ST_TO_ADDR
// koncime = false ;
1865: LD_ADDR_EXP 76
1869: PUSH
1870: LD_INT 0
1872: ST_TO_ADDR
// set_vars ;
1873: CALL 0 0 0
// cper = cperiode ;
1877: LD_ADDR_LOC 1
1881: PUSH
1882: LD_LOC 2
1886: ST_TO_ADDR
// delay = time2wait ;
1887: LD_ADDR_EXP 72
1891: PUSH
1892: LD_EXP 71
1896: ST_TO_ADDR
// artef_out = false ;
1897: LD_ADDR_EXP 78
1901: PUSH
1902: LD_INT 0
1904: ST_TO_ADDR
// disable ( 01 ) ;
1905: LD_INT 1
1907: DISABLE_MARKED
// disable ( 02 ) ;
1908: LD_INT 2
1910: DISABLE_MARKED
// disable ( 03 ) ;
1911: LD_INT 3
1913: DISABLE_MARKED
// disable ( 04 ) ;
1914: LD_INT 4
1916: DISABLE_MARKED
// disable ( 05 ) ;
1917: LD_INT 5
1919: DISABLE_MARKED
// disable ( 07 ) ;
1920: LD_INT 7
1922: DISABLE_MARKED
// disable ( 09 ) ;
1923: LD_INT 9
1925: DISABLE_MARKED
// disable ( 10 ) ;
1926: LD_INT 10
1928: DISABLE_MARKED
// disable ( 12 ) ;
1929: LD_INT 12
1931: DISABLE_MARKED
// disable ( 13 ) ;
1932: LD_INT 13
1934: DISABLE_MARKED
// disable ( 14 ) ;
1935: LD_INT 14
1937: DISABLE_MARKED
// disable ( 15 ) ;
1938: LD_INT 15
1940: DISABLE_MARKED
// disable ( 37 ) ;
1941: LD_INT 37
1943: DISABLE_MARKED
// revealfogarea ( al , revfog ) ;
1944: LD_EXP 1
1948: PPUSH
1949: LD_INT 8
1951: PPUSH
1952: CALL_OW 332
// if debug then
1956: LD_EXP 77
1960: IFFALSE 1969
// msg ( Bacha debug je on! ) ;
1962: LD_STRING Bacha debug je on!
1964: PPUSH
1965: CALL_OW 100
// prepare_arabians ;
1969: CALL 10924 0 0
// prepare_americans ;
1973: CALL 2153 0 0
// end ;
1977: END
// var cper , cperiode , supplies ; every 0 0$15 + 0 0$45 do
1978: GO 1980
1980: DISABLE
// begin cper = cper - 0 0$15 ;
1981: LD_ADDR_LOC 1
1985: PUSH
1986: LD_LOC 1
1990: PUSH
1991: LD_INT 525
1993: MINUS
1994: ST_TO_ADDR
// if cper = 0 then
1995: LD_LOC 1
1999: PUSH
2000: LD_INT 0
2002: EQUAL
2003: IFFALSE 2055
// begin createcratesarea ( 5 , dropzone , true ) ;
2005: LD_INT 5
2007: PPUSH
2008: LD_INT 1
2010: PPUSH
2011: LD_INT 1
2013: PPUSH
2014: CALL_OW 55
// if ( supplies > 1 ) then
2018: LD_LOC 3
2022: PUSH
2023: LD_INT 1
2025: GREATER
2026: IFFALSE 2043
// begin supplies = supplies - 1 ;
2028: LD_ADDR_LOC 3
2032: PUSH
2033: LD_LOC 3
2037: PUSH
2038: LD_INT 1
2040: MINUS
2041: ST_TO_ADDR
// enable ;
2042: ENABLE
// end ; cper = cperiode ;
2043: LD_ADDR_LOC 1
2047: PUSH
2048: LD_LOC 2
2052: ST_TO_ADDR
// end else
2053: GO 2056
// enable ;
2055: ENABLE
// end ;
2056: END
// every 0 0$7 do
2057: GO 2059
2059: DISABLE
// begin randomize ;
2060: CALL_OW 10
// if debug then
2064: LD_EXP 77
2068: IFFALSE 2083
// debug_strings = [ cper ] ;
2070: LD_ADDR_OWVAR 48
2074: PUSH
2075: LD_LOC 1
2079: PUSH
2080: EMPTY
2081: LIST
2082: ST_TO_ADDR
// enable ;
2083: ENABLE
// end ;
2084: END
// every 0 0$20 do
2085: GO 2087
2087: DISABLE
// createcratesarea ( 5 , stred , true ) ;
2088: LD_INT 5
2090: PPUSH
2091: LD_INT 2
2093: PPUSH
2094: LD_INT 1
2096: PPUSH
2097: CALL_OW 55
2101: END
// every 0 0$30 do
2102: GO 2104
2104: DISABLE
// createcratesarea ( 5 , stred , true ) ;
2105: LD_INT 5
2107: PPUSH
2108: LD_INT 2
2110: PPUSH
2111: LD_INT 1
2113: PPUSH
2114: CALL_OW 55
2118: END
// every 0 0$45 do
2119: GO 2121
2121: DISABLE
// createcratesarea ( 5 , stred , true ) ;
2122: LD_INT 5
2124: PPUSH
2125: LD_INT 2
2127: PPUSH
2128: LD_INT 1
2130: PPUSH
2131: CALL_OW 55
2135: END
// every 0 0$55 do
2136: GO 2138
2138: DISABLE
// createcratesarea ( 5 , stred , true ) ; end_of_file
2139: LD_INT 5
2141: PPUSH
2142: LD_INT 2
2144: PPUSH
2145: LD_INT 1
2147: PPUSH
2148: CALL_OW 55
2152: END
// export john , roth , joan , bobby , cyrus , lisa , frank , markc , tim , denis , yamoko , gary , simms , zbytekze12 ; export brown , lucy ; var plidi ; export function prepare_americans ; var tmp , old_al , lidi ; begin
2153: LD_INT 0
2155: PPUSH
2156: PPUSH
2157: PPUSH
2158: PPUSH
// uc_side = al ;
2159: LD_ADDR_OWVAR 20
2163: PUSH
2164: LD_EXP 1
2168: ST_TO_ADDR
// old_al = 7 ;
2169: LD_ADDR_VAR 0 3
2173: PUSH
2174: LD_INT 7
2176: ST_TO_ADDR
// if checkcharacterset ( JMM ) then
2177: LD_STRING JMM
2179: PPUSH
2180: CALL_OW 29
2184: IFFALSE 2204
// john = createcharacterwithclass ( JMM , class_engineer ) else
2186: LD_ADDR_EXP 80
2190: PUSH
2191: LD_STRING JMM
2193: PPUSH
2194: LD_INT 2
2196: PPUSH
2197: CALL_OW 35
2201: ST_TO_ADDR
2202: GO 2217
// buildquery ( neny JMM , [ OK ] ) ;
2204: LD_STRING neny JMM
2206: PPUSH
2207: LD_STRING OK
2209: PUSH
2210: EMPTY
2211: LIST
2212: PPUSH
2213: CALL_OW 99
// placeunitxyr ( john , 62 , 25 , 3 , false ) ;
2217: LD_EXP 80
2221: PPUSH
2222: LD_INT 62
2224: PPUSH
2225: LD_INT 25
2227: PPUSH
2228: LD_INT 3
2230: PPUSH
2231: LD_INT 0
2233: PPUSH
2234: CALL_OW 50
// roth = newcharacter ( Roth ) ;
2238: LD_ADDR_EXP 81
2242: PUSH
2243: LD_STRING Roth
2245: PPUSH
2246: CALL_OW 25
2250: ST_TO_ADDR
// if not roth then
2251: LD_EXP 81
2255: NOT
2256: IFFALSE 2271
// buildquery ( neny Roth , [ OK ] ) ;
2258: LD_STRING neny Roth
2260: PPUSH
2261: LD_STRING OK
2263: PUSH
2264: EMPTY
2265: LIST
2266: PPUSH
2267: CALL_OW 99
// placeunitxyr ( roth , 62 , 25 , 3 , false ) ;
2271: LD_EXP 81
2275: PPUSH
2276: LD_INT 62
2278: PPUSH
2279: LD_INT 25
2281: PPUSH
2282: LD_INT 3
2284: PPUSH
2285: LD_INT 0
2287: PPUSH
2288: CALL_OW 50
// joan = 0 ;
2292: LD_ADDR_EXP 82
2296: PUSH
2297: LD_INT 0
2299: ST_TO_ADDR
// if checkcharacterset ( Joan ) then
2300: LD_STRING Joan
2302: PPUSH
2303: CALL_OW 29
2307: IFFALSE 2396
// begin if testvariable ( joan_side ) then
2309: LD_STRING joan_side
2311: PPUSH
2312: CALL_OW 27
2316: IFFALSE 2337
// tmp = loadvariable ( joan_side , - 1 ) else
2318: LD_ADDR_VAR 0 2
2322: PUSH
2323: LD_STRING joan_side
2325: PPUSH
2326: LD_INT 1
2328: NEG
2329: PPUSH
2330: CALL_OW 30
2334: ST_TO_ADDR
2335: GO 2350
// buildquery ( neny joan_side , [ OK ] ) ;
2337: LD_STRING neny joan_side
2339: PPUSH
2340: LD_STRING OK
2342: PUSH
2343: EMPTY
2344: LIST
2345: PPUSH
2346: CALL_OW 99
// if tmp = old_al then
2350: LD_VAR 0 2
2354: PUSH
2355: LD_VAR 0 3
2359: EQUAL
2360: IFFALSE 2375
// joan = createcharacter ( Joan ) ;
2362: LD_ADDR_EXP 82
2366: PUSH
2367: LD_STRING Joan
2369: PPUSH
2370: CALL_OW 34
2374: ST_TO_ADDR
// placeunitxyr ( joan , 62 , 25 , 3 , false ) ;
2375: LD_EXP 82
2379: PPUSH
2380: LD_INT 62
2382: PPUSH
2383: LD_INT 25
2385: PPUSH
2386: LD_INT 3
2388: PPUSH
2389: LD_INT 0
2391: PPUSH
2392: CALL_OW 50
// end ; bobby = 0 ;
2396: LD_ADDR_EXP 83
2400: PUSH
2401: LD_INT 0
2403: ST_TO_ADDR
// if checkcharacterset ( Bobby ) then
2404: LD_STRING Bobby
2406: PPUSH
2407: CALL_OW 29
2411: IFFALSE 2500
// begin if testvariable ( bobby_side ) then
2413: LD_STRING bobby_side
2415: PPUSH
2416: CALL_OW 27
2420: IFFALSE 2441
// tmp = loadvariable ( bobby_side , - 1 ) else
2422: LD_ADDR_VAR 0 2
2426: PUSH
2427: LD_STRING bobby_side
2429: PPUSH
2430: LD_INT 1
2432: NEG
2433: PPUSH
2434: CALL_OW 30
2438: ST_TO_ADDR
2439: GO 2454
// buildquery ( neny bobby_side , [ OK ] ) ;
2441: LD_STRING neny bobby_side
2443: PPUSH
2444: LD_STRING OK
2446: PUSH
2447: EMPTY
2448: LIST
2449: PPUSH
2450: CALL_OW 99
// if tmp = old_al then
2454: LD_VAR 0 2
2458: PUSH
2459: LD_VAR 0 3
2463: EQUAL
2464: IFFALSE 2479
// bobby = createcharacter ( Bobby ) ;
2466: LD_ADDR_EXP 83
2470: PUSH
2471: LD_STRING Bobby
2473: PPUSH
2474: CALL_OW 34
2478: ST_TO_ADDR
// placeunitxyr ( bobby , 62 , 25 , 3 , false ) ;
2479: LD_EXP 83
2483: PPUSH
2484: LD_INT 62
2486: PPUSH
2487: LD_INT 25
2489: PPUSH
2490: LD_INT 3
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: CALL_OW 50
// end ; cyrus = 0 ;
2500: LD_ADDR_EXP 84
2504: PUSH
2505: LD_INT 0
2507: ST_TO_ADDR
// if checkcharacterset ( Cyrus ) then
2508: LD_STRING Cyrus
2510: PPUSH
2511: CALL_OW 29
2515: IFFALSE 2604
// begin if testvariable ( cyrus_side ) then
2517: LD_STRING cyrus_side
2519: PPUSH
2520: CALL_OW 27
2524: IFFALSE 2545
// tmp = loadvariable ( cyrus_side , - 1 ) else
2526: LD_ADDR_VAR 0 2
2530: PUSH
2531: LD_STRING cyrus_side
2533: PPUSH
2534: LD_INT 1
2536: NEG
2537: PPUSH
2538: CALL_OW 30
2542: ST_TO_ADDR
2543: GO 2558
// buildquery ( neny cyrus_side , [ OK ] ) ;
2545: LD_STRING neny cyrus_side
2547: PPUSH
2548: LD_STRING OK
2550: PUSH
2551: EMPTY
2552: LIST
2553: PPUSH
2554: CALL_OW 99
// if tmp = old_al then
2558: LD_VAR 0 2
2562: PUSH
2563: LD_VAR 0 3
2567: EQUAL
2568: IFFALSE 2583
// cyrus = createcharacter ( Cyrus ) ;
2570: LD_ADDR_EXP 84
2574: PUSH
2575: LD_STRING Cyrus
2577: PPUSH
2578: CALL_OW 34
2582: ST_TO_ADDR
// placeunitxyr ( cyrus , 62 , 25 , 3 , false ) ;
2583: LD_EXP 84
2587: PPUSH
2588: LD_INT 62
2590: PPUSH
2591: LD_INT 25
2593: PPUSH
2594: LD_INT 3
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 50
// end ; lisa = 0 ;
2604: LD_ADDR_EXP 85
2608: PUSH
2609: LD_INT 0
2611: ST_TO_ADDR
// if checkcharacterset ( Lisa ) then
2612: LD_STRING Lisa
2614: PPUSH
2615: CALL_OW 29
2619: IFFALSE 2708
// begin if testvariable ( lisa_side ) then
2621: LD_STRING lisa_side
2623: PPUSH
2624: CALL_OW 27
2628: IFFALSE 2649
// tmp = loadvariable ( lisa_side , - 1 ) else
2630: LD_ADDR_VAR 0 2
2634: PUSH
2635: LD_STRING lisa_side
2637: PPUSH
2638: LD_INT 1
2640: NEG
2641: PPUSH
2642: CALL_OW 30
2646: ST_TO_ADDR
2647: GO 2662
// buildquery ( neny lisa_side , [ OK ] ) ;
2649: LD_STRING neny lisa_side
2651: PPUSH
2652: LD_STRING OK
2654: PUSH
2655: EMPTY
2656: LIST
2657: PPUSH
2658: CALL_OW 99
// if tmp = old_al then
2662: LD_VAR 0 2
2666: PUSH
2667: LD_VAR 0 3
2671: EQUAL
2672: IFFALSE 2687
// lisa = createcharacter ( Lisa ) ;
2674: LD_ADDR_EXP 85
2678: PUSH
2679: LD_STRING Lisa
2681: PPUSH
2682: CALL_OW 34
2686: ST_TO_ADDR
// placeunitxyr ( lisa , 62 , 25 , 3 , false ) ;
2687: LD_EXP 85
2691: PPUSH
2692: LD_INT 62
2694: PPUSH
2695: LD_INT 25
2697: PPUSH
2698: LD_INT 3
2700: PPUSH
2701: LD_INT 0
2703: PPUSH
2704: CALL_OW 50
// end ; frank = 0 ;
2708: LD_ADDR_EXP 86
2712: PUSH
2713: LD_INT 0
2715: ST_TO_ADDR
// if checkcharacterset ( Frank ) then
2716: LD_STRING Frank
2718: PPUSH
2719: CALL_OW 29
2723: IFFALSE 2812
// begin if testvariable ( frank_side ) then
2725: LD_STRING frank_side
2727: PPUSH
2728: CALL_OW 27
2732: IFFALSE 2753
// tmp = loadvariable ( frank_side , - 1 ) else
2734: LD_ADDR_VAR 0 2
2738: PUSH
2739: LD_STRING frank_side
2741: PPUSH
2742: LD_INT 1
2744: NEG
2745: PPUSH
2746: CALL_OW 30
2750: ST_TO_ADDR
2751: GO 2766
// buildquery ( neny frank_side , [ OK ] ) ;
2753: LD_STRING neny frank_side
2755: PPUSH
2756: LD_STRING OK
2758: PUSH
2759: EMPTY
2760: LIST
2761: PPUSH
2762: CALL_OW 99
// if tmp = old_al then
2766: LD_VAR 0 2
2770: PUSH
2771: LD_VAR 0 3
2775: EQUAL
2776: IFFALSE 2791
// frank = createcharacter ( Frank ) ;
2778: LD_ADDR_EXP 86
2782: PUSH
2783: LD_STRING Frank
2785: PPUSH
2786: CALL_OW 34
2790: ST_TO_ADDR
// placeunitxyr ( frank , 62 , 25 , 3 , false ) ;
2791: LD_EXP 86
2795: PPUSH
2796: LD_INT 62
2798: PPUSH
2799: LD_INT 25
2801: PPUSH
2802: LD_INT 3
2804: PPUSH
2805: LD_INT 0
2807: PPUSH
2808: CALL_OW 50
// end ; markc = 0 ;
2812: LD_ADDR_EXP 87
2816: PUSH
2817: LD_INT 0
2819: ST_TO_ADDR
// if checkcharacterset ( Cornell ) then
2820: LD_STRING Cornell
2822: PPUSH
2823: CALL_OW 29
2827: IFFALSE 2916
// begin if testvariable ( markc_side ) then
2829: LD_STRING markc_side
2831: PPUSH
2832: CALL_OW 27
2836: IFFALSE 2857
// tmp = loadvariable ( markc_side , - 1 ) else
2838: LD_ADDR_VAR 0 2
2842: PUSH
2843: LD_STRING markc_side
2845: PPUSH
2846: LD_INT 1
2848: NEG
2849: PPUSH
2850: CALL_OW 30
2854: ST_TO_ADDR
2855: GO 2870
// buildquery ( neny markc_side , [ OK ] ) ;
2857: LD_STRING neny markc_side
2859: PPUSH
2860: LD_STRING OK
2862: PUSH
2863: EMPTY
2864: LIST
2865: PPUSH
2866: CALL_OW 99
// if tmp = old_al then
2870: LD_VAR 0 2
2874: PUSH
2875: LD_VAR 0 3
2879: EQUAL
2880: IFFALSE 2895
// markc = createcharacter ( Cornell ) ;
2882: LD_ADDR_EXP 87
2886: PUSH
2887: LD_STRING Cornell
2889: PPUSH
2890: CALL_OW 34
2894: ST_TO_ADDR
// placeunitxyr ( markc , 62 , 25 , 3 , false ) ;
2895: LD_EXP 87
2899: PPUSH
2900: LD_INT 62
2902: PPUSH
2903: LD_INT 25
2905: PPUSH
2906: LD_INT 3
2908: PPUSH
2909: LD_INT 0
2911: PPUSH
2912: CALL_OW 50
// end ; brown = 0 ;
2916: LD_ADDR_EXP 94
2920: PUSH
2921: LD_INT 0
2923: ST_TO_ADDR
// if checkcharacterset ( Brown ) then
2924: LD_STRING Brown
2926: PPUSH
2927: CALL_OW 29
2931: IFFALSE 3020
// begin if testvariable ( brown_side ) then
2933: LD_STRING brown_side
2935: PPUSH
2936: CALL_OW 27
2940: IFFALSE 2961
// tmp = loadvariable ( brown_side , - 1 ) else
2942: LD_ADDR_VAR 0 2
2946: PUSH
2947: LD_STRING brown_side
2949: PPUSH
2950: LD_INT 1
2952: NEG
2953: PPUSH
2954: CALL_OW 30
2958: ST_TO_ADDR
2959: GO 2974
// buildquery ( neny brown_side , [ OK ] ) ;
2961: LD_STRING neny brown_side
2963: PPUSH
2964: LD_STRING OK
2966: PUSH
2967: EMPTY
2968: LIST
2969: PPUSH
2970: CALL_OW 99
// if tmp = old_al then
2974: LD_VAR 0 2
2978: PUSH
2979: LD_VAR 0 3
2983: EQUAL
2984: IFFALSE 2999
// brown = createcharacter ( Brown ) ;
2986: LD_ADDR_EXP 94
2990: PUSH
2991: LD_STRING Brown
2993: PPUSH
2994: CALL_OW 34
2998: ST_TO_ADDR
// placeunitxyr ( brown , 62 , 25 , 3 , false ) ;
2999: LD_EXP 94
3003: PPUSH
3004: LD_INT 62
3006: PPUSH
3007: LD_INT 25
3009: PPUSH
3010: LD_INT 3
3012: PPUSH
3013: LD_INT 0
3015: PPUSH
3016: CALL_OW 50
// end ; lucy = 0 ;
3020: LD_ADDR_EXP 95
3024: PUSH
3025: LD_INT 0
3027: ST_TO_ADDR
// if checkcharacterset ( Donaldson ) then
3028: LD_STRING Donaldson
3030: PPUSH
3031: CALL_OW 29
3035: IFFALSE 3124
// begin if testvariable ( lucy_side ) then
3037: LD_STRING lucy_side
3039: PPUSH
3040: CALL_OW 27
3044: IFFALSE 3065
// tmp = loadvariable ( lucy_side , - 1 ) else
3046: LD_ADDR_VAR 0 2
3050: PUSH
3051: LD_STRING lucy_side
3053: PPUSH
3054: LD_INT 1
3056: NEG
3057: PPUSH
3058: CALL_OW 30
3062: ST_TO_ADDR
3063: GO 3078
// buildquery ( neny lucy_side , [ OK ] ) ;
3065: LD_STRING neny lucy_side
3067: PPUSH
3068: LD_STRING OK
3070: PUSH
3071: EMPTY
3072: LIST
3073: PPUSH
3074: CALL_OW 99
// if tmp = old_al then
3078: LD_VAR 0 2
3082: PUSH
3083: LD_VAR 0 3
3087: EQUAL
3088: IFFALSE 3103
// lucy = createcharacter ( Donaldson ) ;
3090: LD_ADDR_EXP 95
3094: PUSH
3095: LD_STRING Donaldson
3097: PPUSH
3098: CALL_OW 34
3102: ST_TO_ADDR
// placeunitxyr ( lucy , 62 , 25 , 3 , false ) ;
3103: LD_EXP 95
3107: PPUSH
3108: LD_INT 62
3110: PPUSH
3111: LD_INT 25
3113: PPUSH
3114: LD_INT 3
3116: PPUSH
3117: LD_INT 0
3119: PPUSH
3120: CALL_OW 50
// end ; tim = 0 ;
3124: LD_ADDR_EXP 88
3128: PUSH
3129: LD_INT 0
3131: ST_TO_ADDR
// if checkcharacterset ( Gladstone ) then
3132: LD_STRING Gladstone
3134: PPUSH
3135: CALL_OW 29
3139: IFFALSE 3228
// begin if testvariable ( tim_side ) then
3141: LD_STRING tim_side
3143: PPUSH
3144: CALL_OW 27
3148: IFFALSE 3169
// tmp = loadvariable ( tim_side , - 1 ) else
3150: LD_ADDR_VAR 0 2
3154: PUSH
3155: LD_STRING tim_side
3157: PPUSH
3158: LD_INT 1
3160: NEG
3161: PPUSH
3162: CALL_OW 30
3166: ST_TO_ADDR
3167: GO 3182
// buildquery ( neny tim_side , [ OK ] ) ;
3169: LD_STRING neny tim_side
3171: PPUSH
3172: LD_STRING OK
3174: PUSH
3175: EMPTY
3176: LIST
3177: PPUSH
3178: CALL_OW 99
// if tmp = old_al then
3182: LD_VAR 0 2
3186: PUSH
3187: LD_VAR 0 3
3191: EQUAL
3192: IFFALSE 3207
// tim = createcharacter ( Gladstone ) ;
3194: LD_ADDR_EXP 88
3198: PUSH
3199: LD_STRING Gladstone
3201: PPUSH
3202: CALL_OW 34
3206: ST_TO_ADDR
// placeunitxyr ( tim , 62 , 25 , 3 , false ) ;
3207: LD_EXP 88
3211: PPUSH
3212: LD_INT 62
3214: PPUSH
3215: LD_INT 25
3217: PPUSH
3218: LD_INT 3
3220: PPUSH
3221: LD_INT 0
3223: PPUSH
3224: CALL_OW 50
// end ; denis = 0 ;
3228: LD_ADDR_EXP 89
3232: PUSH
3233: LD_INT 0
3235: ST_TO_ADDR
// if checkcharacterset ( Denis ) then
3236: LD_STRING Denis
3238: PPUSH
3239: CALL_OW 29
3243: IFFALSE 3332
// begin if testvariable ( denis_side ) then
3245: LD_STRING denis_side
3247: PPUSH
3248: CALL_OW 27
3252: IFFALSE 3273
// tmp = loadvariable ( denis_side , - 1 ) else
3254: LD_ADDR_VAR 0 2
3258: PUSH
3259: LD_STRING denis_side
3261: PPUSH
3262: LD_INT 1
3264: NEG
3265: PPUSH
3266: CALL_OW 30
3270: ST_TO_ADDR
3271: GO 3286
// buildquery ( neny denis_side , [ OK ] ) ;
3273: LD_STRING neny denis_side
3275: PPUSH
3276: LD_STRING OK
3278: PUSH
3279: EMPTY
3280: LIST
3281: PPUSH
3282: CALL_OW 99
// if tmp = old_al then
3286: LD_VAR 0 2
3290: PUSH
3291: LD_VAR 0 3
3295: EQUAL
3296: IFFALSE 3311
// denis = createcharacter ( Denis ) ;
3298: LD_ADDR_EXP 89
3302: PUSH
3303: LD_STRING Denis
3305: PPUSH
3306: CALL_OW 34
3310: ST_TO_ADDR
// placeunitxyr ( denis , 62 , 25 , 3 , false ) ;
3311: LD_EXP 89
3315: PPUSH
3316: LD_INT 62
3318: PPUSH
3319: LD_INT 25
3321: PPUSH
3322: LD_INT 3
3324: PPUSH
3325: LD_INT 0
3327: PPUSH
3328: CALL_OW 50
// end ; yamoko = 0 ;
3332: LD_ADDR_EXP 90
3336: PUSH
3337: LD_INT 0
3339: ST_TO_ADDR
// if not frank then
3340: LD_EXP 86
3344: NOT
3345: IFFALSE 3445
// if checkcharacterset ( Yamoko ) then
3347: LD_STRING Yamoko
3349: PPUSH
3350: CALL_OW 29
3354: IFFALSE 3445
// begin if testvariable ( yamoko_side ) then
3356: LD_STRING yamoko_side
3358: PPUSH
3359: CALL_OW 27
3363: IFFALSE 3384
// tmp = loadvariable ( yamoko_side , - 1 ) else
3365: LD_ADDR_VAR 0 2
3369: PUSH
3370: LD_STRING yamoko_side
3372: PPUSH
3373: LD_INT 1
3375: NEG
3376: PPUSH
3377: CALL_OW 30
3381: ST_TO_ADDR
3382: GO 3397
// buildquery ( neny yamoko_side , [ OK ] ) ;
3384: LD_STRING neny yamoko_side
3386: PPUSH
3387: LD_STRING OK
3389: PUSH
3390: EMPTY
3391: LIST
3392: PPUSH
3393: CALL_OW 99
// if tmp = old_al then
3397: LD_VAR 0 2
3401: PUSH
3402: LD_VAR 0 3
3406: EQUAL
3407: IFFALSE 3422
// yamoko = createcharacter ( Yamoko ) ;
3409: LD_ADDR_EXP 90
3413: PUSH
3414: LD_STRING Yamoko
3416: PPUSH
3417: CALL_OW 34
3421: ST_TO_ADDR
// placeunitxyr ( yamoko , 62 , 25 , 3 , false ) ;
3422: LD_EXP 90
3426: PPUSH
3427: LD_INT 62
3429: PPUSH
3430: LD_INT 25
3432: PPUSH
3433: LD_INT 3
3435: PPUSH
3436: LD_INT 0
3438: PPUSH
3439: CALL_OW 50
// end else
3443: GO 3445
// ; gary = 0 ;
3445: LD_ADDR_EXP 91
3449: PUSH
3450: LD_INT 0
3452: ST_TO_ADDR
// if checkcharacterset ( Gary ) then
3453: LD_STRING Gary
3455: PPUSH
3456: CALL_OW 29
3460: IFFALSE 3549
// begin if testvariable ( gary_side ) then
3462: LD_STRING gary_side
3464: PPUSH
3465: CALL_OW 27
3469: IFFALSE 3490
// tmp = loadvariable ( gary_side , - 1 ) else
3471: LD_ADDR_VAR 0 2
3475: PUSH
3476: LD_STRING gary_side
3478: PPUSH
3479: LD_INT 1
3481: NEG
3482: PPUSH
3483: CALL_OW 30
3487: ST_TO_ADDR
3488: GO 3503
// buildquery ( neny gary_side , [ OK ] ) ;
3490: LD_STRING neny gary_side
3492: PPUSH
3493: LD_STRING OK
3495: PUSH
3496: EMPTY
3497: LIST
3498: PPUSH
3499: CALL_OW 99
// if tmp = old_al then
3503: LD_VAR 0 2
3507: PUSH
3508: LD_VAR 0 3
3512: EQUAL
3513: IFFALSE 3528
// gary = createcharacter ( Gary ) ;
3515: LD_ADDR_EXP 91
3519: PUSH
3520: LD_STRING Gary
3522: PPUSH
3523: CALL_OW 34
3527: ST_TO_ADDR
// placeunitxyr ( gary , 62 , 25 , 3 , false ) ;
3528: LD_EXP 91
3532: PPUSH
3533: LD_INT 62
3535: PPUSH
3536: LD_INT 25
3538: PPUSH
3539: LD_INT 3
3541: PPUSH
3542: LD_INT 0
3544: PPUSH
3545: CALL_OW 50
// end ; simms = 0 ;
3549: LD_ADDR_EXP 92
3553: PUSH
3554: LD_INT 0
3556: ST_TO_ADDR
// if checkcharacterset ( Simms ) then
3557: LD_STRING Simms
3559: PPUSH
3560: CALL_OW 29
3564: IFFALSE 3653
// begin if testvariable ( simms_side ) then
3566: LD_STRING simms_side
3568: PPUSH
3569: CALL_OW 27
3573: IFFALSE 3594
// tmp = loadvariable ( simms_side , - 1 ) else
3575: LD_ADDR_VAR 0 2
3579: PUSH
3580: LD_STRING simms_side
3582: PPUSH
3583: LD_INT 1
3585: NEG
3586: PPUSH
3587: CALL_OW 30
3591: ST_TO_ADDR
3592: GO 3607
// buildquery ( neny simms_side , [ OK ] ) ;
3594: LD_STRING neny simms_side
3596: PPUSH
3597: LD_STRING OK
3599: PUSH
3600: EMPTY
3601: LIST
3602: PPUSH
3603: CALL_OW 99
// if tmp = old_al then
3607: LD_VAR 0 2
3611: PUSH
3612: LD_VAR 0 3
3616: EQUAL
3617: IFFALSE 3632
// simms = createcharacter ( Simms ) ;
3619: LD_ADDR_EXP 92
3623: PUSH
3624: LD_STRING Simms
3626: PPUSH
3627: CALL_OW 34
3631: ST_TO_ADDR
// placeunitxyr ( simms , 62 , 25 , 3 , false ) ;
3632: LD_EXP 92
3636: PPUSH
3637: LD_INT 62
3639: PPUSH
3640: LD_INT 25
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: LD_INT 0
3648: PPUSH
3649: CALL_OW 50
// end ; if testcharacters ( otherwithJMM ) then
3653: LD_STRING otherwithJMM
3655: PPUSH
3656: CALL_OW 28
3660: IFFALSE 3695
// if checkcharacterset ( otherwithJMM ) then
3662: LD_STRING otherwithJMM
3664: PPUSH
3665: CALL_OW 29
3669: IFFALSE 3686
// zbytekze12 = createcharacterset ( otherwithJMM ) else
3671: LD_ADDR_EXP 93
3675: PUSH
3676: LD_STRING otherwithJMM
3678: PPUSH
3679: CALL_OW 31
3683: ST_TO_ADDR
3684: GO 3693
// zbytekze12 = [ ] else
3686: LD_ADDR_EXP 93
3690: PUSH
3691: EMPTY
3692: ST_TO_ADDR
3693: GO 3708
// buildquery ( neny otherwithJMM , [ OK ] ) ;
3695: LD_STRING neny otherwithJMM
3697: PPUSH
3698: LD_STRING OK
3700: PUSH
3701: EMPTY
3702: LIST
3703: PPUSH
3704: CALL_OW 99
// for tmp in zbytekze12 do
3708: LD_ADDR_VAR 0 2
3712: PUSH
3713: LD_EXP 93
3717: PUSH
3718: FOR_IN
3719: IFFALSE 3744
// placeunitxyr ( tmp , 62 , 25 , 3 , false ) ;
3721: LD_VAR 0 2
3725: PPUSH
3726: LD_INT 62
3728: PPUSH
3729: LD_INT 25
3731: PPUSH
3732: LD_INT 3
3734: PPUSH
3735: LD_INT 0
3737: PPUSH
3738: CALL_OW 50
3742: GO 3718
3744: POP
3745: POP
// lidi = [ john , roth , joan , bobby , cyrus , lisa , frank , markc , tim , denis , yamoko , gary , simms , brown , lucy ] ^ zbytekze12 ;
3746: LD_ADDR_VAR 0 4
3750: PUSH
3751: LD_EXP 80
3755: PUSH
3756: LD_EXP 81
3760: PUSH
3761: LD_EXP 82
3765: PUSH
3766: LD_EXP 83
3770: PUSH
3771: LD_EXP 84
3775: PUSH
3776: LD_EXP 85
3780: PUSH
3781: LD_EXP 86
3785: PUSH
3786: LD_EXP 87
3790: PUSH
3791: LD_EXP 88
3795: PUSH
3796: LD_EXP 89
3800: PUSH
3801: LD_EXP 90
3805: PUSH
3806: LD_EXP 91
3810: PUSH
3811: LD_EXP 92
3815: PUSH
3816: LD_EXP 94
3820: PUSH
3821: LD_EXP 95
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PUSH
3843: LD_EXP 93
3847: ADD
3848: ST_TO_ADDR
// lidi = lidi diff [ 0 ] ;
3849: LD_ADDR_VAR 0 4
3853: PUSH
3854: LD_VAR 0 4
3858: PUSH
3859: LD_INT 0
3861: PUSH
3862: EMPTY
3863: LIST
3864: DIFF
3865: ST_TO_ADDR
// plidi = 0 + lidi ;
3866: LD_ADDR_LOC 4
3870: PUSH
3871: LD_INT 0
3873: PUSH
3874: LD_VAR 0 4
3878: PLUS
3879: ST_TO_ADDR
// ingameon ;
3880: CALL_OW 8
// centernowonunits ( john ) ;
3884: LD_EXP 80
3888: PPUSH
3889: CALL_OW 87
// commovexy ( lidi , 61 , 49 ) ;
3893: LD_VAR 0 4
3897: PPUSH
3898: LD_INT 61
3900: PPUSH
3901: LD_INT 49
3903: PPUSH
3904: CALL_OW 111
// while getdistunitxy ( john , 61 , 49 ) > 5 do
3908: LD_EXP 80
3912: PPUSH
3913: LD_INT 61
3915: PPUSH
3916: LD_INT 49
3918: PPUSH
3919: CALL_OW 297
3923: PUSH
3924: LD_INT 5
3926: GREATER
3927: IFFALSE 3947
// begin wait ( 1 ) ;
3929: LD_INT 1
3931: PPUSH
3932: CALL_OW 67
// centeronunits ( john ) ;
3936: LD_EXP 80
3940: PPUSH
3941: CALL_OW 85
// end ;
3945: GO 3908
// ingameoff ;
3947: CALL_OW 9
// dialogueon ;
3951: CALL_OW 6
// say ( john , D1-JMM-1 ) ;
3955: LD_EXP 80
3959: PPUSH
3960: LD_STRING D1-JMM-1
3962: PPUSH
3963: CALL_OW 88
// if joan then
3967: LD_EXP 82
3971: IFFALSE 3985
// say ( joan , D1-Joan-1 ) ;
3973: LD_EXP 82
3977: PPUSH
3978: LD_STRING D1-Joan-1
3980: PPUSH
3981: CALL_OW 88
// if lisa then
3985: LD_EXP 85
3989: IFFALSE 4003
// say ( lisa , D1-Lisa-1 ) ;
3991: LD_EXP 85
3995: PPUSH
3996: LD_STRING D1-Lisa-1
3998: PPUSH
3999: CALL_OW 88
// say ( john , D1-JMM-2 ) ;
4003: LD_EXP 80
4007: PPUSH
4008: LD_STRING D1-JMM-2
4010: PPUSH
4011: CALL_OW 88
// dialogueoff ;
4015: CALL_OW 7
// saveforquickrestart ;
4019: CALL_OW 22
// wait ( 0 0$0.5 ) ;
4023: LD_INT 18
4025: PPUSH
4026: CALL_OW 67
// changemissionobjectives ( M1 ) ;
4030: LD_STRING M1
4032: PPUSH
4033: CALL_OW 337
// end ;
4037: LD_VAR 0 1
4041: RET
// export gossud , kiril , jahoda , burlak , arusove ; export gnyevko , dolgov , kapitsova , gleb , kovalyuk , scholtze , titov , oblukov , bystrov , lipshchin ; every 1 1$30 do var tmp , tmp1 , tmp2 , pomrusaci ;
4042: GO 4044
4044: DISABLE
4045: LD_INT 0
4047: PPUSH
4048: PPUSH
4049: PPUSH
4050: PPUSH
// begin uc_side = rus ;
4051: LD_ADDR_OWVAR 20
4055: PUSH
4056: LD_EXP 2
4060: ST_TO_ADDR
// pomrusaci = [ ] ;
4061: LD_ADDR_VAR 0 4
4065: PUSH
4066: EMPTY
4067: ST_TO_ADDR
// gossud = newcharacter ( Gossudarov ) ;
4068: LD_ADDR_EXP 96
4072: PUSH
4073: LD_STRING Gossudarov
4075: PPUSH
4076: CALL_OW 25
4080: ST_TO_ADDR
// if not gossud then
4081: LD_EXP 96
4085: NOT
4086: IFFALSE 4101
// buildquery ( neny Gossudarov , [ OK ] ) ;
4088: LD_STRING neny Gossudarov
4090: PPUSH
4091: LD_STRING OK
4093: PUSH
4094: EMPTY
4095: LIST
4096: PPUSH
4097: CALL_OW 99
// kiril = newcharacter ( Kirilenkova ) ;
4101: LD_ADDR_EXP 97
4105: PUSH
4106: LD_STRING Kirilenkova
4108: PPUSH
4109: CALL_OW 25
4113: ST_TO_ADDR
// if not kiril then
4114: LD_EXP 97
4118: NOT
4119: IFFALSE 4134
// buildquery ( neny Kirilenkova , [ OK ] ) ;
4121: LD_STRING neny Kirilenkova
4123: PPUSH
4124: LD_STRING OK
4126: PUSH
4127: EMPTY
4128: LIST
4129: PPUSH
4130: CALL_OW 99
// gnyevko = newcharacter ( Gnyevko ) ;
4134: LD_ADDR_EXP 101
4138: PUSH
4139: LD_STRING Gnyevko
4141: PPUSH
4142: CALL_OW 25
4146: ST_TO_ADDR
// if not gnyevko then
4147: LD_EXP 101
4151: NOT
4152: IFFALSE 4167
// buildquery ( neny Gnyevko , [ OK ] ) ;
4154: LD_STRING neny Gnyevko
4156: PPUSH
4157: LD_STRING OK
4159: PUSH
4160: EMPTY
4161: LIST
4162: PPUSH
4163: CALL_OW 99
// pomrusaci = pomrusaci ^ [ gnyevko ] ;
4167: LD_ADDR_VAR 0 4
4171: PUSH
4172: LD_VAR 0 4
4176: PUSH
4177: LD_EXP 101
4181: PUSH
4182: EMPTY
4183: LIST
4184: ADD
4185: ST_TO_ADDR
// dolgov = newcharacter ( Dolgov ) ;
4186: LD_ADDR_EXP 102
4190: PUSH
4191: LD_STRING Dolgov
4193: PPUSH
4194: CALL_OW 25
4198: ST_TO_ADDR
// if not dolgov then
4199: LD_EXP 102
4203: NOT
4204: IFFALSE 4219
// buildquery ( neny Dolgov , [ OK ] ) ;
4206: LD_STRING neny Dolgov
4208: PPUSH
4209: LD_STRING OK
4211: PUSH
4212: EMPTY
4213: LIST
4214: PPUSH
4215: CALL_OW 99
// pomrusaci = pomrusaci ^ [ dolgov ] ;
4219: LD_ADDR_VAR 0 4
4223: PUSH
4224: LD_VAR 0 4
4228: PUSH
4229: LD_EXP 102
4233: PUSH
4234: EMPTY
4235: LIST
4236: ADD
4237: ST_TO_ADDR
// kapitsova = newcharacter ( Kapitsova ) ;
4238: LD_ADDR_EXP 103
4242: PUSH
4243: LD_STRING Kapitsova
4245: PPUSH
4246: CALL_OW 25
4250: ST_TO_ADDR
// if not kapitsova then
4251: LD_EXP 103
4255: NOT
4256: IFFALSE 4271
// buildquery ( neny Kapitsova , [ OK ] ) ;
4258: LD_STRING neny Kapitsova
4260: PPUSH
4261: LD_STRING OK
4263: PUSH
4264: EMPTY
4265: LIST
4266: PPUSH
4267: CALL_OW 99
// pomrusaci = pomrusaci ^ [ kapitsova ] ;
4271: LD_ADDR_VAR 0 4
4275: PUSH
4276: LD_VAR 0 4
4280: PUSH
4281: LD_EXP 103
4285: PUSH
4286: EMPTY
4287: LIST
4288: ADD
4289: ST_TO_ADDR
// gleb = newcharacter ( Gleb ) ;
4290: LD_ADDR_EXP 104
4294: PUSH
4295: LD_STRING Gleb
4297: PPUSH
4298: CALL_OW 25
4302: ST_TO_ADDR
// if not gleb then
4303: LD_EXP 104
4307: NOT
4308: IFFALSE 4323
// buildquery ( neny Gleb , [ OK ] ) ;
4310: LD_STRING neny Gleb
4312: PPUSH
4313: LD_STRING OK
4315: PUSH
4316: EMPTY
4317: LIST
4318: PPUSH
4319: CALL_OW 99
// pomrusaci = pomrusaci ^ [ gleb ] ;
4323: LD_ADDR_VAR 0 4
4327: PUSH
4328: LD_VAR 0 4
4332: PUSH
4333: LD_EXP 104
4337: PUSH
4338: EMPTY
4339: LIST
4340: ADD
4341: ST_TO_ADDR
// kovalyuk = newcharacter ( Kovalyuk ) ;
4342: LD_ADDR_EXP 105
4346: PUSH
4347: LD_STRING Kovalyuk
4349: PPUSH
4350: CALL_OW 25
4354: ST_TO_ADDR
// if not kovalyuk then
4355: LD_EXP 105
4359: NOT
4360: IFFALSE 4375
// buildquery ( neny Kovalyuk , [ OK ] ) ;
4362: LD_STRING neny Kovalyuk
4364: PPUSH
4365: LD_STRING OK
4367: PUSH
4368: EMPTY
4369: LIST
4370: PPUSH
4371: CALL_OW 99
// pomrusaci = pomrusaci ^ [ kovalyuk ] ;
4375: LD_ADDR_VAR 0 4
4379: PUSH
4380: LD_VAR 0 4
4384: PUSH
4385: LD_EXP 105
4389: PUSH
4390: EMPTY
4391: LIST
4392: ADD
4393: ST_TO_ADDR
// scholtze = newcharacter ( Scholtze ) ;
4394: LD_ADDR_EXP 106
4398: PUSH
4399: LD_STRING Scholtze
4401: PPUSH
4402: CALL_OW 25
4406: ST_TO_ADDR
// if not scholtze then
4407: LD_EXP 106
4411: NOT
4412: IFFALSE 4427
// buildquery ( neny Scholtze , [ OK ] ) ;
4414: LD_STRING neny Scholtze
4416: PPUSH
4417: LD_STRING OK
4419: PUSH
4420: EMPTY
4421: LIST
4422: PPUSH
4423: CALL_OW 99
// pomrusaci = pomrusaci ^ [ scholtze ] ;
4427: LD_ADDR_VAR 0 4
4431: PUSH
4432: LD_VAR 0 4
4436: PUSH
4437: LD_EXP 106
4441: PUSH
4442: EMPTY
4443: LIST
4444: ADD
4445: ST_TO_ADDR
// titov = newcharacter ( Titov ) ;
4446: LD_ADDR_EXP 107
4450: PUSH
4451: LD_STRING Titov
4453: PPUSH
4454: CALL_OW 25
4458: ST_TO_ADDR
// if not titov then
4459: LD_EXP 107
4463: NOT
4464: IFFALSE 4479
// buildquery ( neny Titov , [ OK ] ) ;
4466: LD_STRING neny Titov
4468: PPUSH
4469: LD_STRING OK
4471: PUSH
4472: EMPTY
4473: LIST
4474: PPUSH
4475: CALL_OW 99
// pomrusaci = pomrusaci ^ [ titov ] ;
4479: LD_ADDR_VAR 0 4
4483: PUSH
4484: LD_VAR 0 4
4488: PUSH
4489: LD_EXP 107
4493: PUSH
4494: EMPTY
4495: LIST
4496: ADD
4497: ST_TO_ADDR
// oblukov = newcharacter ( Oblukov ) ;
4498: LD_ADDR_EXP 108
4502: PUSH
4503: LD_STRING Oblukov
4505: PPUSH
4506: CALL_OW 25
4510: ST_TO_ADDR
// if not oblukov then
4511: LD_EXP 108
4515: NOT
4516: IFFALSE 4531
// buildquery ( neny Oblukov , [ OK ] ) ;
4518: LD_STRING neny Oblukov
4520: PPUSH
4521: LD_STRING OK
4523: PUSH
4524: EMPTY
4525: LIST
4526: PPUSH
4527: CALL_OW 99
// pomrusaci = pomrusaci ^ [ oblukov ] ;
4531: LD_ADDR_VAR 0 4
4535: PUSH
4536: LD_VAR 0 4
4540: PUSH
4541: LD_EXP 108
4545: PUSH
4546: EMPTY
4547: LIST
4548: ADD
4549: ST_TO_ADDR
// bystrov = newcharacter ( Bystrov ) ;
4550: LD_ADDR_EXP 109
4554: PUSH
4555: LD_STRING Bystrov
4557: PPUSH
4558: CALL_OW 25
4562: ST_TO_ADDR
// if not bystrov then
4563: LD_EXP 109
4567: NOT
4568: IFFALSE 4583
// buildquery ( neny Bystrov , [ OK ] ) ;
4570: LD_STRING neny Bystrov
4572: PPUSH
4573: LD_STRING OK
4575: PUSH
4576: EMPTY
4577: LIST
4578: PPUSH
4579: CALL_OW 99
// pomrusaci = pomrusaci ^ [ bystrov ] ;
4583: LD_ADDR_VAR 0 4
4587: PUSH
4588: LD_VAR 0 4
4592: PUSH
4593: LD_EXP 109
4597: PUSH
4598: EMPTY
4599: LIST
4600: ADD
4601: ST_TO_ADDR
// lipshchin = newcharacter ( Lipshchin ) ;
4602: LD_ADDR_EXP 110
4606: PUSH
4607: LD_STRING Lipshchin
4609: PPUSH
4610: CALL_OW 25
4614: ST_TO_ADDR
// if not lipshchin then
4615: LD_EXP 110
4619: NOT
4620: IFFALSE 4635
// buildquery ( neny Lipshchin , [ OK ] ) ;
4622: LD_STRING neny Lipshchin
4624: PPUSH
4625: LD_STRING OK
4627: PUSH
4628: EMPTY
4629: LIST
4630: PPUSH
4631: CALL_OW 99
// pomrusaci = pomrusaci ^ [ lipshchin ] ;
4635: LD_ADDR_VAR 0 4
4639: PUSH
4640: LD_VAR 0 4
4644: PUSH
4645: LD_EXP 110
4649: PUSH
4650: EMPTY
4651: LIST
4652: ADD
4653: ST_TO_ADDR
// changesidefog ( oth , al ) ;
4654: LD_EXP 4
4658: PPUSH
4659: LD_EXP 1
4663: PPUSH
4664: CALL_OW 343
// uc_side = oth ;
4668: LD_ADDR_OWVAR 20
4672: PUSH
4673: LD_EXP 4
4677: ST_TO_ADDR
// jahoda = newcharacter ( Belkov ) ;
4678: LD_ADDR_EXP 98
4682: PUSH
4683: LD_STRING Belkov
4685: PPUSH
4686: CALL_OW 25
4690: ST_TO_ADDR
// if not jahoda then
4691: LD_EXP 98
4695: NOT
4696: IFFALSE 4705
// msg ( neny Belkov ) ;
4698: LD_STRING neny Belkov
4700: PPUSH
4701: CALL_OW 100
// burlak = newcharacter ( Burlak ) ;
4705: LD_ADDR_EXP 99
4709: PUSH
4710: LD_STRING Burlak
4712: PPUSH
4713: CALL_OW 25
4717: ST_TO_ADDR
// if not burlak then
4718: LD_EXP 99
4722: NOT
4723: IFFALSE 4738
// buildquery ( neny Burlak , [ OK ] ) ;
4725: LD_STRING neny Burlak
4727: PPUSH
4728: LD_STRING OK
4730: PUSH
4731: EMPTY
4732: LIST
4733: PPUSH
4734: CALL_OW 99
// uc_side = rus ;
4738: LD_ADDR_OWVAR 20
4742: PUSH
4743: LD_EXP 2
4747: ST_TO_ADDR
// placeunitxyr ( gossud , 70 , 96 , 2 , false ) ;
4748: LD_EXP 96
4752: PPUSH
4753: LD_INT 70
4755: PPUSH
4756: LD_INT 96
4758: PPUSH
4759: LD_INT 2
4761: PPUSH
4762: LD_INT 0
4764: PPUSH
4765: CALL_OW 50
// placeunitxyr ( kiril , 70 , 96 , 2 , false ) ;
4769: LD_EXP 97
4773: PPUSH
4774: LD_INT 70
4776: PPUSH
4777: LD_INT 96
4779: PPUSH
4780: LD_INT 2
4782: PPUSH
4783: LD_INT 0
4785: PPUSH
4786: CALL_OW 50
// tmp = maxlidi - ( 0 + plidi ) - 2 ;
4790: LD_ADDR_VAR 0 1
4794: PUSH
4795: LD_EXP 5
4799: PUSH
4800: LD_INT 0
4802: PUSH
4803: LD_LOC 4
4807: PLUS
4808: MINUS
4809: PUSH
4810: LD_INT 2
4812: MINUS
4813: ST_TO_ADDR
// tmp2 = 0 + pomrusaci ;
4814: LD_ADDR_VAR 0 3
4818: PUSH
4819: LD_INT 0
4821: PUSH
4822: LD_VAR 0 4
4826: PLUS
4827: ST_TO_ADDR
// uc_nation = nation_russian ;
4828: LD_ADDR_OWVAR 21
4832: PUSH
4833: LD_INT 3
4835: ST_TO_ADDR
// for tmp1 = 1 to tmp do
4836: LD_ADDR_VAR 0 2
4840: PUSH
4841: DOUBLE
4842: LD_INT 1
4844: DEC
4845: ST_TO_ADDR
4846: LD_VAR 0 1
4850: PUSH
4851: FOR_TO
4852: IFFALSE 4928
// if tmp1 > tmp2 then
4854: LD_VAR 0 2
4858: PUSH
4859: LD_VAR 0 3
4863: GREATER
4864: IFFALSE 4899
// begin preparescientist ( sex_male , 8 ) ;
4866: LD_INT 1
4868: PPUSH
4869: LD_INT 8
4871: PPUSH
4872: CALL_OW 384
// placeunitxyr ( createhuman , 70 , 96 , 2 , false ) ;
4876: CALL_OW 44
4880: PPUSH
4881: LD_INT 70
4883: PPUSH
4884: LD_INT 96
4886: PPUSH
4887: LD_INT 2
4889: PPUSH
4890: LD_INT 0
4892: PPUSH
4893: CALL_OW 50
// end else
4897: GO 4926
// placeunitxyr ( pomrusaci [ tmp1 ] , 70 , 96 , 2 , false ) ;
4899: LD_VAR 0 4
4903: PUSH
4904: LD_VAR 0 2
4908: ARRAY
4909: PPUSH
4910: LD_INT 70
4912: PPUSH
4913: LD_INT 96
4915: PPUSH
4916: LD_INT 2
4918: PPUSH
4919: LD_INT 0
4921: PPUSH
4922: CALL_OW 50
4926: GO 4851
4928: POP
4929: POP
// arusove = filterallunits ( [ [ f_side , rus ] ] ) ;
4930: LD_ADDR_EXP 100
4934: PUSH
4935: LD_INT 22
4937: PUSH
4938: LD_EXP 2
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: EMPTY
4948: LIST
4949: PPUSH
4950: CALL_OW 69
4954: ST_TO_ADDR
// commovexy ( arusove , 64 , 54 ) ;
4955: LD_EXP 100
4959: PPUSH
4960: LD_INT 64
4962: PPUSH
4963: LD_INT 54
4965: PPUSH
4966: CALL_OW 111
// setattitude ( rus , al , att_friend , false ) ;
4970: LD_EXP 2
4974: PPUSH
4975: LD_EXP 1
4979: PPUSH
4980: LD_INT 1
4982: PPUSH
4983: LD_INT 0
4985: PPUSH
4986: CALL_OW 80
// end ;
4990: PPOPN 4
4992: END
// var r_seen ; function side_sees_side ( sidea , sideb ) ; var tmp , tmp2 ; begin
4993: LD_INT 0
4995: PPUSH
4996: PPUSH
4997: PPUSH
// tmp2 = filterallunits ( [ [ f_side , sideb ] ] ) ;
4998: LD_ADDR_VAR 0 5
5002: PUSH
5003: LD_INT 22
5005: PUSH
5006: LD_VAR 0 2
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: PUSH
5015: EMPTY
5016: LIST
5017: PPUSH
5018: CALL_OW 69
5022: ST_TO_ADDR
// result = 0 ;
5023: LD_ADDR_VAR 0 3
5027: PUSH
5028: LD_INT 0
5030: ST_TO_ADDR
// for tmp in tmp2 do
5031: LD_ADDR_VAR 0 4
5035: PUSH
5036: LD_VAR 0 5
5040: PUSH
5041: FOR_IN
5042: IFFALSE 5084
// if see ( sidea , tmp ) then
5044: LD_VAR 0 1
5048: PPUSH
5049: LD_VAR 0 4
5053: PPUSH
5054: CALL_OW 292
5058: IFFALSE 5082
// begin r_seen = tmp ;
5060: LD_ADDR_LOC 5
5064: PUSH
5065: LD_VAR 0 4
5069: ST_TO_ADDR
// result = tmp ;
5070: LD_ADDR_VAR 0 3
5074: PUSH
5075: LD_VAR 0 4
5079: ST_TO_ADDR
// break ;
5080: GO 5084
// end ;
5082: GO 5041
5084: POP
5085: POP
// end ;
5086: LD_VAR 0 3
5090: RET
// every 0 0$1 trigger UnitFilter ( arusove , [ [ f_side , 6 ] , [ f_not , [ f_lives , 500 ] ] ] ) do var i ;
5091: LD_EXP 100
5095: PPUSH
5096: LD_INT 22
5098: PUSH
5099: LD_INT 6
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: PUSH
5106: LD_INT 3
5108: PUSH
5109: LD_INT 24
5111: PUSH
5112: LD_INT 500
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PPUSH
5127: CALL_OW 72
5131: IFFALSE 5205
5133: GO 5135
5135: DISABLE
5136: LD_INT 0
5138: PPUSH
// begin enable ;
5139: ENABLE
// for i in UnitFilter ( arusove , [ [ f_side , 6 ] , [ f_not , [ f_lives , 500 ] ] ] ) do
5140: LD_ADDR_VAR 0 1
5144: PUSH
5145: LD_EXP 100
5149: PPUSH
5150: LD_INT 22
5152: PUSH
5153: LD_INT 6
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: PUSH
5160: LD_INT 3
5162: PUSH
5163: LD_INT 24
5165: PUSH
5166: LD_INT 500
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PPUSH
5181: CALL_OW 72
5185: PUSH
5186: FOR_IN
5187: IFFALSE 5203
// SetLives ( i , 500 ) ;
5189: LD_VAR 0 1
5193: PPUSH
5194: LD_INT 500
5196: PPUSH
5197: CALL_OW 234
5201: GO 5186
5203: POP
5204: POP
// end ;
5205: PPOPN 1
5207: END
// every 0 0$1 + 1 1$30 trigger side_sees_side ( al , rus ) do var tmp , tmp2 , tmp1 , utoci ;
5208: LD_EXP 1
5212: PPUSH
5213: LD_EXP 2
5217: PPUSH
5218: CALL 4993 0 2
5222: IFFALSE 5826
5224: GO 5226
5226: DISABLE
5227: LD_INT 0
5229: PPUSH
5230: PPUSH
5231: PPUSH
5232: PPUSH
// begin utoci = false ;
5233: LD_ADDR_VAR 0 4
5237: PUSH
5238: LD_INT 0
5240: ST_TO_ADDR
// tmp2 = filterallunits ( [ [ f_side , al ] , [ f_type , unit_human ] ] ) ;
5241: LD_ADDR_VAR 0 2
5245: PUSH
5246: LD_INT 22
5248: PUSH
5249: LD_EXP 1
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: PUSH
5258: LD_INT 21
5260: PUSH
5261: LD_INT 1
5263: PUSH
5264: EMPTY
5265: LIST
5266: LIST
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: PPUSH
5272: CALL_OW 69
5276: ST_TO_ADDR
// repeat for tmp in tmp2 do
5277: LD_ADDR_VAR 0 1
5281: PUSH
5282: LD_VAR 0 2
5286: PUSH
5287: FOR_IN
5288: IFFALSE 5784
// if ( attacks ( tmp ) ) then
5290: LD_VAR 0 1
5294: PPUSH
5295: CALL_OW 320
5299: IFFALSE 5782
// begin wait ( 0 0$0.5 ) ;
5301: LD_INT 18
5303: PPUSH
5304: CALL_OW 67
// ingameon ;
5308: CALL_OW 8
// utoci = true ;
5312: LD_ADDR_VAR 0 4
5316: PUSH
5317: LD_INT 1
5319: ST_TO_ADDR
// if islive ( roth ) then
5320: LD_EXP 81
5324: PPUSH
5325: CALL_OW 300
5329: IFFALSE 5520
// begin setside ( arusove , al ) ;
5331: LD_EXP 100
5335: PPUSH
5336: LD_EXP 1
5340: PPUSH
5341: CALL_OW 235
// comstop ( tmp ) ;
5345: LD_VAR 0 1
5349: PPUSH
5350: CALL_OW 141
// comstop ( arusove ) ;
5354: LD_EXP 100
5358: PPUSH
5359: CALL_OW 141
// say ( roth , D2-Roth-2 ) ;
5363: LD_EXP 81
5367: PPUSH
5368: LD_STRING D2-Roth-2
5370: PPUSH
5371: CALL_OW 88
// say ( roth , D2-Roth-2a ) ;
5375: LD_EXP 81
5379: PPUSH
5380: LD_STRING D2-Roth-2a
5382: PPUSH
5383: CALL_OW 88
// commovexy ( [ john , roth ] , getx ( gossud ) , gety ( gossud ) ) ;
5387: LD_EXP 80
5391: PUSH
5392: LD_EXP 81
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: PPUSH
5401: LD_EXP 96
5405: PPUSH
5406: CALL_OW 250
5410: PPUSH
5411: LD_EXP 96
5415: PPUSH
5416: CALL_OW 251
5420: PPUSH
5421: CALL_OW 111
// while ( getdistunits ( john , gossud ) + getdistunits ( roth , gossud ) ) > 19 do
5425: LD_EXP 80
5429: PPUSH
5430: LD_EXP 96
5434: PPUSH
5435: CALL_OW 296
5439: PUSH
5440: LD_EXP 81
5444: PPUSH
5445: LD_EXP 96
5449: PPUSH
5450: CALL_OW 296
5454: PLUS
5455: PUSH
5456: LD_INT 19
5458: GREATER
5459: IFFALSE 5494
// begin centeronunits ( [ roth , gossud , john ] ) ;
5461: LD_EXP 81
5465: PUSH
5466: LD_EXP 96
5470: PUSH
5471: LD_EXP 80
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: LIST
5480: PPUSH
5481: CALL_OW 85
// wait ( 1 ) ;
5485: LD_INT 1
5487: PPUSH
5488: CALL_OW 67
// end ;
5492: GO 5425
// say ( roth , D2-Roth-2b ) ;
5494: LD_EXP 81
5498: PPUSH
5499: LD_STRING D2-Roth-2b
5501: PPUSH
5502: CALL_OW 88
// say ( john , D2-JMM-3 ) ;
5506: LD_EXP 80
5510: PPUSH
5511: LD_STRING D2-JMM-3
5513: PPUSH
5514: CALL_OW 88
// end else
5518: GO 5706
// begin setside ( arusove , al ) ;
5520: LD_EXP 100
5524: PPUSH
5525: LD_EXP 1
5529: PPUSH
5530: CALL_OW 235
// comstop ( tmp ) ;
5534: LD_VAR 0 1
5538: PPUSH
5539: CALL_OW 141
// comstop ( arusove ) ;
5543: LD_EXP 100
5547: PPUSH
5548: CALL_OW 141
// say ( john , D2-JMM-1 ) ;
5552: LD_EXP 80
5556: PPUSH
5557: LD_STRING D2-JMM-1
5559: PPUSH
5560: CALL_OW 88
// say ( john , D2-JMM-1a ) ;
5564: LD_EXP 80
5568: PPUSH
5569: LD_STRING D2-JMM-1a
5571: PPUSH
5572: CALL_OW 88
// commovexy ( john , getx ( gossud ) , gety ( gossud ) ) ;
5576: LD_EXP 80
5580: PPUSH
5581: LD_EXP 96
5585: PPUSH
5586: CALL_OW 250
5590: PPUSH
5591: LD_EXP 96
5595: PPUSH
5596: CALL_OW 251
5600: PPUSH
5601: CALL_OW 111
// while getdistunits ( john , gossud ) > 11 do
5605: LD_EXP 80
5609: PPUSH
5610: LD_EXP 96
5614: PPUSH
5615: CALL_OW 296
5619: PUSH
5620: LD_INT 11
5622: GREATER
5623: IFFALSE 5658
// begin centeronunits ( [ roth , gossud , john ] ) ;
5625: LD_EXP 81
5629: PUSH
5630: LD_EXP 96
5634: PUSH
5635: LD_EXP 80
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: LIST
5644: PPUSH
5645: CALL_OW 85
// wait ( 1 ) ;
5649: LD_INT 1
5651: PPUSH
5652: CALL_OW 67
// end ;
5656: GO 5605
// say ( john , D2-JMM-1b ) ;
5658: LD_EXP 80
5662: PPUSH
5663: LD_STRING D2-JMM-1b
5665: PPUSH
5666: CALL_OW 88
// say ( gossud , D2-Gos-1 ) ;
5670: LD_EXP 96
5674: PPUSH
5675: LD_STRING D2-Gos-1
5677: PPUSH
5678: CALL_OW 88
// say ( john , D2-JMM-2 ) ;
5682: LD_EXP 80
5686: PPUSH
5687: LD_STRING D2-JMM-2
5689: PPUSH
5690: CALL_OW 88
// say ( gossud , D2-Gos-2 ) ;
5694: LD_EXP 96
5698: PPUSH
5699: LD_STRING D2-Gos-2
5701: PPUSH
5702: CALL_OW 88
// end ; say ( gossud , D2-Gos-3 ) ;
5706: LD_EXP 96
5710: PPUSH
5711: LD_STRING D2-Gos-3
5713: PPUSH
5714: CALL_OW 88
// say ( john , D2-JMM-4 ) ;
5718: LD_EXP 80
5722: PPUSH
5723: LD_STRING D2-JMM-4
5725: PPUSH
5726: CALL_OW 88
// say ( gossud , D2-Gos-4 ) ;
5730: LD_EXP 96
5734: PPUSH
5735: LD_STRING D2-Gos-4
5737: PPUSH
5738: CALL_OW 88
// say ( john , D2-JMM-5 ) ;
5742: LD_EXP 80
5746: PPUSH
5747: LD_STRING D2-JMM-5
5749: PPUSH
5750: CALL_OW 88
// say ( gossud , D2-Gos-5 ) ;
5754: LD_EXP 96
5758: PPUSH
5759: LD_STRING D2-Gos-5
5761: PPUSH
5762: CALL_OW 88
// say ( john , D2-JMM-6 ) ;
5766: LD_EXP 80
5770: PPUSH
5771: LD_STRING D2-JMM-6
5773: PPUSH
5774: CALL_OW 88
// ingameoff ;
5778: CALL_OW 9
// end ;
5782: GO 5287
5784: POP
5785: POP
// wait ( 0 0$0.1 ) ;
5786: LD_INT 4
5788: PPUSH
5789: CALL_OW 67
// until utoci ;
5793: LD_VAR 0 4
5797: IFFALSE 5277
// setattitude ( al , rus , att_enemy , true ) ;
5799: LD_EXP 1
5803: PPUSH
5804: LD_EXP 2
5808: PPUSH
5809: LD_INT 2
5811: PPUSH
5812: LD_INT 1
5814: PPUSH
5815: CALL_OW 80
// hint ( CombinedForces ) ;
5819: LD_STRING CombinedForces
5821: PPUSH
5822: CALL_OW 339
// end ;
5826: PPOPN 4
5828: END
// export lb1 ; on BuildingComplete ( b ) do begin if ( getbtype ( b ) = b_lab ) and ( getnation ( b ) <> nation_russian ) and not lb1 then
5829: LD_VAR 0 1
5833: PPUSH
5834: CALL_OW 266
5838: PUSH
5839: LD_INT 6
5841: EQUAL
5842: PUSH
5843: LD_VAR 0 1
5847: PPUSH
5848: CALL_OW 248
5852: PUSH
5853: LD_INT 3
5855: NONEQUAL
5856: AND
5857: PUSH
5858: LD_EXP 111
5862: NOT
5863: AND
5864: IFFALSE 5879
// begin lb1 = true ;
5866: LD_ADDR_EXP 111
5870: PUSH
5871: LD_INT 1
5873: ST_TO_ADDR
// enable ( 01 ) ;
5874: LD_INT 1
5876: ENABLE_MARKED
// end else
5877: GO 5913
// if ( getbtype ( b ) = b_lab ) and ( getnation ( b ) = nation_russian ) then
5879: LD_VAR 0 1
5883: PPUSH
5884: CALL_OW 266
5888: PUSH
5889: LD_INT 6
5891: EQUAL
5892: PUSH
5893: LD_VAR 0 1
5897: PPUSH
5898: CALL_OW 248
5902: PUSH
5903: LD_INT 3
5905: EQUAL
5906: AND
5907: IFFALSE 5913
// begin disable ;
5909: DISABLE
// enable ( 02 ) ;
5910: LD_INT 2
5912: ENABLE_MARKED
// end ; if GetBType ( b ) = b_depot and GetSide ( b ) = 7 then
5913: LD_VAR 0 1
5917: PPUSH
5918: CALL_OW 266
5922: PUSH
5923: LD_INT 0
5925: EQUAL
5926: PUSH
5927: LD_VAR 0 1
5931: PPUSH
5932: CALL_OW 255
5936: PUSH
5937: LD_INT 7
5939: EQUAL
5940: AND
5941: IFFALSE 5955
// SetBName ( b , freedom ) ;
5943: LD_VAR 0 1
5947: PPUSH
5948: LD_STRING freedom
5950: PPUSH
5951: CALL_OW 500
// end ;
5955: PPOPN 1
5957: END
// every 0 0$1 + 1 1$45 marked 01 do var tmp ;
5958: GO 5960
5960: DISABLE
5961: LD_INT 0
5963: PPUSH
// begin dialogueon ;
5964: CALL_OW 6
// if isok ( kiril ) then
5968: LD_EXP 97
5972: PPUSH
5973: CALL_OW 302
5977: IFFALSE 5993
// say ( kiril , D3-Kir-1 ) else
5979: LD_EXP 97
5983: PPUSH
5984: LD_STRING D3-Kir-1
5986: PPUSH
5987: CALL_OW 88
5991: GO 6081
// if isok ( gossud ) then
5993: LD_EXP 96
5997: PPUSH
5998: CALL_OW 302
6002: IFFALSE 6018
// say ( gossud , D3-Kir-1 ) else
6004: LD_EXP 96
6008: PPUSH
6009: LD_STRING D3-Kir-1
6011: PPUSH
6012: CALL_OW 88
6016: GO 6081
// begin tmp = filterallunits ( [ [ f_nation , nation_russian ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
6018: LD_ADDR_VAR 0 1
6022: PUSH
6023: LD_INT 23
6025: PUSH
6026: LD_INT 3
6028: PUSH
6029: EMPTY
6030: LIST
6031: LIST
6032: PUSH
6033: LD_INT 21
6035: PUSH
6036: LD_INT 1
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: PUSH
6043: LD_INT 50
6045: PUSH
6046: EMPTY
6047: LIST
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: LIST
6053: PPUSH
6054: CALL_OW 69
6058: ST_TO_ADDR
// if tmp then
6059: LD_VAR 0 1
6063: IFFALSE 6081
// say ( tmp [ 1 ] , D3-Kir-1 ) end ;
6065: LD_VAR 0 1
6069: PUSH
6070: LD_INT 1
6072: ARRAY
6073: PPUSH
6074: LD_STRING D3-Kir-1
6076: PPUSH
6077: CALL_OW 88
// dialogueoff ;
6081: CALL_OW 7
// end ;
6085: PPOPN 1
6087: END
// every 0 0$1 + 2 2$0 marked 02 do var tmp ;
6088: GO 6090
6090: DISABLE
6091: LD_INT 0
6093: PPUSH
// begin tmp = filterallunits ( [ [ f_nation , nation_russian ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
6094: LD_ADDR_VAR 0 1
6098: PUSH
6099: LD_INT 23
6101: PUSH
6102: LD_INT 3
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: LD_INT 21
6111: PUSH
6112: LD_INT 1
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PUSH
6119: LD_INT 50
6121: PUSH
6122: EMPTY
6123: LIST
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: LIST
6129: PPUSH
6130: CALL_OW 69
6134: ST_TO_ADDR
// dialogueon ;
6135: CALL_OW 6
// if isok ( kiril ) then
6139: LD_EXP 97
6143: PPUSH
6144: CALL_OW 302
6148: IFFALSE 6164
// say ( kiril , D3a-Kir-1 ) else
6150: LD_EXP 97
6154: PPUSH
6155: LD_STRING D3a-Kir-1
6157: PPUSH
6158: CALL_OW 88
6162: GO 6230
// begin tmp = tmp diff [ gossud ] ;
6164: LD_ADDR_VAR 0 1
6168: PUSH
6169: LD_VAR 0 1
6173: PUSH
6174: LD_EXP 96
6178: PUSH
6179: EMPTY
6180: LIST
6181: DIFF
6182: ST_TO_ADDR
// if tmp then
6183: LD_VAR 0 1
6187: IFFALSE 6207
// say ( tmp [ 1 ] , D3a-Sci1-1 ) else
6189: LD_VAR 0 1
6193: PUSH
6194: LD_INT 1
6196: ARRAY
6197: PPUSH
6198: LD_STRING D3a-Sci1-1
6200: PPUSH
6201: CALL_OW 88
6205: GO 6230
// if isok ( gossud ) then
6207: LD_EXP 96
6211: PPUSH
6212: CALL_OW 302
6216: IFFALSE 6230
// say ( gossud , D3a-Sci1-1 ) ;
6218: LD_EXP 96
6222: PPUSH
6223: LD_STRING D3a-Sci1-1
6225: PPUSH
6226: CALL_OW 88
// end ; say ( john , D3a-JMM-1 ) ;
6230: LD_EXP 80
6234: PPUSH
6235: LD_STRING D3a-JMM-1
6237: PPUSH
6238: CALL_OW 88
// dialogueoff ;
6242: CALL_OW 7
// end ;
6246: PPOPN 1
6248: END
// every 0 0$1 + 2 2$30 trigger see ( al , ruv0 ) do var tmp ;
6249: LD_EXP 1
6253: PPUSH
6254: LD_EXP 117
6258: PPUSH
6259: CALL_OW 292
6263: IFFALSE 6416
6265: GO 6267
6267: DISABLE
6268: LD_INT 0
6270: PPUSH
// begin tmp = unitfilter ( arusove , [ [ f_ok ] , [ f_sex , sex_male ] ] ) ;
6271: LD_ADDR_VAR 0 1
6275: PUSH
6276: LD_EXP 100
6280: PPUSH
6281: LD_INT 50
6283: PUSH
6284: EMPTY
6285: LIST
6286: PUSH
6287: LD_INT 26
6289: PUSH
6290: LD_INT 1
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PPUSH
6301: CALL_OW 72
6305: ST_TO_ADDR
// if 0 = tmp then
6306: LD_INT 0
6308: PUSH
6309: LD_VAR 0 1
6313: EQUAL
6314: IFFALSE 6318
// exit ;
6316: GO 6416
// tmp = tmp diff [ gossud ] ;
6318: LD_ADDR_VAR 0 1
6322: PUSH
6323: LD_VAR 0 1
6327: PUSH
6328: LD_EXP 96
6332: PUSH
6333: EMPTY
6334: LIST
6335: DIFF
6336: ST_TO_ADDR
// dialogueon ;
6337: CALL_OW 6
// if tmp then
6341: LD_VAR 0 1
6345: IFFALSE 6365
// say ( tmp [ 1 ] , D4-RSci1-1 ) else
6347: LD_VAR 0 1
6351: PUSH
6352: LD_INT 1
6354: ARRAY
6355: PPUSH
6356: LD_STRING D4-RSci1-1
6358: PPUSH
6359: CALL_OW 88
6363: GO 6377
// say ( gossud , D4-RSci1-1 ) ;
6365: LD_EXP 96
6369: PPUSH
6370: LD_STRING D4-RSci1-1
6372: PPUSH
6373: CALL_OW 88
// if isok ( gossud ) then
6377: LD_EXP 96
6381: PPUSH
6382: CALL_OW 302
6386: IFFALSE 6400
// say ( gossud , D4-Gos-1 ) ;
6388: LD_EXP 96
6392: PPUSH
6393: LD_STRING D4-Gos-1
6395: PPUSH
6396: CALL_OW 88
// say ( john , D4-JMM-1 ) ;
6400: LD_EXP 80
6404: PPUSH
6405: LD_STRING D4-JMM-1
6407: PPUSH
6408: CALL_OW 88
// dialogueoff ;
6412: CALL_OW 7
// end ;
6416: PPOPN 1
6418: END
// every 4 4$10 do
6419: GO 6421
6421: DISABLE
// begin if debug then
6422: LD_EXP 77
6426: IFFALSE 6465
// begin uc_side = oth ;
6428: LD_ADDR_OWVAR 20
6432: PUSH
6433: LD_EXP 4
6437: ST_TO_ADDR
// changesidefog ( oth , al ) ;
6438: LD_EXP 4
6442: PPUSH
6443: LD_EXP 1
6447: PPUSH
6448: CALL_OW 343
// jahoda = newcharacter ( Belkov ) ;
6452: LD_ADDR_EXP 98
6456: PUSH
6457: LD_STRING Belkov
6459: PPUSH
6460: CALL_OW 25
6464: ST_TO_ADDR
// end ; placeunitxyr ( jahoda , 113 , 97 , 2 , false ) ;
6465: LD_EXP 98
6469: PPUSH
6470: LD_INT 113
6472: PPUSH
6473: LD_INT 97
6475: PPUSH
6476: LD_INT 2
6478: PPUSH
6479: LD_INT 0
6481: PPUSH
6482: CALL_OW 50
// commovexy ( jahoda , 79 , 65 ) ;
6486: LD_EXP 98
6490: PPUSH
6491: LD_INT 79
6493: PPUSH
6494: LD_INT 65
6496: PPUSH
6497: CALL_OW 111
// end ;
6501: END
// every 0 0$2 + 4 4$28 trigger isinarea ( jahoda , stred ) do var tmp ;
6502: LD_EXP 98
6506: PPUSH
6507: LD_INT 2
6509: PPUSH
6510: CALL_OW 308
6514: IFFALSE 6790
6516: GO 6518
6518: DISABLE
6519: LD_INT 0
6521: PPUSH
// begin tmp = unitfilter ( arusove , [ [ f_ok ] ] ) ;
6522: LD_ADDR_VAR 0 1
6526: PUSH
6527: LD_EXP 100
6531: PPUSH
6532: LD_INT 50
6534: PUSH
6535: EMPTY
6536: LIST
6537: PUSH
6538: EMPTY
6539: LIST
6540: PPUSH
6541: CALL_OW 72
6545: ST_TO_ADDR
// dialogueon ;
6546: CALL_OW 6
// sayradio ( jahoda , D5-Bel-1 ) ;
6550: LD_EXP 98
6554: PPUSH
6555: LD_STRING D5-Bel-1
6557: PPUSH
6558: CALL_OW 94
// if isok ( gossud ) then
6562: LD_EXP 96
6566: PPUSH
6567: CALL_OW 302
6571: IFFALSE 6623
// begin say ( gossud , D5-Gos-1 ) ;
6573: LD_EXP 96
6577: PPUSH
6578: LD_STRING D5-Gos-1
6580: PPUSH
6581: CALL_OW 88
// say ( john , D5-JMM-1 ) ;
6585: LD_EXP 80
6589: PPUSH
6590: LD_STRING D5-JMM-1
6592: PPUSH
6593: CALL_OW 88
// say ( gossud , D5-Gos-2 ) ;
6597: LD_EXP 96
6601: PPUSH
6602: LD_STRING D5-Gos-2
6604: PPUSH
6605: CALL_OW 88
// say ( john , D5-JMM-2 ) ;
6609: LD_EXP 80
6613: PPUSH
6614: LD_STRING D5-JMM-2
6616: PPUSH
6617: CALL_OW 88
// end else
6621: GO 6685
// if tmp then
6623: LD_VAR 0 1
6627: IFFALSE 6685
// begin say ( tmp [ 1 ] , D5-Gos-1 ) ;
6629: LD_VAR 0 1
6633: PUSH
6634: LD_INT 1
6636: ARRAY
6637: PPUSH
6638: LD_STRING D5-Gos-1
6640: PPUSH
6641: CALL_OW 88
// say ( john , D5-JMM-1 ) ;
6645: LD_EXP 80
6649: PPUSH
6650: LD_STRING D5-JMM-1
6652: PPUSH
6653: CALL_OW 88
// say ( tmp [ 1 ] , D5-Gos-2 ) ;
6657: LD_VAR 0 1
6661: PUSH
6662: LD_INT 1
6664: ARRAY
6665: PPUSH
6666: LD_STRING D5-Gos-2
6668: PPUSH
6669: CALL_OW 88
// say ( john , D5-JMM-2 ) ;
6673: LD_EXP 80
6677: PPUSH
6678: LD_STRING D5-JMM-2
6680: PPUSH
6681: CALL_OW 88
// end ; dialogueoff ;
6685: CALL_OW 7
// case query ( QSaveBelkov ) of 1 :
6689: LD_STRING QSaveBelkov
6691: PPUSH
6692: CALL_OW 97
6696: PUSH
6697: LD_INT 1
6699: DOUBLE
6700: EQUAL
6701: IFTRUE 6705
6703: GO 6740
6705: POP
// begin dialogueon ;
6706: CALL_OW 6
// say ( john , D5a-JMM-1 ) ;
6710: LD_EXP 80
6714: PPUSH
6715: LD_STRING D5a-JMM-1
6717: PPUSH
6718: CALL_OW 88
// sayradio ( jahoda , D5a-Bel-1 ) ;
6722: LD_EXP 98
6726: PPUSH
6727: LD_STRING D5a-Bel-1
6729: PPUSH
6730: CALL_OW 94
// dialogueoff ;
6734: CALL_OW 7
// end ; 2 :
6738: GO 6790
6740: LD_INT 2
6742: DOUBLE
6743: EQUAL
6744: IFTRUE 6748
6746: GO 6789
6748: POP
// begin dialogueon ;
6749: CALL_OW 6
// say ( john , D5a-JMM-2 ) ;
6753: LD_EXP 80
6757: PPUSH
6758: LD_STRING D5a-JMM-2
6760: PPUSH
6761: CALL_OW 88
// dialogueoff ;
6765: CALL_OW 7
// commovexy ( jahoda , 117 , 97 ) ;
6769: LD_EXP 98
6773: PPUSH
6774: LD_INT 117
6776: PPUSH
6777: LD_INT 97
6779: PPUSH
6780: CALL_OW 111
// enable ( 04 ) ;
6784: LD_INT 4
6786: ENABLE_MARKED
// end ; end ;
6787: GO 6790
6789: POP
// end ;
6790: PPOPN 1
6792: END
// every 0 0$1 + 4 4$33 trigger filterallunits ( [ [ f_side , al ] , [ f_dist , jahoda , 6 ] ] ) do
6793: LD_INT 22
6795: PUSH
6796: LD_EXP 1
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: PUSH
6805: LD_INT 91
6807: PUSH
6808: LD_EXP 98
6812: PUSH
6813: LD_INT 6
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: LIST
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: PPUSH
6825: CALL_OW 69
6829: IFFALSE 6848
6831: GO 6833
6833: DISABLE
// begin setside ( jahoda , al ) ;
6834: LD_EXP 98
6838: PPUSH
6839: LD_EXP 1
6843: PPUSH
6844: CALL_OW 235
// end ;
6848: END
// every 0 0$1 + 8 8$03 trigger see ( al , ruv1 ) or see ( al , ruv2 ) or see ( al , ruv3 ) marked 03 do var tmp ;
6849: LD_EXP 1
6853: PPUSH
6854: LD_EXP 118
6858: PPUSH
6859: CALL_OW 292
6863: PUSH
6864: LD_EXP 1
6868: PPUSH
6869: LD_EXP 119
6873: PPUSH
6874: CALL_OW 292
6878: OR
6879: PUSH
6880: LD_EXP 1
6884: PPUSH
6885: LD_EXP 120
6889: PPUSH
6890: CALL_OW 292
6894: OR
6895: IFFALSE 6941
6897: GO 6899
6899: DISABLE
6900: LD_INT 0
6902: PPUSH
// begin if islive ( jahoda ) then
6903: LD_EXP 98
6907: PPUSH
6908: CALL_OW 300
6912: IFFALSE 6941
// begin wait ( 0 0$2 ) ;
6914: LD_INT 70
6916: PPUSH
6917: CALL_OW 67
// dialogueon ;
6921: CALL_OW 6
// say ( jahoda , D6-Bel-1 ) ;
6925: LD_EXP 98
6929: PPUSH
6930: LD_STRING D6-Bel-1
6932: PPUSH
6933: CALL_OW 88
// dialogueoff ;
6937: CALL_OW 7
// end ; end ;
6941: PPOPN 1
6943: END
// export masha ; every 10 10$05 do
6944: GO 6946
6946: DISABLE
// begin uc_side = oth ;
6947: LD_ADDR_OWVAR 20
6951: PUSH
6952: LD_EXP 4
6956: ST_TO_ADDR
// uc_nation = nation_russian ;
6957: LD_ADDR_OWVAR 21
6961: PUSH
6962: LD_INT 3
6964: ST_TO_ADDR
// vc_control = control_manual ;
6965: LD_ADDR_OWVAR 38
6969: PUSH
6970: LD_INT 1
6972: ST_TO_ADDR
// vc_engine = engine_combustion ;
6973: LD_ADDR_OWVAR 39
6977: PUSH
6978: LD_INT 1
6980: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
6981: LD_ADDR_OWVAR 37
6985: PUSH
6986: LD_INT 21
6988: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
6989: LD_ADDR_OWVAR 40
6993: PUSH
6994: LD_INT 43
6996: ST_TO_ADDR
// masha = createvehicle ;
6997: LD_ADDR_EXP 112
7001: PUSH
7002: CALL_OW 45
7006: ST_TO_ADDR
// setmark ( masha , 1 ) ;
7007: LD_EXP 112
7011: PPUSH
7012: LD_INT 1
7014: PPUSH
7015: CALL_OW 242
// setfuel ( masha , 0 ) ;
7019: LD_EXP 112
7023: PPUSH
7024: LD_INT 0
7026: PPUSH
7027: CALL_OW 240
// setdir ( masha , 3 ) ;
7031: LD_EXP 112
7035: PPUSH
7036: LD_INT 3
7038: PPUSH
7039: CALL_OW 233
// setlives ( [ masha , burlak ] , 499 ) ;
7043: LD_EXP 112
7047: PUSH
7048: LD_EXP 99
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PPUSH
7057: LD_INT 499
7059: PPUSH
7060: CALL_OW 234
// placeunitxy ( masha , 116 , 4 , false ) ;
7064: LD_EXP 112
7068: PPUSH
7069: LD_INT 116
7071: PPUSH
7072: LD_INT 4
7074: PPUSH
7075: LD_INT 0
7077: PPUSH
7078: CALL_OW 48
// placeunitxy ( burlak , 116 , 2 , false ) ;
7082: LD_EXP 99
7086: PPUSH
7087: LD_INT 116
7089: PPUSH
7090: LD_INT 2
7092: PPUSH
7093: LD_INT 0
7095: PPUSH
7096: CALL_OW 48
// commoveunit ( burlak , masha ) ;
7100: LD_EXP 99
7104: PPUSH
7105: LD_EXP 112
7109: PPUSH
7110: CALL_OW 112
// wait ( 0 0$0.3 ) ;
7114: LD_INT 10
7116: PPUSH
7117: CALL_OW 67
// commovexy ( masha , 109 , 9 ) ;
7121: LD_EXP 112
7125: PPUSH
7126: LD_INT 109
7128: PPUSH
7129: LD_INT 9
7131: PPUSH
7132: CALL_OW 111
// end ;
7136: END
// every 0 0$0.51 + 10 10$08 trigger isinarea ( masha , burlakarriv ) do var tmp ;
7137: LD_EXP 112
7141: PPUSH
7142: LD_INT 6
7144: PPUSH
7145: CALL_OW 308
7149: IFFALSE 7741
7151: GO 7153
7153: DISABLE
7154: LD_INT 0
7156: PPUSH
// begin tmp = filterallunits ( [ [ f_side , al ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ;
7157: LD_ADDR_VAR 0 1
7161: PUSH
7162: LD_INT 22
7164: PUSH
7165: LD_EXP 1
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: PUSH
7174: LD_INT 23
7176: PUSH
7177: LD_INT 3
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 50
7186: PUSH
7187: EMPTY
7188: LIST
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: LIST
7194: PPUSH
7195: CALL_OW 69
7199: ST_TO_ADDR
// commovexy ( burlak , 110 , 8 ) ;
7200: LD_EXP 99
7204: PPUSH
7205: LD_INT 110
7207: PPUSH
7208: LD_INT 8
7210: PPUSH
7211: CALL_OW 111
// wait ( 0 0$1 ) ;
7215: LD_INT 35
7217: PPUSH
7218: CALL_OW 67
// dialogueon ;
7222: CALL_OW 6
// sayradio ( burlak , D10-Bur-1 ) ;
7226: LD_EXP 99
7230: PPUSH
7231: LD_STRING D10-Bur-1
7233: PPUSH
7234: CALL_OW 94
// if isok ( jahoda ) then
7238: LD_EXP 98
7242: PPUSH
7243: CALL_OW 302
7247: IFFALSE 7263
// say ( jahoda , D10-Bel-1 ) else
7249: LD_EXP 98
7253: PPUSH
7254: LD_STRING D10-Bel-1
7256: PPUSH
7257: CALL_OW 88
7261: GO 7360
// if isok ( gossud ) then
7263: LD_EXP 96
7267: PPUSH
7268: CALL_OW 302
7272: IFFALSE 7288
// say ( gossud , D10-Gos-1 ) else
7274: LD_EXP 96
7278: PPUSH
7279: LD_STRING D10-Gos-1
7281: PPUSH
7282: CALL_OW 88
7286: GO 7360
// if isok ( kiril ) then
7288: LD_EXP 97
7292: PPUSH
7293: CALL_OW 302
7297: IFFALSE 7313
// say ( kiril , D10-Kir-1 ) else
7299: LD_EXP 97
7303: PPUSH
7304: LD_STRING D10-Kir-1
7306: PPUSH
7307: CALL_OW 88
7311: GO 7360
// if tmp then
7313: LD_VAR 0 1
7317: IFFALSE 7337
// say ( tmp [ 1 ] , D10-RSol1-1 ) else
7319: LD_VAR 0 1
7323: PUSH
7324: LD_INT 1
7326: ARRAY
7327: PPUSH
7328: LD_STRING D10-RSol1-1
7330: PPUSH
7331: CALL_OW 88
7335: GO 7360
// if isok ( roth ) then
7337: LD_EXP 81
7341: PPUSH
7342: CALL_OW 302
7346: IFFALSE 7360
// say ( roth , D10-RSol1-1 ) ;
7348: LD_EXP 81
7352: PPUSH
7353: LD_STRING D10-RSol1-1
7355: PPUSH
7356: CALL_OW 88
// sayradio ( burlak , D10-Bur-2 ) ;
7360: LD_EXP 99
7364: PPUSH
7365: LD_STRING D10-Bur-2
7367: PPUSH
7368: CALL_OW 94
// say ( john , D10-JMM-2 ) ;
7372: LD_EXP 80
7376: PPUSH
7377: LD_STRING D10-JMM-2
7379: PPUSH
7380: CALL_OW 88
// tmp = tmp diff gossud ;
7384: LD_ADDR_VAR 0 1
7388: PUSH
7389: LD_VAR 0 1
7393: PUSH
7394: LD_EXP 96
7398: DIFF
7399: ST_TO_ADDR
// if isok ( kiril ) then
7400: LD_EXP 97
7404: PPUSH
7405: CALL_OW 302
7409: IFFALSE 7425
// say ( kiril , D10-Kir-2 ) else
7411: LD_EXP 97
7415: PPUSH
7416: LD_STRING D10-Kir-2
7418: PPUSH
7419: CALL_OW 88
7423: GO 7447
// if tmp then
7425: LD_VAR 0 1
7429: IFFALSE 7447
// say ( tmp [ 1 ] , D10-RSol1-2 ) ;
7431: LD_VAR 0 1
7435: PUSH
7436: LD_INT 1
7438: ARRAY
7439: PPUSH
7440: LD_STRING D10-RSol1-2
7442: PPUSH
7443: CALL_OW 88
// say ( john , D10-JMM-3 ) ;
7447: LD_EXP 80
7451: PPUSH
7452: LD_STRING D10-JMM-3
7454: PPUSH
7455: CALL_OW 88
// sayradio ( burlak , D10-Bur-3 ) ;
7459: LD_EXP 99
7463: PPUSH
7464: LD_STRING D10-Bur-3
7466: PPUSH
7467: CALL_OW 94
// say ( john , D10-JMM-4 ) ;
7471: LD_EXP 80
7475: PPUSH
7476: LD_STRING D10-JMM-4
7478: PPUSH
7479: CALL_OW 88
// dialogueoff ;
7483: CALL_OW 7
// changemissionobjectives ( M2 ) ;
7487: LD_STRING M2
7489: PPUSH
7490: CALL_OW 337
// update_display ( 1 ) ;
7494: LD_INT 1
7496: PPUSH
7497: CALL 13610 0 1
// case difficulty of 1 :
7501: LD_OWVAR 67
7505: PUSH
7506: LD_INT 1
7508: DOUBLE
7509: EQUAL
7510: IFTRUE 7514
7512: GO 7524
7514: POP
// wait ( 20 20$0 ) ; 2 :
7515: LD_INT 42000
7517: PPUSH
7518: CALL_OW 67
7522: GO 7561
7524: LD_INT 2
7526: DOUBLE
7527: EQUAL
7528: IFTRUE 7532
7530: GO 7542
7532: POP
// wait ( 15 15$0 ) ; 3 :
7533: LD_INT 31500
7535: PPUSH
7536: CALL_OW 67
7540: GO 7561
7542: LD_INT 3
7544: DOUBLE
7545: EQUAL
7546: IFTRUE 7550
7548: GO 7560
7550: POP
// wait ( 7 7$0 ) ; end ;
7551: LD_INT 14700
7553: PPUSH
7554: CALL_OW 67
7558: GO 7561
7560: POP
// hiddencamera ( 117 , 15 , ar ) ;
7561: LD_INT 117
7563: PPUSH
7564: LD_INT 15
7566: PPUSH
7567: LD_EXP 3
7571: PPUSH
7572: CALL_OW 244
// hiddencamera ( 111 , 18 , ar ) ;
7576: LD_INT 111
7578: PPUSH
7579: LD_INT 18
7581: PPUSH
7582: LD_EXP 3
7586: PPUSH
7587: CALL_OW 244
// hiddencamera ( 107 , 18 , ar ) ;
7591: LD_INT 107
7593: PPUSH
7594: LD_INT 18
7596: PPUSH
7597: LD_EXP 3
7601: PPUSH
7602: CALL_OW 244
// hiddencamera ( 108 , 23 , ar ) ;
7606: LD_INT 108
7608: PPUSH
7609: LD_INT 23
7611: PPUSH
7612: LD_EXP 3
7616: PPUSH
7617: CALL_OW 244
// hiddencamera ( 122 , 18 , ar ) ;
7621: LD_INT 122
7623: PPUSH
7624: LD_INT 18
7626: PPUSH
7627: LD_EXP 3
7631: PPUSH
7632: CALL_OW 244
// hiddencamera ( 102 , 22 , ar ) ;
7636: LD_INT 102
7638: PPUSH
7639: LD_INT 22
7641: PPUSH
7642: LD_EXP 3
7646: PPUSH
7647: CALL_OW 244
// hiddencamera ( 107 , 29 , ar ) ;
7651: LD_INT 107
7653: PPUSH
7654: LD_INT 29
7656: PPUSH
7657: LD_EXP 3
7661: PPUSH
7662: CALL_OW 244
// defid = mcdefend ( 100 , regid , [ ars3 , ars4 , ars5 , arm1 , arm4 , arm5 , arm6 ] , [ [ mc_area_dont_leave , area4reg ] ] ) ;
7666: LD_ADDR_EXP 152
7670: PUSH
7671: LD_INT 100
7673: PPUSH
7674: LD_EXP 151
7678: PPUSH
7679: LD_EXP 9
7683: PUSH
7684: LD_EXP 10
7688: PUSH
7689: LD_EXP 11
7693: PUSH
7694: LD_EXP 136
7698: PUSH
7699: LD_EXP 142
7703: PUSH
7704: LD_EXP 144
7708: PUSH
7709: LD_EXP 146
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: PPUSH
7723: LD_INT 2
7725: PUSH
7726: LD_INT 25
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: PUSH
7733: EMPTY
7734: LIST
7735: PPUSH
7736: CALL_OW 401
7740: ST_TO_ADDR
// end ;
7741: PPOPN 1
7743: END
// export burlakmet ; every 0 0$1 + 10 10$15 trigger filterallunits ( [ [ f_side , al ] , [ f_dist , burlak , 6 ] ] ) marked 08 do
7744: LD_INT 22
7746: PUSH
7747: LD_EXP 1
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PUSH
7756: LD_INT 91
7758: PUSH
7759: LD_EXP 99
7763: PUSH
7764: LD_INT 6
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PPUSH
7776: CALL_OW 69
7780: IFFALSE 7810
7782: GO 7784
7784: DISABLE
// begin setside ( burlak , al ) ;
7785: LD_EXP 99
7789: PPUSH
7790: LD_EXP 1
7794: PPUSH
7795: CALL_OW 235
// burlakmet = true ;
7799: LD_ADDR_EXP 113
7803: PUSH
7804: LD_INT 1
7806: ST_TO_ADDR
// enable ( 13 ) ;
7807: LD_INT 13
7809: ENABLE_MARKED
// end ;
7810: END
// every 0 0$1 + 10 10$15 trigger getdistunits ( john , burlak ) < 11 do var tmp , tmp2 ;
7811: LD_EXP 80
7815: PPUSH
7816: LD_EXP 99
7820: PPUSH
7821: CALL_OW 296
7825: PUSH
7826: LD_INT 11
7828: LESS
7829: IFFALSE 8471
7831: GO 7833
7833: DISABLE
7834: LD_INT 0
7836: PPUSH
7837: PPUSH
// begin disable ( 08 ) ;
7838: LD_INT 8
7840: DISABLE_MARKED
// setside ( burlak , al ) ;
7841: LD_EXP 99
7845: PPUSH
7846: LD_EXP 1
7850: PPUSH
7851: CALL_OW 235
// burlakmet = true ;
7855: LD_ADDR_EXP 113
7859: PUSH
7860: LD_INT 1
7862: ST_TO_ADDR
// enable ( 13 ) ;
7863: LD_INT 13
7865: ENABLE_MARKED
// tmp = filterallunits ( [ [ f_side , al ] , [ f_ok ] , f_not , [ f_nation , nation_nature ] ] ) ;
7866: LD_ADDR_VAR 0 1
7870: PUSH
7871: LD_INT 22
7873: PUSH
7874: LD_EXP 1
7878: PUSH
7879: EMPTY
7880: LIST
7881: LIST
7882: PUSH
7883: LD_INT 50
7885: PUSH
7886: EMPTY
7887: LIST
7888: PUSH
7889: LD_INT 3
7891: PUSH
7892: LD_INT 23
7894: PUSH
7895: LD_INT 0
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: PPUSH
7908: CALL_OW 69
7912: ST_TO_ADDR
// tmp2 = unitfilter ( tmp , [ [ f_class , class_scientistic ] ] ) ;
7913: LD_ADDR_VAR 0 2
7917: PUSH
7918: LD_VAR 0 1
7922: PPUSH
7923: LD_INT 25
7925: PUSH
7926: LD_INT 4
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: EMPTY
7934: LIST
7935: PPUSH
7936: CALL_OW 72
7940: ST_TO_ADDR
// dialogueon ;
7941: CALL_OW 6
// say ( john , D11-JMM-1 ) ;
7945: LD_EXP 80
7949: PPUSH
7950: LD_STRING D11-JMM-1
7952: PPUSH
7953: CALL_OW 88
// say ( burlak , D11-Bur-1 ) ;
7957: LD_EXP 99
7961: PPUSH
7962: LD_STRING D11-Bur-1
7964: PPUSH
7965: CALL_OW 88
// say ( john , D11-JMM-2 ) ;
7969: LD_EXP 80
7973: PPUSH
7974: LD_STRING D11-JMM-2
7976: PPUSH
7977: CALL_OW 88
// say ( burlak , D11-Bur-2 ) ;
7981: LD_EXP 99
7985: PPUSH
7986: LD_STRING D11-Bur-2
7988: PPUSH
7989: CALL_OW 88
// say ( john , D11-JMM-3 ) ;
7993: LD_EXP 80
7997: PPUSH
7998: LD_STRING D11-JMM-3
8000: PPUSH
8001: CALL_OW 88
// say ( burlak , D11-Bur-3 ) ;
8005: LD_EXP 99
8009: PPUSH
8010: LD_STRING D11-Bur-3
8012: PPUSH
8013: CALL_OW 88
// say ( john , D11-JMM-4 ) ;
8017: LD_EXP 80
8021: PPUSH
8022: LD_STRING D11-JMM-4
8024: PPUSH
8025: CALL_OW 88
// dialogueoff ;
8029: CALL_OW 7
// changemissionobjectives ( M3 ) ;
8033: LD_STRING M3
8035: PPUSH
8036: CALL_OW 337
// dialogueon ;
8040: CALL_OW 6
// if ar_base_spotted then
8044: LD_EXP 153
8048: IFFALSE 8064
// say ( burlak , D12-Bur-1 ) else
8050: LD_EXP 99
8054: PPUSH
8055: LD_STRING D12-Bur-1
8057: PPUSH
8058: CALL_OW 88
8062: GO 8101
// begin disable ( 06 ) ;
8064: LD_INT 6
8066: DISABLE_MARKED
// say ( burlak , D12-Bur-1a ) ;
8067: LD_EXP 99
8071: PPUSH
8072: LD_STRING D12-Bur-1a
8074: PPUSH
8075: CALL_OW 88
// revealfogarea ( al , arab_base_reveal ) ;
8079: LD_EXP 1
8083: PPUSH
8084: LD_INT 11
8086: PPUSH
8087: CALL_OW 332
// centernowonunits ( [ abduluv ] ) ;
8091: LD_INT 22
8093: PUSH
8094: EMPTY
8095: LIST
8096: PPUSH
8097: CALL_OW 87
// end ; say ( burlak , D12-Bur-1b ) ;
8101: LD_EXP 99
8105: PPUSH
8106: LD_STRING D12-Bur-1b
8108: PPUSH
8109: CALL_OW 88
// say ( john , D12-JMM-1 ) ;
8113: LD_EXP 80
8117: PPUSH
8118: LD_STRING D12-JMM-1
8120: PPUSH
8121: CALL_OW 88
// say ( burlak , D12-Bur-2 ) ;
8125: LD_EXP 99
8129: PPUSH
8130: LD_STRING D12-Bur-2
8132: PPUSH
8133: CALL_OW 88
// if isok ( roth ) then
8137: LD_EXP 81
8141: PPUSH
8142: CALL_OW 302
8146: IFFALSE 8162
// say ( roth , D12-Roth-2 ) else
8148: LD_EXP 81
8152: PPUSH
8153: LD_STRING D12-Roth-2
8155: PPUSH
8156: CALL_OW 88
8160: GO 8208
// if tmp2 then
8162: LD_VAR 0 2
8166: IFFALSE 8186
// say ( tmp2 [ 1 ] , D12-RSci1-2 ) else
8168: LD_VAR 0 2
8172: PUSH
8173: LD_INT 1
8175: ARRAY
8176: PPUSH
8177: LD_STRING D12-RSci1-2
8179: PPUSH
8180: CALL_OW 88
8184: GO 8208
// if tmp then
8186: LD_VAR 0 1
8190: IFFALSE 8208
// say ( tmp [ 1 ] , D12-RSci1-2 ) ;
8192: LD_VAR 0 1
8196: PUSH
8197: LD_INT 1
8199: ARRAY
8200: PPUSH
8201: LD_STRING D12-RSci1-2
8203: PPUSH
8204: CALL_OW 88
// say ( john , D12-JMM-2 ) ;
8208: LD_EXP 80
8212: PPUSH
8213: LD_STRING D12-JMM-2
8215: PPUSH
8216: CALL_OW 88
// say ( burlak , D12-Bur-3 ) ;
8220: LD_EXP 99
8224: PPUSH
8225: LD_STRING D12-Bur-3
8227: PPUSH
8228: CALL_OW 88
// say ( john , D12-JMM-3 ) ;
8232: LD_EXP 80
8236: PPUSH
8237: LD_STRING D12-JMM-3
8239: PPUSH
8240: CALL_OW 88
// say ( burlak , D12-Bur-4 ) ;
8244: LD_EXP 99
8248: PPUSH
8249: LD_STRING D12-Bur-4
8251: PPUSH
8252: CALL_OW 88
// dialogueoff ;
8256: CALL_OW 7
// case query ( QBase ) of 1 :
8260: LD_STRING QBase
8262: PPUSH
8263: CALL_OW 97
8267: PUSH
8268: LD_INT 1
8270: DOUBLE
8271: EQUAL
8272: IFTRUE 8276
8274: GO 8433
8276: POP
// begin dialogueon ;
8277: CALL_OW 6
// say ( john , D13a-JMM-1 ) ;
8281: LD_EXP 80
8285: PPUSH
8286: LD_STRING D13a-JMM-1
8288: PPUSH
8289: CALL_OW 88
// say ( burlak , D13a-Bur-1 ) ;
8293: LD_EXP 99
8297: PPUSH
8298: LD_STRING D13a-Bur-1
8300: PPUSH
8301: CALL_OW 88
// if isok ( roth ) then
8305: LD_EXP 81
8309: PPUSH
8310: CALL_OW 302
8314: IFFALSE 8330
// say ( roth , D13a-Roth-1 ) else
8316: LD_EXP 81
8320: PPUSH
8321: LD_STRING D13a-Roth-1
8323: PPUSH
8324: CALL_OW 88
8328: GO 8376
// if tmp2 then
8330: LD_VAR 0 2
8334: IFFALSE 8354
// say ( tmp2 [ 1 ] , D13a-RSci1-1 ) else
8336: LD_VAR 0 2
8340: PUSH
8341: LD_INT 1
8343: ARRAY
8344: PPUSH
8345: LD_STRING D13a-RSci1-1
8347: PPUSH
8348: CALL_OW 88
8352: GO 8376
// if tmp then
8354: LD_VAR 0 1
8358: IFFALSE 8376
// say ( tmp [ 1 ] , D13a-RSci1-1 ) ;
8360: LD_VAR 0 1
8364: PUSH
8365: LD_INT 1
8367: ARRAY
8368: PPUSH
8369: LD_STRING D13a-RSci1-1
8371: PPUSH
8372: CALL_OW 88
// say ( john , D13a-JMM-2 ) ;
8376: LD_EXP 80
8380: PPUSH
8381: LD_STRING D13a-JMM-2
8383: PPUSH
8384: CALL_OW 88
// dialogueoff ;
8388: CALL_OW 7
// case query ( QBaseAgain ) of 1 :
8392: LD_STRING QBaseAgain
8394: PPUSH
8395: CALL_OW 97
8399: PUSH
8400: LD_INT 1
8402: DOUBLE
8403: EQUAL
8404: IFTRUE 8408
8406: GO 8415
8408: POP
// pokec1 ; 2 :
8409: CALL 8474 0 0
8413: GO 8431
8415: LD_INT 2
8417: DOUBLE
8418: EQUAL
8419: IFTRUE 8423
8421: GO 8430
8423: POP
// pokec2 ; end ;
8424: CALL 8585 0 0
8428: GO 8431
8430: POP
// end ; 2 :
8431: GO 8464
8433: LD_INT 2
8435: DOUBLE
8436: EQUAL
8437: IFTRUE 8441
8439: GO 8448
8441: POP
// pokec1 ; 3 :
8442: CALL 8474 0 0
8446: GO 8464
8448: LD_INT 3
8450: DOUBLE
8451: EQUAL
8452: IFTRUE 8456
8454: GO 8463
8456: POP
// pokec2 ; end ;
8457: CALL 8585 0 0
8461: GO 8464
8463: POP
// changemissionobjectives ( M4 ) ;
8464: LD_STRING M4
8466: PPUSH
8467: CALL_OW 337
// end ;
8471: PPOPN 2
8473: END
// export vyjednavalo_se ; function pokec1 ; begin
8474: LD_INT 0
8476: PPUSH
// dialogueon ;
8477: CALL_OW 6
// say ( john , D13b-JMM-1 ) ;
8481: LD_EXP 80
8485: PPUSH
8486: LD_STRING D13b-JMM-1
8488: PPUSH
8489: CALL_OW 88
// say ( burlak , D13b-Bur-1 ) ;
8493: LD_EXP 99
8497: PPUSH
8498: LD_STRING D13b-Bur-1
8500: PPUSH
8501: CALL_OW 88
// say ( john , D13b-JMM-2 ) ;
8505: LD_EXP 80
8509: PPUSH
8510: LD_STRING D13b-JMM-2
8512: PPUSH
8513: CALL_OW 88
// sayradio ( abdul , D13b-Abd-2 ) ;
8517: LD_EXP 134
8521: PPUSH
8522: LD_STRING D13b-Abd-2
8524: PPUSH
8525: CALL_OW 94
// say ( john , D13b-JMM-3 ) ;
8529: LD_EXP 80
8533: PPUSH
8534: LD_STRING D13b-JMM-3
8536: PPUSH
8537: CALL_OW 88
// sayradio ( abdul , D13b-Abd-3 ) ;
8541: LD_EXP 134
8545: PPUSH
8546: LD_STRING D13b-Abd-3
8548: PPUSH
8549: CALL_OW 94
// say ( john , D13b-JMM-4 ) ;
8553: LD_EXP 80
8557: PPUSH
8558: LD_STRING D13b-JMM-4
8560: PPUSH
8561: CALL_OW 88
// dialogueoff ;
8565: CALL_OW 7
// vyjednavalo_se = true ;
8569: LD_ADDR_EXP 114
8573: PUSH
8574: LD_INT 1
8576: ST_TO_ADDR
// enable ( 07 ) ;
8577: LD_INT 7
8579: ENABLE_MARKED
// end ;
8580: LD_VAR 0 1
8584: RET
// function pokec2 ; begin
8585: LD_INT 0
8587: PPUSH
// dialogueon ;
8588: CALL_OW 6
// say ( john , D13c-JMM-1 ) ;
8592: LD_EXP 80
8596: PPUSH
8597: LD_STRING D13c-JMM-1
8599: PPUSH
8600: CALL_OW 88
// say ( burlak , D13c-Bur-1 ) ;
8604: LD_EXP 99
8608: PPUSH
8609: LD_STRING D13c-Bur-1
8611: PPUSH
8612: CALL_OW 88
// dialogueoff ;
8616: CALL_OW 7
// end ; end_of_file
8620: LD_VAR 0 1
8624: RET
// export rusove , rusoveu ; export ruv0 , ruv1 , ruv2 , ruv3 , ruv4 , ruv5 , ruv6 , ruv7 , ruv8 ; export rumech1 , rumech2 , rumech3 , rumech4 , rumech5 , rumech6 , rumech7 , rumech8 ; every 2 2$30 do
8625: GO 8627
8627: DISABLE
// begin uc_side = rus ;
8628: LD_ADDR_OWVAR 20
8632: PUSH
8633: LD_EXP 2
8637: ST_TO_ADDR
// uc_nation = nation_russian ;
8638: LD_ADDR_OWVAR 21
8642: PUSH
8643: LD_INT 3
8645: ST_TO_ADDR
// vc_engine = engine_siberite ;
8646: LD_ADDR_OWVAR 39
8650: PUSH
8651: LD_INT 3
8653: ST_TO_ADDR
// vc_control = control_computer ;
8654: LD_ADDR_OWVAR 38
8658: PUSH
8659: LD_INT 3
8661: ST_TO_ADDR
// vc_chassis = ruv0_ch ;
8662: LD_ADDR_OWVAR 37
8666: PUSH
8667: LD_EXP 44
8671: ST_TO_ADDR
// vc_weapon = ruv0_wp ;
8672: LD_ADDR_OWVAR 40
8676: PUSH
8677: LD_EXP 45
8681: ST_TO_ADDR
// ruv0 = createvehicle ;
8682: LD_ADDR_EXP 117
8686: PUSH
8687: CALL_OW 45
8691: ST_TO_ADDR
// setdir ( ruv0 , 0 ) ;
8692: LD_EXP 117
8696: PPUSH
8697: LD_INT 0
8699: PPUSH
8700: CALL_OW 233
// placeunitxy ( ruv0 , 70 , 96 , false ) ;
8704: LD_EXP 117
8708: PPUSH
8709: LD_INT 70
8711: PPUSH
8712: LD_INT 96
8714: PPUSH
8715: LD_INT 0
8717: PPUSH
8718: CALL_OW 48
// commovexy ( ruv0 , 60 , 48 ) ;
8722: LD_EXP 117
8726: PPUSH
8727: LD_INT 60
8729: PPUSH
8730: LD_INT 48
8732: PPUSH
8733: CALL_OW 111
// addcommovexy ( ruv0 , 70 , 97 ) ;
8737: LD_EXP 117
8741: PPUSH
8742: LD_INT 70
8744: PPUSH
8745: LD_INT 97
8747: PPUSH
8748: CALL_OW 171
// end ;
8752: END
// every 0 0$1 + 2 2$35 trigger isinarea ( ruv0 , south_exit_0 ) do
8753: LD_EXP 117
8757: PPUSH
8758: LD_INT 3
8760: PPUSH
8761: CALL_OW 308
8765: IFFALSE 8787
8767: GO 8769
8769: DISABLE
// begin destroyunit ( ruv0 ) ;
8770: LD_EXP 117
8774: PPUSH
8775: CALL_OW 65
// ruv0 = 0 ;
8779: LD_ADDR_EXP 117
8783: PUSH
8784: LD_INT 0
8786: ST_TO_ADDR
// end ;
8787: END
// var ruvzj ; every 0 0$1 marked 04 do
8788: GO 8790
8790: DISABLE
// begin uc_side = rus ;
8791: LD_ADDR_OWVAR 20
8795: PUSH
8796: LD_EXP 2
8800: ST_TO_ADDR
// uc_nation = nation_russian ;
8801: LD_ADDR_OWVAR 21
8805: PUSH
8806: LD_INT 3
8808: ST_TO_ADDR
// vc_engine = engine_siberite ;
8809: LD_ADDR_OWVAR 39
8813: PUSH
8814: LD_INT 3
8816: ST_TO_ADDR
// vc_control = control_manual ;
8817: LD_ADDR_OWVAR 38
8821: PUSH
8822: LD_INT 1
8824: ST_TO_ADDR
// vc_chassis = ru_heavy_tracked ;
8825: LD_ADDR_OWVAR 37
8829: PUSH
8830: LD_INT 24
8832: ST_TO_ADDR
// vc_weapon = ru_gatling_gun ;
8833: LD_ADDR_OWVAR 40
8837: PUSH
8838: LD_INT 43
8840: ST_TO_ADDR
// ruvzj = createvehicle ;
8841: LD_ADDR_LOC 6
8845: PUSH
8846: CALL_OW 45
8850: ST_TO_ADDR
// setdir ( ruvzj , 0 ) ;
8851: LD_LOC 6
8855: PPUSH
8856: LD_INT 0
8858: PPUSH
8859: CALL_OW 233
// placeunitxyr ( ruvzj , 112 , 96 , 5 , false ) ;
8863: LD_LOC 6
8867: PPUSH
8868: LD_INT 112
8870: PPUSH
8871: LD_INT 96
8873: PPUSH
8874: LD_INT 5
8876: PPUSH
8877: LD_INT 0
8879: PPUSH
8880: CALL_OW 50
// preparemechanic ( sex_male , 8 ) ;
8884: LD_INT 1
8886: PPUSH
8887: LD_INT 8
8889: PPUSH
8890: CALL_OW 383
// placehumaninunit ( createhuman , ruvzj ) ;
8894: CALL_OW 44
8898: PPUSH
8899: LD_LOC 6
8903: PPUSH
8904: CALL_OW 52
// comattackunit ( ruvzj , jahoda ) ;
8908: LD_LOC 6
8912: PPUSH
8913: LD_EXP 98
8917: PPUSH
8918: CALL_OW 115
// end ;
8922: END
// on unitgoestored ( un ) do if un = jahoda then
8923: LD_VAR 0 1
8927: PUSH
8928: LD_EXP 98
8932: EQUAL
8933: IFFALSE 8949
// comattackunit ( ruvzj , jahoda ) ;
8935: LD_LOC 6
8939: PPUSH
8940: LD_EXP 98
8944: PPUSH
8945: CALL_OW 115
8949: PPOPN 1
8951: END
// on unitdestroyed ( un ) do if un = jahoda then
8952: LD_VAR 0 1
8956: PUSH
8957: LD_EXP 98
8961: EQUAL
8962: IFFALSE 8984
// begin commovexy ( ruvzj , 112 , 96 ) ;
8964: LD_LOC 6
8968: PPUSH
8969: LD_INT 112
8971: PPUSH
8972: LD_INT 96
8974: PPUSH
8975: CALL_OW 111
// enable ( 12 ) ;
8979: LD_INT 12
8981: ENABLE_MARKED
// end else
8982: GO 9153
// if un = john then
8984: LD_VAR 0 1
8988: PUSH
8989: LD_EXP 80
8993: EQUAL
8994: IFFALSE 9005
// youlost ( JMM ) else
8996: LD_STRING JMM
8998: PPUSH
8999: CALL_OW 104
9003: GO 9153
// if ( un = burlak ) and burlakmet then
9005: LD_VAR 0 1
9009: PUSH
9010: LD_EXP 99
9014: EQUAL
9015: PUSH
9016: LD_EXP 113
9020: AND
9021: IFFALSE 9032
// youlost ( Burlak ) else
9023: LD_STRING Burlak
9025: PPUSH
9026: CALL_OW 104
9030: GO 9153
// if ( un = abdul ) and isdead ( abduluv ) then
9032: LD_VAR 0 1
9036: PUSH
9037: LD_EXP 134
9041: EQUAL
9042: PUSH
9043: LD_INT 22
9045: PPUSH
9046: CALL_OW 301
9050: AND
9051: IFFALSE 9062
// changemissionobjectives ( M4a ) else
9053: LD_STRING M4a
9055: PPUSH
9056: CALL_OW 337
9060: GO 9153
// if ( un = abduluv ) and isdead ( abdul ) then
9062: LD_VAR 0 1
9066: PUSH
9067: LD_INT 22
9069: EQUAL
9070: PUSH
9071: LD_EXP 134
9075: PPUSH
9076: CALL_OW 301
9080: AND
9081: IFFALSE 9092
// changemissionobjectives ( M4a ) else
9083: LD_STRING M4a
9085: PPUSH
9086: CALL_OW 337
9090: GO 9153
// if ( un = nakladak ) then
9092: LD_VAR 0 1
9096: PUSH
9097: LD_INT 23
9099: EQUAL
9100: IFFALSE 9115
// begin artef_out = true ;
9102: LD_ADDR_EXP 78
9106: PUSH
9107: LD_INT 1
9109: ST_TO_ADDR
// enable ( 15 ) ;
9110: LD_INT 15
9112: ENABLE_MARKED
// end else
9113: GO 9153
// if ( un = arbarr ) then
9115: LD_VAR 0 1
9119: PUSH
9120: LD_INT 2
9122: EQUAL
9123: IFFALSE 9135
// base_out = true else
9125: LD_ADDR_EXP 79
9129: PUSH
9130: LD_INT 1
9132: ST_TO_ADDR
9133: GO 9153
// if ( un = ar_depot ) then
9135: LD_VAR 0 1
9139: PUSH
9140: LD_INT 1
9142: EQUAL
9143: IFFALSE 9153
// base_out = true ;
9145: LD_ADDR_EXP 79
9149: PUSH
9150: LD_INT 1
9152: ST_TO_ADDR
9153: PPOPN 1
9155: END
// every 0 0$1 trigger isinarea ( ruvzj , south_exit_2 ) marked 12 do
9156: LD_LOC 6
9160: PPUSH
9161: LD_INT 10
9163: PPUSH
9164: CALL_OW 308
9168: IFFALSE 9190
9170: GO 9172
9172: DISABLE
// begin destroyunit ( ruvzj ) ;
9173: LD_LOC 6
9177: PPUSH
9178: CALL_OW 65
// ruvzj = 0 ;
9182: LD_ADDR_LOC 6
9186: PUSH
9187: LD_INT 0
9189: ST_TO_ADDR
// end ;
9190: END
// every 0 0$15 + 7 7$45 do var tmp ;
9191: GO 9193
9193: DISABLE
9194: LD_INT 0
9196: PPUSH
// begin delay = delay - 0 0$15 ;
9197: LD_ADDR_EXP 72
9201: PUSH
9202: LD_EXP 72
9206: PUSH
9207: LD_INT 525
9209: MINUS
9210: ST_TO_ADDR
// if delay then
9211: LD_EXP 72
9215: IFFALSE 9220
// begin enable ;
9217: ENABLE
// exit ;
9218: GO 9700
// end ; case difficulty of 1 :
9220: LD_OWVAR 67
9224: PUSH
9225: LD_INT 1
9227: DOUBLE
9228: EQUAL
9229: IFTRUE 9233
9231: GO 9244
9233: POP
// time2wait = 3 3$00 ; 2 :
9234: LD_ADDR_EXP 71
9238: PUSH
9239: LD_INT 6300
9241: ST_TO_ADDR
9242: GO 9283
9244: LD_INT 2
9246: DOUBLE
9247: EQUAL
9248: IFTRUE 9252
9250: GO 9263
9252: POP
// time2wait = 1 1$30 ; 3 :
9253: LD_ADDR_EXP 71
9257: PUSH
9258: LD_INT 3150
9260: ST_TO_ADDR
9261: GO 9283
9263: LD_INT 3
9265: DOUBLE
9266: EQUAL
9267: IFTRUE 9271
9269: GO 9282
9271: POP
// time2wait = 0 0$30 ; end ;
9272: LD_ADDR_EXP 71
9276: PUSH
9277: LD_INT 1050
9279: ST_TO_ADDR
9280: GO 9283
9282: POP
// delay = time2wait ;
9283: LD_ADDR_EXP 72
9287: PUSH
9288: LD_EXP 71
9292: ST_TO_ADDR
// uc_side = rus ;
9293: LD_ADDR_OWVAR 20
9297: PUSH
9298: LD_EXP 2
9302: ST_TO_ADDR
// uc_nation = nation_russian ;
9303: LD_ADDR_OWVAR 21
9307: PUSH
9308: LD_INT 3
9310: ST_TO_ADDR
// vc_engine = engine_siberite ;
9311: LD_ADDR_OWVAR 39
9315: PUSH
9316: LD_INT 3
9318: ST_TO_ADDR
// vc_control = control_manual ;
9319: LD_ADDR_OWVAR 38
9323: PUSH
9324: LD_INT 1
9326: ST_TO_ADDR
// vc_chassis = ruv1_ch ;
9327: LD_ADDR_OWVAR 37
9331: PUSH
9332: LD_EXP 46
9336: ST_TO_ADDR
// vc_weapon = ruv1_wp ;
9337: LD_ADDR_OWVAR 40
9341: PUSH
9342: LD_EXP 47
9346: ST_TO_ADDR
// ruv1 = createvehicle ;
9347: LD_ADDR_EXP 118
9351: PUSH
9352: CALL_OW 45
9356: ST_TO_ADDR
// setdir ( ruv1 , 0 ) ;
9357: LD_EXP 118
9361: PPUSH
9362: LD_INT 0
9364: PPUSH
9365: CALL_OW 233
// placeunitxy ( ruv1 , 70 , 95 , false ) ;
9369: LD_EXP 118
9373: PPUSH
9374: LD_INT 70
9376: PPUSH
9377: LD_INT 95
9379: PPUSH
9380: LD_INT 0
9382: PPUSH
9383: CALL_OW 48
// preparemechanic ( sex_male , rumech1_sk ) ;
9387: LD_INT 1
9389: PPUSH
9390: LD_EXP 62
9394: PPUSH
9395: CALL_OW 383
// rumech1 = createhuman ;
9399: LD_ADDR_EXP 126
9403: PUSH
9404: CALL_OW 44
9408: ST_TO_ADDR
// placehumaninunit ( rumech1 , ruv1 ) ;
9409: LD_EXP 126
9413: PPUSH
9414: LD_EXP 118
9418: PPUSH
9419: CALL_OW 52
// vc_chassis = ruv2_ch ;
9423: LD_ADDR_OWVAR 37
9427: PUSH
9428: LD_EXP 48
9432: ST_TO_ADDR
// vc_weapon = ruv2_wp ;
9433: LD_ADDR_OWVAR 40
9437: PUSH
9438: LD_EXP 49
9442: ST_TO_ADDR
// ruv2 = createvehicle ;
9443: LD_ADDR_EXP 119
9447: PUSH
9448: CALL_OW 45
9452: ST_TO_ADDR
// setdir ( ruv2 , 0 ) ;
9453: LD_EXP 119
9457: PPUSH
9458: LD_INT 0
9460: PPUSH
9461: CALL_OW 233
// placeunitxy ( ruv2 , 35 , 63 , false ) ;
9465: LD_EXP 119
9469: PPUSH
9470: LD_INT 35
9472: PPUSH
9473: LD_INT 63
9475: PPUSH
9476: LD_INT 0
9478: PPUSH
9479: CALL_OW 48
// preparemechanic ( sex_male , rumech2_sk ) ;
9483: LD_INT 1
9485: PPUSH
9486: LD_EXP 63
9490: PPUSH
9491: CALL_OW 383
// rumech2 = createhuman ;
9495: LD_ADDR_EXP 127
9499: PUSH
9500: CALL_OW 44
9504: ST_TO_ADDR
// placehumaninunit ( rumech2 , ruv2 ) ;
9505: LD_EXP 127
9509: PPUSH
9510: LD_EXP 119
9514: PPUSH
9515: CALL_OW 52
// vc_chassis = ruv3_ch ;
9519: LD_ADDR_OWVAR 37
9523: PUSH
9524: LD_EXP 50
9528: ST_TO_ADDR
// vc_weapon = ruv3_wp ;
9529: LD_ADDR_OWVAR 40
9533: PUSH
9534: LD_EXP 51
9538: ST_TO_ADDR
// ruv3 = createvehicle ;
9539: LD_ADDR_EXP 120
9543: PUSH
9544: CALL_OW 45
9548: ST_TO_ADDR
// setdir ( ruv3 , 0 ) ;
9549: LD_EXP 120
9553: PPUSH
9554: LD_INT 0
9556: PPUSH
9557: CALL_OW 233
// placeunitxy ( ruv3 , 99 , 95 , false ) ;
9561: LD_EXP 120
9565: PPUSH
9566: LD_INT 99
9568: PPUSH
9569: LD_INT 95
9571: PPUSH
9572: LD_INT 0
9574: PPUSH
9575: CALL_OW 48
// preparemechanic ( sex_male , rumech3_sk ) ;
9579: LD_INT 1
9581: PPUSH
9582: LD_EXP 64
9586: PPUSH
9587: CALL_OW 383
// rumech3 = createhuman ;
9591: LD_ADDR_EXP 128
9595: PUSH
9596: CALL_OW 44
9600: ST_TO_ADDR
// placehumaninunit ( rumech3 , ruv3 ) ;
9601: LD_EXP 128
9605: PPUSH
9606: LD_EXP 120
9610: PPUSH
9611: CALL_OW 52
// rusove = [ ruv1 , ruv2 , ruv3 ] ;
9615: LD_ADDR_EXP 115
9619: PUSH
9620: LD_EXP 118
9624: PUSH
9625: LD_EXP 119
9629: PUSH
9630: LD_EXP 120
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: LIST
9639: ST_TO_ADDR
// comremember ( rusove ) ;
9640: LD_EXP 115
9644: PPUSH
9645: CALL_OW 143
// commovexy ( ruv1 , 64 , 66 ) ;
9649: LD_EXP 118
9653: PPUSH
9654: LD_INT 64
9656: PPUSH
9657: LD_INT 66
9659: PPUSH
9660: CALL_OW 111
// commovexy ( ruv2 , 42 , 44 ) ;
9664: LD_EXP 119
9668: PPUSH
9669: LD_INT 42
9671: PPUSH
9672: LD_INT 44
9674: PPUSH
9675: CALL_OW 111
// commovexy ( ruv3 , 74 , 61 ) ;
9679: LD_EXP 120
9683: PPUSH
9684: LD_INT 74
9686: PPUSH
9687: LD_INT 61
9689: PPUSH
9690: CALL_OW 111
// enable ( 03 ) ;
9694: LD_INT 3
9696: ENABLE_MARKED
// enable ( 05 ) ;
9697: LD_INT 5
9699: ENABLE_MARKED
// end ;
9700: PPOPN 1
9702: END
// on destinationunreachable ( un ) do if ( un = ruv1 ) or ( un = ruv2 ) or ( un = ruv3 ) then
9703: LD_VAR 0 1
9707: PUSH
9708: LD_EXP 118
9712: EQUAL
9713: PUSH
9714: LD_VAR 0 1
9718: PUSH
9719: LD_EXP 119
9723: EQUAL
9724: OR
9725: PUSH
9726: LD_VAR 0 1
9730: PUSH
9731: LD_EXP 120
9735: EQUAL
9736: OR
9737: IFFALSE 9788
// begin effectteleport ( getx ( un ) , gety ( un ) ) ;
9739: LD_VAR 0 1
9743: PPUSH
9744: CALL_OW 250
9748: PPUSH
9749: LD_VAR 0 1
9753: PPUSH
9754: CALL_OW 251
9758: PPUSH
9759: CALL_OW 494
// comhold ( un ) ;
9763: LD_VAR 0 1
9767: PPUSH
9768: CALL_OW 140
// wait ( 50 ) ;
9772: LD_INT 50
9774: PPUSH
9775: CALL_OW 67
// destroyunit ( un ) ;
9779: LD_VAR 0 1
9783: PPUSH
9784: CALL_OW 65
// end ;
9788: PPOPN 1
9790: END
// every 0 0$0.3 + 8 8$0 trigger not hastask ( ruv1 ) marked 05 do
9791: LD_EXP 118
9795: PPUSH
9796: CALL_OW 314
9800: NOT
9801: IFFALSE 9821
9803: GO 9805
9805: DISABLE
// commovexy ( ruv1 , 60 , 48 ) ;
9806: LD_EXP 118
9810: PPUSH
9811: LD_INT 60
9813: PPUSH
9814: LD_INT 48
9816: PPUSH
9817: CALL_OW 111
9821: END
// every 0 0$0.3 + 8 8$0 trigger not hastask ( ruv2 ) marked 05 do
9822: LD_EXP 119
9826: PPUSH
9827: CALL_OW 314
9831: NOT
9832: IFFALSE 9852
9834: GO 9836
9836: DISABLE
// commovexy ( ruv2 , 56 , 49 ) ;
9837: LD_EXP 119
9841: PPUSH
9842: LD_INT 56
9844: PPUSH
9845: LD_INT 49
9847: PPUSH
9848: CALL_OW 111
9852: END
// every 0 0$0.3 + 8 8$0 trigger not hastask ( ruv3 ) marked 05 do
9853: LD_EXP 120
9857: PPUSH
9858: CALL_OW 314
9862: NOT
9863: IFFALSE 9883
9865: GO 9867
9867: DISABLE
// commovexy ( ruv3 , 62 , 50 ) ;
9868: LD_EXP 120
9872: PPUSH
9873: LD_INT 62
9875: PPUSH
9876: LD_INT 50
9878: PPUSH
9879: CALL_OW 111
9883: END
// every 0 0$0.33 do var tmp , tmp2 ;
9884: GO 9886
9886: DISABLE
9887: LD_INT 0
9889: PPUSH
9890: PPUSH
// begin tmp2 = rusove ;
9891: LD_ADDR_VAR 0 2
9895: PUSH
9896: LD_EXP 115
9900: ST_TO_ADDR
// for tmp in tmp2 do
9901: LD_ADDR_VAR 0 1
9905: PUSH
9906: LD_VAR 0 2
9910: PUSH
9911: FOR_IN
9912: IFFALSE 9974
// if getlives ( tmp ) <= hr_auta then
9914: LD_VAR 0 1
9918: PPUSH
9919: CALL_OW 256
9923: PUSH
9924: LD_EXP 70
9928: LESSEQUAL
9929: IFFALSE 9972
// begin rusove = rusove diff tmp ;
9931: LD_ADDR_EXP 115
9935: PUSH
9936: LD_EXP 115
9940: PUSH
9941: LD_VAR 0 1
9945: DIFF
9946: ST_TO_ADDR
// rusoveu = rusoveu union tmp ;
9947: LD_ADDR_EXP 116
9951: PUSH
9952: LD_EXP 116
9956: PUSH
9957: LD_VAR 0 1
9961: UNION
9962: ST_TO_ADDR
// comreturn ( tmp ) ;
9963: LD_VAR 0 1
9967: PPUSH
9968: CALL_OW 144
// end ;
9972: GO 9911
9974: POP
9975: POP
// enable ;
9976: ENABLE
// end ;
9977: PPOPN 2
9979: END
// var rusinarea ; function isinareaex ( units , area ) ; var tmp ; begin
9980: LD_INT 0
9982: PPUSH
9983: PPUSH
// result = 0 ;
9984: LD_ADDR_VAR 0 3
9988: PUSH
9989: LD_INT 0
9991: ST_TO_ADDR
// for tmp in units do
9992: LD_ADDR_VAR 0 4
9996: PUSH
9997: LD_VAR 0 1
10001: PUSH
10002: FOR_IN
10003: IFFALSE 10045
// if isinarea ( tmp , area ) then
10005: LD_VAR 0 4
10009: PPUSH
10010: LD_VAR 0 2
10014: PPUSH
10015: CALL_OW 308
10019: IFFALSE 10043
// begin result = tmp ;
10021: LD_ADDR_VAR 0 3
10025: PUSH
10026: LD_VAR 0 4
10030: ST_TO_ADDR
// rusinarea = tmp ;
10031: LD_ADDR_LOC 7
10035: PUSH
10036: LD_VAR 0 4
10040: ST_TO_ADDR
// break ;
10041: GO 10045
// end ;
10043: GO 10002
10045: POP
10046: POP
// end ;
10047: LD_VAR 0 3
10051: RET
// every 0 0$0.3 trigger isinareaex ( rusoveu , south_exit_0 ) do
10052: LD_EXP 116
10056: PPUSH
10057: LD_INT 3
10059: PPUSH
10060: CALL 9980 0 2
10064: IFFALSE 10079
10066: GO 10068
10068: DISABLE
// begin destroyunit ( rusinarea ) ;
10069: LD_LOC 7
10073: PPUSH
10074: CALL_OW 65
// enable ;
10078: ENABLE
// end ;
10079: END
// every 0 0$0.3 trigger isinareaex ( rusoveu , west_exit_0 ) do
10080: LD_EXP 116
10084: PPUSH
10085: LD_INT 4
10087: PPUSH
10088: CALL 9980 0 2
10092: IFFALSE 10107
10094: GO 10096
10096: DISABLE
// begin destroyunit ( rusinarea ) ;
10097: LD_LOC 7
10101: PPUSH
10102: CALL_OW 65
// enable ;
10106: ENABLE
// end ;
10107: END
// every 0 0$0.3 trigger isinareaex ( rusoveu , south_exit_1 ) do
10108: LD_EXP 116
10112: PPUSH
10113: LD_INT 5
10115: PPUSH
10116: CALL 9980 0 2
10120: IFFALSE 10135
10122: GO 10124
10124: DISABLE
// begin destroyunit ( rusinarea ) ;
10125: LD_LOC 7
10129: PPUSH
10130: CALL_OW 65
// enable ;
10134: ENABLE
// end ;
10135: END
// every 0 0$15 + 12 12$45 do
10136: GO 10138
10138: DISABLE
// begin delay = delay - 0 0$15 ;
10139: LD_ADDR_EXP 72
10143: PUSH
10144: LD_EXP 72
10148: PUSH
10149: LD_INT 525
10151: MINUS
10152: ST_TO_ADDR
// if delay then
10153: LD_EXP 72
10157: IFFALSE 10162
// begin enable ;
10159: ENABLE
// exit ;
10160: GO 10563
// end ; uc_side = rus ;
10162: LD_ADDR_OWVAR 20
10166: PUSH
10167: LD_EXP 2
10171: ST_TO_ADDR
// uc_nation = nation_russian ;
10172: LD_ADDR_OWVAR 21
10176: PUSH
10177: LD_INT 3
10179: ST_TO_ADDR
// vc_engine = engine_siberite ;
10180: LD_ADDR_OWVAR 39
10184: PUSH
10185: LD_INT 3
10187: ST_TO_ADDR
// vc_control = control_manual ;
10188: LD_ADDR_OWVAR 38
10192: PUSH
10193: LD_INT 1
10195: ST_TO_ADDR
// vc_chassis = ruv4_ch ;
10196: LD_ADDR_OWVAR 37
10200: PUSH
10201: LD_EXP 52
10205: ST_TO_ADDR
// vc_weapon = ruv4_wp ;
10206: LD_ADDR_OWVAR 40
10210: PUSH
10211: LD_EXP 53
10215: ST_TO_ADDR
// ruv4 = createvehicle ;
10216: LD_ADDR_EXP 121
10220: PUSH
10221: CALL_OW 45
10225: ST_TO_ADDR
// setdir ( ruv4 , 0 ) ;
10226: LD_EXP 121
10230: PPUSH
10231: LD_INT 0
10233: PPUSH
10234: CALL_OW 233
// placeunitxy ( ruv4 , 70 , 95 , false ) ;
10238: LD_EXP 121
10242: PPUSH
10243: LD_INT 70
10245: PPUSH
10246: LD_INT 95
10248: PPUSH
10249: LD_INT 0
10251: PPUSH
10252: CALL_OW 48
// preparemechanic ( sex_male , rumech4_sk ) ;
10256: LD_INT 1
10258: PPUSH
10259: LD_EXP 65
10263: PPUSH
10264: CALL_OW 383
// rumech4 = createhuman ;
10268: LD_ADDR_EXP 129
10272: PUSH
10273: CALL_OW 44
10277: ST_TO_ADDR
// placehumaninunit ( rumech4 , ruv4 ) ;
10278: LD_EXP 129
10282: PPUSH
10283: LD_EXP 121
10287: PPUSH
10288: CALL_OW 52
// vc_chassis = ruv5_ch ;
10292: LD_ADDR_OWVAR 37
10296: PUSH
10297: LD_EXP 54
10301: ST_TO_ADDR
// vc_weapon = ruv5_wp ;
10302: LD_ADDR_OWVAR 40
10306: PUSH
10307: LD_EXP 55
10311: ST_TO_ADDR
// ruv5 = createvehicle ;
10312: LD_ADDR_EXP 122
10316: PUSH
10317: CALL_OW 45
10321: ST_TO_ADDR
// setdir ( ruv5 , 0 ) ;
10322: LD_EXP 122
10326: PPUSH
10327: LD_INT 0
10329: PPUSH
10330: CALL_OW 233
// placeunitxy ( ruv5 , 35 , 63 , false ) ;
10334: LD_EXP 122
10338: PPUSH
10339: LD_INT 35
10341: PPUSH
10342: LD_INT 63
10344: PPUSH
10345: LD_INT 0
10347: PPUSH
10348: CALL_OW 48
// preparemechanic ( sex_male , rumech5_sk ) ;
10352: LD_INT 1
10354: PPUSH
10355: LD_EXP 66
10359: PPUSH
10360: CALL_OW 383
// rumech5 = createhuman ;
10364: LD_ADDR_EXP 130
10368: PUSH
10369: CALL_OW 44
10373: ST_TO_ADDR
// placehumaninunit ( rumech5 , ruv5 ) ;
10374: LD_EXP 130
10378: PPUSH
10379: LD_EXP 122
10383: PPUSH
10384: CALL_OW 52
// vc_chassis = ruv6_ch ;
10388: LD_ADDR_OWVAR 37
10392: PUSH
10393: LD_EXP 56
10397: ST_TO_ADDR
// vc_weapon = ruv6_wp ;
10398: LD_ADDR_OWVAR 40
10402: PUSH
10403: LD_EXP 57
10407: ST_TO_ADDR
// ruv6 = createvehicle ;
10408: LD_ADDR_EXP 123
10412: PUSH
10413: CALL_OW 45
10417: ST_TO_ADDR
// setdir ( ruv6 , 0 ) ;
10418: LD_EXP 123
10422: PPUSH
10423: LD_INT 0
10425: PPUSH
10426: CALL_OW 233
// placeunitxy ( ruv6 , 99 , 95 , false ) ;
10430: LD_EXP 123
10434: PPUSH
10435: LD_INT 99
10437: PPUSH
10438: LD_INT 95
10440: PPUSH
10441: LD_INT 0
10443: PPUSH
10444: CALL_OW 48
// preparemechanic ( sex_male , rumech6_sk ) ;
10448: LD_INT 1
10450: PPUSH
10451: LD_EXP 67
10455: PPUSH
10456: CALL_OW 383
// rumech6 = createhuman ;
10460: LD_ADDR_EXP 131
10464: PUSH
10465: CALL_OW 44
10469: ST_TO_ADDR
// placehumaninunit ( rumech6 , ruv6 ) ;
10470: LD_EXP 131
10474: PPUSH
10475: LD_EXP 123
10479: PPUSH
10480: CALL_OW 52
// rusove = [ ruv4 , ruv5 , ruv6 ] ;
10484: LD_ADDR_EXP 115
10488: PUSH
10489: LD_EXP 121
10493: PUSH
10494: LD_EXP 122
10498: PUSH
10499: LD_EXP 123
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: LIST
10508: ST_TO_ADDR
// comremember ( rusove ) ;
10509: LD_EXP 115
10513: PPUSH
10514: CALL_OW 143
// commovexy ( ruv4 , 61 , 56 ) ;
10518: LD_EXP 121
10522: PPUSH
10523: LD_INT 61
10525: PPUSH
10526: LD_INT 56
10528: PPUSH
10529: CALL_OW 111
// commovexy ( ruv5 , 50 , 45 ) ;
10533: LD_EXP 122
10537: PPUSH
10538: LD_INT 50
10540: PPUSH
10541: LD_INT 45
10543: PPUSH
10544: CALL_OW 111
// commovexy ( ruv6 , 69 , 56 ) ;
10548: LD_EXP 123
10552: PPUSH
10553: LD_INT 69
10555: PPUSH
10556: LD_INT 56
10558: PPUSH
10559: CALL_OW 111
// end ;
10563: END
// every 0 0$15 + 12 12$55 do
10564: GO 10566
10566: DISABLE
// begin if delay then
10567: LD_EXP 72
10571: IFFALSE 10576
// begin enable ;
10573: ENABLE
// exit ;
10574: GO 10923
// end ; uc_side = rus ;
10576: LD_ADDR_OWVAR 20
10580: PUSH
10581: LD_EXP 2
10585: ST_TO_ADDR
// uc_nation = nation_russian ;
10586: LD_ADDR_OWVAR 21
10590: PUSH
10591: LD_INT 3
10593: ST_TO_ADDR
// vc_engine = engine_siberite ;
10594: LD_ADDR_OWVAR 39
10598: PUSH
10599: LD_INT 3
10601: ST_TO_ADDR
// vc_control = control_manual ;
10602: LD_ADDR_OWVAR 38
10606: PUSH
10607: LD_INT 1
10609: ST_TO_ADDR
// if difficulty >= 2 then
10610: LD_OWVAR 67
10614: PUSH
10615: LD_INT 2
10617: GREATEREQUAL
10618: IFFALSE 10774
// begin vc_chassis = ruv7_ch ;
10620: LD_ADDR_OWVAR 37
10624: PUSH
10625: LD_EXP 58
10629: ST_TO_ADDR
// vc_weapon = ruv7_wp ;
10630: LD_ADDR_OWVAR 40
10634: PUSH
10635: LD_EXP 59
10639: ST_TO_ADDR
// ruv7 = createvehicle ;
10640: LD_ADDR_EXP 124
10644: PUSH
10645: CALL_OW 45
10649: ST_TO_ADDR
// setdir ( ruv7 , 0 ) ;
10650: LD_EXP 124
10654: PPUSH
10655: LD_INT 0
10657: PPUSH
10658: CALL_OW 233
// placeunitxy ( ruv7 , 99 , 95 , false ) ;
10662: LD_EXP 124
10666: PPUSH
10667: LD_INT 99
10669: PPUSH
10670: LD_INT 95
10672: PPUSH
10673: LD_INT 0
10675: PPUSH
10676: CALL_OW 48
// preparemechanic ( sex_male , rumech7_sk ) ;
10680: LD_INT 1
10682: PPUSH
10683: LD_EXP 68
10687: PPUSH
10688: CALL_OW 383
// rumech7 = createhuman ;
10692: LD_ADDR_EXP 132
10696: PUSH
10697: CALL_OW 44
10701: ST_TO_ADDR
// placehumaninunit ( rumech7 , ruv7 ) ;
10702: LD_EXP 132
10706: PPUSH
10707: LD_EXP 124
10711: PPUSH
10712: CALL_OW 52
// rusove = rusove ^ [ ruv7 ] ;
10716: LD_ADDR_EXP 115
10720: PUSH
10721: LD_EXP 115
10725: PUSH
10726: LD_EXP 124
10730: PUSH
10731: EMPTY
10732: LIST
10733: ADD
10734: ST_TO_ADDR
// comremember ( ruv7 ) ;
10735: LD_EXP 124
10739: PPUSH
10740: CALL_OW 143
// commovexy ( ruv7 , 97 , 55 ) ;
10744: LD_EXP 124
10748: PPUSH
10749: LD_INT 97
10751: PPUSH
10752: LD_INT 55
10754: PPUSH
10755: CALL_OW 111
// addcommovexy ( ruv7 , 67 , 50 ) ;
10759: LD_EXP 124
10763: PPUSH
10764: LD_INT 67
10766: PPUSH
10767: LD_INT 50
10769: PPUSH
10770: CALL_OW 171
// end ; if difficulty > 2 then
10774: LD_OWVAR 67
10778: PUSH
10779: LD_INT 2
10781: GREATER
10782: IFFALSE 10923
// begin vc_chassis = ruv8_ch ;
10784: LD_ADDR_OWVAR 37
10788: PUSH
10789: LD_EXP 60
10793: ST_TO_ADDR
// vc_weapon = ruv8_wp ;
10794: LD_ADDR_OWVAR 40
10798: PUSH
10799: LD_EXP 61
10803: ST_TO_ADDR
// ruv8 = createvehicle ;
10804: LD_ADDR_EXP 125
10808: PUSH
10809: CALL_OW 45
10813: ST_TO_ADDR
// setdir ( ruv8 , 0 ) ;
10814: LD_EXP 125
10818: PPUSH
10819: LD_INT 0
10821: PPUSH
10822: CALL_OW 233
// placeunitxy ( ruv8 , 70 , 95 , false ) ;
10826: LD_EXP 125
10830: PPUSH
10831: LD_INT 70
10833: PPUSH
10834: LD_INT 95
10836: PPUSH
10837: LD_INT 0
10839: PPUSH
10840: CALL_OW 48
// preparemechanic ( sex_male , rumech8_sk ) ;
10844: LD_INT 1
10846: PPUSH
10847: LD_EXP 69
10851: PPUSH
10852: CALL_OW 383
// rumech8 = createhuman ;
10856: LD_ADDR_EXP 133
10860: PUSH
10861: CALL_OW 44
10865: ST_TO_ADDR
// placehumaninunit ( rumech8 , ruv8 ) ;
10866: LD_EXP 133
10870: PPUSH
10871: LD_EXP 125
10875: PPUSH
10876: CALL_OW 52
// rusove = rusove ^ [ ruv8 ] ;
10880: LD_ADDR_EXP 115
10884: PUSH
10885: LD_EXP 115
10889: PUSH
10890: LD_EXP 125
10894: PUSH
10895: EMPTY
10896: LIST
10897: ADD
10898: ST_TO_ADDR
// comremember ( ruv8 ) ;
10899: LD_EXP 125
10903: PPUSH
10904: CALL_OW 143
// commovexy ( ruv8 , 61 , 56 ) ;
10908: LD_EXP 125
10912: PPUSH
10913: LD_INT 61
10915: PPUSH
10916: LD_INT 56
10918: PPUSH
10919: CALL_OW 111
// end ; end ; end_of_file
10923: END
// export abdul ; export arv1 , arm1 , arv2 , arm2 , arv3 , arm3 , arv4 , arm4 , arv5 , arm5 , arv6 , arm6 , arv7 , arv8 , arv9 , arv10 ; var inzinyrka , typitomybodovy , ar_mech_ctrl ; export function prepare_arabians ; var tmp ; begin
10924: LD_INT 0
10926: PPUSH
10927: PPUSH
// uc_side = ar ;
10928: LD_ADDR_OWVAR 20
10932: PUSH
10933: LD_EXP 3
10937: ST_TO_ADDR
// uc_nation = nation_arabian ;
10938: LD_ADDR_OWVAR 21
10942: PUSH
10943: LD_INT 2
10945: ST_TO_ADDR
// preparesoldier ( sex_male , ars0 ) ;
10946: LD_INT 1
10948: PPUSH
10949: LD_EXP 6
10953: PPUSH
10954: CALL_OW 381
// tmp = createhuman ;
10958: LD_ADDR_VAR 0 2
10962: PUSH
10963: CALL_OW 44
10967: ST_TO_ADDR
// placeunitxy ( tmp , 135 , 91 , false ) ;
10968: LD_VAR 0 2
10972: PPUSH
10973: LD_INT 135
10975: PPUSH
10976: LD_INT 91
10978: PPUSH
10979: LD_INT 0
10981: PPUSH
10982: CALL_OW 48
// comenterunit ( tmp , arbunk0 ) ;
10986: LD_VAR 0 2
10990: PPUSH
10991: LD_INT 14
10993: PPUSH
10994: CALL_OW 120
// preparesoldier ( sex_male , ars1 ) ;
10998: LD_INT 1
11000: PPUSH
11001: LD_EXP 7
11005: PPUSH
11006: CALL_OW 381
// tmp = createhuman ;
11010: LD_ADDR_VAR 0 2
11014: PUSH
11015: CALL_OW 44
11019: ST_TO_ADDR
// placeunitxy ( tmp , 138 , 85 , false ) ;
11020: LD_VAR 0 2
11024: PPUSH
11025: LD_INT 138
11027: PPUSH
11028: LD_INT 85
11030: PPUSH
11031: LD_INT 0
11033: PPUSH
11034: CALL_OW 48
// comenterunit ( tmp , arbunk1 ) ;
11038: LD_VAR 0 2
11042: PPUSH
11043: LD_INT 15
11045: PPUSH
11046: CALL_OW 120
// preparesoldier ( sex_male , ars2 ) ;
11050: LD_INT 1
11052: PPUSH
11053: LD_EXP 8
11057: PPUSH
11058: CALL_OW 381
// tmp = createhuman ;
11062: LD_ADDR_VAR 0 2
11066: PUSH
11067: CALL_OW 44
11071: ST_TO_ADDR
// placeunitxy ( tmp , 129 , 78 , false ) ;
11072: LD_VAR 0 2
11076: PPUSH
11077: LD_INT 129
11079: PPUSH
11080: LD_INT 78
11082: PPUSH
11083: LD_INT 0
11085: PPUSH
11086: CALL_OW 48
// comenterunit ( tmp , arbunk2 ) ;
11090: LD_VAR 0 2
11094: PPUSH
11095: LD_INT 13
11097: PPUSH
11098: CALL_OW 120
// preparesoldier ( sex_male , ars3 ) ;
11102: LD_INT 1
11104: PPUSH
11105: LD_EXP 9
11109: PPUSH
11110: CALL_OW 381
// tmp = createhuman ;
11114: LD_ADDR_VAR 0 2
11118: PUSH
11119: CALL_OW 44
11123: ST_TO_ADDR
// placeunitxy ( tmp , 115 , 44 , false ) ;
11124: LD_VAR 0 2
11128: PPUSH
11129: LD_INT 115
11131: PPUSH
11132: LD_INT 44
11134: PPUSH
11135: LD_INT 0
11137: PPUSH
11138: CALL_OW 48
// comenterunit ( tmp , arbunk3 ) ;
11142: LD_VAR 0 2
11146: PPUSH
11147: LD_INT 16
11149: PPUSH
11150: CALL_OW 120
// preparesoldier ( sex_male , ars4 ) ;
11154: LD_INT 1
11156: PPUSH
11157: LD_EXP 10
11161: PPUSH
11162: CALL_OW 381
// tmp = createhuman ;
11166: LD_ADDR_VAR 0 2
11170: PUSH
11171: CALL_OW 44
11175: ST_TO_ADDR
// placeunitxy ( tmp , 125 , 37 , false ) ;
11176: LD_VAR 0 2
11180: PPUSH
11181: LD_INT 125
11183: PPUSH
11184: LD_INT 37
11186: PPUSH
11187: LD_INT 0
11189: PPUSH
11190: CALL_OW 48
// comenterunit ( tmp , arbunk4 ) ;
11194: LD_VAR 0 2
11198: PPUSH
11199: LD_INT 17
11201: PPUSH
11202: CALL_OW 120
// preparesoldier ( sex_male , ars5 ) ;
11206: LD_INT 1
11208: PPUSH
11209: LD_EXP 11
11213: PPUSH
11214: CALL_OW 381
// tmp = createhuman ;
11218: LD_ADDR_VAR 0 2
11222: PUSH
11223: CALL_OW 44
11227: ST_TO_ADDR
// placeunitxy ( tmp , 132 , 33 , false ) ;
11228: LD_VAR 0 2
11232: PPUSH
11233: LD_INT 132
11235: PPUSH
11236: LD_INT 33
11238: PPUSH
11239: LD_INT 0
11241: PPUSH
11242: CALL_OW 48
// comenterunit ( tmp , arbunk5 ) ;
11246: LD_VAR 0 2
11250: PPUSH
11251: LD_INT 18
11253: PPUSH
11254: CALL_OW 120
// if difficulty = 1 then
11258: LD_OWVAR 67
11262: PUSH
11263: LD_INT 1
11265: EQUAL
11266: IFFALSE 11560
// begin preparehuman ( sex_male , class_soldier , ars6 ) ;
11268: LD_INT 1
11270: PPUSH
11271: LD_INT 1
11273: PPUSH
11274: LD_EXP 12
11278: PPUSH
11279: CALL_OW 380
// tmp = createhuman ;
11283: LD_ADDR_VAR 0 2
11287: PUSH
11288: CALL_OW 44
11292: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
11293: LD_VAR 0 2
11297: PPUSH
11298: LD_INT 134
11300: PPUSH
11301: LD_INT 75
11303: PPUSH
11304: LD_INT 1
11306: PPUSH
11307: LD_INT 0
11309: PPUSH
11310: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
11314: LD_VAR 0 2
11318: PPUSH
11319: LD_INT 2
11321: PPUSH
11322: CALL_OW 120
// preparehuman ( sex_male , class_soldier , ars7 ) ;
11326: LD_INT 1
11328: PPUSH
11329: LD_INT 1
11331: PPUSH
11332: LD_EXP 13
11336: PPUSH
11337: CALL_OW 380
// tmp = createhuman ;
11341: LD_ADDR_VAR 0 2
11345: PUSH
11346: CALL_OW 44
11350: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
11351: LD_VAR 0 2
11355: PPUSH
11356: LD_INT 134
11358: PPUSH
11359: LD_INT 75
11361: PPUSH
11362: LD_INT 1
11364: PPUSH
11365: LD_INT 0
11367: PPUSH
11368: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
11372: LD_VAR 0 2
11376: PPUSH
11377: LD_INT 2
11379: PPUSH
11380: CALL_OW 120
// preparehuman ( sex_male , class_soldier , ars8 ) ;
11384: LD_INT 1
11386: PPUSH
11387: LD_INT 1
11389: PPUSH
11390: LD_EXP 14
11394: PPUSH
11395: CALL_OW 380
// tmp = createhuman ;
11399: LD_ADDR_VAR 0 2
11403: PUSH
11404: CALL_OW 44
11408: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
11409: LD_VAR 0 2
11413: PPUSH
11414: LD_INT 134
11416: PPUSH
11417: LD_INT 75
11419: PPUSH
11420: LD_INT 1
11422: PPUSH
11423: LD_INT 0
11425: PPUSH
11426: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
11430: LD_VAR 0 2
11434: PPUSH
11435: LD_INT 2
11437: PPUSH
11438: CALL_OW 120
// preparehuman ( sex_male , class_soldier , ars9 ) ;
11442: LD_INT 1
11444: PPUSH
11445: LD_INT 1
11447: PPUSH
11448: LD_EXP 15
11452: PPUSH
11453: CALL_OW 380
// tmp = createhuman ;
11457: LD_ADDR_VAR 0 2
11461: PUSH
11462: CALL_OW 44
11466: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
11467: LD_VAR 0 2
11471: PPUSH
11472: LD_INT 134
11474: PPUSH
11475: LD_INT 75
11477: PPUSH
11478: LD_INT 1
11480: PPUSH
11481: LD_INT 0
11483: PPUSH
11484: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
11488: LD_VAR 0 2
11492: PPUSH
11493: LD_INT 2
11495: PPUSH
11496: CALL_OW 120
// preparehuman ( sex_male , class_soldier , ars10 ) ;
11500: LD_INT 1
11502: PPUSH
11503: LD_INT 1
11505: PPUSH
11506: LD_EXP 16
11510: PPUSH
11511: CALL_OW 380
// tmp = createhuman ;
11515: LD_ADDR_VAR 0 2
11519: PUSH
11520: CALL_OW 44
11524: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
11525: LD_VAR 0 2
11529: PPUSH
11530: LD_INT 134
11532: PPUSH
11533: LD_INT 75
11535: PPUSH
11536: LD_INT 1
11538: PPUSH
11539: LD_INT 0
11541: PPUSH
11542: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
11546: LD_VAR 0 2
11550: PPUSH
11551: LD_INT 2
11553: PPUSH
11554: CALL_OW 120
// end else
11558: GO 11860
// begin preparehuman ( sex_male , class_mortar , ars6 ) ;
11560: LD_INT 1
11562: PPUSH
11563: LD_INT 8
11565: PPUSH
11566: LD_EXP 12
11570: PPUSH
11571: CALL_OW 380
// tmp = createhuman ;
11575: LD_ADDR_VAR 0 2
11579: PUSH
11580: CALL_OW 44
11584: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
11585: LD_VAR 0 2
11589: PPUSH
11590: LD_INT 134
11592: PPUSH
11593: LD_INT 75
11595: PPUSH
11596: LD_INT 1
11598: PPUSH
11599: LD_INT 0
11601: PPUSH
11602: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
11606: LD_VAR 0 2
11610: PPUSH
11611: LD_INT 2
11613: PPUSH
11614: CALL_OW 120
// preparehuman ( sex_male , class_mortar , ars7 ) ;
11618: LD_INT 1
11620: PPUSH
11621: LD_INT 8
11623: PPUSH
11624: LD_EXP 13
11628: PPUSH
11629: CALL_OW 380
// tmp = createhuman ;
11633: LD_ADDR_VAR 0 2
11637: PUSH
11638: CALL_OW 44
11642: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
11643: LD_VAR 0 2
11647: PPUSH
11648: LD_INT 134
11650: PPUSH
11651: LD_INT 75
11653: PPUSH
11654: LD_INT 1
11656: PPUSH
11657: LD_INT 0
11659: PPUSH
11660: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
11664: LD_VAR 0 2
11668: PPUSH
11669: LD_INT 2
11671: PPUSH
11672: CALL_OW 120
// preparehuman ( sex_male , class_mortar , ars8 ) ;
11676: LD_INT 1
11678: PPUSH
11679: LD_INT 8
11681: PPUSH
11682: LD_EXP 14
11686: PPUSH
11687: CALL_OW 380
// tmp = createhuman ;
11691: LD_ADDR_VAR 0 2
11695: PUSH
11696: CALL_OW 44
11700: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
11701: LD_VAR 0 2
11705: PPUSH
11706: LD_INT 134
11708: PPUSH
11709: LD_INT 75
11711: PPUSH
11712: LD_INT 1
11714: PPUSH
11715: LD_INT 0
11717: PPUSH
11718: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
11722: LD_VAR 0 2
11726: PPUSH
11727: LD_INT 2
11729: PPUSH
11730: CALL_OW 120
// if difficulty > 2 then
11734: LD_OWVAR 67
11738: PUSH
11739: LD_INT 2
11741: GREATER
11742: IFFALSE 11860
// begin preparehuman ( sex_male , class_mortar , ars9 ) ;
11744: LD_INT 1
11746: PPUSH
11747: LD_INT 8
11749: PPUSH
11750: LD_EXP 15
11754: PPUSH
11755: CALL_OW 380
// tmp = createhuman ;
11759: LD_ADDR_VAR 0 2
11763: PUSH
11764: CALL_OW 44
11768: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
11769: LD_VAR 0 2
11773: PPUSH
11774: LD_INT 134
11776: PPUSH
11777: LD_INT 75
11779: PPUSH
11780: LD_INT 1
11782: PPUSH
11783: LD_INT 0
11785: PPUSH
11786: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
11790: LD_VAR 0 2
11794: PPUSH
11795: LD_INT 2
11797: PPUSH
11798: CALL_OW 120
// preparehuman ( sex_male , class_mortar , ars10 ) ;
11802: LD_INT 1
11804: PPUSH
11805: LD_INT 8
11807: PPUSH
11808: LD_EXP 16
11812: PPUSH
11813: CALL_OW 380
// tmp = createhuman ;
11817: LD_ADDR_VAR 0 2
11821: PUSH
11822: CALL_OW 44
11826: ST_TO_ADDR
// placeunitxyr ( tmp , 134 , 75 , 1 , false ) ;
11827: LD_VAR 0 2
11831: PPUSH
11832: LD_INT 134
11834: PPUSH
11835: LD_INT 75
11837: PPUSH
11838: LD_INT 1
11840: PPUSH
11841: LD_INT 0
11843: PPUSH
11844: CALL_OW 50
// comenterunit ( tmp , arbarr ) ;
11848: LD_VAR 0 2
11852: PPUSH
11853: LD_INT 2
11855: PPUSH
11856: CALL_OW 120
// end ; end ; preparemechanic ( sex_female , 8 ) ;
11860: LD_INT 2
11862: PPUSH
11863: LD_INT 8
11865: PPUSH
11866: CALL_OW 383
// inzinyrka = createhuman ;
11870: LD_ADDR_LOC 8
11874: PUSH
11875: CALL_OW 44
11879: ST_TO_ADDR
// placeunitxy ( inzinyrka , 133 , 54 , false ) ;
11880: LD_LOC 8
11884: PPUSH
11885: LD_INT 133
11887: PPUSH
11888: LD_INT 54
11890: PPUSH
11891: LD_INT 0
11893: PPUSH
11894: CALL_OW 48
// comenterunit ( inzinyrka , arfact00 ) ;
11898: LD_LOC 8
11902: PPUSH
11903: LD_INT 4
11905: PPUSH
11906: CALL_OW 120
// prepareengineer ( sex_female , 7 ) ;
11910: LD_INT 2
11912: PPUSH
11913: LD_INT 7
11915: PPUSH
11916: CALL_OW 382
// inzinyrka = createhuman ;
11920: LD_ADDR_LOC 8
11924: PUSH
11925: CALL_OW 44
11929: ST_TO_ADDR
// placeunitxy ( inzinyrka , 134 , 61 , false ) ;
11930: LD_LOC 8
11934: PPUSH
11935: LD_INT 134
11937: PPUSH
11938: LD_INT 61
11940: PPUSH
11941: LD_INT 0
11943: PPUSH
11944: CALL_OW 48
// comenterunit ( inzinyrka , ar_depot ) ;
11948: LD_LOC 8
11952: PPUSH
11953: LD_INT 1
11955: PPUSH
11956: CALL_OW 120
// abdul = newcharacter ( Abdul ) ;
11960: LD_ADDR_EXP 134
11964: PUSH
11965: LD_STRING Abdul
11967: PPUSH
11968: CALL_OW 25
11972: ST_TO_ADDR
// if not abdul then
11973: LD_EXP 134
11977: NOT
11978: IFFALSE 11993
// buildquery ( neny Abdul , [ OK ] ) ;
11980: LD_STRING neny Abdul
11982: PPUSH
11983: LD_STRING OK
11985: PUSH
11986: EMPTY
11987: LIST
11988: PPUSH
11989: CALL_OW 99
// setclass ( abdul , class_desert_warior ) ;
11993: LD_EXP 134
11997: PPUSH
11998: LD_INT 11
12000: PPUSH
12001: CALL_OW 336
// placeunitxyr ( abdul , 140 , 65 , 3 , false ) ;
12005: LD_EXP 134
12009: PPUSH
12010: LD_INT 140
12012: PPUSH
12013: LD_INT 65
12015: PPUSH
12016: LD_INT 3
12018: PPUSH
12019: LD_INT 0
12021: PPUSH
12022: CALL_OW 50
// preparemechanic ( sex_female , arm0 ) ;
12026: LD_INT 2
12028: PPUSH
12029: LD_EXP 17
12033: PPUSH
12034: CALL_OW 383
// tmp = createhuman ;
12038: LD_ADDR_VAR 0 2
12042: PUSH
12043: CALL_OW 44
12047: ST_TO_ADDR
// ar_mech_ctrl = tmp ;
12048: LD_ADDR_LOC 10
12052: PUSH
12053: LD_VAR 0 2
12057: ST_TO_ADDR
// placehumaninunit ( tmp , ctrl_twr ) ;
12058: LD_VAR 0 2
12062: PPUSH
12063: LD_INT 24
12065: PPUSH
12066: CALL_OW 52
// setcargo ( nakladak , mat_artefact , 50 ) ;
12070: LD_INT 23
12072: PPUSH
12073: LD_INT 4
12075: PPUSH
12076: LD_INT 50
12078: PPUSH
12079: CALL_OW 290
// preparemechanic ( sex_male , 7 ) ;
12083: LD_INT 1
12085: PPUSH
12086: LD_INT 7
12088: PPUSH
12089: CALL_OW 383
// placehumaninunit ( createhuman , nakladak ) ;
12093: CALL_OW 44
12097: PPUSH
12098: LD_INT 23
12100: PPUSH
12101: CALL_OW 52
// vc_engine = engine_siberite ;
12105: LD_ADDR_OWVAR 39
12109: PUSH
12110: LD_INT 3
12112: ST_TO_ADDR
// vc_control = control_manual ;
12113: LD_ADDR_OWVAR 38
12117: PUSH
12118: LD_INT 1
12120: ST_TO_ADDR
// vc_chassis = arv1_ch ;
12121: LD_ADDR_OWVAR 37
12125: PUSH
12126: LD_EXP 18
12130: ST_TO_ADDR
// vc_weapon = arv1_wp ;
12131: LD_ADDR_OWVAR 40
12135: PUSH
12136: LD_EXP 19
12140: ST_TO_ADDR
// arv1 = createvehicle ;
12141: LD_ADDR_EXP 135
12145: PUSH
12146: CALL_OW 45
12150: ST_TO_ADDR
// setdir ( arv1 , 5 ) ;
12151: LD_EXP 135
12155: PPUSH
12156: LD_INT 5
12158: PPUSH
12159: CALL_OW 233
// placeunitxy ( arv1 , 128 , 38 , false ) ;
12163: LD_EXP 135
12167: PPUSH
12168: LD_INT 128
12170: PPUSH
12171: LD_INT 38
12173: PPUSH
12174: LD_INT 0
12176: PPUSH
12177: CALL_OW 48
// preparemechanic ( sex_male , arm1_sk ) ;
12181: LD_INT 1
12183: PPUSH
12184: LD_EXP 20
12188: PPUSH
12189: CALL_OW 383
// arm1 = createhuman ;
12193: LD_ADDR_EXP 136
12197: PUSH
12198: CALL_OW 44
12202: ST_TO_ADDR
// placehumaninunit ( arm1 , arv1 ) ;
12203: LD_EXP 136
12207: PPUSH
12208: LD_EXP 135
12212: PPUSH
12213: CALL_OW 52
// vc_chassis = arv2_ch ;
12217: LD_ADDR_OWVAR 37
12221: PUSH
12222: LD_EXP 21
12226: ST_TO_ADDR
// vc_weapon = arv2_wp ;
12227: LD_ADDR_OWVAR 40
12231: PUSH
12232: LD_EXP 22
12236: ST_TO_ADDR
// arv2 = createvehicle ;
12237: LD_ADDR_EXP 137
12241: PUSH
12242: CALL_OW 45
12246: ST_TO_ADDR
// setdir ( arv2 , 4 ) ;
12247: LD_EXP 137
12251: PPUSH
12252: LD_INT 4
12254: PPUSH
12255: CALL_OW 233
// placeunitxy ( arv2 , 141 , 89 , false ) ;
12259: LD_EXP 137
12263: PPUSH
12264: LD_INT 141
12266: PPUSH
12267: LD_INT 89
12269: PPUSH
12270: LD_INT 0
12272: PPUSH
12273: CALL_OW 48
// preparemechanic ( sex_male , arm2_sk ) ;
12277: LD_INT 1
12279: PPUSH
12280: LD_EXP 23
12284: PPUSH
12285: CALL_OW 383
// arm2 = createhuman ;
12289: LD_ADDR_EXP 138
12293: PUSH
12294: CALL_OW 44
12298: ST_TO_ADDR
// placehumaninunit ( arm2 , arv2 ) ;
12299: LD_EXP 138
12303: PPUSH
12304: LD_EXP 137
12308: PPUSH
12309: CALL_OW 52
// if difficulty = 2 then
12313: LD_OWVAR 67
12317: PUSH
12318: LD_INT 2
12320: EQUAL
12321: IFFALSE 12419
// begin vc_chassis = arv3_ch ;
12323: LD_ADDR_OWVAR 37
12327: PUSH
12328: LD_EXP 24
12332: ST_TO_ADDR
// vc_weapon = arv3_wp ;
12333: LD_ADDR_OWVAR 40
12337: PUSH
12338: LD_EXP 25
12342: ST_TO_ADDR
// arv3 = createvehicle ;
12343: LD_ADDR_EXP 139
12347: PUSH
12348: CALL_OW 45
12352: ST_TO_ADDR
// setdir ( arv3 , 3 ) ;
12353: LD_EXP 139
12357: PPUSH
12358: LD_INT 3
12360: PPUSH
12361: CALL_OW 233
// placeunitxy ( arv3 , 126 , 74 , false ) ;
12365: LD_EXP 139
12369: PPUSH
12370: LD_INT 126
12372: PPUSH
12373: LD_INT 74
12375: PPUSH
12376: LD_INT 0
12378: PPUSH
12379: CALL_OW 48
// preparemechanic ( sex_male , arm3_sk ) ;
12383: LD_INT 1
12385: PPUSH
12386: LD_EXP 26
12390: PPUSH
12391: CALL_OW 383
// arm3 = createhuman ;
12395: LD_ADDR_EXP 140
12399: PUSH
12400: CALL_OW 44
12404: ST_TO_ADDR
// placehumaninunit ( arm3 , arv3 ) ;
12405: LD_EXP 140
12409: PPUSH
12410: LD_EXP 139
12414: PPUSH
12415: CALL_OW 52
// end ; vc_chassis = arv4_ch ;
12419: LD_ADDR_OWVAR 37
12423: PUSH
12424: LD_EXP 27
12428: ST_TO_ADDR
// vc_weapon = arv4_wp ;
12429: LD_ADDR_OWVAR 40
12433: PUSH
12434: LD_EXP 28
12438: ST_TO_ADDR
// arv4 = createvehicle ;
12439: LD_ADDR_EXP 141
12443: PUSH
12444: CALL_OW 45
12448: ST_TO_ADDR
// setdir ( arv4 , 5 ) ;
12449: LD_EXP 141
12453: PPUSH
12454: LD_INT 5
12456: PPUSH
12457: CALL_OW 233
// placeunitxy ( arv4 , 121 , 41 , false ) ;
12461: LD_EXP 141
12465: PPUSH
12466: LD_INT 121
12468: PPUSH
12469: LD_INT 41
12471: PPUSH
12472: LD_INT 0
12474: PPUSH
12475: CALL_OW 48
// preparemechanic ( sex_male , arm4_sk ) ;
12479: LD_INT 1
12481: PPUSH
12482: LD_EXP 29
12486: PPUSH
12487: CALL_OW 383
// arm4 = createhuman ;
12491: LD_ADDR_EXP 142
12495: PUSH
12496: CALL_OW 44
12500: ST_TO_ADDR
// placehumaninunit ( arm4 , arv4 ) ;
12501: LD_EXP 142
12505: PPUSH
12506: LD_EXP 141
12510: PPUSH
12511: CALL_OW 52
// vc_engine = engine_solar ;
12515: LD_ADDR_OWVAR 39
12519: PUSH
12520: LD_INT 2
12522: ST_TO_ADDR
// vc_chassis = arv5_ch ;
12523: LD_ADDR_OWVAR 37
12527: PUSH
12528: LD_EXP 30
12532: ST_TO_ADDR
// vc_weapon = arv5_wp ;
12533: LD_ADDR_OWVAR 40
12537: PUSH
12538: LD_EXP 31
12542: ST_TO_ADDR
// arv5 = createvehicle ;
12543: LD_ADDR_EXP 143
12547: PUSH
12548: CALL_OW 45
12552: ST_TO_ADDR
// setdir ( arv5 , 0 ) ;
12553: LD_EXP 143
12557: PPUSH
12558: LD_INT 0
12560: PPUSH
12561: CALL_OW 233
// placeunitxy ( arv5 , 118 , 44 , false ) ;
12565: LD_EXP 143
12569: PPUSH
12570: LD_INT 118
12572: PPUSH
12573: LD_INT 44
12575: PPUSH
12576: LD_INT 0
12578: PPUSH
12579: CALL_OW 48
// preparemechanic ( sex_male , arm5_sk ) ;
12583: LD_INT 1
12585: PPUSH
12586: LD_EXP 32
12590: PPUSH
12591: CALL_OW 383
// arm5 = createhuman ;
12595: LD_ADDR_EXP 144
12599: PUSH
12600: CALL_OW 44
12604: ST_TO_ADDR
// placehumaninunit ( arm5 , arv5 ) ;
12605: LD_EXP 144
12609: PPUSH
12610: LD_EXP 143
12614: PPUSH
12615: CALL_OW 52
// vc_engine = engine_siberite ;
12619: LD_ADDR_OWVAR 39
12623: PUSH
12624: LD_INT 3
12626: ST_TO_ADDR
// vc_chassis = arv6_ch ;
12627: LD_ADDR_OWVAR 37
12631: PUSH
12632: LD_EXP 33
12636: ST_TO_ADDR
// vc_weapon = arv6_wp ;
12637: LD_ADDR_OWVAR 40
12641: PUSH
12642: LD_EXP 34
12646: ST_TO_ADDR
// arv6 = createvehicle ;
12647: LD_ADDR_EXP 145
12651: PUSH
12652: CALL_OW 45
12656: ST_TO_ADDR
// setdir ( arv6 , 5 ) ;
12657: LD_EXP 145
12661: PPUSH
12662: LD_INT 5
12664: PPUSH
12665: CALL_OW 233
// placeunitxy ( arv6 , 129 , 35 , false ) ;
12669: LD_EXP 145
12673: PPUSH
12674: LD_INT 129
12676: PPUSH
12677: LD_INT 35
12679: PPUSH
12680: LD_INT 0
12682: PPUSH
12683: CALL_OW 48
// preparemechanic ( sex_male , arm6_sk ) ;
12687: LD_INT 1
12689: PPUSH
12690: LD_EXP 35
12694: PPUSH
12695: CALL_OW 383
// arm6 = createhuman ;
12699: LD_ADDR_EXP 146
12703: PUSH
12704: CALL_OW 44
12708: ST_TO_ADDR
// placehumaninunit ( arm6 , arv6 ) ;
12709: LD_EXP 146
12713: PPUSH
12714: LD_EXP 145
12718: PPUSH
12719: CALL_OW 52
// comremember ( [ arv1 , arv2 , arv3 , arv4 , arv5 , arv6 ] ) ;
12723: LD_EXP 135
12727: PUSH
12728: LD_EXP 137
12732: PUSH
12733: LD_EXP 139
12737: PUSH
12738: LD_EXP 141
12742: PUSH
12743: LD_EXP 143
12747: PUSH
12748: LD_EXP 145
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: PPUSH
12761: CALL_OW 143
// vc_control = control_remote ;
12765: LD_ADDR_OWVAR 38
12769: PUSH
12770: LD_INT 2
12772: ST_TO_ADDR
// if difficulty > 2 then
12773: LD_OWVAR 67
12777: PUSH
12778: LD_INT 2
12780: GREATER
12781: IFFALSE 12949
// begin vc_chassis = arv7_ch ;
12783: LD_ADDR_OWVAR 37
12787: PUSH
12788: LD_EXP 36
12792: ST_TO_ADDR
// vc_weapon = arv7_wp ;
12793: LD_ADDR_OWVAR 40
12797: PUSH
12798: LD_EXP 37
12802: ST_TO_ADDR
// arv7 = createvehicle ;
12803: LD_ADDR_EXP 147
12807: PUSH
12808: CALL_OW 45
12812: ST_TO_ADDR
// setdir ( arv7 , 4 ) ;
12813: LD_EXP 147
12817: PPUSH
12818: LD_INT 4
12820: PPUSH
12821: CALL_OW 233
// placeunitxy ( arv7 , 136 , 88 , false ) ;
12825: LD_EXP 147
12829: PPUSH
12830: LD_INT 136
12832: PPUSH
12833: LD_INT 88
12835: PPUSH
12836: LD_INT 0
12838: PPUSH
12839: CALL_OW 48
// linkvehicletohuman ( arv7 , tmp ) ;
12843: LD_EXP 147
12847: PPUSH
12848: LD_VAR 0 2
12852: PPUSH
12853: CALL_OW 53
// vc_chassis = arv8_ch ;
12857: LD_ADDR_OWVAR 37
12861: PUSH
12862: LD_EXP 38
12866: ST_TO_ADDR
// vc_weapon = arv8_wp ;
12867: LD_ADDR_OWVAR 40
12871: PUSH
12872: LD_EXP 39
12876: ST_TO_ADDR
// arv8 = createvehicle ;
12877: LD_ADDR_EXP 148
12881: PUSH
12882: CALL_OW 45
12886: ST_TO_ADDR
// setdir ( arv8 , 3 ) ;
12887: LD_EXP 148
12891: PPUSH
12892: LD_INT 3
12894: PPUSH
12895: CALL_OW 233
// placeunitxy ( arv8 , 132 , 81 , false ) ;
12899: LD_EXP 148
12903: PPUSH
12904: LD_INT 132
12906: PPUSH
12907: LD_INT 81
12909: PPUSH
12910: LD_INT 0
12912: PPUSH
12913: CALL_OW 48
// linkvehicletohuman ( arv8 , tmp ) ;
12917: LD_EXP 148
12921: PPUSH
12922: LD_VAR 0 2
12926: PPUSH
12927: CALL_OW 53
// comremember ( [ arv7 , arv8 ] ) ;
12931: LD_EXP 147
12935: PUSH
12936: LD_EXP 148
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PPUSH
12945: CALL_OW 143
// end ; if difficulty > 2 then
12949: LD_OWVAR 67
12953: PUSH
12954: LD_INT 2
12956: GREATER
12957: IFFALSE 13051
// begin vc_chassis = arv10_ch ;
12959: LD_ADDR_OWVAR 37
12963: PUSH
12964: LD_EXP 42
12968: ST_TO_ADDR
// vc_weapon = arv10_wp ;
12969: LD_ADDR_OWVAR 40
12973: PUSH
12974: LD_EXP 43
12978: ST_TO_ADDR
// arv10 = createvehicle ;
12979: LD_ADDR_EXP 150
12983: PUSH
12984: CALL_OW 45
12988: ST_TO_ADDR
// setdir ( arv10 , 5 ) ;
12989: LD_EXP 150
12993: PPUSH
12994: LD_INT 5
12996: PPUSH
12997: CALL_OW 233
// placeunitxy ( arv10 , 125 , 40 , false ) ;
13001: LD_EXP 150
13005: PPUSH
13006: LD_INT 125
13008: PPUSH
13009: LD_INT 40
13011: PPUSH
13012: LD_INT 0
13014: PPUSH
13015: CALL_OW 48
// linkvehicletohuman ( arv10 , tmp ) ;
13019: LD_EXP 150
13023: PPUSH
13024: LD_VAR 0 2
13028: PPUSH
13029: CALL_OW 53
// comremember ( [ arv9 , arv10 ] ) ;
13033: LD_EXP 149
13037: PUSH
13038: LD_EXP 150
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PPUSH
13047: CALL_OW 143
// end ; typitomybodovy = filterallunits ( [ [ f_side , ar ] , [ f_type , unit_building ] ] ) ;
13051: LD_ADDR_LOC 9
13055: PUSH
13056: LD_INT 22
13058: PUSH
13059: LD_EXP 3
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 21
13070: PUSH
13071: LD_INT 3
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PPUSH
13082: CALL_OW 69
13086: ST_TO_ADDR
// regid = mcregistry ( ar , [ [ mc_reg_area_to_guard , area4reg ] , [ mc_reg_refresh_time , 13 ] ] ) ;
13087: LD_ADDR_EXP 151
13091: PUSH
13092: LD_EXP 3
13096: PPUSH
13097: LD_INT 2
13099: PUSH
13100: LD_INT 25
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: PUSH
13107: LD_INT 1
13109: PUSH
13110: LD_INT 13
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PPUSH
13121: CALL_OW 399
13125: ST_TO_ADDR
// end ;
13126: LD_VAR 0 1
13130: RET
// export regid , defid ; function vidi_ar_base ; var tmp ; begin
13131: LD_INT 0
13133: PPUSH
13134: PPUSH
// for tmp in typitomybodovy do
13135: LD_ADDR_VAR 0 2
13139: PUSH
13140: LD_LOC 9
13144: PUSH
13145: FOR_IN
13146: IFFALSE 13178
// if see ( al , tmp ) then
13148: LD_EXP 1
13152: PPUSH
13153: LD_VAR 0 2
13157: PPUSH
13158: CALL_OW 292
13162: IFFALSE 13176
// begin result = true ;
13164: LD_ADDR_VAR 0 1
13168: PUSH
13169: LD_INT 1
13171: ST_TO_ADDR
// exit ;
13172: POP
13173: POP
13174: GO 13188
// end ;
13176: GO 13145
13178: POP
13179: POP
// result = false ;
13180: LD_ADDR_VAR 0 1
13184: PUSH
13185: LD_INT 0
13187: ST_TO_ADDR
// end ;
13188: LD_VAR 0 1
13192: RET
// export ar_base_spotted ; every 0 0$0.3 trigger vidi_ar_base marked 06 do var tmp , tmp2 , tmpx , tmpy ;
13193: CALL 13131 0 0
13197: IFFALSE 13607
13199: GO 13201
13201: DISABLE
13202: LD_INT 0
13204: PPUSH
13205: PPUSH
13206: PPUSH
13207: PPUSH
// begin tmp = nearestunittoxy ( filterallunits ( [ [ f_side , al ] , [ f_type , unit_human ] , [ f_or , [ f_outside ] , [ f_driving ] ] , f_not , [ f_nation , nation_nature ] ] ) , 138 , 65 ) ;
13208: LD_ADDR_VAR 0 1
13212: PUSH
13213: LD_INT 22
13215: PUSH
13216: LD_EXP 1
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PUSH
13225: LD_INT 21
13227: PUSH
13228: LD_INT 1
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: PUSH
13235: LD_INT 2
13237: PUSH
13238: LD_INT 56
13240: PUSH
13241: EMPTY
13242: LIST
13243: PUSH
13244: LD_INT 55
13246: PUSH
13247: EMPTY
13248: LIST
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: LIST
13254: PUSH
13255: LD_INT 3
13257: PUSH
13258: LD_INT 23
13260: PUSH
13261: LD_INT 0
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: PPUSH
13275: CALL_OW 69
13279: PPUSH
13280: LD_INT 138
13282: PPUSH
13283: LD_INT 65
13285: PPUSH
13286: CALL_OW 73
13290: ST_TO_ADDR
// tmp2 = filterallunits ( [ [ f_side , al ] , [ f_type , unit_human ] , [ f_ok ] , f_not , [ f_nation , nation_nature ] ] ) diff john ;
13291: LD_ADDR_VAR 0 2
13295: PUSH
13296: LD_INT 22
13298: PUSH
13299: LD_EXP 1
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: LD_INT 21
13310: PUSH
13311: LD_INT 1
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: LD_INT 50
13320: PUSH
13321: EMPTY
13322: LIST
13323: PUSH
13324: LD_INT 3
13326: PUSH
13327: LD_INT 23
13329: PUSH
13330: LD_INT 0
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: PPUSH
13344: CALL_OW 69
13348: PUSH
13349: LD_EXP 80
13353: DIFF
13354: ST_TO_ADDR
// dialogueon ;
13355: CALL_OW 6
// if getsex ( tmp ) = sex_female then
13359: LD_VAR 0 1
13363: PPUSH
13364: CALL_OW 258
13368: PUSH
13369: LD_INT 2
13371: EQUAL
13372: IFFALSE 13388
// say ( tmp , D9-FSol1-1 ) else
13374: LD_VAR 0 1
13378: PPUSH
13379: LD_STRING D9-FSol1-1
13381: PPUSH
13382: CALL_OW 88
13386: GO 13400
// say ( tmp , D9-Sol1-1 ) ;
13388: LD_VAR 0 1
13392: PPUSH
13393: LD_STRING D9-Sol1-1
13395: PPUSH
13396: CALL_OW 88
// revealfogarea ( al , arab_base_reveal ) ;
13400: LD_EXP 1
13404: PPUSH
13405: LD_INT 11
13407: PPUSH
13408: CALL_OW 332
// centernowonunits ( [ abduluv ] ) ;
13412: LD_INT 22
13414: PUSH
13415: EMPTY
13416: LIST
13417: PPUSH
13418: CALL_OW 87
// tmpx = getx ( abduluv ) ;
13422: LD_ADDR_VAR 0 3
13426: PUSH
13427: LD_INT 22
13429: PPUSH
13430: CALL_OW 250
13434: ST_TO_ADDR
// tmpy = gety ( abduluv ) ;
13435: LD_ADDR_VAR 0 4
13439: PUSH
13440: LD_INT 22
13442: PPUSH
13443: CALL_OW 251
13447: ST_TO_ADDR
// placeseeing ( tmpx , tmpy , al , 2 ) ;
13448: LD_VAR 0 3
13452: PPUSH
13453: LD_VAR 0 4
13457: PPUSH
13458: LD_EXP 1
13462: PPUSH
13463: LD_INT 2
13465: PPUSH
13466: CALL_OW 330
// if islive ( frank ) then
13470: LD_EXP 86
13474: PPUSH
13475: CALL_OW 300
13479: IFFALSE 13519
// begin say ( frank , D9-Frank-1 ) ;
13481: LD_EXP 86
13485: PPUSH
13486: LD_STRING D9-Frank-1
13488: PPUSH
13489: CALL_OW 88
// say ( john , D9-JMM-1 ) ;
13493: LD_EXP 80
13497: PPUSH
13498: LD_STRING D9-JMM-1
13500: PPUSH
13501: CALL_OW 88
// say ( frank , D9-Frank-2 ) ;
13505: LD_EXP 86
13509: PPUSH
13510: LD_STRING D9-Frank-2
13512: PPUSH
13513: CALL_OW 88
// end else
13517: GO 13569
// if tmp2 then
13519: LD_VAR 0 2
13523: IFFALSE 13569
// begin say ( tmp2 [ 1 ] , D9-Frank-1 ) ;
13525: LD_VAR 0 2
13529: PUSH
13530: LD_INT 1
13532: ARRAY
13533: PPUSH
13534: LD_STRING D9-Frank-1
13536: PPUSH
13537: CALL_OW 88
// say ( john , D9-JMM-1 ) ;
13541: LD_EXP 80
13545: PPUSH
13546: LD_STRING D9-JMM-1
13548: PPUSH
13549: CALL_OW 88
// say ( tmp2 [ 1 ] , D9-Frank-2 ) ;
13553: LD_VAR 0 2
13557: PUSH
13558: LD_INT 1
13560: ARRAY
13561: PPUSH
13562: LD_STRING D9-Frank-2
13564: PPUSH
13565: CALL_OW 88
// end ; dialogueoff ;
13569: CALL_OW 7
// removeseeing ( tmpx , tmpy , al ) ;
13573: LD_VAR 0 3
13577: PPUSH
13578: LD_VAR 0 4
13582: PPUSH
13583: LD_EXP 1
13587: PPUSH
13588: CALL_OW 331
// ar_base_spotted = true ;
13592: LD_ADDR_EXP 153
13596: PUSH
13597: LD_INT 1
13599: ST_TO_ADDR
// update_display ( 1 ) ;
13600: LD_INT 1
13602: PPUSH
13603: CALL 13610 0 1
// end ;
13607: PPOPN 4
13609: END
// var act_time ; export function update_display ( flag ) ; var tmp ; begin
13610: LD_INT 0
13612: PPUSH
13613: PPUSH
// tmp = tick div ( 35 * 60 ) ;
13614: LD_ADDR_VAR 0 3
13618: PUSH
13619: LD_OWVAR 1
13623: PUSH
13624: LD_INT 35
13626: PUSH
13627: LD_INT 60
13629: MUL
13630: DIV
13631: ST_TO_ADDR
// act_time = tmp * 35 * 60 ;
13632: LD_ADDR_LOC 11
13636: PUSH
13637: LD_VAR 0 3
13641: PUSH
13642: LD_INT 35
13644: MUL
13645: PUSH
13646: LD_INT 60
13648: MUL
13649: ST_TO_ADDR
// display_strings = [ #Am17-1 , arab_artef_zdrh + 25 25$0 - act_time ] ;
13650: LD_ADDR_OWVAR 47
13654: PUSH
13655: LD_STRING #Am17-1
13657: PUSH
13658: LD_EXP 73
13662: PUSH
13663: LD_INT 52500
13665: PLUS
13666: PUSH
13667: LD_LOC 11
13671: MINUS
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: ST_TO_ADDR
// if flag then
13677: LD_VAR 0 1
13681: IFFALSE 13686
// enable ( 37 ) ;
13683: LD_INT 37
13685: ENABLE_MARKED
// end ;
13686: LD_VAR 0 2
13690: RET
// every 1 1$0 marked 37 do
13691: GO 13693
13693: DISABLE
// begin update_display ( 0 ) ;
13694: LD_INT 0
13696: PPUSH
13697: CALL 13610 0 1
// enable ;
13701: ENABLE
// end ;
13702: END
// every 0 0$30 marked 13 do
13703: GO 13705
13705: DISABLE
// begin time2destmasha_ = time2destmasha_ - 0 0$30 ;
13706: LD_ADDR_EXP 74
13710: PUSH
13711: LD_EXP 74
13715: PUSH
13716: LD_INT 1050
13718: MINUS
13719: ST_TO_ADDR
// if time2destmasha_ > 0 then
13720: LD_EXP 74
13724: PUSH
13725: LD_INT 0
13727: GREATER
13728: IFFALSE 13733
// begin enable ;
13730: ENABLE
// exit ;
13731: GO 13776
// end ; comenterunit ( abdul , abduluv ) ;
13733: LD_EXP 134
13737: PPUSH
13738: LD_INT 22
13740: PPUSH
13741: CALL_OW 120
// while not isinunit ( abdul ) do
13745: LD_EXP 134
13749: PPUSH
13750: CALL_OW 310
13754: NOT
13755: IFFALSE 13766
// wait ( 0 0$1 ) ;
13757: LD_INT 35
13759: PPUSH
13760: CALL_OW 67
13764: GO 13745
// comremember ( abduluv ) ;
13766: LD_INT 22
13768: PPUSH
13769: CALL_OW 143
// enable ( 14 ) ;
13773: LD_INT 14
13775: ENABLE_MARKED
// end ;
13776: END
// every 0 0$2 trigger see ( ar , masha ) marked 14 do var tmp ;
13777: LD_EXP 3
13781: PPUSH
13782: LD_EXP 112
13786: PPUSH
13787: CALL_OW 292
13791: IFFALSE 13961
13793: GO 13795
13795: DISABLE
13796: LD_INT 0
13798: PPUSH
// begin comreturn ( abduluv ) ;
13799: LD_INT 22
13801: PPUSH
13802: CALL_OW 144
// uc_side = ar ;
13806: LD_ADDR_OWVAR 20
13810: PUSH
13811: LD_EXP 3
13815: ST_TO_ADDR
// uc_nation = nation_arabian ;
13816: LD_ADDR_OWVAR 21
13820: PUSH
13821: LD_INT 2
13823: ST_TO_ADDR
// preparesoldier ( sex_male , 7 ) ;
13824: LD_INT 1
13826: PPUSH
13827: LD_INT 7
13829: PPUSH
13830: CALL_OW 381
// tmp = createhuman ;
13834: LD_ADDR_VAR 0 1
13838: PUSH
13839: CALL_OW 44
13843: ST_TO_ADDR
// placeunitxy ( tmp , 133 , 32 , false ) ;
13844: LD_VAR 0 1
13848: PPUSH
13849: LD_INT 133
13851: PPUSH
13852: LD_INT 32
13854: PPUSH
13855: LD_INT 0
13857: PPUSH
13858: CALL_OW 48
// commovexy ( tmp , 123 , 15 ) ;
13862: LD_VAR 0 1
13866: PPUSH
13867: LD_INT 123
13869: PPUSH
13870: LD_INT 15
13872: PPUSH
13873: CALL_OW 111
// addcomplacedelayedcharge ( tmp , 0 , 0 , masha ) ;
13877: LD_VAR 0 1
13881: PPUSH
13882: LD_INT 0
13884: PPUSH
13885: LD_INT 0
13887: PPUSH
13888: LD_EXP 112
13892: PPUSH
13893: CALL_OW 192
// addcommovexy ( tmp , 133 , 32 ) ;
13897: LD_VAR 0 1
13901: PPUSH
13902: LD_INT 133
13904: PPUSH
13905: LD_INT 32
13907: PPUSH
13908: CALL_OW 171
// addcomhold ( tmp ) ;
13912: LD_VAR 0 1
13916: PPUSH
13917: CALL_OW 200
// addcommoveunit ( tmp , arbarr ) ;
13921: LD_VAR 0 1
13925: PPUSH
13926: LD_INT 2
13928: PPUSH
13929: CALL_OW 172
// while not isdead ( masha ) do
13933: LD_EXP 112
13937: PPUSH
13938: CALL_OW 301
13942: NOT
13943: IFFALSE 13954
// wait ( 0 0$1 ) ;
13945: LD_INT 35
13947: PPUSH
13948: CALL_OW 67
13952: GO 13933
// changemissionobjectives ( M4b ) ;
13954: LD_STRING M4b
13956: PPUSH
13957: CALL_OW 337
// end ;
13961: PPOPN 1
13963: END
// function isinareaex ( list , area ) ; var tmp ; begin
13964: LD_INT 0
13966: PPUSH
13967: PPUSH
// for tmp in list do
13968: LD_ADDR_VAR 0 4
13972: PUSH
13973: LD_VAR 0 1
13977: PUSH
13978: FOR_IN
13979: IFFALSE 14012
// if not isinarea ( tmp , area ) then
13981: LD_VAR 0 4
13985: PPUSH
13986: LD_VAR 0 2
13990: PPUSH
13991: CALL_OW 308
13995: NOT
13996: IFFALSE 14010
// begin result = false ;
13998: LD_ADDR_VAR 0 3
14002: PUSH
14003: LD_INT 0
14005: ST_TO_ADDR
// exit ;
14006: POP
14007: POP
14008: GO 14022
// end ;
14010: GO 13978
14012: POP
14013: POP
// result = true ;
14014: LD_ADDR_VAR 0 3
14018: PUSH
14019: LD_INT 1
14021: ST_TO_ADDR
// end ;
14022: LD_VAR 0 3
14026: RET
// every 0 0$1 marked 07 do var tmp , tmp2 ;
14027: GO 14029
14029: DISABLE
14030: LD_INT 0
14032: PPUSH
14033: PPUSH
// begin wait ( 7 7$0 ) ;
14034: LD_INT 14700
14036: PPUSH
14037: CALL_OW 67
// uc_side = ar ;
14041: LD_ADDR_OWVAR 20
14045: PUSH
14046: LD_EXP 3
14050: ST_TO_ADDR
// uc_nation = nation_arabian ;
14051: LD_ADDR_OWVAR 21
14055: PUSH
14056: LD_INT 2
14058: ST_TO_ADDR
// vc_engine = engine_siberite ;
14059: LD_ADDR_OWVAR 39
14063: PUSH
14064: LD_INT 3
14066: ST_TO_ADDR
// vc_control = control_manual ;
14067: LD_ADDR_OWVAR 38
14071: PUSH
14072: LD_INT 1
14074: ST_TO_ADDR
// tmp2 = [ ] ;
14075: LD_ADDR_VAR 0 2
14079: PUSH
14080: EMPTY
14081: ST_TO_ADDR
// vc_chassis = arv1_ch ;
14082: LD_ADDR_OWVAR 37
14086: PUSH
14087: LD_EXP 18
14091: ST_TO_ADDR
// vc_weapon = arv1_wp ;
14092: LD_ADDR_OWVAR 40
14096: PUSH
14097: LD_EXP 19
14101: ST_TO_ADDR
// tmp = createvehicle ;
14102: LD_ADDR_VAR 0 1
14106: PUSH
14107: CALL_OW 45
14111: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
14112: LD_VAR 0 1
14116: PPUSH
14117: LD_INT 5
14119: PPUSH
14120: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
14124: LD_VAR 0 1
14128: PPUSH
14129: LD_INT 12
14131: PPUSH
14132: LD_INT 0
14134: PPUSH
14135: CALL_OW 49
// preparemechanic ( sex_male , arm1_sk ) ;
14139: LD_INT 1
14141: PPUSH
14142: LD_EXP 20
14146: PPUSH
14147: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
14151: CALL_OW 44
14155: PPUSH
14156: LD_VAR 0 1
14160: PPUSH
14161: CALL_OW 52
// tmp2 = tmp2 ^ [ tmp ] ;
14165: LD_ADDR_VAR 0 2
14169: PUSH
14170: LD_VAR 0 2
14174: PUSH
14175: LD_VAR 0 1
14179: PUSH
14180: EMPTY
14181: LIST
14182: ADD
14183: ST_TO_ADDR
// vc_chassis = arv2_ch ;
14184: LD_ADDR_OWVAR 37
14188: PUSH
14189: LD_EXP 21
14193: ST_TO_ADDR
// vc_weapon = arv2_wp ;
14194: LD_ADDR_OWVAR 40
14198: PUSH
14199: LD_EXP 22
14203: ST_TO_ADDR
// tmp = createvehicle ;
14204: LD_ADDR_VAR 0 1
14208: PUSH
14209: CALL_OW 45
14213: ST_TO_ADDR
// setdir ( tmp , 4 ) ;
14214: LD_VAR 0 1
14218: PPUSH
14219: LD_INT 4
14221: PPUSH
14222: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
14226: LD_VAR 0 1
14230: PPUSH
14231: LD_INT 12
14233: PPUSH
14234: LD_INT 0
14236: PPUSH
14237: CALL_OW 49
// preparemechanic ( sex_male , arm2_sk ) ;
14241: LD_INT 1
14243: PPUSH
14244: LD_EXP 23
14248: PPUSH
14249: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
14253: CALL_OW 44
14257: PPUSH
14258: LD_VAR 0 1
14262: PPUSH
14263: CALL_OW 52
// tmp2 = tmp2 ^ [ tmp ] ;
14267: LD_ADDR_VAR 0 2
14271: PUSH
14272: LD_VAR 0 2
14276: PUSH
14277: LD_VAR 0 1
14281: PUSH
14282: EMPTY
14283: LIST
14284: ADD
14285: ST_TO_ADDR
// vc_chassis = arv3_ch ;
14286: LD_ADDR_OWVAR 37
14290: PUSH
14291: LD_EXP 24
14295: ST_TO_ADDR
// vc_weapon = arv3_wp ;
14296: LD_ADDR_OWVAR 40
14300: PUSH
14301: LD_EXP 25
14305: ST_TO_ADDR
// tmp = createvehicle ;
14306: LD_ADDR_VAR 0 1
14310: PUSH
14311: CALL_OW 45
14315: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
14316: LD_VAR 0 1
14320: PPUSH
14321: LD_INT 5
14323: PPUSH
14324: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
14328: LD_VAR 0 1
14332: PPUSH
14333: LD_INT 12
14335: PPUSH
14336: LD_INT 0
14338: PPUSH
14339: CALL_OW 49
// preparemechanic ( sex_male , arm3_sk ) ;
14343: LD_INT 1
14345: PPUSH
14346: LD_EXP 26
14350: PPUSH
14351: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
14355: CALL_OW 44
14359: PPUSH
14360: LD_VAR 0 1
14364: PPUSH
14365: CALL_OW 52
// tmp2 = tmp2 ^ [ tmp ] ;
14369: LD_ADDR_VAR 0 2
14373: PUSH
14374: LD_VAR 0 2
14378: PUSH
14379: LD_VAR 0 1
14383: PUSH
14384: EMPTY
14385: LIST
14386: ADD
14387: ST_TO_ADDR
// vc_chassis = arv4_ch ;
14388: LD_ADDR_OWVAR 37
14392: PUSH
14393: LD_EXP 27
14397: ST_TO_ADDR
// vc_weapon = arv4_wp ;
14398: LD_ADDR_OWVAR 40
14402: PUSH
14403: LD_EXP 28
14407: ST_TO_ADDR
// tmp = createvehicle ;
14408: LD_ADDR_VAR 0 1
14412: PUSH
14413: CALL_OW 45
14417: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
14418: LD_VAR 0 1
14422: PPUSH
14423: LD_INT 5
14425: PPUSH
14426: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
14430: LD_VAR 0 1
14434: PPUSH
14435: LD_INT 12
14437: PPUSH
14438: LD_INT 0
14440: PPUSH
14441: CALL_OW 49
// preparemechanic ( sex_male , arm4_sk ) ;
14445: LD_INT 1
14447: PPUSH
14448: LD_EXP 29
14452: PPUSH
14453: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
14457: CALL_OW 44
14461: PPUSH
14462: LD_VAR 0 1
14466: PPUSH
14467: CALL_OW 52
// tmp2 = tmp2 ^ [ tmp ] ;
14471: LD_ADDR_VAR 0 2
14475: PUSH
14476: LD_VAR 0 2
14480: PUSH
14481: LD_VAR 0 1
14485: PUSH
14486: EMPTY
14487: LIST
14488: ADD
14489: ST_TO_ADDR
// vc_engine = engine_combustion ;
14490: LD_ADDR_OWVAR 39
14494: PUSH
14495: LD_INT 1
14497: ST_TO_ADDR
// vc_chassis = arv5_ch ;
14498: LD_ADDR_OWVAR 37
14502: PUSH
14503: LD_EXP 30
14507: ST_TO_ADDR
// vc_weapon = arv5_wp ;
14508: LD_ADDR_OWVAR 40
14512: PUSH
14513: LD_EXP 31
14517: ST_TO_ADDR
// tmp = createvehicle ;
14518: LD_ADDR_VAR 0 1
14522: PUSH
14523: CALL_OW 45
14527: ST_TO_ADDR
// setdir ( tmp , 4 ) ;
14528: LD_VAR 0 1
14532: PPUSH
14533: LD_INT 4
14535: PPUSH
14536: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
14540: LD_VAR 0 1
14544: PPUSH
14545: LD_INT 12
14547: PPUSH
14548: LD_INT 0
14550: PPUSH
14551: CALL_OW 49
// preparemechanic ( sex_male , arm5_sk ) ;
14555: LD_INT 1
14557: PPUSH
14558: LD_EXP 32
14562: PPUSH
14563: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
14567: CALL_OW 44
14571: PPUSH
14572: LD_VAR 0 1
14576: PPUSH
14577: CALL_OW 52
// tmp2 = tmp2 ^ [ tmp ] ;
14581: LD_ADDR_VAR 0 2
14585: PUSH
14586: LD_VAR 0 2
14590: PUSH
14591: LD_VAR 0 1
14595: PUSH
14596: EMPTY
14597: LIST
14598: ADD
14599: ST_TO_ADDR
// vc_engine = engine_siberite ;
14600: LD_ADDR_OWVAR 39
14604: PUSH
14605: LD_INT 3
14607: ST_TO_ADDR
// vc_chassis = arv6_ch ;
14608: LD_ADDR_OWVAR 37
14612: PUSH
14613: LD_EXP 33
14617: ST_TO_ADDR
// vc_weapon = arv6_wp ;
14618: LD_ADDR_OWVAR 40
14622: PUSH
14623: LD_EXP 34
14627: ST_TO_ADDR
// tmp = createvehicle ;
14628: LD_ADDR_VAR 0 1
14632: PUSH
14633: CALL_OW 45
14637: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
14638: LD_VAR 0 1
14642: PPUSH
14643: LD_INT 5
14645: PPUSH
14646: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
14650: LD_VAR 0 1
14654: PPUSH
14655: LD_INT 12
14657: PPUSH
14658: LD_INT 0
14660: PPUSH
14661: CALL_OW 49
// preparemechanic ( sex_male , arm6_sk ) ;
14665: LD_INT 1
14667: PPUSH
14668: LD_EXP 35
14672: PPUSH
14673: CALL_OW 383
// placehumaninunit ( createhuman , tmp ) ;
14677: CALL_OW 44
14681: PPUSH
14682: LD_VAR 0 1
14686: PPUSH
14687: CALL_OW 52
// tmp2 = tmp2 ^ [ tmp ] ;
14691: LD_ADDR_VAR 0 2
14695: PUSH
14696: LD_VAR 0 2
14700: PUSH
14701: LD_VAR 0 1
14705: PUSH
14706: EMPTY
14707: LIST
14708: ADD
14709: ST_TO_ADDR
// vc_control = control_remote ;
14710: LD_ADDR_OWVAR 38
14714: PUSH
14715: LD_INT 2
14717: ST_TO_ADDR
// if difficulty >= 2 then
14718: LD_OWVAR 67
14722: PUSH
14723: LD_INT 2
14725: GREATEREQUAL
14726: IFFALSE 14908
// begin vc_chassis = arv7_ch ;
14728: LD_ADDR_OWVAR 37
14732: PUSH
14733: LD_EXP 36
14737: ST_TO_ADDR
// vc_weapon = arv7_wp ;
14738: LD_ADDR_OWVAR 40
14742: PUSH
14743: LD_EXP 37
14747: ST_TO_ADDR
// tmp = createvehicle ;
14748: LD_ADDR_VAR 0 1
14752: PUSH
14753: CALL_OW 45
14757: ST_TO_ADDR
// setdir ( tmp , 4 ) ;
14758: LD_VAR 0 1
14762: PPUSH
14763: LD_INT 4
14765: PPUSH
14766: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
14770: LD_VAR 0 1
14774: PPUSH
14775: LD_INT 12
14777: PPUSH
14778: LD_INT 0
14780: PPUSH
14781: CALL_OW 49
// linkvehicletohuman ( tmp , ar_mech_ctrl ) ;
14785: LD_VAR 0 1
14789: PPUSH
14790: LD_LOC 10
14794: PPUSH
14795: CALL_OW 53
// tmp2 = tmp2 ^ [ tmp ] ;
14799: LD_ADDR_VAR 0 2
14803: PUSH
14804: LD_VAR 0 2
14808: PUSH
14809: LD_VAR 0 1
14813: PUSH
14814: EMPTY
14815: LIST
14816: ADD
14817: ST_TO_ADDR
// vc_chassis = arv8_ch ;
14818: LD_ADDR_OWVAR 37
14822: PUSH
14823: LD_EXP 38
14827: ST_TO_ADDR
// vc_weapon = arv8_wp ;
14828: LD_ADDR_OWVAR 40
14832: PUSH
14833: LD_EXP 39
14837: ST_TO_ADDR
// tmp = createvehicle ;
14838: LD_ADDR_VAR 0 1
14842: PUSH
14843: CALL_OW 45
14847: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
14848: LD_VAR 0 1
14852: PPUSH
14853: LD_INT 5
14855: PPUSH
14856: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
14860: LD_VAR 0 1
14864: PPUSH
14865: LD_INT 12
14867: PPUSH
14868: LD_INT 0
14870: PPUSH
14871: CALL_OW 49
// linkvehicletohuman ( tmp , ar_mech_ctrl ) ;
14875: LD_VAR 0 1
14879: PPUSH
14880: LD_LOC 10
14884: PPUSH
14885: CALL_OW 53
// tmp2 = tmp2 ^ [ tmp ] ;
14889: LD_ADDR_VAR 0 2
14893: PUSH
14894: LD_VAR 0 2
14898: PUSH
14899: LD_VAR 0 1
14903: PUSH
14904: EMPTY
14905: LIST
14906: ADD
14907: ST_TO_ADDR
// end ; if difficulty > 2 then
14908: LD_OWVAR 67
14912: PUSH
14913: LD_INT 2
14915: GREATER
14916: IFFALSE 15098
// begin vc_chassis = arv9_ch ;
14918: LD_ADDR_OWVAR 37
14922: PUSH
14923: LD_EXP 40
14927: ST_TO_ADDR
// vc_weapon = arv9_wp ;
14928: LD_ADDR_OWVAR 40
14932: PUSH
14933: LD_EXP 41
14937: ST_TO_ADDR
// tmp = createvehicle ;
14938: LD_ADDR_VAR 0 1
14942: PUSH
14943: CALL_OW 45
14947: ST_TO_ADDR
// setdir ( tmp , 4 ) ;
14948: LD_VAR 0 1
14952: PPUSH
14953: LD_INT 4
14955: PPUSH
14956: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
14960: LD_VAR 0 1
14964: PPUSH
14965: LD_INT 12
14967: PPUSH
14968: LD_INT 0
14970: PPUSH
14971: CALL_OW 49
// linkvehicletohuman ( tmp , ar_mech_ctrl ) ;
14975: LD_VAR 0 1
14979: PPUSH
14980: LD_LOC 10
14984: PPUSH
14985: CALL_OW 53
// tmp2 = tmp2 ^ [ tmp ] ;
14989: LD_ADDR_VAR 0 2
14993: PUSH
14994: LD_VAR 0 2
14998: PUSH
14999: LD_VAR 0 1
15003: PUSH
15004: EMPTY
15005: LIST
15006: ADD
15007: ST_TO_ADDR
// vc_chassis = arv10_ch ;
15008: LD_ADDR_OWVAR 37
15012: PUSH
15013: LD_EXP 42
15017: ST_TO_ADDR
// vc_weapon = arv10_wp ;
15018: LD_ADDR_OWVAR 40
15022: PUSH
15023: LD_EXP 43
15027: ST_TO_ADDR
// tmp = createvehicle ;
15028: LD_ADDR_VAR 0 1
15032: PUSH
15033: CALL_OW 45
15037: ST_TO_ADDR
// setdir ( tmp , 5 ) ;
15038: LD_VAR 0 1
15042: PPUSH
15043: LD_INT 5
15045: PPUSH
15046: CALL_OW 233
// placeunitarea ( tmp , ar_place , false ) ;
15050: LD_VAR 0 1
15054: PPUSH
15055: LD_INT 12
15057: PPUSH
15058: LD_INT 0
15060: PPUSH
15061: CALL_OW 49
// linkvehicletohuman ( tmp , ar_mech_ctrl ) ;
15065: LD_VAR 0 1
15069: PPUSH
15070: LD_LOC 10
15074: PPUSH
15075: CALL_OW 53
// tmp2 = tmp2 ^ [ tmp ] ;
15079: LD_ADDR_VAR 0 2
15083: PUSH
15084: LD_VAR 0 2
15088: PUSH
15089: LD_VAR 0 1
15093: PUSH
15094: EMPTY
15095: LIST
15096: ADD
15097: ST_TO_ADDR
// end ; commovetoarea ( tmp2 , wayp ) ;
15098: LD_VAR 0 2
15102: PPUSH
15103: LD_INT 13
15105: PPUSH
15106: CALL_OW 113
// tmp = 1 ;
15110: LD_ADDR_VAR 0 1
15114: PUSH
15115: LD_INT 1
15117: ST_TO_ADDR
// while not isinareaex ( tmp2 , wayp ) do
15118: LD_VAR 0 2
15122: PPUSH
15123: LD_INT 13
15125: PPUSH
15126: CALL 13964 0 2
15130: NOT
15131: IFFALSE 15182
// begin wait ( 0 0$1 ) ;
15133: LD_INT 35
15135: PPUSH
15136: CALL_OW 67
// tmp = tmp + 1 ;
15140: LD_ADDR_VAR 0 1
15144: PUSH
15145: LD_VAR 0 1
15149: PUSH
15150: LD_INT 1
15152: PLUS
15153: ST_TO_ADDR
// if ( tmp mod 5 ) = 0 then
15154: LD_VAR 0 1
15158: PUSH
15159: LD_INT 5
15161: MOD
15162: PUSH
15163: LD_INT 0
15165: EQUAL
15166: IFFALSE 15180
// commovetoarea ( tmp2 , wayp ) ;
15168: LD_VAR 0 2
15172: PPUSH
15173: LD_INT 13
15175: PPUSH
15176: CALL_OW 113
// end ;
15180: GO 15118
// comagressivemove ( tmp2 , 61 , 50 ) ;
15182: LD_VAR 0 2
15186: PPUSH
15187: LD_INT 61
15189: PPUSH
15190: LD_INT 50
15192: PPUSH
15193: CALL_OW 114
// end ;
15197: PPOPN 2
15199: END
// every 25 25$0 do
15200: GO 15202
15202: DISABLE
// begin wait ( arab_artef_zdrh ) ;
15203: LD_EXP 73
15207: PPUSH
15208: CALL_OW 67
// commovexy ( nakladak , 161 , 87 ) ;
15212: LD_INT 23
15214: PPUSH
15215: LD_INT 161
15217: PPUSH
15218: LD_INT 87
15220: PPUSH
15221: CALL_OW 111
// wait ( 0 0$5 ) ;
15225: LD_INT 175
15227: PPUSH
15228: CALL_OW 67
// destroyunit ( nakladak ) ;
15232: LD_INT 23
15234: PPUSH
15235: CALL_OW 65
// youlost ( Destroyed ) ;
15239: LD_STRING Destroyed
15241: PPUSH
15242: CALL_OW 104
// end ;
15246: END
// on vehiclecaptured ( vehnew , vehold , origside , hum ) do if vehold = nakladak then
15247: LD_VAR 0 2
15251: PUSH
15252: LD_INT 23
15254: EQUAL
15255: IFFALSE 15267
// koncime = true else
15257: LD_ADDR_EXP 76
15261: PUSH
15262: LD_INT 1
15264: ST_TO_ADDR
15265: GO 15289
// if vehold = masha then
15267: LD_VAR 0 2
15271: PUSH
15272: LD_EXP 112
15276: EQUAL
15277: IFFALSE 15289
// masha = vehnew ;
15279: LD_ADDR_EXP 112
15283: PUSH
15284: LD_VAR 0 1
15288: ST_TO_ADDR
15289: PPOPN 4
15291: END
// on artifactloaded ( un , size ) marked 15 do if getside ( un ) = al then
15292: LD_VAR 0 1
15296: PPUSH
15297: CALL_OW 255
15301: PUSH
15302: LD_EXP 1
15306: EQUAL
15307: IFFALSE 15317
// koncime = true ;
15309: LD_ADDR_EXP 76
15313: PUSH
15314: LD_INT 1
15316: ST_TO_ADDR
15317: PPOPN 2
15319: END
// every 0 0$1 trigger koncime or base_out or artef_out do var un ; var medal1 , medal2 , medal3 ;
15320: LD_EXP 76
15324: PUSH
15325: LD_EXP 79
15329: OR
15330: PUSH
15331: LD_EXP 78
15335: OR
15336: IFFALSE 15810
15338: GO 15340
15340: DISABLE
15341: LD_INT 0
15343: PPUSH
15344: PPUSH
15345: PPUSH
15346: PPUSH
// begin medal1 := false ;
15347: LD_ADDR_VAR 0 2
15351: PUSH
15352: LD_INT 0
15354: ST_TO_ADDR
// medal2 := false ;
15355: LD_ADDR_VAR 0 3
15359: PUSH
15360: LD_INT 0
15362: ST_TO_ADDR
// medal3 := false ;
15363: LD_ADDR_VAR 0 4
15367: PUSH
15368: LD_INT 0
15370: ST_TO_ADDR
// wait ( [ 0 0$10 , 0 0$5 , 0 0$0 ] [ difficulty ] ) ;
15371: LD_INT 350
15373: PUSH
15374: LD_INT 175
15376: PUSH
15377: LD_INT 0
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: LIST
15384: PUSH
15385: LD_OWVAR 67
15389: ARRAY
15390: PPUSH
15391: CALL_OW 67
// if IsPlaced ( Abdul ) and IsLive ( Abdul ) then
15395: LD_EXP 134
15399: PPUSH
15400: CALL_OW 305
15404: PUSH
15405: LD_EXP 134
15409: PPUSH
15410: CALL_OW 300
15414: AND
15415: IFFALSE 15539
// begin repeat wait ( 0 0$1 ) ;
15417: LD_INT 35
15419: PPUSH
15420: CALL_OW 67
// if IsDead ( Abdul ) then
15424: LD_EXP 134
15428: PPUSH
15429: CALL_OW 301
15433: IFFALSE 15437
// break ;
15435: GO 15532
// if IsInUnit ( Abdul ) > 0 then
15437: LD_EXP 134
15441: PPUSH
15442: CALL_OW 310
15446: PUSH
15447: LD_INT 0
15449: GREATER
15450: IFFALSE 15469
// un = IsInUnit ( Abdul ) else
15452: LD_ADDR_VAR 0 1
15456: PUSH
15457: LD_EXP 134
15461: PPUSH
15462: CALL_OW 310
15466: ST_TO_ADDR
15467: GO 15479
// un = Abdul ;
15469: LD_ADDR_VAR 0 1
15473: PUSH
15474: LD_EXP 134
15478: ST_TO_ADDR
// if GetDistUnitXY ( un , 167 , 97 ) <= 2 then
15479: LD_VAR 0 1
15483: PPUSH
15484: LD_INT 167
15486: PPUSH
15487: LD_INT 97
15489: PPUSH
15490: CALL_OW 297
15494: PUSH
15495: LD_INT 2
15497: LESSEQUAL
15498: IFFALSE 15513
// begin RemoveUnit ( un ) ;
15500: LD_VAR 0 1
15504: PPUSH
15505: CALL_OW 64
// break ;
15509: GO 15532
// end else
15511: GO 15528
// ComMoveXY ( un , 167 , 97 ) ;
15513: LD_VAR 0 1
15517: PPUSH
15518: LD_INT 167
15520: PPUSH
15521: LD_INT 97
15523: PPUSH
15524: CALL_OW 111
// until false ;
15528: LD_INT 0
15530: IFFALSE 15417
// wait ( 0 0$2 ) ;
15532: LD_INT 70
15534: PPUSH
15535: CALL_OW 67
// end ; while IsPlaced ( abduluv ) and IsLive ( abduluv ) do
15539: LD_INT 22
15541: PPUSH
15542: CALL_OW 305
15546: PUSH
15547: LD_INT 22
15549: PPUSH
15550: CALL_OW 300
15554: AND
15555: IFFALSE 15566
// wait ( 0 0$1 ) ;
15557: LD_INT 35
15559: PPUSH
15560: CALL_OW 67
15564: GO 15539
// if ( getside ( masha ) = al ) or ( getside ( masha ) = oth ) then
15566: LD_EXP 112
15570: PPUSH
15571: CALL_OW 255
15575: PUSH
15576: LD_EXP 1
15580: EQUAL
15581: PUSH
15582: LD_EXP 112
15586: PPUSH
15587: CALL_OW 255
15591: PUSH
15592: LD_EXP 4
15596: EQUAL
15597: OR
15598: IFFALSE 15620
// begin medal1 := true ;
15600: LD_ADDR_VAR 0 2
15604: PUSH
15605: LD_INT 1
15607: ST_TO_ADDR
// addmedal ( Masha , 1 ) ;
15608: LD_STRING Masha
15610: PPUSH
15611: LD_INT 1
15613: PPUSH
15614: CALL_OW 101
// end else
15618: GO 15631
// addmedal ( Masha , - 1 ) ;
15620: LD_STRING Masha
15622: PPUSH
15623: LD_INT 1
15625: NEG
15626: PPUSH
15627: CALL_OW 101
// if isdead ( abdul ) then
15631: LD_EXP 134
15635: PPUSH
15636: CALL_OW 301
15640: IFFALSE 15662
// begin medal2 := true ;
15642: LD_ADDR_VAR 0 3
15646: PUSH
15647: LD_INT 1
15649: ST_TO_ADDR
// addmedal ( Abdul , 1 ) ;
15650: LD_STRING Abdul
15652: PPUSH
15653: LD_INT 1
15655: PPUSH
15656: CALL_OW 101
// end else
15660: GO 15673
// addmedal ( Abdul , - 1 ) ;
15662: LD_STRING Abdul
15664: PPUSH
15665: LD_INT 1
15667: NEG
15668: PPUSH
15669: CALL_OW 101
// if isdead ( abduluv ) then
15673: LD_INT 22
15675: PPUSH
15676: CALL_OW 301
15680: IFFALSE 15702
// begin medal3 := true ;
15682: LD_ADDR_VAR 0 4
15686: PUSH
15687: LD_INT 1
15689: ST_TO_ADDR
// addmedal ( Mast , 1 ) ;
15690: LD_STRING Mast
15692: PPUSH
15693: LD_INT 1
15695: PPUSH
15696: CALL_OW 101
// end else
15700: GO 15713
// addmedal ( Mast , - 1 ) ;
15702: LD_STRING Mast
15704: PPUSH
15705: LD_INT 1
15707: NEG
15708: PPUSH
15709: CALL_OW 101
// SA_EndMission ( 4 , 2 , medal1 , medal2 , medal3 ) ;
15713: LD_INT 4
15715: PPUSH
15716: LD_INT 2
15718: PPUSH
15719: LD_VAR 0 2
15723: PPUSH
15724: LD_VAR 0 3
15728: PPUSH
15729: LD_VAR 0 4
15733: PPUSH
15734: CALL 17199 0 5
// givemedals ( Main ) ;
15738: LD_STRING Main
15740: PPUSH
15741: CALL_OW 102
// rewardpeople ( filterallunits ( [ [ f_alive ] , [ f_side , al ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ) ;
15745: LD_INT 51
15747: PUSH
15748: EMPTY
15749: LIST
15750: PUSH
15751: LD_INT 22
15753: PUSH
15754: LD_EXP 1
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PUSH
15763: LD_INT 21
15765: PUSH
15766: LD_INT 1
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: PUSH
15773: LD_INT 3
15775: PUSH
15776: LD_INT 23
15778: PUSH
15779: LD_INT 0
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: PPUSH
15793: CALL_OW 69
15797: PPUSH
15798: CALL_OW 43
// saveitall ;
15802: CALL 15813 0 0
// youwin ;
15806: CALL_OW 103
// end ;
15810: PPOPN 4
15812: END
// function saveitall ; var bz , tmz , tmzo ; begin
15813: LD_INT 0
15815: PPUSH
15816: PPUSH
15817: PPUSH
15818: PPUSH
// savevariable ( vyjednavalo_se , NegotiationsOffered ) ;
15819: LD_EXP 114
15823: PPUSH
15824: LD_STRING NegotiationsOffered
15826: PPUSH
15827: CALL_OW 39
// savevariable ( getside ( masha ) = al , masha_saved ) ;
15831: LD_EXP 112
15835: PPUSH
15836: CALL_OW 255
15840: PUSH
15841: LD_EXP 1
15845: EQUAL
15846: PPUSH
15847: LD_STRING masha_saved
15849: PPUSH
15850: CALL_OW 39
// savevariable ( isdead ( abdul ) , AbdulKilled ) ;
15854: LD_EXP 134
15858: PPUSH
15859: CALL_OW 301
15863: PPUSH
15864: LD_STRING AbdulKilled
15866: PPUSH
15867: CALL_OW 39
// savecharacters ( john , JMM ) ;
15871: LD_EXP 80
15875: PPUSH
15876: LD_STRING JMM
15878: PPUSH
15879: CALL_OW 38
// savecharacters ( roth , Roth ) ;
15883: LD_EXP 81
15887: PPUSH
15888: LD_STRING Roth
15890: PPUSH
15891: CALL_OW 38
// if joan then
15895: LD_EXP 82
15899: IFFALSE 15913
// savecharacters ( joan , Joan ) ;
15901: LD_EXP 82
15905: PPUSH
15906: LD_STRING Joan
15908: PPUSH
15909: CALL_OW 38
// if bobby then
15913: LD_EXP 83
15917: IFFALSE 15931
// savecharacters ( bobby , Bobby ) ;
15919: LD_EXP 83
15923: PPUSH
15924: LD_STRING Bobby
15926: PPUSH
15927: CALL_OW 38
// if cyrus then
15931: LD_EXP 84
15935: IFFALSE 15949
// savecharacters ( cyrus , Cyrus ) ;
15937: LD_EXP 84
15941: PPUSH
15942: LD_STRING Cyrus
15944: PPUSH
15945: CALL_OW 38
// if lisa then
15949: LD_EXP 85
15953: IFFALSE 15967
// savecharacters ( lisa , Lisa ) ;
15955: LD_EXP 85
15959: PPUSH
15960: LD_STRING Lisa
15962: PPUSH
15963: CALL_OW 38
// if frank then
15967: LD_EXP 86
15971: IFFALSE 15985
// savecharacters ( frank , Frank ) ;
15973: LD_EXP 86
15977: PPUSH
15978: LD_STRING Frank
15980: PPUSH
15981: CALL_OW 38
// if markc then
15985: LD_EXP 87
15989: IFFALSE 16003
// savecharacters ( markc , Cornell ) ;
15991: LD_EXP 87
15995: PPUSH
15996: LD_STRING Cornell
15998: PPUSH
15999: CALL_OW 38
// if brown then
16003: LD_EXP 94
16007: IFFALSE 16021
// savecharacters ( brown , Brown ) ;
16009: LD_EXP 94
16013: PPUSH
16014: LD_STRING Brown
16016: PPUSH
16017: CALL_OW 38
// if lucy then
16021: LD_EXP 95
16025: IFFALSE 16039
// savecharacters ( lucy , Donaldson ) ;
16027: LD_EXP 95
16031: PPUSH
16032: LD_STRING Donaldson
16034: PPUSH
16035: CALL_OW 38
// if tim then
16039: LD_EXP 88
16043: IFFALSE 16057
// savecharacters ( tim , Gladstone ) ;
16045: LD_EXP 88
16049: PPUSH
16050: LD_STRING Gladstone
16052: PPUSH
16053: CALL_OW 38
// if denis then
16057: LD_EXP 89
16061: IFFALSE 16075
// savecharacters ( denis , Denis ) ;
16063: LD_EXP 89
16067: PPUSH
16068: LD_STRING Denis
16070: PPUSH
16071: CALL_OW 38
// if yamoko then
16075: LD_EXP 90
16079: IFFALSE 16093
// savecharacters ( yamoko , Yamoko ) ;
16081: LD_EXP 90
16085: PPUSH
16086: LD_STRING Yamoko
16088: PPUSH
16089: CALL_OW 38
// if gary then
16093: LD_EXP 91
16097: IFFALSE 16111
// savecharacters ( gary , Gary ) ;
16099: LD_EXP 91
16103: PPUSH
16104: LD_STRING Gary
16106: PPUSH
16107: CALL_OW 38
// if simms then
16111: LD_EXP 92
16115: IFFALSE 16129
// savecharacters ( simms , Simms ) ;
16117: LD_EXP 92
16121: PPUSH
16122: LD_STRING Simms
16124: PPUSH
16125: CALL_OW 38
// savecharacters ( gossud , Gossudarov ) ;
16129: LD_EXP 96
16133: PPUSH
16134: LD_STRING Gossudarov
16136: PPUSH
16137: CALL_OW 38
// savecharacters ( kiril , Kirilenkova ) ;
16141: LD_EXP 97
16145: PPUSH
16146: LD_STRING Kirilenkova
16148: PPUSH
16149: CALL_OW 38
// savecharacters ( jahoda , Belkov ) ;
16153: LD_EXP 98
16157: PPUSH
16158: LD_STRING Belkov
16160: PPUSH
16161: CALL_OW 38
// savecharacters ( burlak , Burlak ) ;
16165: LD_EXP 99
16169: PPUSH
16170: LD_STRING Burlak
16172: PPUSH
16173: CALL_OW 38
// savecharacters ( gnyevko , Gnyevko ) ;
16177: LD_EXP 101
16181: PPUSH
16182: LD_STRING Gnyevko
16184: PPUSH
16185: CALL_OW 38
// savecharacters ( dolgov , Dolgov ) ;
16189: LD_EXP 102
16193: PPUSH
16194: LD_STRING Dolgov
16196: PPUSH
16197: CALL_OW 38
// savecharacters ( kapitsova , Kapitsova ) ;
16201: LD_EXP 103
16205: PPUSH
16206: LD_STRING Kapitsova
16208: PPUSH
16209: CALL_OW 38
// savecharacters ( gleb , Gleb ) ;
16213: LD_EXP 104
16217: PPUSH
16218: LD_STRING Gleb
16220: PPUSH
16221: CALL_OW 38
// savecharacters ( kovalyuk , Kovalyuk ) ;
16225: LD_EXP 105
16229: PPUSH
16230: LD_STRING Kovalyuk
16232: PPUSH
16233: CALL_OW 38
// savecharacters ( scholtze , Scholtze ) ;
16237: LD_EXP 106
16241: PPUSH
16242: LD_STRING Scholtze
16244: PPUSH
16245: CALL_OW 38
// savecharacters ( titov , Titov ) ;
16249: LD_EXP 107
16253: PPUSH
16254: LD_STRING Titov
16256: PPUSH
16257: CALL_OW 38
// savecharacters ( oblukov , Oblukov ) ;
16261: LD_EXP 108
16265: PPUSH
16266: LD_STRING Oblukov
16268: PPUSH
16269: CALL_OW 38
// savecharacters ( bystrov , Bystrov ) ;
16273: LD_EXP 109
16277: PPUSH
16278: LD_STRING Bystrov
16280: PPUSH
16281: CALL_OW 38
// savecharacters ( lipshchin , Lipshchin ) ;
16285: LD_EXP 110
16289: PPUSH
16290: LD_STRING Lipshchin
16292: PPUSH
16293: CALL_OW 38
// savecharacters ( filterallunits ( [ [ f_alive ] , [ f_side , al ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) diff [ john , roth , joan , bobby , cyrus , lisa , frank , markc , tim , denis , yamoko , gary , simms , brown , lucy , gossud , kiril , jahoda , burlak ] , otherwithJMM ) ;
16297: LD_INT 51
16299: PUSH
16300: EMPTY
16301: LIST
16302: PUSH
16303: LD_INT 22
16305: PUSH
16306: LD_EXP 1
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 21
16317: PUSH
16318: LD_INT 1
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 3
16327: PUSH
16328: LD_INT 23
16330: PUSH
16331: LD_INT 0
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: PPUSH
16345: CALL_OW 69
16349: PUSH
16350: LD_EXP 80
16354: PUSH
16355: LD_EXP 81
16359: PUSH
16360: LD_EXP 82
16364: PUSH
16365: LD_EXP 83
16369: PUSH
16370: LD_EXP 84
16374: PUSH
16375: LD_EXP 85
16379: PUSH
16380: LD_EXP 86
16384: PUSH
16385: LD_EXP 87
16389: PUSH
16390: LD_EXP 88
16394: PUSH
16395: LD_EXP 89
16399: PUSH
16400: LD_EXP 90
16404: PUSH
16405: LD_EXP 91
16409: PUSH
16410: LD_EXP 92
16414: PUSH
16415: LD_EXP 94
16419: PUSH
16420: LD_EXP 95
16424: PUSH
16425: LD_EXP 96
16429: PUSH
16430: LD_EXP 97
16434: PUSH
16435: LD_EXP 98
16439: PUSH
16440: LD_EXP 99
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: DIFF
16466: PPUSH
16467: LD_STRING otherwithJMM
16469: PPUSH
16470: CALL_OW 38
// tmz = filterunitsinarea ( stred , [ [ f_side , al ] , f_not , [ f_nation , nation_arabian ] , [ f_btype , b_factory ] ] ) ;
16474: LD_ADDR_VAR 0 3
16478: PUSH
16479: LD_INT 2
16481: PPUSH
16482: LD_INT 22
16484: PUSH
16485: LD_EXP 1
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: LD_INT 3
16496: PUSH
16497: LD_INT 23
16499: PUSH
16500: LD_INT 2
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: PUSH
16507: LD_INT 30
16509: PUSH
16510: LD_INT 3
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: PPUSH
16523: CALL_OW 70
16527: ST_TO_ADDR
// tmz = tmz ^ filterunitsinarea ( stred , [ [ f_side , al ] , f_not , [ f_nation , nation_arabian ] , [ f_type , unit_building ] , f_not , [ f_btype , b_factory ] ] ) ;
16528: LD_ADDR_VAR 0 3
16532: PUSH
16533: LD_VAR 0 3
16537: PUSH
16538: LD_INT 2
16540: PPUSH
16541: LD_INT 22
16543: PUSH
16544: LD_EXP 1
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: LD_INT 3
16555: PUSH
16556: LD_INT 23
16558: PUSH
16559: LD_INT 2
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: PUSH
16566: LD_INT 21
16568: PUSH
16569: LD_INT 3
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: LD_INT 3
16578: PUSH
16579: LD_INT 30
16581: PUSH
16582: LD_INT 3
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: PPUSH
16597: CALL_OW 70
16601: ADD
16602: ST_TO_ADDR
// tmzo = [ ] ;
16603: LD_ADDR_VAR 0 4
16607: PUSH
16608: EMPTY
16609: ST_TO_ADDR
// for bz in tmz do
16610: LD_ADDR_VAR 0 2
16614: PUSH
16615: LD_VAR 0 3
16619: PUSH
16620: FOR_IN
16621: IFFALSE 17008
// case getbtype ( bz ) of b_lab_basic , b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_biological , b_lab_spacetime , b_lab_opto :
16623: LD_VAR 0 2
16627: PPUSH
16628: CALL_OW 266
16632: PUSH
16633: LD_INT 9
16635: DOUBLE
16636: EQUAL
16637: IFTRUE 16677
16639: LD_INT 10
16641: DOUBLE
16642: EQUAL
16643: IFTRUE 16677
16645: LD_INT 11
16647: DOUBLE
16648: EQUAL
16649: IFTRUE 16677
16651: LD_INT 12
16653: DOUBLE
16654: EQUAL
16655: IFTRUE 16677
16657: LD_INT 13
16659: DOUBLE
16660: EQUAL
16661: IFTRUE 16677
16663: LD_INT 14
16665: DOUBLE
16666: EQUAL
16667: IFTRUE 16677
16669: LD_INT 15
16671: DOUBLE
16672: EQUAL
16673: IFTRUE 16677
16675: GO 16680
16677: POP
// begin end ; b_lab , b_lab_half , b_lab_full :
16678: GO 17006
16680: LD_INT 6
16682: DOUBLE
16683: EQUAL
16684: IFTRUE 16700
16686: LD_INT 7
16688: DOUBLE
16689: EQUAL
16690: IFTRUE 16700
16692: LD_INT 8
16694: DOUBLE
16695: EQUAL
16696: IFTRUE 16700
16698: GO 16813
16700: POP
// tmzo = tmzo ^ [ [ getx ( bz ) , gety ( bz ) , getdir ( bz ) , getbtype ( bz ) , getblevel ( bz ) , getnation ( bz ) , getlabkind ( bz , 1 ) , getlabkind ( bz , 2 ) ] ] ; b_bunker , b_turret :
16701: LD_ADDR_VAR 0 4
16705: PUSH
16706: LD_VAR 0 4
16710: PUSH
16711: LD_VAR 0 2
16715: PPUSH
16716: CALL_OW 250
16720: PUSH
16721: LD_VAR 0 2
16725: PPUSH
16726: CALL_OW 251
16730: PUSH
16731: LD_VAR 0 2
16735: PPUSH
16736: CALL_OW 254
16740: PUSH
16741: LD_VAR 0 2
16745: PPUSH
16746: CALL_OW 266
16750: PUSH
16751: LD_VAR 0 2
16755: PPUSH
16756: CALL_OW 267
16760: PUSH
16761: LD_VAR 0 2
16765: PPUSH
16766: CALL_OW 248
16770: PUSH
16771: LD_VAR 0 2
16775: PPUSH
16776: LD_INT 1
16778: PPUSH
16779: CALL_OW 268
16783: PUSH
16784: LD_VAR 0 2
16788: PPUSH
16789: LD_INT 2
16791: PPUSH
16792: CALL_OW 268
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: PUSH
16807: EMPTY
16808: LIST
16809: ADD
16810: ST_TO_ADDR
16811: GO 17006
16813: LD_INT 32
16815: DOUBLE
16816: EQUAL
16817: IFTRUE 16827
16819: LD_INT 33
16821: DOUBLE
16822: EQUAL
16823: IFTRUE 16827
16825: GO 16923
16827: POP
// tmzo = tmzo ^ [ [ getx ( bz ) , gety ( bz ) , getdir ( bz ) , getbtype ( bz ) , getblevel ( bz ) , getnation ( bz ) , getbweapon ( bz ) ] ] ; else
16828: LD_ADDR_VAR 0 4
16832: PUSH
16833: LD_VAR 0 4
16837: PUSH
16838: LD_VAR 0 2
16842: PPUSH
16843: CALL_OW 250
16847: PUSH
16848: LD_VAR 0 2
16852: PPUSH
16853: CALL_OW 251
16857: PUSH
16858: LD_VAR 0 2
16862: PPUSH
16863: CALL_OW 254
16867: PUSH
16868: LD_VAR 0 2
16872: PPUSH
16873: CALL_OW 266
16877: PUSH
16878: LD_VAR 0 2
16882: PPUSH
16883: CALL_OW 267
16887: PUSH
16888: LD_VAR 0 2
16892: PPUSH
16893: CALL_OW 248
16897: PUSH
16898: LD_VAR 0 2
16902: PPUSH
16903: CALL_OW 269
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: PUSH
16917: EMPTY
16918: LIST
16919: ADD
16920: ST_TO_ADDR
16921: GO 17006
16923: POP
// tmzo = tmzo ^ [ [ getx ( bz ) , gety ( bz ) , getdir ( bz ) , getbtype ( bz ) , getblevel ( bz ) , getnation ( bz ) ] ] ; end ;
16924: LD_ADDR_VAR 0 4
16928: PUSH
16929: LD_VAR 0 4
16933: PUSH
16934: LD_VAR 0 2
16938: PPUSH
16939: CALL_OW 250
16943: PUSH
16944: LD_VAR 0 2
16948: PPUSH
16949: CALL_OW 251
16953: PUSH
16954: LD_VAR 0 2
16958: PPUSH
16959: CALL_OW 254
16963: PUSH
16964: LD_VAR 0 2
16968: PPUSH
16969: CALL_OW 266
16973: PUSH
16974: LD_VAR 0 2
16978: PPUSH
16979: CALL_OW 267
16983: PUSH
16984: LD_VAR 0 2
16988: PPUSH
16989: CALL_OW 248
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: PUSH
17002: EMPTY
17003: LIST
17004: ADD
17005: ST_TO_ADDR
17006: GO 16620
17008: POP
17009: POP
// savevariable ( tmzo , Freedom ) ;
17010: LD_VAR 0 4
17014: PPUSH
17015: LD_STRING Freedom
17017: PPUSH
17018: CALL_OW 39
// end ; end_of_file
17022: LD_VAR 0 1
17026: RET
// every 0 0$2 + 0 0$0.1 do
17027: GO 17029
17029: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) > FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_not , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) then
17030: LD_INT 22
17032: PUSH
17033: LD_INT 7
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PUSH
17040: LD_INT 2
17042: PUSH
17043: LD_INT 25
17045: PUSH
17046: LD_INT 12
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 25
17055: PUSH
17056: LD_INT 16
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: LD_INT 25
17065: PUSH
17066: LD_INT 15
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 25
17075: PUSH
17076: LD_INT 17
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PPUSH
17094: CALL_OW 69
17098: PUSH
17099: LD_INT 22
17101: PUSH
17102: LD_INT 7
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 21
17111: PUSH
17112: LD_INT 1
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 3
17121: PUSH
17122: LD_INT 2
17124: PUSH
17125: LD_INT 25
17127: PUSH
17128: LD_INT 12
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: LD_INT 25
17137: PUSH
17138: LD_INT 16
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: LD_INT 25
17147: PUSH
17148: LD_INT 15
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 25
17157: PUSH
17158: LD_INT 17
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: LIST
17180: PPUSH
17181: CALL_OW 69
17185: GREATER
17186: IFFALSE 17197
// begin SetAchievement ( ACH_POTA ) ;
17188: LD_STRING ACH_POTA
17190: PPUSH
17191: CALL_OW 543
// exit ;
17195: GO 17198
// end ; enable ;
17197: ENABLE
// end ; end_of_file
17198: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
17199: LD_INT 0
17201: PPUSH
17202: PPUSH
// if not missionNumber then
17203: LD_VAR 0 2
17207: NOT
17208: IFFALSE 17212
// exit ;
17210: GO 17342
// achiv := false ;
17212: LD_ADDR_VAR 0 7
17216: PUSH
17217: LD_INT 0
17219: ST_TO_ADDR
// case campaignNumber of 1 :
17220: LD_VAR 0 1
17224: PUSH
17225: LD_INT 1
17227: DOUBLE
17228: EQUAL
17229: IFTRUE 17233
17231: GO 17244
17233: POP
// achiv := ACH_GOTA ; 2 :
17234: LD_ADDR_VAR 0 7
17238: PUSH
17239: LD_STRING ACH_GOTA
17241: ST_TO_ADDR
17242: GO 17294
17244: LD_INT 2
17246: DOUBLE
17247: EQUAL
17248: IFTRUE 17252
17250: GO 17255
17252: POP
// ; 3 :
17253: GO 17294
17255: LD_INT 3
17257: DOUBLE
17258: EQUAL
17259: IFTRUE 17263
17261: GO 17274
17263: POP
// achiv := ACH_MOTSU ; 4 :
17264: LD_ADDR_VAR 0 7
17268: PUSH
17269: LD_STRING ACH_MOTSU
17271: ST_TO_ADDR
17272: GO 17294
17274: LD_INT 4
17276: DOUBLE
17277: EQUAL
17278: IFTRUE 17282
17280: GO 17293
17282: POP
// achiv := ACH_LOP ; end ;
17283: LD_ADDR_VAR 0 7
17287: PUSH
17288: LD_STRING ACH_LOP
17290: ST_TO_ADDR
17291: GO 17294
17293: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
17294: LD_OWVAR 67
17298: PUSH
17299: LD_INT 3
17301: EQUAL
17302: PUSH
17303: LD_VAR 0 7
17307: AND
17308: PUSH
17309: LD_VAR 0 3
17313: AND
17314: PUSH
17315: LD_VAR 0 4
17319: AND
17320: PUSH
17321: LD_VAR 0 5
17325: AND
17326: IFFALSE 17342
// SetAchievementEX ( achiv , missionNumber ) ;
17328: LD_VAR 0 7
17332: PPUSH
17333: LD_VAR 0 2
17337: PPUSH
17338: CALL_OW 564
// end ;
17342: LD_VAR 0 6
17346: RET
// export function SA_BehemothConstructed ; begin
17347: LD_INT 0
17349: PPUSH
// SetAchievement ( ACH_SMC ) ;
17350: LD_STRING ACH_SMC
17352: PPUSH
17353: CALL_OW 543
// end ;
17357: LD_VAR 0 1
17361: RET
