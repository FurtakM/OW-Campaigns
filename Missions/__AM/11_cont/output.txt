// export You , You2 , Arabi , Arabi2 ; export mregistry1 , MD1 ; export mregistry2 , MD2 ; export mission_ended ; starting begin RandomizeAll ;
   0: CALL_OW 11
// Randomize ;
   4: CALL_OW 10
// debug_strings := [ ] ;
   8: LD_ADDR_OWVAR 48
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// cas = [ 0 , : , 0 ] ;
  15: LD_ADDR_EXP 59
  19: PUSH
  20: LD_INT 0
  22: PUSH
  23: LD_STRING :
  25: PUSH
  26: LD_INT 0
  28: PUSH
  29: EMPTY
  30: LIST
  31: LIST
  32: LIST
  33: ST_TO_ADDR
// InitUc ;
  34: CALL_OW 18
// InitHc ;
  38: CALL_OW 19
// InitVc ;
  42: CALL_OW 20
// mission_ended := false ;
  46: LD_ADDR_EXP 9
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// You := 1 ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// You2 := 4 ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 4
  69: ST_TO_ADDR
// Arabi := 2 ;
  70: LD_ADDR_EXP 3
  74: PUSH
  75: LD_INT 2
  77: ST_TO_ADDR
// Arabi2 := 5 ;
  78: LD_ADDR_EXP 4
  82: PUSH
  83: LD_INT 5
  85: ST_TO_ADDR
// SetBName ( A1_dep , dammam ) ;
  86: LD_INT 4
  88: PPUSH
  89: LD_STRING dammam
  91: PPUSH
  92: CALL_OW 500
// SetBName ( A2_dep , jeddah ) ;
  96: LD_INT 46
  98: PPUSH
  99: LD_STRING jeddah
 101: PPUSH
 102: CALL_OW 500
// SetBName ( A3_dep , riyadh ) ;
 106: LD_INT 28
 108: PPUSH
 109: LD_STRING riyadh
 111: PPUSH
 112: CALL_OW 500
// disable ( 80 ) ;
 116: LD_INT 80
 118: DISABLE_MARKED
// SET_DIFFICULTY ;
 119: CALL 25370 0 0
// load_postavy ;
 123: CALL 1824 0 0
// dodej_skily ;
 127: CALL 8722 0 0
// mregistry1 = McRegistry ( Arabi , [ [ mc_reg_area_to_guard , MD1_guard ] , [ mc_reg_area_to_protect , MD1_protect ] , [ mc_reg_expire_stops_to_attack , 0 0$5 ] ] ) ;
 131: LD_ADDR_EXP 5
 135: PUSH
 136: LD_EXP 3
 140: PPUSH
 141: LD_INT 2
 143: PUSH
 144: LD_INT 27
 146: PUSH
 147: EMPTY
 148: LIST
 149: LIST
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 28
 156: PUSH
 157: EMPTY
 158: LIST
 159: LIST
 160: PUSH
 161: LD_INT 5
 163: PUSH
 164: LD_INT 175
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: LIST
 175: PPUSH
 176: CALL_OW 399
 180: ST_TO_ADDR
// mregistry2 = McRegistry ( Arabi , [ [ mc_reg_area_to_guard , MD2_guard ] , [ mc_reg_area_to_protect , MD2_protect ] , [ mc_reg_expire_stops_to_attack , 0 0$5 ] ] ) ;
 181: LD_ADDR_EXP 7
 185: PUSH
 186: LD_EXP 3
 190: PPUSH
 191: LD_INT 2
 193: PUSH
 194: LD_INT 32
 196: PUSH
 197: EMPTY
 198: LIST
 199: LIST
 200: PUSH
 201: LD_INT 3
 203: PUSH
 204: LD_INT 33
 206: PUSH
 207: EMPTY
 208: LIST
 209: LIST
 210: PUSH
 211: LD_INT 5
 213: PUSH
 214: LD_INT 175
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: LIST
 225: PPUSH
 226: CALL_OW 399
 230: ST_TO_ADDR
// MD1 = McDefend ( 2 , mregistry1 , [ A2_dep , A2_lab , A2_bar , A2_tov , A2_nau1 , A2_bu2 , A2_nau2 , MDopka1 , MDopka2 , A2_bu3 ] , [ [ mc_area_dont_leave , MD1_guard ] ] ) ;
 231: LD_ADDR_EXP 6
 235: PUSH
 236: LD_INT 2
 238: PPUSH
 239: LD_EXP 5
 243: PPUSH
 244: LD_INT 46
 246: PUSH
 247: LD_INT 61
 249: PUSH
 250: LD_INT 48
 252: PUSH
 253: LD_INT 50
 255: PUSH
 256: LD_INT 107
 258: PUSH
 259: LD_INT 63
 261: PUSH
 262: LD_INT 108
 264: PUSH
 265: LD_INT 117
 267: PUSH
 268: LD_INT 116
 270: PUSH
 271: LD_INT 47
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: PPUSH
 286: LD_INT 2
 288: PUSH
 289: LD_INT 27
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: PPUSH
 299: CALL_OW 401
 303: ST_TO_ADDR
// MD1 = McDefend ( 1 , mregistry2 , [ A2_dep , A2_lab , A2_bar , A2_tov , A2_nau1 , A2_bu3 , A2_bu6 , A2_bu5 , A2_nau2 , MDopka1 , MDopka2 ] , [ [ mc_area_dont_leave , MD2_guard ] ] ) ;
 304: LD_ADDR_EXP 6
 308: PUSH
 309: LD_INT 1
 311: PPUSH
 312: LD_EXP 7
 316: PPUSH
 317: LD_INT 46
 319: PUSH
 320: LD_INT 61
 322: PUSH
 323: LD_INT 48
 325: PUSH
 326: LD_INT 50
 328: PUSH
 329: LD_INT 107
 331: PUSH
 332: LD_INT 47
 334: PUSH
 335: LD_INT 59
 337: PUSH
 338: LD_INT 62
 340: PUSH
 341: LD_INT 108
 343: PUSH
 344: LD_INT 117
 346: PUSH
 347: LD_INT 116
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: LIST
 354: LIST
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: PPUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 32
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: PUSH
 373: EMPTY
 374: LIST
 375: PPUSH
 376: CALL_OW 401
 380: ST_TO_ADDR
// A1_dobyta = false ;
 381: LD_ADDR_EXP 28
 385: PUSH
 386: LD_INT 0
 388: ST_TO_ADDR
// A2_dobyta = false ;
 389: LD_ADDR_EXP 29
 393: PUSH
 394: LD_INT 0
 396: ST_TO_ADDR
// A3_dobyta = false ;
 397: LD_ADDR_EXP 30
 401: PUSH
 402: LD_INT 0
 404: ST_TO_ADDR
// vojcli_base_2 ;
 405: CALL 9287 0 0
// vojcli_base_3 ;
 409: CALL 9985 0 0
// InGameOn ;
 413: CALL_OW 8
// Odebirani = false ;
 417: LD_ADDR_EXP 45
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// Pruzkumnik := false ;
 425: LD_ADDR_EXP 31
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// oposoldier := 0 ;
 433: LD_ADDR_EXP 46
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// choose_vojaky ;
 441: CALL 11264 0 0
// create_amici ;
 445: CALL 8129 0 0
// uklid_arabu ;
 449: CALL 17539 0 0
// create_ar_protiofenzivu ;
 453: CALL 8258 0 0
// create_arabske_utoky_behem_mise ;
 457: CALL 12667 0 0
// end ;
 461: END
// export function end_of_mission_time ; begin
 462: LD_INT 0
 464: PPUSH
// YouLost ( Command ) ;
 465: LD_STRING Command
 467: PPUSH
 468: CALL_OW 104
// end ;
 472: LD_VAR 0 1
 476: RET
// on UnitDestroyed ( un ) do begin if un = JMM then
 477: LD_VAR 0 1
 481: PUSH
 482: LD_EXP 32
 486: EQUAL
 487: IFFALSE 496
// YouLost ( JMM ) ;
 489: LD_STRING JMM
 491: PPUSH
 492: CALL_OW 104
// enable ;
 496: ENABLE
// end ;
 497: PPOPN 1
 499: END
// on EndTheMissionRaised ( void ) do begin konec_mise ;
 500: CALL 669 0 0
// end ;
 504: PPOPN 1
 506: END
// every 0 0$2 trigger not mission_ended and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do var i , cargos ;
 507: LD_EXP 9
 511: NOT
 512: PUSH
 513: LD_INT 22
 515: PUSH
 516: LD_INT 2
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: LD_INT 30
 528: PUSH
 529: LD_INT 0
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PUSH
 536: LD_INT 30
 538: PUSH
 539: LD_INT 1
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: LIST
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PPUSH
 555: CALL_OW 69
 559: PUSH
 560: LD_INT 0
 562: EQUAL
 563: AND
 564: IFFALSE 666
 566: GO 568
 568: DISABLE
 569: LD_INT 0
 571: PPUSH
 572: PPUSH
// begin enable ;
 573: ENABLE
// cargos := FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
 574: LD_ADDR_VAR 0 2
 578: PUSH
 579: LD_INT 22
 581: PUSH
 582: LD_EXP 1
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PUSH
 591: LD_INT 2
 593: PUSH
 594: LD_INT 34
 596: PUSH
 597: LD_INT 12
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: PUSH
 604: LD_INT 34
 606: PUSH
 607: LD_INT 32
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: PUSH
 614: EMPTY
 615: LIST
 616: LIST
 617: LIST
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: PPUSH
 623: CALL_OW 69
 627: ST_TO_ADDR
// for i in cargos do
 628: LD_ADDR_VAR 0 1
 632: PUSH
 633: LD_VAR 0 2
 637: PUSH
 638: FOR_IN
 639: IFFALSE 664
// if GetCargo ( i , mat_artefact ) then
 641: LD_VAR 0 1
 645: PPUSH
 646: LD_INT 4
 648: PPUSH
 649: CALL_OW 289
 653: IFFALSE 662
// begin konec_mise ;
 655: CALL 669 0 0
// disable ;
 659: DISABLE
// break ;
 660: GO 664
// end ;
 662: GO 638
 664: POP
 665: POP
// end ;
 666: PPOPN 2
 668: END
// export function konec_mise ; var pommedaile ; var pomauta ; var i , pom , pom1 , pom2 ; var art ; var VIPka ; var all_units_1 , medal1 , medal2 , medal3 ; begin
 669: LD_INT 0
 671: PPUSH
 672: PPUSH
 673: PPUSH
 674: PPUSH
 675: PPUSH
 676: PPUSH
 677: PPUSH
 678: PPUSH
 679: PPUSH
 680: PPUSH
 681: PPUSH
 682: PPUSH
 683: PPUSH
// if mission_ended then
 684: LD_EXP 9
 688: IFFALSE 692
// exit ;
 690: GO 1819
// medal1 := false ;
 692: LD_ADDR_VAR 0 11
 696: PUSH
 697: LD_INT 0
 699: ST_TO_ADDR
// medal2 := false ;
 700: LD_ADDR_VAR 0 12
 704: PUSH
 705: LD_INT 0
 707: ST_TO_ADDR
// medal3 := false ;
 708: LD_ADDR_VAR 0 13
 712: PUSH
 713: LD_INT 0
 715: ST_TO_ADDR
// mission_ended := true ;
 716: LD_ADDR_EXP 9
 720: PUSH
 721: LD_INT 1
 723: ST_TO_ADDR
// DisableExclamations ;
 724: CALL_OW 474
// gained_medals := [ ] ;
 728: LD_ADDR_OWVAR 61
 732: PUSH
 733: EMPTY
 734: ST_TO_ADDR
// missing_medals := [ ] ;
 735: LD_ADDR_OWVAR 62
 739: PUSH
 740: EMPTY
 741: ST_TO_ADDR
// if Timecounter <= medaile1 [ difficulty ] then
 742: LD_EXP 58
 746: PUSH
 747: LD_EXP 56
 751: PUSH
 752: LD_OWVAR 67
 756: ARRAY
 757: LESSEQUAL
 758: IFFALSE 788
// begin AddMedal ( Time1 , 1 ) ;
 760: LD_STRING Time1
 762: PPUSH
 763: LD_INT 1
 765: PPUSH
 766: CALL_OW 101
// pommedaile = true ;
 770: LD_ADDR_VAR 0 2
 774: PUSH
 775: LD_INT 1
 777: ST_TO_ADDR
// medal1 := true ;
 778: LD_ADDR_VAR 0 11
 782: PUSH
 783: LD_INT 1
 785: ST_TO_ADDR
// end else
 786: GO 807
// begin AddMedal ( Time1 , - 1 ) ;
 788: LD_STRING Time1
 790: PPUSH
 791: LD_INT 1
 793: NEG
 794: PPUSH
 795: CALL_OW 101
// pommedaile = false ;
 799: LD_ADDR_VAR 0 2
 803: PUSH
 804: LD_INT 0
 806: ST_TO_ADDR
// end ; if Timecounter <= medaile2 [ difficulty ] then
 807: LD_EXP 58
 811: PUSH
 812: LD_EXP 57
 816: PUSH
 817: LD_OWVAR 67
 821: ARRAY
 822: LESSEQUAL
 823: IFFALSE 845
// begin AddMedal ( Time2 , 1 ) ;
 825: LD_STRING Time2
 827: PPUSH
 828: LD_INT 1
 830: PPUSH
 831: CALL_OW 101
// medal2 := true ;
 835: LD_ADDR_VAR 0 12
 839: PUSH
 840: LD_INT 1
 842: ST_TO_ADDR
// end else
 843: GO 875
// if pommedaile then
 845: LD_VAR 0 2
 849: IFFALSE 864
// AddMedal ( Time2 , - 1 ) else
 851: LD_STRING Time2
 853: PPUSH
 854: LD_INT 1
 856: NEG
 857: PPUSH
 858: CALL_OW 101
 862: GO 875
// AddMedal ( Time2 , - 2 ) ;
 864: LD_STRING Time2
 866: PPUSH
 867: LD_INT 2
 869: NEG
 870: PPUSH
 871: CALL_OW 101
// pomauta = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
 875: LD_ADDR_VAR 0 3
 879: PUSH
 880: LD_INT 22
 882: PUSH
 883: LD_EXP 1
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: PUSH
 892: LD_INT 2
 894: PUSH
 895: LD_INT 34
 897: PUSH
 898: LD_INT 12
 900: PUSH
 901: EMPTY
 902: LIST
 903: LIST
 904: PUSH
 905: LD_INT 34
 907: PUSH
 908: LD_INT 32
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: LIST
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PPUSH
 924: CALL_OW 69
 928: ST_TO_ADDR
// art = false ;
 929: LD_ADDR_VAR 0 8
 933: PUSH
 934: LD_INT 0
 936: ST_TO_ADDR
// for i in pomauta do
 937: LD_ADDR_VAR 0 4
 941: PUSH
 942: LD_VAR 0 3
 946: PUSH
 947: FOR_IN
 948: IFFALSE 978
// if GetCargo ( i , mat_artefact ) > 0 then
 950: LD_VAR 0 4
 954: PPUSH
 955: LD_INT 4
 957: PPUSH
 958: CALL_OW 289
 962: PUSH
 963: LD_INT 0
 965: GREATER
 966: IFFALSE 976
// art = true ;
 968: LD_ADDR_VAR 0 8
 972: PUSH
 973: LD_INT 1
 975: ST_TO_ADDR
 976: GO 947
 978: POP
 979: POP
// if art then
 980: LD_VAR 0 8
 984: IFFALSE 1006
// begin medal3 := true ;
 986: LD_ADDR_VAR 0 13
 990: PUSH
 991: LD_INT 1
 993: ST_TO_ADDR
// AddMedal ( Artefact , 1 ) ;
 994: LD_STRING Artefact
 996: PPUSH
 997: LD_INT 1
 999: PPUSH
1000: CALL_OW 101
// end else
1004: GO 1017
// AddMedal ( Artefact , - 1 ) ;
1006: LD_STRING Artefact
1008: PPUSH
1009: LD_INT 1
1011: NEG
1012: PPUSH
1013: CALL_OW 101
// SA_EndMission ( 1 , 11 , medal1 , medal2 , medal3 ) ;
1017: LD_INT 1
1019: PPUSH
1020: LD_INT 11
1022: PPUSH
1023: LD_VAR 0 11
1027: PPUSH
1028: LD_VAR 0 12
1032: PPUSH
1033: LD_VAR 0 13
1037: PPUSH
1038: CALL 25862 0 5
// GiveMedals ( Main ) ;
1042: LD_STRING Main
1044: PPUSH
1045: CALL_OW 102
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
1049: LD_ADDR_VAR 0 5
1053: PUSH
1054: LD_INT 22
1056: PUSH
1057: LD_EXP 1
1061: PUSH
1062: EMPTY
1063: LIST
1064: LIST
1065: PUSH
1066: LD_INT 21
1068: PUSH
1069: LD_INT 1
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: PPUSH
1080: CALL_OW 69
1084: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) do
1085: LD_ADDR_VAR 0 4
1089: PUSH
1090: LD_INT 22
1092: PUSH
1093: LD_EXP 1
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: PUSH
1102: LD_INT 21
1104: PUSH
1105: LD_INT 2
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PPUSH
1116: CALL_OW 69
1120: PUSH
1121: FOR_IN
1122: IFFALSE 1170
// begin pom1 = IsDrivenBy ( i ) ;
1124: LD_ADDR_VAR 0 6
1128: PUSH
1129: LD_VAR 0 4
1133: PPUSH
1134: CALL_OW 311
1138: ST_TO_ADDR
// if not ( pom1 in pom ) then
1139: LD_VAR 0 6
1143: PUSH
1144: LD_VAR 0 5
1148: IN
1149: NOT
1150: IFFALSE 1168
// pom = pom ^ pom1 ;
1152: LD_ADDR_VAR 0 5
1156: PUSH
1157: LD_VAR 0 5
1161: PUSH
1162: LD_VAR 0 6
1166: ADD
1167: ST_TO_ADDR
// end ;
1168: GO 1121
1170: POP
1171: POP
// all_units_1 = pom ;
1172: LD_ADDR_VAR 0 10
1176: PUSH
1177: LD_VAR 0 5
1181: ST_TO_ADDR
// all_units_1 = all_units_1 diff UnitFilter ( all_units_1 , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) ;
1182: LD_ADDR_VAR 0 10
1186: PUSH
1187: LD_VAR 0 10
1191: PUSH
1192: LD_VAR 0 10
1196: PPUSH
1197: LD_INT 2
1199: PUSH
1200: LD_INT 25
1202: PUSH
1203: LD_INT 12
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: PUSH
1210: LD_INT 25
1212: PUSH
1213: LD_INT 16
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 72
1229: DIFF
1230: ST_TO_ADDR
// RewardPeople ( all_units_1 ) ;
1231: LD_VAR 0 10
1235: PPUSH
1236: CALL_OW 43
// VIPka = [ JMM , Frank , Powell , Gary , Bobby , Yamoko , Cyrus , Cornel , Lisa , Don , Brown ] ;
1240: LD_ADDR_VAR 0 9
1244: PUSH
1245: LD_EXP 32
1249: PUSH
1250: LD_EXP 36
1254: PUSH
1255: LD_EXP 33
1259: PUSH
1260: LD_EXP 34
1264: PUSH
1265: LD_EXP 35
1269: PUSH
1270: LD_EXP 39
1274: PUSH
1275: LD_EXP 40
1279: PUSH
1280: LD_EXP 38
1284: PUSH
1285: LD_EXP 37
1289: PUSH
1290: LD_EXP 41
1294: PUSH
1295: LD_EXP 42
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: ST_TO_ADDR
// SaveCharacters ( JMM , JMM ) ;
1313: LD_EXP 32
1317: PPUSH
1318: LD_STRING JMM
1320: PPUSH
1321: CALL_OW 38
// SaveCharacters ( Cyrus , Cyrus ) ;
1325: LD_EXP 40
1329: PPUSH
1330: LD_STRING Cyrus
1332: PPUSH
1333: CALL_OW 38
// if Cyrus in Amici_enter then
1337: LD_EXP 40
1341: PUSH
1342: LD_EXP 43
1346: IN
1347: IFFALSE 1361
// SaveVariable ( 6 , CyrusLoc ) else
1349: LD_INT 6
1351: PPUSH
1352: LD_STRING CyrusLoc
1354: PPUSH
1355: CALL_OW 39
1359: GO 1371
// SaveVariable ( 7 , CyrusLoc ) ;
1361: LD_INT 7
1363: PPUSH
1364: LD_STRING CyrusLoc
1366: PPUSH
1367: CALL_OW 39
// SaveCharacters ( Gary , Gary ) ;
1371: LD_EXP 34
1375: PPUSH
1376: LD_STRING Gary
1378: PPUSH
1379: CALL_OW 38
// if Gary in Amici_enter then
1383: LD_EXP 34
1387: PUSH
1388: LD_EXP 43
1392: IN
1393: IFFALSE 1407
// SaveVariable ( 6 , GaryLoc ) else
1395: LD_INT 6
1397: PPUSH
1398: LD_STRING GaryLoc
1400: PPUSH
1401: CALL_OW 39
1405: GO 1417
// SaveVariable ( 7 , GaryLoc ) ;
1407: LD_INT 7
1409: PPUSH
1410: LD_STRING GaryLoc
1412: PPUSH
1413: CALL_OW 39
// SaveCharacters ( Cornel , Cornell ) ;
1417: LD_EXP 38
1421: PPUSH
1422: LD_STRING Cornell
1424: PPUSH
1425: CALL_OW 38
// if Cornel in Amici_enter then
1429: LD_EXP 38
1433: PUSH
1434: LD_EXP 43
1438: IN
1439: IFFALSE 1453
// SaveVariable ( 6 , CornellLoc ) else
1441: LD_INT 6
1443: PPUSH
1444: LD_STRING CornellLoc
1446: PPUSH
1447: CALL_OW 39
1451: GO 1463
// SaveVariable ( 7 , CornellLoc ) ;
1453: LD_INT 7
1455: PPUSH
1456: LD_STRING CornellLoc
1458: PPUSH
1459: CALL_OW 39
// SaveCharacters ( Frank , Frank ) ;
1463: LD_EXP 36
1467: PPUSH
1468: LD_STRING Frank
1470: PPUSH
1471: CALL_OW 38
// if Frank in Amici_enter then
1475: LD_EXP 36
1479: PUSH
1480: LD_EXP 43
1484: IN
1485: IFFALSE 1499
// SaveVariable ( 6 , FrankLoc ) else
1487: LD_INT 6
1489: PPUSH
1490: LD_STRING FrankLoc
1492: PPUSH
1493: CALL_OW 39
1497: GO 1509
// SaveVariable ( 7 , FrankLoc ) ;
1499: LD_INT 7
1501: PPUSH
1502: LD_STRING FrankLoc
1504: PPUSH
1505: CALL_OW 39
// SaveCharacters ( Bobby , Bobby ) ;
1509: LD_EXP 35
1513: PPUSH
1514: LD_STRING Bobby
1516: PPUSH
1517: CALL_OW 38
// if Bobby in Amici_enter then
1521: LD_EXP 35
1525: PUSH
1526: LD_EXP 43
1530: IN
1531: IFFALSE 1545
// SaveVariable ( 6 , BobbyLoc ) else
1533: LD_INT 6
1535: PPUSH
1536: LD_STRING BobbyLoc
1538: PPUSH
1539: CALL_OW 39
1543: GO 1555
// SaveVariable ( 7 , BobbyLoc ) ;
1545: LD_INT 7
1547: PPUSH
1548: LD_STRING BobbyLoc
1550: PPUSH
1551: CALL_OW 39
// SaveCharacters ( Yamoko , Yamoko ) ;
1555: LD_EXP 39
1559: PPUSH
1560: LD_STRING Yamoko
1562: PPUSH
1563: CALL_OW 38
// if Yamoko in Amici_enter then
1567: LD_EXP 39
1571: PUSH
1572: LD_EXP 43
1576: IN
1577: IFFALSE 1591
// SaveVariable ( 6 , YamokoLoc ) else
1579: LD_INT 6
1581: PPUSH
1582: LD_STRING YamokoLoc
1584: PPUSH
1585: CALL_OW 39
1589: GO 1601
// SaveVariable ( 7 , YamokoLoc ) ;
1591: LD_INT 7
1593: PPUSH
1594: LD_STRING YamokoLoc
1596: PPUSH
1597: CALL_OW 39
// SaveCharacters ( Don , Donaldson ) ;
1601: LD_EXP 41
1605: PPUSH
1606: LD_STRING Donaldson
1608: PPUSH
1609: CALL_OW 38
// if Don in Amici_enter then
1613: LD_EXP 41
1617: PUSH
1618: LD_EXP 43
1622: IN
1623: IFFALSE 1637
// SaveVariable ( 6 , DonaldsonLoc ) else
1625: LD_INT 6
1627: PPUSH
1628: LD_STRING DonaldsonLoc
1630: PPUSH
1631: CALL_OW 39
1635: GO 1647
// SaveVariable ( 7 , DonaldsonLoc ) ;
1637: LD_INT 7
1639: PPUSH
1640: LD_STRING DonaldsonLoc
1642: PPUSH
1643: CALL_OW 39
// SaveCharacters ( Brown , Brown ) ;
1647: LD_EXP 42
1651: PPUSH
1652: LD_STRING Brown
1654: PPUSH
1655: CALL_OW 38
// if Brown in Amici_enter then
1659: LD_EXP 42
1663: PUSH
1664: LD_EXP 43
1668: IN
1669: IFFALSE 1683
// SaveVariable ( 6 , BrownLoc ) else
1671: LD_INT 6
1673: PPUSH
1674: LD_STRING BrownLoc
1676: PPUSH
1677: CALL_OW 39
1681: GO 1693
// SaveVariable ( 7 , BrownLoc ) ;
1683: LD_INT 7
1685: PPUSH
1686: LD_STRING BrownLoc
1688: PPUSH
1689: CALL_OW 39
// SaveCharacters ( Lisa , Lisa ) ;
1693: LD_EXP 37
1697: PPUSH
1698: LD_STRING Lisa
1700: PPUSH
1701: CALL_OW 38
// if Lisa in Amici_enter then
1705: LD_EXP 37
1709: PUSH
1710: LD_EXP 43
1714: IN
1715: IFFALSE 1729
// SaveVariable ( 6 , LisaLoc ) else
1717: LD_INT 6
1719: PPUSH
1720: LD_STRING LisaLoc
1722: PPUSH
1723: CALL_OW 39
1727: GO 1739
// SaveVariable ( 7 , LiasLoc ) ;
1729: LD_INT 7
1731: PPUSH
1732: LD_STRING LiasLoc
1734: PPUSH
1735: CALL_OW 39
// pom1 = lidi_other diff Amici_enter ;
1739: LD_ADDR_VAR 0 6
1743: PUSH
1744: LD_EXP 52
1748: PUSH
1749: LD_EXP 43
1753: DIFF
1754: ST_TO_ADDR
// pom2 = all_units_1 diff VIPka ;
1755: LD_ADDR_VAR 0 7
1759: PUSH
1760: LD_VAR 0 10
1764: PUSH
1765: LD_VAR 0 9
1769: DIFF
1770: ST_TO_ADDR
// DeleteCharacters ( other_survivors ) ;
1771: LD_STRING other_survivors
1773: PPUSH
1774: CALL_OW 40
// DeleteCharacters ( otherGamma2 ) ;
1778: LD_STRING otherGamma2
1780: PPUSH
1781: CALL_OW 40
// SaveCharacters ( pom1 , otherNotJMM ) ;
1785: LD_VAR 0 6
1789: PPUSH
1790: LD_STRING otherNotJMM
1792: PPUSH
1793: CALL_OW 38
// SaveCharacters ( pom2 , otherWithJMM ) ;
1797: LD_VAR 0 7
1801: PPUSH
1802: LD_STRING otherWithJMM
1804: PPUSH
1805: CALL_OW 38
// YouWin ;
1809: CALL_OW 103
// EnableExclamations ;
1813: CALL_OW 473
// exit ;
1817: GO 1819
// end ;
1819: LD_VAR 0 1
1823: RET
// function load_postavy ; var pom ; begin
1824: LD_INT 0
1826: PPUSH
1827: PPUSH
// JMM = nacti_osobu ( JMM ) ;
1828: LD_ADDR_EXP 32
1832: PUSH
1833: LD_STRING JMM
1835: PPUSH
1836: CALL 8085 0 1
1840: ST_TO_ADDR
// Powell = NewCharacter ( Powell ) ;
1841: LD_ADDR_EXP 33
1845: PUSH
1846: LD_STRING Powell
1848: PPUSH
1849: CALL_OW 25
1853: ST_TO_ADDR
// Gary = nacti_osobu ( Gary ) ;
1854: LD_ADDR_EXP 34
1858: PUSH
1859: LD_STRING Gary
1861: PPUSH
1862: CALL 8085 0 1
1866: ST_TO_ADDR
// Lisa = nacti_osobu ( Lisa ) ;
1867: LD_ADDR_EXP 37
1871: PUSH
1872: LD_STRING Lisa
1874: PPUSH
1875: CALL 8085 0 1
1879: ST_TO_ADDR
// Yamoko = nacti_osobu ( Yamoko ) ;
1880: LD_ADDR_EXP 39
1884: PUSH
1885: LD_STRING Yamoko
1887: PPUSH
1888: CALL 8085 0 1
1892: ST_TO_ADDR
// Frank = nacti_osobu ( Frank ) ;
1893: LD_ADDR_EXP 36
1897: PUSH
1898: LD_STRING Frank
1900: PPUSH
1901: CALL 8085 0 1
1905: ST_TO_ADDR
// Cornel = nacti_osobu ( Cornell ) ;
1906: LD_ADDR_EXP 38
1910: PUSH
1911: LD_STRING Cornell
1913: PPUSH
1914: CALL 8085 0 1
1918: ST_TO_ADDR
// Bobby = nacti_osobu ( Bobby ) ;
1919: LD_ADDR_EXP 35
1923: PUSH
1924: LD_STRING Bobby
1926: PPUSH
1927: CALL 8085 0 1
1931: ST_TO_ADDR
// Cyrus = nacti_osobu ( Cyrus ) ;
1932: LD_ADDR_EXP 40
1936: PUSH
1937: LD_STRING Cyrus
1939: PPUSH
1940: CALL 8085 0 1
1944: ST_TO_ADDR
// Don = nacti_osobu ( Donaldson ) ;
1945: LD_ADDR_EXP 41
1949: PUSH
1950: LD_STRING Donaldson
1952: PPUSH
1953: CALL 8085 0 1
1957: ST_TO_ADDR
// Brown = nacti_osobu ( Brown ) ;
1958: LD_ADDR_EXP 42
1962: PUSH
1963: LD_STRING Brown
1965: PPUSH
1966: CALL 8085 0 1
1970: ST_TO_ADDR
// GARYL = LoadVariable ( GaryLoc , 6 ) ;
1971: LD_ADDR_EXP 19
1975: PUSH
1976: LD_STRING GaryLoc
1978: PPUSH
1979: LD_INT 6
1981: PPUSH
1982: CALL_OW 30
1986: ST_TO_ADDR
// LISAL = LoadVariable ( LisaLoc , 6 ) ;
1987: LD_ADDR_EXP 20
1991: PUSH
1992: LD_STRING LisaLoc
1994: PPUSH
1995: LD_INT 6
1997: PPUSH
1998: CALL_OW 30
2002: ST_TO_ADDR
// YAML = LoadVariable ( YamokoLoc , 6 ) ;
2003: LD_ADDR_EXP 21
2007: PUSH
2008: LD_STRING YamokoLoc
2010: PPUSH
2011: LD_INT 6
2013: PPUSH
2014: CALL_OW 30
2018: ST_TO_ADDR
// FRANKL = LoadVariable ( FrankLoc , 6 ) ;
2019: LD_ADDR_EXP 22
2023: PUSH
2024: LD_STRING FrankLoc
2026: PPUSH
2027: LD_INT 6
2029: PPUSH
2030: CALL_OW 30
2034: ST_TO_ADDR
// CORNELL = LoadVariable ( CornellLoc , 6 ) ;
2035: LD_ADDR_EXP 23
2039: PUSH
2040: LD_STRING CornellLoc
2042: PPUSH
2043: LD_INT 6
2045: PPUSH
2046: CALL_OW 30
2050: ST_TO_ADDR
// BOBL = LoadVariable ( BobbyLoc , 6 ) ;
2051: LD_ADDR_EXP 24
2055: PUSH
2056: LD_STRING BobbyLoc
2058: PPUSH
2059: LD_INT 6
2061: PPUSH
2062: CALL_OW 30
2066: ST_TO_ADDR
// CYRL = LoadVariable ( CyrusLoc , 6 ) ;
2067: LD_ADDR_EXP 25
2071: PUSH
2072: LD_STRING CyrusLoc
2074: PPUSH
2075: LD_INT 6
2077: PPUSH
2078: CALL_OW 30
2082: ST_TO_ADDR
// DONL = LoadVariable ( DonaldsonLoc , 6 ) ;
2083: LD_ADDR_EXP 26
2087: PUSH
2088: LD_STRING DonaldsonLoc
2090: PPUSH
2091: LD_INT 6
2093: PPUSH
2094: CALL_OW 30
2098: ST_TO_ADDR
// BROWNL = LoadVariable ( BrownLoc , 6 ) ;
2099: LD_ADDR_EXP 27
2103: PUSH
2104: LD_STRING BrownLoc
2106: PPUSH
2107: LD_INT 6
2109: PPUSH
2110: CALL_OW 30
2114: ST_TO_ADDR
// if CheckCharacterSet ( otherWithJMM ) then
2115: LD_STRING otherWithJMM
2117: PPUSH
2118: CALL_OW 29
2122: IFFALSE 2139
// lidi_other = CreateCharacterSet ( otherWithJMM ) else
2124: LD_ADDR_EXP 52
2128: PUSH
2129: LD_STRING otherWithJMM
2131: PPUSH
2132: CALL_OW 31
2136: ST_TO_ADDR
2137: GO 2146
// lidi_other = [ ] ;
2139: LD_ADDR_EXP 52
2143: PUSH
2144: EMPTY
2145: ST_TO_ADDR
// if CheckCharacterSet ( other_survivors ) then
2146: LD_STRING other_survivors
2148: PPUSH
2149: CALL_OW 29
2153: IFFALSE 2170
// pom = CreateCharacterSet ( other_survivors ) else
2155: LD_ADDR_VAR 0 2
2159: PUSH
2160: LD_STRING other_survivors
2162: PPUSH
2163: CALL_OW 31
2167: ST_TO_ADDR
2168: GO 2177
// pom = [ ] ;
2170: LD_ADDR_VAR 0 2
2174: PUSH
2175: EMPTY
2176: ST_TO_ADDR
// lidi_other = lidi_other ^ pom ;
2177: LD_ADDR_EXP 52
2181: PUSH
2182: LD_EXP 52
2186: PUSH
2187: LD_VAR 0 2
2191: ADD
2192: ST_TO_ADDR
// if CheckCharacterSet ( otherNotJMM ) then
2193: LD_STRING otherNotJMM
2195: PPUSH
2196: CALL_OW 29
2200: IFFALSE 2217
// pom = CreateCharacterSet ( otherNotJMM ) else
2202: LD_ADDR_VAR 0 2
2206: PUSH
2207: LD_STRING otherNotJMM
2209: PPUSH
2210: CALL_OW 31
2214: ST_TO_ADDR
2215: GO 2224
// pom = [ ] ;
2217: LD_ADDR_VAR 0 2
2221: PUSH
2222: EMPTY
2223: ST_TO_ADDR
// lidi_other = lidi_other ^ pom ;
2224: LD_ADDR_EXP 52
2228: PUSH
2229: LD_EXP 52
2233: PUSH
2234: LD_VAR 0 2
2238: ADD
2239: ST_TO_ADDR
// if CheckCharacterSet ( otherGamma2 ) then
2240: LD_STRING otherGamma2
2242: PPUSH
2243: CALL_OW 29
2247: IFFALSE 2264
// pom = CreateCharacterSet ( otherGamma2 ) else
2249: LD_ADDR_VAR 0 2
2253: PUSH
2254: LD_STRING otherGamma2
2256: PPUSH
2257: CALL_OW 31
2261: ST_TO_ADDR
2262: GO 2271
// pom = [ ] ;
2264: LD_ADDR_VAR 0 2
2268: PUSH
2269: EMPTY
2270: ST_TO_ADDR
// lidi_other = lidi_other ^ pom ;
2271: LD_ADDR_EXP 52
2275: PUSH
2276: LD_EXP 52
2280: PUSH
2281: LD_VAR 0 2
2285: ADD
2286: ST_TO_ADDR
// end ; end_of_file
2287: LD_VAR 0 1
2291: RET
// var i , pom , pom1 , pom2 , pom3 , pom4 ; var kecy ; var KAMI ; var disable_kecy_5D ; every 0 0$0.1 do
2292: GO 2294
2294: DISABLE
// begin for i := 1 to 2 do
2295: LD_ADDR_LOC 1
2299: PUSH
2300: DOUBLE
2301: LD_INT 1
2303: DEC
2304: ST_TO_ADDR
2305: LD_INT 2
2307: PUSH
2308: FOR_TO
2309: IFFALSE 2318
// disable ( i ) ;
2311: LD_LOC 1
2315: DISABLE_MARKED
2316: GO 2308
2318: POP
2319: POP
// kecy := false ;
2320: LD_ADDR_LOC 7
2324: PUSH
2325: LD_INT 0
2327: ST_TO_ADDR
// KAMI = false ;
2328: LD_ADDR_LOC 8
2332: PUSH
2333: LD_INT 0
2335: ST_TO_ADDR
// disable_kecy_5D = false ;
2336: LD_ADDR_LOC 9
2340: PUSH
2341: LD_INT 0
2343: ST_TO_ADDR
// end ;
2344: END
// export function chmo1 ; begin
2345: LD_INT 0
2347: PPUSH
// CenterOnXY ( 86 , 145 ) ;
2348: LD_INT 86
2350: PPUSH
2351: LD_INT 145
2353: PPUSH
2354: CALL_OW 84
// SetAttitude ( You , Arabi , att_enemy , true ) ;
2358: LD_EXP 1
2362: PPUSH
2363: LD_EXP 3
2367: PPUSH
2368: LD_INT 2
2370: PPUSH
2371: LD_INT 1
2373: PPUSH
2374: CALL_OW 80
// SetAttitude ( Arabi , You , att_enemy , true ) ;
2378: LD_EXP 3
2382: PPUSH
2383: LD_EXP 1
2387: PPUSH
2388: LD_INT 2
2390: PPUSH
2391: LD_INT 1
2393: PPUSH
2394: CALL_OW 80
// SaveForQuickRestart ;
2398: CALL_OW 22
// wait ( 0 0$0.5 ) ;
2402: LD_INT 18
2404: PPUSH
2405: CALL_OW 67
// InGameOff ;
2409: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2413: LD_STRING M1
2415: PPUSH
2416: CALL_OW 337
// end ;
2420: LD_VAR 0 1
2424: RET
// every 0 0$3 trigger GetSide ( A1_dep ) = You or IsDead ( A1_dep ) do var pom1 ;
2425: LD_INT 4
2427: PPUSH
2428: CALL_OW 255
2432: PUSH
2433: LD_EXP 1
2437: EQUAL
2438: PUSH
2439: LD_INT 4
2441: PPUSH
2442: CALL_OW 301
2446: OR
2447: IFFALSE 3032
2449: GO 2451
2451: DISABLE
2452: LD_INT 0
2454: PPUSH
// begin A1_dobyta = true ;
2455: LD_ADDR_EXP 28
2459: PUSH
2460: LD_INT 1
2462: ST_TO_ADDR
// DialogueOn ;
2463: CALL_OW 6
// SayRadio ( Jmm , D2-JMM-1 ) ;
2467: LD_EXP 32
2471: PPUSH
2472: LD_STRING D2-JMM-1
2474: PPUSH
2475: CALL_OW 94
// SayRadio ( Powell , D2-Pow-1 ) ;
2479: LD_EXP 33
2483: PPUSH
2484: LD_STRING D2-Pow-1
2486: PPUSH
2487: CALL_OW 94
// SayRadio ( JMM , D2-JMM-2 ) ;
2491: LD_EXP 32
2495: PPUSH
2496: LD_STRING D2-JMM-2
2498: PPUSH
2499: CALL_OW 94
// SayRadio ( Powell , D2-Pow-2 ) ;
2503: LD_EXP 33
2507: PPUSH
2508: LD_STRING D2-Pow-2
2510: PPUSH
2511: CALL_OW 94
// SayRadio ( JMM , D2-JMM-3 ) ;
2515: LD_EXP 32
2519: PPUSH
2520: LD_STRING D2-JMM-3
2522: PPUSH
2523: CALL_OW 94
// DialogueOff ;
2527: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
2531: LD_STRING M2
2533: PPUSH
2534: CALL_OW 337
// Hint ( CapturedBase ) ;
2538: LD_STRING CapturedBase
2540: PPUSH
2541: CALL_OW 339
// pom = [ ] ;
2545: LD_ADDR_LOC 2
2549: PUSH
2550: EMPTY
2551: ST_TO_ADDR
// for i in [ Gary , Bobby , Frank , Lisa , Cornel , Cyrus , Don , Brown ] do
2552: LD_ADDR_LOC 1
2556: PUSH
2557: LD_EXP 34
2561: PUSH
2562: LD_EXP 35
2566: PUSH
2567: LD_EXP 36
2571: PUSH
2572: LD_EXP 37
2576: PUSH
2577: LD_EXP 38
2581: PUSH
2582: LD_EXP 40
2586: PUSH
2587: LD_EXP 41
2591: PUSH
2592: LD_EXP 42
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: PUSH
2607: FOR_IN
2608: IFFALSE 2639
// if IsOK ( i ) then
2610: LD_LOC 1
2614: PPUSH
2615: CALL_OW 302
2619: IFFALSE 2637
// pom = pom ^ i ;
2621: LD_ADDR_LOC 2
2625: PUSH
2626: LD_LOC 2
2630: PUSH
2631: LD_LOC 1
2635: ADD
2636: ST_TO_ADDR
2637: GO 2607
2639: POP
2640: POP
// if pom > 3 then
2641: LD_LOC 2
2645: PUSH
2646: LD_INT 3
2648: GREATER
2649: IFFALSE 2799
// begin pom1 = pom [ Rand ( 1 , pom + 0 ) ] ;
2651: LD_ADDR_VAR 0 1
2655: PUSH
2656: LD_LOC 2
2660: PUSH
2661: LD_INT 1
2663: PPUSH
2664: LD_LOC 2
2668: PUSH
2669: LD_INT 0
2671: PLUS
2672: PPUSH
2673: CALL_OW 12
2677: ARRAY
2678: ST_TO_ADDR
// pom = pom diff pom1 [ 1 ] ;
2679: LD_ADDR_LOC 2
2683: PUSH
2684: LD_LOC 2
2688: PUSH
2689: LD_VAR 0 1
2693: PUSH
2694: LD_INT 1
2696: ARRAY
2697: DIFF
2698: ST_TO_ADDR
// pom1 = pom1 ^ pom [ Rand ( 1 , pom + 0 ) ] ;
2699: LD_ADDR_VAR 0 1
2703: PUSH
2704: LD_VAR 0 1
2708: PUSH
2709: LD_LOC 2
2713: PUSH
2714: LD_INT 1
2716: PPUSH
2717: LD_LOC 2
2721: PUSH
2722: LD_INT 0
2724: PLUS
2725: PPUSH
2726: CALL_OW 12
2730: ARRAY
2731: ADD
2732: ST_TO_ADDR
// pom = pom diff pom1 [ 2 ] ;
2733: LD_ADDR_LOC 2
2737: PUSH
2738: LD_LOC 2
2742: PUSH
2743: LD_VAR 0 1
2747: PUSH
2748: LD_INT 2
2750: ARRAY
2751: DIFF
2752: ST_TO_ADDR
// pom1 = pom1 ^ pom [ Rand ( 1 , pom + 0 ) ] ;
2753: LD_ADDR_VAR 0 1
2757: PUSH
2758: LD_VAR 0 1
2762: PUSH
2763: LD_LOC 2
2767: PUSH
2768: LD_INT 1
2770: PPUSH
2771: LD_LOC 2
2775: PUSH
2776: LD_INT 0
2778: PLUS
2779: PPUSH
2780: CALL_OW 12
2784: ARRAY
2785: ADD
2786: ST_TO_ADDR
// pom = pom1 ;
2787: LD_ADDR_LOC 2
2791: PUSH
2792: LD_VAR 0 1
2796: ST_TO_ADDR
// end else
2797: GO 2809
// pom1 = pom ;
2799: LD_ADDR_VAR 0 1
2803: PUSH
2804: LD_LOC 2
2808: ST_TO_ADDR
// for i in pom1 do
2809: LD_ADDR_LOC 1
2813: PUSH
2814: LD_VAR 0 1
2818: PUSH
2819: FOR_IN
2820: IFFALSE 3030
// case i of Gary :
2822: LD_LOC 1
2826: PUSH
2827: LD_EXP 34
2831: DOUBLE
2832: EQUAL
2833: IFTRUE 2837
2835: GO 2852
2837: POP
// Say ( Gary , D2a-Gary-1 ) ; Bobby :
2838: LD_EXP 34
2842: PPUSH
2843: LD_STRING D2a-Gary-1
2845: PPUSH
2846: CALL_OW 88
2850: GO 3028
2852: LD_EXP 35
2856: DOUBLE
2857: EQUAL
2858: IFTRUE 2862
2860: GO 2877
2862: POP
// Say ( Bobby , D2a-Bobby-1 ) ; Frank :
2863: LD_EXP 35
2867: PPUSH
2868: LD_STRING D2a-Bobby-1
2870: PPUSH
2871: CALL_OW 88
2875: GO 3028
2877: LD_EXP 36
2881: DOUBLE
2882: EQUAL
2883: IFTRUE 2887
2885: GO 2902
2887: POP
// Say ( Frank , D2a-Frank-1 ) ; Lisa :
2888: LD_EXP 36
2892: PPUSH
2893: LD_STRING D2a-Frank-1
2895: PPUSH
2896: CALL_OW 88
2900: GO 3028
2902: LD_EXP 37
2906: DOUBLE
2907: EQUAL
2908: IFTRUE 2912
2910: GO 2927
2912: POP
// Say ( Lisa , D2a-Lisa-1 ) ; Cornel :
2913: LD_EXP 37
2917: PPUSH
2918: LD_STRING D2a-Lisa-1
2920: PPUSH
2921: CALL_OW 88
2925: GO 3028
2927: LD_EXP 38
2931: DOUBLE
2932: EQUAL
2933: IFTRUE 2937
2935: GO 2952
2937: POP
// Say ( Cornel , D2a-Corn-1 ) ; Cyrus :
2938: LD_EXP 38
2942: PPUSH
2943: LD_STRING D2a-Corn-1
2945: PPUSH
2946: CALL_OW 88
2950: GO 3028
2952: LD_EXP 40
2956: DOUBLE
2957: EQUAL
2958: IFTRUE 2962
2960: GO 2977
2962: POP
// Say ( Cyrus , D2a-Cyrus-1 ) ; Don :
2963: LD_EXP 40
2967: PPUSH
2968: LD_STRING D2a-Cyrus-1
2970: PPUSH
2971: CALL_OW 88
2975: GO 3028
2977: LD_EXP 41
2981: DOUBLE
2982: EQUAL
2983: IFTRUE 2987
2985: GO 3002
2987: POP
// Say ( Don , D2a-Don-1 ) ; Brown :
2988: LD_EXP 41
2992: PPUSH
2993: LD_STRING D2a-Don-1
2995: PPUSH
2996: CALL_OW 88
3000: GO 3028
3002: LD_EXP 42
3006: DOUBLE
3007: EQUAL
3008: IFTRUE 3012
3010: GO 3027
3012: POP
// Say ( Brown , D2a-Brown-1 ) ; end ;
3013: LD_EXP 42
3017: PPUSH
3018: LD_STRING D2a-Brown-1
3020: PPUSH
3021: CALL_OW 88
3025: GO 3028
3027: POP
3028: GO 2819
3030: POP
3031: POP
// end ;
3032: PPOPN 1
3034: END
// export function dialog_frank ; var res ; begin
3035: LD_INT 0
3037: PPUSH
3038: PPUSH
// Say ( Frank , D3F-Frank-1 ) ;
3039: LD_EXP 36
3043: PPUSH
3044: LD_STRING D3F-Frank-1
3046: PPUSH
3047: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
3051: LD_EXP 32
3055: PPUSH
3056: LD_STRING D3F-JMM-1
3058: PPUSH
3059: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
3063: LD_EXP 36
3067: PPUSH
3068: LD_STRING D3F-Frank-2
3070: PPUSH
3071: CALL_OW 88
// res := Query ( QFrank ) ;
3075: LD_ADDR_VAR 0 2
3079: PUSH
3080: LD_STRING QFrank
3082: PPUSH
3083: CALL_OW 97
3087: ST_TO_ADDR
// case res of 1 :
3088: LD_VAR 0 2
3092: PUSH
3093: LD_INT 1
3095: DOUBLE
3096: EQUAL
3097: IFTRUE 3101
3099: GO 3124
3101: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
3102: LD_EXP 32
3106: PPUSH
3107: LD_STRING D3Fa-JMM-1
3109: PPUSH
3110: CALL_OW 88
// result := 1 ;
3114: LD_ADDR_VAR 0 1
3118: PUSH
3119: LD_INT 1
3121: ST_TO_ADDR
// end ; 2 :
3122: GO 3280
3124: LD_INT 2
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3248
3132: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
3133: LD_EXP 32
3137: PPUSH
3138: LD_STRING D3Fb-JMM-1
3140: PPUSH
3141: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
3145: LD_EXP 36
3149: PPUSH
3150: LD_STRING D3Fb-Frank-1
3152: PPUSH
3153: CALL_OW 88
// res := Query ( QFrank2 ) ;
3157: LD_ADDR_VAR 0 2
3161: PUSH
3162: LD_STRING QFrank2
3164: PPUSH
3165: CALL_OW 97
3169: ST_TO_ADDR
// if res = 1 then
3170: LD_VAR 0 2
3174: PUSH
3175: LD_INT 1
3177: EQUAL
3178: IFFALSE 3226
// begin Say ( JMM , D3Fba-JMM-1 ) ;
3180: LD_EXP 32
3184: PPUSH
3185: LD_STRING D3Fba-JMM-1
3187: PPUSH
3188: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
3192: LD_EXP 36
3196: PPUSH
3197: LD_STRING D3Fba-Frank-1
3199: PPUSH
3200: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
3204: LD_EXP 32
3208: PPUSH
3209: LD_STRING D3Fba-JMM-2
3211: PPUSH
3212: CALL_OW 88
// result := 21 ;
3216: LD_ADDR_VAR 0 1
3220: PUSH
3221: LD_INT 21
3223: ST_TO_ADDR
// end else
3224: GO 3246
// begin Say ( JMM , D3Fbb-JMM-1 ) ;
3226: LD_EXP 32
3230: PPUSH
3231: LD_STRING D3Fbb-JMM-1
3233: PPUSH
3234: CALL_OW 88
// result := 22 ;
3238: LD_ADDR_VAR 0 1
3242: PUSH
3243: LD_INT 22
3245: ST_TO_ADDR
// end ; end ; 3 :
3246: GO 3280
3248: LD_INT 3
3250: DOUBLE
3251: EQUAL
3252: IFTRUE 3256
3254: GO 3279
3256: POP
// begin Say ( JMM , D3Fc-JMM-1 ) ;
3257: LD_EXP 32
3261: PPUSH
3262: LD_STRING D3Fc-JMM-1
3264: PPUSH
3265: CALL_OW 88
// result := 3 ;
3269: LD_ADDR_VAR 0 1
3273: PUSH
3274: LD_INT 3
3276: ST_TO_ADDR
// end ; end ;
3277: GO 3280
3279: POP
// end ;
3280: LD_VAR 0 1
3284: RET
// export function fuspech1 ; begin
3285: LD_INT 0
3287: PPUSH
// DialogueOn ;
3288: CALL_OW 6
// Say ( JMM , D4Fa-JMM-1 ) ;
3292: LD_EXP 32
3296: PPUSH
3297: LD_STRING D4Fa-JMM-1
3299: PPUSH
3300: CALL_OW 88
// RevealFogArea ( You , Pruzkum1 ) ;
3304: LD_EXP 1
3308: PPUSH
3309: LD_INT 6
3311: PPUSH
3312: CALL_OW 332
// CenterNowOnXY ( 111 , 123 ) ;
3316: LD_INT 111
3318: PPUSH
3319: LD_INT 123
3321: PPUSH
3322: CALL_OW 86
// CenterOnXy ( 32 , 39 ) ;
3326: LD_INT 32
3328: PPUSH
3329: LD_INT 39
3331: PPUSH
3332: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
3336: LD_EXP 36
3340: PPUSH
3341: LD_STRING D4Fa-Frank-1
3343: PPUSH
3344: CALL_OW 88
// wait ( 0 0$3 ) ;
3348: LD_INT 105
3350: PPUSH
3351: CALL_OW 67
// RevealFogArea ( You , Pruzkum2 ) ;
3355: LD_EXP 1
3359: PPUSH
3360: LD_INT 7
3362: PPUSH
3363: CALL_OW 332
// CenterNowOnXy ( 122 , 68 ) ;
3367: LD_INT 122
3369: PPUSH
3370: LD_INT 68
3372: PPUSH
3373: CALL_OW 86
// Say ( JMM , D4Fa-JMM-2 ) ;
3377: LD_EXP 32
3381: PPUSH
3382: LD_STRING D4Fa-JMM-2
3384: PPUSH
3385: CALL_OW 88
// Say ( Frank , D4Fa-Frank-2 ) ;
3389: LD_EXP 36
3393: PPUSH
3394: LD_STRING D4Fa-Frank-2
3396: PPUSH
3397: CALL_OW 88
// DialogueOff ;
3401: CALL_OW 7
// CenterOnUnits ( [ Frank ] ) ;
3405: LD_EXP 36
3409: PUSH
3410: EMPTY
3411: LIST
3412: PPUSH
3413: CALL_OW 85
// end ;
3417: LD_VAR 0 1
3421: RET
// export function fuspech2 ; begin
3422: LD_INT 0
3424: PPUSH
// DialogueOn ;
3425: CALL_OW 6
// RevealFogArea ( You , Pruzkum3 ) ;
3429: LD_EXP 1
3433: PPUSH
3434: LD_INT 8
3436: PPUSH
3437: CALL_OW 332
// if IsOK ( Frank ) then
3441: LD_EXP 36
3445: PPUSH
3446: CALL_OW 302
3450: IFFALSE 3544
// begin Say ( Frank , D4Fb-Frank-1 ) ;
3452: LD_EXP 36
3456: PPUSH
3457: LD_STRING D4Fb-Frank-1
3459: PPUSH
3460: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
3464: LD_EXP 32
3468: PPUSH
3469: LD_STRING D4Fb-JMM-1
3471: PPUSH
3472: CALL_OW 88
// pom = GetPeople ( sex_female , class_scientistic , [ ] ) ;
3476: LD_ADDR_LOC 2
3480: PUSH
3481: LD_INT 2
3483: PPUSH
3484: LD_INT 4
3486: PPUSH
3487: EMPTY
3488: PPUSH
3489: CALL 6667 0 3
3493: ST_TO_ADDR
// if pom > 0 then
3494: LD_LOC 2
3498: PUSH
3499: LD_INT 0
3501: GREATER
3502: IFFALSE 3520
// Say ( pom [ 1 ] , D4Fb-FSci1-1 ) ;
3504: LD_LOC 2
3508: PUSH
3509: LD_INT 1
3511: ARRAY
3512: PPUSH
3513: LD_STRING D4Fb-FSci1-1
3515: PPUSH
3516: CALL_OW 88
// Say ( Frank , D4Fb-Frank-2 ) ;
3520: LD_EXP 36
3524: PPUSH
3525: LD_STRING D4Fb-Frank-2
3527: PPUSH
3528: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
3532: LD_EXP 32
3536: PPUSH
3537: LD_STRING D4Fb-JMM-2
3539: PPUSH
3540: CALL_OW 88
// end ; DialogueOff ;
3544: CALL_OW 7
// CenterOnUnits ( [ Frank ] ) ;
3548: LD_EXP 36
3552: PUSH
3553: EMPTY
3554: LIST
3555: PPUSH
3556: CALL_OW 85
// end ;
3560: LD_VAR 0 1
3564: RET
// export function fuspech3 ; begin
3565: LD_INT 0
3567: PPUSH
// end ;
3568: LD_VAR 0 1
3572: RET
// export function dialog_yamoko ; begin
3573: LD_INT 0
3575: PPUSH
// Say ( Yamoko , D3Y-Yam-1 ) ;
3576: LD_EXP 39
3580: PPUSH
3581: LD_STRING D3Y-Yam-1
3583: PPUSH
3584: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
3588: LD_EXP 32
3592: PPUSH
3593: LD_STRING D3Y-JMM-1
3595: PPUSH
3596: CALL_OW 88
// Say ( Yamoko , D3Y-Yam-2 ) ;
3600: LD_EXP 39
3604: PPUSH
3605: LD_STRING D3Y-Yam-2
3607: PPUSH
3608: CALL_OW 88
// result = Query ( QYamoko ) ;
3612: LD_ADDR_VAR 0 1
3616: PUSH
3617: LD_STRING QYamoko
3619: PPUSH
3620: CALL_OW 97
3624: ST_TO_ADDR
// if result = 1 then
3625: LD_VAR 0 1
3629: PUSH
3630: LD_INT 1
3632: EQUAL
3633: IFFALSE 3661
// begin Say ( JMM , D3Ya-JMM-1 ) ;
3635: LD_EXP 32
3639: PPUSH
3640: LD_STRING D3Ya-JMM-1
3642: PPUSH
3643: CALL_OW 88
// Say ( Yamoko , D3Ya-Yam-1 ) ;
3647: LD_EXP 39
3651: PPUSH
3652: LD_STRING D3Ya-Yam-1
3654: PPUSH
3655: CALL_OW 88
// end else
3659: GO 3673
// Say ( JMM , D3Yb-JMM-1 ) ;
3661: LD_EXP 32
3665: PPUSH
3666: LD_STRING D3Yb-JMM-1
3668: PPUSH
3669: CALL_OW 88
// end ;
3673: LD_VAR 0 1
3677: RET
// export function yuspech1 ; begin
3678: LD_INT 0
3680: PPUSH
// DialogueOn ;
3681: CALL_OW 6
// Say ( Yamoko , D4Ya-Yam-1 ) ;
3685: LD_EXP 39
3689: PPUSH
3690: LD_STRING D4Ya-Yam-1
3692: PPUSH
3693: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
3697: LD_EXP 32
3701: PPUSH
3702: LD_STRING D4Ya-JMM-1
3704: PPUSH
3705: CALL_OW 88
// RevealFogArea ( You , Pruzkum1 ) ;
3709: LD_EXP 1
3713: PPUSH
3714: LD_INT 6
3716: PPUSH
3717: CALL_OW 332
// CenterNowOnXY ( 111 , 123 ) ;
3721: LD_INT 111
3723: PPUSH
3724: LD_INT 123
3726: PPUSH
3727: CALL_OW 86
// CenterOnXy ( 32 , 39 ) ;
3731: LD_INT 32
3733: PPUSH
3734: LD_INT 39
3736: PPUSH
3737: CALL_OW 84
// Say ( Yamoko , D4Ya-Yam-2 ) ;
3741: LD_EXP 39
3745: PPUSH
3746: LD_STRING D4Ya-Yam-2
3748: PPUSH
3749: CALL_OW 88
// wait ( 0 0$3 ) ;
3753: LD_INT 105
3755: PPUSH
3756: CALL_OW 67
// RevealFogArea ( You , Pruzkum2 ) ;
3760: LD_EXP 1
3764: PPUSH
3765: LD_INT 7
3767: PPUSH
3768: CALL_OW 332
// CenterNowOnXy ( 122 , 68 ) ;
3772: LD_INT 122
3774: PPUSH
3775: LD_INT 68
3777: PPUSH
3778: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
3782: LD_EXP 32
3786: PPUSH
3787: LD_STRING D4Ya-JMM-2
3789: PPUSH
3790: CALL_OW 88
// Say ( Yamoko , D4Ya-Yam-3 ) ;
3794: LD_EXP 39
3798: PPUSH
3799: LD_STRING D4Ya-Yam-3
3801: PPUSH
3802: CALL_OW 88
// DialogueOff ;
3806: CALL_OW 7
// CenterOnUnits ( [ Yamoko ] ) ;
3810: LD_EXP 39
3814: PUSH
3815: EMPTY
3816: LIST
3817: PPUSH
3818: CALL_OW 85
// end ;
3822: LD_VAR 0 1
3826: RET
// export function yuspech2 ; begin
3827: LD_INT 0
3829: PPUSH
// DialogueOn ;
3830: CALL_OW 6
// RevealFogArea ( You , Pruzkum3 ) ;
3834: LD_EXP 1
3838: PPUSH
3839: LD_INT 8
3841: PPUSH
3842: CALL_OW 332
// if IsOK ( Yamoko ) then
3846: LD_EXP 39
3850: PPUSH
3851: CALL_OW 302
3855: IFFALSE 3905
// begin Say ( Yamoko , D4Yc-Yam-1 ) ;
3857: LD_EXP 39
3861: PPUSH
3862: LD_STRING D4Yc-Yam-1
3864: PPUSH
3865: CALL_OW 88
// Say ( JMM , D4Yc-JMM-1 ) ;
3869: LD_EXP 32
3873: PPUSH
3874: LD_STRING D4Yc-JMM-1
3876: PPUSH
3877: CALL_OW 88
// Say ( Yamoko , D4Yc-Yam-2 ) ;
3881: LD_EXP 39
3885: PPUSH
3886: LD_STRING D4Yc-Yam-2
3888: PPUSH
3889: CALL_OW 88
// Say ( JMM , D4Yc-JMM-2 ) ;
3893: LD_EXP 32
3897: PPUSH
3898: LD_STRING D4Yc-JMM-2
3900: PPUSH
3901: CALL_OW 88
// end ; DialogueOff ;
3905: CALL_OW 7
// CenterOnUnits ( [ Yamoko ] ) ;
3909: LD_EXP 39
3913: PUSH
3914: EMPTY
3915: LIST
3916: PPUSH
3917: CALL_OW 85
// end ;
3921: LD_VAR 0 1
3925: RET
// export function yuspech3 ; begin
3926: LD_INT 0
3928: PPUSH
// end ;
3929: LD_VAR 0 1
3933: RET
// every 0 0$1 trigger See ( You , A2_kam1 ) or See ( You , A2_kam2 ) or See ( You , A2_kam3 ) do
3934: LD_EXP 1
3938: PPUSH
3939: LD_INT 86
3941: PPUSH
3942: CALL_OW 292
3946: PUSH
3947: LD_EXP 1
3951: PPUSH
3952: LD_INT 85
3954: PPUSH
3955: CALL_OW 292
3959: OR
3960: PUSH
3961: LD_EXP 1
3965: PPUSH
3966: LD_INT 84
3968: PPUSH
3969: CALL_OW 292
3973: OR
3974: IFFALSE 4292
3976: GO 3978
3978: DISABLE
// begin while kecy do
3979: LD_LOC 7
3983: IFFALSE 3994
// wait ( 0 0$1 ) ;
3985: LD_INT 35
3987: PPUSH
3988: CALL_OW 67
3992: GO 3979
// kecy = true ;
3994: LD_ADDR_LOC 7
3998: PUSH
3999: LD_INT 1
4001: ST_TO_ADDR
// DialogueOn ;
4002: CALL_OW 6
// if See ( You , A2_kam1 ) then
4006: LD_EXP 1
4010: PPUSH
4011: LD_INT 86
4013: PPUSH
4014: CALL_OW 292
4018: IFFALSE 4029
// CenterNowOnUnits ( A2_kam1 ) else
4020: LD_INT 86
4022: PPUSH
4023: CALL_OW 87
4027: GO 4093
// if See ( You , A2_kam2 ) then
4029: LD_EXP 1
4033: PPUSH
4034: LD_INT 85
4036: PPUSH
4037: CALL_OW 292
4041: IFFALSE 4052
// CenterNowOnUnits ( A2_kam2 ) else
4043: LD_INT 85
4045: PPUSH
4046: CALL_OW 87
4050: GO 4093
// if See ( You , A2_kam3 ) then
4052: LD_EXP 1
4056: PPUSH
4057: LD_INT 84
4059: PPUSH
4060: CALL_OW 292
4064: IFFALSE 4075
// CenterNowOnUnits ( A2_kam3 ) else
4066: LD_INT 84
4068: PPUSH
4069: CALL_OW 87
4073: GO 4093
// CenterNowOnUnits ( [ A2_kam1 , A2_kam2 , A2_kam3 ] ) ;
4075: LD_INT 86
4077: PUSH
4078: LD_INT 85
4080: PUSH
4081: LD_INT 84
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: LIST
4088: PPUSH
4089: CALL_OW 87
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
4093: LD_ADDR_LOC 2
4097: PUSH
4098: LD_INT 1
4100: PPUSH
4101: LD_INT 1
4103: PPUSH
4104: LD_EXP 32
4108: PUSH
4109: EMPTY
4110: LIST
4111: PPUSH
4112: CALL 6667 0 3
4116: ST_TO_ADDR
// if pom < 0 then
4117: LD_LOC 2
4121: PUSH
4122: LD_INT 0
4124: LESS
4125: IFFALSE 4138
// begin msg ( ERROR: GetPeople returns wrong data. Please report it as a bug ) ;
4127: LD_STRING ERROR: GetPeople returns wrong data. Please report it as a bug
4129: PPUSH
4130: CALL_OW 100
// konec_mise ;
4134: CALL 669 0 0
// end ; case pom of 0 :
4138: LD_LOC 2
4142: PUSH
4143: LD_INT 0
4145: DOUBLE
4146: EQUAL
4147: IFTRUE 4151
4149: GO 4174
4151: POP
// begin pom = JMM ;
4152: LD_ADDR_LOC 2
4156: PUSH
4157: LD_EXP 32
4161: ST_TO_ADDR
// pom1 = JMM ;
4162: LD_ADDR_LOC 3
4166: PUSH
4167: LD_EXP 32
4171: ST_TO_ADDR
// end ; 1 :
4172: GO 4238
4174: LD_INT 1
4176: DOUBLE
4177: EQUAL
4178: IFTRUE 4182
4180: GO 4209
4182: POP
// begin pom = pom [ 1 ] ;
4183: LD_ADDR_LOC 2
4187: PUSH
4188: LD_LOC 2
4192: PUSH
4193: LD_INT 1
4195: ARRAY
4196: ST_TO_ADDR
// pom1 = JMM ;
4197: LD_ADDR_LOC 3
4201: PUSH
4202: LD_EXP 32
4206: ST_TO_ADDR
// end ; else
4207: GO 4238
4209: POP
// begin pom1 = pom [ 2 ] ;
4210: LD_ADDR_LOC 3
4214: PUSH
4215: LD_LOC 2
4219: PUSH
4220: LD_INT 2
4222: ARRAY
4223: ST_TO_ADDR
// pom = pom [ 1 ] ;
4224: LD_ADDR_LOC 2
4228: PUSH
4229: LD_LOC 2
4233: PUSH
4234: LD_INT 1
4236: ARRAY
4237: ST_TO_ADDR
// end ; end ; DialogueOn ;
4238: CALL_OW 6
// Say ( pom , D5b-Sol1-1 ) ;
4242: LD_LOC 2
4246: PPUSH
4247: LD_STRING D5b-Sol1-1
4249: PPUSH
4250: CALL_OW 88
// Say ( pom1 , D5b-Sol2-1 ) ;
4254: LD_LOC 3
4258: PPUSH
4259: LD_STRING D5b-Sol2-1
4261: PPUSH
4262: CALL_OW 88
// DialogueOff ;
4266: CALL_OW 7
// if not disable_kecy_5D then
4270: LD_LOC 9
4274: NOT
4275: IFFALSE 4280
// enable ( 1 ) ;
4277: LD_INT 1
4279: ENABLE_MARKED
// DialogueOff ;
4280: CALL_OW 7
// kecy = false ;
4284: LD_ADDR_LOC 7
4288: PUSH
4289: LD_INT 0
4291: ST_TO_ADDR
// end ;
4292: END
// on UnitKamikazed ( un ) do begin if not KAMI then
4293: LD_LOC 8
4297: NOT
4298: IFFALSE 4494
// begin KAMI = true ;
4300: LD_ADDR_LOC 8
4304: PUSH
4305: LD_INT 1
4307: ST_TO_ADDR
// while kecy do
4308: LD_LOC 7
4312: IFFALSE 4323
// wait ( 0 0$1 ) ;
4314: LD_INT 35
4316: PPUSH
4317: CALL_OW 67
4321: GO 4308
// kecy = true ;
4323: LD_ADDR_LOC 7
4327: PUSH
4328: LD_INT 1
4330: ST_TO_ADDR
// wait ( 0 0$1.5 ) ;
4331: LD_INT 52
4333: PPUSH
4334: CALL_OW 67
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
4338: LD_ADDR_LOC 2
4342: PUSH
4343: LD_INT 22
4345: PUSH
4346: LD_EXP 1
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: PUSH
4355: LD_INT 21
4357: PUSH
4358: LD_INT 1
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: PPUSH
4369: CALL_OW 69
4373: ST_TO_ADDR
// pom = pom diff [ JMM ] ;
4374: LD_ADDR_LOC 2
4378: PUSH
4379: LD_LOC 2
4383: PUSH
4384: LD_EXP 32
4388: PUSH
4389: EMPTY
4390: LIST
4391: DIFF
4392: ST_TO_ADDR
// if pom > 0 then
4393: LD_LOC 2
4397: PUSH
4398: LD_INT 0
4400: GREATER
4401: IFFALSE 4476
// begin DialogueOn ;
4403: CALL_OW 6
// if GetSex ( pom [ 1 ] ) = sex_male then
4407: LD_LOC 2
4411: PUSH
4412: LD_INT 1
4414: ARRAY
4415: PPUSH
4416: CALL_OW 258
4420: PUSH
4421: LD_INT 1
4423: EQUAL
4424: IFFALSE 4444
// Say ( pom [ 1 ] , D5c-Sol1-1 ) else
4426: LD_LOC 2
4430: PUSH
4431: LD_INT 1
4433: ARRAY
4434: PPUSH
4435: LD_STRING D5c-Sol1-1
4437: PPUSH
4438: CALL_OW 88
4442: GO 4460
// Say ( pom [ 1 ] , D5c-FSol1-1 ) ;
4444: LD_LOC 2
4448: PUSH
4449: LD_INT 1
4451: ARRAY
4452: PPUSH
4453: LD_STRING D5c-FSol1-1
4455: PPUSH
4456: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
4460: LD_EXP 32
4464: PPUSH
4465: LD_STRING D5c-JMM-1
4467: PPUSH
4468: CALL_OW 88
// DialogueOff ;
4472: CALL_OW 7
// end ; if not disable_kecy_5D then
4476: LD_LOC 9
4480: NOT
4481: IFFALSE 4486
// enable ( 1 ) ;
4483: LD_INT 1
4485: ENABLE_MARKED
// kecy = false ;
4486: LD_ADDR_LOC 7
4490: PUSH
4491: LD_INT 0
4493: ST_TO_ADDR
// end ; enable ;
4494: ENABLE
// end ;
4495: PPOPN 1
4497: END
// every 0 0$1 trigger See ( You , A2_op1 ) or See ( You , A2_op2 ) or See ( You , A2_op3 ) do
4498: LD_EXP 1
4502: PPUSH
4503: LD_INT 89
4505: PPUSH
4506: CALL_OW 292
4510: PUSH
4511: LD_EXP 1
4515: PPUSH
4516: LD_INT 90
4518: PPUSH
4519: CALL_OW 292
4523: OR
4524: PUSH
4525: LD_EXP 1
4529: PPUSH
4530: LD_INT 91
4532: PPUSH
4533: CALL_OW 292
4537: OR
4538: IFFALSE 4837
4540: GO 4542
4542: DISABLE
// begin while kecy do
4543: LD_LOC 7
4547: IFFALSE 4558
// wait ( 0 0$1 ) ;
4549: LD_INT 35
4551: PPUSH
4552: CALL_OW 67
4556: GO 4543
// kecy = true ;
4558: LD_ADDR_LOC 7
4562: PUSH
4563: LD_INT 1
4565: ST_TO_ADDR
// CenterOnUnits ( [ A2_op1 , A2_op2 , A2_op3 ] ) ;
4566: LD_INT 89
4568: PUSH
4569: LD_INT 90
4571: PUSH
4572: LD_INT 91
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: LIST
4579: PPUSH
4580: CALL_OW 85
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
4584: LD_ADDR_LOC 2
4588: PUSH
4589: LD_INT 1
4591: PPUSH
4592: LD_INT 1
4594: PPUSH
4595: LD_EXP 32
4599: PUSH
4600: EMPTY
4601: LIST
4602: PPUSH
4603: CALL 6667 0 3
4607: ST_TO_ADDR
// if pom < 0 then
4608: LD_LOC 2
4612: PUSH
4613: LD_INT 0
4615: LESS
4616: IFFALSE 4629
// begin msg ( ERROR: GetPeople returns wrong data. Please report it as a bug ) ;
4618: LD_STRING ERROR: GetPeople returns wrong data. Please report it as a bug
4620: PPUSH
4621: CALL_OW 100
// konec_mise ;
4625: CALL 669 0 0
// end ; case pom of 0 :
4629: LD_LOC 2
4633: PUSH
4634: LD_INT 0
4636: DOUBLE
4637: EQUAL
4638: IFTRUE 4642
4640: GO 4665
4642: POP
// begin pom = JMM ;
4643: LD_ADDR_LOC 2
4647: PUSH
4648: LD_EXP 32
4652: ST_TO_ADDR
// pom1 = JMM ;
4653: LD_ADDR_LOC 3
4657: PUSH
4658: LD_EXP 32
4662: ST_TO_ADDR
// end ; 1 :
4663: GO 4729
4665: LD_INT 1
4667: DOUBLE
4668: EQUAL
4669: IFTRUE 4673
4671: GO 4700
4673: POP
// begin pom = pom [ 1 ] ;
4674: LD_ADDR_LOC 2
4678: PUSH
4679: LD_LOC 2
4683: PUSH
4684: LD_INT 1
4686: ARRAY
4687: ST_TO_ADDR
// pom1 = JMM ;
4688: LD_ADDR_LOC 3
4692: PUSH
4693: LD_EXP 32
4697: ST_TO_ADDR
// end ; else
4698: GO 4729
4700: POP
// begin pom1 = pom [ 2 ] ;
4701: LD_ADDR_LOC 3
4705: PUSH
4706: LD_LOC 2
4710: PUSH
4711: LD_INT 2
4713: ARRAY
4714: ST_TO_ADDR
// pom = pom [ 1 ] ;
4715: LD_ADDR_LOC 2
4719: PUSH
4720: LD_LOC 2
4724: PUSH
4725: LD_INT 1
4727: ARRAY
4728: ST_TO_ADDR
// end ; end ; DialogueOn ;
4729: CALL_OW 6
// if GetSex ( pom ) = sex_male then
4733: LD_LOC 2
4737: PPUSH
4738: CALL_OW 258
4742: PUSH
4743: LD_INT 1
4745: EQUAL
4746: IFFALSE 4762
// Say ( pom , D5a-Sol1-1 ) else
4748: LD_LOC 2
4752: PPUSH
4753: LD_STRING D5a-Sol1-1
4755: PPUSH
4756: CALL_OW 88
4760: GO 4774
// Say ( pom , D5a-FSol1-1 ) ;
4762: LD_LOC 2
4766: PPUSH
4767: LD_STRING D5a-FSol1-1
4769: PPUSH
4770: CALL_OW 88
// if GetSex ( pom1 ) = sex_male then
4774: LD_LOC 3
4778: PPUSH
4779: CALL_OW 258
4783: PUSH
4784: LD_INT 1
4786: EQUAL
4787: IFFALSE 4803
// Say ( pom1 , D5a-Sol2-1 ) else
4789: LD_LOC 3
4793: PPUSH
4794: LD_STRING D5a-Sol2-1
4796: PPUSH
4797: CALL_OW 88
4801: GO 4815
// Say ( pom1 , D5a-FSol2-1 ) ;
4803: LD_LOC 3
4807: PPUSH
4808: LD_STRING D5a-FSol2-1
4810: PPUSH
4811: CALL_OW 88
// DialogueOff ;
4815: CALL_OW 7
// if not disable_kecy_5D then
4819: LD_LOC 9
4823: NOT
4824: IFFALSE 4829
// enable ( 1 ) ;
4826: LD_INT 1
4828: ENABLE_MARKED
// kecy = false ;
4829: LD_ADDR_LOC 7
4833: PUSH
4834: LD_INT 0
4836: ST_TO_ADDR
// end ;
4837: END
// every 0 0$1 trigger not disable_kecy_5D marked 1 do
4838: LD_LOC 9
4842: NOT
4843: IFFALSE 5036
4845: GO 4847
4847: DISABLE
// begin while kecy do
4848: LD_LOC 7
4852: IFFALSE 4863
// wait ( 0 0$1 ) ;
4854: LD_INT 35
4856: PPUSH
4857: CALL_OW 67
4861: GO 4848
// kecy = true ;
4863: LD_ADDR_LOC 7
4867: PUSH
4868: LD_INT 1
4870: ST_TO_ADDR
// if IsOK ( Lisa ) then
4871: LD_EXP 37
4875: PPUSH
4876: CALL_OW 302
4880: IFFALSE 4896
// Say ( Lisa , D5d-Lisa-1 ) else
4882: LD_EXP 37
4886: PPUSH
4887: LD_STRING D5d-Lisa-1
4889: PPUSH
4890: CALL_OW 88
4894: GO 5008
// if IsOK ( Cyrus ) then
4896: LD_EXP 40
4900: PPUSH
4901: CALL_OW 302
4905: IFFALSE 4921
// Say ( Cyrus , D5d-Cyrus-1 ) else
4907: LD_EXP 40
4911: PPUSH
4912: LD_STRING D5d-Cyrus-1
4914: PPUSH
4915: CALL_OW 88
4919: GO 5008
// if IsOK ( Gary ) then
4921: LD_EXP 34
4925: PPUSH
4926: CALL_OW 302
4930: IFFALSE 4946
// Say ( Gary , D5d-Gary-1 ) else
4932: LD_EXP 34
4936: PPUSH
4937: LD_STRING D5d-Gary-1
4939: PPUSH
4940: CALL_OW 88
4944: GO 5008
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
4946: LD_ADDR_LOC 2
4950: PUSH
4951: LD_INT 22
4953: PUSH
4954: LD_EXP 1
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: PUSH
4963: LD_INT 21
4965: PUSH
4966: LD_INT 1
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: PPUSH
4977: CALL_OW 69
4981: ST_TO_ADDR
// if pom > 0 then
4982: LD_LOC 2
4986: PUSH
4987: LD_INT 0
4989: GREATER
4990: IFFALSE 5008
// Say ( pom [ 1 ] , D5d-Sol1-1 ) ;
4992: LD_LOC 2
4996: PUSH
4997: LD_INT 1
4999: ARRAY
5000: PPUSH
5001: LD_STRING D5d-Sol1-1
5003: PPUSH
5004: CALL_OW 88
// end ; Say ( JMM , D5d-JMM-1 ) ;
5008: LD_EXP 32
5012: PPUSH
5013: LD_STRING D5d-JMM-1
5015: PPUSH
5016: CALL_OW 88
// disable_kecy_5D = true ;
5020: LD_ADDR_LOC 9
5024: PUSH
5025: LD_INT 1
5027: ST_TO_ADDR
// kecy = false ;
5028: LD_ADDR_LOC 7
5032: PUSH
5033: LD_INT 0
5035: ST_TO_ADDR
// end ;
5036: END
// every 0 0$3 trigger GetSide ( A2_dep ) = You or IsDead ( A2_dep ) do var sci ;
5037: LD_INT 46
5039: PPUSH
5040: CALL_OW 255
5044: PUSH
5045: LD_EXP 1
5049: EQUAL
5050: PUSH
5051: LD_INT 46
5053: PPUSH
5054: CALL_OW 301
5058: OR
5059: IFFALSE 5319
5061: GO 5063
5063: DISABLE
5064: LD_INT 0
5066: PPUSH
// begin wait ( 0 0$1 ) ;
5067: LD_INT 35
5069: PPUSH
5070: CALL_OW 67
// CreateResourcesArea ( mat_artefact , 5 , Art_zone , false ) ;
5074: LD_INT 4
5076: PPUSH
5077: LD_INT 5
5079: PPUSH
5080: LD_INT 31
5082: PPUSH
5083: LD_INT 0
5085: PPUSH
5086: CALL_OW 59
// PlaceSeeing ( 16 , 9 , You , - 5 ) ;
5090: LD_INT 16
5092: PPUSH
5093: LD_INT 9
5095: PPUSH
5096: LD_EXP 1
5100: PPUSH
5101: LD_INT 5
5103: NEG
5104: PPUSH
5105: CALL_OW 330
// wait ( 0 0$1 ) ;
5109: LD_INT 35
5111: PPUSH
5112: CALL_OW 67
// DialogueOn ;
5116: CALL_OW 6
// CenterOnXY ( 17 , 10 ) ;
5120: LD_INT 17
5122: PPUSH
5123: LD_INT 10
5125: PPUSH
5126: CALL_OW 84
// pom = GetPeople ( sex_male , class_scientistic , [ JMM ] ) ;
5130: LD_ADDR_LOC 2
5134: PUSH
5135: LD_INT 1
5137: PPUSH
5138: LD_INT 4
5140: PPUSH
5141: LD_EXP 32
5145: PUSH
5146: EMPTY
5147: LIST
5148: PPUSH
5149: CALL 6667 0 3
5153: ST_TO_ADDR
// if pom then
5154: LD_LOC 2
5158: IFFALSE 5172
// sci = pom else
5160: LD_ADDR_VAR 0 1
5164: PUSH
5165: LD_LOC 2
5169: ST_TO_ADDR
5170: GO 5223
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff JMM ;
5172: LD_ADDR_VAR 0 1
5176: PUSH
5177: LD_INT 22
5179: PUSH
5180: LD_INT 1
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PUSH
5187: LD_INT 26
5189: PUSH
5190: LD_INT 1
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: PUSH
5197: LD_INT 23
5199: PUSH
5200: LD_INT 1
5202: PUSH
5203: EMPTY
5204: LIST
5205: LIST
5206: PUSH
5207: EMPTY
5208: LIST
5209: LIST
5210: LIST
5211: PPUSH
5212: CALL_OW 69
5216: PUSH
5217: LD_EXP 32
5221: DIFF
5222: ST_TO_ADDR
// if sci then
5223: LD_VAR 0 1
5227: IFFALSE 5285
// begin Say ( sci [ 1 ] , D6-Sci1-1 ) ;
5229: LD_VAR 0 1
5233: PUSH
5234: LD_INT 1
5236: ARRAY
5237: PPUSH
5238: LD_STRING D6-Sci1-1
5240: PPUSH
5241: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5245: LD_EXP 32
5249: PPUSH
5250: LD_STRING D6-JMM-1
5252: PPUSH
5253: CALL_OW 88
// Say ( sci [ 1 ] , D6-Sci1-2 ) ;
5257: LD_VAR 0 1
5261: PUSH
5262: LD_INT 1
5264: ARRAY
5265: PPUSH
5266: LD_STRING D6-Sci1-2
5268: PPUSH
5269: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
5273: LD_EXP 32
5277: PPUSH
5278: LD_STRING D6-JMM-2
5280: PPUSH
5281: CALL_OW 88
// end ; DialogueOff ;
5285: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
5289: LD_STRING M3
5291: PPUSH
5292: CALL_OW 337
// RemoveSeeing ( 16 , 9 , You ) ;
5296: LD_INT 16
5298: PPUSH
5299: LD_INT 9
5301: PPUSH
5302: LD_EXP 1
5306: PPUSH
5307: CALL_OW 331
// A2_dobyta = true ;
5311: LD_ADDR_EXP 29
5315: PUSH
5316: LD_INT 1
5318: ST_TO_ADDR
// end ;
5319: PPOPN 1
5321: END
// every 0 0$20 trigger A2_dobyta do
5322: LD_EXP 29
5326: IFFALSE 5665
5328: GO 5330
5330: DISABLE
// begin if A1_dobyta and A3_dobyta then
5331: LD_EXP 28
5335: PUSH
5336: LD_EXP 30
5340: AND
5341: IFFALSE 5345
// exit ;
5343: GO 5665
// wait ( 0 0$10 ) ;
5345: LD_INT 350
5347: PPUSH
5348: CALL_OW 67
// if not IsOK ( A3_solop ) then
5352: LD_INT 102
5354: PPUSH
5355: CALL_OW 302
5359: NOT
5360: IFFALSE 5364
// exit ;
5362: GO 5665
// DialogueOn ;
5364: CALL_OW 6
// pom = GetPeople ( sex_male , class_soldier , [ JMM , Cyrus , Gary , Bobby ] ) ;
5368: LD_ADDR_LOC 2
5372: PUSH
5373: LD_INT 1
5375: PPUSH
5376: LD_INT 1
5378: PPUSH
5379: LD_EXP 32
5383: PUSH
5384: LD_EXP 40
5388: PUSH
5389: LD_EXP 34
5393: PUSH
5394: LD_EXP 35
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: LIST
5403: LIST
5404: PPUSH
5405: CALL 6667 0 3
5409: ST_TO_ADDR
// if pom = 0 then
5410: LD_LOC 2
5414: PUSH
5415: LD_INT 0
5417: EQUAL
5418: IFFALSE 5444
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
5420: LD_ADDR_LOC 2
5424: PUSH
5425: LD_INT 1
5427: PPUSH
5428: LD_INT 1
5430: PPUSH
5431: LD_EXP 32
5435: PUSH
5436: EMPTY
5437: LIST
5438: PPUSH
5439: CALL 6667 0 3
5443: ST_TO_ADDR
// if pom = 0 then
5444: LD_LOC 2
5448: PUSH
5449: LD_INT 0
5451: EQUAL
5452: IFFALSE 5466
// pom = JMM else
5454: LD_ADDR_LOC 2
5458: PUSH
5459: LD_EXP 32
5463: ST_TO_ADDR
5464: GO 5480
// pom = pom [ 1 ] ;
5466: LD_ADDR_LOC 2
5470: PUSH
5471: LD_LOC 2
5475: PUSH
5476: LD_INT 1
5478: ARRAY
5479: ST_TO_ADDR
// Say ( pom , D7-Sol1-1 ) ;
5480: LD_LOC 2
5484: PPUSH
5485: LD_STRING D7-Sol1-1
5487: PPUSH
5488: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
5492: LD_EXP 32
5496: PPUSH
5497: LD_STRING D7-JMM-1
5499: PPUSH
5500: CALL_OW 88
// SayRadio ( A3_solop , D7-Ar1-1 ) ;
5504: LD_INT 102
5506: PPUSH
5507: LD_STRING D7-Ar1-1
5509: PPUSH
5510: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
5514: LD_EXP 32
5518: PPUSH
5519: LD_STRING D7-JMM-2
5521: PPUSH
5522: CALL_OW 88
// SayRadio ( A3_solop , D7-Ar1-2 ) ;
5526: LD_INT 102
5528: PPUSH
5529: LD_STRING D7-Ar1-2
5531: PPUSH
5532: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
5536: LD_EXP 32
5540: PPUSH
5541: LD_STRING D7-JMM-3
5543: PPUSH
5544: CALL_OW 88
// SayRadio ( A3_solop , D7-Ar1-3 ) ;
5548: LD_INT 102
5550: PPUSH
5551: LD_STRING D7-Ar1-3
5553: PPUSH
5554: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
5558: LD_EXP 32
5562: PPUSH
5563: LD_STRING D7-JMM-4
5565: PPUSH
5566: CALL_OW 88
// CenterOnXY ( 126 , 93 ) ;
5570: LD_INT 126
5572: PPUSH
5573: LD_INT 93
5575: PPUSH
5576: CALL_OW 84
// RevealFogArea ( You , Baziny ) ;
5580: LD_EXP 1
5584: PPUSH
5585: LD_INT 12
5587: PPUSH
5588: CALL_OW 332
// SayRadio ( A3_solop , D7-Ar1-4 ) ;
5592: LD_INT 102
5594: PPUSH
5595: LD_STRING D7-Ar1-4
5597: PPUSH
5598: CALL_OW 94
// pom = Query ( QCameras ) ;
5602: LD_ADDR_LOC 2
5606: PUSH
5607: LD_STRING QCameras
5609: PPUSH
5610: CALL_OW 97
5614: ST_TO_ADDR
// if pom = 1 then
5615: LD_LOC 2
5619: PUSH
5620: LD_INT 1
5622: EQUAL
5623: IFFALSE 5652
// begin oposoldier = 1 ;
5625: LD_ADDR_EXP 46
5629: PUSH
5630: LD_INT 1
5632: ST_TO_ADDR
// ChangeMissionObjectives ( MCar ) ;
5633: LD_STRING MCar
5635: PPUSH
5636: CALL_OW 337
// SetAreaMapShow ( baziny , 1 ) ;
5640: LD_INT 12
5642: PPUSH
5643: LD_INT 1
5645: PPUSH
5646: CALL_OW 424
// end else
5650: GO 5661
// oposoldier = - 1 ;
5652: LD_ADDR_EXP 46
5656: PUSH
5657: LD_INT 1
5659: NEG
5660: ST_TO_ADDR
// DialogueOff ;
5661: CALL_OW 7
// end ;
5665: END
// export function dialog_kamery ; begin
5666: LD_INT 0
5668: PPUSH
// if not IsOK ( A3_solop ) then
5669: LD_INT 102
5671: PPUSH
5672: CALL_OW 302
5676: NOT
5677: IFFALSE 5681
// exit ;
5679: GO 5783
// Say ( A3_solop , D7a-Ar1-1 ) ;
5681: LD_INT 102
5683: PPUSH
5684: LD_STRING D7a-Ar1-1
5686: PPUSH
5687: CALL_OW 88
// HiddenCamera ( 87 , 3 , You ) ;
5691: LD_INT 87
5693: PPUSH
5694: LD_INT 3
5696: PPUSH
5697: LD_EXP 1
5701: PPUSH
5702: CALL_OW 244
// HiddenCamera ( 105 , 39 , You ) ;
5706: LD_INT 105
5708: PPUSH
5709: LD_INT 39
5711: PPUSH
5712: LD_EXP 1
5716: PPUSH
5717: CALL_OW 244
// HiddenCamera ( 134 , 56 , You ) ;
5721: LD_INT 134
5723: PPUSH
5724: LD_INT 56
5726: PPUSH
5727: LD_EXP 1
5731: PPUSH
5732: CALL_OW 244
// HiddenCamera ( 122 , 51 , You ) ;
5736: LD_INT 122
5738: PPUSH
5739: LD_INT 51
5741: PPUSH
5742: LD_EXP 1
5746: PPUSH
5747: CALL_OW 244
// HiddenCamera ( 91 , 8 , You ) ;
5751: LD_INT 91
5753: PPUSH
5754: LD_INT 8
5756: PPUSH
5757: LD_EXP 1
5761: PPUSH
5762: CALL_OW 244
// ChangeMissionObjectives ( MCarOut ) ;
5766: LD_STRING MCarOut
5768: PPUSH
5769: CALL_OW 337
// SetAreaMapShow ( baziny , 0 ) ;
5773: LD_INT 12
5775: PPUSH
5776: LD_INT 0
5778: PPUSH
5779: CALL_OW 424
// end ;
5783: LD_VAR 0 1
5787: RET
// every 1 1$0 do
5788: GO 5790
5790: DISABLE
// begin wait ( timelimit [ difficulty ] ) ;
5791: LD_EXP 50
5795: PUSH
5796: LD_OWVAR 67
5800: ARRAY
5801: PPUSH
5802: CALL_OW 67
// InGameOn ;
5806: CALL_OW 8
// Say ( Powell , D9-Pow-1 ) ;
5810: LD_EXP 33
5814: PPUSH
5815: LD_STRING D9-Pow-1
5817: PPUSH
5818: CALL_OW 88
// InGameOff ;
5822: CALL_OW 9
// wait ( 10 10$0 ) ;
5826: LD_INT 21000
5828: PPUSH
5829: CALL_OW 67
// DialogueOn ;
5833: CALL_OW 6
// Say ( Powell , D9a-Pow-1 ) ;
5837: LD_EXP 33
5841: PPUSH
5842: LD_STRING D9a-Pow-1
5844: PPUSH
5845: CALL_OW 88
// end_of_mission_time ;
5849: CALL 462 0 0
// end ;
5853: END
// every 0 0$3 do
5854: GO 5856
5856: DISABLE
// begin pom1 = false ;
5857: LD_ADDR_LOC 3
5861: PUSH
5862: LD_INT 0
5864: ST_TO_ADDR
// pom = [ A3_are1 , A3_are2 , A3_are3 , A3_are4 , A3_are5 , A3_are6 , A3_are7 , A3_are8 , A3_are9 ] ;
5865: LD_ADDR_LOC 2
5869: PUSH
5870: LD_INT 23
5872: PUSH
5873: LD_INT 18
5875: PUSH
5876: LD_INT 44
5878: PUSH
5879: LD_INT 19
5881: PUSH
5882: LD_INT 24
5884: PUSH
5885: LD_INT 20
5887: PUSH
5888: LD_INT 21
5890: PUSH
5891: LD_INT 93
5893: PUSH
5894: LD_INT 22
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: ST_TO_ADDR
// for i in pom do
5908: LD_ADDR_LOC 1
5912: PUSH
5913: LD_LOC 2
5917: PUSH
5918: FOR_IN
5919: IFFALSE 5947
// if See ( You , i ) then
5921: LD_EXP 1
5925: PPUSH
5926: LD_LOC 1
5930: PPUSH
5931: CALL_OW 292
5935: IFFALSE 5945
// pom1 = true ;
5937: LD_ADDR_LOC 3
5941: PUSH
5942: LD_INT 1
5944: ST_TO_ADDR
5945: GO 5918
5947: POP
5948: POP
// if not pom1 then
5949: LD_LOC 3
5953: NOT
5954: IFFALSE 5959
// enable else
5956: ENABLE
5957: GO 6186
// begin if not ( IsOK ( A3_rv1 ) or IsOK ( A3_rv2 ) or IsOK ( A3_rv3 ) ) then
5959: LD_INT 26
5961: PPUSH
5962: CALL_OW 302
5966: PUSH
5967: LD_INT 25
5969: PPUSH
5970: CALL_OW 302
5974: OR
5975: PUSH
5976: LD_INT 27
5978: PPUSH
5979: CALL_OW 302
5983: OR
5984: NOT
5985: IFFALSE 5990
// begin disable ;
5987: DISABLE
// exit ;
5988: GO 6186
// end ; pom = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] ] ) ;
5990: LD_ADDR_LOC 2
5994: PUSH
5995: LD_INT 22
5997: PUSH
5998: LD_EXP 1
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: PUSH
6007: LD_INT 25
6009: PUSH
6010: LD_INT 1
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: PPUSH
6021: CALL_OW 69
6025: ST_TO_ADDR
// if pom = 0 then
6026: LD_LOC 2
6030: PUSH
6031: LD_INT 0
6033: EQUAL
6034: IFFALSE 6060
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
6036: LD_ADDR_LOC 2
6040: PUSH
6041: LD_INT 1
6043: PPUSH
6044: LD_INT 1
6046: PPUSH
6047: LD_EXP 32
6051: PUSH
6052: EMPTY
6053: LIST
6054: PPUSH
6055: CALL 6667 0 3
6059: ST_TO_ADDR
// if pom = 0 then
6060: LD_LOC 2
6064: PUSH
6065: LD_INT 0
6067: EQUAL
6068: IFFALSE 6088
// pom = GetPeople ( sex_female , class_soldier , [ ] ) ;
6070: LD_ADDR_LOC 2
6074: PUSH
6075: LD_INT 2
6077: PPUSH
6078: LD_INT 1
6080: PPUSH
6081: EMPTY
6082: PPUSH
6083: CALL 6667 0 3
6087: ST_TO_ADDR
// if pom = 0 then
6088: LD_LOC 2
6092: PUSH
6093: LD_INT 0
6095: EQUAL
6096: IFFALSE 6111
// pom = [ JMM ] ;
6098: LD_ADDR_LOC 2
6102: PUSH
6103: LD_EXP 32
6107: PUSH
6108: EMPTY
6109: LIST
6110: ST_TO_ADDR
// if GetSex ( pom [ 1 ] ) = sex_male then
6111: LD_LOC 2
6115: PUSH
6116: LD_INT 1
6118: ARRAY
6119: PPUSH
6120: CALL_OW 258
6124: PUSH
6125: LD_INT 1
6127: EQUAL
6128: IFFALSE 6148
// Say ( pom [ 1 ] , D8-Sol1-1 ) else
6130: LD_LOC 2
6134: PUSH
6135: LD_INT 1
6137: ARRAY
6138: PPUSH
6139: LD_STRING D8-Sol1-1
6141: PPUSH
6142: CALL_OW 88
6146: GO 6164
// Say ( pom [ 1 ] , D8-FSol1-1 ) ;
6148: LD_LOC 2
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: LD_STRING D8-FSol1-1
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
6164: LD_EXP 32
6168: PPUSH
6169: LD_STRING D8-JMM-1
6171: PPUSH
6172: CALL_OW 88
// wait ( 0 0$20 ) ;
6176: LD_INT 700
6178: PPUSH
6179: CALL_OW 67
// enable ( 2 ) ;
6183: LD_INT 2
6185: ENABLE_MARKED
// end ; end ;
6186: END
// every 0 0$5 marked 2 do
6187: GO 6189
6189: DISABLE
// begin pom1 = false ;
6190: LD_ADDR_LOC 3
6194: PUSH
6195: LD_INT 0
6197: ST_TO_ADDR
// pom = [ A3_rv1 , A3_rv2 , A3_rv3 ] ;
6198: LD_ADDR_LOC 2
6202: PUSH
6203: LD_INT 26
6205: PUSH
6206: LD_INT 25
6208: PUSH
6209: LD_INT 27
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: LIST
6216: ST_TO_ADDR
// for i in pom do
6217: LD_ADDR_LOC 1
6221: PUSH
6222: LD_LOC 2
6226: PUSH
6227: FOR_IN
6228: IFFALSE 6256
// if See ( You , i ) then
6230: LD_EXP 1
6234: PPUSH
6235: LD_LOC 1
6239: PPUSH
6240: CALL_OW 292
6244: IFFALSE 6254
// pom1 = true ;
6246: LD_ADDR_LOC 3
6250: PUSH
6251: LD_INT 1
6253: ST_TO_ADDR
6254: GO 6227
6256: POP
6257: POP
// if not pom1 then
6258: LD_LOC 3
6262: NOT
6263: IFFALSE 6268
// enable else
6265: ENABLE
6266: GO 6533
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] ] ) diff JMM ;
6268: LD_ADDR_LOC 2
6272: PUSH
6273: LD_INT 22
6275: PUSH
6276: LD_EXP 1
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PUSH
6285: LD_INT 25
6287: PUSH
6288: LD_INT 1
6290: PUSH
6291: EMPTY
6292: LIST
6293: LIST
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: PPUSH
6299: CALL_OW 69
6303: PUSH
6304: LD_EXP 32
6308: DIFF
6309: ST_TO_ADDR
// if pom = 0 then
6310: LD_LOC 2
6314: PUSH
6315: LD_INT 0
6317: EQUAL
6318: IFFALSE 6344
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
6320: LD_ADDR_LOC 2
6324: PUSH
6325: LD_INT 1
6327: PPUSH
6328: LD_INT 1
6330: PPUSH
6331: LD_EXP 32
6335: PUSH
6336: EMPTY
6337: LIST
6338: PPUSH
6339: CALL 6667 0 3
6343: ST_TO_ADDR
// if pom = 0 then
6344: LD_LOC 2
6348: PUSH
6349: LD_INT 0
6351: EQUAL
6352: IFFALSE 6378
// pom = GetPeople ( sex_female , class_soldier , [ JMM ] ) ;
6354: LD_ADDR_LOC 2
6358: PUSH
6359: LD_INT 2
6361: PPUSH
6362: LD_INT 1
6364: PPUSH
6365: LD_EXP 32
6369: PUSH
6370: EMPTY
6371: LIST
6372: PPUSH
6373: CALL 6667 0 3
6377: ST_TO_ADDR
// if pom = 0 then
6378: LD_LOC 2
6382: PUSH
6383: LD_INT 0
6385: EQUAL
6386: IFFALSE 6430
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) diff JMM ;
6388: LD_ADDR_LOC 2
6392: PUSH
6393: LD_INT 22
6395: PUSH
6396: LD_EXP 1
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: LD_INT 21
6407: PUSH
6408: LD_INT 1
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PPUSH
6419: CALL_OW 69
6423: PUSH
6424: LD_EXP 32
6428: DIFF
6429: ST_TO_ADDR
// if pom = 0 then
6430: LD_LOC 2
6434: PUSH
6435: LD_INT 0
6437: EQUAL
6438: IFFALSE 6442
// exit ;
6440: GO 6533
// DialogueOn ;
6442: CALL_OW 6
// CenterOnUnits ( [ A3_rv1 , A3_rv2 , A3_rv3 ] ) ;
6446: LD_INT 26
6448: PUSH
6449: LD_INT 25
6451: PUSH
6452: LD_INT 27
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: PPUSH
6460: CALL_OW 85
// if GetSex ( pom [ 1 ] ) = sex_male then
6464: LD_LOC 2
6468: PUSH
6469: LD_INT 1
6471: ARRAY
6472: PPUSH
6473: CALL_OW 258
6477: PUSH
6478: LD_INT 1
6480: EQUAL
6481: IFFALSE 6501
// Say ( pom [ 1 ] , D8a-Sol2-1 ) else
6483: LD_LOC 2
6487: PUSH
6488: LD_INT 1
6490: ARRAY
6491: PPUSH
6492: LD_STRING D8a-Sol2-1
6494: PPUSH
6495: CALL_OW 88
6499: GO 6517
// Say ( pom [ 1 ] , D8a-FSol2-1 ) ;
6501: LD_LOC 2
6505: PUSH
6506: LD_INT 1
6508: ARRAY
6509: PPUSH
6510: LD_STRING D8a-FSol2-1
6512: PPUSH
6513: CALL_OW 88
// Say ( JMM , D8a-JMM-1 ) ;
6517: LD_EXP 32
6521: PPUSH
6522: LD_STRING D8a-JMM-1
6524: PPUSH
6525: CALL_OW 88
// DialogueOff ;
6529: CALL_OW 7
// end ; end ;
6533: END
// every 0 0$0.1 trigger FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) > 0 do var pom ;
6534: LD_INT 3
6536: PPUSH
6537: LD_INT 22
6539: PUSH
6540: LD_EXP 1
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: PUSH
6549: EMPTY
6550: LIST
6551: PPUSH
6552: CALL_OW 70
6556: PUSH
6557: LD_INT 0
6559: GREATER
6560: IFFALSE 6664
6562: GO 6564
6564: DISABLE
6565: LD_INT 0
6567: PPUSH
// begin case Rand ( 1 , 3 ) of 1 :
6568: LD_INT 1
6570: PPUSH
6571: LD_INT 3
6573: PPUSH
6574: CALL_OW 12
6578: PUSH
6579: LD_INT 1
6581: DOUBLE
6582: EQUAL
6583: IFTRUE 6587
6585: GO 6598
6587: POP
// pom = A1_vo1 ; 2 :
6588: LD_ADDR_VAR 0 1
6592: PUSH
6593: LD_INT 72
6595: ST_TO_ADDR
6596: GO 6637
6598: LD_INT 2
6600: DOUBLE
6601: EQUAL
6602: IFTRUE 6606
6604: GO 6617
6606: POP
// pom = A1_ve1 ; 3 :
6607: LD_ADDR_VAR 0 1
6611: PUSH
6612: LD_INT 87
6614: ST_TO_ADDR
6615: GO 6637
6617: LD_INT 3
6619: DOUBLE
6620: EQUAL
6621: IFTRUE 6625
6623: GO 6636
6625: POP
// pom = A1_vo4 ; end ;
6626: LD_ADDR_VAR 0 1
6630: PUSH
6631: LD_INT 76
6633: ST_TO_ADDR
6634: GO 6637
6636: POP
// if IsOK ( pom ) then
6637: LD_VAR 0 1
6641: PPUSH
6642: CALL_OW 302
6646: IFFALSE 6660
// Say ( pom , D2aa-Ar1-1 ) ;
6648: LD_VAR 0 1
6652: PPUSH
6653: LD_STRING D2aa-Ar1-1
6655: PPUSH
6656: CALL_OW 88
// uprav_zivoty_arabskych_budov ;
6660: CALL 23448 0 0
// end ;
6664: PPOPN 1
6666: END
// function GetPeople ( sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 , pom5 , pom6 ; var pom1a , pom2a , pom3a , pom4a , pom5a , pom6a ; var j ; begin
6667: LD_INT 0
6669: PPUSH
6670: PPUSH
6671: PPUSH
6672: PPUSH
6673: PPUSH
6674: PPUSH
6675: PPUSH
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
6680: PPUSH
6681: PPUSH
6682: PPUSH
6683: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
6684: LD_ADDR_VAR 0 6
6688: PUSH
6689: LD_INT 22
6691: PUSH
6692: LD_EXP 1
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: PUSH
6701: LD_INT 25
6703: PUSH
6704: LD_INT 4
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: PUSH
6711: LD_INT 26
6713: PUSH
6714: LD_VAR 0 1
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: LIST
6727: PPUSH
6728: CALL_OW 69
6732: ST_TO_ADDR
// pom1a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
6733: LD_ADDR_VAR 0 12
6737: PUSH
6738: LD_INT 22
6740: PUSH
6741: LD_EXP 1
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: PUSH
6750: LD_INT 21
6752: PUSH
6753: LD_INT 2
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: PUSH
6760: LD_INT 33
6762: PUSH
6763: LD_INT 1
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: LIST
6774: PPUSH
6775: CALL_OW 69
6779: ST_TO_ADDR
// for j in pom1a do
6780: LD_ADDR_VAR 0 18
6784: PUSH
6785: LD_VAR 0 12
6789: PUSH
6790: FOR_IN
6791: IFFALSE 6831
// if GetClass ( Isdrivenby ( j ) ) = class_scientistic then
6793: LD_VAR 0 18
6797: PPUSH
6798: CALL_OW 311
6802: PPUSH
6803: CALL_OW 257
6807: PUSH
6808: LD_INT 4
6810: EQUAL
6811: IFFALSE 6829
// pom1 = pom1 ^ j ;
6813: LD_ADDR_VAR 0 6
6817: PUSH
6818: LD_VAR 0 6
6822: PUSH
6823: LD_VAR 0 18
6827: ADD
6828: ST_TO_ADDR
6829: GO 6790
6831: POP
6832: POP
// pom2 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
6833: LD_ADDR_VAR 0 7
6837: PUSH
6838: LD_INT 22
6840: PUSH
6841: LD_EXP 1
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PUSH
6850: LD_INT 25
6852: PUSH
6853: LD_INT 3
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PUSH
6860: LD_INT 26
6862: PUSH
6863: LD_VAR 0 1
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: LIST
6876: PPUSH
6877: CALL_OW 69
6881: ST_TO_ADDR
// pom2a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
6882: LD_ADDR_VAR 0 13
6886: PUSH
6887: LD_INT 22
6889: PUSH
6890: LD_EXP 1
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: PUSH
6899: LD_INT 21
6901: PUSH
6902: LD_INT 2
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: PUSH
6909: LD_INT 33
6911: PUSH
6912: LD_INT 1
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: LIST
6923: PPUSH
6924: CALL_OW 69
6928: ST_TO_ADDR
// for j in pom2a do
6929: LD_ADDR_VAR 0 18
6933: PUSH
6934: LD_VAR 0 13
6938: PUSH
6939: FOR_IN
6940: IFFALSE 6980
// if GetClass ( Isdrivenby ( j ) ) = class_mechanic then
6942: LD_VAR 0 18
6946: PPUSH
6947: CALL_OW 311
6951: PPUSH
6952: CALL_OW 257
6956: PUSH
6957: LD_INT 3
6959: EQUAL
6960: IFFALSE 6978
// pom2 = pom2 ^ j ;
6962: LD_ADDR_VAR 0 7
6966: PUSH
6967: LD_VAR 0 7
6971: PUSH
6972: LD_VAR 0 18
6976: ADD
6977: ST_TO_ADDR
6978: GO 6939
6980: POP
6981: POP
// pom3 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
6982: LD_ADDR_VAR 0 8
6986: PUSH
6987: LD_INT 22
6989: PUSH
6990: LD_EXP 1
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: PUSH
6999: LD_INT 25
7001: PUSH
7002: LD_INT 2
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: PUSH
7009: LD_INT 26
7011: PUSH
7012: LD_VAR 0 1
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: PPUSH
7026: CALL_OW 69
7030: ST_TO_ADDR
// pom3a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
7031: LD_ADDR_VAR 0 14
7035: PUSH
7036: LD_INT 22
7038: PUSH
7039: LD_EXP 1
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 21
7050: PUSH
7051: LD_INT 2
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: LD_INT 33
7060: PUSH
7061: LD_INT 1
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: LIST
7072: PPUSH
7073: CALL_OW 69
7077: ST_TO_ADDR
// for j in pom3a do
7078: LD_ADDR_VAR 0 18
7082: PUSH
7083: LD_VAR 0 14
7087: PUSH
7088: FOR_IN
7089: IFFALSE 7129
// if GetClass ( Isdrivenby ( j ) ) = class_engineer then
7091: LD_VAR 0 18
7095: PPUSH
7096: CALL_OW 311
7100: PPUSH
7101: CALL_OW 257
7105: PUSH
7106: LD_INT 2
7108: EQUAL
7109: IFFALSE 7127
// pom3 = pom3 ^ j ;
7111: LD_ADDR_VAR 0 8
7115: PUSH
7116: LD_VAR 0 8
7120: PUSH
7121: LD_VAR 0 18
7125: ADD
7126: ST_TO_ADDR
7127: GO 7088
7129: POP
7130: POP
// pom4 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
7131: LD_ADDR_VAR 0 9
7135: PUSH
7136: LD_INT 22
7138: PUSH
7139: LD_EXP 1
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 25
7150: PUSH
7151: LD_INT 1
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: LD_INT 26
7160: PUSH
7161: LD_VAR 0 1
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: LIST
7174: PPUSH
7175: CALL_OW 69
7179: ST_TO_ADDR
// pom4a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
7180: LD_ADDR_VAR 0 15
7184: PUSH
7185: LD_INT 22
7187: PUSH
7188: LD_EXP 1
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 21
7199: PUSH
7200: LD_INT 2
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 33
7209: PUSH
7210: LD_INT 1
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: LIST
7221: PPUSH
7222: CALL_OW 69
7226: ST_TO_ADDR
// for j in pom4a do
7227: LD_ADDR_VAR 0 18
7231: PUSH
7232: LD_VAR 0 15
7236: PUSH
7237: FOR_IN
7238: IFFALSE 7278
// if GetClass ( Isdrivenby ( j ) ) = class_soldier then
7240: LD_VAR 0 18
7244: PPUSH
7245: CALL_OW 311
7249: PPUSH
7250: CALL_OW 257
7254: PUSH
7255: LD_INT 1
7257: EQUAL
7258: IFFALSE 7276
// pom4 = pom4 ^ j ;
7260: LD_ADDR_VAR 0 9
7264: PUSH
7265: LD_VAR 0 9
7269: PUSH
7270: LD_VAR 0 18
7274: ADD
7275: ST_TO_ADDR
7276: GO 7237
7278: POP
7279: POP
// pom5 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_sniper ] , [ f_sex , sex ] ] ) ;
7280: LD_ADDR_VAR 0 10
7284: PUSH
7285: LD_INT 22
7287: PUSH
7288: LD_EXP 1
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: LD_INT 25
7299: PUSH
7300: LD_INT 5
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PUSH
7307: LD_INT 26
7309: PUSH
7310: LD_VAR 0 1
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: LIST
7323: PPUSH
7324: CALL_OW 69
7328: ST_TO_ADDR
// pom5a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
7329: LD_ADDR_VAR 0 16
7333: PUSH
7334: LD_INT 22
7336: PUSH
7337: LD_EXP 1
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: PUSH
7346: LD_INT 21
7348: PUSH
7349: LD_INT 2
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: PUSH
7356: LD_INT 33
7358: PUSH
7359: LD_INT 1
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: LIST
7370: PPUSH
7371: CALL_OW 69
7375: ST_TO_ADDR
// for j in pom5a do
7376: LD_ADDR_VAR 0 18
7380: PUSH
7381: LD_VAR 0 16
7385: PUSH
7386: FOR_IN
7387: IFFALSE 7427
// if GetClass ( Isdrivenby ( j ) ) = class_sniper then
7389: LD_VAR 0 18
7393: PPUSH
7394: CALL_OW 311
7398: PPUSH
7399: CALL_OW 257
7403: PUSH
7404: LD_INT 5
7406: EQUAL
7407: IFFALSE 7425
// pom5 = pom5 ^ j ;
7409: LD_ADDR_VAR 0 10
7413: PUSH
7414: LD_VAR 0 10
7418: PUSH
7419: LD_VAR 0 18
7423: ADD
7424: ST_TO_ADDR
7425: GO 7386
7427: POP
7428: POP
// pom6 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mortar ] , [ f_sex , sex ] ] ) ;
7429: LD_ADDR_VAR 0 11
7433: PUSH
7434: LD_INT 22
7436: PUSH
7437: LD_EXP 1
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 25
7448: PUSH
7449: LD_INT 8
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PUSH
7456: LD_INT 26
7458: PUSH
7459: LD_VAR 0 1
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: LIST
7472: PPUSH
7473: CALL_OW 69
7477: ST_TO_ADDR
// pom6a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
7478: LD_ADDR_VAR 0 17
7482: PUSH
7483: LD_INT 22
7485: PUSH
7486: LD_EXP 1
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PUSH
7495: LD_INT 21
7497: PUSH
7498: LD_INT 2
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PUSH
7505: LD_INT 33
7507: PUSH
7508: LD_INT 1
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: LIST
7519: PPUSH
7520: CALL_OW 69
7524: ST_TO_ADDR
// for j in pom6a do
7525: LD_ADDR_VAR 0 18
7529: PUSH
7530: LD_VAR 0 17
7534: PUSH
7535: FOR_IN
7536: IFFALSE 7576
// if GetClass ( Isdrivenby ( j ) ) = class_mortar then
7538: LD_VAR 0 18
7542: PPUSH
7543: CALL_OW 311
7547: PPUSH
7548: CALL_OW 257
7552: PUSH
7553: LD_INT 8
7555: EQUAL
7556: IFFALSE 7574
// pom6 = pom6 ^ j ;
7558: LD_ADDR_VAR 0 11
7562: PUSH
7563: LD_VAR 0 11
7567: PUSH
7568: LD_VAR 0 18
7572: ADD
7573: ST_TO_ADDR
7574: GO 7535
7576: POP
7577: POP
// case povolani of class_scientistic :
7578: LD_VAR 0 2
7582: PUSH
7583: LD_INT 4
7585: DOUBLE
7586: EQUAL
7587: IFTRUE 7591
7589: GO 7604
7591: POP
// pom = pom1 ; class_mechanic :
7592: LD_ADDR_VAR 0 5
7596: PUSH
7597: LD_VAR 0 6
7601: ST_TO_ADDR
7602: GO 7710
7604: LD_INT 3
7606: DOUBLE
7607: EQUAL
7608: IFTRUE 7612
7610: GO 7625
7612: POP
// pom = pom2 ; class_engineer :
7613: LD_ADDR_VAR 0 5
7617: PUSH
7618: LD_VAR 0 7
7622: ST_TO_ADDR
7623: GO 7710
7625: LD_INT 2
7627: DOUBLE
7628: EQUAL
7629: IFTRUE 7633
7631: GO 7646
7633: POP
// pom = pom3 ; class_soldier :
7634: LD_ADDR_VAR 0 5
7638: PUSH
7639: LD_VAR 0 8
7643: ST_TO_ADDR
7644: GO 7710
7646: LD_INT 1
7648: DOUBLE
7649: EQUAL
7650: IFTRUE 7654
7652: GO 7667
7654: POP
// pom = pom4 ; class_sniper :
7655: LD_ADDR_VAR 0 5
7659: PUSH
7660: LD_VAR 0 9
7664: ST_TO_ADDR
7665: GO 7710
7667: LD_INT 5
7669: DOUBLE
7670: EQUAL
7671: IFTRUE 7675
7673: GO 7688
7675: POP
// pom = pom5 ; class_mortar :
7676: LD_ADDR_VAR 0 5
7680: PUSH
7681: LD_VAR 0 10
7685: ST_TO_ADDR
7686: GO 7710
7688: LD_INT 8
7690: DOUBLE
7691: EQUAL
7692: IFTRUE 7696
7694: GO 7709
7696: POP
// pom = pom6 ; end ;
7697: LD_ADDR_VAR 0 5
7701: PUSH
7702: LD_VAR 0 11
7706: ST_TO_ADDR
7707: GO 7710
7709: POP
// if povolani <> class_scientistic then
7710: LD_VAR 0 2
7714: PUSH
7715: LD_INT 4
7717: NONEQUAL
7718: IFFALSE 7736
// pom = pom ^ pom1 ;
7720: LD_ADDR_VAR 0 5
7724: PUSH
7725: LD_VAR 0 5
7729: PUSH
7730: LD_VAR 0 6
7734: ADD
7735: ST_TO_ADDR
// if povolani <> class_mechanic then
7736: LD_VAR 0 2
7740: PUSH
7741: LD_INT 3
7743: NONEQUAL
7744: IFFALSE 7762
// pom = pom ^ pom2 ;
7746: LD_ADDR_VAR 0 5
7750: PUSH
7751: LD_VAR 0 5
7755: PUSH
7756: LD_VAR 0 7
7760: ADD
7761: ST_TO_ADDR
// if povolani <> class_engineer then
7762: LD_VAR 0 2
7766: PUSH
7767: LD_INT 2
7769: NONEQUAL
7770: IFFALSE 7788
// pom = pom ^ pom3 ;
7772: LD_ADDR_VAR 0 5
7776: PUSH
7777: LD_VAR 0 5
7781: PUSH
7782: LD_VAR 0 8
7786: ADD
7787: ST_TO_ADDR
// if povolani <> class_soldier then
7788: LD_VAR 0 2
7792: PUSH
7793: LD_INT 1
7795: NONEQUAL
7796: IFFALSE 7814
// pom = pom ^ pom4 ;
7798: LD_ADDR_VAR 0 5
7802: PUSH
7803: LD_VAR 0 5
7807: PUSH
7808: LD_VAR 0 9
7812: ADD
7813: ST_TO_ADDR
// if povolani <> class_sniper then
7814: LD_VAR 0 2
7818: PUSH
7819: LD_INT 5
7821: NONEQUAL
7822: IFFALSE 7840
// pom = pom ^ pom5 ;
7824: LD_ADDR_VAR 0 5
7828: PUSH
7829: LD_VAR 0 5
7833: PUSH
7834: LD_VAR 0 10
7838: ADD
7839: ST_TO_ADDR
// if povolani <> class_mortar then
7840: LD_VAR 0 2
7844: PUSH
7845: LD_INT 8
7847: NONEQUAL
7848: IFFALSE 7866
// pom = pom ^ pom6 ;
7850: LD_ADDR_VAR 0 5
7854: PUSH
7855: LD_VAR 0 5
7859: PUSH
7860: LD_VAR 0 11
7864: ADD
7865: ST_TO_ADDR
// result := pom diff diffseznam ;
7866: LD_ADDR_VAR 0 4
7870: PUSH
7871: LD_VAR 0 5
7875: PUSH
7876: LD_VAR 0 3
7880: DIFF
7881: ST_TO_ADDR
// end ;
7882: LD_VAR 0 4
7886: RET
// export function query_konec_mise ; var pom ; begin
7887: LD_INT 0
7889: PPUSH
7890: PPUSH
// pom = Query ( QEndMission ) ;
7891: LD_ADDR_VAR 0 2
7895: PUSH
7896: LD_STRING QEndMission
7898: PPUSH
7899: CALL_OW 97
7903: ST_TO_ADDR
// result := pom ;
7904: LD_ADDR_VAR 0 1
7908: PUSH
7909: LD_VAR 0 2
7913: ST_TO_ADDR
// end ;
7914: LD_VAR 0 1
7918: RET
// every 0 0$1 do var pom ; var jedn ;
7919: GO 7921
7921: DISABLE
7922: LD_INT 0
7924: PPUSH
7925: PPUSH
// begin jedn = 0 ;
7926: LD_ADDR_VAR 0 2
7930: PUSH
7931: LD_INT 0
7933: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , Arabi ] , [ f_type , unit_human ] , [ f_see , You ] ] ) ;
7934: LD_ADDR_VAR 0 1
7938: PUSH
7939: LD_INT 22
7941: PUSH
7942: LD_EXP 3
7946: PUSH
7947: EMPTY
7948: LIST
7949: LIST
7950: PUSH
7951: LD_INT 21
7953: PUSH
7954: LD_INT 1
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: PUSH
7961: LD_INT 101
7963: PUSH
7964: LD_EXP 1
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: LIST
7977: PPUSH
7978: CALL_OW 69
7982: ST_TO_ADDR
// for i in pom do
7983: LD_ADDR_LOC 1
7987: PUSH
7988: LD_VAR 0 1
7992: PUSH
7993: FOR_IN
7994: IFFALSE 8023
// if GetLives ( i ) < 250 then
7996: LD_LOC 1
8000: PPUSH
8001: CALL_OW 256
8005: PUSH
8006: LD_INT 250
8008: LESS
8009: IFFALSE 8021
// jedn = i ;
8011: LD_ADDR_VAR 0 2
8015: PUSH
8016: LD_LOC 1
8020: ST_TO_ADDR
8021: GO 7993
8023: POP
8024: POP
// if jedn <> 0 then
8025: LD_VAR 0 2
8029: PUSH
8030: LD_INT 0
8032: NONEQUAL
8033: IFFALSE 8044
// Hint ( stimulationdrugs ) else
8035: LD_STRING stimulationdrugs
8037: PPUSH
8038: CALL_OW 339
8042: GO 8045
// enable ;
8044: ENABLE
// end ; end_of_file
8045: PPOPN 2
8047: END
// export CREATE_AR_PROTIOFENZIVU_LIST ; export JEDNOTKY_BAZE_2_LIST ; export JEDNOTKY_BAZE_3_LIST ; export Ar_utok1_LIST ; export Ar_utok2_LIST ; export Ar_utok3_LIST ; export Ar_utok4_LIST ; export Ar_utoklast_LIST ; export AR_backa_LIST ; export GARYL ; export LISAL ; export YAML ; export FRANKL ; export CORNELL ; export BOBL ; export CYRL ; export DONL ; export BROWNL ; var ah , av ; function prepare_human ( sex , clas , level , name ) ; begin
8048: LD_INT 0
8050: PPUSH
// PrepareHuman ( sex , clas , level ) ;
8051: LD_VAR 0 1
8055: PPUSH
8056: LD_VAR 0 2
8060: PPUSH
8061: LD_VAR 0 3
8065: PPUSH
8066: CALL_OW 380
// hc_name := name ;
8070: LD_ADDR_OWVAR 26
8074: PUSH
8075: LD_VAR 0 4
8079: ST_TO_ADDR
// end ;
8080: LD_VAR 0 5
8084: RET
// export function nacti_osobu ( ident ) ; begin
8085: LD_INT 0
8087: PPUSH
// if CheckCharacterSet ( ident ) then
8088: LD_VAR 0 1
8092: PPUSH
8093: CALL_OW 29
8097: IFFALSE 8116
// result := CreateCharacter ( ident ) else
8099: LD_ADDR_VAR 0 2
8103: PUSH
8104: LD_VAR 0 1
8108: PPUSH
8109: CALL_OW 34
8113: ST_TO_ADDR
8114: GO 8124
// result := 0 ;
8116: LD_ADDR_VAR 0 2
8120: PUSH
8121: LD_INT 0
8123: ST_TO_ADDR
// end ;
8124: LD_VAR 0 2
8128: RET
// export function create_amici ; var i ; begin
8129: LD_INT 0
8131: PPUSH
8132: PPUSH
// uc_side = You ;
8133: LD_ADDR_OWVAR 20
8137: PUSH
8138: LD_EXP 1
8142: ST_TO_ADDR
// uc_nation = nation_american ;
8143: LD_ADDR_OWVAR 21
8147: PUSH
8148: LD_INT 1
8150: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
8151: LD_ADDR_OWVAR 37
8155: PUSH
8156: LD_INT 3
8158: ST_TO_ADDR
// vc_control = control_computer ;
8159: LD_ADDR_OWVAR 38
8163: PUSH
8164: LD_INT 3
8166: ST_TO_ADDR
// vc_engine = engine_solar ;
8167: LD_ADDR_OWVAR 39
8171: PUSH
8172: LD_INT 2
8174: ST_TO_ADDR
// vc_weapon = us_radar ;
8175: LD_ADDR_OWVAR 40
8179: PUSH
8180: LD_INT 11
8182: ST_TO_ADDR
// av = CreateVehicle ;
8183: LD_ADDR_LOC 11
8187: PUSH
8188: CALL_OW 45
8192: ST_TO_ADDR
// Radar_enter := av ;
8193: LD_ADDR_EXP 44
8197: PUSH
8198: LD_LOC 11
8202: ST_TO_ADDR
// PlaceUnitXY ( av , 85 , 145 , false ) ;
8203: LD_LOC 11
8207: PPUSH
8208: LD_INT 85
8210: PPUSH
8211: LD_INT 145
8213: PPUSH
8214: LD_INT 0
8216: PPUSH
8217: CALL_OW 48
// for i in Amici_enter do
8221: LD_ADDR_VAR 0 2
8225: PUSH
8226: LD_EXP 43
8230: PUSH
8231: FOR_IN
8232: IFFALSE 8251
// PlaceUnitArea ( i , AMEnter , false ) ;
8234: LD_VAR 0 2
8238: PPUSH
8239: LD_INT 1
8241: PPUSH
8242: LD_INT 0
8244: PPUSH
8245: CALL_OW 49
8249: GO 8231
8251: POP
8252: POP
// end ;
8253: LD_VAR 0 1
8257: RET
// export function create_ar_protiofenzivu ; var pom ; begin
8258: LD_INT 0
8260: PPUSH
8261: PPUSH
// pom = [ ] ;
8262: LD_ADDR_VAR 0 2
8266: PUSH
8267: EMPTY
8268: ST_TO_ADDR
// uc_side := Arabi ;
8269: LD_ADDR_OWVAR 20
8273: PUSH
8274: LD_EXP 3
8278: ST_TO_ADDR
// uc_nation := nation_arabian ;
8279: LD_ADDR_OWVAR 21
8283: PUSH
8284: LD_INT 2
8286: ST_TO_ADDR
// uc_direction := 3 ;
8287: LD_ADDR_OWVAR 24
8291: PUSH
8292: LD_INT 3
8294: ST_TO_ADDR
// prepare_human ( sex_male , class_mechanic , Ar_levely [ difficulty ] , Hasam El Azis ) ;
8295: LD_INT 1
8297: PPUSH
8298: LD_INT 3
8300: PPUSH
8301: LD_EXP 49
8305: PUSH
8306: LD_OWVAR 67
8310: ARRAY
8311: PPUSH
8312: LD_STRING Hasam El Azis
8314: PPUSH
8315: CALL 8048 0 4
// ah = CreateHuman ;
8319: LD_ADDR_LOC 10
8323: PUSH
8324: CALL_OW 44
8328: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
8329: LD_ADDR_OWVAR 37
8333: PUSH
8334: LD_INT 14
8336: ST_TO_ADDR
// vc_control := control_manual ;
8337: LD_ADDR_OWVAR 38
8341: PUSH
8342: LD_INT 1
8344: ST_TO_ADDR
// vc_engine := engine_combustion ;
8345: LD_ADDR_OWVAR 39
8349: PUSH
8350: LD_INT 1
8352: ST_TO_ADDR
// vc_weapon := ar_gun ;
8353: LD_ADDR_OWVAR 40
8357: PUSH
8358: LD_INT 27
8360: ST_TO_ADDR
// av = CreateVehicle ;
8361: LD_ADDR_LOC 11
8365: PUSH
8366: CALL_OW 45
8370: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
8371: LD_LOC 10
8375: PPUSH
8376: LD_LOC 11
8380: PPUSH
8381: CALL_OW 52
// pom = pom ^ av ;
8385: LD_ADDR_VAR 0 2
8389: PUSH
8390: LD_VAR 0 2
8394: PUSH
8395: LD_LOC 11
8399: ADD
8400: ST_TO_ADDR
// prepare_human ( sex_female , class_mechanic , Ar_levely [ difficulty ] - 2 ,  ) ;
8401: LD_INT 2
8403: PPUSH
8404: LD_INT 3
8406: PPUSH
8407: LD_EXP 49
8411: PUSH
8412: LD_OWVAR 67
8416: ARRAY
8417: PUSH
8418: LD_INT 2
8420: MINUS
8421: PPUSH
8422: LD_STRING 
8424: PPUSH
8425: CALL 8048 0 4
// ah = CreateHuman ;
8429: LD_ADDR_LOC 10
8433: PUSH
8434: CALL_OW 44
8438: ST_TO_ADDR
// vc_chassis := ar_light_trike ;
8439: LD_ADDR_OWVAR 37
8443: PUSH
8444: LD_INT 12
8446: ST_TO_ADDR
// vc_control := control_manual ;
8447: LD_ADDR_OWVAR 38
8451: PUSH
8452: LD_INT 1
8454: ST_TO_ADDR
// vc_engine := engine_solar ;
8455: LD_ADDR_OWVAR 39
8459: PUSH
8460: LD_INT 2
8462: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
8463: LD_ADDR_OWVAR 40
8467: PUSH
8468: LD_INT 24
8470: ST_TO_ADDR
// av = CreateVehicle ;
8471: LD_ADDR_LOC 11
8475: PUSH
8476: CALL_OW 45
8480: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
8481: LD_LOC 10
8485: PPUSH
8486: LD_LOC 11
8490: PPUSH
8491: CALL_OW 52
// pom = pom ^ av ;
8495: LD_ADDR_VAR 0 2
8499: PUSH
8500: LD_VAR 0 2
8504: PUSH
8505: LD_LOC 11
8509: ADD
8510: ST_TO_ADDR
// if difficulty > 1 then
8511: LD_OWVAR 67
8515: PUSH
8516: LD_INT 1
8518: GREATER
8519: IFFALSE 8553
// begin ah = get_human ( get_sex , class_soldier , Ar_levely [ difficulty ] ,  ) ;
8521: LD_ADDR_LOC 10
8525: PUSH
8526: CALL 10585 0 0
8530: PPUSH
8531: LD_INT 1
8533: PPUSH
8534: LD_EXP 49
8538: PUSH
8539: LD_OWVAR 67
8543: ARRAY
8544: PPUSH
8545: LD_STRING 
8547: PPUSH
8548: CALL 14156 0 4
8552: ST_TO_ADDR
// end ; if difficulty > 2 then
8553: LD_OWVAR 67
8557: PUSH
8558: LD_INT 2
8560: GREATER
8561: IFFALSE 8621
// begin vc_chassis := ar_medium_trike ;
8563: LD_ADDR_OWVAR 37
8567: PUSH
8568: LD_INT 13
8570: ST_TO_ADDR
// vc_control := control_apeman ;
8571: LD_ADDR_OWVAR 38
8575: PUSH
8576: LD_INT 5
8578: ST_TO_ADDR
// vc_engine := engine_siberite ;
8579: LD_ADDR_OWVAR 39
8583: PUSH
8584: LD_INT 3
8586: ST_TO_ADDR
// vc_weapon := ar_multimissile_ballista ;
8587: LD_ADDR_OWVAR 40
8591: PUSH
8592: LD_INT 22
8594: ST_TO_ADDR
// av = CreateVehicle ;
8595: LD_ADDR_LOC 11
8599: PUSH
8600: CALL_OW 45
8604: ST_TO_ADDR
// pom = pom ^ av ;
8605: LD_ADDR_VAR 0 2
8609: PUSH
8610: LD_VAR 0 2
8614: PUSH
8615: LD_LOC 11
8619: ADD
8620: ST_TO_ADDR
// end ; CREATE_AR_PROTIOFENZIVU_LIST := pom ;
8621: LD_ADDR_EXP 10
8625: PUSH
8626: LD_VAR 0 2
8630: ST_TO_ADDR
// end ;
8631: LD_VAR 0 1
8635: RET
// export function create_auto_pro_solopa ; begin
8636: LD_INT 0
8638: PPUSH
// uc_side := Arabi ;
8639: LD_ADDR_OWVAR 20
8643: PUSH
8644: LD_EXP 3
8648: ST_TO_ADDR
// uc_nation := nation_arabian ;
8649: LD_ADDR_OWVAR 21
8653: PUSH
8654: LD_INT 2
8656: ST_TO_ADDR
// uc_direction := 3 ;
8657: LD_ADDR_OWVAR 24
8661: PUSH
8662: LD_INT 3
8664: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
8665: LD_ADDR_OWVAR 37
8669: PUSH
8670: LD_INT 14
8672: ST_TO_ADDR
// vc_control := control_manual ;
8673: LD_ADDR_OWVAR 38
8677: PUSH
8678: LD_INT 1
8680: ST_TO_ADDR
// vc_engine := engine_siberite ;
8681: LD_ADDR_OWVAR 39
8685: PUSH
8686: LD_INT 3
8688: ST_TO_ADDR
// vc_weapon := ar_gun ;
8689: LD_ADDR_OWVAR 40
8693: PUSH
8694: LD_INT 27
8696: ST_TO_ADDR
// av := CreateVehicle ;
8697: LD_ADDR_LOC 11
8701: PUSH
8702: CALL_OW 45
8706: ST_TO_ADDR
// result := av ;
8707: LD_ADDR_VAR 0 1
8711: PUSH
8712: LD_LOC 11
8716: ST_TO_ADDR
// end ;
8717: LD_VAR 0 1
8721: RET
// var pom3 , pom4 , pom5 , pom6 , pom1 ; export function dodej_skily ; var pom , i ; begin
8722: LD_INT 0
8724: PPUSH
8725: PPUSH
8726: PPUSH
// uprav_cloveka ( A2_mor3 , class_mortar , Ar_levely [ difficulty ] ) ;
8727: LD_INT 92
8729: PPUSH
8730: LD_INT 8
8732: PPUSH
8733: LD_EXP 49
8737: PUSH
8738: LD_OWVAR 67
8742: ARRAY
8743: PPUSH
8744: CALL 8988 0 3
// uprav_cloveka ( A2_zas1 , class_soldier , Ar_levely [ difficulty ] ) ;
8748: LD_INT 82
8750: PPUSH
8751: LD_INT 1
8753: PPUSH
8754: LD_EXP 49
8758: PUSH
8759: LD_OWVAR 67
8763: ARRAY
8764: PPUSH
8765: CALL 8988 0 3
// uprav_cloveka ( A2_zas2 , class_soldier , Ar_levely [ difficulty ] ) ;
8769: LD_INT 83
8771: PPUSH
8772: LD_INT 1
8774: PPUSH
8775: LD_EXP 49
8779: PUSH
8780: LD_OWVAR 67
8784: ARRAY
8785: PPUSH
8786: CALL 8988 0 3
// uprav_cloveka ( A3_zas1 , class_soldier , Ar_levely [ difficulty ] ) ;
8790: LD_INT 101
8792: PPUSH
8793: LD_INT 1
8795: PPUSH
8796: LD_EXP 49
8800: PUSH
8801: LD_OWVAR 67
8805: ARRAY
8806: PPUSH
8807: CALL 8988 0 3
// uprav_cloveka ( A3_solop , class_engineer , Ar_levely [ difficulty ] ) ;
8811: LD_INT 102
8813: PPUSH
8814: LD_INT 2
8816: PPUSH
8817: LD_EXP 49
8821: PUSH
8822: LD_OWVAR 67
8826: ARRAY
8827: PPUSH
8828: CALL 8988 0 3
// pom = [ A3_rme1 , A3_rme2 , A3_rme3 ] ;
8832: LD_ADDR_VAR 0 2
8836: PUSH
8837: LD_INT 96
8839: PUSH
8840: LD_INT 95
8842: PUSH
8843: LD_INT 94
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: LIST
8850: ST_TO_ADDR
// for i in pom do
8851: LD_ADDR_VAR 0 3
8855: PUSH
8856: LD_VAR 0 2
8860: PUSH
8861: FOR_IN
8862: IFFALSE 8889
// uprav_cloveka ( i , class_mechanic , Ar_levely [ difficulty ] ) ;
8864: LD_VAR 0 3
8868: PPUSH
8869: LD_INT 3
8871: PPUSH
8872: LD_EXP 49
8876: PUSH
8877: LD_OWVAR 67
8881: ARRAY
8882: PPUSH
8883: CALL 8988 0 3
8887: GO 8861
8889: POP
8890: POP
// end ;
8891: LD_VAR 0 1
8895: RET
// function set_skills ( un , skills ) ; begin
8896: LD_INT 0
8898: PPUSH
// SetSkill ( un , skill_combat , skills [ 1 ] ) ;
8899: LD_VAR 0 1
8903: PPUSH
8904: LD_INT 1
8906: PPUSH
8907: LD_VAR 0 2
8911: PUSH
8912: LD_INT 1
8914: ARRAY
8915: PPUSH
8916: CALL_OW 237
// SetSkill ( un , skill_engineering , skills [ 2 ] ) ;
8920: LD_VAR 0 1
8924: PPUSH
8925: LD_INT 2
8927: PPUSH
8928: LD_VAR 0 2
8932: PUSH
8933: LD_INT 2
8935: ARRAY
8936: PPUSH
8937: CALL_OW 237
// SetSkill ( un , skill_mechanical , skills [ 3 ] ) ;
8941: LD_VAR 0 1
8945: PPUSH
8946: LD_INT 3
8948: PPUSH
8949: LD_VAR 0 2
8953: PUSH
8954: LD_INT 3
8956: ARRAY
8957: PPUSH
8958: CALL_OW 237
// SetSkill ( un , skill_scientistic , skills [ 4 ] ) ;
8962: LD_VAR 0 1
8966: PPUSH
8967: LD_INT 4
8969: PPUSH
8970: LD_VAR 0 2
8974: PUSH
8975: LD_INT 4
8977: ARRAY
8978: PPUSH
8979: CALL_OW 237
// end ;
8983: LD_VAR 0 3
8987: RET
// function uprav_cloveka ( un , clas , lev ) ; begin
8988: LD_INT 0
8990: PPUSH
// prepare_human ( sex_male , clas , lev ,  ) ;
8991: LD_INT 1
8993: PPUSH
8994: LD_VAR 0 2
8998: PPUSH
8999: LD_VAR 0 3
9003: PPUSH
9004: LD_STRING 
9006: PPUSH
9007: CALL 8048 0 4
// ah = CreateHuman ;
9011: LD_ADDR_LOC 10
9015: PUSH
9016: CALL_OW 44
9020: ST_TO_ADDR
// pom1 = get_skills ( ah ) ;
9021: LD_ADDR_LOC 16
9025: PUSH
9026: LD_LOC 10
9030: PPUSH
9031: CALL 12552 0 1
9035: ST_TO_ADDR
// set_skills ( un , get_skills ( ah ) ) ;
9036: LD_VAR 0 1
9040: PPUSH
9041: LD_LOC 10
9045: PPUSH
9046: CALL 12552 0 1
9050: PPUSH
9051: CALL 8896 0 2
// DestroyUnit ( ah ) ;
9055: LD_LOC 10
9059: PPUSH
9060: CALL_OW 65
// end ;
9064: LD_VAR 0 4
9068: RET
// export function vytvor_opravare ; var pom ; begin
9069: LD_INT 0
9071: PPUSH
9072: PPUSH
// uc_side := Arabi ;
9073: LD_ADDR_OWVAR 20
9077: PUSH
9078: LD_EXP 3
9082: ST_TO_ADDR
// uc_nation := nation_arabian ;
9083: LD_ADDR_OWVAR 21
9087: PUSH
9088: LD_INT 2
9090: ST_TO_ADDR
// uc_direction := 3 ;
9091: LD_ADDR_OWVAR 24
9095: PUSH
9096: LD_INT 3
9098: ST_TO_ADDR
// pom = [ ] ;
9099: LD_ADDR_VAR 0 2
9103: PUSH
9104: EMPTY
9105: ST_TO_ADDR
// if difficulty < 3 then
9106: LD_OWVAR 67
9110: PUSH
9111: LD_INT 3
9113: LESS
9114: IFFALSE 9188
// begin prepare_human ( sex_male , class_engineer , Ar_levely [ difficulty ] + 1 , Gru Pakansu ) ;
9116: LD_INT 1
9118: PPUSH
9119: LD_INT 2
9121: PPUSH
9122: LD_EXP 49
9126: PUSH
9127: LD_OWVAR 67
9131: ARRAY
9132: PUSH
9133: LD_INT 1
9135: PLUS
9136: PPUSH
9137: LD_STRING Gru Pakansu
9139: PPUSH
9140: CALL 8048 0 4
// ah = CreateHuman ;
9144: LD_ADDR_LOC 10
9148: PUSH
9149: CALL_OW 44
9153: ST_TO_ADDR
// PlaceUnitXY ( ah , 19 , 6 , false ) ;
9154: LD_LOC 10
9158: PPUSH
9159: LD_INT 19
9161: PPUSH
9162: LD_INT 6
9164: PPUSH
9165: LD_INT 0
9167: PPUSH
9168: CALL_OW 48
// pom = pom ^ ah ;
9172: LD_ADDR_VAR 0 2
9176: PUSH
9177: LD_VAR 0 2
9181: PUSH
9182: LD_LOC 10
9186: ADD
9187: ST_TO_ADDR
// end ; if difficulty < 2 then
9188: LD_OWVAR 67
9192: PUSH
9193: LD_INT 2
9195: LESS
9196: IFFALSE 9272
// begin prepare_human ( get_sex , class_engineer , Ar_levely [ difficulty ] + 2 ,  ) ;
9198: CALL 10585 0 0
9202: PPUSH
9203: LD_INT 2
9205: PPUSH
9206: LD_EXP 49
9210: PUSH
9211: LD_OWVAR 67
9215: ARRAY
9216: PUSH
9217: LD_INT 2
9219: PLUS
9220: PPUSH
9221: LD_STRING 
9223: PPUSH
9224: CALL 8048 0 4
// ah = CreateHuman ;
9228: LD_ADDR_LOC 10
9232: PUSH
9233: CALL_OW 44
9237: ST_TO_ADDR
// PlaceUnitXY ( ah , 25 , 1 , false ) ;
9238: LD_LOC 10
9242: PPUSH
9243: LD_INT 25
9245: PPUSH
9246: LD_INT 1
9248: PPUSH
9249: LD_INT 0
9251: PPUSH
9252: CALL_OW 48
// pom = pom ^ ah ;
9256: LD_ADDR_VAR 0 2
9260: PUSH
9261: LD_VAR 0 2
9265: PUSH
9266: LD_LOC 10
9270: ADD
9271: ST_TO_ADDR
// end ; result := pom ;
9272: LD_ADDR_VAR 0 1
9276: PUSH
9277: LD_VAR 0 2
9281: ST_TO_ADDR
// end ;
9282: LD_VAR 0 1
9286: RET
// export function vojcli_base_2 ; var pom ; var i , j ; begin
9287: LD_INT 0
9289: PPUSH
9290: PPUSH
9291: PPUSH
9292: PPUSH
// pom = [ ] ;
9293: LD_ADDR_VAR 0 2
9297: PUSH
9298: EMPTY
9299: ST_TO_ADDR
// uc_side := Arabi ;
9300: LD_ADDR_OWVAR 20
9304: PUSH
9305: LD_EXP 3
9309: ST_TO_ADDR
// uc_nation := nation_arabian ;
9310: LD_ADDR_OWVAR 21
9314: PUSH
9315: LD_INT 2
9317: ST_TO_ADDR
// uc_direction := 0 ;
9318: LD_ADDR_OWVAR 24
9322: PUSH
9323: LD_INT 0
9325: ST_TO_ADDR
// for i = 1 to 7 do
9326: LD_ADDR_VAR 0 3
9330: PUSH
9331: DOUBLE
9332: LD_INT 1
9334: DEC
9335: ST_TO_ADDR
9336: LD_INT 7
9338: PUSH
9339: FOR_TO
9340: IFFALSE 9414
// begin prepare_human ( get_sex_uprava ( 1 , i ) , class_soldier , Ar_levely [ difficulty ] , get_name ( 1 , i ) ) ;
9342: LD_INT 1
9344: PPUSH
9345: LD_VAR 0 3
9349: PPUSH
9350: CALL 10620 0 2
9354: PPUSH
9355: LD_INT 1
9357: PPUSH
9358: LD_EXP 49
9362: PUSH
9363: LD_OWVAR 67
9367: ARRAY
9368: PPUSH
9369: LD_INT 1
9371: PPUSH
9372: LD_VAR 0 3
9376: PPUSH
9377: CALL 10836 0 2
9381: PPUSH
9382: CALL 8048 0 4
// ah = CreateHuman ;
9386: LD_ADDR_LOC 10
9390: PUSH
9391: CALL_OW 44
9395: ST_TO_ADDR
// pom = pom ^ ah ;
9396: LD_ADDR_VAR 0 2
9400: PUSH
9401: LD_VAR 0 2
9405: PUSH
9406: LD_LOC 10
9410: ADD
9411: ST_TO_ADDR
// end ;
9412: GO 9339
9414: POP
9415: POP
// for i = 1 to 3 do
9416: LD_ADDR_VAR 0 3
9420: PUSH
9421: DOUBLE
9422: LD_INT 1
9424: DEC
9425: ST_TO_ADDR
9426: LD_INT 3
9428: PUSH
9429: FOR_TO
9430: IFFALSE 9504
// begin prepare_human ( get_sex_uprava ( 1 , i ) , class_mortar , Ar_levely [ difficulty ] , get_name ( 1 , i ) ) ;
9432: LD_INT 1
9434: PPUSH
9435: LD_VAR 0 3
9439: PPUSH
9440: CALL 10620 0 2
9444: PPUSH
9445: LD_INT 8
9447: PPUSH
9448: LD_EXP 49
9452: PUSH
9453: LD_OWVAR 67
9457: ARRAY
9458: PPUSH
9459: LD_INT 1
9461: PPUSH
9462: LD_VAR 0 3
9466: PPUSH
9467: CALL 10836 0 2
9471: PPUSH
9472: CALL 8048 0 4
// ah = CreateHuman ;
9476: LD_ADDR_LOC 10
9480: PUSH
9481: CALL_OW 44
9485: ST_TO_ADDR
// pom = pom ^ ah ;
9486: LD_ADDR_VAR 0 2
9490: PUSH
9491: LD_VAR 0 2
9495: PUSH
9496: LD_LOC 10
9500: ADD
9501: ST_TO_ADDR
// end ;
9502: GO 9429
9504: POP
9505: POP
// for i = 1 to 2 do
9506: LD_ADDR_VAR 0 3
9510: PUSH
9511: DOUBLE
9512: LD_INT 1
9514: DEC
9515: ST_TO_ADDR
9516: LD_INT 2
9518: PUSH
9519: FOR_TO
9520: IFFALSE 9576
// begin prepare_human ( get_sex , class_scientistic , Ar_levely [ difficulty ] ,  ) ;
9522: CALL 10585 0 0
9526: PPUSH
9527: LD_INT 4
9529: PPUSH
9530: LD_EXP 49
9534: PUSH
9535: LD_OWVAR 67
9539: ARRAY
9540: PPUSH
9541: LD_STRING 
9543: PPUSH
9544: CALL 8048 0 4
// ah = CreateHuman ;
9548: LD_ADDR_LOC 10
9552: PUSH
9553: CALL_OW 44
9557: ST_TO_ADDR
// pom = pom ^ ah ;
9558: LD_ADDR_VAR 0 2
9562: PUSH
9563: LD_VAR 0 2
9567: PUSH
9568: LD_LOC 10
9572: ADD
9573: ST_TO_ADDR
// end ;
9574: GO 9519
9576: POP
9577: POP
// for i = 1 to 2 do
9578: LD_ADDR_VAR 0 3
9582: PUSH
9583: DOUBLE
9584: LD_INT 1
9586: DEC
9587: ST_TO_ADDR
9588: LD_INT 2
9590: PUSH
9591: FOR_TO
9592: IFFALSE 9674
// begin prepare_human ( get_sex_uprava ( 1 , i + 12 ) , class_mortar , Ar_levely [ difficulty ] , get_name ( 1 , i + 12 ) ) ;
9594: LD_INT 1
9596: PPUSH
9597: LD_VAR 0 3
9601: PUSH
9602: LD_INT 12
9604: PLUS
9605: PPUSH
9606: CALL 10620 0 2
9610: PPUSH
9611: LD_INT 8
9613: PPUSH
9614: LD_EXP 49
9618: PUSH
9619: LD_OWVAR 67
9623: ARRAY
9624: PPUSH
9625: LD_INT 1
9627: PPUSH
9628: LD_VAR 0 3
9632: PUSH
9633: LD_INT 12
9635: PLUS
9636: PPUSH
9637: CALL 10836 0 2
9641: PPUSH
9642: CALL 8048 0 4
// ah = CreateHuman ;
9646: LD_ADDR_LOC 10
9650: PUSH
9651: CALL_OW 44
9655: ST_TO_ADDR
// pom = pom ^ ah ;
9656: LD_ADDR_VAR 0 2
9660: PUSH
9661: LD_VAR 0 2
9665: PUSH
9666: LD_LOC 10
9670: ADD
9671: ST_TO_ADDR
// end ;
9672: GO 9591
9674: POP
9675: POP
// for i = 1 to 2 do
9676: LD_ADDR_VAR 0 3
9680: PUSH
9681: DOUBLE
9682: LD_INT 1
9684: DEC
9685: ST_TO_ADDR
9686: LD_INT 2
9688: PUSH
9689: FOR_TO
9690: IFFALSE 9772
// begin prepare_human ( get_sex_uprava ( 1 , i + 14 ) , class_engineer , Ar_levely [ difficulty ] , get_name ( 1 , i + 14 ) ) ;
9692: LD_INT 1
9694: PPUSH
9695: LD_VAR 0 3
9699: PUSH
9700: LD_INT 14
9702: PLUS
9703: PPUSH
9704: CALL 10620 0 2
9708: PPUSH
9709: LD_INT 2
9711: PPUSH
9712: LD_EXP 49
9716: PUSH
9717: LD_OWVAR 67
9721: ARRAY
9722: PPUSH
9723: LD_INT 1
9725: PPUSH
9726: LD_VAR 0 3
9730: PUSH
9731: LD_INT 14
9733: PLUS
9734: PPUSH
9735: CALL 10836 0 2
9739: PPUSH
9740: CALL 8048 0 4
// ah = CreateHuman ;
9744: LD_ADDR_LOC 10
9748: PUSH
9749: CALL_OW 44
9753: ST_TO_ADDR
// pom = pom ^ ah ;
9754: LD_ADDR_VAR 0 2
9758: PUSH
9759: LD_VAR 0 2
9763: PUSH
9764: LD_LOC 10
9768: ADD
9769: ST_TO_ADDR
// end ;
9770: GO 9689
9772: POP
9773: POP
// for i = 1 to 4 do
9774: LD_ADDR_VAR 0 3
9778: PUSH
9779: DOUBLE
9780: LD_INT 1
9782: DEC
9783: ST_TO_ADDR
9784: LD_INT 4
9786: PUSH
9787: FOR_TO
9788: IFFALSE 9870
// begin prepare_human ( get_sex_uprava ( 1 , i + 16 ) , class_mechanic , Ar_levely [ difficulty ] , get_name ( 1 , i + 16 ) ) ;
9790: LD_INT 1
9792: PPUSH
9793: LD_VAR 0 3
9797: PUSH
9798: LD_INT 16
9800: PLUS
9801: PPUSH
9802: CALL 10620 0 2
9806: PPUSH
9807: LD_INT 3
9809: PPUSH
9810: LD_EXP 49
9814: PUSH
9815: LD_OWVAR 67
9819: ARRAY
9820: PPUSH
9821: LD_INT 1
9823: PPUSH
9824: LD_VAR 0 3
9828: PUSH
9829: LD_INT 16
9831: PLUS
9832: PPUSH
9833: CALL 10836 0 2
9837: PPUSH
9838: CALL 8048 0 4
// ah = CreateHuman ;
9842: LD_ADDR_LOC 10
9846: PUSH
9847: CALL_OW 44
9851: ST_TO_ADDR
// pom = pom ^ ah ;
9852: LD_ADDR_VAR 0 2
9856: PUSH
9857: LD_VAR 0 2
9861: PUSH
9862: LD_LOC 10
9866: ADD
9867: ST_TO_ADDR
// end ;
9868: GO 9787
9870: POP
9871: POP
// for i = 1 to 3 do
9872: LD_ADDR_VAR 0 3
9876: PUSH
9877: DOUBLE
9878: LD_INT 1
9880: DEC
9881: ST_TO_ADDR
9882: LD_INT 3
9884: PUSH
9885: FOR_TO
9886: IFFALSE 9968
// begin prepare_human ( get_sex_uprava ( 1 , i + 20 ) , class_mechanic , Ar_levely [ difficulty ] , get_name ( 1 , i + 20 ) ) ;
9888: LD_INT 1
9890: PPUSH
9891: LD_VAR 0 3
9895: PUSH
9896: LD_INT 20
9898: PLUS
9899: PPUSH
9900: CALL 10620 0 2
9904: PPUSH
9905: LD_INT 3
9907: PPUSH
9908: LD_EXP 49
9912: PUSH
9913: LD_OWVAR 67
9917: ARRAY
9918: PPUSH
9919: LD_INT 1
9921: PPUSH
9922: LD_VAR 0 3
9926: PUSH
9927: LD_INT 20
9929: PLUS
9930: PPUSH
9931: CALL 10836 0 2
9935: PPUSH
9936: CALL 8048 0 4
// ah = CreateHuman ;
9940: LD_ADDR_LOC 10
9944: PUSH
9945: CALL_OW 44
9949: ST_TO_ADDR
// pom = pom ^ ah ;
9950: LD_ADDR_VAR 0 2
9954: PUSH
9955: LD_VAR 0 2
9959: PUSH
9960: LD_LOC 10
9964: ADD
9965: ST_TO_ADDR
// end ;
9966: GO 9885
9968: POP
9969: POP
// JEDNOTKY_BAZE_2_LIST = pom ;
9970: LD_ADDR_EXP 11
9974: PUSH
9975: LD_VAR 0 2
9979: ST_TO_ADDR
// end ;
9980: LD_VAR 0 1
9984: RET
// export function vojcli_base_3 ; var pom ; var i , j ; begin
9985: LD_INT 0
9987: PPUSH
9988: PPUSH
9989: PPUSH
9990: PPUSH
// pom = [ ] ;
9991: LD_ADDR_VAR 0 2
9995: PUSH
9996: EMPTY
9997: ST_TO_ADDR
// uc_side := Arabi ;
9998: LD_ADDR_OWVAR 20
10002: PUSH
10003: LD_EXP 3
10007: ST_TO_ADDR
// uc_nation := nation_arabian ;
10008: LD_ADDR_OWVAR 21
10012: PUSH
10013: LD_INT 2
10015: ST_TO_ADDR
// uc_direction := 0 ;
10016: LD_ADDR_OWVAR 24
10020: PUSH
10021: LD_INT 0
10023: ST_TO_ADDR
// for i = 1 to 4 do
10024: LD_ADDR_VAR 0 3
10028: PUSH
10029: DOUBLE
10030: LD_INT 1
10032: DEC
10033: ST_TO_ADDR
10034: LD_INT 4
10036: PUSH
10037: FOR_TO
10038: IFFALSE 10112
// begin prepare_human ( get_sex_uprava ( 2 , i ) , class_soldier , Ar_levely [ difficulty ] , get_name ( 2 , i ) ) ;
10040: LD_INT 2
10042: PPUSH
10043: LD_VAR 0 3
10047: PPUSH
10048: CALL 10620 0 2
10052: PPUSH
10053: LD_INT 1
10055: PPUSH
10056: LD_EXP 49
10060: PUSH
10061: LD_OWVAR 67
10065: ARRAY
10066: PPUSH
10067: LD_INT 2
10069: PPUSH
10070: LD_VAR 0 3
10074: PPUSH
10075: CALL 10836 0 2
10079: PPUSH
10080: CALL 8048 0 4
// ah = CreateHuman ;
10084: LD_ADDR_LOC 10
10088: PUSH
10089: CALL_OW 44
10093: ST_TO_ADDR
// pom = pom ^ ah ;
10094: LD_ADDR_VAR 0 2
10098: PUSH
10099: LD_VAR 0 2
10103: PUSH
10104: LD_LOC 10
10108: ADD
10109: ST_TO_ADDR
// end ;
10110: GO 10037
10112: POP
10113: POP
// for i = 1 to 3 do
10114: LD_ADDR_VAR 0 3
10118: PUSH
10119: DOUBLE
10120: LD_INT 1
10122: DEC
10123: ST_TO_ADDR
10124: LD_INT 3
10126: PUSH
10127: FOR_TO
10128: IFFALSE 10202
// begin prepare_human ( get_sex_uprava ( 2 , i ) , class_mortar , Ar_levely [ difficulty ] , get_name ( 2 , i ) ) ;
10130: LD_INT 2
10132: PPUSH
10133: LD_VAR 0 3
10137: PPUSH
10138: CALL 10620 0 2
10142: PPUSH
10143: LD_INT 8
10145: PPUSH
10146: LD_EXP 49
10150: PUSH
10151: LD_OWVAR 67
10155: ARRAY
10156: PPUSH
10157: LD_INT 2
10159: PPUSH
10160: LD_VAR 0 3
10164: PPUSH
10165: CALL 10836 0 2
10169: PPUSH
10170: CALL 8048 0 4
// ah = CreateHuman ;
10174: LD_ADDR_LOC 10
10178: PUSH
10179: CALL_OW 44
10183: ST_TO_ADDR
// pom = pom ^ ah ;
10184: LD_ADDR_VAR 0 2
10188: PUSH
10189: LD_VAR 0 2
10193: PUSH
10194: LD_LOC 10
10198: ADD
10199: ST_TO_ADDR
// end ;
10200: GO 10127
10202: POP
10203: POP
// for i = 1 to 4 do
10204: LD_ADDR_VAR 0 3
10208: PUSH
10209: DOUBLE
10210: LD_INT 1
10212: DEC
10213: ST_TO_ADDR
10214: LD_INT 4
10216: PUSH
10217: FOR_TO
10218: IFFALSE 10300
// begin prepare_human ( get_sex_uprava ( 2 , i + 7 ) , class_mechanic , Ar_levely [ difficulty ] , get_name ( 2 , i + 7 ) ) ;
10220: LD_INT 2
10222: PPUSH
10223: LD_VAR 0 3
10227: PUSH
10228: LD_INT 7
10230: PLUS
10231: PPUSH
10232: CALL 10620 0 2
10236: PPUSH
10237: LD_INT 3
10239: PPUSH
10240: LD_EXP 49
10244: PUSH
10245: LD_OWVAR 67
10249: ARRAY
10250: PPUSH
10251: LD_INT 2
10253: PPUSH
10254: LD_VAR 0 3
10258: PUSH
10259: LD_INT 7
10261: PLUS
10262: PPUSH
10263: CALL 10836 0 2
10267: PPUSH
10268: CALL 8048 0 4
// ah = CreateHuman ;
10272: LD_ADDR_LOC 10
10276: PUSH
10277: CALL_OW 44
10281: ST_TO_ADDR
// pom = pom ^ ah ;
10282: LD_ADDR_VAR 0 2
10286: PUSH
10287: LD_VAR 0 2
10291: PUSH
10292: LD_LOC 10
10296: ADD
10297: ST_TO_ADDR
// end ;
10298: GO 10217
10300: POP
10301: POP
// for i = 1 to 2 do
10302: LD_ADDR_VAR 0 3
10306: PUSH
10307: DOUBLE
10308: LD_INT 1
10310: DEC
10311: ST_TO_ADDR
10312: LD_INT 2
10314: PUSH
10315: FOR_TO
10316: IFFALSE 10372
// begin prepare_human ( get_sex , class_scientistic , Ar_levely [ difficulty ] ,  ) ;
10318: CALL 10585 0 0
10322: PPUSH
10323: LD_INT 4
10325: PPUSH
10326: LD_EXP 49
10330: PUSH
10331: LD_OWVAR 67
10335: ARRAY
10336: PPUSH
10337: LD_STRING 
10339: PPUSH
10340: CALL 8048 0 4
// ah = CreateHuman ;
10344: LD_ADDR_LOC 10
10348: PUSH
10349: CALL_OW 44
10353: ST_TO_ADDR
// pom = pom ^ ah ;
10354: LD_ADDR_VAR 0 2
10358: PUSH
10359: LD_VAR 0 2
10363: PUSH
10364: LD_LOC 10
10368: ADD
10369: ST_TO_ADDR
// end ;
10370: GO 10315
10372: POP
10373: POP
// for i = 1 to 2 do
10374: LD_ADDR_VAR 0 3
10378: PUSH
10379: DOUBLE
10380: LD_INT 1
10382: DEC
10383: ST_TO_ADDR
10384: LD_INT 2
10386: PUSH
10387: FOR_TO
10388: IFFALSE 10470
// begin prepare_human ( get_sex_uprava ( 2 , i + 13 ) , class_mortar , Ar_levely [ difficulty ] , get_name ( 2 , i + 13 ) ) ;
10390: LD_INT 2
10392: PPUSH
10393: LD_VAR 0 3
10397: PUSH
10398: LD_INT 13
10400: PLUS
10401: PPUSH
10402: CALL 10620 0 2
10406: PPUSH
10407: LD_INT 8
10409: PPUSH
10410: LD_EXP 49
10414: PUSH
10415: LD_OWVAR 67
10419: ARRAY
10420: PPUSH
10421: LD_INT 2
10423: PPUSH
10424: LD_VAR 0 3
10428: PUSH
10429: LD_INT 13
10431: PLUS
10432: PPUSH
10433: CALL 10836 0 2
10437: PPUSH
10438: CALL 8048 0 4
// ah = CreateHuman ;
10442: LD_ADDR_LOC 10
10446: PUSH
10447: CALL_OW 44
10451: ST_TO_ADDR
// pom = pom ^ ah ;
10452: LD_ADDR_VAR 0 2
10456: PUSH
10457: LD_VAR 0 2
10461: PUSH
10462: LD_LOC 10
10466: ADD
10467: ST_TO_ADDR
// end ;
10468: GO 10387
10470: POP
10471: POP
// for i = 1 to 2 do
10472: LD_ADDR_VAR 0 3
10476: PUSH
10477: DOUBLE
10478: LD_INT 1
10480: DEC
10481: ST_TO_ADDR
10482: LD_INT 2
10484: PUSH
10485: FOR_TO
10486: IFFALSE 10568
// begin prepare_human ( get_sex_uprava ( 2 , i + 15 ) , class_engineer , Ar_levely [ difficulty ] , get_name ( 2 , i + 15 ) ) ;
10488: LD_INT 2
10490: PPUSH
10491: LD_VAR 0 3
10495: PUSH
10496: LD_INT 15
10498: PLUS
10499: PPUSH
10500: CALL 10620 0 2
10504: PPUSH
10505: LD_INT 2
10507: PPUSH
10508: LD_EXP 49
10512: PUSH
10513: LD_OWVAR 67
10517: ARRAY
10518: PPUSH
10519: LD_INT 2
10521: PPUSH
10522: LD_VAR 0 3
10526: PUSH
10527: LD_INT 15
10529: PLUS
10530: PPUSH
10531: CALL 10836 0 2
10535: PPUSH
10536: CALL 8048 0 4
// ah = CreateHuman ;
10540: LD_ADDR_LOC 10
10544: PUSH
10545: CALL_OW 44
10549: ST_TO_ADDR
// pom = pom ^ ah ;
10550: LD_ADDR_VAR 0 2
10554: PUSH
10555: LD_VAR 0 2
10559: PUSH
10560: LD_LOC 10
10564: ADD
10565: ST_TO_ADDR
// end ;
10566: GO 10485
10568: POP
10569: POP
// JEDNOTKY_BAZE_3_LIST = pom ;
10570: LD_ADDR_EXP 12
10574: PUSH
10575: LD_VAR 0 2
10579: ST_TO_ADDR
// end ;
10580: LD_VAR 0 1
10584: RET
// function get_sex ; begin
10585: LD_INT 0
10587: PPUSH
// if Prob ( 20 ) then
10588: LD_INT 20
10590: PPUSH
10591: CALL_OW 13
10595: IFFALSE 10607
// result = sex_female else
10597: LD_ADDR_VAR 0 1
10601: PUSH
10602: LD_INT 2
10604: ST_TO_ADDR
10605: GO 10615
// result = sex_male ;
10607: LD_ADDR_VAR 0 1
10611: PUSH
10612: LD_INT 1
10614: ST_TO_ADDR
// end ;
10615: LD_VAR 0 1
10619: RET
// function get_sex_uprava ( ser , cis ) ; var a ; begin
10620: LD_INT 0
10622: PPUSH
10623: PPUSH
// case ser of 1 :
10624: LD_VAR 0 1
10628: PUSH
10629: LD_INT 1
10631: DOUBLE
10632: EQUAL
10633: IFTRUE 10637
10635: GO 10729
10637: POP
// if cis = 1 then
10638: LD_VAR 0 2
10642: PUSH
10643: LD_INT 1
10645: EQUAL
10646: IFFALSE 10658
// a = sex_female else
10648: LD_ADDR_VAR 0 4
10652: PUSH
10653: LD_INT 2
10655: ST_TO_ADDR
10656: GO 10727
// if cis in [ 3 , 4 , 5 , 7 , 8 , 13 , 14 , 15 , 20 , 23 ] then
10658: LD_VAR 0 2
10662: PUSH
10663: LD_INT 3
10665: PUSH
10666: LD_INT 4
10668: PUSH
10669: LD_INT 5
10671: PUSH
10672: LD_INT 7
10674: PUSH
10675: LD_INT 8
10677: PUSH
10678: LD_INT 13
10680: PUSH
10681: LD_INT 14
10683: PUSH
10684: LD_INT 15
10686: PUSH
10687: LD_INT 20
10689: PUSH
10690: LD_INT 23
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: IN
10705: IFFALSE 10717
// a = sex_male else
10707: LD_ADDR_VAR 0 4
10711: PUSH
10712: LD_INT 1
10714: ST_TO_ADDR
10715: GO 10727
// a = get_sex ; 2 :
10717: LD_ADDR_VAR 0 4
10721: PUSH
10722: CALL 10585 0 0
10726: ST_TO_ADDR
10727: GO 10821
10729: LD_INT 2
10731: DOUBLE
10732: EQUAL
10733: IFTRUE 10737
10735: GO 10820
10737: POP
// if cis in [ 5 ] then
10738: LD_VAR 0 2
10742: PUSH
10743: LD_INT 5
10745: PUSH
10746: EMPTY
10747: LIST
10748: IN
10749: IFFALSE 10761
// a = sex_female else
10751: LD_ADDR_VAR 0 4
10755: PUSH
10756: LD_INT 2
10758: ST_TO_ADDR
10759: GO 10818
// if cis in [ 2 , 3 , 4 , 8 , 11 , 14 , 17 ] then
10761: LD_VAR 0 2
10765: PUSH
10766: LD_INT 2
10768: PUSH
10769: LD_INT 3
10771: PUSH
10772: LD_INT 4
10774: PUSH
10775: LD_INT 8
10777: PUSH
10778: LD_INT 11
10780: PUSH
10781: LD_INT 14
10783: PUSH
10784: LD_INT 17
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: IN
10796: IFFALSE 10808
// a = sex_male else
10798: LD_ADDR_VAR 0 4
10802: PUSH
10803: LD_INT 1
10805: ST_TO_ADDR
10806: GO 10818
// a = get_sex ; end ;
10808: LD_ADDR_VAR 0 4
10812: PUSH
10813: CALL 10585 0 0
10817: ST_TO_ADDR
10818: GO 10821
10820: POP
// result = a ;
10821: LD_ADDR_VAR 0 3
10825: PUSH
10826: LD_VAR 0 4
10830: ST_TO_ADDR
// end ;
10831: LD_VAR 0 3
10835: RET
// function get_name ( serie , cislo ) ; var a ; begin
10836: LD_INT 0
10838: PPUSH
10839: PPUSH
// a =  ;
10840: LD_ADDR_VAR 0 4
10844: PUSH
10845: LD_STRING 
10847: ST_TO_ADDR
// case serie of 1 :
10848: LD_VAR 0 1
10852: PUSH
10853: LD_INT 1
10855: DOUBLE
10856: EQUAL
10857: IFTRUE 10861
10859: GO 11079
10861: POP
// case cislo of 1 :
10862: LD_VAR 0 2
10866: PUSH
10867: LD_INT 1
10869: DOUBLE
10870: EQUAL
10871: IFTRUE 10875
10873: GO 10886
10875: POP
// a = Petronela Fagan ; 3 :
10876: LD_ADDR_VAR 0 4
10880: PUSH
10881: LD_STRING Petronela Fagan
10883: ST_TO_ADDR
10884: GO 11077
10886: LD_INT 3
10888: DOUBLE
10889: EQUAL
10890: IFTRUE 10894
10892: GO 10905
10894: POP
// a = Jaryn Floryk ; 4 :
10895: LD_ADDR_VAR 0 4
10899: PUSH
10900: LD_STRING Jaryn Floryk
10902: ST_TO_ADDR
10903: GO 11077
10905: LD_INT 4
10907: DOUBLE
10908: EQUAL
10909: IFTRUE 10913
10911: GO 10924
10913: POP
// a = Ira Smailer ; 5 :
10914: LD_ADDR_VAR 0 4
10918: PUSH
10919: LD_STRING Ira Smailer
10921: ST_TO_ADDR
10922: GO 11077
10924: LD_INT 5
10926: DOUBLE
10927: EQUAL
10928: IFTRUE 10932
10930: GO 10943
10932: POP
// a = Soren Rafin ; 7 :
10933: LD_ADDR_VAR 0 4
10937: PUSH
10938: LD_STRING Soren Rafin
10940: ST_TO_ADDR
10941: GO 11077
10943: LD_INT 7
10945: DOUBLE
10946: EQUAL
10947: IFTRUE 10951
10949: GO 10962
10951: POP
// a = Mark Kent ; 8 :
10952: LD_ADDR_VAR 0 4
10956: PUSH
10957: LD_STRING Mark Kent
10959: ST_TO_ADDR
10960: GO 11077
10962: LD_INT 8
10964: DOUBLE
10965: EQUAL
10966: IFTRUE 10970
10968: GO 10981
10970: POP
// a = Patrick Bull ; 13 :
10971: LD_ADDR_VAR 0 4
10975: PUSH
10976: LD_STRING Patrick Bull
10978: ST_TO_ADDR
10979: GO 11077
10981: LD_INT 13
10983: DOUBLE
10984: EQUAL
10985: IFTRUE 10989
10987: GO 11000
10989: POP
// a = Muzhid Galabi ; 14 :
10990: LD_ADDR_VAR 0 4
10994: PUSH
10995: LD_STRING Muzhid Galabi
10997: ST_TO_ADDR
10998: GO 11077
11000: LD_INT 14
11002: DOUBLE
11003: EQUAL
11004: IFTRUE 11008
11006: GO 11019
11008: POP
// a = Maxim Daigle ; 15 :
11009: LD_ADDR_VAR 0 4
11013: PUSH
11014: LD_STRING Maxim Daigle
11016: ST_TO_ADDR
11017: GO 11077
11019: LD_INT 15
11021: DOUBLE
11022: EQUAL
11023: IFTRUE 11027
11025: GO 11038
11027: POP
// a = Rick C. West ; 20 :
11028: LD_ADDR_VAR 0 4
11032: PUSH
11033: LD_STRING Rick C. West
11035: ST_TO_ADDR
11036: GO 11077
11038: LD_INT 20
11040: DOUBLE
11041: EQUAL
11042: IFTRUE 11046
11044: GO 11057
11046: POP
// a = Sinisa Mikhailovic ; 23 :
11047: LD_ADDR_VAR 0 4
11051: PUSH
11052: LD_STRING Sinisa Mikhailovic
11054: ST_TO_ADDR
11055: GO 11077
11057: LD_INT 23
11059: DOUBLE
11060: EQUAL
11061: IFTRUE 11065
11063: GO 11076
11065: POP
// a = Wayne Kettlewell ; end ; 2 :
11066: LD_ADDR_VAR 0 4
11070: PUSH
11071: LD_STRING Wayne Kettlewell
11073: ST_TO_ADDR
11074: GO 11077
11076: POP
11077: GO 11249
11079: LD_INT 2
11081: DOUBLE
11082: EQUAL
11083: IFTRUE 11087
11085: GO 11248
11087: POP
// case cislo of 2 :
11088: LD_VAR 0 2
11092: PUSH
11093: LD_INT 2
11095: DOUBLE
11096: EQUAL
11097: IFTRUE 11101
11099: GO 11112
11101: POP
// a = Danne Rydrgren ; 3 :
11102: LD_ADDR_VAR 0 4
11106: PUSH
11107: LD_STRING Danne Rydrgren
11109: ST_TO_ADDR
11110: GO 11246
11112: LD_INT 3
11114: DOUBLE
11115: EQUAL
11116: IFTRUE 11120
11118: GO 11131
11120: POP
// a = Alfred Van der Poel ; 4 :
11121: LD_ADDR_VAR 0 4
11125: PUSH
11126: LD_STRING Alfred Van der Poel
11128: ST_TO_ADDR
11129: GO 11246
11131: LD_INT 4
11133: DOUBLE
11134: EQUAL
11135: IFTRUE 11139
11137: GO 11150
11139: POP
// a = Muhammad Ali ; 5 :
11140: LD_ADDR_VAR 0 4
11144: PUSH
11145: LD_STRING Muhammad Ali
11147: ST_TO_ADDR
11148: GO 11246
11150: LD_INT 5
11152: DOUBLE
11153: EQUAL
11154: IFTRUE 11158
11156: GO 11169
11158: POP
// a = Elena Grubina ; 8 :
11159: LD_ADDR_VAR 0 4
11163: PUSH
11164: LD_STRING Elena Grubina
11166: ST_TO_ADDR
11167: GO 11246
11169: LD_INT 8
11171: DOUBLE
11172: EQUAL
11173: IFTRUE 11177
11175: GO 11188
11177: POP
// a = Oto Zimmerman ; 11 :
11178: LD_ADDR_VAR 0 4
11182: PUSH
11183: LD_STRING Oto Zimmerman
11185: ST_TO_ADDR
11186: GO 11246
11188: LD_INT 11
11190: DOUBLE
11191: EQUAL
11192: IFTRUE 11196
11194: GO 11207
11196: POP
// a = Neil Hoss ; 14 :
11197: LD_ADDR_VAR 0 4
11201: PUSH
11202: LD_STRING Neil Hoss
11204: ST_TO_ADDR
11205: GO 11246
11207: LD_INT 14
11209: DOUBLE
11210: EQUAL
11211: IFTRUE 11215
11213: GO 11226
11215: POP
// a = Cardi Nowitzke ; 17 :
11216: LD_ADDR_VAR 0 4
11220: PUSH
11221: LD_STRING Cardi Nowitzke
11223: ST_TO_ADDR
11224: GO 11246
11226: LD_INT 17
11228: DOUBLE
11229: EQUAL
11230: IFTRUE 11234
11232: GO 11245
11234: POP
// a = Leonard Van Horn ; end ; end ;
11235: LD_ADDR_VAR 0 4
11239: PUSH
11240: LD_STRING Leonard Van Horn
11242: ST_TO_ADDR
11243: GO 11246
11245: POP
11246: GO 11249
11248: POP
// result = a ;
11249: LD_ADDR_VAR 0 3
11253: PUSH
11254: LD_VAR 0 4
11258: ST_TO_ADDR
// end ;
11259: LD_VAR 0 3
11263: RET
// export function choose_vojaky ; var pom , i ; var ovyb ; var poc ; begin
11264: LD_INT 0
11266: PPUSH
11267: PPUSH
11268: PPUSH
11269: PPUSH
11270: PPUSH
// SetClass ( JMM , class_soldier ) ;
11271: LD_EXP 32
11275: PPUSH
11276: LD_INT 1
11278: PPUSH
11279: CALL_OW 336
// if Gary > 0 then
11283: LD_EXP 34
11287: PUSH
11288: LD_INT 0
11290: GREATER
11291: IFFALSE 11305
// SetClass ( Gary , class_soldier ) ;
11293: LD_EXP 34
11297: PPUSH
11298: LD_INT 1
11300: PPUSH
11301: CALL_OW 336
// if Lisa > 0 then
11305: LD_EXP 37
11309: PUSH
11310: LD_INT 0
11312: GREATER
11313: IFFALSE 11327
// SetClass ( Lisa , class_soldier ) ;
11315: LD_EXP 37
11319: PPUSH
11320: LD_INT 1
11322: PPUSH
11323: CALL_OW 336
// if Yamoko > 0 then
11327: LD_EXP 39
11331: PUSH
11332: LD_INT 0
11334: GREATER
11335: IFFALSE 11349
// SetClass ( Yamoko , class_soldier ) ;
11337: LD_EXP 39
11341: PPUSH
11342: LD_INT 1
11344: PPUSH
11345: CALL_OW 336
// if Frank > 0 then
11349: LD_EXP 36
11353: PUSH
11354: LD_INT 0
11356: GREATER
11357: IFFALSE 11371
// SetClass ( Frank , class_soldier ) ;
11359: LD_EXP 36
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: CALL_OW 336
// if Cornel > 0 then
11371: LD_EXP 38
11375: PUSH
11376: LD_INT 0
11378: GREATER
11379: IFFALSE 11393
// SetClass ( Cornel , class_soldier ) ;
11381: LD_EXP 38
11385: PPUSH
11386: LD_INT 1
11388: PPUSH
11389: CALL_OW 336
// if Bobby > 0 then
11393: LD_EXP 35
11397: PUSH
11398: LD_INT 0
11400: GREATER
11401: IFFALSE 11415
// SetClass ( Bobby , class_soldier ) ;
11403: LD_EXP 35
11407: PPUSH
11408: LD_INT 1
11410: PPUSH
11411: CALL_OW 336
// if Cyrus > 0 then
11415: LD_EXP 40
11419: PUSH
11420: LD_INT 0
11422: GREATER
11423: IFFALSE 11437
// SetClass ( Cyrus , class_soldier ) ;
11425: LD_EXP 40
11429: PPUSH
11430: LD_INT 1
11432: PPUSH
11433: CALL_OW 336
// if Don > 0 then
11437: LD_EXP 41
11441: PUSH
11442: LD_INT 0
11444: GREATER
11445: IFFALSE 11459
// SetClass ( Don , class_engineer ) ;
11447: LD_EXP 41
11451: PPUSH
11452: LD_INT 2
11454: PPUSH
11455: CALL_OW 336
// if Brown > 0 then
11459: LD_EXP 42
11463: PUSH
11464: LD_INT 0
11466: GREATER
11467: IFFALSE 11481
// SetClass ( Brown , class_soldier ) ;
11469: LD_EXP 42
11473: PPUSH
11474: LD_INT 1
11476: PPUSH
11477: CALL_OW 336
// ovyb = [ sel_not_changeable , sel_hired , sel_dont_change_class , JMM ] ;
11481: LD_ADDR_VAR 0 4
11485: PUSH
11486: LD_INT -4
11488: PUSH
11489: LD_INT -1
11491: PUSH
11492: LD_INT -6
11494: PUSH
11495: LD_EXP 32
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: ST_TO_ADDR
// ovyb = ovyb ^ [ sel_not_hired , Powell , sel_changeable , sel_change_class ] ;
11506: LD_ADDR_VAR 0 4
11510: PUSH
11511: LD_VAR 0 4
11515: PUSH
11516: LD_INT -2
11518: PUSH
11519: LD_EXP 33
11523: PUSH
11524: LD_INT -3
11526: PUSH
11527: LD_INT -5
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: ADD
11536: ST_TO_ADDR
// poc = 0 ;
11537: LD_ADDR_VAR 0 5
11541: PUSH
11542: LD_INT 0
11544: ST_TO_ADDR
// if Gary <> 0 and GARYL <> 7 then
11545: LD_EXP 34
11549: PUSH
11550: LD_INT 0
11552: NONEQUAL
11553: PUSH
11554: LD_EXP 19
11558: PUSH
11559: LD_INT 7
11561: NONEQUAL
11562: AND
11563: IFFALSE 11595
// begin ovyb = ovyb ^ Gary ;
11565: LD_ADDR_VAR 0 4
11569: PUSH
11570: LD_VAR 0 4
11574: PUSH
11575: LD_EXP 34
11579: ADD
11580: ST_TO_ADDR
// poc = poc + 1 ;
11581: LD_ADDR_VAR 0 5
11585: PUSH
11586: LD_VAR 0 5
11590: PUSH
11591: LD_INT 1
11593: PLUS
11594: ST_TO_ADDR
// end ; if Lisa <> 0 and LISAL <> 7 then
11595: LD_EXP 37
11599: PUSH
11600: LD_INT 0
11602: NONEQUAL
11603: PUSH
11604: LD_EXP 20
11608: PUSH
11609: LD_INT 7
11611: NONEQUAL
11612: AND
11613: IFFALSE 11645
// begin ovyb = ovyb ^ Lisa ;
11615: LD_ADDR_VAR 0 4
11619: PUSH
11620: LD_VAR 0 4
11624: PUSH
11625: LD_EXP 37
11629: ADD
11630: ST_TO_ADDR
// poc = poc + 1 ;
11631: LD_ADDR_VAR 0 5
11635: PUSH
11636: LD_VAR 0 5
11640: PUSH
11641: LD_INT 1
11643: PLUS
11644: ST_TO_ADDR
// end ; if Cornel <> 0 and CORNELL <> 7 then
11645: LD_EXP 38
11649: PUSH
11650: LD_INT 0
11652: NONEQUAL
11653: PUSH
11654: LD_EXP 23
11658: PUSH
11659: LD_INT 7
11661: NONEQUAL
11662: AND
11663: IFFALSE 11695
// begin ovyb = ovyb ^ Cornel ;
11665: LD_ADDR_VAR 0 4
11669: PUSH
11670: LD_VAR 0 4
11674: PUSH
11675: LD_EXP 38
11679: ADD
11680: ST_TO_ADDR
// poc = poc + 1 ;
11681: LD_ADDR_VAR 0 5
11685: PUSH
11686: LD_VAR 0 5
11690: PUSH
11691: LD_INT 1
11693: PLUS
11694: ST_TO_ADDR
// end ; if Frank <> 0 and FRANKL <> 7 then
11695: LD_EXP 36
11699: PUSH
11700: LD_INT 0
11702: NONEQUAL
11703: PUSH
11704: LD_EXP 22
11708: PUSH
11709: LD_INT 7
11711: NONEQUAL
11712: AND
11713: IFFALSE 11745
// begin ovyb = ovyb ^ Frank ;
11715: LD_ADDR_VAR 0 4
11719: PUSH
11720: LD_VAR 0 4
11724: PUSH
11725: LD_EXP 36
11729: ADD
11730: ST_TO_ADDR
// poc = poc + 1 ;
11731: LD_ADDR_VAR 0 5
11735: PUSH
11736: LD_VAR 0 5
11740: PUSH
11741: LD_INT 1
11743: PLUS
11744: ST_TO_ADDR
// end ; if Yamoko <> 0 and ( Frank = 0 or FRANKL = 7 ) then
11745: LD_EXP 39
11749: PUSH
11750: LD_INT 0
11752: NONEQUAL
11753: PUSH
11754: LD_EXP 36
11758: PUSH
11759: LD_INT 0
11761: EQUAL
11762: PUSH
11763: LD_EXP 22
11767: PUSH
11768: LD_INT 7
11770: EQUAL
11771: OR
11772: AND
11773: IFFALSE 11805
// begin ovyb = ovyb ^ Yamoko ;
11775: LD_ADDR_VAR 0 4
11779: PUSH
11780: LD_VAR 0 4
11784: PUSH
11785: LD_EXP 39
11789: ADD
11790: ST_TO_ADDR
// poc = poc + 1 ;
11791: LD_ADDR_VAR 0 5
11795: PUSH
11796: LD_VAR 0 5
11800: PUSH
11801: LD_INT 1
11803: PLUS
11804: ST_TO_ADDR
// end ; if Bobby <> 0 and BOBL <> 7 then
11805: LD_EXP 35
11809: PUSH
11810: LD_INT 0
11812: NONEQUAL
11813: PUSH
11814: LD_EXP 24
11818: PUSH
11819: LD_INT 7
11821: NONEQUAL
11822: AND
11823: IFFALSE 11855
// begin ovyb = ovyb ^ Bobby ;
11825: LD_ADDR_VAR 0 4
11829: PUSH
11830: LD_VAR 0 4
11834: PUSH
11835: LD_EXP 35
11839: ADD
11840: ST_TO_ADDR
// poc = poc + 1 ;
11841: LD_ADDR_VAR 0 5
11845: PUSH
11846: LD_VAR 0 5
11850: PUSH
11851: LD_INT 1
11853: PLUS
11854: ST_TO_ADDR
// end ; if Cyrus <> 0 and CYRL <> 7 then
11855: LD_EXP 40
11859: PUSH
11860: LD_INT 0
11862: NONEQUAL
11863: PUSH
11864: LD_EXP 25
11868: PUSH
11869: LD_INT 7
11871: NONEQUAL
11872: AND
11873: IFFALSE 11905
// begin ovyb = ovyb ^ Cyrus ;
11875: LD_ADDR_VAR 0 4
11879: PUSH
11880: LD_VAR 0 4
11884: PUSH
11885: LD_EXP 40
11889: ADD
11890: ST_TO_ADDR
// poc = poc + 1 ;
11891: LD_ADDR_VAR 0 5
11895: PUSH
11896: LD_VAR 0 5
11900: PUSH
11901: LD_INT 1
11903: PLUS
11904: ST_TO_ADDR
// end ; if Don <> 0 and DONL <> 7 then
11905: LD_EXP 41
11909: PUSH
11910: LD_INT 0
11912: NONEQUAL
11913: PUSH
11914: LD_EXP 26
11918: PUSH
11919: LD_INT 7
11921: NONEQUAL
11922: AND
11923: IFFALSE 11955
// begin ovyb = ovyb ^ Don ;
11925: LD_ADDR_VAR 0 4
11929: PUSH
11930: LD_VAR 0 4
11934: PUSH
11935: LD_EXP 41
11939: ADD
11940: ST_TO_ADDR
// poc = poc + 1 ;
11941: LD_ADDR_VAR 0 5
11945: PUSH
11946: LD_VAR 0 5
11950: PUSH
11951: LD_INT 1
11953: PLUS
11954: ST_TO_ADDR
// end ; if Brown <> 0 and BROWNL then
11955: LD_EXP 42
11959: PUSH
11960: LD_INT 0
11962: NONEQUAL
11963: PUSH
11964: LD_EXP 27
11968: AND
11969: IFFALSE 12001
// begin ovyb = ovyb ^ Brown ;
11971: LD_ADDR_VAR 0 4
11975: PUSH
11976: LD_VAR 0 4
11980: PUSH
11981: LD_EXP 42
11985: ADD
11986: ST_TO_ADDR
// poc = poc + 1 ;
11987: LD_ADDR_VAR 0 5
11991: PUSH
11992: LD_VAR 0 5
11996: PUSH
11997: LD_INT 1
11999: PLUS
12000: ST_TO_ADDR
// end ; pom = uprav_lidi ( lidi_other ) ;
12001: LD_ADDR_VAR 0 2
12005: PUSH
12006: LD_EXP 52
12010: PPUSH
12011: CALL 12368 0 1
12015: ST_TO_ADDR
// ovyb = ovyb ^ pom ;
12016: LD_ADDR_VAR 0 4
12020: PUSH
12021: LD_VAR 0 4
12025: PUSH
12026: LD_VAR 0 2
12030: ADD
12031: ST_TO_ADDR
// poc = poc + pom + 0 ;
12032: LD_ADDR_VAR 0 5
12036: PUSH
12037: LD_VAR 0 5
12041: PUSH
12042: LD_VAR 0 2
12046: PLUS
12047: PUSH
12048: LD_INT 0
12050: PLUS
12051: ST_TO_ADDR
// uc_side := You ;
12052: LD_ADDR_OWVAR 20
12056: PUSH
12057: LD_EXP 1
12061: ST_TO_ADDR
// uc_nation := nation_american ;
12062: LD_ADDR_OWVAR 21
12066: PUSH
12067: LD_INT 1
12069: ST_TO_ADDR
// uc_direction := 0 ;
12070: LD_ADDR_OWVAR 24
12074: PUSH
12075: LD_INT 0
12077: ST_TO_ADDR
// prepare_human ( sex_male , class_engineer , 6 ,  ) ;
12078: LD_INT 1
12080: PPUSH
12081: LD_INT 2
12083: PPUSH
12084: LD_INT 6
12086: PPUSH
12087: LD_STRING 
12089: PPUSH
12090: CALL 8048 0 4
// pom = CreateHuman ;
12094: LD_ADDR_VAR 0 2
12098: PUSH
12099: CALL_OW 44
12103: ST_TO_ADDR
// ovyb = ovyb ^ pom ;
12104: LD_ADDR_VAR 0 4
12108: PUSH
12109: LD_VAR 0 4
12113: PUSH
12114: LD_VAR 0 2
12118: ADD
12119: ST_TO_ADDR
// prepare_human ( sex_male , class_soldier , 6 ,  ) ;
12120: LD_INT 1
12122: PPUSH
12123: LD_INT 1
12125: PPUSH
12126: LD_INT 6
12128: PPUSH
12129: LD_STRING 
12131: PPUSH
12132: CALL 8048 0 4
// pom = CreateHuman ;
12136: LD_ADDR_VAR 0 2
12140: PUSH
12141: CALL_OW 44
12145: ST_TO_ADDR
// ovyb = ovyb ^ pom ;
12146: LD_ADDR_VAR 0 4
12150: PUSH
12151: LD_VAR 0 4
12155: PUSH
12156: LD_VAR 0 2
12160: ADD
12161: ST_TO_ADDR
// poc = poc + 2 ;
12162: LD_ADDR_VAR 0 5
12166: PUSH
12167: LD_VAR 0 5
12171: PUSH
12172: LD_INT 2
12174: PLUS
12175: ST_TO_ADDR
// if poc < 20 then
12176: LD_VAR 0 5
12180: PUSH
12181: LD_INT 20
12183: LESS
12184: IFFALSE 12288
// for i := 1 to 20 - poc do
12186: LD_ADDR_VAR 0 3
12190: PUSH
12191: DOUBLE
12192: LD_INT 1
12194: DEC
12195: ST_TO_ADDR
12196: LD_INT 20
12198: PUSH
12199: LD_VAR 0 5
12203: MINUS
12204: PUSH
12205: FOR_TO
12206: IFFALSE 12286
// begin if Rand ( 1 , 2 ) = 1 then
12208: LD_INT 1
12210: PPUSH
12211: LD_INT 2
12213: PPUSH
12214: CALL_OW 12
12218: PUSH
12219: LD_INT 1
12221: EQUAL
12222: IFFALSE 12242
// prepare_human ( sex_male , class_engineer , 6 ,  ) else
12224: LD_INT 1
12226: PPUSH
12227: LD_INT 2
12229: PPUSH
12230: LD_INT 6
12232: PPUSH
12233: LD_STRING 
12235: PPUSH
12236: CALL 8048 0 4
12240: GO 12258
// prepare_human ( sex_male , class_soldier , 6 ,  ) ;
12242: LD_INT 1
12244: PPUSH
12245: LD_INT 1
12247: PPUSH
12248: LD_INT 6
12250: PPUSH
12251: LD_STRING 
12253: PPUSH
12254: CALL 8048 0 4
// pom = CreateHuman ;
12258: LD_ADDR_VAR 0 2
12262: PUSH
12263: CALL_OW 44
12267: ST_TO_ADDR
// ovyb = ovyb ^ pom ;
12268: LD_ADDR_VAR 0 4
12272: PUSH
12273: LD_VAR 0 4
12277: PUSH
12278: LD_VAR 0 2
12282: ADD
12283: ST_TO_ADDR
// end ;
12284: GO 12205
12286: POP
12287: POP
// Amici_enter = CharacterSelection ( Choose 11 people , 11 , 11 , ovyb , [ [ class_engineer , 1 ] , [ class_soldier , 4 ] , [ class_mechanic , 0 ] ] ) ;
12288: LD_ADDR_EXP 43
12292: PUSH
12293: LD_STRING Choose 11 people
12295: PPUSH
12296: LD_INT 11
12298: PPUSH
12299: LD_INT 11
12301: PPUSH
12302: LD_VAR 0 4
12306: PPUSH
12307: LD_INT 2
12309: PUSH
12310: LD_INT 1
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: PUSH
12317: LD_INT 1
12319: PUSH
12320: LD_INT 4
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: PUSH
12327: LD_INT 3
12329: PUSH
12330: LD_INT 0
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: LIST
12341: PPUSH
12342: CALL_OW 42
12346: ST_TO_ADDR
// Amici_enter = Amici_enter ^ JMM ;
12347: LD_ADDR_EXP 43
12351: PUSH
12352: LD_EXP 43
12356: PUSH
12357: LD_EXP 32
12361: ADD
12362: ST_TO_ADDR
// end ;
12363: LD_VAR 0 1
12367: RET
// function uprav_lidi ( lidi ) ; var pom , i ; var sk ; begin
12368: LD_INT 0
12370: PPUSH
12371: PPUSH
12372: PPUSH
12373: PPUSH
// pom = [ ] ;
12374: LD_ADDR_VAR 0 3
12378: PUSH
12379: EMPTY
12380: ST_TO_ADDR
// for i in lidi do
12381: LD_ADDR_VAR 0 4
12385: PUSH
12386: LD_VAR 0 1
12390: PUSH
12391: FOR_IN
12392: IFFALSE 12535
// begin sk = get_skills ( i ) ;
12394: LD_ADDR_VAR 0 5
12398: PUSH
12399: LD_VAR 0 4
12403: PPUSH
12404: CALL 12552 0 1
12408: ST_TO_ADDR
// if sk [ 4 ] > sk [ 1 ] and sk [ 4 ] > sk [ 2 ] and sk [ 4 ] > sk [ 3 ] then
12409: LD_VAR 0 5
12413: PUSH
12414: LD_INT 4
12416: ARRAY
12417: PUSH
12418: LD_VAR 0 5
12422: PUSH
12423: LD_INT 1
12425: ARRAY
12426: GREATER
12427: PUSH
12428: LD_VAR 0 5
12432: PUSH
12433: LD_INT 4
12435: ARRAY
12436: PUSH
12437: LD_VAR 0 5
12441: PUSH
12442: LD_INT 2
12444: ARRAY
12445: GREATER
12446: AND
12447: PUSH
12448: LD_VAR 0 5
12452: PUSH
12453: LD_INT 4
12455: ARRAY
12456: PUSH
12457: LD_VAR 0 5
12461: PUSH
12462: LD_INT 3
12464: ARRAY
12465: GREATER
12466: AND
12467: IFFALSE 12471
// continue ;
12469: GO 12391
// if sk [ 1 ] > sk [ 2 ] then
12471: LD_VAR 0 5
12475: PUSH
12476: LD_INT 1
12478: ARRAY
12479: PUSH
12480: LD_VAR 0 5
12484: PUSH
12485: LD_INT 2
12487: ARRAY
12488: GREATER
12489: IFFALSE 12505
// SetClass ( i , class_soldier ) else
12491: LD_VAR 0 4
12495: PPUSH
12496: LD_INT 1
12498: PPUSH
12499: CALL_OW 336
12503: GO 12517
// SetClass ( i , class_engineer ) ;
12505: LD_VAR 0 4
12509: PPUSH
12510: LD_INT 2
12512: PPUSH
12513: CALL_OW 336
// pom = pom ^ i ;
12517: LD_ADDR_VAR 0 3
12521: PUSH
12522: LD_VAR 0 3
12526: PUSH
12527: LD_VAR 0 4
12531: ADD
12532: ST_TO_ADDR
// end ;
12533: GO 12391
12535: POP
12536: POP
// result := pom ;
12537: LD_ADDR_VAR 0 2
12541: PUSH
12542: LD_VAR 0 3
12546: ST_TO_ADDR
// end ;
12547: LD_VAR 0 2
12551: RET
// function get_skills ( un ) ; var pom1 , pom2 , pom3 , pom4 ; begin
12552: LD_INT 0
12554: PPUSH
12555: PPUSH
12556: PPUSH
12557: PPUSH
12558: PPUSH
// pom1 := GetSkill ( un , skill_combat ) ;
12559: LD_ADDR_VAR 0 3
12563: PUSH
12564: LD_VAR 0 1
12568: PPUSH
12569: LD_INT 1
12571: PPUSH
12572: CALL_OW 259
12576: ST_TO_ADDR
// pom2 := GetSkill ( un , skill_engineering ) ;
12577: LD_ADDR_VAR 0 4
12581: PUSH
12582: LD_VAR 0 1
12586: PPUSH
12587: LD_INT 2
12589: PPUSH
12590: CALL_OW 259
12594: ST_TO_ADDR
// pom3 := GetSkill ( un , skill_mechanical ) ;
12595: LD_ADDR_VAR 0 5
12599: PUSH
12600: LD_VAR 0 1
12604: PPUSH
12605: LD_INT 3
12607: PPUSH
12608: CALL_OW 259
12612: ST_TO_ADDR
// pom4 := GetSkill ( un , skill_scientistic ) ;
12613: LD_ADDR_VAR 0 6
12617: PUSH
12618: LD_VAR 0 1
12622: PPUSH
12623: LD_INT 4
12625: PPUSH
12626: CALL_OW 259
12630: ST_TO_ADDR
// result := [ pom1 , pom2 , pom3 , pom4 ] end ;
12631: LD_ADDR_VAR 0 2
12635: PUSH
12636: LD_VAR 0 3
12640: PUSH
12641: LD_VAR 0 4
12645: PUSH
12646: LD_VAR 0 5
12650: PUSH
12651: LD_VAR 0 6
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: ST_TO_ADDR
12662: LD_VAR 0 2
12666: RET
// export function create_arabske_utoky_behem_mise ; var pom ; begin
12667: LD_INT 0
12669: PPUSH
12670: PPUSH
// uc_side = Arabi ;
12671: LD_ADDR_OWVAR 20
12675: PUSH
12676: LD_EXP 3
12680: ST_TO_ADDR
// uc_nation = nation_arabian ;
12681: LD_ADDR_OWVAR 21
12685: PUSH
12686: LD_INT 2
12688: ST_TO_ADDR
// pom = [ ] ;
12689: LD_ADDR_VAR 0 2
12693: PUSH
12694: EMPTY
12695: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 4 ,  ) ;
12696: LD_ADDR_VAR 0 2
12700: PUSH
12701: CALL 10585 0 0
12705: PPUSH
12706: LD_INT 1
12708: PPUSH
12709: LD_INT 4
12711: PPUSH
12712: LD_STRING 
12714: PPUSH
12715: CALL 14156 0 4
12719: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 4 ,  ) ;
12720: LD_ADDR_VAR 0 2
12724: PUSH
12725: LD_VAR 0 2
12729: PUSH
12730: CALL 10585 0 0
12734: PPUSH
12735: LD_INT 1
12737: PPUSH
12738: LD_INT 4
12740: PPUSH
12741: LD_STRING 
12743: PPUSH
12744: CALL 14156 0 4
12748: ADD
12749: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 5 ,  ) ;
12750: LD_ADDR_VAR 0 2
12754: PUSH
12755: LD_VAR 0 2
12759: PUSH
12760: CALL 10585 0 0
12764: PPUSH
12765: LD_INT 8
12767: PPUSH
12768: LD_INT 5
12770: PPUSH
12771: LD_STRING 
12773: PPUSH
12774: CALL 14156 0 4
12778: ADD
12779: ST_TO_ADDR
// if difficulty > 1 then
12780: LD_OWVAR 67
12784: PUSH
12785: LD_INT 1
12787: GREATER
12788: IFFALSE 12820
// pom = pom ^ get_human ( get_sex , class_mortar , 5 ,  ) ;
12790: LD_ADDR_VAR 0 2
12794: PUSH
12795: LD_VAR 0 2
12799: PUSH
12800: CALL 10585 0 0
12804: PPUSH
12805: LD_INT 8
12807: PPUSH
12808: LD_INT 5
12810: PPUSH
12811: LD_STRING 
12813: PPUSH
12814: CALL 14156 0 4
12818: ADD
12819: ST_TO_ADDR
// if difficulty > 2 then
12820: LD_OWVAR 67
12824: PUSH
12825: LD_INT 2
12827: GREATER
12828: IFFALSE 12860
// pom = pom ^ get_human ( get_sex , class_soldier , 5 ,  ) ;
12830: LD_ADDR_VAR 0 2
12834: PUSH
12835: LD_VAR 0 2
12839: PUSH
12840: CALL 10585 0 0
12844: PPUSH
12845: LD_INT 1
12847: PPUSH
12848: LD_INT 5
12850: PPUSH
12851: LD_STRING 
12853: PPUSH
12854: CALL 14156 0 4
12858: ADD
12859: ST_TO_ADDR
// Ar_utok1_LIST = pom ;
12860: LD_ADDR_EXP 13
12864: PUSH
12865: LD_VAR 0 2
12869: ST_TO_ADDR
// pom = [ ] ;
12870: LD_ADDR_VAR 0 2
12874: PUSH
12875: EMPTY
12876: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
12877: LD_ADDR_OWVAR 37
12881: PUSH
12882: LD_INT 14
12884: ST_TO_ADDR
// vc_weapon = ar_gun ;
12885: LD_ADDR_OWVAR 40
12889: PUSH
12890: LD_INT 27
12892: ST_TO_ADDR
// vc_control = control_apeman ;
12893: LD_ADDR_OWVAR 38
12897: PUSH
12898: LD_INT 5
12900: ST_TO_ADDR
// vc_engine = engine_siberite ;
12901: LD_ADDR_OWVAR 39
12905: PUSH
12906: LD_INT 3
12908: ST_TO_ADDR
// av = CreateVehicle ;
12909: LD_ADDR_LOC 11
12913: PUSH
12914: CALL_OW 45
12918: ST_TO_ADDR
// pom = av ;
12919: LD_ADDR_VAR 0 2
12923: PUSH
12924: LD_LOC 11
12928: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 4 ,  ) ;
12929: LD_ADDR_LOC 10
12933: PUSH
12934: CALL 10585 0 0
12938: PPUSH
12939: LD_INT 3
12941: PPUSH
12942: LD_INT 4
12944: PPUSH
12945: LD_STRING 
12947: PPUSH
12948: CALL 14156 0 4
12952: ST_TO_ADDR
// vc_control = control_manual ;
12953: LD_ADDR_OWVAR 38
12957: PUSH
12958: LD_INT 1
12960: ST_TO_ADDR
// vc_weapon = ar_gatling_gun ;
12961: LD_ADDR_OWVAR 40
12965: PUSH
12966: LD_INT 25
12968: ST_TO_ADDR
// av = CreateVehicle ;
12969: LD_ADDR_LOC 11
12973: PUSH
12974: CALL_OW 45
12978: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
12979: LD_LOC 10
12983: PPUSH
12984: LD_LOC 11
12988: PPUSH
12989: CALL_OW 52
// pom = pom ^ av ;
12993: LD_ADDR_VAR 0 2
12997: PUSH
12998: LD_VAR 0 2
13002: PUSH
13003: LD_LOC 11
13007: ADD
13008: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 4 ,  ) ;
13009: LD_ADDR_VAR 0 2
13013: PUSH
13014: LD_VAR 0 2
13018: PUSH
13019: CALL 10585 0 0
13023: PPUSH
13024: LD_INT 1
13026: PPUSH
13027: LD_INT 4
13029: PPUSH
13030: LD_STRING 
13032: PPUSH
13033: CALL 14156 0 4
13037: ADD
13038: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , Ar_levely [ difficulty ] ,  ) ;
13039: LD_ADDR_VAR 0 2
13043: PUSH
13044: LD_VAR 0 2
13048: PUSH
13049: CALL 10585 0 0
13053: PPUSH
13054: LD_INT 2
13056: PPUSH
13057: LD_EXP 49
13061: PUSH
13062: LD_OWVAR 67
13066: ARRAY
13067: PPUSH
13068: LD_STRING 
13070: PPUSH
13071: CALL 14156 0 4
13075: ADD
13076: ST_TO_ADDR
// if difficulty > 1 then
13077: LD_OWVAR 67
13081: PUSH
13082: LD_INT 1
13084: GREATER
13085: IFFALSE 13163
// begin pom = pom ^ get_human ( get_sex , class_engineer , Ar_levely [ difficulty ] ,  ) ;
13087: LD_ADDR_VAR 0 2
13091: PUSH
13092: LD_VAR 0 2
13096: PUSH
13097: CALL 10585 0 0
13101: PPUSH
13102: LD_INT 2
13104: PPUSH
13105: LD_EXP 49
13109: PUSH
13110: LD_OWVAR 67
13114: ARRAY
13115: PPUSH
13116: LD_STRING 
13118: PPUSH
13119: CALL 14156 0 4
13123: ADD
13124: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , Ar_levely [ difficulty ] ,  ) ;
13125: LD_ADDR_VAR 0 2
13129: PUSH
13130: LD_VAR 0 2
13134: PUSH
13135: CALL 10585 0 0
13139: PPUSH
13140: LD_INT 1
13142: PPUSH
13143: LD_EXP 49
13147: PUSH
13148: LD_OWVAR 67
13152: ARRAY
13153: PPUSH
13154: LD_STRING 
13156: PPUSH
13157: CALL 14156 0 4
13161: ADD
13162: ST_TO_ADDR
// end ; Ar_utok2_LIST = pom ;
13163: LD_ADDR_EXP 14
13167: PUSH
13168: LD_VAR 0 2
13172: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 4 ,  ) ;
13173: LD_ADDR_VAR 0 2
13177: PUSH
13178: CALL 10585 0 0
13182: PPUSH
13183: LD_INT 1
13185: PPUSH
13186: LD_INT 4
13188: PPUSH
13189: LD_STRING 
13191: PPUSH
13192: CALL 14156 0 4
13196: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 4 ,  ) ;
13197: LD_ADDR_VAR 0 2
13201: PUSH
13202: LD_VAR 0 2
13206: PUSH
13207: CALL 10585 0 0
13211: PPUSH
13212: LD_INT 1
13214: PPUSH
13215: LD_INT 4
13217: PPUSH
13218: LD_STRING 
13220: PPUSH
13221: CALL 14156 0 4
13225: ADD
13226: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , Ar_levely [ difficulty ] ,  ) ;
13227: LD_ADDR_VAR 0 2
13231: PUSH
13232: LD_VAR 0 2
13236: PUSH
13237: CALL 10585 0 0
13241: PPUSH
13242: LD_INT 8
13244: PPUSH
13245: LD_EXP 49
13249: PUSH
13250: LD_OWVAR 67
13254: ARRAY
13255: PPUSH
13256: LD_STRING 
13258: PPUSH
13259: CALL 14156 0 4
13263: ADD
13264: ST_TO_ADDR
// if difficulty > 1 then
13265: LD_OWVAR 67
13269: PUSH
13270: LD_INT 1
13272: GREATER
13273: IFFALSE 13401
// begin pom = pom ^ get_human ( get_sex , class_soldier , 4 ,  ) ;
13275: LD_ADDR_VAR 0 2
13279: PUSH
13280: LD_VAR 0 2
13284: PUSH
13285: CALL 10585 0 0
13289: PPUSH
13290: LD_INT 1
13292: PPUSH
13293: LD_INT 4
13295: PPUSH
13296: LD_STRING 
13298: PPUSH
13299: CALL 14156 0 4
13303: ADD
13304: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , Ar_levely [ difficulty ] ,  ) ;
13305: LD_ADDR_VAR 0 2
13309: PUSH
13310: LD_VAR 0 2
13314: PUSH
13315: CALL 10585 0 0
13319: PPUSH
13320: LD_INT 2
13322: PPUSH
13323: LD_EXP 49
13327: PUSH
13328: LD_OWVAR 67
13332: ARRAY
13333: PPUSH
13334: LD_STRING 
13336: PPUSH
13337: CALL 14156 0 4
13341: ADD
13342: ST_TO_ADDR
// vc_control = control_apeman ;
13343: LD_ADDR_OWVAR 38
13347: PUSH
13348: LD_INT 5
13350: ST_TO_ADDR
// vc_chassis = ar_hovercraft ;
13351: LD_ADDR_OWVAR 37
13355: PUSH
13356: LD_INT 11
13358: ST_TO_ADDR
// vc_engine = engine_combustion ;
13359: LD_ADDR_OWVAR 39
13363: PUSH
13364: LD_INT 1
13366: ST_TO_ADDR
// vc_weapon = ar_light_gun ;
13367: LD_ADDR_OWVAR 40
13371: PUSH
13372: LD_INT 23
13374: ST_TO_ADDR
// av = CreateVehicle ;
13375: LD_ADDR_LOC 11
13379: PUSH
13380: CALL_OW 45
13384: ST_TO_ADDR
// pom = pom ^ av ;
13385: LD_ADDR_VAR 0 2
13389: PUSH
13390: LD_VAR 0 2
13394: PUSH
13395: LD_LOC 11
13399: ADD
13400: ST_TO_ADDR
// end ; Ar_utok3_LIST = pom ;
13401: LD_ADDR_EXP 15
13405: PUSH
13406: LD_VAR 0 2
13410: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 6 ,  ) ;
13411: LD_ADDR_VAR 0 2
13415: PUSH
13416: CALL 10585 0 0
13420: PPUSH
13421: LD_INT 1
13423: PPUSH
13424: LD_INT 6
13426: PPUSH
13427: LD_STRING 
13429: PPUSH
13430: CALL 14156 0 4
13434: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
13435: LD_ADDR_OWVAR 37
13439: PUSH
13440: LD_INT 14
13442: ST_TO_ADDR
// vc_weapon = ar_gun ;
13443: LD_ADDR_OWVAR 40
13447: PUSH
13448: LD_INT 27
13450: ST_TO_ADDR
// vc_control = control_apeman ;
13451: LD_ADDR_OWVAR 38
13455: PUSH
13456: LD_INT 5
13458: ST_TO_ADDR
// vc_engine = engine_siberite ;
13459: LD_ADDR_OWVAR 39
13463: PUSH
13464: LD_INT 3
13466: ST_TO_ADDR
// av = CreateVehicle ;
13467: LD_ADDR_LOC 11
13471: PUSH
13472: CALL_OW 45
13476: ST_TO_ADDR
// pom = pom ^ av ;
13477: LD_ADDR_VAR 0 2
13481: PUSH
13482: LD_VAR 0 2
13486: PUSH
13487: LD_LOC 11
13491: ADD
13492: ST_TO_ADDR
// av = CreateVehicle ;
13493: LD_ADDR_LOC 11
13497: PUSH
13498: CALL_OW 45
13502: ST_TO_ADDR
// pom = pom ^ av ;
13503: LD_ADDR_VAR 0 2
13507: PUSH
13508: LD_VAR 0 2
13512: PUSH
13513: LD_LOC 11
13517: ADD
13518: ST_TO_ADDR
// av = CreateVehicle ;
13519: LD_ADDR_LOC 11
13523: PUSH
13524: CALL_OW 45
13528: ST_TO_ADDR
// pom = pom ^ av ;
13529: LD_ADDR_VAR 0 2
13533: PUSH
13534: LD_VAR 0 2
13538: PUSH
13539: LD_LOC 11
13543: ADD
13544: ST_TO_ADDR
// Ar_utok4_LIST = pom ;
13545: LD_ADDR_EXP 16
13549: PUSH
13550: LD_VAR 0 2
13554: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , Ar_levely [ difficulty ] ,  ) ;
13555: LD_ADDR_VAR 0 2
13559: PUSH
13560: CALL 10585 0 0
13564: PPUSH
13565: LD_INT 1
13567: PPUSH
13568: LD_EXP 49
13572: PUSH
13573: LD_OWVAR 67
13577: ARRAY
13578: PPUSH
13579: LD_STRING 
13581: PPUSH
13582: CALL 14156 0 4
13586: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , Ar_levely [ difficulty ] ,  ) ;
13587: LD_ADDR_LOC 10
13591: PUSH
13592: CALL 10585 0 0
13596: PPUSH
13597: LD_INT 3
13599: PPUSH
13600: LD_EXP 49
13604: PUSH
13605: LD_OWVAR 67
13609: ARRAY
13610: PPUSH
13611: LD_STRING 
13613: PPUSH
13614: CALL 14156 0 4
13618: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
13619: LD_ADDR_OWVAR 40
13623: PUSH
13624: LD_INT 28
13626: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
13627: LD_ADDR_OWVAR 37
13631: PUSH
13632: LD_INT 13
13634: ST_TO_ADDR
// vc_control = control_manual ;
13635: LD_ADDR_OWVAR 38
13639: PUSH
13640: LD_INT 1
13642: ST_TO_ADDR
// vc_engine = engine_siberite ;
13643: LD_ADDR_OWVAR 39
13647: PUSH
13648: LD_INT 3
13650: ST_TO_ADDR
// av = CreateVehicle ;
13651: LD_ADDR_LOC 11
13655: PUSH
13656: CALL_OW 45
13660: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
13661: LD_LOC 10
13665: PPUSH
13666: LD_LOC 11
13670: PPUSH
13671: CALL_OW 52
// pom = pom ^ av ;
13675: LD_ADDR_VAR 0 2
13679: PUSH
13680: LD_VAR 0 2
13684: PUSH
13685: LD_LOC 11
13689: ADD
13690: ST_TO_ADDR
// if difficulty > 1 then
13691: LD_OWVAR 67
13695: PUSH
13696: LD_INT 1
13698: GREATER
13699: IFFALSE 13743
// begin vc_weapon = ar_selfpropelled_bomb ;
13701: LD_ADDR_OWVAR 40
13705: PUSH
13706: LD_INT 29
13708: ST_TO_ADDR
// vc_control = control_apeman ;
13709: LD_ADDR_OWVAR 38
13713: PUSH
13714: LD_INT 5
13716: ST_TO_ADDR
// av = CreateVehicle ;
13717: LD_ADDR_LOC 11
13721: PUSH
13722: CALL_OW 45
13726: ST_TO_ADDR
// pom = pom ^ av ;
13727: LD_ADDR_VAR 0 2
13731: PUSH
13732: LD_VAR 0 2
13736: PUSH
13737: LD_LOC 11
13741: ADD
13742: ST_TO_ADDR
// end ; pom = pom ^ get_human ( get_sex , class_soldier , Ar_levely [ difficulty ] ,  ) ;
13743: LD_ADDR_VAR 0 2
13747: PUSH
13748: LD_VAR 0 2
13752: PUSH
13753: CALL 10585 0 0
13757: PPUSH
13758: LD_INT 1
13760: PPUSH
13761: LD_EXP 49
13765: PUSH
13766: LD_OWVAR 67
13770: ARRAY
13771: PPUSH
13772: LD_STRING 
13774: PPUSH
13775: CALL 14156 0 4
13779: ADD
13780: ST_TO_ADDR
// if difficulty > 2 then
13781: LD_OWVAR 67
13785: PUSH
13786: LD_INT 2
13788: GREATER
13789: IFFALSE 13905
// begin pom = pom ^ get_human ( get_sex , class_scientistic , Ar_levely [ difficulty ] ,  ) ;
13791: LD_ADDR_VAR 0 2
13795: PUSH
13796: LD_VAR 0 2
13800: PUSH
13801: CALL 10585 0 0
13805: PPUSH
13806: LD_INT 4
13808: PPUSH
13809: LD_EXP 49
13813: PUSH
13814: LD_OWVAR 67
13818: ARRAY
13819: PPUSH
13820: LD_STRING 
13822: PPUSH
13823: CALL 14156 0 4
13827: ADD
13828: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , Ar_levely [ difficulty ] ,  ) ;
13829: LD_ADDR_VAR 0 2
13833: PUSH
13834: LD_VAR 0 2
13838: PUSH
13839: CALL 10585 0 0
13843: PPUSH
13844: LD_INT 8
13846: PPUSH
13847: LD_EXP 49
13851: PUSH
13852: LD_OWVAR 67
13856: ARRAY
13857: PPUSH
13858: LD_STRING 
13860: PPUSH
13861: CALL 14156 0 4
13865: ADD
13866: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , Ar_levely [ difficulty ] ,  ) ;
13867: LD_ADDR_VAR 0 2
13871: PUSH
13872: LD_VAR 0 2
13876: PUSH
13877: CALL 10585 0 0
13881: PPUSH
13882: LD_INT 8
13884: PPUSH
13885: LD_EXP 49
13889: PUSH
13890: LD_OWVAR 67
13894: ARRAY
13895: PPUSH
13896: LD_STRING 
13898: PPUSH
13899: CALL 14156 0 4
13903: ADD
13904: ST_TO_ADDR
// end ; Ar_utoklast_LIST = pom ;
13905: LD_ADDR_EXP 17
13909: PUSH
13910: LD_VAR 0 2
13914: ST_TO_ADDR
// pom = get_human ( get_sex , class_mortar , 4 ,  ) ;
13915: LD_ADDR_VAR 0 2
13919: PUSH
13920: CALL 10585 0 0
13924: PPUSH
13925: LD_INT 8
13927: PPUSH
13928: LD_INT 4
13930: PPUSH
13931: LD_STRING 
13933: PPUSH
13934: CALL 14156 0 4
13938: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
13939: LD_ADDR_OWVAR 40
13943: PUSH
13944: LD_INT 28
13946: ST_TO_ADDR
// vc_engine = engine_combustion ;
13947: LD_ADDR_OWVAR 39
13951: PUSH
13952: LD_INT 1
13954: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
13955: LD_ADDR_OWVAR 37
13959: PUSH
13960: LD_INT 13
13962: ST_TO_ADDR
// if difficulty = 1 then
13963: LD_OWVAR 67
13967: PUSH
13968: LD_INT 1
13970: EQUAL
13971: IFFALSE 13993
// begin vc_control = control_apeman ;
13973: LD_ADDR_OWVAR 38
13977: PUSH
13978: LD_INT 5
13980: ST_TO_ADDR
// av = CreateVehicle ;
13981: LD_ADDR_LOC 11
13985: PUSH
13986: CALL_OW 45
13990: ST_TO_ADDR
// end else
13991: GO 14057
// begin vc_control = control_manual ;
13993: LD_ADDR_OWVAR 38
13997: PUSH
13998: LD_INT 1
14000: ST_TO_ADDR
// av = CreateVehicle ;
14001: LD_ADDR_LOC 11
14005: PUSH
14006: CALL_OW 45
14010: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , Ar_levely [ difficulty ] ,  ) ;
14011: LD_ADDR_LOC 10
14015: PUSH
14016: CALL 10585 0 0
14020: PPUSH
14021: LD_INT 3
14023: PPUSH
14024: LD_EXP 49
14028: PUSH
14029: LD_OWVAR 67
14033: ARRAY
14034: PPUSH
14035: LD_STRING 
14037: PPUSH
14038: CALL 14156 0 4
14042: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
14043: LD_LOC 10
14047: PPUSH
14048: LD_LOC 11
14052: PPUSH
14053: CALL_OW 52
// end ; pom = pom ^ av ;
14057: LD_ADDR_VAR 0 2
14061: PUSH
14062: LD_VAR 0 2
14066: PUSH
14067: LD_LOC 11
14071: ADD
14072: ST_TO_ADDR
// vc_control = control_apeman ;
14073: LD_ADDR_OWVAR 38
14077: PUSH
14078: LD_INT 5
14080: ST_TO_ADDR
// av = CreateVehicle ;
14081: LD_ADDR_LOC 11
14085: PUSH
14086: CALL_OW 45
14090: ST_TO_ADDR
// pom = pom ^ av ;
14091: LD_ADDR_VAR 0 2
14095: PUSH
14096: LD_VAR 0 2
14100: PUSH
14101: LD_LOC 11
14105: ADD
14106: ST_TO_ADDR
// vc_weapon = ar_radar ;
14107: LD_ADDR_OWVAR 40
14111: PUSH
14112: LD_INT 30
14114: ST_TO_ADDR
// av = CreateVehicle ;
14115: LD_ADDR_LOC 11
14119: PUSH
14120: CALL_OW 45
14124: ST_TO_ADDR
// pom = pom ^ av ;
14125: LD_ADDR_VAR 0 2
14129: PUSH
14130: LD_VAR 0 2
14134: PUSH
14135: LD_LOC 11
14139: ADD
14140: ST_TO_ADDR
// Ar_backa_LIST = pom ;
14141: LD_ADDR_EXP 18
14145: PUSH
14146: LD_VAR 0 2
14150: ST_TO_ADDR
// end ;
14151: LD_VAR 0 1
14155: RET
// function get_human ( sex , clas , level , name ) ; var pom ; begin
14156: LD_INT 0
14158: PPUSH
14159: PPUSH
// PrepareHuman ( sex , clas , level ) ;
14160: LD_VAR 0 1
14164: PPUSH
14165: LD_VAR 0 2
14169: PPUSH
14170: LD_VAR 0 3
14174: PPUSH
14175: CALL_OW 380
// hc_name := name ;
14179: LD_ADDR_OWVAR 26
14183: PUSH
14184: LD_VAR 0 4
14188: ST_TO_ADDR
// pom = CreateHuman ;
14189: LD_ADDR_VAR 0 6
14193: PUSH
14194: CALL_OW 44
14198: ST_TO_ADDR
// result := pom ;
14199: LD_ADDR_VAR 0 5
14203: PUSH
14204: LD_VAR 0 6
14208: ST_TO_ADDR
// end ; end_of_file
14209: LD_VAR 0 5
14213: RET
// var plazici ; var navrat ; var zradci ; var pom , i ; var pocet_spadlych_beden ; every 0 0$0.1 do
14214: GO 14216
14216: DISABLE
// begin pocet_spadlych_beden = 0 ;
14217: LD_ADDR_LOC 22
14221: PUSH
14222: LD_INT 0
14224: ST_TO_ADDR
// end ;
14225: END
// every 0 0$0.1 do var sold ;
14226: GO 14228
14228: DISABLE
14229: LD_INT 0
14231: PPUSH
// begin navrat := false ;
14232: LD_ADDR_LOC 18
14236: PUSH
14237: LD_INT 0
14239: ST_TO_ADDR
// sold = UnitFilter ( Amici_enter , [ [ f_class , class_soldier ] ] ) ;
14240: LD_ADDR_VAR 0 1
14244: PUSH
14245: LD_EXP 43
14249: PPUSH
14250: LD_INT 25
14252: PUSH
14253: LD_INT 1
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: EMPTY
14261: LIST
14262: PPUSH
14263: CALL_OW 72
14267: ST_TO_ADDR
// if sold < 4 then
14268: LD_VAR 0 1
14272: PUSH
14273: LD_INT 4
14275: LESS
14276: IFFALSE 14287
// msg ( ERROR: malo vojaku . je to v prdeli ) else
14278: LD_STRING ERROR: malo vojaku . je to v prdeli
14280: PPUSH
14281: CALL_OW 100
14285: GO 14334
// plazici := [ sold [ 1 ] , sold [ 2 ] , sold [ 3 ] , sold [ 4 ] ] ;
14287: LD_ADDR_LOC 17
14291: PUSH
14292: LD_VAR 0 1
14296: PUSH
14297: LD_INT 1
14299: ARRAY
14300: PUSH
14301: LD_VAR 0 1
14305: PUSH
14306: LD_INT 2
14308: ARRAY
14309: PUSH
14310: LD_VAR 0 1
14314: PUSH
14315: LD_INT 3
14317: ARRAY
14318: PUSH
14319: LD_VAR 0 1
14323: PUSH
14324: LD_INT 4
14326: ARRAY
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: ST_TO_ADDR
// ComMoveXY ( Radar_enter , 87 , 137 ) ;
14334: LD_EXP 44
14338: PPUSH
14339: LD_INT 87
14341: PPUSH
14342: LD_INT 137
14344: PPUSH
14345: CALL_OW 111
// AddComMoveXY ( Radar_enter , 89 , 134 ) ;
14349: LD_EXP 44
14353: PPUSH
14354: LD_INT 89
14356: PPUSH
14357: LD_INT 134
14359: PPUSH
14360: CALL_OW 171
// AddComMoveXY ( Radar_enter , 91 , 131 ) ;
14364: LD_EXP 44
14368: PPUSH
14369: LD_INT 91
14371: PPUSH
14372: LD_INT 131
14374: PPUSH
14375: CALL_OW 171
// AddComHold ( Radar_enter ) ;
14379: LD_EXP 44
14383: PPUSH
14384: CALL_OW 200
// AddComMoveXY ( plazici [ 1 ] , 84 , 127 ) ;
14388: LD_LOC 17
14392: PUSH
14393: LD_INT 1
14395: ARRAY
14396: PPUSH
14397: LD_INT 84
14399: PPUSH
14400: LD_INT 127
14402: PPUSH
14403: CALL_OW 171
// AddComCrawl ( plazici [ 1 ] ) ;
14407: LD_LOC 17
14411: PUSH
14412: LD_INT 1
14414: ARRAY
14415: PPUSH
14416: CALL_OW 197
// AddComMoveXY ( plazici [ 1 ] , 91 , 126 ) ;
14420: LD_LOC 17
14424: PUSH
14425: LD_INT 1
14427: ARRAY
14428: PPUSH
14429: LD_INT 91
14431: PPUSH
14432: LD_INT 126
14434: PPUSH
14435: CALL_OW 171
// AddComMoveXY ( plazici [ 2 ] , 85 , 127 ) ;
14439: LD_LOC 17
14443: PUSH
14444: LD_INT 2
14446: ARRAY
14447: PPUSH
14448: LD_INT 85
14450: PPUSH
14451: LD_INT 127
14453: PPUSH
14454: CALL_OW 171
// AddComCrawl ( plazici [ 2 ] ) ;
14458: LD_LOC 17
14462: PUSH
14463: LD_INT 2
14465: ARRAY
14466: PPUSH
14467: CALL_OW 197
// AddComMoveXY ( plazici [ 2 ] , 93 , 128 ) ;
14471: LD_LOC 17
14475: PUSH
14476: LD_INT 2
14478: ARRAY
14479: PPUSH
14480: LD_INT 93
14482: PPUSH
14483: LD_INT 128
14485: PPUSH
14486: CALL_OW 171
// AddComMoveXY ( plazici [ 3 ] , 83 , 126 ) ;
14490: LD_LOC 17
14494: PUSH
14495: LD_INT 3
14497: ARRAY
14498: PPUSH
14499: LD_INT 83
14501: PPUSH
14502: LD_INT 126
14504: PPUSH
14505: CALL_OW 171
// AddComCrawl ( plazici [ 3 ] ) ;
14509: LD_LOC 17
14513: PUSH
14514: LD_INT 3
14516: ARRAY
14517: PPUSH
14518: CALL_OW 197
// AddComMoveXY ( plazici [ 3 ] , 92 , 128 ) ;
14522: LD_LOC 17
14526: PUSH
14527: LD_INT 3
14529: ARRAY
14530: PPUSH
14531: LD_INT 92
14533: PPUSH
14534: LD_INT 128
14536: PPUSH
14537: CALL_OW 171
// AddComMoveXY ( plazici [ 4 ] , 82 , 125 ) ;
14541: LD_LOC 17
14545: PUSH
14546: LD_INT 4
14548: ARRAY
14549: PPUSH
14550: LD_INT 82
14552: PPUSH
14553: LD_INT 125
14555: PPUSH
14556: CALL_OW 171
// AddComCrawl ( plazici [ 4 ] ) ;
14560: LD_LOC 17
14564: PUSH
14565: LD_INT 4
14567: ARRAY
14568: PPUSH
14569: CALL_OW 197
// AddComMoveXY ( plazici [ 4 ] , 90 , 127 ) ;
14573: LD_LOC 17
14577: PUSH
14578: LD_INT 4
14580: ARRAY
14581: PPUSH
14582: LD_INT 90
14584: PPUSH
14585: LD_INT 127
14587: PPUSH
14588: CALL_OW 171
// AddComHold ( plazici ) ;
14592: LD_LOC 17
14596: PPUSH
14597: CALL_OW 200
// CenterNowOnXY ( 92 , 135 ) ;
14601: LD_INT 92
14603: PPUSH
14604: LD_INT 135
14606: PPUSH
14607: CALL_OW 86
// end ;
14611: PPOPN 1
14613: END
// every 0 0$0.5 trigger IsAt ( Radar_enter , 91 , 131 ) do
14614: LD_EXP 44
14618: PPUSH
14619: LD_INT 91
14621: PPUSH
14622: LD_INT 131
14624: PPUSH
14625: CALL_OW 307
14629: IFFALSE 14670
14631: GO 14633
14633: DISABLE
// begin ComMoveXY ( mrtvola , 105 , 139 ) ;
14634: LD_INT 64
14636: PPUSH
14637: LD_INT 105
14639: PPUSH
14640: LD_INT 139
14642: PPUSH
14643: CALL_OW 111
// AddComTurnXY ( mrtvola , 103 , 137 ) ;
14647: LD_INT 64
14649: PPUSH
14650: LD_INT 103
14652: PPUSH
14653: LD_INT 137
14655: PPUSH
14656: CALL_OW 178
// CenterOnXY ( 97 , 132 ) ;
14660: LD_INT 97
14662: PPUSH
14663: LD_INT 132
14665: PPUSH
14666: CALL_OW 84
// end ;
14670: END
// every 0 0$1 trigger IsAt ( mrtvola , 105 , 139 ) do
14671: LD_INT 64
14673: PPUSH
14674: LD_INT 105
14676: PPUSH
14677: LD_INT 139
14679: PPUSH
14680: CALL_OW 307
14684: IFFALSE 14709
14686: GO 14688
14688: DISABLE
// begin ComExitBuilding ( zradce1 ) ;
14689: LD_INT 65
14691: PPUSH
14692: CALL_OW 122
// ComMoveXY ( zradce1 , 107 , 138 ) ;
14696: LD_INT 65
14698: PPUSH
14699: LD_INT 107
14701: PPUSH
14702: LD_INT 138
14704: PPUSH
14705: CALL_OW 111
// end ;
14709: END
// every 0 0$1 trigger IsAt ( zradce1 , 107 , 138 ) do
14710: LD_INT 65
14712: PPUSH
14713: LD_INT 107
14715: PPUSH
14716: LD_INT 138
14718: PPUSH
14719: CALL_OW 307
14723: IFFALSE 15281
14725: GO 14727
14727: DISABLE
// begin ComTurnUnit ( mrtvola , zradce1 ) ;
14728: LD_INT 64
14730: PPUSH
14731: LD_INT 65
14733: PPUSH
14734: CALL_OW 119
// ComTurnUnit ( zradce1 , mrtvola ) ;
14738: LD_INT 65
14740: PPUSH
14741: LD_INT 64
14743: PPUSH
14744: CALL_OW 119
// SayNoFace ( mrtvola , D1a-Merc1-1 ) ;
14748: LD_INT 64
14750: PPUSH
14751: LD_STRING D1a-Merc1-1
14753: PPUSH
14754: CALL_OW 89
// SayNoFace ( zradce1 , D1a-FMerc2-1 ) ;
14758: LD_INT 65
14760: PPUSH
14761: LD_STRING D1a-FMerc2-1
14763: PPUSH
14764: CALL_OW 89
// wait ( 0 0$0.3 ) ;
14768: LD_INT 10
14770: PPUSH
14771: CALL_OW 67
// ComTurnXY ( mrtvola , 101 , 141 ) ;
14775: LD_INT 64
14777: PPUSH
14778: LD_INT 101
14780: PPUSH
14781: LD_INT 141
14783: PPUSH
14784: CALL_OW 118
// wait ( 10 ) ;
14788: LD_INT 10
14790: PPUSH
14791: CALL_OW 67
// ComMoveUnit ( zradce1 , mrtvola ) ;
14795: LD_INT 65
14797: PPUSH
14798: LD_INT 64
14800: PPUSH
14801: CALL_OW 112
// SetLives ( mrtvola , 300 ) ;
14805: LD_INT 64
14807: PPUSH
14808: LD_INT 300
14810: PPUSH
14811: CALL_OW 234
// wait ( 0 0$1 ) ;
14815: LD_INT 35
14817: PPUSH
14818: CALL_OW 67
// AddComTurnUnit ( zradce1 , mrtvola ) ;
14822: LD_INT 65
14824: PPUSH
14825: LD_INT 64
14827: PPUSH
14828: CALL_OW 179
// AddComHeal ( zradce1 , mrtvola ) ;
14832: LD_INT 65
14834: PPUSH
14835: LD_INT 64
14837: PPUSH
14838: CALL_OW 188
// repeat wait ( 3 ) until GetLives ( mrtvola ) > 340 ;
14842: LD_INT 3
14844: PPUSH
14845: CALL_OW 67
14849: LD_INT 64
14851: PPUSH
14852: CALL_OW 256
14856: PUSH
14857: LD_INT 340
14859: GREATER
14860: IFFALSE 14842
// SetLives ( mrtvola , 10 ) ;
14862: LD_INT 64
14864: PPUSH
14865: LD_INT 10
14867: PPUSH
14868: CALL_OW 234
// enable ( 80 ) ;
14872: LD_INT 80
14874: ENABLE_MARKED
// wait ( 0 0$0.5 ) ;
14875: LD_INT 18
14877: PPUSH
14878: CALL_OW 67
// ForceSayNoFace ( mrtvola , D1a-Merc1-2 ) ;
14882: LD_INT 64
14884: PPUSH
14885: LD_STRING D1a-Merc1-2
14887: PPUSH
14888: CALL_OW 93
// wait ( 0 0$3 ) ;
14892: LD_INT 105
14894: PPUSH
14895: CALL_OW 67
// KillUnit ( mrtvola ) ;
14899: LD_INT 64
14901: PPUSH
14902: CALL_OW 66
// ComTurnXY ( zradce1 , 87 , 137 ) ;
14906: LD_INT 65
14908: PPUSH
14909: LD_INT 87
14911: PPUSH
14912: LD_INT 137
14914: PPUSH
14915: CALL_OW 118
// wait ( 0 0$1 ) ;
14919: LD_INT 35
14921: PPUSH
14922: CALL_OW 67
// SayNoFace ( zradce1 , D1a-FMerc2-2 ) ;
14926: LD_INT 65
14928: PPUSH
14929: LD_STRING D1a-FMerc2-2
14931: PPUSH
14932: CALL_OW 89
// ComExitBuilding ( [ zradce4 , zradce5 ] ) ;
14936: LD_INT 70
14938: PUSH
14939: LD_INT 71
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PPUSH
14946: CALL_OW 122
// ComExitBuilding ( [ zradce2 , zradce3 , zradce6 , zradce7 ] ) ;
14950: LD_INT 68
14952: PUSH
14953: LD_INT 69
14955: PUSH
14956: LD_INT 75
14958: PUSH
14959: LD_INT 77
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: PPUSH
14968: CALL_OW 122
// ComMoveXY ( [ zradce2 , zradce3 , zradce6 , zradce7 ] , 165 , 141 ) ;
14972: LD_INT 68
14974: PUSH
14975: LD_INT 69
14977: PUSH
14978: LD_INT 75
14980: PUSH
14981: LD_INT 77
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: PPUSH
14990: LD_INT 165
14992: PPUSH
14993: LD_INT 141
14995: PPUSH
14996: CALL_OW 111
// KillUnit ( mrtvola2 ) ;
15000: LD_INT 78
15002: PPUSH
15003: CALL_OW 66
// AddComMoveUnit ( zradce4 , utek2 ) ;
15007: LD_INT 70
15009: PPUSH
15010: LD_INT 67
15012: PPUSH
15013: CALL_OW 172
// AddComMoveUnit ( zradce5 , utek1 ) ;
15017: LD_INT 71
15019: PPUSH
15020: LD_INT 66
15022: PPUSH
15023: CALL_OW 172
// SetFuel ( utek1 , 0 ) ;
15027: LD_INT 66
15029: PPUSH
15030: LD_INT 0
15032: PPUSH
15033: CALL_OW 240
// SetFuel ( utek2 , 0 ) ;
15037: LD_INT 67
15039: PPUSH
15040: LD_INT 0
15042: PPUSH
15043: CALL_OW 240
// wait ( 0 0$1 ) ;
15047: LD_INT 35
15049: PPUSH
15050: CALL_OW 67
// AddComMoveXY ( utek1 , 162 , 142 ) ;
15054: LD_INT 66
15056: PPUSH
15057: LD_INT 162
15059: PPUSH
15060: LD_INT 142
15062: PPUSH
15063: CALL_OW 171
// AddComMoveXY ( utek2 , 162 , 139 ) ;
15067: LD_INT 67
15069: PPUSH
15070: LD_INT 162
15072: PPUSH
15073: LD_INT 139
15075: PPUSH
15076: CALL_OW 171
// ComMoveXY ( zradce1 , 162 , 140 ) ;
15080: LD_INT 65
15082: PPUSH
15083: LD_INT 162
15085: PPUSH
15086: LD_INT 140
15088: PPUSH
15089: CALL_OW 111
// AddComMoveXY ( [ zradce1 , zradce2 , zradce3 , zradce6 , zradce7 ] , 175 , 128 ) ;
15093: LD_INT 65
15095: PUSH
15096: LD_INT 68
15098: PUSH
15099: LD_INT 69
15101: PUSH
15102: LD_INT 75
15104: PUSH
15105: LD_INT 77
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: PPUSH
15115: LD_INT 175
15117: PPUSH
15118: LD_INT 128
15120: PPUSH
15121: CALL_OW 171
// AddComMoveXY ( [ zradce1 , zradce2 , zradce3 , zradce6 , zradce7 ] , 126 , 94 ) ;
15125: LD_INT 65
15127: PUSH
15128: LD_INT 68
15130: PUSH
15131: LD_INT 69
15133: PUSH
15134: LD_INT 75
15136: PUSH
15137: LD_INT 77
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: PPUSH
15147: LD_INT 126
15149: PPUSH
15150: LD_INT 94
15152: PPUSH
15153: CALL_OW 171
// AddComMoveXY ( [ zradce1 , zradce2 , zradce3 , zradce6 , zradce7 ] , 165 , 92 ) ;
15157: LD_INT 65
15159: PUSH
15160: LD_INT 68
15162: PUSH
15163: LD_INT 69
15165: PUSH
15166: LD_INT 75
15168: PUSH
15169: LD_INT 77
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: PPUSH
15179: LD_INT 165
15181: PPUSH
15182: LD_INT 92
15184: PPUSH
15185: CALL_OW 171
// zradci = [ zradce1 , zradce2 , zradce3 , zradce4 , zradce5 , zradce6 , zradce7 , utek1 , utek2 ] ;
15189: LD_ADDR_LOC 19
15193: PUSH
15194: LD_INT 65
15196: PUSH
15197: LD_INT 68
15199: PUSH
15200: LD_INT 69
15202: PUSH
15203: LD_INT 70
15205: PUSH
15206: LD_INT 71
15208: PUSH
15209: LD_INT 75
15211: PUSH
15212: LD_INT 77
15214: PUSH
15215: LD_INT 66
15217: PUSH
15218: LD_INT 67
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: ST_TO_ADDR
// Odebirani = true ;
15232: LD_ADDR_EXP 45
15236: PUSH
15237: LD_INT 1
15239: ST_TO_ADDR
// ComFree ( plazici ) ;
15240: LD_LOC 17
15244: PPUSH
15245: CALL_OW 139
// ComFree ( Radar_enter ) ;
15249: LD_EXP 44
15253: PPUSH
15254: CALL_OW 139
// ComMoveXY ( plazici , 86 , 133 ) ;
15258: LD_LOC 17
15262: PPUSH
15263: LD_INT 86
15265: PPUSH
15266: LD_INT 133
15268: PPUSH
15269: CALL_OW 111
// navrat := true ;
15273: LD_ADDR_LOC 18
15277: PUSH
15278: LD_INT 1
15280: ST_TO_ADDR
// end ;
15281: END
// every 3 trigger IsLive ( mrtvola ) marked 80 do
15282: LD_INT 64
15284: PPUSH
15285: CALL_OW 300
15289: IFFALSE 15331
15291: GO 15293
15293: DISABLE
// begin enable ;
15294: ENABLE
// if GetLives ( mrtvola ) > 10 and GetLives ( mrtvola ) < 250 then
15295: LD_INT 64
15297: PPUSH
15298: CALL_OW 256
15302: PUSH
15303: LD_INT 10
15305: GREATER
15306: PUSH
15307: LD_INT 64
15309: PPUSH
15310: CALL_OW 256
15314: PUSH
15315: LD_INT 250
15317: LESS
15318: AND
15319: IFFALSE 15331
// SetLives ( mrtvola , 10 ) ;
15321: LD_INT 64
15323: PPUSH
15324: LD_INT 10
15326: PPUSH
15327: CALL_OW 234
// end ;
15331: END
// every 0 0$5 do
15332: GO 15334
15334: DISABLE
// begin if ( IsInArea ( utek1 , Benal ) or not IsOk ( zradce5 ) ) and ( IsInArea ( utek2 , Benal ) or not IsOk ( zradce4 ) ) then
15335: LD_INT 66
15337: PPUSH
15338: LD_INT 4
15340: PPUSH
15341: CALL_OW 308
15345: PUSH
15346: LD_INT 71
15348: PPUSH
15349: CALL_OW 302
15353: NOT
15354: OR
15355: PUSH
15356: LD_INT 67
15358: PPUSH
15359: LD_INT 4
15361: PPUSH
15362: CALL_OW 308
15366: PUSH
15367: LD_INT 70
15369: PPUSH
15370: CALL_OW 302
15374: NOT
15375: OR
15376: AND
15377: IFFALSE 15519
// begin if IsOk ( zradce5 ) then
15379: LD_INT 71
15381: PPUSH
15382: CALL_OW 302
15386: IFFALSE 15398
// SetFuel ( utek1 , 100 ) ;
15388: LD_INT 66
15390: PPUSH
15391: LD_INT 100
15393: PPUSH
15394: CALL_OW 240
// if IsOk ( zradce4 ) then
15398: LD_INT 70
15400: PPUSH
15401: CALL_OW 302
15405: IFFALSE 15417
// SetFuel ( utek2 , 100 ) ;
15407: LD_INT 67
15409: PPUSH
15410: LD_INT 100
15412: PPUSH
15413: CALL_OW 240
// ComEnterUnit ( zradce5 , utek1 ) ;
15417: LD_INT 71
15419: PPUSH
15420: LD_INT 66
15422: PPUSH
15423: CALL_OW 120
// ComEnterUnit ( zradce4 , utek2 ) ;
15427: LD_INT 70
15429: PPUSH
15430: LD_INT 67
15432: PPUSH
15433: CALL_OW 120
// AddComMoveXY ( [ zradce4 , zradce5 ] , 179 , 136 ) ;
15437: LD_INT 70
15439: PUSH
15440: LD_INT 71
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PPUSH
15447: LD_INT 179
15449: PPUSH
15450: LD_INT 136
15452: PPUSH
15453: CALL_OW 171
// AddComMoveXY ( [ zradce4 , zradce5 ] , 153 , 108 ) ;
15457: LD_INT 70
15459: PUSH
15460: LD_INT 71
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PPUSH
15467: LD_INT 153
15469: PPUSH
15470: LD_INT 108
15472: PPUSH
15473: CALL_OW 171
// AddComMoveXY ( [ zradce4 , zradce5 ] , 126 , 91 ) ;
15477: LD_INT 70
15479: PUSH
15480: LD_INT 71
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PPUSH
15487: LD_INT 126
15489: PPUSH
15490: LD_INT 91
15492: PPUSH
15493: CALL_OW 171
// AddComMoveXY ( [ zradce4 , zradce5 ] , 165 , 92 ) ;
15497: LD_INT 70
15499: PUSH
15500: LD_INT 71
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PPUSH
15507: LD_INT 165
15509: PPUSH
15510: LD_INT 92
15512: PPUSH
15513: CALL_OW 171
// end else
15517: GO 15540
// begin ComMoveXY ( [ utek1 , utek2 ] , 162 , 142 ) ;
15519: LD_INT 66
15521: PUSH
15522: LD_INT 67
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PPUSH
15529: LD_INT 162
15531: PPUSH
15532: LD_INT 142
15534: PPUSH
15535: CALL_OW 111
// enable ;
15539: ENABLE
// end ; end ;
15540: END
// every 0 0$1 trigger Odebirani do
15541: LD_EXP 45
15545: IFFALSE 15659
15547: GO 15549
15549: DISABLE
// begin pom = UnitFilter ( zradci , [ f_inarea , ExitAR ] ) ;
15550: LD_ADDR_LOC 20
15554: PUSH
15555: LD_LOC 19
15559: PPUSH
15560: LD_INT 95
15562: PUSH
15563: LD_INT 5
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: PPUSH
15570: CALL_OW 72
15574: ST_TO_ADDR
// for i in pom do
15575: LD_ADDR_LOC 21
15579: PUSH
15580: LD_LOC 20
15584: PUSH
15585: FOR_IN
15586: IFFALSE 15599
// RemoveUnit ( i ) ;
15588: LD_LOC 21
15592: PPUSH
15593: CALL_OW 64
15597: GO 15585
15599: POP
15600: POP
// zradci = UnitFilter ( zradci , [ [ f_alive ] , [ f_side , Arabi ] ] ) ;
15601: LD_ADDR_LOC 19
15605: PUSH
15606: LD_LOC 19
15610: PPUSH
15611: LD_INT 51
15613: PUSH
15614: EMPTY
15615: LIST
15616: PUSH
15617: LD_INT 22
15619: PUSH
15620: LD_EXP 3
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PPUSH
15633: CALL_OW 72
15637: ST_TO_ADDR
// if zradci > 0 then
15638: LD_LOC 19
15642: PUSH
15643: LD_INT 0
15645: GREATER
15646: IFFALSE 15651
// enable else
15648: ENABLE
15649: GO 15659
// Odebirani = false ;
15651: LD_ADDR_EXP 45
15655: PUSH
15656: LD_INT 0
15658: ST_TO_ADDR
// end ;
15659: END
// every 0 0$1 trigger navrat do
15660: LD_LOC 18
15664: IFFALSE 15795
15666: GO 15668
15668: DISABLE
// begin if IsAt ( plazici [ 1 ] , 86 , 133 ) or IsAt ( plazici [ 2 ] , 86 , 133 ) or IsAt ( plazici [ 3 ] , 86 , 133 ) or IsAt ( plazici [ 4 ] , 86 , 133 ) then
15669: LD_LOC 17
15673: PUSH
15674: LD_INT 1
15676: ARRAY
15677: PPUSH
15678: LD_INT 86
15680: PPUSH
15681: LD_INT 133
15683: PPUSH
15684: CALL_OW 307
15688: PUSH
15689: LD_LOC 17
15693: PUSH
15694: LD_INT 2
15696: ARRAY
15697: PPUSH
15698: LD_INT 86
15700: PPUSH
15701: LD_INT 133
15703: PPUSH
15704: CALL_OW 307
15708: OR
15709: PUSH
15710: LD_LOC 17
15714: PUSH
15715: LD_INT 3
15717: ARRAY
15718: PPUSH
15719: LD_INT 86
15721: PPUSH
15722: LD_INT 133
15724: PPUSH
15725: CALL_OW 307
15729: OR
15730: PUSH
15731: LD_LOC 17
15735: PUSH
15736: LD_INT 4
15738: ARRAY
15739: PPUSH
15740: LD_INT 86
15742: PPUSH
15743: LD_INT 133
15745: PPUSH
15746: CALL_OW 307
15750: OR
15751: IFFALSE 15794
// begin ComWalk ( plazici ) ;
15753: LD_LOC 17
15757: PPUSH
15758: CALL_OW 138
// AddComMoveXY ( plazici , 83 , 148 ) ;
15762: LD_LOC 17
15766: PPUSH
15767: LD_INT 83
15769: PPUSH
15770: LD_INT 148
15772: PPUSH
15773: CALL_OW 171
// ComMoveXY ( Radar_enter , 87 , 152 ) ;
15777: LD_EXP 44
15781: PPUSH
15782: LD_INT 87
15784: PPUSH
15785: LD_INT 152
15787: PPUSH
15788: CALL_OW 111
// end else
15792: GO 15795
// enable ;
15794: ENABLE
// end ;
15795: END
// every 0 0$0.5 trigger navrat do
15796: LD_LOC 18
15800: IFFALSE 15834
15802: GO 15804
15804: DISABLE
// begin if IsInArea ( plazici [ 1 ] , AMret ) then
15805: LD_LOC 17
15809: PUSH
15810: LD_INT 1
15812: ARRAY
15813: PPUSH
15814: LD_INT 2
15816: PPUSH
15817: CALL_OW 308
15821: IFFALSE 15833
// begin chmo1 ;
15823: CALL 2345 0 0
// InGameOff ;
15827: CALL_OW 9
// end else
15831: GO 15834
// enable ;
15833: ENABLE
// end ;
15834: END
// every 0 0$10 trigger A1_dobyta do var pom ;
15835: LD_EXP 28
15839: IFFALSE 15934
15841: GO 15843
15843: DISABLE
15844: LD_INT 0
15846: PPUSH
// begin wait ( Rand ( 1 1$0 , 2 2$20 ) ) ;
15847: LD_INT 2100
15849: PPUSH
15850: LD_INT 4900
15852: PPUSH
15853: CALL_OW 12
15857: PPUSH
15858: CALL_OW 67
// pom = Rand ( 4 - difficulty , 5 ) ;
15862: LD_ADDR_VAR 0 1
15866: PUSH
15867: LD_INT 4
15869: PUSH
15870: LD_OWVAR 67
15874: MINUS
15875: PPUSH
15876: LD_INT 5
15878: PPUSH
15879: CALL_OW 12
15883: ST_TO_ADDR
// CreateCratesArea ( pom , Abase1 , true ) ;
15884: LD_VAR 0 1
15888: PPUSH
15889: LD_INT 3
15891: PPUSH
15892: LD_INT 1
15894: PPUSH
15895: CALL_OW 55
// pocet_spadlych_beden = pocet_spadlych_beden + pom ;
15899: LD_ADDR_LOC 22
15903: PUSH
15904: LD_LOC 22
15908: PUSH
15909: LD_VAR 0 1
15913: PLUS
15914: ST_TO_ADDR
// if pocet_spadlych_beden < max_bedny [ difficulty ] then
15915: LD_LOC 22
15919: PUSH
15920: LD_EXP 51
15924: PUSH
15925: LD_OWVAR 67
15929: ARRAY
15930: LESS
15931: IFFALSE 15934
// enable ;
15933: ENABLE
// end ;
15934: PPOPN 1
15936: END
// every 0 0$10 trigger A2_dobyta do
15937: LD_EXP 29
15941: IFFALSE 15966
15943: GO 15945
15945: DISABLE
// begin pocet_spadlych_beden = pocet_spadlych_beden - 10 + difficulty ;
15946: LD_ADDR_LOC 22
15950: PUSH
15951: LD_LOC 22
15955: PUSH
15956: LD_INT 10
15958: MINUS
15959: PUSH
15960: LD_OWVAR 67
15964: PLUS
15965: ST_TO_ADDR
// end ; end_of_file
15966: END
// export A1_dobyta ; export A2_dobyta ; export A3_dobyta ; export Pruzkumnik ; var vysl ; var pom , i ; var uspech ; export JMM ; export Powell ; export Gary ; export Bobby ; export Frank ; export Lisa ; export Cornel ; export Yamoko ; export Cyrus ; export Don ; export Brown ; export Amici_enter ; export Radar_enter ; every 0 0$30 trigger A1_dobyta do
15967: LD_EXP 28
15971: IFFALSE 16294
15973: GO 15975
15975: DISABLE
// begin if IsOK ( Frank ) then
15976: LD_EXP 36
15980: PPUSH
15981: CALL_OW 302
15985: IFFALSE 16293
// begin wait ( 0 0$10 ) ;
15987: LD_INT 350
15989: PPUSH
15990: CALL_OW 67
// vysl := dialog_frank ;
15994: LD_ADDR_LOC 23
15998: PUSH
15999: CALL 3035 0 0
16003: ST_TO_ADDR
// pom = Rand ( 1 , 100 ) ;
16004: LD_ADDR_LOC 24
16008: PUSH
16009: LD_INT 1
16011: PPUSH
16012: LD_INT 100
16014: PPUSH
16015: CALL_OW 12
16019: ST_TO_ADDR
// case vysl of 1 :
16020: LD_LOC 23
16024: PUSH
16025: LD_INT 1
16027: DOUBLE
16028: EQUAL
16029: IFTRUE 16033
16031: GO 16063
16033: POP
// begin i = [ 50 , 30 , 20 ] ;
16034: LD_ADDR_LOC 25
16038: PUSH
16039: LD_INT 50
16041: PUSH
16042: LD_INT 30
16044: PUSH
16045: LD_INT 20
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: LIST
16052: ST_TO_ADDR
// Pruzkumnik = true ;
16053: LD_ADDR_EXP 31
16057: PUSH
16058: LD_INT 1
16060: ST_TO_ADDR
// end ; 21 :
16061: GO 16110
16063: LD_INT 21
16065: DOUBLE
16066: EQUAL
16067: IFTRUE 16071
16069: GO 16101
16071: POP
// begin i = [ 80 , 15 , 5 ] ;
16072: LD_ADDR_LOC 25
16076: PUSH
16077: LD_INT 80
16079: PUSH
16080: LD_INT 15
16082: PUSH
16083: LD_INT 5
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: LIST
16090: ST_TO_ADDR
// Pruzkumnik = true ;
16091: LD_ADDR_EXP 31
16095: PUSH
16096: LD_INT 1
16098: ST_TO_ADDR
// end ; else
16099: GO 16110
16101: POP
// uspech = 0 ; end ;
16102: LD_ADDR_LOC 26
16106: PUSH
16107: LD_INT 0
16109: ST_TO_ADDR
// if Pruzkumnik then
16110: LD_EXP 31
16114: IFFALSE 16195
// begin jdi_na_pruzkum ( Frank ) ;
16116: LD_EXP 36
16120: PPUSH
16121: CALL 16615 0 1
// if pom <= i [ 1 ] then
16125: LD_LOC 24
16129: PUSH
16130: LD_LOC 25
16134: PUSH
16135: LD_INT 1
16137: ARRAY
16138: LESSEQUAL
16139: IFFALSE 16151
// uspech = 1 else
16141: LD_ADDR_LOC 26
16145: PUSH
16146: LD_INT 1
16148: ST_TO_ADDR
16149: GO 16195
// if pom <= i [ 1 ] + i [ 2 ] then
16151: LD_LOC 24
16155: PUSH
16156: LD_LOC 25
16160: PUSH
16161: LD_INT 1
16163: ARRAY
16164: PUSH
16165: LD_LOC 25
16169: PUSH
16170: LD_INT 2
16172: ARRAY
16173: PLUS
16174: LESSEQUAL
16175: IFFALSE 16187
// uspech = 2 else
16177: LD_ADDR_LOC 26
16181: PUSH
16182: LD_INT 2
16184: ST_TO_ADDR
16185: GO 16195
// uspech = 3 ;
16187: LD_ADDR_LOC 26
16191: PUSH
16192: LD_INT 3
16194: ST_TO_ADDR
// end ; case uspech of 1 :
16195: LD_LOC 26
16199: PUSH
16200: LD_INT 1
16202: DOUBLE
16203: EQUAL
16204: IFTRUE 16208
16206: GO 16234
16208: POP
// begin wait ( 3 3$0 ) ;
16209: LD_INT 6300
16211: PPUSH
16212: CALL_OW 67
// navrat_z_pruzkumu ( Frank , 1 ) ;
16216: LD_EXP 36
16220: PPUSH
16221: LD_INT 1
16223: PPUSH
16224: CALL 16863 0 2
// fuspech1 ;
16228: CALL 3285 0 0
// end ; 2 :
16232: GO 16291
16234: LD_INT 2
16236: DOUBLE
16237: EQUAL
16238: IFTRUE 16242
16240: GO 16268
16242: POP
// begin wait ( 1 1$0 ) ;
16243: LD_INT 2100
16245: PPUSH
16246: CALL_OW 67
// navrat_z_pruzkumu ( Frank , 2 ) ;
16250: LD_EXP 36
16254: PPUSH
16255: LD_INT 2
16257: PPUSH
16258: CALL 16863 0 2
// fuspech2 ;
16262: CALL 3422 0 0
// end ; 3 :
16266: GO 16291
16268: LD_INT 3
16270: DOUBLE
16271: EQUAL
16272: IFTRUE 16276
16274: GO 16290
16276: POP
// begin wait ( 5 5$0 ) ;
16277: LD_INT 10500
16279: PPUSH
16280: CALL_OW 67
// fuspech3 ;
16284: CALL 3565 0 0
// end ; end ;
16288: GO 16291
16290: POP
// end else
16291: GO 16294
// enable ;
16293: ENABLE
// end ;
16294: END
// every 0 0$30 trigger A1_dobyta do
16295: LD_EXP 28
16299: IFFALSE 16614
16301: GO 16303
16303: DISABLE
// begin if IsOK ( Yamoko ) then
16304: LD_EXP 39
16308: PPUSH
16309: CALL_OW 302
16313: IFFALSE 16613
// begin wait ( 0 0$10 ) ;
16315: LD_INT 350
16317: PPUSH
16318: CALL_OW 67
// vysl := dialog_yamoko ;
16322: LD_ADDR_LOC 23
16326: PUSH
16327: CALL 3573 0 0
16331: ST_TO_ADDR
// pom = Rand ( 1 , 100 ) ;
16332: LD_ADDR_LOC 24
16336: PUSH
16337: LD_INT 1
16339: PPUSH
16340: LD_INT 100
16342: PPUSH
16343: CALL_OW 12
16347: ST_TO_ADDR
// case vysl of 1 :
16348: LD_LOC 23
16352: PUSH
16353: LD_INT 1
16355: DOUBLE
16356: EQUAL
16357: IFTRUE 16361
16359: GO 16391
16361: POP
// begin i = [ 50 , 20 , 30 ] ;
16362: LD_ADDR_LOC 25
16366: PUSH
16367: LD_INT 50
16369: PUSH
16370: LD_INT 20
16372: PUSH
16373: LD_INT 30
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: LIST
16380: ST_TO_ADDR
// Pruzkumnik = true ;
16381: LD_ADDR_EXP 31
16385: PUSH
16386: LD_INT 1
16388: ST_TO_ADDR
// end ; 21 :
16389: GO 16430
16391: LD_INT 21
16393: DOUBLE
16394: EQUAL
16395: IFTRUE 16399
16397: GO 16429
16399: POP
// begin i = [ 70 , 25 , 5 ] ;
16400: LD_ADDR_LOC 25
16404: PUSH
16405: LD_INT 70
16407: PUSH
16408: LD_INT 25
16410: PUSH
16411: LD_INT 5
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: LIST
16418: ST_TO_ADDR
// Pruzkumnik = true ;
16419: LD_ADDR_EXP 31
16423: PUSH
16424: LD_INT 1
16426: ST_TO_ADDR
// end ; end ;
16427: GO 16430
16429: POP
// if Pruzkumnik then
16430: LD_EXP 31
16434: IFFALSE 16515
// begin jdi_na_pruzkum ( Yamoko ) ;
16436: LD_EXP 39
16440: PPUSH
16441: CALL 16615 0 1
// if pom <= i [ 1 ] then
16445: LD_LOC 24
16449: PUSH
16450: LD_LOC 25
16454: PUSH
16455: LD_INT 1
16457: ARRAY
16458: LESSEQUAL
16459: IFFALSE 16471
// uspech = 1 else
16461: LD_ADDR_LOC 26
16465: PUSH
16466: LD_INT 1
16468: ST_TO_ADDR
16469: GO 16515
// if pom <= i [ 1 ] + i [ 2 ] then
16471: LD_LOC 24
16475: PUSH
16476: LD_LOC 25
16480: PUSH
16481: LD_INT 1
16483: ARRAY
16484: PUSH
16485: LD_LOC 25
16489: PUSH
16490: LD_INT 2
16492: ARRAY
16493: PLUS
16494: LESSEQUAL
16495: IFFALSE 16507
// uspech = 2 else
16497: LD_ADDR_LOC 26
16501: PUSH
16502: LD_INT 2
16504: ST_TO_ADDR
16505: GO 16515
// uspech = 3 ;
16507: LD_ADDR_LOC 26
16511: PUSH
16512: LD_INT 3
16514: ST_TO_ADDR
// end ; case uspech of 1 :
16515: LD_LOC 26
16519: PUSH
16520: LD_INT 1
16522: DOUBLE
16523: EQUAL
16524: IFTRUE 16528
16526: GO 16554
16528: POP
// begin wait ( 2 2$0 ) ;
16529: LD_INT 4200
16531: PPUSH
16532: CALL_OW 67
// navrat_z_pruzkumu ( Yamoko , 1 ) ;
16536: LD_EXP 39
16540: PPUSH
16541: LD_INT 1
16543: PPUSH
16544: CALL 16863 0 2
// yuspech1 ;
16548: CALL 3678 0 0
// end ; 2 :
16552: GO 16611
16554: LD_INT 2
16556: DOUBLE
16557: EQUAL
16558: IFTRUE 16562
16560: GO 16588
16562: POP
// begin wait ( 1 1$0 ) ;
16563: LD_INT 2100
16565: PPUSH
16566: CALL_OW 67
// navrat_z_pruzkumu ( Yamoko , 2 ) ;
16570: LD_EXP 39
16574: PPUSH
16575: LD_INT 2
16577: PPUSH
16578: CALL 16863 0 2
// yuspech2 ;
16582: CALL 3827 0 0
// end ; 3 :
16586: GO 16611
16588: LD_INT 3
16590: DOUBLE
16591: EQUAL
16592: IFTRUE 16596
16594: GO 16610
16596: POP
// begin wait ( 5 5$0 ) ;
16597: LD_INT 10500
16599: PPUSH
16600: CALL_OW 67
// yuspech3 ;
16604: CALL 3926 0 0
// end ; end ;
16608: GO 16611
16610: POP
// end else
16611: GO 16614
// enable ;
16613: ENABLE
// end ;
16614: END
// function jdi_na_pruzkum ( pru ) ; begin
16615: LD_INT 0
16617: PPUSH
// ComStop ( pru ) ;
16618: LD_VAR 0 1
16622: PPUSH
16623: CALL_OW 141
// AddComExitBuilding ( pru ) ;
16627: LD_VAR 0 1
16631: PPUSH
16632: CALL_OW 182
// AddComExitVehicle ( pru ) ;
16636: LD_VAR 0 1
16640: PPUSH
16641: CALL_OW 181
// AddComStop ( pru ) ;
16645: LD_VAR 0 1
16649: PPUSH
16650: CALL_OW 201
// while IsInUnit ( pru ) <> 0 do
16654: LD_VAR 0 1
16658: PPUSH
16659: CALL_OW 310
16663: PUSH
16664: LD_INT 0
16666: NONEQUAL
16667: IFFALSE 16703
// begin wait ( 0 0$0.5 ) ;
16669: LD_INT 18
16671: PPUSH
16672: CALL_OW 67
// ComExitBuilding ( pru ) ;
16676: LD_VAR 0 1
16680: PPUSH
16681: CALL_OW 122
// wait ( 0 0$0.5 ) ;
16685: LD_INT 18
16687: PPUSH
16688: CALL_OW 67
// AddComExitVehicle ( pru ) ;
16692: LD_VAR 0 1
16696: PPUSH
16697: CALL_OW 181
// end ;
16701: GO 16654
// ComStop ( pru ) ;
16703: LD_VAR 0 1
16707: PPUSH
16708: CALL_OW 141
// SetSide ( pru , You2 ) ;
16712: LD_VAR 0 1
16716: PPUSH
16717: LD_EXP 2
16721: PPUSH
16722: CALL_OW 235
// SetClass ( pru , class_soldier ) ;
16726: LD_VAR 0 1
16730: PPUSH
16731: LD_INT 1
16733: PPUSH
16734: CALL_OW 336
// AddComMoveXY ( pru , 91 , 110 ) ;
16738: LD_VAR 0 1
16742: PPUSH
16743: LD_INT 91
16745: PPUSH
16746: LD_INT 110
16748: PPUSH
16749: CALL_OW 171
// AddComMoveXY ( pru , 59 , 103 ) ;
16753: LD_VAR 0 1
16757: PPUSH
16758: LD_INT 59
16760: PPUSH
16761: LD_INT 103
16763: PPUSH
16764: CALL_OW 171
// while not IsAt ( pru , 59 , 103 ) do
16768: LD_VAR 0 1
16772: PPUSH
16773: LD_INT 59
16775: PPUSH
16776: LD_INT 103
16778: PPUSH
16779: CALL_OW 307
16783: NOT
16784: IFFALSE 16810
// begin wait ( 0 0$2 ) ;
16786: LD_INT 70
16788: PPUSH
16789: CALL_OW 67
// AddComMoveXY ( pru , 59 , 103 ) ;
16793: LD_VAR 0 1
16797: PPUSH
16798: LD_INT 59
16800: PPUSH
16801: LD_INT 103
16803: PPUSH
16804: CALL_OW 171
// end ;
16808: GO 16768
// ComMoveXY ( pru , 51 , 101 ) ;
16810: LD_VAR 0 1
16814: PPUSH
16815: LD_INT 51
16817: PPUSH
16818: LD_INT 101
16820: PPUSH
16821: CALL_OW 111
// while not IsInArea ( pru , pru_out ) do
16825: LD_VAR 0 1
16829: PPUSH
16830: LD_INT 24
16832: PPUSH
16833: CALL_OW 308
16837: NOT
16838: IFFALSE 16849
// wait ( 0 0$1 ) ;
16840: LD_INT 35
16842: PPUSH
16843: CALL_OW 67
16847: GO 16825
// RemoveUnit ( pru ) ;
16849: LD_VAR 0 1
16853: PPUSH
16854: CALL_OW 64
// end ;
16858: LD_VAR 0 2
16862: RET
// function navrat_z_pruzkumu ( pru , usp ) ; begin
16863: LD_INT 0
16865: PPUSH
// PlaceUnitArea ( pru , pruarea , false ) ;
16866: LD_VAR 0 1
16870: PPUSH
16871: LD_INT 20
16873: PPUSH
16874: LD_INT 0
16876: PPUSH
16877: CALL_OW 49
// if usp = 1 then
16881: LD_VAR 0 2
16885: PUSH
16886: LD_INT 1
16888: EQUAL
16889: IFFALSE 16906
// AddComMoveXY ( pru , 47 , 87 ) ;
16891: LD_VAR 0 1
16895: PPUSH
16896: LD_INT 47
16898: PPUSH
16899: LD_INT 87
16901: PPUSH
16902: CALL_OW 171
// AddComMoveXY ( pru , 68 , 106 ) ;
16906: LD_VAR 0 1
16910: PPUSH
16911: LD_INT 68
16913: PPUSH
16914: LD_INT 106
16916: PPUSH
16917: CALL_OW 171
// AddComMoveXY ( pru , 118 , 129 ) ;
16921: LD_VAR 0 1
16925: PPUSH
16926: LD_INT 118
16928: PPUSH
16929: LD_INT 129
16931: PPUSH
16932: CALL_OW 171
// if usp <> 1 then
16936: LD_VAR 0 2
16940: PUSH
16941: LD_INT 1
16943: NONEQUAL
16944: IFFALSE 16958
// SetLives ( pru , 300 ) ;
16946: LD_VAR 0 1
16950: PPUSH
16951: LD_INT 300
16953: PPUSH
16954: CALL_OW 234
// while not IsInArea ( pru , Abase1 ) do
16958: LD_VAR 0 1
16962: PPUSH
16963: LD_INT 3
16965: PPUSH
16966: CALL_OW 308
16970: NOT
16971: IFFALSE 16982
// wait ( 0 0$2 ) ;
16973: LD_INT 70
16975: PPUSH
16976: CALL_OW 67
16980: GO 16958
// SetSide ( pru , You ) ;
16982: LD_VAR 0 1
16986: PPUSH
16987: LD_EXP 1
16991: PPUSH
16992: CALL_OW 235
// ComMoveUnit ( pru , JMM ) ;
16996: LD_VAR 0 1
17000: PPUSH
17001: LD_EXP 32
17005: PPUSH
17006: CALL_OW 112
// end ;
17010: LD_VAR 0 3
17014: RET
// every 0 0$10 trigger GetSide ( A1_tov ) or IsDead ( A1_tov ) do
17015: LD_INT 110
17017: PPUSH
17018: CALL_OW 255
17022: PUSH
17023: LD_INT 110
17025: PPUSH
17026: CALL_OW 301
17030: OR
17031: IFFALSE 17096
17033: GO 17035
17035: DISABLE
// begin SetTech ( tech_Flame , You , state_researched ) ;
17036: LD_INT 70
17038: PPUSH
17039: LD_EXP 1
17043: PPUSH
17044: LD_INT 2
17046: PPUSH
17047: CALL_OW 322
// SetTech ( tech_SibPow , You , state_researched ) ;
17051: LD_INT 21
17053: PPUSH
17054: LD_EXP 1
17058: PPUSH
17059: LD_INT 2
17061: PPUSH
17062: CALL_OW 322
// SetTech ( tech_SibEng , You , state_researched ) ;
17066: LD_INT 22
17068: PPUSH
17069: LD_EXP 1
17073: PPUSH
17074: LD_INT 2
17076: PPUSH
17077: CALL_OW 322
// SetTech ( tech_Mortar , You , state_researched ) ;
17081: LD_INT 41
17083: PPUSH
17084: LD_EXP 1
17088: PPUSH
17089: LD_INT 2
17091: PPUSH
17092: CALL_OW 322
// end ;
17096: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , Arabi ] , [ f_btype , b_warehouse ] ] ) = 0 do var pomauta ; var art ; var i , pom ;
17097: LD_INT 22
17099: PUSH
17100: LD_EXP 3
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 30
17111: PUSH
17112: LD_INT 1
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PPUSH
17123: CALL_OW 69
17127: PUSH
17128: LD_INT 0
17130: EQUAL
17131: IFFALSE 17300
17133: GO 17135
17135: DISABLE
17136: LD_INT 0
17138: PPUSH
17139: PPUSH
17140: PPUSH
17141: PPUSH
// begin pomauta = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17142: LD_ADDR_VAR 0 1
17146: PUSH
17147: LD_INT 22
17149: PUSH
17150: LD_EXP 1
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PUSH
17159: LD_INT 2
17161: PUSH
17162: LD_INT 34
17164: PUSH
17165: LD_INT 12
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 34
17174: PUSH
17175: LD_INT 32
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: LIST
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PPUSH
17191: CALL_OW 69
17195: ST_TO_ADDR
// art = false ;
17196: LD_ADDR_VAR 0 2
17200: PUSH
17201: LD_INT 0
17203: ST_TO_ADDR
// for i in pomauta do
17204: LD_ADDR_VAR 0 3
17208: PUSH
17209: LD_VAR 0 1
17213: PUSH
17214: FOR_IN
17215: IFFALSE 17245
// if GetCargo ( i , mat_artefact ) > 0 then
17217: LD_VAR 0 3
17221: PPUSH
17222: LD_INT 4
17224: PPUSH
17225: CALL_OW 289
17229: PUSH
17230: LD_INT 0
17232: GREATER
17233: IFFALSE 17243
// art = true ;
17235: LD_ADDR_VAR 0 2
17239: PUSH
17240: LD_INT 1
17242: ST_TO_ADDR
17243: GO 17214
17245: POP
17246: POP
// if art then
17247: LD_VAR 0 2
17251: IFFALSE 17259
// konec_mise else
17253: CALL 669 0 0
17257: GO 17300
// begin pom = query_konec_mise ;
17259: LD_ADDR_VAR 0 4
17263: PUSH
17264: CALL 7887 0 0
17268: ST_TO_ADDR
// if pom = 2 then
17269: LD_VAR 0 4
17273: PUSH
17274: LD_INT 2
17276: EQUAL
17277: IFFALSE 17285
// konec_mise else
17279: CALL 669 0 0
17283: GO 17300
// begin end_the_mission_allowed = true ;
17285: LD_ADDR_OWVAR 57
17289: PUSH
17290: LD_INT 1
17292: ST_TO_ADDR
// ChangeMissionObjectives ( MDestroyOut ) ;
17293: LD_STRING MDestroyOut
17295: PPUSH
17296: CALL_OW 337
// end ; end ; end ; end_of_file
17300: PPOPN 4
17302: END
// export Odebirani ; export oposoldier ; export bum2 ; var utok1 ; var utok1_over ; var utok3_over ; var utok4_over ; var Veze_2 ; var Opr_2 ; var i , pom , pom1 ; var uklizejici_mista ; var mcm1 ; var mcm2 ; every 0 0$0.3 do
17303: GO 17305
17305: DISABLE
// begin utok1 := false ;
17306: LD_ADDR_LOC 27
17310: PUSH
17311: LD_INT 0
17313: ST_TO_ADDR
// bum2 = false ;
17314: LD_ADDR_EXP 47
17318: PUSH
17319: LD_INT 0
17321: ST_TO_ADDR
// Veze_2 := [ A2_bu1 , A2_bu2 , A2_bu3 , A2_bu4 , A2_bu4 , A2_bu5 , A2_bu6 ] ;
17322: LD_ADDR_LOC 31
17326: PUSH
17327: LD_INT 112
17329: PUSH
17330: LD_INT 63
17332: PUSH
17333: LD_INT 47
17335: PUSH
17336: LD_INT 60
17338: PUSH
17339: LD_INT 60
17341: PUSH
17342: LD_INT 62
17344: PUSH
17345: LD_INT 59
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: ST_TO_ADDR
// Opr_2 = [ JEDNOTKY_BAZE_2_LIST [ 15 ] , JEDNOTKY_BAZE_2_LIST [ 16 ] ] ;
17357: LD_ADDR_LOC 32
17361: PUSH
17362: LD_EXP 11
17366: PUSH
17367: LD_INT 15
17369: ARRAY
17370: PUSH
17371: LD_EXP 11
17375: PUSH
17376: LD_INT 16
17378: ARRAY
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: ST_TO_ADDR
// pom = vytvor_opravare ;
17384: LD_ADDR_LOC 34
17388: PUSH
17389: CALL 9069 0 0
17393: ST_TO_ADDR
// Opr_2 = Opr_2 ^ pom ;
17394: LD_ADDR_LOC 32
17398: PUSH
17399: LD_LOC 32
17403: PUSH
17404: LD_LOC 34
17408: ADD
17409: ST_TO_ADDR
// Utok1_over = false ;
17410: LD_ADDR_LOC 28
17414: PUSH
17415: LD_INT 0
17417: ST_TO_ADDR
// utok3_over = false ;
17418: LD_ADDR_LOC 29
17422: PUSH
17423: LD_INT 0
17425: ST_TO_ADDR
// utok4_over = false ;
17426: LD_ADDR_LOC 30
17430: PUSH
17431: LD_INT 0
17433: ST_TO_ADDR
// uklizejici_mista = [ [ 28 , 16 ] , [ 22 , 18 ] , [ 29 , 20 ] , [ 19 , 33 ] ] ;
17434: LD_ADDR_LOC 36
17438: PUSH
17439: LD_INT 28
17441: PUSH
17442: LD_INT 16
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: LD_INT 22
17451: PUSH
17452: LD_INT 18
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: LD_INT 29
17461: PUSH
17462: LD_INT 20
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: PUSH
17469: LD_INT 19
17471: PUSH
17472: LD_INT 33
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: ST_TO_ADDR
// disable ( 998 ) ;
17485: LD_INT 998
17487: DISABLE_MARKED
// disable ( 997 ) ;
17488: LD_INT 997
17490: DISABLE_MARKED
// disable ( 996 ) ;
17491: LD_INT 996
17493: DISABLE_MARKED
// disable ( 995 ) ;
17494: LD_INT 995
17496: DISABLE_MARKED
// if difficulty < 3 then
17497: LD_OWVAR 67
17501: PUSH
17502: LD_INT 3
17504: LESS
17505: IFFALSE 17514
// RemoveUnit ( sui1 ) ;
17507: LD_INT 118
17509: PPUSH
17510: CALL_OW 64
// if difficulty < 2 then
17514: LD_OWVAR 67
17518: PUSH
17519: LD_INT 2
17521: LESS
17522: IFFALSE 17538
// begin RemoveUnit ( sui2 ) ;
17524: LD_INT 119
17526: PPUSH
17527: CALL_OW 64
// RemoveUnit ( sui3 ) ;
17531: LD_INT 121
17533: PPUSH
17534: CALL_OW 64
// end ; end ;
17538: END
// export function uklid_arabu ; begin
17539: LD_INT 0
17541: PPUSH
// ComEnterUnit ( zradce1 , A1_lab ) ;
17542: LD_INT 65
17544: PPUSH
17545: LD_INT 15
17547: PPUSH
17548: CALL_OW 120
// ComEnterUnit ( zradce2 , A1_bu1 ) ;
17552: LD_INT 68
17554: PPUSH
17555: LD_INT 9
17557: PPUSH
17558: CALL_OW 120
// ComEnterUnit ( zradce3 , A1_bu2 ) ;
17562: LD_INT 69
17564: PPUSH
17565: LD_INT 8
17567: PPUSH
17568: CALL_OW 120
// ComEnterUnit ( zradce4 , A1_bar ) ;
17572: LD_INT 70
17574: PPUSH
17575: LD_INT 14
17577: PPUSH
17578: CALL_OW 120
// ComEnterUnit ( zradce5 , A1_bar ) ;
17582: LD_INT 71
17584: PPUSH
17585: LD_INT 14
17587: PPUSH
17588: CALL_OW 120
// ComEnterUnit ( A1_vo1 , A1_bu3 ) ;
17592: LD_INT 72
17594: PPUSH
17595: LD_INT 11
17597: PPUSH
17598: CALL_OW 120
// ComEnterUnit ( A1_vo2 , A1_dep ) ;
17602: LD_INT 73
17604: PPUSH
17605: LD_INT 4
17607: PPUSH
17608: CALL_OW 120
// ComEnterUnit ( A1_vo4 , A1_dep ) ;
17612: LD_INT 76
17614: PPUSH
17615: LD_INT 4
17617: PPUSH
17618: CALL_OW 120
// ComEnterUnit ( A1_ve1 , A1_lab ) ;
17622: LD_INT 87
17624: PPUSH
17625: LD_INT 15
17627: PPUSH
17628: CALL_OW 120
// ComEnterUnit ( A1_ve2 , A1_lab ) ;
17632: LD_INT 74
17634: PPUSH
17635: LD_INT 15
17637: PPUSH
17638: CALL_OW 120
// ComEnterUnit ( zradce6 , A1_bu6 ) ;
17642: LD_INT 75
17644: PPUSH
17645: LD_INT 10
17647: PPUSH
17648: CALL_OW 120
// ComEnterUnit ( zradce7 , A1_bu4 ) ;
17652: LD_INT 77
17654: PPUSH
17655: LD_INT 12
17657: PPUSH
17658: CALL_OW 120
// ComHold ( mrtvola2 ) ;
17662: LD_INT 78
17664: PPUSH
17665: CALL_OW 140
// ComEnterUnit ( A1_en1 , A1_dep ) ;
17669: LD_INT 79
17671: PPUSH
17672: LD_INT 4
17674: PPUSH
17675: CALL_OW 120
// ComEnterUnit ( A1_me1 , A1_tov ) ;
17679: LD_INT 81
17681: PPUSH
17682: LD_INT 110
17684: PPUSH
17685: CALL_OW 120
// ComEnterUnit ( A1_me2 , A1_tov ) ;
17689: LD_INT 80
17691: PPUSH
17692: LD_INT 110
17694: PPUSH
17695: CALL_OW 120
// ComPlaceRemoteCharge ( A2_zas1 , 52 , 62 , 0 ) ;
17699: LD_INT 82
17701: PPUSH
17702: LD_INT 52
17704: PPUSH
17705: LD_INT 62
17707: PPUSH
17708: LD_INT 0
17710: PPUSH
17711: CALL_OW 133
// ComPlaceRemoteCharge ( A2_zas2 , 55 , 64 , 0 ) ;
17715: LD_INT 83
17717: PPUSH
17718: LD_INT 55
17720: PPUSH
17721: LD_INT 64
17723: PPUSH
17724: LD_INT 0
17726: PPUSH
17727: CALL_OW 133
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 44 , 24 ) ;
17731: LD_INT 82
17733: PUSH
17734: LD_INT 83
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PPUSH
17741: LD_INT 44
17743: PPUSH
17744: LD_INT 24
17746: PPUSH
17747: CALL_OW 171
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 30 , 11 ) ;
17751: LD_INT 82
17753: PUSH
17754: LD_INT 83
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PPUSH
17761: LD_INT 30
17763: PPUSH
17764: LD_INT 11
17766: PPUSH
17767: CALL_OW 171
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 24 , 37 ) ;
17771: LD_INT 82
17773: PUSH
17774: LD_INT 83
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PPUSH
17781: LD_INT 24
17783: PPUSH
17784: LD_INT 37
17786: PPUSH
17787: CALL_OW 171
// AddComMoveXY ( A2_zas1 , 32 , 60 ) ;
17791: LD_INT 82
17793: PPUSH
17794: LD_INT 32
17796: PPUSH
17797: LD_INT 60
17799: PPUSH
17800: CALL_OW 171
// AddComMoveXY ( A2_zas2 , 37 , 58 ) ;
17804: LD_INT 83
17806: PPUSH
17807: LD_INT 37
17809: PPUSH
17810: LD_INT 58
17812: PPUSH
17813: CALL_OW 171
// AddComCrawl ( [ A2_zas1 , A2_zas2 ] ) ;
17817: LD_INT 82
17819: PUSH
17820: LD_INT 83
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PPUSH
17827: CALL_OW 197
// ComEnterUnit ( A3_rme1 , A3_rv1 ) ;
17831: LD_INT 96
17833: PPUSH
17834: LD_INT 26
17836: PPUSH
17837: CALL_OW 120
// ComEnterUnit ( A3_rme2 , A3_rv2 ) ;
17841: LD_INT 95
17843: PPUSH
17844: LD_INT 25
17846: PPUSH
17847: CALL_OW 120
// ComEnterUnit ( A3_rme3 , A3_rv3 ) ;
17851: LD_INT 94
17853: PPUSH
17854: LD_INT 27
17856: PPUSH
17857: CALL_OW 120
// wait ( 0 0$5 ) ;
17861: LD_INT 175
17863: PPUSH
17864: CALL_OW 67
// ComLinkTo ( [ A3_are1 , A3_are2 , A3_are3 ] , A3_rme1 ) ;
17868: LD_INT 23
17870: PUSH
17871: LD_INT 18
17873: PUSH
17874: LD_INT 44
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: LIST
17881: PPUSH
17882: LD_INT 96
17884: PPUSH
17885: CALL_OW 135
// ComLinkTo ( [ A3_are4 , A3_are5 , A3_are6 ] , A3_rme2 ) ;
17889: LD_INT 19
17891: PUSH
17892: LD_INT 24
17894: PUSH
17895: LD_INT 20
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: LIST
17902: PPUSH
17903: LD_INT 95
17905: PPUSH
17906: CALL_OW 135
// ComLinkTo ( [ A3_are7 , A3_are8 , A3_are9 ] , A3_rme3 ) ;
17910: LD_INT 21
17912: PUSH
17913: LD_INT 93
17915: PUSH
17916: LD_INT 22
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: LIST
17923: PPUSH
17924: LD_INT 94
17926: PPUSH
17927: CALL_OW 135
// ComPlaceRemoteCharge ( A3_zas1 , 103 , 19 , 0 ) ;
17931: LD_INT 101
17933: PPUSH
17934: LD_INT 103
17936: PPUSH
17937: LD_INT 19
17939: PPUSH
17940: LD_INT 0
17942: PPUSH
17943: CALL_OW 133
// AddComMoveXY ( A3_zas1 , 104 , 3 ) ;
17947: LD_INT 101
17949: PPUSH
17950: LD_INT 104
17952: PPUSH
17953: LD_INT 3
17955: PPUSH
17956: CALL_OW 171
// AddComCrawl ( A3_zas1 ) ;
17960: LD_INT 101
17962: PPUSH
17963: CALL_OW 197
// AddComTurnXY ( A3_zas1 , 102 , 8 ) ;
17967: LD_INT 101
17969: PPUSH
17970: LD_INT 102
17972: PPUSH
17973: LD_INT 8
17975: PPUSH
17976: CALL_OW 178
// end ;
17980: LD_VAR 0 1
17984: RET
// export function uklid_arabu2 ; var MD1_un ; var MD2_un ; begin
17985: LD_INT 0
17987: PPUSH
17988: PPUSH
17989: PPUSH
// MD1_un = [ ] ;
17990: LD_ADDR_VAR 0 2
17994: PUSH
17995: EMPTY
17996: ST_TO_ADDR
// MD2_un = [ ] ;
17997: LD_ADDR_VAR 0 3
18001: PUSH
18002: EMPTY
18003: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 1 ] , A2_bu1 ) ;
18004: LD_EXP 11
18008: PUSH
18009: LD_INT 1
18011: ARRAY
18012: PPUSH
18013: LD_INT 112
18015: PPUSH
18016: CALL_OW 120
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu1 , false , 0 ] ] ;
18020: LD_ADDR_LOC 36
18024: PUSH
18025: LD_LOC 36
18029: PUSH
18030: LD_INT 112
18032: PUSH
18033: LD_INT 0
18035: PUSH
18036: LD_INT 0
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: LIST
18043: PUSH
18044: EMPTY
18045: LIST
18046: ADD
18047: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 2 ] , A2_bu2 ) ;
18048: LD_EXP 11
18052: PUSH
18053: LD_INT 2
18055: ARRAY
18056: PPUSH
18057: LD_INT 63
18059: PPUSH
18060: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 2 ] ;
18064: LD_ADDR_VAR 0 2
18068: PUSH
18069: LD_VAR 0 2
18073: PUSH
18074: LD_EXP 11
18078: PUSH
18079: LD_INT 2
18081: ARRAY
18082: ADD
18083: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu2 , false , 0 ] ] ;
18084: LD_ADDR_LOC 36
18088: PUSH
18089: LD_LOC 36
18093: PUSH
18094: LD_INT 63
18096: PUSH
18097: LD_INT 0
18099: PUSH
18100: LD_INT 0
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: LIST
18107: PUSH
18108: EMPTY
18109: LIST
18110: ADD
18111: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 3 ] , A2_bu3 ) ;
18112: LD_EXP 11
18116: PUSH
18117: LD_INT 3
18119: ARRAY
18120: PPUSH
18121: LD_INT 47
18123: PPUSH
18124: CALL_OW 120
// if difficulty > 1 then
18128: LD_OWVAR 67
18132: PUSH
18133: LD_INT 1
18135: GREATER
18136: IFFALSE 18158
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 3 ] ;
18138: LD_ADDR_VAR 0 2
18142: PUSH
18143: LD_VAR 0 2
18147: PUSH
18148: LD_EXP 11
18152: PUSH
18153: LD_INT 3
18155: ARRAY
18156: ADD
18157: ST_TO_ADDR
// if difficulty > 1 then
18158: LD_OWVAR 67
18162: PUSH
18163: LD_INT 1
18165: GREATER
18166: IFFALSE 18188
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 3 ] ;
18168: LD_ADDR_VAR 0 3
18172: PUSH
18173: LD_VAR 0 3
18177: PUSH
18178: LD_EXP 11
18182: PUSH
18183: LD_INT 3
18185: ARRAY
18186: ADD
18187: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu3 , false , 0 ] ] ;
18188: LD_ADDR_LOC 36
18192: PUSH
18193: LD_LOC 36
18197: PUSH
18198: LD_INT 47
18200: PUSH
18201: LD_INT 0
18203: PUSH
18204: LD_INT 0
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: LIST
18211: PUSH
18212: EMPTY
18213: LIST
18214: ADD
18215: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 4 ] , A2_bu4 ) ;
18216: LD_EXP 11
18220: PUSH
18221: LD_INT 4
18223: ARRAY
18224: PPUSH
18225: LD_INT 60
18227: PPUSH
18228: CALL_OW 120
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu4 , false , 0 ] ] ;
18232: LD_ADDR_LOC 36
18236: PUSH
18237: LD_LOC 36
18241: PUSH
18242: LD_INT 60
18244: PUSH
18245: LD_INT 0
18247: PUSH
18248: LD_INT 0
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: LIST
18255: PUSH
18256: EMPTY
18257: LIST
18258: ADD
18259: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 5 ] , A2_bu5 ) ;
18260: LD_EXP 11
18264: PUSH
18265: LD_INT 5
18267: ARRAY
18268: PPUSH
18269: LD_INT 62
18271: PPUSH
18272: CALL_OW 120
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 5 ] ;
18276: LD_ADDR_VAR 0 3
18280: PUSH
18281: LD_VAR 0 3
18285: PUSH
18286: LD_EXP 11
18290: PUSH
18291: LD_INT 5
18293: ARRAY
18294: ADD
18295: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu5 , false , 0 ] ] ;
18296: LD_ADDR_LOC 36
18300: PUSH
18301: LD_LOC 36
18305: PUSH
18306: LD_INT 62
18308: PUSH
18309: LD_INT 0
18311: PUSH
18312: LD_INT 0
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: LIST
18319: PUSH
18320: EMPTY
18321: LIST
18322: ADD
18323: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 6 ] , A2_bu6 ) ;
18324: LD_EXP 11
18328: PUSH
18329: LD_INT 6
18331: ARRAY
18332: PPUSH
18333: LD_INT 59
18335: PPUSH
18336: CALL_OW 120
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 6 ] ;
18340: LD_ADDR_VAR 0 3
18344: PUSH
18345: LD_VAR 0 3
18349: PUSH
18350: LD_EXP 11
18354: PUSH
18355: LD_INT 6
18357: ARRAY
18358: ADD
18359: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu6 , false , 0 ] ] ;
18360: LD_ADDR_LOC 36
18364: PUSH
18365: LD_LOC 36
18369: PUSH
18370: LD_INT 59
18372: PUSH
18373: LD_INT 0
18375: PUSH
18376: LD_INT 0
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: LIST
18383: PUSH
18384: EMPTY
18385: LIST
18386: ADD
18387: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 17 ] , A2_tov ) ;
18388: LD_EXP 11
18392: PUSH
18393: LD_INT 17
18395: ARRAY
18396: PPUSH
18397: LD_INT 50
18399: PPUSH
18400: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 17 ] ;
18404: LD_ADDR_VAR 0 2
18408: PUSH
18409: LD_VAR 0 2
18413: PUSH
18414: LD_EXP 11
18418: PUSH
18419: LD_INT 17
18421: ARRAY
18422: ADD
18423: ST_TO_ADDR
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 17 ] ;
18424: LD_ADDR_VAR 0 3
18428: PUSH
18429: LD_VAR 0 3
18433: PUSH
18434: LD_EXP 11
18438: PUSH
18439: LD_INT 17
18441: ARRAY
18442: ADD
18443: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_tov , true , class_mechanic ] ] ;
18444: LD_ADDR_LOC 36
18448: PUSH
18449: LD_LOC 36
18453: PUSH
18454: LD_INT 50
18456: PUSH
18457: LD_INT 1
18459: PUSH
18460: LD_INT 3
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: LIST
18467: PUSH
18468: EMPTY
18469: LIST
18470: ADD
18471: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 18 ] , A2_tov ) ;
18472: LD_EXP 11
18476: PUSH
18477: LD_INT 18
18479: ARRAY
18480: PPUSH
18481: LD_INT 50
18483: PPUSH
18484: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 18 ] ;
18488: LD_ADDR_VAR 0 2
18492: PUSH
18493: LD_VAR 0 2
18497: PUSH
18498: LD_EXP 11
18502: PUSH
18503: LD_INT 18
18505: ARRAY
18506: ADD
18507: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_tov , true , class_mechanic ] ] ;
18508: LD_ADDR_LOC 36
18512: PUSH
18513: LD_LOC 36
18517: PUSH
18518: LD_INT 50
18520: PUSH
18521: LD_INT 1
18523: PUSH
18524: LD_INT 3
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: LIST
18531: PUSH
18532: EMPTY
18533: LIST
18534: ADD
18535: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 19 ] , A2_tov ) ;
18536: LD_EXP 11
18540: PUSH
18541: LD_INT 19
18543: ARRAY
18544: PPUSH
18545: LD_INT 50
18547: PPUSH
18548: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 20 ] , A2_tov ) ;
18552: LD_EXP 11
18556: PUSH
18557: LD_INT 20
18559: ARRAY
18560: PPUSH
18561: LD_INT 50
18563: PPUSH
18564: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 15 ] , A2_dep ) ;
18568: LD_EXP 11
18572: PUSH
18573: LD_INT 15
18575: ARRAY
18576: PPUSH
18577: LD_INT 46
18579: PPUSH
18580: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 16 ] , A2_dep ) ;
18584: LD_EXP 11
18588: PUSH
18589: LD_INT 16
18591: ARRAY
18592: PPUSH
18593: LD_INT 46
18595: PPUSH
18596: CALL_OW 120
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 16 ] ;
18600: LD_ADDR_VAR 0 3
18604: PUSH
18605: LD_VAR 0 3
18609: PUSH
18610: LD_EXP 11
18614: PUSH
18615: LD_INT 16
18617: ARRAY
18618: ADD
18619: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_dep , true , class_engineer ] ] ;
18620: LD_ADDR_LOC 36
18624: PUSH
18625: LD_LOC 36
18629: PUSH
18630: LD_INT 46
18632: PUSH
18633: LD_INT 1
18635: PUSH
18636: LD_INT 2
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: LIST
18643: PUSH
18644: EMPTY
18645: LIST
18646: ADD
18647: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 7 ] , A2_bar ) ;
18648: LD_EXP 11
18652: PUSH
18653: LD_INT 7
18655: ARRAY
18656: PPUSH
18657: LD_INT 48
18659: PPUSH
18660: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 7 ] ;
18664: LD_ADDR_VAR 0 2
18668: PUSH
18669: LD_VAR 0 2
18673: PUSH
18674: LD_EXP 11
18678: PUSH
18679: LD_INT 7
18681: ARRAY
18682: ADD
18683: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bar , true , class_mortar ] ] ;
18684: LD_ADDR_LOC 36
18688: PUSH
18689: LD_LOC 36
18693: PUSH
18694: LD_INT 48
18696: PUSH
18697: LD_INT 1
18699: PUSH
18700: LD_INT 8
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: LIST
18707: PUSH
18708: EMPTY
18709: LIST
18710: ADD
18711: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 8 ] , A2_bar ) ;
18712: LD_EXP 11
18716: PUSH
18717: LD_INT 8
18719: ARRAY
18720: PPUSH
18721: LD_INT 48
18723: PPUSH
18724: CALL_OW 120
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 8 ] ;
18728: LD_ADDR_VAR 0 3
18732: PUSH
18733: LD_VAR 0 3
18737: PUSH
18738: LD_EXP 11
18742: PUSH
18743: LD_INT 8
18745: ARRAY
18746: ADD
18747: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bar , true , class_soldier ] ] ;
18748: LD_ADDR_LOC 36
18752: PUSH
18753: LD_LOC 36
18757: PUSH
18758: LD_INT 48
18760: PUSH
18761: LD_INT 1
18763: PUSH
18764: LD_INT 1
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: LIST
18771: PUSH
18772: EMPTY
18773: LIST
18774: ADD
18775: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 9 ] , A2_bar ) ;
18776: LD_EXP 11
18780: PUSH
18781: LD_INT 9
18783: ARRAY
18784: PPUSH
18785: LD_INT 48
18787: PPUSH
18788: CALL_OW 120
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bar , true , class_mortar ] ] ;
18792: LD_ADDR_LOC 36
18796: PUSH
18797: LD_LOC 36
18801: PUSH
18802: LD_INT 48
18804: PUSH
18805: LD_INT 1
18807: PUSH
18808: LD_INT 8
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: LIST
18815: PUSH
18816: EMPTY
18817: LIST
18818: ADD
18819: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 10 ] , A2_bar ) ;
18820: LD_EXP 11
18824: PUSH
18825: LD_INT 10
18827: ARRAY
18828: PPUSH
18829: LD_INT 48
18831: PPUSH
18832: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 11 ] , A2_lab ) ;
18836: LD_EXP 11
18840: PUSH
18841: LD_INT 11
18843: ARRAY
18844: PPUSH
18845: LD_INT 61
18847: PPUSH
18848: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 10 ] ;
18852: LD_ADDR_VAR 0 2
18856: PUSH
18857: LD_VAR 0 2
18861: PUSH
18862: LD_EXP 11
18866: PUSH
18867: LD_INT 10
18869: ARRAY
18870: ADD
18871: ST_TO_ADDR
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 10 ] ;
18872: LD_ADDR_VAR 0 3
18876: PUSH
18877: LD_VAR 0 3
18881: PUSH
18882: LD_EXP 11
18886: PUSH
18887: LD_INT 10
18889: ARRAY
18890: ADD
18891: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_lab , true , class_scientistic ] ] ;
18892: LD_ADDR_LOC 36
18896: PUSH
18897: LD_LOC 36
18901: PUSH
18902: LD_INT 61
18904: PUSH
18905: LD_INT 1
18907: PUSH
18908: LD_INT 4
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: LIST
18915: PUSH
18916: EMPTY
18917: LIST
18918: ADD
18919: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 12 ] , A2_lab ) ;
18920: LD_EXP 11
18924: PUSH
18925: LD_INT 12
18927: ARRAY
18928: PPUSH
18929: LD_INT 61
18931: PPUSH
18932: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 23 ] , A2_radar ) ;
18936: LD_EXP 11
18940: PUSH
18941: LD_INT 23
18943: ARRAY
18944: PPUSH
18945: LD_INT 88
18947: PPUSH
18948: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 21 ] , A2_nau1 ) ;
18952: LD_EXP 11
18956: PUSH
18957: LD_INT 21
18959: ARRAY
18960: PPUSH
18961: LD_INT 107
18963: PPUSH
18964: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 21 ] ;
18968: LD_ADDR_VAR 0 2
18972: PUSH
18973: LD_VAR 0 2
18977: PUSH
18978: LD_EXP 11
18982: PUSH
18983: LD_INT 21
18985: ARRAY
18986: ADD
18987: ST_TO_ADDR
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 21 ] ;
18988: LD_ADDR_VAR 0 3
18992: PUSH
18993: LD_VAR 0 3
18997: PUSH
18998: LD_EXP 11
19002: PUSH
19003: LD_INT 21
19005: ARRAY
19006: ADD
19007: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_nau1 , false , 0 ] ] ;
19008: LD_ADDR_LOC 36
19012: PUSH
19013: LD_LOC 36
19017: PUSH
19018: LD_INT 107
19020: PUSH
19021: LD_INT 0
19023: PUSH
19024: LD_INT 0
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: LIST
19031: PUSH
19032: EMPTY
19033: LIST
19034: ADD
19035: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 22 ] , A2_nau2 ) ;
19036: LD_EXP 11
19040: PUSH
19041: LD_INT 22
19043: ARRAY
19044: PPUSH
19045: LD_INT 108
19047: PPUSH
19048: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 22 ] ;
19052: LD_ADDR_VAR 0 2
19056: PUSH
19057: LD_VAR 0 2
19061: PUSH
19062: LD_EXP 11
19066: PUSH
19067: LD_INT 22
19069: ARRAY
19070: ADD
19071: ST_TO_ADDR
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 22 ] ;
19072: LD_ADDR_VAR 0 3
19076: PUSH
19077: LD_VAR 0 3
19081: PUSH
19082: LD_EXP 11
19086: PUSH
19087: LD_INT 22
19089: ARRAY
19090: ADD
19091: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_nau2 , false , 0 ] ] ;
19092: LD_ADDR_LOC 36
19096: PUSH
19097: LD_LOC 36
19101: PUSH
19102: LD_INT 108
19104: PUSH
19105: LD_INT 0
19107: PUSH
19108: LD_INT 0
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: LIST
19115: PUSH
19116: EMPTY
19117: LIST
19118: ADD
19119: ST_TO_ADDR
// ComEnterUnit ( Opr_2 , A2_dep ) ;
19120: LD_LOC 32
19124: PPUSH
19125: LD_INT 46
19127: PPUSH
19128: CALL_OW 120
// AddMcUnits ( MD1 , MD1_un ) ;
19132: LD_EXP 6
19136: PPUSH
19137: LD_VAR 0 2
19141: PPUSH
19142: CALL_OW 390
// AddMcUnits ( MD2 , MD2_un ) ;
19146: LD_EXP 8
19150: PPUSH
19151: LD_VAR 0 3
19155: PPUSH
19156: CALL_OW 390
// end ;
19160: LD_VAR 0 1
19164: RET
// export function uklid_arabu3 ; begin
19165: LD_INT 0
19167: PPUSH
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 1 ] , A3_bu1 ) ;
19168: LD_EXP 12
19172: PUSH
19173: LD_INT 1
19175: ARRAY
19176: PPUSH
19177: LD_INT 30
19179: PPUSH
19180: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 2 ] , A3_bu2 ) ;
19184: LD_EXP 12
19188: PUSH
19189: LD_INT 2
19191: ARRAY
19192: PPUSH
19193: LD_INT 43
19195: PPUSH
19196: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 3 ] , A3_bu3 ) ;
19200: LD_EXP 12
19204: PUSH
19205: LD_INT 3
19207: ARRAY
19208: PPUSH
19209: LD_INT 31
19211: PPUSH
19212: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 7 ] , A3_bar ) ;
19216: LD_EXP 12
19220: PUSH
19221: LD_INT 7
19223: ARRAY
19224: PPUSH
19225: LD_INT 40
19227: PPUSH
19228: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 5 ] , A3_bar ) ;
19232: LD_EXP 12
19236: PUSH
19237: LD_INT 5
19239: ARRAY
19240: PPUSH
19241: LD_INT 40
19243: PPUSH
19244: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 6 ] , A3_bar ) ;
19248: LD_EXP 12
19252: PUSH
19253: LD_INT 6
19255: ARRAY
19256: PPUSH
19257: LD_INT 40
19259: PPUSH
19260: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 4 ] , A3_dep ) ;
19264: LD_EXP 12
19268: PUSH
19269: LD_INT 4
19271: ARRAY
19272: PPUSH
19273: LD_INT 28
19275: PPUSH
19276: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 8 ] , A3_tov ) ;
19280: LD_EXP 12
19284: PUSH
19285: LD_INT 8
19287: ARRAY
19288: PPUSH
19289: LD_INT 34
19291: PPUSH
19292: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 9 ] , A3_tov ) ;
19296: LD_EXP 12
19300: PUSH
19301: LD_INT 9
19303: ARRAY
19304: PPUSH
19305: LD_INT 34
19307: PPUSH
19308: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 10 ] , A3_tov ) ;
19312: LD_EXP 12
19316: PUSH
19317: LD_INT 10
19319: ARRAY
19320: PPUSH
19321: LD_INT 34
19323: PPUSH
19324: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 11 ] , A3_tov ) ;
19328: LD_EXP 12
19332: PUSH
19333: LD_INT 11
19335: ARRAY
19336: PPUSH
19337: LD_INT 34
19339: PPUSH
19340: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 12 ] , A3_lab ) ;
19344: LD_EXP 12
19348: PUSH
19349: LD_INT 12
19351: ARRAY
19352: PPUSH
19353: LD_INT 41
19355: PPUSH
19356: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 13 ] , A3_lab ) ;
19360: LD_EXP 12
19364: PUSH
19365: LD_INT 13
19367: ARRAY
19368: PPUSH
19369: LD_INT 41
19371: PPUSH
19372: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 16 ] , A3_dep ) ;
19376: LD_EXP 12
19380: PUSH
19381: LD_INT 16
19383: ARRAY
19384: PPUSH
19385: LD_INT 28
19387: PPUSH
19388: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 17 ] , A3_dep ) ;
19392: LD_EXP 12
19396: PUSH
19397: LD_INT 17
19399: ARRAY
19400: PPUSH
19401: LD_INT 28
19403: PPUSH
19404: CALL_OW 120
// end ;
19408: LD_VAR 0 1
19412: RET
// every 0 0$1 trigger FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) > 0 do
19413: LD_INT 3
19415: PPUSH
19416: LD_INT 22
19418: PUSH
19419: LD_EXP 1
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: EMPTY
19429: LIST
19430: PPUSH
19431: CALL_OW 70
19435: PUSH
19436: LD_INT 0
19438: GREATER
19439: IFFALSE 19585
19441: GO 19443
19443: DISABLE
// begin wait ( 0 0$2 ) ;
19444: LD_INT 70
19446: PPUSH
19447: CALL_OW 67
// ComExitBuilding ( A1_vo2 ) ;
19451: LD_INT 73
19453: PPUSH
19454: CALL_OW 122
// ComExitBuilding ( [ A1_ve1 , A1_ve2 ] ) ;
19458: LD_INT 87
19460: PUSH
19461: LD_INT 74
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PPUSH
19468: CALL_OW 122
// AddComAgressiveMove ( A1_ve1 , 121 , 147 ) ;
19472: LD_INT 87
19474: PPUSH
19475: LD_INT 121
19477: PPUSH
19478: LD_INT 147
19480: PPUSH
19481: CALL_OW 174
// AddComAgressiveMove ( A1_ve1 , 113 , 141 ) ;
19485: LD_INT 87
19487: PPUSH
19488: LD_INT 113
19490: PPUSH
19491: LD_INT 141
19493: PPUSH
19494: CALL_OW 174
// AddComEnterUnit ( A1_ve1 , A1_bu1 ) ;
19498: LD_INT 87
19500: PPUSH
19501: LD_INT 9
19503: PPUSH
19504: CALL_OW 180
// ComExitBuilding ( A1_en1 ) ;
19508: LD_INT 79
19510: PPUSH
19511: CALL_OW 122
// ComExitBuilding ( [ A1_me1 , A1_me2 ] ) ;
19515: LD_INT 81
19517: PUSH
19518: LD_INT 80
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PPUSH
19525: CALL_OW 122
// AddComAgressiveMove ( A1_me1 , 113 , 128 ) ;
19529: LD_INT 81
19531: PPUSH
19532: LD_INT 113
19534: PPUSH
19535: LD_INT 128
19537: PPUSH
19538: CALL_OW 174
// if difficulty = 3 then
19542: LD_OWVAR 67
19546: PUSH
19547: LD_INT 3
19549: EQUAL
19550: IFFALSE 19562
// AddComEnterUnit ( A1_me1 , A1_au2 ) ;
19552: LD_INT 81
19554: PPUSH
19555: LD_INT 109
19557: PPUSH
19558: CALL_OW 180
// AddComAgressiveMove ( A1_me2 , 117 , 125 ) ;
19562: LD_INT 80
19564: PPUSH
19565: LD_INT 117
19567: PPUSH
19568: LD_INT 125
19570: PPUSH
19571: CALL_OW 174
// AddComEnterUnit ( A1_me2 , A1_au1 ) ;
19575: LD_INT 80
19577: PPUSH
19578: LD_INT 105
19580: PPUSH
19581: CALL_OW 180
// end ;
19585: END
// every 1 1$0 trigger utok1_over do var pom , i ; var souradnice ;
19586: LD_LOC 28
19590: IFFALSE 19823
19592: GO 19594
19594: DISABLE
19595: LD_INT 0
19597: PPUSH
19598: PPUSH
19599: PPUSH
// begin wait ( utok_2_doba [ difficulty ] ) ;
19600: LD_EXP 54
19604: PUSH
19605: LD_OWVAR 67
19609: ARRAY
19610: PPUSH
19611: CALL_OW 67
// for i in Ar_utok3_LIST do
19615: LD_ADDR_VAR 0 2
19619: PUSH
19620: LD_EXP 15
19624: PUSH
19625: FOR_IN
19626: IFFALSE 19645
// PlaceUnitArea ( i , Ar_utoky , false ) ;
19628: LD_VAR 0 2
19632: PPUSH
19633: LD_INT 25
19635: PPUSH
19636: LD_INT 0
19638: PPUSH
19639: CALL_OW 49
19643: GO 19625
19645: POP
19646: POP
// pom = FilterAllUnits ( [ [ f_side , You ] ] ) ;
19647: LD_ADDR_VAR 0 1
19651: PUSH
19652: LD_INT 22
19654: PUSH
19655: LD_EXP 1
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: EMPTY
19665: LIST
19666: PPUSH
19667: CALL_OW 69
19671: ST_TO_ADDR
// if pom > 0 then
19672: LD_VAR 0 1
19676: PUSH
19677: LD_INT 0
19679: GREATER
19680: IFFALSE 19721
// souradnice = [ GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ] else
19682: LD_ADDR_VAR 0 3
19686: PUSH
19687: LD_VAR 0 1
19691: PUSH
19692: LD_INT 1
19694: ARRAY
19695: PPUSH
19696: CALL_OW 250
19700: PUSH
19701: LD_VAR 0 1
19705: PUSH
19706: LD_INT 1
19708: ARRAY
19709: PPUSH
19710: CALL_OW 251
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: ST_TO_ADDR
19719: GO 19736
// souradnice = [ 102 , 125 ] ;
19721: LD_ADDR_VAR 0 3
19725: PUSH
19726: LD_INT 102
19728: PUSH
19729: LD_INT 125
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19736: LD_INT 35
19738: PPUSH
19739: CALL_OW 67
// mcm1 = McMove ( 1 , Ar_utok3_LIST , [ [ 128 , 91 ] , [ 128 , 108 ] , [ 126 , 121 ] , [ 120 , 131 ] , souradnice ] , [ mc_move_wait , mc_move_agressive ] ) ;
19743: LD_ADDR_LOC 37
19747: PUSH
19748: LD_INT 1
19750: PPUSH
19751: LD_EXP 15
19755: PPUSH
19756: LD_INT 128
19758: PUSH
19759: LD_INT 91
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: LD_INT 128
19768: PUSH
19769: LD_INT 108
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: LD_INT 126
19778: PUSH
19779: LD_INT 121
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: PUSH
19786: LD_INT 120
19788: PUSH
19789: LD_INT 131
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_VAR 0 3
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: PPUSH
19808: LD_INT 1
19810: PUSH
19811: LD_INT 6
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PPUSH
19818: CALL_OW 398
19822: ST_TO_ADDR
// end ;
19823: PPOPN 3
19825: END
// every 0 0$5 trigger ( not IsOK ( A2_bu1 ) ) and ( not IsOK ( A2_bu2 ) ) do var pom , i ; var souradnice ;
19826: LD_INT 112
19828: PPUSH
19829: CALL_OW 302
19833: NOT
19834: PUSH
19835: LD_INT 63
19837: PPUSH
19838: CALL_OW 302
19842: NOT
19843: AND
19844: IFFALSE 20078
19846: GO 19848
19848: DISABLE
19849: LD_INT 0
19851: PPUSH
19852: PPUSH
19853: PPUSH
// begin for i in Ar_utok2_LIST do
19854: LD_ADDR_VAR 0 2
19858: PUSH
19859: LD_EXP 14
19863: PUSH
19864: FOR_IN
19865: IFFALSE 19884
// PlaceUnitArea ( i , Ar_utoky , false ) ;
19867: LD_VAR 0 2
19871: PPUSH
19872: LD_INT 25
19874: PPUSH
19875: LD_INT 0
19877: PPUSH
19878: CALL_OW 49
19882: GO 19864
19884: POP
19885: POP
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
19886: LD_ADDR_VAR 0 1
19890: PUSH
19891: LD_INT 22
19893: PUSH
19894: LD_EXP 1
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: LD_INT 21
19905: PUSH
19906: LD_INT 1
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PPUSH
19917: CALL_OW 69
19921: ST_TO_ADDR
// if pom > 0 then
19922: LD_VAR 0 1
19926: PUSH
19927: LD_INT 0
19929: GREATER
19930: IFFALSE 19971
// souradnice = [ GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ] else
19932: LD_ADDR_VAR 0 3
19936: PUSH
19937: LD_VAR 0 1
19941: PUSH
19942: LD_INT 1
19944: ARRAY
19945: PPUSH
19946: CALL_OW 250
19950: PUSH
19951: LD_VAR 0 1
19955: PUSH
19956: LD_INT 1
19958: ARRAY
19959: PPUSH
19960: CALL_OW 251
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: ST_TO_ADDR
19969: GO 19986
// souradnice = [ 39 , 16 ] ;
19971: LD_ADDR_VAR 0 3
19975: PUSH
19976: LD_INT 39
19978: PUSH
19979: LD_INT 16
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: ST_TO_ADDR
// mcm2 = McMove ( 1 , Ar_utok2_LIST , [ [ 128 , 91 ] , [ 128 , 108 ] , [ 126 , 121 ] , [ 120 , 131 ] , souradnice ] , [ mc_move_wait , mc_move_agressive , mc_move_dontcapture ] ) ;
19986: LD_ADDR_LOC 38
19990: PUSH
19991: LD_INT 1
19993: PPUSH
19994: LD_EXP 14
19998: PPUSH
19999: LD_INT 128
20001: PUSH
20002: LD_INT 91
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PUSH
20009: LD_INT 128
20011: PUSH
20012: LD_INT 108
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 126
20021: PUSH
20022: LD_INT 121
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: LD_INT 120
20031: PUSH
20032: LD_INT 131
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_VAR 0 3
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: PPUSH
20051: LD_INT 1
20053: PUSH
20054: LD_INT 6
20056: PUSH
20057: LD_INT 5
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: LIST
20064: PPUSH
20065: CALL_OW 398
20069: ST_TO_ADDR
// utok3_over = true ;
20070: LD_ADDR_LOC 29
20074: PUSH
20075: LD_INT 1
20077: ST_TO_ADDR
// end ;
20078: PPOPN 3
20080: END
// every 1 1$30 trigger A2_dobyta do var pom , i , pom1 ;
20081: LD_EXP 29
20085: IFFALSE 20350
20087: GO 20089
20089: DISABLE
20090: LD_INT 0
20092: PPUSH
20093: PPUSH
20094: PPUSH
// begin wait ( 2 2$0 ) ;
20095: LD_INT 4200
20097: PPUSH
20098: CALL_OW 67
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20102: LD_ADDR_VAR 0 1
20106: PUSH
20107: LD_INT 22
20109: PUSH
20110: LD_EXP 1
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 2
20121: PUSH
20122: LD_INT 34
20124: PUSH
20125: LD_INT 12
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 34
20134: PUSH
20135: LD_INT 32
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: LIST
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PPUSH
20151: CALL_OW 69
20155: ST_TO_ADDR
// for i in Ar_utok4_LIST do
20156: LD_ADDR_VAR 0 2
20160: PUSH
20161: LD_EXP 16
20165: PUSH
20166: FOR_IN
20167: IFFALSE 20186
// PlaceUnitArea ( i , Ar_utoky , false ) ;
20169: LD_VAR 0 2
20173: PPUSH
20174: LD_INT 25
20176: PPUSH
20177: LD_INT 0
20179: PPUSH
20180: CALL_OW 49
20184: GO 20166
20186: POP
20187: POP
// if pom > 0 then
20188: LD_VAR 0 1
20192: PUSH
20193: LD_INT 0
20195: GREATER
20196: IFFALSE 20270
// begin ComAgressiveMove ( Ar_utok4_LIST , GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ) ;
20198: LD_EXP 16
20202: PPUSH
20203: LD_VAR 0 1
20207: PUSH
20208: LD_INT 1
20210: ARRAY
20211: PPUSH
20212: CALL_OW 250
20216: PPUSH
20217: LD_VAR 0 1
20221: PUSH
20222: LD_INT 1
20224: ARRAY
20225: PPUSH
20226: CALL_OW 251
20230: PPUSH
20231: CALL_OW 114
// AddComAttackUnit ( Ar_utok4_LIST , pom [ 1 ] ) ;
20235: LD_EXP 16
20239: PPUSH
20240: LD_VAR 0 1
20244: PUSH
20245: LD_INT 1
20247: ARRAY
20248: PPUSH
20249: CALL_OW 175
// AddComAgressiveMove ( Ar_utok4_LIST , 59 , 7 ) ;
20253: LD_EXP 16
20257: PPUSH
20258: LD_INT 59
20260: PPUSH
20261: LD_INT 7
20263: PPUSH
20264: CALL_OW 174
// end else
20268: GO 20342
// McMove ( 1 , Ar_utok2_LIST , [ [ 128 , 91 ] , [ 128 , 108 ] , [ 126 , 121 ] , [ 120 , 123 ] ] , [ mc_move_wait , mc_move_agressive , mc_move_dontcapture ] ) ;
20270: LD_INT 1
20272: PPUSH
20273: LD_EXP 14
20277: PPUSH
20278: LD_INT 128
20280: PUSH
20281: LD_INT 91
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 128
20290: PUSH
20291: LD_INT 108
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: LD_INT 126
20300: PUSH
20301: LD_INT 121
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 120
20310: PUSH
20311: LD_INT 123
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: PPUSH
20324: LD_INT 1
20326: PUSH
20327: LD_INT 6
20329: PUSH
20330: LD_INT 5
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: LIST
20337: PPUSH
20338: CALL_OW 398
// utok4_over = true ;
20342: LD_ADDR_LOC 30
20346: PUSH
20347: LD_INT 1
20349: ST_TO_ADDR
// end ;
20350: PPOPN 3
20352: END
// every 0 0$1 trigger FilterUnitsInArea ( zoufalost1 , [ [ f_side , Arabi ] ] ) = 0 do var i ;
20353: LD_INT 35
20355: PPUSH
20356: LD_INT 22
20358: PUSH
20359: LD_EXP 3
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: EMPTY
20369: LIST
20370: PPUSH
20371: CALL_OW 70
20375: PUSH
20376: LD_INT 0
20378: EQUAL
20379: IFFALSE 20472
20381: GO 20383
20383: DISABLE
20384: LD_INT 0
20386: PPUSH
// begin for i in Ar_backa_LIST do
20387: LD_ADDR_VAR 0 1
20391: PUSH
20392: LD_EXP 18
20396: PUSH
20397: FOR_IN
20398: IFFALSE 20417
// PlaceUnitArea ( i , backa1 , false ) ;
20400: LD_VAR 0 1
20404: PPUSH
20405: LD_INT 36
20407: PPUSH
20408: LD_INT 0
20410: PPUSH
20411: CALL_OW 49
20415: GO 20397
20417: POP
20418: POP
// McMove ( 1 , Ar_backa_LIST , [ [ 59 , 7 ] , [ 76 , 11 ] , [ 95 , 19 ] ] , [ mc_move_agressive ] ) ;
20419: LD_INT 1
20421: PPUSH
20422: LD_EXP 18
20426: PPUSH
20427: LD_INT 59
20429: PUSH
20430: LD_INT 7
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: LD_INT 76
20439: PUSH
20440: LD_INT 11
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 95
20449: PUSH
20450: LD_INT 19
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: LIST
20461: PPUSH
20462: LD_INT 6
20464: PUSH
20465: EMPTY
20466: LIST
20467: PPUSH
20468: CALL_OW 398
// end ;
20472: PPOPN 1
20474: END
// every 1 1$0 trigger utok4_over do var pom , i , pom1 ;
20475: LD_LOC 30
20479: IFFALSE 20702
20481: GO 20483
20483: DISABLE
20484: LD_INT 0
20486: PPUSH
20487: PPUSH
20488: PPUSH
// begin wait ( last_attack_wait [ difficulty ] ) ;
20489: LD_EXP 55
20493: PUSH
20494: LD_OWVAR 67
20498: ARRAY
20499: PPUSH
20500: CALL_OW 67
// wait ( 2 2$0 ) ;
20504: LD_INT 4200
20506: PPUSH
20507: CALL_OW 67
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20511: LD_ADDR_VAR 0 1
20515: PUSH
20516: LD_INT 22
20518: PUSH
20519: LD_EXP 1
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: LD_INT 2
20530: PUSH
20531: LD_INT 34
20533: PUSH
20534: LD_INT 12
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PUSH
20541: LD_INT 34
20543: PUSH
20544: LD_INT 32
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: LIST
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PPUSH
20560: CALL_OW 69
20564: ST_TO_ADDR
// for i in Ar_utoklast_LIST do
20565: LD_ADDR_VAR 0 2
20569: PUSH
20570: LD_EXP 17
20574: PUSH
20575: FOR_IN
20576: IFFALSE 20595
// PlaceUnitArea ( i , Ar_utoky , false ) ;
20578: LD_VAR 0 2
20582: PPUSH
20583: LD_INT 25
20585: PPUSH
20586: LD_INT 0
20588: PPUSH
20589: CALL_OW 49
20593: GO 20575
20595: POP
20596: POP
// for i in pom do
20597: LD_ADDR_VAR 0 2
20601: PUSH
20602: LD_VAR 0 1
20606: PUSH
20607: FOR_IN
20608: IFFALSE 20655
// begin AddComAgressiveMove ( Ar_utoklast_LIST , GetX ( i ) , GetY ( i ) ) ;
20610: LD_EXP 17
20614: PPUSH
20615: LD_VAR 0 2
20619: PPUSH
20620: CALL_OW 250
20624: PPUSH
20625: LD_VAR 0 2
20629: PPUSH
20630: CALL_OW 251
20634: PPUSH
20635: CALL_OW 174
// AddComAttackUnit ( Ar_utoklast_LIST , i ) ;
20639: LD_EXP 17
20643: PPUSH
20644: LD_VAR 0 2
20648: PPUSH
20649: CALL_OW 175
// end ;
20653: GO 20607
20655: POP
20656: POP
// AddComAgressiveMove ( Ar_utoklast_LIST , 18 , 17 ) ;
20657: LD_EXP 17
20661: PPUSH
20662: LD_INT 18
20664: PPUSH
20665: LD_INT 17
20667: PPUSH
20668: CALL_OW 174
// AddComAgressiveMove ( Ar_utoklast_LIST , 72 , 10 ) ;
20672: LD_EXP 17
20676: PPUSH
20677: LD_INT 72
20679: PPUSH
20680: LD_INT 10
20682: PPUSH
20683: CALL_OW 174
// AddComAgressiveMove ( Ar_utoklast_LIST , 116 , 126 ) ;
20687: LD_EXP 17
20691: PPUSH
20692: LD_INT 116
20694: PPUSH
20695: LD_INT 126
20697: PPUSH
20698: CALL_OW 174
// end ;
20702: PPOPN 3
20704: END
// every 1 1$0 trigger A1_dobyta do var pom ;
20705: LD_EXP 28
20709: IFFALSE 21136
20711: GO 20713
20713: DISABLE
20714: LD_INT 0
20716: PPUSH
// begin pom = FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) ;
20717: LD_ADDR_VAR 0 1
20721: PUSH
20722: LD_INT 3
20724: PPUSH
20725: LD_INT 22
20727: PUSH
20728: LD_EXP 1
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: EMPTY
20738: LIST
20739: PPUSH
20740: CALL_OW 70
20744: ST_TO_ADDR
// wait ( protiutok1 [ difficulty ] ) ;
20745: LD_EXP 48
20749: PUSH
20750: LD_OWVAR 67
20754: ARRAY
20755: PPUSH
20756: CALL_OW 67
// ComMoveXY ( [ A2_kam1 , A2_kam2 , A2_kam3 ] , 66 , 110 ) ;
20760: LD_INT 86
20762: PUSH
20763: LD_INT 85
20765: PUSH
20766: LD_INT 84
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: LIST
20773: PPUSH
20774: LD_INT 66
20776: PPUSH
20777: LD_INT 110
20779: PPUSH
20780: CALL_OW 111
// AddComAttackUnit ( A2_kam1 , NearestUnitToXY ( pom , 102 , 112 ) ) ;
20784: LD_INT 86
20786: PPUSH
20787: LD_VAR 0 1
20791: PPUSH
20792: LD_INT 102
20794: PPUSH
20795: LD_INT 112
20797: PPUSH
20798: CALL_OW 73
20802: PPUSH
20803: CALL_OW 175
// AddComAttackUnit ( A2_kam1 , pom [ Rand ( 1 , pom + 0 ) ] ) ;
20807: LD_INT 86
20809: PPUSH
20810: LD_VAR 0 1
20814: PUSH
20815: LD_INT 1
20817: PPUSH
20818: LD_VAR 0 1
20822: PUSH
20823: LD_INT 0
20825: PLUS
20826: PPUSH
20827: CALL_OW 12
20831: ARRAY
20832: PPUSH
20833: CALL_OW 175
// AddComAttackUnit ( A2_kam2 , NearestUnitToXY ( pom , 90 , 121 ) ) ;
20837: LD_INT 85
20839: PPUSH
20840: LD_VAR 0 1
20844: PPUSH
20845: LD_INT 90
20847: PPUSH
20848: LD_INT 121
20850: PPUSH
20851: CALL_OW 73
20855: PPUSH
20856: CALL_OW 175
// AddComAttackUnit ( A2_kam2 , pom [ Rand ( 1 , pom + 0 ) ] ) ;
20860: LD_INT 85
20862: PPUSH
20863: LD_VAR 0 1
20867: PUSH
20868: LD_INT 1
20870: PPUSH
20871: LD_VAR 0 1
20875: PUSH
20876: LD_INT 0
20878: PLUS
20879: PPUSH
20880: CALL_OW 12
20884: ARRAY
20885: PPUSH
20886: CALL_OW 175
// AddComAttackUnit ( A2_kam3 , A1_dep ) ;
20890: LD_INT 84
20892: PPUSH
20893: LD_INT 4
20895: PPUSH
20896: CALL_OW 175
// AddComAttackUnit ( A2_kam3 , pom [ Rand ( 1 , pom + 0 ) ] ) ;
20900: LD_INT 84
20902: PPUSH
20903: LD_VAR 0 1
20907: PUSH
20908: LD_INT 1
20910: PPUSH
20911: LD_VAR 0 1
20915: PUSH
20916: LD_INT 0
20918: PLUS
20919: PPUSH
20920: CALL_OW 12
20924: ARRAY
20925: PPUSH
20926: CALL_OW 175
// McMove ( 1 , [ A2_op1 , A2_op2 , A2_op3 ] , [ [ 44 , 25 ] , [ 50 , 54 ] , [ 92 , 101 ] , [ 112 , 124 ] ] , [ mc_move_agressive , mc_move_dontcapture ] ) ;
20930: LD_INT 1
20932: PPUSH
20933: LD_INT 89
20935: PUSH
20936: LD_INT 90
20938: PUSH
20939: LD_INT 91
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: LIST
20946: PPUSH
20947: LD_INT 44
20949: PUSH
20950: LD_INT 25
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 50
20959: PUSH
20960: LD_INT 54
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 92
20969: PUSH
20970: LD_INT 101
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 112
20979: PUSH
20980: LD_INT 124
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: PPUSH
20993: LD_INT 6
20995: PUSH
20996: LD_INT 5
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PPUSH
21003: CALL_OW 398
// ComMoveXY ( A2_mor3 , 91 , 128 ) ;
21007: LD_INT 92
21009: PPUSH
21010: LD_INT 91
21012: PPUSH
21013: LD_INT 128
21015: PPUSH
21016: CALL_OW 111
// for i in CREATE_AR_PROTIOFENZIVU_LIST do
21020: LD_ADDR_LOC 33
21024: PUSH
21025: LD_EXP 10
21029: PUSH
21030: FOR_IN
21031: IFFALSE 21050
// PlaceUnitArea ( i , protiEN , false ) ;
21033: LD_LOC 33
21037: PPUSH
21038: LD_INT 21
21040: PPUSH
21041: LD_INT 0
21043: PPUSH
21044: CALL_OW 49
21048: GO 21030
21050: POP
21051: POP
// McMove ( 1 , CREATE_AR_PROTIOFENZIVU_LIST , [ [ 49 , 31 ] , [ 55 , 76 ] , [ 100 , 109 ] , [ 122 , 132 ] ] , [ mc_move_agressive , mc_move_dontcapture ] ) ;
21052: LD_INT 1
21054: PPUSH
21055: LD_EXP 10
21059: PPUSH
21060: LD_INT 49
21062: PUSH
21063: LD_INT 31
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 55
21072: PUSH
21073: LD_INT 76
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: PUSH
21080: LD_INT 100
21082: PUSH
21083: LD_INT 109
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 122
21092: PUSH
21093: LD_INT 132
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: PPUSH
21106: LD_INT 6
21108: PUSH
21109: LD_INT 5
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PPUSH
21116: CALL_OW 398
// utok1 := true ;
21120: LD_ADDR_LOC 27
21124: PUSH
21125: LD_INT 1
21127: ST_TO_ADDR
// utok1_over = true ;
21128: LD_ADDR_LOC 28
21132: PUSH
21133: LD_INT 1
21135: ST_TO_ADDR
// end ;
21136: PPOPN 1
21138: END
// every 0 0$17 trigger oposoldier = - 1 do
21139: LD_EXP 46
21143: PUSH
21144: LD_INT 1
21146: NEG
21147: EQUAL
21148: IFFALSE 21225
21150: GO 21152
21152: DISABLE
// begin if not See ( You , A3_solop ) then
21153: LD_EXP 1
21157: PPUSH
21158: LD_INT 102
21160: PPUSH
21161: CALL_OW 292
21165: NOT
21166: IFFALSE 21225
// begin SetClass ( A3_solop , class_mechanic ) ;
21168: LD_INT 102
21170: PPUSH
21171: LD_INT 3
21173: PPUSH
21174: CALL_OW 336
// RemoveUnit ( A3_solop ) ;
21178: LD_INT 102
21180: PPUSH
21181: CALL_OW 64
// pom := create_auto_pro_solopa ;
21185: LD_ADDR_LOC 34
21189: PUSH
21190: CALL 8636 0 0
21194: ST_TO_ADDR
// PlaceHumanInUnit ( A3_solop , pom ) ;
21195: LD_INT 102
21197: PPUSH
21198: LD_LOC 34
21202: PPUSH
21203: CALL_OW 52
// PlaceUnitXY ( pom , 111 , 16 , false ) ;
21207: LD_LOC 34
21211: PPUSH
21212: LD_INT 111
21214: PPUSH
21215: LD_INT 16
21217: PPUSH
21218: LD_INT 0
21220: PPUSH
21221: CALL_OW 48
// end ; end ;
21225: END
// every 1 1$0 trigger oposoldier = 1 marked 999 do
21226: LD_EXP 46
21230: PUSH
21231: LD_INT 1
21233: EQUAL
21234: IFFALSE 21268
21236: GO 21238
21238: DISABLE
// begin ComMoveXY ( A3_solop , 127 , 89 ) ;
21239: LD_INT 102
21241: PPUSH
21242: LD_INT 127
21244: PPUSH
21245: LD_INT 89
21247: PPUSH
21248: CALL_OW 111
// ComMoveXY ( OpoMike , 127 , 89 ) ;
21252: LD_INT 103
21254: PPUSH
21255: LD_INT 127
21257: PPUSH
21258: LD_INT 89
21260: PPUSH
21261: CALL_OW 111
// enable ( 997 ) ;
21265: LD_INT 997
21267: ENABLE_MARKED
// end ;
21268: END
// every 0 0$1 trigger IsInArea ( A3_solop , Baziny ) marked 997 do
21269: LD_INT 102
21271: PPUSH
21272: LD_INT 12
21274: PPUSH
21275: CALL_OW 308
21279: IFFALSE 21294
21281: GO 21283
21283: DISABLE
// begin wait ( 0 0$5 ) ;
21284: LD_INT 175
21286: PPUSH
21287: CALL_OW 67
// enable ( 998 ) ;
21291: LD_INT 998
21293: ENABLE_MARKED
// end ;
21294: END
// every 0 0$5 trigger oposoldier = 1 marked 998 do
21295: LD_EXP 46
21299: PUSH
21300: LD_INT 1
21302: EQUAL
21303: IFFALSE 21521
21305: GO 21307
21307: DISABLE
// begin pom = FilterUnitsInArea ( Baziny , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) ;
21308: LD_ADDR_LOC 34
21312: PUSH
21313: LD_INT 12
21315: PPUSH
21316: LD_INT 21
21318: PUSH
21319: LD_INT 2
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 33
21328: PUSH
21329: LD_INT 1
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 2
21338: PUSH
21339: LD_INT 34
21341: PUSH
21342: LD_INT 12
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: LD_INT 34
21351: PUSH
21352: LD_INT 32
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 3
21366: PUSH
21367: LD_INT 59
21369: PUSH
21370: EMPTY
21371: LIST
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: PPUSH
21383: CALL_OW 70
21387: ST_TO_ADDR
// if pom > 0 then
21388: LD_LOC 34
21392: PUSH
21393: LD_INT 0
21395: GREATER
21396: IFFALSE 21498
// begin ComEnterUnit ( A3_solop , pom [ 1 ] ) ;
21398: LD_INT 102
21400: PPUSH
21401: LD_LOC 34
21405: PUSH
21406: LD_INT 1
21408: ARRAY
21409: PPUSH
21410: CALL_OW 120
// AddComMoveXY ( A3_solop , 165 , 92 ) ;
21414: LD_INT 102
21416: PPUSH
21417: LD_INT 165
21419: PPUSH
21420: LD_INT 92
21422: PPUSH
21423: CALL_OW 171
// AddComMoveXY ( OpoMike , 165 , 92 ) ;
21427: LD_INT 103
21429: PPUSH
21430: LD_INT 165
21432: PPUSH
21433: LD_INT 92
21435: PPUSH
21436: CALL_OW 171
// oposoldier = 2 ;
21440: LD_ADDR_EXP 46
21444: PUSH
21445: LD_INT 2
21447: ST_TO_ADDR
// wait ( 0 0$15 ) ;
21448: LD_INT 525
21450: PPUSH
21451: CALL_OW 67
// if not IsInUnit ( A3_solop ) then
21455: LD_INT 102
21457: PPUSH
21458: CALL_OW 310
21462: NOT
21463: IFFALSE 21496
// begin ComMoveXY ( [ A3_solop , OpoMike ] , 116 , 23 ) ;
21465: LD_INT 102
21467: PUSH
21468: LD_INT 103
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PPUSH
21475: LD_INT 116
21477: PPUSH
21478: LD_INT 23
21480: PPUSH
21481: CALL_OW 111
// enable ( 996 ) ;
21485: LD_INT 996
21487: ENABLE_MARKED
// oposoldier = 1 ;
21488: LD_ADDR_EXP 46
21492: PUSH
21493: LD_INT 1
21495: ST_TO_ADDR
// end ; end else
21496: GO 21521
// begin AddComMoveXY ( [ A3_solop , OpoMike ] , 116 , 23 ) ;
21498: LD_INT 102
21500: PUSH
21501: LD_INT 103
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PPUSH
21508: LD_INT 116
21510: PPUSH
21511: LD_INT 23
21513: PPUSH
21514: CALL_OW 171
// enable ( 996 ) ;
21518: LD_INT 996
21520: ENABLE_MARKED
// end ; end ;
21521: END
// every 0 0$1 trigger IsInArea ( A3_solop , Baze_zpet ) marked 996 do
21522: LD_INT 102
21524: PPUSH
21525: LD_INT 34
21527: PPUSH
21528: CALL_OW 308
21532: IFFALSE 21540
21534: GO 21536
21536: DISABLE
// begin enable ( 999 ) ;
21537: LD_INT 999
21539: ENABLE_MARKED
// end ;
21540: END
// every 0 0$3 trigger oposoldier = 2 do
21541: LD_EXP 46
21545: PUSH
21546: LD_INT 2
21548: EQUAL
21549: IFFALSE 21680
21551: GO 21553
21553: DISABLE
// begin pom = FilterUnitsInArea ( SolopEx , [ [ f_side , Arabi2 ] ] ) ;
21554: LD_ADDR_LOC 34
21558: PUSH
21559: LD_INT 13
21561: PPUSH
21562: LD_INT 22
21564: PUSH
21565: LD_EXP 4
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: EMPTY
21575: LIST
21576: PPUSH
21577: CALL_OW 70
21581: ST_TO_ADDR
// if pom > 0 then
21582: LD_LOC 34
21586: PUSH
21587: LD_INT 0
21589: GREATER
21590: IFFALSE 21679
// for i in pom do
21592: LD_ADDR_LOC 33
21596: PUSH
21597: LD_LOC 34
21601: PUSH
21602: FOR_IN
21603: IFFALSE 21677
// begin if GetType ( i ) = unit_vehicle then
21605: LD_LOC 33
21609: PPUSH
21610: CALL_OW 247
21614: PUSH
21615: LD_INT 2
21617: EQUAL
21618: IFFALSE 21666
// if IsDrivenBy ( i ) = A3_solop then
21620: LD_LOC 33
21624: PPUSH
21625: CALL_OW 311
21629: PUSH
21630: LD_INT 102
21632: EQUAL
21633: IFFALSE 21666
// begin oposoldier = 3 ;
21635: LD_ADDR_EXP 46
21639: PUSH
21640: LD_INT 3
21642: ST_TO_ADDR
// dialog_kamery ;
21643: CALL 5666 0 0
// RemoveUnit ( IsInUnit ( A3_solop ) ) ;
21647: LD_INT 102
21649: PPUSH
21650: CALL_OW 310
21654: PPUSH
21655: CALL_OW 64
// RemoveUnit ( OpoMike ) ;
21659: LD_INT 103
21661: PPUSH
21662: CALL_OW 64
// end ; RemoveUnit ( i ) ;
21666: LD_LOC 33
21670: PPUSH
21671: CALL_OW 64
// end ;
21675: GO 21602
21677: POP
21678: POP
// enable ;
21679: ENABLE
// end ;
21680: END
// every 0 0$1 do
21681: GO 21683
21683: DISABLE
// begin pom = FilterUnitsInArea ( Calibre1 , [ [ f_side , You ] ] ) ;
21684: LD_ADDR_LOC 34
21688: PUSH
21689: LD_INT 14
21691: PPUSH
21692: LD_INT 22
21694: PUSH
21695: LD_EXP 1
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: PUSH
21704: EMPTY
21705: LIST
21706: PPUSH
21707: CALL_OW 70
21711: ST_TO_ADDR
// if pom > 0 then
21712: LD_LOC 34
21716: PUSH
21717: LD_INT 0
21719: GREATER
21720: IFFALSE 21912
// begin while FilterUnitsInArea ( Boom1 , [ [ f_side , You ] ] ) = 0 do
21722: LD_INT 15
21724: PPUSH
21725: LD_INT 22
21727: PUSH
21728: LD_EXP 1
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: EMPTY
21738: LIST
21739: PPUSH
21740: CALL_OW 70
21744: PUSH
21745: LD_INT 0
21747: EQUAL
21748: IFFALSE 21759
// wait ( 0 0$0.5 ) ;
21750: LD_INT 18
21752: PPUSH
21753: CALL_OW 67
21757: GO 21722
// ComFireExplosives ( [ A2_zas1 , A2_zas2 ] ) ;
21759: LD_INT 82
21761: PUSH
21762: LD_INT 83
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PPUSH
21769: CALL_OW 134
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 33 , 55 ) ;
21773: LD_INT 82
21775: PUSH
21776: LD_INT 83
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PPUSH
21783: LD_INT 33
21785: PPUSH
21786: LD_INT 55
21788: PPUSH
21789: CALL_OW 171
// AddComWalk ( [ A2_zas1 , A2_zas2 ] ) ;
21793: LD_INT 82
21795: PUSH
21796: LD_INT 83
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PPUSH
21803: CALL_OW 198
// AddComPlaceRemoteCharge ( A2_zas1 , 39 , 15 , 0 ) ;
21807: LD_INT 82
21809: PPUSH
21810: LD_INT 39
21812: PPUSH
21813: LD_INT 15
21815: PPUSH
21816: LD_INT 0
21818: PPUSH
21819: CALL_OW 193
// AddComPlaceRemoteCharge ( A2_zas2 , 37 , 14 , 0 ) ;
21823: LD_INT 83
21825: PPUSH
21826: LD_INT 37
21828: PPUSH
21829: LD_INT 14
21831: PPUSH
21832: LD_INT 0
21834: PPUSH
21835: CALL_OW 193
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 25 , 13 ) ;
21839: LD_INT 82
21841: PUSH
21842: LD_INT 83
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PPUSH
21849: LD_INT 25
21851: PPUSH
21852: LD_INT 13
21854: PPUSH
21855: CALL_OW 171
// while FilterUnitsInArea ( Boom1 , [ [ f_side , You ] ] ) = 0 do
21859: LD_INT 15
21861: PPUSH
21862: LD_INT 22
21864: PUSH
21865: LD_EXP 1
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: EMPTY
21875: LIST
21876: PPUSH
21877: CALL_OW 70
21881: PUSH
21882: LD_INT 0
21884: EQUAL
21885: IFFALSE 21896
// wait ( 0 0$0.5 ) ;
21887: LD_INT 18
21889: PPUSH
21890: CALL_OW 67
21894: GO 21859
// ComFireExplosives ( [ A2_zas1 , A2_zas2 ] ) ;
21896: LD_INT 82
21898: PUSH
21899: LD_INT 83
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PPUSH
21906: CALL_OW 134
// end else
21910: GO 21913
// enable ;
21912: ENABLE
// end ;
21913: END
// every 0 0$1 do
21914: GO 21916
21916: DISABLE
// begin pom = FilterUnitsInArea ( Calibre2 , [ [ f_side , You ] ] ) ;
21917: LD_ADDR_LOC 34
21921: PUSH
21922: LD_INT 18
21924: PPUSH
21925: LD_INT 22
21927: PUSH
21928: LD_EXP 1
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PUSH
21937: EMPTY
21938: LIST
21939: PPUSH
21940: CALL_OW 70
21944: ST_TO_ADDR
// if pom > 0 then
21945: LD_LOC 34
21949: PUSH
21950: LD_INT 0
21952: GREATER
21953: IFFALSE 22118
// begin while FilterUnitsInArea ( Boom3 , [ [ f_side , You ] ] ) = 0 do
21955: LD_INT 19
21957: PPUSH
21958: LD_INT 22
21960: PUSH
21961: LD_EXP 1
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: EMPTY
21971: LIST
21972: PPUSH
21973: CALL_OW 70
21977: PUSH
21978: LD_INT 0
21980: EQUAL
21981: IFFALSE 21992
// wait ( 0 0$0.5 ) ;
21983: LD_INT 18
21985: PPUSH
21986: CALL_OW 67
21990: GO 21955
// ComFireExplosives ( A3_zas1 ) ;
21992: LD_INT 101
21994: PPUSH
21995: CALL_OW 134
// bum2 := true ;
21999: LD_ADDR_EXP 47
22003: PUSH
22004: LD_INT 1
22006: ST_TO_ADDR
// AddComWalk ( A3_zas1 ) ;
22007: LD_INT 101
22009: PPUSH
22010: CALL_OW 198
// pom = FilterUnitsInArea ( Abase3 , [ [ f_side , You ] ] ) ;
22014: LD_ADDR_LOC 34
22018: PUSH
22019: LD_INT 17
22021: PPUSH
22022: LD_INT 22
22024: PUSH
22025: LD_EXP 1
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: PUSH
22034: EMPTY
22035: LIST
22036: PPUSH
22037: CALL_OW 70
22041: ST_TO_ADDR
// if pom > 0 then
22042: LD_LOC 34
22046: PUSH
22047: LD_INT 0
22049: GREATER
22050: IFFALSE 22086
// begin AddComPlaceDelayedCharge ( A3_zas1 , 0 , 0 , pom [ 1 ] ) ;
22052: LD_INT 101
22054: PPUSH
22055: LD_INT 0
22057: PPUSH
22058: LD_INT 0
22060: PPUSH
22061: LD_LOC 34
22065: PUSH
22066: LD_INT 1
22068: ARRAY
22069: PPUSH
22070: CALL_OW 192
// AddComEnterUnit ( A3_zas1 , A3_bar ) ;
22074: LD_INT 101
22076: PPUSH
22077: LD_INT 40
22079: PPUSH
22080: CALL_OW 180
// end else
22084: GO 22116
// begin AddComPlaceRemoteCharge ( A3_zas1 , 102 , 19 , 0 ) ;
22086: LD_INT 101
22088: PPUSH
22089: LD_INT 102
22091: PPUSH
22092: LD_INT 19
22094: PPUSH
22095: LD_INT 0
22097: PPUSH
22098: CALL_OW 193
// AddComMoveXY ( A3_zas1 , 99 , 3 ) ;
22102: LD_INT 101
22104: PPUSH
22105: LD_INT 99
22107: PPUSH
22108: LD_INT 3
22110: PPUSH
22111: CALL_OW 171
// enable ;
22115: ENABLE
// end ; end else
22116: GO 22119
// enable ;
22118: ENABLE
// end ;
22119: END
// every 0 0$2 do
22120: GO 22122
22122: DISABLE
// begin pom = [ ] ;
22123: LD_ADDR_LOC 34
22127: PUSH
22128: EMPTY
22129: ST_TO_ADDR
// pom1 = [ ] ;
22130: LD_ADDR_LOC 35
22134: PUSH
22135: EMPTY
22136: ST_TO_ADDR
// for i in Veze_2 do
22137: LD_ADDR_LOC 33
22141: PUSH
22142: LD_LOC 31
22146: PUSH
22147: FOR_IN
22148: IFFALSE 22183
// if GetLives ( i ) <> 1000 then
22150: LD_LOC 33
22154: PPUSH
22155: CALL_OW 256
22159: PUSH
22160: LD_INT 1000
22162: NONEQUAL
22163: IFFALSE 22181
// pom = pom ^ i ;
22165: LD_ADDR_LOC 34
22169: PUSH
22170: LD_LOC 34
22174: PUSH
22175: LD_LOC 33
22179: ADD
22180: ST_TO_ADDR
22181: GO 22147
22183: POP
22184: POP
// for i in Opr_2 do
22185: LD_ADDR_LOC 33
22189: PUSH
22190: LD_LOC 32
22194: PUSH
22195: FOR_IN
22196: IFFALSE 22227
// if IsOK ( i ) then
22198: LD_LOC 33
22202: PPUSH
22203: CALL_OW 302
22207: IFFALSE 22225
// pom1 = pom1 ^ i ;
22209: LD_ADDR_LOC 35
22213: PUSH
22214: LD_LOC 35
22218: PUSH
22219: LD_LOC 33
22223: ADD
22224: ST_TO_ADDR
22225: GO 22195
22227: POP
22228: POP
// if pom1 > 0 and pom > 0 then
22229: LD_LOC 35
22233: PUSH
22234: LD_INT 0
22236: GREATER
22237: PUSH
22238: LD_LOC 34
22242: PUSH
22243: LD_INT 0
22245: GREATER
22246: AND
22247: IFFALSE 22405
// begin if pom + 0 <= pom1 + 0 then
22249: LD_LOC 34
22253: PUSH
22254: LD_INT 0
22256: PLUS
22257: PUSH
22258: LD_LOC 35
22262: PUSH
22263: LD_INT 0
22265: PLUS
22266: LESSEQUAL
22267: IFFALSE 22338
// for i := 1 to pom + 0 do
22269: LD_ADDR_LOC 33
22273: PUSH
22274: DOUBLE
22275: LD_INT 1
22277: DEC
22278: ST_TO_ADDR
22279: LD_LOC 34
22283: PUSH
22284: LD_INT 0
22286: PLUS
22287: PUSH
22288: FOR_TO
22289: IFFALSE 22334
// begin AddComExitBuilding ( pom1 [ i ] ) ;
22291: LD_LOC 35
22295: PUSH
22296: LD_LOC 33
22300: ARRAY
22301: PPUSH
22302: CALL_OW 182
// AddComRepairBuilding ( pom1 [ i ] , pom [ i ] ) ;
22306: LD_LOC 35
22310: PUSH
22311: LD_LOC 33
22315: ARRAY
22316: PPUSH
22317: LD_LOC 34
22321: PUSH
22322: LD_LOC 33
22326: ARRAY
22327: PPUSH
22328: CALL_OW 190
// end else
22332: GO 22288
22334: POP
22335: POP
22336: GO 22405
// for i := 1 to pom1 + 0 do
22338: LD_ADDR_LOC 33
22342: PUSH
22343: DOUBLE
22344: LD_INT 1
22346: DEC
22347: ST_TO_ADDR
22348: LD_LOC 35
22352: PUSH
22353: LD_INT 0
22355: PLUS
22356: PUSH
22357: FOR_TO
22358: IFFALSE 22403
// begin AddComExitBuilding ( pom1 [ i ] ) ;
22360: LD_LOC 35
22364: PUSH
22365: LD_LOC 33
22369: ARRAY
22370: PPUSH
22371: CALL_OW 182
// AddComRepairBuilding ( pom1 [ i ] , pom [ i ] ) ;
22375: LD_LOC 35
22379: PUSH
22380: LD_LOC 33
22384: ARRAY
22385: PPUSH
22386: LD_LOC 34
22390: PUSH
22391: LD_LOC 33
22395: ARRAY
22396: PPUSH
22397: CALL_OW 190
// end ;
22401: GO 22357
22403: POP
22404: POP
// end ; enable ;
22405: ENABLE
// end ;
22406: END
// every 0 0$1 trigger FilterUnitsInArea ( Create2 , [ [ f_side , You ] ] ) > 0 do
22407: LD_INT 22
22409: PPUSH
22410: LD_INT 22
22412: PUSH
22413: LD_EXP 1
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: EMPTY
22423: LIST
22424: PPUSH
22425: CALL_OW 70
22429: PUSH
22430: LD_INT 0
22432: GREATER
22433: IFFALSE 23030
22435: GO 22437
22437: DISABLE
// begin PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 1 ] , 28 , 39 , false ) ;
22438: LD_EXP 11
22442: PUSH
22443: LD_INT 1
22445: ARRAY
22446: PPUSH
22447: LD_INT 28
22449: PPUSH
22450: LD_INT 39
22452: PPUSH
22453: LD_INT 0
22455: PPUSH
22456: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 2 ] , 23 , 38 , false ) ;
22460: LD_EXP 11
22464: PUSH
22465: LD_INT 2
22467: ARRAY
22468: PPUSH
22469: LD_INT 23
22471: PPUSH
22472: LD_INT 38
22474: PPUSH
22475: LD_INT 0
22477: PPUSH
22478: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 3 ] , 32 , 20 , false ) ;
22482: LD_EXP 11
22486: PUSH
22487: LD_INT 3
22489: ARRAY
22490: PPUSH
22491: LD_INT 32
22493: PPUSH
22494: LD_INT 20
22496: PPUSH
22497: LD_INT 0
22499: PPUSH
22500: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 4 ] , 32 , 17 , false ) ;
22504: LD_EXP 11
22508: PUSH
22509: LD_INT 4
22511: ARRAY
22512: PPUSH
22513: LD_INT 32
22515: PPUSH
22516: LD_INT 17
22518: PPUSH
22519: LD_INT 0
22521: PPUSH
22522: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 5 ] , 38 , 8 , false ) ;
22526: LD_EXP 11
22530: PUSH
22531: LD_INT 5
22533: ARRAY
22534: PPUSH
22535: LD_INT 38
22537: PPUSH
22538: LD_INT 8
22540: PPUSH
22541: LD_INT 0
22543: PPUSH
22544: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 6 ] , 40 , 7 , false ) ;
22548: LD_EXP 11
22552: PUSH
22553: LD_INT 6
22555: ARRAY
22556: PPUSH
22557: LD_INT 40
22559: PPUSH
22560: LD_INT 7
22562: PPUSH
22563: LD_INT 0
22565: PPUSH
22566: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 7 ] , 24 , 8 , false ) ;
22570: LD_EXP 11
22574: PUSH
22575: LD_INT 7
22577: ARRAY
22578: PPUSH
22579: LD_INT 24
22581: PPUSH
22582: LD_INT 8
22584: PPUSH
22585: LD_INT 0
22587: PPUSH
22588: CALL_OW 48
// if difficulty > 1 then
22592: LD_OWVAR 67
22596: PUSH
22597: LD_INT 1
22599: GREATER
22600: IFFALSE 22626
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 8 ] , 26 , 10 , false ) else
22602: LD_EXP 11
22606: PUSH
22607: LD_INT 8
22609: ARRAY
22610: PPUSH
22611: LD_INT 26
22613: PPUSH
22614: LD_INT 10
22616: PPUSH
22617: LD_INT 0
22619: PPUSH
22620: CALL_OW 48
22624: GO 22639
// DestroyUnit ( JEDNOTKY_BAZE_2_LIST [ 8 ] ) ;
22626: LD_EXP 11
22630: PUSH
22631: LD_INT 8
22633: ARRAY
22634: PPUSH
22635: CALL_OW 65
// if difficulty > 2 then
22639: LD_OWVAR 67
22643: PUSH
22644: LD_INT 2
22646: GREATER
22647: IFFALSE 22673
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 9 ] , 25 , 11 , false ) else
22649: LD_EXP 11
22653: PUSH
22654: LD_INT 9
22656: ARRAY
22657: PPUSH
22658: LD_INT 25
22660: PPUSH
22661: LD_INT 11
22663: PPUSH
22664: LD_INT 0
22666: PPUSH
22667: CALL_OW 48
22671: GO 22686
// DestroyUnit ( JEDNOTKY_BAZE_2_LIST [ 9 ] ) ;
22673: LD_EXP 11
22677: PUSH
22678: LD_INT 9
22680: ARRAY
22681: PPUSH
22682: CALL_OW 65
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 10 ] , 24 , 10 , false ) ;
22686: LD_EXP 11
22690: PUSH
22691: LD_INT 10
22693: ARRAY
22694: PPUSH
22695: LD_INT 24
22697: PPUSH
22698: LD_INT 10
22700: PPUSH
22701: LD_INT 0
22703: PPUSH
22704: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 11 ] , 31 , 9 , false ) ;
22708: LD_EXP 11
22712: PUSH
22713: LD_INT 11
22715: ARRAY
22716: PPUSH
22717: LD_INT 31
22719: PPUSH
22720: LD_INT 9
22722: PPUSH
22723: LD_INT 0
22725: PPUSH
22726: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 12 ] , 33 , 9 , false ) ;
22730: LD_EXP 11
22734: PUSH
22735: LD_INT 12
22737: ARRAY
22738: PPUSH
22739: LD_INT 33
22741: PPUSH
22742: LD_INT 9
22744: PPUSH
22745: LD_INT 0
22747: PPUSH
22748: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 13 ] , 38 , 40 , false ) ;
22752: LD_EXP 11
22756: PUSH
22757: LD_INT 13
22759: ARRAY
22760: PPUSH
22761: LD_INT 38
22763: PPUSH
22764: LD_INT 40
22766: PPUSH
22767: LD_INT 0
22769: PPUSH
22770: CALL_OW 48
// if difficulty > 1 then
22774: LD_OWVAR 67
22778: PUSH
22779: LD_INT 1
22781: GREATER
22782: IFFALSE 22808
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 14 ] , 36 , 39 , false ) else
22784: LD_EXP 11
22788: PUSH
22789: LD_INT 14
22791: ARRAY
22792: PPUSH
22793: LD_INT 36
22795: PPUSH
22796: LD_INT 39
22798: PPUSH
22799: LD_INT 0
22801: PPUSH
22802: CALL_OW 48
22806: GO 22821
// DestroyUnit ( JEDNOTKY_BAZE_2_LIST [ 14 ] ) ;
22808: LD_EXP 11
22812: PUSH
22813: LD_INT 14
22815: ARRAY
22816: PPUSH
22817: CALL_OW 65
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 15 ] , 21 , 12 , false ) ;
22821: LD_EXP 11
22825: PUSH
22826: LD_INT 15
22828: ARRAY
22829: PPUSH
22830: LD_INT 21
22832: PPUSH
22833: LD_INT 12
22835: PPUSH
22836: LD_INT 0
22838: PPUSH
22839: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 16 ] , 21 , 13 , false ) ;
22843: LD_EXP 11
22847: PUSH
22848: LD_INT 16
22850: ARRAY
22851: PPUSH
22852: LD_INT 21
22854: PPUSH
22855: LD_INT 13
22857: PPUSH
22858: LD_INT 0
22860: PPUSH
22861: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 17 ] , 23 , 19 , false ) ;
22865: LD_EXP 11
22869: PUSH
22870: LD_INT 17
22872: ARRAY
22873: PPUSH
22874: LD_INT 23
22876: PPUSH
22877: LD_INT 19
22879: PPUSH
22880: LD_INT 0
22882: PPUSH
22883: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 18 ] , 23 , 20 , false ) ;
22887: LD_EXP 11
22891: PUSH
22892: LD_INT 18
22894: ARRAY
22895: PPUSH
22896: LD_INT 23
22898: PPUSH
22899: LD_INT 20
22901: PPUSH
22902: LD_INT 0
22904: PPUSH
22905: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 19 ] , 21 , 19 , false ) ;
22909: LD_EXP 11
22913: PUSH
22914: LD_INT 19
22916: ARRAY
22917: PPUSH
22918: LD_INT 21
22920: PPUSH
22921: LD_INT 19
22923: PPUSH
22924: LD_INT 0
22926: PPUSH
22927: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 20 ] , 24 , 20 , false ) ;
22931: LD_EXP 11
22935: PUSH
22936: LD_INT 20
22938: ARRAY
22939: PPUSH
22940: LD_INT 24
22942: PPUSH
22943: LD_INT 20
22945: PPUSH
22946: LD_INT 0
22948: PPUSH
22949: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 22 ] , 21 , 34 , false ) ;
22953: LD_EXP 11
22957: PUSH
22958: LD_INT 22
22960: ARRAY
22961: PPUSH
22962: LD_INT 21
22964: PPUSH
22965: LD_INT 34
22967: PPUSH
22968: LD_INT 0
22970: PPUSH
22971: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 21 ] , 27 , 17 , false ) ;
22975: LD_EXP 11
22979: PUSH
22980: LD_INT 21
22982: ARRAY
22983: PPUSH
22984: LD_INT 27
22986: PPUSH
22987: LD_INT 17
22989: PPUSH
22990: LD_INT 0
22992: PPUSH
22993: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 23 ] , 28 , 21 , false ) ;
22997: LD_EXP 11
23001: PUSH
23002: LD_INT 23
23004: ARRAY
23005: PPUSH
23006: LD_INT 28
23008: PPUSH
23009: LD_INT 21
23011: PPUSH
23012: LD_INT 0
23014: PPUSH
23015: CALL_OW 48
// wait ( 0 0$1 ) ;
23019: LD_INT 35
23021: PPUSH
23022: CALL_OW 67
// uklid_arabu2 ;
23026: CALL 17985 0 0
// end ;
23030: END
// every 0 0$1 trigger FilterUnitsInArea ( Create3 , [ [ f_side , You ] ] ) > 0 do
23031: LD_INT 23
23033: PPUSH
23034: LD_INT 22
23036: PUSH
23037: LD_EXP 1
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: EMPTY
23047: LIST
23048: PPUSH
23049: CALL_OW 70
23053: PUSH
23054: LD_INT 0
23056: GREATER
23057: IFFALSE 23447
23059: GO 23061
23061: DISABLE
// begin PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 1 ] , 103 , 11 , false ) ;
23062: LD_EXP 12
23066: PUSH
23067: LD_INT 1
23069: ARRAY
23070: PPUSH
23071: LD_INT 103
23073: PPUSH
23074: LD_INT 11
23076: PPUSH
23077: LD_INT 0
23079: PPUSH
23080: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 2 ] , 108 , 18 , false ) ;
23084: LD_EXP 12
23088: PUSH
23089: LD_INT 2
23091: ARRAY
23092: PPUSH
23093: LD_INT 108
23095: PPUSH
23096: LD_INT 18
23098: PPUSH
23099: LD_INT 0
23101: PPUSH
23102: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 3 ] , 107 , 21 , false ) ;
23106: LD_EXP 12
23110: PUSH
23111: LD_INT 3
23113: ARRAY
23114: PPUSH
23115: LD_INT 107
23117: PPUSH
23118: LD_INT 21
23120: PPUSH
23121: LD_INT 0
23123: PPUSH
23124: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 4 ] , 118 , 11 , false ) ;
23128: LD_EXP 12
23132: PUSH
23133: LD_INT 4
23135: ARRAY
23136: PPUSH
23137: LD_INT 118
23139: PPUSH
23140: LD_INT 11
23142: PPUSH
23143: LD_INT 0
23145: PPUSH
23146: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 5 ] , 118 , 12 , false ) ;
23150: LD_EXP 12
23154: PUSH
23155: LD_INT 5
23157: ARRAY
23158: PPUSH
23159: LD_INT 118
23161: PPUSH
23162: LD_INT 12
23164: PPUSH
23165: LD_INT 0
23167: PPUSH
23168: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 6 ] , 119 , 13 , false ) ;
23172: LD_EXP 12
23176: PUSH
23177: LD_INT 6
23179: ARRAY
23180: PPUSH
23181: LD_INT 119
23183: PPUSH
23184: LD_INT 13
23186: PPUSH
23187: LD_INT 0
23189: PPUSH
23190: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 7 ] , 115 , 9 , false ) ;
23194: LD_EXP 12
23198: PUSH
23199: LD_INT 7
23201: ARRAY
23202: PPUSH
23203: LD_INT 115
23205: PPUSH
23206: LD_INT 9
23208: PPUSH
23209: LD_INT 0
23211: PPUSH
23212: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 8 ] , 119 , 18 , false ) ;
23216: LD_EXP 12
23220: PUSH
23221: LD_INT 8
23223: ARRAY
23224: PPUSH
23225: LD_INT 119
23227: PPUSH
23228: LD_INT 18
23230: PPUSH
23231: LD_INT 0
23233: PPUSH
23234: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 9 ] , 118 , 18 , false ) ;
23238: LD_EXP 12
23242: PUSH
23243: LD_INT 9
23245: ARRAY
23246: PPUSH
23247: LD_INT 118
23249: PPUSH
23250: LD_INT 18
23252: PPUSH
23253: LD_INT 0
23255: PPUSH
23256: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 10 ] , 118 , 17 , false ) ;
23260: LD_EXP 12
23264: PUSH
23265: LD_INT 10
23267: ARRAY
23268: PPUSH
23269: LD_INT 118
23271: PPUSH
23272: LD_INT 17
23274: PPUSH
23275: LD_INT 0
23277: PPUSH
23278: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 11 ] , 118 , 16 , false ) ;
23282: LD_EXP 12
23286: PUSH
23287: LD_INT 11
23289: ARRAY
23290: PPUSH
23291: LD_INT 118
23293: PPUSH
23294: LD_INT 16
23296: PPUSH
23297: LD_INT 0
23299: PPUSH
23300: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 12 ] , 111 , 13 , false ) ;
23304: LD_EXP 12
23308: PUSH
23309: LD_INT 12
23311: ARRAY
23312: PPUSH
23313: LD_INT 111
23315: PPUSH
23316: LD_INT 13
23318: PPUSH
23319: LD_INT 0
23321: PPUSH
23322: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 13 ] , 112 , 12 , false ) ;
23326: LD_EXP 12
23330: PUSH
23331: LD_INT 13
23333: ARRAY
23334: PPUSH
23335: LD_INT 112
23337: PPUSH
23338: LD_INT 12
23340: PPUSH
23341: LD_INT 0
23343: PPUSH
23344: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 14 ] , 113 , 25 , false ) ;
23348: LD_EXP 12
23352: PUSH
23353: LD_INT 14
23355: ARRAY
23356: PPUSH
23357: LD_INT 113
23359: PPUSH
23360: LD_INT 25
23362: PPUSH
23363: LD_INT 0
23365: PPUSH
23366: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 15 ] , 113 , 27 , false ) ;
23370: LD_EXP 12
23374: PUSH
23375: LD_INT 15
23377: ARRAY
23378: PPUSH
23379: LD_INT 113
23381: PPUSH
23382: LD_INT 27
23384: PPUSH
23385: LD_INT 0
23387: PPUSH
23388: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 16 ] , 114 , 9 , false ) ;
23392: LD_EXP 12
23396: PUSH
23397: LD_INT 16
23399: ARRAY
23400: PPUSH
23401: LD_INT 114
23403: PPUSH
23404: LD_INT 9
23406: PPUSH
23407: LD_INT 0
23409: PPUSH
23410: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 17 ] , 114 , 10 , false ) ;
23414: LD_EXP 12
23418: PUSH
23419: LD_INT 17
23421: ARRAY
23422: PPUSH
23423: LD_INT 114
23425: PPUSH
23426: LD_INT 10
23428: PPUSH
23429: LD_INT 0
23431: PPUSH
23432: CALL_OW 48
// wait ( 0 0$1 ) ;
23436: LD_INT 35
23438: PPUSH
23439: CALL_OW 67
// uklid_arabu3 ;
23443: CALL 19165 0 0
// end ;
23447: END
// export function uprav_zivoty_arabskych_budov ; begin
23448: LD_INT 0
23450: PPUSH
// SetLives ( A1_bu3 , zivoty_prvni_baze [ difficulty ] ) ;
23451: LD_INT 11
23453: PPUSH
23454: LD_EXP 53
23458: PUSH
23459: LD_OWVAR 67
23463: ARRAY
23464: PPUSH
23465: CALL_OW 234
// SetLives ( A1_bu1 , zivoty_prvni_baze [ difficulty ] ) ;
23469: LD_INT 9
23471: PPUSH
23472: LD_EXP 53
23476: PUSH
23477: LD_OWVAR 67
23481: ARRAY
23482: PPUSH
23483: CALL_OW 234
// SetLives ( A1_au2 , zivoty_prvni_baze [ difficulty ] ) ;
23487: LD_INT 109
23489: PPUSH
23490: LD_EXP 53
23494: PUSH
23495: LD_OWVAR 67
23499: ARRAY
23500: PPUSH
23501: CALL_OW 234
// SetLives ( A1_vo1 , zivoty_prvni_baze [ difficulty ] ) ;
23505: LD_INT 72
23507: PPUSH
23508: LD_EXP 53
23512: PUSH
23513: LD_OWVAR 67
23517: ARRAY
23518: PPUSH
23519: CALL_OW 234
// end ;
23523: LD_VAR 0 1
23527: RET
// every 0 0$1 trigger FilterUnitsInArea ( BummArea , [ [ f_side , You ] ] ) do var pom ;
23528: LD_INT 26
23530: PPUSH
23531: LD_INT 22
23533: PUSH
23534: LD_EXP 1
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: EMPTY
23544: LIST
23545: PPUSH
23546: CALL_OW 70
23550: IFFALSE 23619
23552: GO 23554
23554: DISABLE
23555: LD_INT 0
23557: PPUSH
// begin pom = FilterUnitsInArea ( BummArea , [ [ f_side , You ] ] ) ;
23558: LD_ADDR_VAR 0 1
23562: PUSH
23563: LD_INT 26
23565: PPUSH
23566: LD_INT 22
23568: PUSH
23569: LD_EXP 1
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: EMPTY
23579: LIST
23580: PPUSH
23581: CALL_OW 70
23585: ST_TO_ADDR
// if pom > 0 then
23586: LD_VAR 0 1
23590: PUSH
23591: LD_INT 0
23593: GREATER
23594: IFFALSE 23619
// AddComAttackUnit ( [ bumm1 , bumm2 ] , pom [ 1 ] ) ;
23596: LD_INT 114
23598: PUSH
23599: LD_INT 115
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PPUSH
23606: LD_VAR 0 1
23610: PUSH
23611: LD_INT 1
23613: ARRAY
23614: PPUSH
23615: CALL_OW 175
// end ;
23619: PPOPN 1
23621: END
// every 0 0$1 trigger GetLives ( A2_bu1 ) < 700 do var pom , i ; var atakers ;
23622: LD_INT 112
23624: PPUSH
23625: CALL_OW 256
23629: PUSH
23630: LD_INT 700
23632: LESS
23633: IFFALSE 23881
23635: GO 23637
23637: DISABLE
23638: LD_INT 0
23640: PPUSH
23641: PPUSH
23642: PPUSH
// begin if not ( IsOK ( sui1 ) or IsOK ( sui3 ) ) then
23643: LD_INT 118
23645: PPUSH
23646: CALL_OW 302
23650: PUSH
23651: LD_INT 121
23653: PPUSH
23654: CALL_OW 302
23658: OR
23659: NOT
23660: IFFALSE 23664
// exit ;
23662: GO 23881
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23664: LD_ADDR_VAR 0 1
23668: PUSH
23669: LD_INT 22
23671: PUSH
23672: LD_EXP 1
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 2
23683: PUSH
23684: LD_INT 21
23686: PUSH
23687: LD_INT 1
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 21
23696: PUSH
23697: LD_INT 2
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: LIST
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PPUSH
23713: CALL_OW 69
23717: ST_TO_ADDR
// for i in pom do
23718: LD_ADDR_VAR 0 2
23722: PUSH
23723: LD_VAR 0 1
23727: PUSH
23728: FOR_IN
23729: IFFALSE 23764
// if Attacks ( i ) = A2_bu1 then
23731: LD_VAR 0 2
23735: PPUSH
23736: CALL_OW 320
23740: PUSH
23741: LD_INT 112
23743: EQUAL
23744: IFFALSE 23762
// atakers = atakers ^ i ;
23746: LD_ADDR_VAR 0 3
23750: PUSH
23751: LD_VAR 0 3
23755: PUSH
23756: LD_VAR 0 2
23760: ADD
23761: ST_TO_ADDR
23762: GO 23728
23764: POP
23765: POP
// if atakers > 0 then
23766: LD_VAR 0 3
23770: PUSH
23771: LD_INT 0
23773: GREATER
23774: IFFALSE 23801
// AddComAttackUnit ( [ sui1 , sui3 ] , atakers [ 1 ] ) else
23776: LD_INT 118
23778: PUSH
23779: LD_INT 121
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PPUSH
23786: LD_VAR 0 3
23790: PUSH
23791: LD_INT 1
23793: ARRAY
23794: PPUSH
23795: CALL_OW 175
23799: GO 23862
// begin pom = FilterUnitsInArea ( kamiattack , [ [ f_side , You ] ] ) ;
23801: LD_ADDR_VAR 0 1
23805: PUSH
23806: LD_INT 37
23808: PPUSH
23809: LD_INT 22
23811: PUSH
23812: LD_EXP 1
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: EMPTY
23822: LIST
23823: PPUSH
23824: CALL_OW 70
23828: ST_TO_ADDR
// if pom > 0 then
23829: LD_VAR 0 1
23833: PUSH
23834: LD_INT 0
23836: GREATER
23837: IFFALSE 23862
// AddComAttackUnit ( [ sui1 , sui3 ] , pom [ 1 ] ) ;
23839: LD_INT 118
23841: PUSH
23842: LD_INT 121
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PPUSH
23849: LD_VAR 0 1
23853: PUSH
23854: LD_INT 1
23856: ARRAY
23857: PPUSH
23858: CALL_OW 175
// end ; if IsOK ( sui1 ) or IsOK ( sui3 ) then
23862: LD_INT 118
23864: PPUSH
23865: CALL_OW 302
23869: PUSH
23870: LD_INT 121
23872: PPUSH
23873: CALL_OW 302
23877: OR
23878: IFFALSE 23881
// enable ;
23880: ENABLE
// end ;
23881: PPOPN 3
23883: END
// every 0 0$2 trigger GetLives ( A2_bu3 ) < 700 do var pom , i ; var atakers ;
23884: LD_INT 47
23886: PPUSH
23887: CALL_OW 256
23891: PUSH
23892: LD_INT 700
23894: LESS
23895: IFFALSE 24143
23897: GO 23899
23899: DISABLE
23900: LD_INT 0
23902: PPUSH
23903: PPUSH
23904: PPUSH
// begin if not ( IsOK ( sui2 ) or IsOK ( sui4 ) ) then
23905: LD_INT 119
23907: PPUSH
23908: CALL_OW 302
23912: PUSH
23913: LD_INT 120
23915: PPUSH
23916: CALL_OW 302
23920: OR
23921: NOT
23922: IFFALSE 23926
// exit ;
23924: GO 24143
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23926: LD_ADDR_VAR 0 1
23930: PUSH
23931: LD_INT 22
23933: PUSH
23934: LD_EXP 1
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 2
23945: PUSH
23946: LD_INT 21
23948: PUSH
23949: LD_INT 1
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 21
23958: PUSH
23959: LD_INT 2
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: LIST
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PPUSH
23975: CALL_OW 69
23979: ST_TO_ADDR
// for i in pom do
23980: LD_ADDR_VAR 0 2
23984: PUSH
23985: LD_VAR 0 1
23989: PUSH
23990: FOR_IN
23991: IFFALSE 24026
// if Attacks ( i ) = A2_bu3 then
23993: LD_VAR 0 2
23997: PPUSH
23998: CALL_OW 320
24002: PUSH
24003: LD_INT 47
24005: EQUAL
24006: IFFALSE 24024
// atakers = atakers ^ i ;
24008: LD_ADDR_VAR 0 3
24012: PUSH
24013: LD_VAR 0 3
24017: PUSH
24018: LD_VAR 0 2
24022: ADD
24023: ST_TO_ADDR
24024: GO 23990
24026: POP
24027: POP
// if atakers > 0 then
24028: LD_VAR 0 3
24032: PUSH
24033: LD_INT 0
24035: GREATER
24036: IFFALSE 24063
// AddComAttackUnit ( [ sui2 , sui4 ] , atakers [ 1 ] ) else
24038: LD_INT 119
24040: PUSH
24041: LD_INT 120
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PPUSH
24048: LD_VAR 0 3
24052: PUSH
24053: LD_INT 1
24055: ARRAY
24056: PPUSH
24057: CALL_OW 175
24061: GO 24124
// begin pom = FilterUnitsInArea ( kamiattack , [ [ f_side , You ] ] ) ;
24063: LD_ADDR_VAR 0 1
24067: PUSH
24068: LD_INT 37
24070: PPUSH
24071: LD_INT 22
24073: PUSH
24074: LD_EXP 1
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: EMPTY
24084: LIST
24085: PPUSH
24086: CALL_OW 70
24090: ST_TO_ADDR
// if pom > 1 then
24091: LD_VAR 0 1
24095: PUSH
24096: LD_INT 1
24098: GREATER
24099: IFFALSE 24124
// AddComAttackUnit ( [ sui2 , sui4 ] , pom1 [ 2 ] ) ;
24101: LD_INT 119
24103: PUSH
24104: LD_INT 120
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PPUSH
24111: LD_LOC 35
24115: PUSH
24116: LD_INT 2
24118: ARRAY
24119: PPUSH
24120: CALL_OW 175
// end ; if IsOK ( sui1 ) or IsOK ( sui3 ) then
24124: LD_INT 118
24126: PPUSH
24127: CALL_OW 302
24131: PUSH
24132: LD_INT 121
24134: PPUSH
24135: CALL_OW 302
24139: OR
24140: IFFALSE 24143
// enable ;
24142: ENABLE
// end ;
24143: PPOPN 3
24145: END
// on McDefendReturnsUnit ( mcid , un ) do var a ;
24146: LD_INT 0
24148: PPUSH
// begin a = JEDNOTKY_BAZE_2_LIST ;
24149: LD_ADDR_VAR 0 3
24153: PUSH
24154: LD_EXP 11
24158: ST_TO_ADDR
// case un of a [ 1 ] :
24159: LD_VAR 0 2
24163: PUSH
24164: LD_VAR 0 3
24168: PUSH
24169: LD_INT 1
24171: ARRAY
24172: DOUBLE
24173: EQUAL
24174: IFTRUE 24178
24176: GO 24193
24178: POP
// posli_unit ( un , 5 ) ; a [ 2 ] :
24179: LD_VAR 0 2
24183: PPUSH
24184: LD_INT 5
24186: PPUSH
24187: CALL 24695 0 2
24191: GO 24692
24193: LD_VAR 0 3
24197: PUSH
24198: LD_INT 2
24200: ARRAY
24201: DOUBLE
24202: EQUAL
24203: IFTRUE 24207
24205: GO 24222
24207: POP
// posli_unit ( un , 6 ) ; a [ 3 ] :
24208: LD_VAR 0 2
24212: PPUSH
24213: LD_INT 6
24215: PPUSH
24216: CALL 24695 0 2
24220: GO 24692
24222: LD_VAR 0 3
24226: PUSH
24227: LD_INT 3
24229: ARRAY
24230: DOUBLE
24231: EQUAL
24232: IFTRUE 24236
24234: GO 24251
24236: POP
// posli_unit ( un , 7 ) ; a [ 3 ] :
24237: LD_VAR 0 2
24241: PPUSH
24242: LD_INT 7
24244: PPUSH
24245: CALL 24695 0 2
24249: GO 24692
24251: LD_VAR 0 3
24255: PUSH
24256: LD_INT 3
24258: ARRAY
24259: DOUBLE
24260: EQUAL
24261: IFTRUE 24265
24263: GO 24280
24265: POP
// posli_unit ( un , 8 ) ; a [ 3 ] :
24266: LD_VAR 0 2
24270: PPUSH
24271: LD_INT 8
24273: PPUSH
24274: CALL 24695 0 2
24278: GO 24692
24280: LD_VAR 0 3
24284: PUSH
24285: LD_INT 3
24287: ARRAY
24288: DOUBLE
24289: EQUAL
24290: IFTRUE 24294
24292: GO 24309
24294: POP
// posli_unit ( un , 9 ) ; a [ 3 ] :
24295: LD_VAR 0 2
24299: PPUSH
24300: LD_INT 9
24302: PPUSH
24303: CALL 24695 0 2
24307: GO 24692
24309: LD_VAR 0 3
24313: PUSH
24314: LD_INT 3
24316: ARRAY
24317: DOUBLE
24318: EQUAL
24319: IFTRUE 24323
24321: GO 24338
24323: POP
// posli_unit ( un , 10 ) ; a [ 17 ] :
24324: LD_VAR 0 2
24328: PPUSH
24329: LD_INT 10
24331: PPUSH
24332: CALL 24695 0 2
24336: GO 24692
24338: LD_VAR 0 3
24342: PUSH
24343: LD_INT 17
24345: ARRAY
24346: DOUBLE
24347: EQUAL
24348: IFTRUE 24352
24350: GO 24367
24352: POP
// posli_unit ( un , 11 ) ; a [ 18 ] :
24353: LD_VAR 0 2
24357: PPUSH
24358: LD_INT 11
24360: PPUSH
24361: CALL 24695 0 2
24365: GO 24692
24367: LD_VAR 0 3
24371: PUSH
24372: LD_INT 18
24374: ARRAY
24375: DOUBLE
24376: EQUAL
24377: IFTRUE 24381
24379: GO 24396
24381: POP
// posli_unit ( un , 12 ) ; a [ 16 ] :
24382: LD_VAR 0 2
24386: PPUSH
24387: LD_INT 12
24389: PPUSH
24390: CALL 24695 0 2
24394: GO 24692
24396: LD_VAR 0 3
24400: PUSH
24401: LD_INT 16
24403: ARRAY
24404: DOUBLE
24405: EQUAL
24406: IFTRUE 24410
24408: GO 24425
24410: POP
// posli_unit ( un , 13 ) ; a [ 7 ] :
24411: LD_VAR 0 2
24415: PPUSH
24416: LD_INT 13
24418: PPUSH
24419: CALL 24695 0 2
24423: GO 24692
24425: LD_VAR 0 3
24429: PUSH
24430: LD_INT 7
24432: ARRAY
24433: DOUBLE
24434: EQUAL
24435: IFTRUE 24439
24437: GO 24454
24439: POP
// posli_unit ( un , 14 ) ; a [ 8 ] :
24440: LD_VAR 0 2
24444: PPUSH
24445: LD_INT 14
24447: PPUSH
24448: CALL 24695 0 2
24452: GO 24692
24454: LD_VAR 0 3
24458: PUSH
24459: LD_INT 8
24461: ARRAY
24462: DOUBLE
24463: EQUAL
24464: IFTRUE 24468
24466: GO 24483
24468: POP
// posli_unit ( un , 15 ) ; a [ 9 ] :
24469: LD_VAR 0 2
24473: PPUSH
24474: LD_INT 15
24476: PPUSH
24477: CALL 24695 0 2
24481: GO 24692
24483: LD_VAR 0 3
24487: PUSH
24488: LD_INT 9
24490: ARRAY
24491: DOUBLE
24492: EQUAL
24493: IFTRUE 24497
24495: GO 24512
24497: POP
// posli_unit ( un , 16 ) ; a [ 10 ] :
24498: LD_VAR 0 2
24502: PPUSH
24503: LD_INT 16
24505: PPUSH
24506: CALL 24695 0 2
24510: GO 24692
24512: LD_VAR 0 3
24516: PUSH
24517: LD_INT 10
24519: ARRAY
24520: DOUBLE
24521: EQUAL
24522: IFTRUE 24526
24524: GO 24541
24526: POP
// posli_unit ( un , 17 ) ; a [ 21 ] :
24527: LD_VAR 0 2
24531: PPUSH
24532: LD_INT 17
24534: PPUSH
24535: CALL 24695 0 2
24539: GO 24692
24541: LD_VAR 0 3
24545: PUSH
24546: LD_INT 21
24548: ARRAY
24549: DOUBLE
24550: EQUAL
24551: IFTRUE 24555
24553: GO 24570
24555: POP
// posli_unit ( un , 18 ) ; a [ 22 ] :
24556: LD_VAR 0 2
24560: PPUSH
24561: LD_INT 18
24563: PPUSH
24564: CALL 24695 0 2
24568: GO 24692
24570: LD_VAR 0 3
24574: PUSH
24575: LD_INT 22
24577: ARRAY
24578: DOUBLE
24579: EQUAL
24580: IFTRUE 24584
24582: GO 24599
24584: POP
// posli_unit ( un , 19 ) ; A2_nau2 :
24585: LD_VAR 0 2
24589: PPUSH
24590: LD_INT 19
24592: PPUSH
24593: CALL 24695 0 2
24597: GO 24692
24599: LD_INT 108
24601: DOUBLE
24602: EQUAL
24603: IFTRUE 24607
24605: GO 24622
24607: POP
// posli_unit2 ( un , 3 ) ; A2_nau1 :
24608: LD_VAR 0 2
24612: PPUSH
24613: LD_INT 3
24615: PPUSH
24616: CALL 24802 0 2
24620: GO 24692
24622: LD_INT 107
24624: DOUBLE
24625: EQUAL
24626: IFTRUE 24630
24628: GO 24645
24630: POP
// posli_unit2 ( un , 4 ) ; MDopka1 :
24631: LD_VAR 0 2
24635: PPUSH
24636: LD_INT 4
24638: PPUSH
24639: CALL 24802 0 2
24643: GO 24692
24645: LD_INT 117
24647: DOUBLE
24648: EQUAL
24649: IFTRUE 24653
24651: GO 24668
24653: POP
// posli_unit2 ( un , 1 ) ; MDopka2 :
24654: LD_VAR 0 2
24658: PPUSH
24659: LD_INT 1
24661: PPUSH
24662: CALL 24802 0 2
24666: GO 24692
24668: LD_INT 116
24670: DOUBLE
24671: EQUAL
24672: IFTRUE 24676
24674: GO 24691
24676: POP
// posli_unit2 ( un , 2 ) ; end ;
24677: LD_VAR 0 2
24681: PPUSH
24682: LD_INT 2
24684: PPUSH
24685: CALL 24802 0 2
24689: GO 24692
24691: POP
// end ;
24692: PPOPN 3
24694: END
// function posli_unit ( un , cz ) ; var a ; begin
24695: LD_INT 0
24697: PPUSH
24698: PPUSH
// a = uklizejici_mista [ cz ] ;
24699: LD_ADDR_VAR 0 4
24703: PUSH
24704: LD_LOC 36
24708: PUSH
24709: LD_VAR 0 2
24713: ARRAY
24714: ST_TO_ADDR
// debug_strings = [ Vraci MD - zaznam,unit,cislo_zaznamu , a , un , cz ] ;
24715: LD_ADDR_OWVAR 48
24719: PUSH
24720: LD_STRING Vraci MD - zaznam,unit,cislo_zaznamu
24722: PUSH
24723: LD_VAR 0 4
24727: PUSH
24728: LD_VAR 0 1
24732: PUSH
24733: LD_VAR 0 2
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: ST_TO_ADDR
// wait ( 3 ) ;
24744: LD_INT 3
24746: PPUSH
24747: CALL_OW 67
// ComEnterUnit ( un , a [ 1 ] ) ;
24751: LD_VAR 0 1
24755: PPUSH
24756: LD_VAR 0 4
24760: PUSH
24761: LD_INT 1
24763: ARRAY
24764: PPUSH
24765: CALL_OW 120
// if a [ 2 ] then
24769: LD_VAR 0 4
24773: PUSH
24774: LD_INT 2
24776: ARRAY
24777: IFFALSE 24797
// AddComChangeProfession ( un , a [ 3 ] ) ;
24779: LD_VAR 0 1
24783: PPUSH
24784: LD_VAR 0 4
24788: PUSH
24789: LD_INT 3
24791: ARRAY
24792: PPUSH
24793: CALL_OW 183
// end ;
24797: LD_VAR 0 3
24801: RET
// function posli_unit2 ( un , cz ) ; var a ; begin
24802: LD_INT 0
24804: PPUSH
24805: PPUSH
// a = uklizejici_mista [ cz ] ;
24806: LD_ADDR_VAR 0 4
24810: PUSH
24811: LD_LOC 36
24815: PUSH
24816: LD_VAR 0 2
24820: ARRAY
24821: ST_TO_ADDR
// debug_strings = [ Vraci MD - zaznam,unit,cislo_zaznamu , a , un , cz ] ;
24822: LD_ADDR_OWVAR 48
24826: PUSH
24827: LD_STRING Vraci MD - zaznam,unit,cislo_zaznamu
24829: PUSH
24830: LD_VAR 0 4
24834: PUSH
24835: LD_VAR 0 1
24839: PUSH
24840: LD_VAR 0 2
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: ST_TO_ADDR
// ComMoveXY ( un , a [ 1 ] , a [ 2 ] ) ;
24851: LD_VAR 0 1
24855: PPUSH
24856: LD_VAR 0 4
24860: PUSH
24861: LD_INT 1
24863: ARRAY
24864: PPUSH
24865: LD_VAR 0 4
24869: PUSH
24870: LD_INT 2
24872: ARRAY
24873: PPUSH
24874: CALL_OW 111
// end ;
24878: LD_VAR 0 3
24882: RET
// on McDone ( makro , stat ) do begin case makro of 1 :
24883: LD_VAR 0 1
24887: PUSH
24888: LD_INT 1
24890: DOUBLE
24891: EQUAL
24892: IFTRUE 24896
24894: GO 24906
24896: POP
// zabijeni_1_baze ( 1 ) ; 2 :
24897: LD_INT 1
24899: PPUSH
24900: CALL 24929 0 1
24904: GO 24925
24906: LD_INT 2
24908: DOUBLE
24909: EQUAL
24910: IFTRUE 24914
24912: GO 24924
24914: POP
// zabijeni_1_baze ( 2 ) ; end ;
24915: LD_INT 2
24917: PPUSH
24918: CALL 24929 0 1
24922: GO 24925
24924: POP
// enable ;
24925: ENABLE
// end ;
24926: PPOPN 2
24928: END
// function zabijeni_1_baze ( jj ) ; var pom , i ; var jedn ; begin
24929: LD_INT 0
24931: PPUSH
24932: PPUSH
24933: PPUSH
24934: PPUSH
// case jj of 1 :
24935: LD_VAR 0 1
24939: PUSH
24940: LD_INT 1
24942: DOUBLE
24943: EQUAL
24944: IFTRUE 24948
24946: GO 24961
24948: POP
// jedn = Ar_utok3_LIST ; 2 :
24949: LD_ADDR_VAR 0 5
24953: PUSH
24954: LD_EXP 15
24958: ST_TO_ADDR
24959: GO 24983
24961: LD_INT 2
24963: DOUBLE
24964: EQUAL
24965: IFTRUE 24969
24967: GO 24982
24969: POP
// jedn = Ar_utok2_LIST ; end ;
24970: LD_ADDR_VAR 0 5
24974: PUSH
24975: LD_EXP 14
24979: ST_TO_ADDR
24980: GO 24983
24982: POP
// for i in jedn do
24983: LD_ADDR_VAR 0 4
24987: PUSH
24988: LD_VAR 0 5
24992: PUSH
24993: FOR_IN
24994: IFFALSE 25034
// if GetClass ( i ) = class_engineer then
24996: LD_VAR 0 4
25000: PPUSH
25001: CALL_OW 257
25005: PUSH
25006: LD_INT 2
25008: EQUAL
25009: IFFALSE 25032
// if IsOK ( A1_dep ) then
25011: LD_INT 4
25013: PPUSH
25014: CALL_OW 302
25018: IFFALSE 25032
// ComEnterUnit ( i , A1_dep ) ;
25020: LD_VAR 0 4
25024: PPUSH
25025: LD_INT 4
25027: PPUSH
25028: CALL_OW 120
25032: GO 24993
25034: POP
25035: POP
// pom = FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) ;
25036: LD_ADDR_VAR 0 3
25040: PUSH
25041: LD_INT 3
25043: PPUSH
25044: LD_INT 22
25046: PUSH
25047: LD_EXP 1
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: EMPTY
25057: LIST
25058: PPUSH
25059: CALL_OW 70
25063: ST_TO_ADDR
// for i in pom do
25064: LD_ADDR_VAR 0 4
25068: PUSH
25069: LD_VAR 0 3
25073: PUSH
25074: FOR_IN
25075: IFFALSE 25093
// PriorityAttack ( Arabi , i ) ;
25077: LD_EXP 3
25081: PPUSH
25082: LD_VAR 0 4
25086: PPUSH
25087: CALL_OW 470
25091: GO 25074
25093: POP
25094: POP
// enable ( 995 ) ;
25095: LD_INT 995
25097: ENABLE_MARKED
// end ;
25098: LD_VAR 0 2
25102: RET
// every 0 0$1 marked 995 do var pom , pom1 ; var i ; var pomat ;
25103: GO 25105
25105: DISABLE
25106: LD_INT 0
25108: PPUSH
25109: PPUSH
25110: PPUSH
25111: PPUSH
// begin pom = FilterUnitsInArea ( Abase1 , [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_ready ] ] ] ] ) ;
25112: LD_ADDR_VAR 0 1
25116: PUSH
25117: LD_INT 3
25119: PPUSH
25120: LD_INT 22
25122: PUSH
25123: LD_EXP 1
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 2
25134: PUSH
25135: LD_INT 21
25137: PUSH
25138: LD_INT 1
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 21
25147: PUSH
25148: LD_INT 2
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 53
25157: PUSH
25158: EMPTY
25159: LIST
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: LIST
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PPUSH
25174: CALL_OW 70
25178: ST_TO_ADDR
// pom1 = FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) ;
25179: LD_ADDR_VAR 0 2
25183: PUSH
25184: LD_INT 3
25186: PPUSH
25187: LD_INT 22
25189: PUSH
25190: LD_EXP 1
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: EMPTY
25200: LIST
25201: PPUSH
25202: CALL_OW 70
25206: ST_TO_ADDR
// pomat = pom1 diff pom ;
25207: LD_ADDR_VAR 0 4
25211: PUSH
25212: LD_VAR 0 2
25216: PUSH
25217: LD_VAR 0 1
25221: DIFF
25222: ST_TO_ADDR
// if pomat = 0 then
25223: LD_VAR 0 4
25227: PUSH
25228: LD_INT 0
25230: EQUAL
25231: IFFALSE 25266
// for i in pom1 do
25233: LD_ADDR_VAR 0 3
25237: PUSH
25238: LD_VAR 0 2
25242: PUSH
25243: FOR_IN
25244: IFFALSE 25262
// PriorityAttack ( Arabi , i ) else
25246: LD_EXP 3
25250: PPUSH
25251: LD_VAR 0 3
25255: PPUSH
25256: CALL_OW 470
25260: GO 25243
25262: POP
25263: POP
25264: GO 25328
// begin for i in pom do
25266: LD_ADDR_VAR 0 3
25270: PUSH
25271: LD_VAR 0 1
25275: PUSH
25276: FOR_IN
25277: IFFALSE 25295
// PriorityAttack ( Arabi , i ) ;
25279: LD_EXP 3
25283: PPUSH
25284: LD_VAR 0 3
25288: PPUSH
25289: CALL_OW 470
25293: GO 25276
25295: POP
25296: POP
// for i in pomat do
25297: LD_ADDR_VAR 0 3
25301: PUSH
25302: LD_VAR 0 4
25306: PUSH
25307: FOR_IN
25308: IFFALSE 25326
// NormalAttack ( Arabi , i ) ;
25310: LD_EXP 3
25314: PPUSH
25315: LD_VAR 0 3
25319: PPUSH
25320: CALL_OW 472
25324: GO 25307
25326: POP
25327: POP
// end ; if pom <> 0 and FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) <> 0 then
25328: LD_VAR 0 1
25332: PUSH
25333: LD_INT 0
25335: NONEQUAL
25336: PUSH
25337: LD_INT 3
25339: PPUSH
25340: LD_INT 22
25342: PUSH
25343: LD_EXP 1
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: EMPTY
25353: LIST
25354: PPUSH
25355: CALL_OW 70
25359: PUSH
25360: LD_INT 0
25362: NONEQUAL
25363: AND
25364: IFFALSE 25367
// enable ;
25366: ENABLE
// end ; end_of_file
25367: PPOPN 4
25369: END
// export protiutok1 ; export Ar_levely ; export timelimit ; export max_bedny ; export lidi_other ; export zivoty_prvni_baze ; export utok_2_doba ; export last_attack_wait ; export medaile1 ; export medaile2 ; export Timecounter ; export function SET_DIFFICULTY ; var pom ; begin
25370: LD_INT 0
25372: PPUSH
25373: PPUSH
// protiutok1 = [ 10 10$0 , 7 7$30 , 5 5$30 ] ;
25374: LD_ADDR_EXP 48
25378: PUSH
25379: LD_INT 21000
25381: PUSH
25382: LD_INT 15750
25384: PUSH
25385: LD_INT 11550
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: LIST
25392: ST_TO_ADDR
// utok_2_doba = [ 10 10$0 , 8 8$0 , 6 6$0 ] ;
25393: LD_ADDR_EXP 54
25397: PUSH
25398: LD_INT 21000
25400: PUSH
25401: LD_INT 16800
25403: PUSH
25404: LD_INT 12600
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: LIST
25411: ST_TO_ADDR
// Ar_levely = [ 4 , 6 , 8 ] ;
25412: LD_ADDR_EXP 49
25416: PUSH
25417: LD_INT 4
25419: PUSH
25420: LD_INT 6
25422: PUSH
25423: LD_INT 8
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: LIST
25430: ST_TO_ADDR
// timelimit = [ 160 160$0 , 150 150$0 , 140 140$0 ] ;
25431: LD_ADDR_EXP 50
25435: PUSH
25436: LD_INT 336000
25438: PUSH
25439: LD_INT 315000
25441: PUSH
25442: LD_INT 294000
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: LIST
25449: ST_TO_ADDR
// medaile1 = [ 120 , 100 , 90 ] ;
25450: LD_ADDR_EXP 56
25454: PUSH
25455: LD_INT 120
25457: PUSH
25458: LD_INT 100
25460: PUSH
25461: LD_INT 90
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: LIST
25468: ST_TO_ADDR
// medaile2 = [ 100 , 90 , 80 ] ;
25469: LD_ADDR_EXP 57
25473: PUSH
25474: LD_INT 100
25476: PUSH
25477: LD_INT 90
25479: PUSH
25480: LD_INT 80
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: LIST
25487: ST_TO_ADDR
// max_bedny = [ 55 , 40 , 30 ] ;
25488: LD_ADDR_EXP 51
25492: PUSH
25493: LD_INT 55
25495: PUSH
25496: LD_INT 40
25498: PUSH
25499: LD_INT 30
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: LIST
25506: ST_TO_ADDR
// zivoty_prvni_baze = [ 700 , 850 , 1000 ] ;
25507: LD_ADDR_EXP 53
25511: PUSH
25512: LD_INT 700
25514: PUSH
25515: LD_INT 850
25517: PUSH
25518: LD_INT 1000
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: LIST
25525: ST_TO_ADDR
// last_attack_wait = [ 10 10$0 , 8 8$0 , 5 5$0 ] ;
25526: LD_ADDR_EXP 55
25530: PUSH
25531: LD_INT 21000
25533: PUSH
25534: LD_INT 16800
25536: PUSH
25537: LD_INT 10500
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: LIST
25544: ST_TO_ADDR
// Timecounter = 0 ;
25545: LD_ADDR_EXP 58
25549: PUSH
25550: LD_INT 0
25552: ST_TO_ADDR
// end ;
25553: LD_VAR 0 1
25557: RET
// export cas ; every 0 0$10 do var pom ;
25558: GO 25560
25560: DISABLE
25561: LD_INT 0
25563: PPUSH
// begin if cas [ 3 ] + 10 = 60 then
25564: LD_EXP 59
25568: PUSH
25569: LD_INT 3
25571: ARRAY
25572: PUSH
25573: LD_INT 10
25575: PLUS
25576: PUSH
25577: LD_INT 60
25579: EQUAL
25580: IFFALSE 25616
// cas = cas [ 1 ] + 1 ^ cas [ 2 ] ^ 0 else
25582: LD_ADDR_EXP 59
25586: PUSH
25587: LD_EXP 59
25591: PUSH
25592: LD_INT 1
25594: ARRAY
25595: PUSH
25596: LD_INT 1
25598: PLUS
25599: PUSH
25600: LD_EXP 59
25604: PUSH
25605: LD_INT 2
25607: ARRAY
25608: ADD
25609: PUSH
25610: LD_INT 0
25612: ADD
25613: ST_TO_ADDR
25614: GO 25654
// cas = cas [ 1 ] ^ cas [ 2 ] ^ cas [ 3 ] + 10 ;
25616: LD_ADDR_EXP 59
25620: PUSH
25621: LD_EXP 59
25625: PUSH
25626: LD_INT 1
25628: ARRAY
25629: PUSH
25630: LD_EXP 59
25634: PUSH
25635: LD_INT 2
25637: ARRAY
25638: ADD
25639: PUSH
25640: LD_EXP 59
25644: PUSH
25645: LD_INT 3
25647: ARRAY
25648: PUSH
25649: LD_INT 10
25651: PLUS
25652: ADD
25653: ST_TO_ADDR
// debug_strings = [ cas ] ;
25654: LD_ADDR_OWVAR 48
25658: PUSH
25659: LD_EXP 59
25663: PUSH
25664: EMPTY
25665: LIST
25666: ST_TO_ADDR
// enable ;
25667: ENABLE
// end ;
25668: PPOPN 1
25670: END
// every 1 1$0 do
25671: GO 25673
25673: DISABLE
// begin Timecounter = Timecounter + 1 ;
25674: LD_ADDR_EXP 58
25678: PUSH
25679: LD_EXP 58
25683: PUSH
25684: LD_INT 1
25686: PLUS
25687: ST_TO_ADDR
// enable ;
25688: ENABLE
// end ; end_of_file
25689: END
// every 0 0$2 + 0 0$0.1 do
25690: GO 25692
25692: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) > FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) then
25693: LD_INT 22
25695: PUSH
25696: LD_INT 1
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 2
25705: PUSH
25706: LD_INT 25
25708: PUSH
25709: LD_INT 12
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 25
25718: PUSH
25719: LD_INT 16
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 25
25728: PUSH
25729: LD_INT 15
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 25
25738: PUSH
25739: LD_INT 17
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PPUSH
25757: CALL_OW 69
25761: PUSH
25762: LD_INT 22
25764: PUSH
25765: LD_INT 1
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 21
25774: PUSH
25775: LD_INT 1
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 3
25784: PUSH
25785: LD_INT 2
25787: PUSH
25788: LD_INT 25
25790: PUSH
25791: LD_INT 12
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 25
25800: PUSH
25801: LD_INT 16
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 25
25810: PUSH
25811: LD_INT 15
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 25
25820: PUSH
25821: LD_INT 17
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: LIST
25843: PPUSH
25844: CALL_OW 69
25848: GREATER
25849: IFFALSE 25860
// begin SetAchievement ( ACH_POTA ) ;
25851: LD_STRING ACH_POTA
25853: PPUSH
25854: CALL_OW 543
// exit ;
25858: GO 25861
// end ; enable ;
25860: ENABLE
// end ; end_of_file
25861: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
25862: LD_INT 0
25864: PPUSH
25865: PPUSH
// if not missionNumber then
25866: LD_VAR 0 2
25870: NOT
25871: IFFALSE 25875
// exit ;
25873: GO 26005
// achiv := false ;
25875: LD_ADDR_VAR 0 7
25879: PUSH
25880: LD_INT 0
25882: ST_TO_ADDR
// case campaignNumber of 1 :
25883: LD_VAR 0 1
25887: PUSH
25888: LD_INT 1
25890: DOUBLE
25891: EQUAL
25892: IFTRUE 25896
25894: GO 25907
25896: POP
// achiv := ACH_GOTA ; 2 :
25897: LD_ADDR_VAR 0 7
25901: PUSH
25902: LD_STRING ACH_GOTA
25904: ST_TO_ADDR
25905: GO 25957
25907: LD_INT 2
25909: DOUBLE
25910: EQUAL
25911: IFTRUE 25915
25913: GO 25918
25915: POP
// ; 3 :
25916: GO 25957
25918: LD_INT 3
25920: DOUBLE
25921: EQUAL
25922: IFTRUE 25926
25924: GO 25937
25926: POP
// achiv := ACH_MOTSU ; 4 :
25927: LD_ADDR_VAR 0 7
25931: PUSH
25932: LD_STRING ACH_MOTSU
25934: ST_TO_ADDR
25935: GO 25957
25937: LD_INT 4
25939: DOUBLE
25940: EQUAL
25941: IFTRUE 25945
25943: GO 25956
25945: POP
// achiv := ACH_LOP ; end ;
25946: LD_ADDR_VAR 0 7
25950: PUSH
25951: LD_STRING ACH_LOP
25953: ST_TO_ADDR
25954: GO 25957
25956: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
25957: LD_OWVAR 67
25961: PUSH
25962: LD_INT 3
25964: EQUAL
25965: PUSH
25966: LD_VAR 0 7
25970: AND
25971: PUSH
25972: LD_VAR 0 3
25976: AND
25977: PUSH
25978: LD_VAR 0 4
25982: AND
25983: PUSH
25984: LD_VAR 0 5
25988: AND
25989: IFFALSE 26005
// SetAchievementEX ( achiv , missionNumber ) ;
25991: LD_VAR 0 7
25995: PPUSH
25996: LD_VAR 0 2
26000: PPUSH
26001: CALL_OW 564
// end ;
26005: LD_VAR 0 6
26009: RET
// export function SA_BehemothConstructed ; begin
26010: LD_INT 0
26012: PPUSH
// SetAchievement ( ACH_SMC ) ;
26013: LD_STRING ACH_SMC
26015: PPUSH
26016: CALL_OW 543
// end ;
26020: LD_VAR 0 1
26024: RET
