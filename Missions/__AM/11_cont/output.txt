// export You , You2 , Arabi , Arabi2 ; export mregistry1 , MD1 ; export mregistry2 , MD2 ; export mission_ended ; starting begin RandomizeAll ;
   0: CALL_OW 11
// Randomize ;
   4: CALL_OW 10
// debug_strings := [ ] ;
   8: LD_ADDR_OWVAR 48
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// cas = [ 0 , : , 0 ] ;
  15: LD_ADDR_EXP 59
  19: PUSH
  20: LD_INT 0
  22: PUSH
  23: LD_STRING :
  25: PUSH
  26: LD_INT 0
  28: PUSH
  29: EMPTY
  30: LIST
  31: LIST
  32: LIST
  33: ST_TO_ADDR
// InitUc ;
  34: CALL_OW 18
// InitHc ;
  38: CALL_OW 19
// InitVc ;
  42: CALL_OW 20
// mission_ended := false ;
  46: LD_ADDR_EXP 9
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// You := 1 ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_INT 1
  61: ST_TO_ADDR
// You2 := 4 ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 4
  69: ST_TO_ADDR
// Arabi := 2 ;
  70: LD_ADDR_EXP 3
  74: PUSH
  75: LD_INT 2
  77: ST_TO_ADDR
// Arabi2 := 5 ;
  78: LD_ADDR_EXP 4
  82: PUSH
  83: LD_INT 5
  85: ST_TO_ADDR
// SetBName ( A1_dep , dammam ) ;
  86: LD_INT 4
  88: PPUSH
  89: LD_STRING dammam
  91: PPUSH
  92: CALL_OW 500
// SetBName ( A2_dep , jeddah ) ;
  96: LD_INT 46
  98: PPUSH
  99: LD_STRING jeddah
 101: PPUSH
 102: CALL_OW 500
// SetBName ( A3_dep , riyadh ) ;
 106: LD_INT 28
 108: PPUSH
 109: LD_STRING riyadh
 111: PPUSH
 112: CALL_OW 500
// disable ( 80 ) ;
 116: LD_INT 80
 118: DISABLE_MARKED
// SET_DIFFICULTY ;
 119: CALL 25363 0 0
// load_postavy ;
 123: CALL 1824 0 0
// dodej_skily ;
 127: CALL 8722 0 0
// mregistry1 = McRegistry ( Arabi , [ [ mc_reg_area_to_guard , MD1_guard ] , [ mc_reg_area_to_protect , MD1_protect ] , [ mc_reg_expire_stops_to_attack , 0 0$5 ] ] ) ;
 131: LD_ADDR_EXP 5
 135: PUSH
 136: LD_EXP 3
 140: PPUSH
 141: LD_INT 2
 143: PUSH
 144: LD_INT 27
 146: PUSH
 147: EMPTY
 148: LIST
 149: LIST
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 28
 156: PUSH
 157: EMPTY
 158: LIST
 159: LIST
 160: PUSH
 161: LD_INT 5
 163: PUSH
 164: LD_INT 175
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: LIST
 175: PPUSH
 176: CALL_OW 399
 180: ST_TO_ADDR
// mregistry2 = McRegistry ( Arabi , [ [ mc_reg_area_to_guard , MD2_guard ] , [ mc_reg_area_to_protect , MD2_protect ] , [ mc_reg_expire_stops_to_attack , 0 0$5 ] ] ) ;
 181: LD_ADDR_EXP 7
 185: PUSH
 186: LD_EXP 3
 190: PPUSH
 191: LD_INT 2
 193: PUSH
 194: LD_INT 32
 196: PUSH
 197: EMPTY
 198: LIST
 199: LIST
 200: PUSH
 201: LD_INT 3
 203: PUSH
 204: LD_INT 33
 206: PUSH
 207: EMPTY
 208: LIST
 209: LIST
 210: PUSH
 211: LD_INT 5
 213: PUSH
 214: LD_INT 175
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: LIST
 225: PPUSH
 226: CALL_OW 399
 230: ST_TO_ADDR
// MD1 = McDefend ( 2 , mregistry1 , [ A2_dep , A2_lab , A2_bar , A2_tov , A2_nau1 , A2_bu2 , A2_nau2 , MDopka1 , MDopka2 , A2_bu3 ] , [ [ mc_area_dont_leave , MD1_guard ] ] ) ;
 231: LD_ADDR_EXP 6
 235: PUSH
 236: LD_INT 2
 238: PPUSH
 239: LD_EXP 5
 243: PPUSH
 244: LD_INT 46
 246: PUSH
 247: LD_INT 61
 249: PUSH
 250: LD_INT 48
 252: PUSH
 253: LD_INT 50
 255: PUSH
 256: LD_INT 107
 258: PUSH
 259: LD_INT 63
 261: PUSH
 262: LD_INT 108
 264: PUSH
 265: LD_INT 117
 267: PUSH
 268: LD_INT 116
 270: PUSH
 271: LD_INT 47
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: PPUSH
 286: LD_INT 2
 288: PUSH
 289: LD_INT 27
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: PPUSH
 299: CALL_OW 401
 303: ST_TO_ADDR
// MD1 = McDefend ( 1 , mregistry2 , [ A2_dep , A2_lab , A2_bar , A2_tov , A2_nau1 , A2_bu3 , A2_bu6 , A2_bu5 , A2_nau2 , MDopka1 , MDopka2 ] , [ [ mc_area_dont_leave , MD2_guard ] ] ) ;
 304: LD_ADDR_EXP 6
 308: PUSH
 309: LD_INT 1
 311: PPUSH
 312: LD_EXP 7
 316: PPUSH
 317: LD_INT 46
 319: PUSH
 320: LD_INT 61
 322: PUSH
 323: LD_INT 48
 325: PUSH
 326: LD_INT 50
 328: PUSH
 329: LD_INT 107
 331: PUSH
 332: LD_INT 47
 334: PUSH
 335: LD_INT 59
 337: PUSH
 338: LD_INT 62
 340: PUSH
 341: LD_INT 108
 343: PUSH
 344: LD_INT 117
 346: PUSH
 347: LD_INT 116
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: LIST
 354: LIST
 355: LIST
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: PPUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 32
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: PUSH
 373: EMPTY
 374: LIST
 375: PPUSH
 376: CALL_OW 401
 380: ST_TO_ADDR
// A1_dobyta = false ;
 381: LD_ADDR_EXP 28
 385: PUSH
 386: LD_INT 0
 388: ST_TO_ADDR
// A2_dobyta = false ;
 389: LD_ADDR_EXP 29
 393: PUSH
 394: LD_INT 0
 396: ST_TO_ADDR
// A3_dobyta = false ;
 397: LD_ADDR_EXP 30
 401: PUSH
 402: LD_INT 0
 404: ST_TO_ADDR
// vojcli_base_2 ;
 405: CALL 9287 0 0
// vojcli_base_3 ;
 409: CALL 9985 0 0
// InGameOn ;
 413: CALL_OW 8
// Odebirani = false ;
 417: LD_ADDR_EXP 45
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// Pruzkumnik := false ;
 425: LD_ADDR_EXP 31
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// oposoldier := 0 ;
 433: LD_ADDR_EXP 46
 437: PUSH
 438: LD_INT 0
 440: ST_TO_ADDR
// choose_vojaky ;
 441: CALL 11264 0 0
// create_amici ;
 445: CALL 8129 0 0
// uklid_arabu ;
 449: CALL 17532 0 0
// create_ar_protiofenzivu ;
 453: CALL 8258 0 0
// create_arabske_utoky_behem_mise ;
 457: CALL 12667 0 0
// end ;
 461: END
// export function end_of_mission_time ; begin
 462: LD_INT 0
 464: PPUSH
// YouLost ( Command ) ;
 465: LD_STRING Command
 467: PPUSH
 468: CALL_OW 104
// end ;
 472: LD_VAR 0 1
 476: RET
// on UnitDestroyed ( un ) do begin if un = JMM then
 477: LD_VAR 0 1
 481: PUSH
 482: LD_EXP 32
 486: EQUAL
 487: IFFALSE 496
// YouLost ( JMM ) ;
 489: LD_STRING JMM
 491: PPUSH
 492: CALL_OW 104
// enable ;
 496: ENABLE
// end ;
 497: PPOPN 1
 499: END
// on EndTheMissionRaised ( void ) do begin konec_mise ;
 500: CALL 669 0 0
// end ;
 504: PPOPN 1
 506: END
// every 0 0$2 trigger not mission_ended and FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 do var i , cargos ;
 507: LD_EXP 9
 511: NOT
 512: PUSH
 513: LD_INT 22
 515: PUSH
 516: LD_INT 2
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: LD_INT 30
 528: PUSH
 529: LD_INT 0
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PUSH
 536: LD_INT 30
 538: PUSH
 539: LD_INT 1
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: LIST
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PPUSH
 555: CALL_OW 69
 559: PUSH
 560: LD_INT 0
 562: EQUAL
 563: AND
 564: IFFALSE 666
 566: GO 568
 568: DISABLE
 569: LD_INT 0
 571: PPUSH
 572: PPUSH
// begin enable ;
 573: ENABLE
// cargos := FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
 574: LD_ADDR_VAR 0 2
 578: PUSH
 579: LD_INT 22
 581: PUSH
 582: LD_EXP 1
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PUSH
 591: LD_INT 2
 593: PUSH
 594: LD_INT 34
 596: PUSH
 597: LD_INT 12
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: PUSH
 604: LD_INT 34
 606: PUSH
 607: LD_INT 32
 609: PUSH
 610: EMPTY
 611: LIST
 612: LIST
 613: PUSH
 614: EMPTY
 615: LIST
 616: LIST
 617: LIST
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: PPUSH
 623: CALL_OW 69
 627: ST_TO_ADDR
// for i in cargos do
 628: LD_ADDR_VAR 0 1
 632: PUSH
 633: LD_VAR 0 2
 637: PUSH
 638: FOR_IN
 639: IFFALSE 664
// if GetCargo ( i , mat_artefact ) then
 641: LD_VAR 0 1
 645: PPUSH
 646: LD_INT 4
 648: PPUSH
 649: CALL_OW 289
 653: IFFALSE 662
// begin konec_mise ;
 655: CALL 669 0 0
// disable ;
 659: DISABLE
// break ;
 660: GO 664
// end ;
 662: GO 638
 664: POP
 665: POP
// end ;
 666: PPOPN 2
 668: END
// export function konec_mise ; var pommedaile ; var pomauta ; var i , pom , pom1 , pom2 ; var art ; var VIPka ; var all_units_1 , medal1 , medal2 , medal3 ; begin
 669: LD_INT 0
 671: PPUSH
 672: PPUSH
 673: PPUSH
 674: PPUSH
 675: PPUSH
 676: PPUSH
 677: PPUSH
 678: PPUSH
 679: PPUSH
 680: PPUSH
 681: PPUSH
 682: PPUSH
 683: PPUSH
// if mission_ended then
 684: LD_EXP 9
 688: IFFALSE 692
// exit ;
 690: GO 1819
// medal1 := false ;
 692: LD_ADDR_VAR 0 11
 696: PUSH
 697: LD_INT 0
 699: ST_TO_ADDR
// medal2 := false ;
 700: LD_ADDR_VAR 0 12
 704: PUSH
 705: LD_INT 0
 707: ST_TO_ADDR
// medal3 := false ;
 708: LD_ADDR_VAR 0 13
 712: PUSH
 713: LD_INT 0
 715: ST_TO_ADDR
// mission_ended := true ;
 716: LD_ADDR_EXP 9
 720: PUSH
 721: LD_INT 1
 723: ST_TO_ADDR
// DisableExclamations ;
 724: CALL_OW 474
// gained_medals := [ ] ;
 728: LD_ADDR_OWVAR 61
 732: PUSH
 733: EMPTY
 734: ST_TO_ADDR
// missing_medals := [ ] ;
 735: LD_ADDR_OWVAR 62
 739: PUSH
 740: EMPTY
 741: ST_TO_ADDR
// if Timecounter <= medaile1 [ difficulty ] then
 742: LD_EXP 58
 746: PUSH
 747: LD_EXP 56
 751: PUSH
 752: LD_OWVAR 67
 756: ARRAY
 757: LESSEQUAL
 758: IFFALSE 788
// begin AddMedal ( Time1 , 1 ) ;
 760: LD_STRING Time1
 762: PPUSH
 763: LD_INT 1
 765: PPUSH
 766: CALL_OW 101
// pommedaile = true ;
 770: LD_ADDR_VAR 0 2
 774: PUSH
 775: LD_INT 1
 777: ST_TO_ADDR
// medal1 := true ;
 778: LD_ADDR_VAR 0 11
 782: PUSH
 783: LD_INT 1
 785: ST_TO_ADDR
// end else
 786: GO 807
// begin AddMedal ( Time1 , - 1 ) ;
 788: LD_STRING Time1
 790: PPUSH
 791: LD_INT 1
 793: NEG
 794: PPUSH
 795: CALL_OW 101
// pommedaile = false ;
 799: LD_ADDR_VAR 0 2
 803: PUSH
 804: LD_INT 0
 806: ST_TO_ADDR
// end ; if Timecounter <= medaile2 [ difficulty ] then
 807: LD_EXP 58
 811: PUSH
 812: LD_EXP 57
 816: PUSH
 817: LD_OWVAR 67
 821: ARRAY
 822: LESSEQUAL
 823: IFFALSE 845
// begin AddMedal ( Time2 , 1 ) ;
 825: LD_STRING Time2
 827: PPUSH
 828: LD_INT 1
 830: PPUSH
 831: CALL_OW 101
// medal2 := true ;
 835: LD_ADDR_VAR 0 12
 839: PUSH
 840: LD_INT 1
 842: ST_TO_ADDR
// end else
 843: GO 875
// if pommedaile then
 845: LD_VAR 0 2
 849: IFFALSE 864
// AddMedal ( Time2 , - 1 ) else
 851: LD_STRING Time2
 853: PPUSH
 854: LD_INT 1
 856: NEG
 857: PPUSH
 858: CALL_OW 101
 862: GO 875
// AddMedal ( Time2 , - 2 ) ;
 864: LD_STRING Time2
 866: PPUSH
 867: LD_INT 2
 869: NEG
 870: PPUSH
 871: CALL_OW 101
// pomauta = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
 875: LD_ADDR_VAR 0 3
 879: PUSH
 880: LD_INT 22
 882: PUSH
 883: LD_EXP 1
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: PUSH
 892: LD_INT 2
 894: PUSH
 895: LD_INT 34
 897: PUSH
 898: LD_INT 12
 900: PUSH
 901: EMPTY
 902: LIST
 903: LIST
 904: PUSH
 905: LD_INT 34
 907: PUSH
 908: LD_INT 32
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: LIST
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PPUSH
 924: CALL_OW 69
 928: ST_TO_ADDR
// art = false ;
 929: LD_ADDR_VAR 0 8
 933: PUSH
 934: LD_INT 0
 936: ST_TO_ADDR
// for i in pomauta do
 937: LD_ADDR_VAR 0 4
 941: PUSH
 942: LD_VAR 0 3
 946: PUSH
 947: FOR_IN
 948: IFFALSE 978
// if GetCargo ( i , mat_artefact ) > 0 then
 950: LD_VAR 0 4
 954: PPUSH
 955: LD_INT 4
 957: PPUSH
 958: CALL_OW 289
 962: PUSH
 963: LD_INT 0
 965: GREATER
 966: IFFALSE 976
// art = true ;
 968: LD_ADDR_VAR 0 8
 972: PUSH
 973: LD_INT 1
 975: ST_TO_ADDR
 976: GO 947
 978: POP
 979: POP
// if art then
 980: LD_VAR 0 8
 984: IFFALSE 1006
// begin medal3 := true ;
 986: LD_ADDR_VAR 0 13
 990: PUSH
 991: LD_INT 1
 993: ST_TO_ADDR
// AddMedal ( Artefact , 1 ) ;
 994: LD_STRING Artefact
 996: PPUSH
 997: LD_INT 1
 999: PPUSH
1000: CALL_OW 101
// end else
1004: GO 1017
// AddMedal ( Artefact , - 1 ) ;
1006: LD_STRING Artefact
1008: PPUSH
1009: LD_INT 1
1011: NEG
1012: PPUSH
1013: CALL_OW 101
// SA_EndMission ( 1 , 11 , medal1 , medal2 , medal3 ) ;
1017: LD_INT 1
1019: PPUSH
1020: LD_INT 11
1022: PPUSH
1023: LD_VAR 0 11
1027: PPUSH
1028: LD_VAR 0 12
1032: PPUSH
1033: LD_VAR 0 13
1037: PPUSH
1038: CALL 25855 0 5
// GiveMedals ( Main ) ;
1042: LD_STRING Main
1044: PPUSH
1045: CALL_OW 102
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
1049: LD_ADDR_VAR 0 5
1053: PUSH
1054: LD_INT 22
1056: PUSH
1057: LD_EXP 1
1061: PUSH
1062: EMPTY
1063: LIST
1064: LIST
1065: PUSH
1066: LD_INT 21
1068: PUSH
1069: LD_INT 1
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: PPUSH
1080: CALL_OW 69
1084: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] ] ) do
1085: LD_ADDR_VAR 0 4
1089: PUSH
1090: LD_INT 22
1092: PUSH
1093: LD_EXP 1
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: PUSH
1102: LD_INT 21
1104: PUSH
1105: LD_INT 2
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PPUSH
1116: CALL_OW 69
1120: PUSH
1121: FOR_IN
1122: IFFALSE 1170
// begin pom1 = IsDrivenBy ( i ) ;
1124: LD_ADDR_VAR 0 6
1128: PUSH
1129: LD_VAR 0 4
1133: PPUSH
1134: CALL_OW 311
1138: ST_TO_ADDR
// if not ( pom1 in pom ) then
1139: LD_VAR 0 6
1143: PUSH
1144: LD_VAR 0 5
1148: IN
1149: NOT
1150: IFFALSE 1168
// pom = pom ^ pom1 ;
1152: LD_ADDR_VAR 0 5
1156: PUSH
1157: LD_VAR 0 5
1161: PUSH
1162: LD_VAR 0 6
1166: ADD
1167: ST_TO_ADDR
// end ;
1168: GO 1121
1170: POP
1171: POP
// all_units_1 = pom ;
1172: LD_ADDR_VAR 0 10
1176: PUSH
1177: LD_VAR 0 5
1181: ST_TO_ADDR
// all_units_1 = all_units_1 diff UnitFilter ( all_units_1 , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) ;
1182: LD_ADDR_VAR 0 10
1186: PUSH
1187: LD_VAR 0 10
1191: PUSH
1192: LD_VAR 0 10
1196: PPUSH
1197: LD_INT 2
1199: PUSH
1200: LD_INT 25
1202: PUSH
1203: LD_INT 12
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: PUSH
1210: LD_INT 25
1212: PUSH
1213: LD_INT 16
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 72
1229: DIFF
1230: ST_TO_ADDR
// RewardPeople ( all_units_1 ) ;
1231: LD_VAR 0 10
1235: PPUSH
1236: CALL_OW 43
// VIPka = [ JMM , Frank , Powell , Gary , Bobby , Yamoko , Cyrus , Cornel , Lisa , Don , Brown ] ;
1240: LD_ADDR_VAR 0 9
1244: PUSH
1245: LD_EXP 32
1249: PUSH
1250: LD_EXP 36
1254: PUSH
1255: LD_EXP 33
1259: PUSH
1260: LD_EXP 34
1264: PUSH
1265: LD_EXP 35
1269: PUSH
1270: LD_EXP 39
1274: PUSH
1275: LD_EXP 40
1279: PUSH
1280: LD_EXP 38
1284: PUSH
1285: LD_EXP 37
1289: PUSH
1290: LD_EXP 41
1294: PUSH
1295: LD_EXP 42
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: ST_TO_ADDR
// SaveCharacters ( JMM , JMM ) ;
1313: LD_EXP 32
1317: PPUSH
1318: LD_STRING JMM
1320: PPUSH
1321: CALL_OW 38
// SaveCharacters ( Cyrus , Cyrus ) ;
1325: LD_EXP 40
1329: PPUSH
1330: LD_STRING Cyrus
1332: PPUSH
1333: CALL_OW 38
// if Cyrus in Amici_enter then
1337: LD_EXP 40
1341: PUSH
1342: LD_EXP 43
1346: IN
1347: IFFALSE 1361
// SaveVariable ( 6 , CyrusLoc ) else
1349: LD_INT 6
1351: PPUSH
1352: LD_STRING CyrusLoc
1354: PPUSH
1355: CALL_OW 39
1359: GO 1371
// SaveVariable ( 7 , CyrusLoc ) ;
1361: LD_INT 7
1363: PPUSH
1364: LD_STRING CyrusLoc
1366: PPUSH
1367: CALL_OW 39
// SaveCharacters ( Gary , Gary ) ;
1371: LD_EXP 34
1375: PPUSH
1376: LD_STRING Gary
1378: PPUSH
1379: CALL_OW 38
// if Gary in Amici_enter then
1383: LD_EXP 34
1387: PUSH
1388: LD_EXP 43
1392: IN
1393: IFFALSE 1407
// SaveVariable ( 6 , GaryLoc ) else
1395: LD_INT 6
1397: PPUSH
1398: LD_STRING GaryLoc
1400: PPUSH
1401: CALL_OW 39
1405: GO 1417
// SaveVariable ( 7 , GaryLoc ) ;
1407: LD_INT 7
1409: PPUSH
1410: LD_STRING GaryLoc
1412: PPUSH
1413: CALL_OW 39
// SaveCharacters ( Cornel , Cornell ) ;
1417: LD_EXP 38
1421: PPUSH
1422: LD_STRING Cornell
1424: PPUSH
1425: CALL_OW 38
// if Cornel in Amici_enter then
1429: LD_EXP 38
1433: PUSH
1434: LD_EXP 43
1438: IN
1439: IFFALSE 1453
// SaveVariable ( 6 , CornellLoc ) else
1441: LD_INT 6
1443: PPUSH
1444: LD_STRING CornellLoc
1446: PPUSH
1447: CALL_OW 39
1451: GO 1463
// SaveVariable ( 7 , CornellLoc ) ;
1453: LD_INT 7
1455: PPUSH
1456: LD_STRING CornellLoc
1458: PPUSH
1459: CALL_OW 39
// SaveCharacters ( Frank , Frank ) ;
1463: LD_EXP 36
1467: PPUSH
1468: LD_STRING Frank
1470: PPUSH
1471: CALL_OW 38
// if Frank in Amici_enter then
1475: LD_EXP 36
1479: PUSH
1480: LD_EXP 43
1484: IN
1485: IFFALSE 1499
// SaveVariable ( 6 , FrankLoc ) else
1487: LD_INT 6
1489: PPUSH
1490: LD_STRING FrankLoc
1492: PPUSH
1493: CALL_OW 39
1497: GO 1509
// SaveVariable ( 7 , FrankLoc ) ;
1499: LD_INT 7
1501: PPUSH
1502: LD_STRING FrankLoc
1504: PPUSH
1505: CALL_OW 39
// SaveCharacters ( Bobby , Bobby ) ;
1509: LD_EXP 35
1513: PPUSH
1514: LD_STRING Bobby
1516: PPUSH
1517: CALL_OW 38
// if Bobby in Amici_enter then
1521: LD_EXP 35
1525: PUSH
1526: LD_EXP 43
1530: IN
1531: IFFALSE 1545
// SaveVariable ( 6 , BobbyLoc ) else
1533: LD_INT 6
1535: PPUSH
1536: LD_STRING BobbyLoc
1538: PPUSH
1539: CALL_OW 39
1543: GO 1555
// SaveVariable ( 7 , BobbyLoc ) ;
1545: LD_INT 7
1547: PPUSH
1548: LD_STRING BobbyLoc
1550: PPUSH
1551: CALL_OW 39
// SaveCharacters ( Yamoko , Yamoko ) ;
1555: LD_EXP 39
1559: PPUSH
1560: LD_STRING Yamoko
1562: PPUSH
1563: CALL_OW 38
// if Yamoko in Amici_enter then
1567: LD_EXP 39
1571: PUSH
1572: LD_EXP 43
1576: IN
1577: IFFALSE 1591
// SaveVariable ( 6 , YamokoLoc ) else
1579: LD_INT 6
1581: PPUSH
1582: LD_STRING YamokoLoc
1584: PPUSH
1585: CALL_OW 39
1589: GO 1601
// SaveVariable ( 7 , YamokoLoc ) ;
1591: LD_INT 7
1593: PPUSH
1594: LD_STRING YamokoLoc
1596: PPUSH
1597: CALL_OW 39
// SaveCharacters ( Don , Donaldson ) ;
1601: LD_EXP 41
1605: PPUSH
1606: LD_STRING Donaldson
1608: PPUSH
1609: CALL_OW 38
// if Don in Amici_enter then
1613: LD_EXP 41
1617: PUSH
1618: LD_EXP 43
1622: IN
1623: IFFALSE 1637
// SaveVariable ( 6 , DonaldsonLoc ) else
1625: LD_INT 6
1627: PPUSH
1628: LD_STRING DonaldsonLoc
1630: PPUSH
1631: CALL_OW 39
1635: GO 1647
// SaveVariable ( 7 , DonaldsonLoc ) ;
1637: LD_INT 7
1639: PPUSH
1640: LD_STRING DonaldsonLoc
1642: PPUSH
1643: CALL_OW 39
// SaveCharacters ( Brown , Brown ) ;
1647: LD_EXP 42
1651: PPUSH
1652: LD_STRING Brown
1654: PPUSH
1655: CALL_OW 38
// if Brown in Amici_enter then
1659: LD_EXP 42
1663: PUSH
1664: LD_EXP 43
1668: IN
1669: IFFALSE 1683
// SaveVariable ( 6 , BrownLoc ) else
1671: LD_INT 6
1673: PPUSH
1674: LD_STRING BrownLoc
1676: PPUSH
1677: CALL_OW 39
1681: GO 1693
// SaveVariable ( 7 , BrownLoc ) ;
1683: LD_INT 7
1685: PPUSH
1686: LD_STRING BrownLoc
1688: PPUSH
1689: CALL_OW 39
// SaveCharacters ( Lisa , Lisa ) ;
1693: LD_EXP 37
1697: PPUSH
1698: LD_STRING Lisa
1700: PPUSH
1701: CALL_OW 38
// if Lisa in Amici_enter then
1705: LD_EXP 37
1709: PUSH
1710: LD_EXP 43
1714: IN
1715: IFFALSE 1729
// SaveVariable ( 6 , LisaLoc ) else
1717: LD_INT 6
1719: PPUSH
1720: LD_STRING LisaLoc
1722: PPUSH
1723: CALL_OW 39
1727: GO 1739
// SaveVariable ( 7 , LiasLoc ) ;
1729: LD_INT 7
1731: PPUSH
1732: LD_STRING LiasLoc
1734: PPUSH
1735: CALL_OW 39
// pom1 = lidi_other diff Amici_enter ;
1739: LD_ADDR_VAR 0 6
1743: PUSH
1744: LD_EXP 52
1748: PUSH
1749: LD_EXP 43
1753: DIFF
1754: ST_TO_ADDR
// pom2 = all_units_1 diff VIPka ;
1755: LD_ADDR_VAR 0 7
1759: PUSH
1760: LD_VAR 0 10
1764: PUSH
1765: LD_VAR 0 9
1769: DIFF
1770: ST_TO_ADDR
// DeleteCharacters ( other_survivors ) ;
1771: LD_STRING other_survivors
1773: PPUSH
1774: CALL_OW 40
// DeleteCharacters ( otherGamma2 ) ;
1778: LD_STRING otherGamma2
1780: PPUSH
1781: CALL_OW 40
// SaveCharacters ( pom1 , otherNotJMM ) ;
1785: LD_VAR 0 6
1789: PPUSH
1790: LD_STRING otherNotJMM
1792: PPUSH
1793: CALL_OW 38
// SaveCharacters ( pom2 , otherWithJMM ) ;
1797: LD_VAR 0 7
1801: PPUSH
1802: LD_STRING otherWithJMM
1804: PPUSH
1805: CALL_OW 38
// YouWin ;
1809: CALL_OW 103
// EnableExclamations ;
1813: CALL_OW 473
// exit ;
1817: GO 1819
// end ;
1819: LD_VAR 0 1
1823: RET
// function load_postavy ; var pom ; begin
1824: LD_INT 0
1826: PPUSH
1827: PPUSH
// JMM = nacti_osobu ( JMM ) ;
1828: LD_ADDR_EXP 32
1832: PUSH
1833: LD_STRING JMM
1835: PPUSH
1836: CALL 8085 0 1
1840: ST_TO_ADDR
// Powell = NewCharacter ( Powell ) ;
1841: LD_ADDR_EXP 33
1845: PUSH
1846: LD_STRING Powell
1848: PPUSH
1849: CALL_OW 25
1853: ST_TO_ADDR
// Gary = nacti_osobu ( Gary ) ;
1854: LD_ADDR_EXP 34
1858: PUSH
1859: LD_STRING Gary
1861: PPUSH
1862: CALL 8085 0 1
1866: ST_TO_ADDR
// Lisa = nacti_osobu ( Lisa ) ;
1867: LD_ADDR_EXP 37
1871: PUSH
1872: LD_STRING Lisa
1874: PPUSH
1875: CALL 8085 0 1
1879: ST_TO_ADDR
// Yamoko = nacti_osobu ( Yamoko ) ;
1880: LD_ADDR_EXP 39
1884: PUSH
1885: LD_STRING Yamoko
1887: PPUSH
1888: CALL 8085 0 1
1892: ST_TO_ADDR
// Frank = nacti_osobu ( Frank ) ;
1893: LD_ADDR_EXP 36
1897: PUSH
1898: LD_STRING Frank
1900: PPUSH
1901: CALL 8085 0 1
1905: ST_TO_ADDR
// Cornel = nacti_osobu ( Cornell ) ;
1906: LD_ADDR_EXP 38
1910: PUSH
1911: LD_STRING Cornell
1913: PPUSH
1914: CALL 8085 0 1
1918: ST_TO_ADDR
// Bobby = nacti_osobu ( Bobby ) ;
1919: LD_ADDR_EXP 35
1923: PUSH
1924: LD_STRING Bobby
1926: PPUSH
1927: CALL 8085 0 1
1931: ST_TO_ADDR
// Cyrus = nacti_osobu ( Cyrus ) ;
1932: LD_ADDR_EXP 40
1936: PUSH
1937: LD_STRING Cyrus
1939: PPUSH
1940: CALL 8085 0 1
1944: ST_TO_ADDR
// Don = nacti_osobu ( Donaldson ) ;
1945: LD_ADDR_EXP 41
1949: PUSH
1950: LD_STRING Donaldson
1952: PPUSH
1953: CALL 8085 0 1
1957: ST_TO_ADDR
// Brown = nacti_osobu ( Brown ) ;
1958: LD_ADDR_EXP 42
1962: PUSH
1963: LD_STRING Brown
1965: PPUSH
1966: CALL 8085 0 1
1970: ST_TO_ADDR
// GARYL = LoadVariable ( GaryLoc , 6 ) ;
1971: LD_ADDR_EXP 19
1975: PUSH
1976: LD_STRING GaryLoc
1978: PPUSH
1979: LD_INT 6
1981: PPUSH
1982: CALL_OW 30
1986: ST_TO_ADDR
// LISAL = LoadVariable ( LisaLoc , 6 ) ;
1987: LD_ADDR_EXP 20
1991: PUSH
1992: LD_STRING LisaLoc
1994: PPUSH
1995: LD_INT 6
1997: PPUSH
1998: CALL_OW 30
2002: ST_TO_ADDR
// YAML = LoadVariable ( YamokoLoc , 6 ) ;
2003: LD_ADDR_EXP 21
2007: PUSH
2008: LD_STRING YamokoLoc
2010: PPUSH
2011: LD_INT 6
2013: PPUSH
2014: CALL_OW 30
2018: ST_TO_ADDR
// FRANKL = LoadVariable ( FrankLoc , 6 ) ;
2019: LD_ADDR_EXP 22
2023: PUSH
2024: LD_STRING FrankLoc
2026: PPUSH
2027: LD_INT 6
2029: PPUSH
2030: CALL_OW 30
2034: ST_TO_ADDR
// CORNELL = LoadVariable ( CornellLoc , 6 ) ;
2035: LD_ADDR_EXP 23
2039: PUSH
2040: LD_STRING CornellLoc
2042: PPUSH
2043: LD_INT 6
2045: PPUSH
2046: CALL_OW 30
2050: ST_TO_ADDR
// BOBL = LoadVariable ( BobbyLoc , 6 ) ;
2051: LD_ADDR_EXP 24
2055: PUSH
2056: LD_STRING BobbyLoc
2058: PPUSH
2059: LD_INT 6
2061: PPUSH
2062: CALL_OW 30
2066: ST_TO_ADDR
// CYRL = LoadVariable ( CyrusLoc , 6 ) ;
2067: LD_ADDR_EXP 25
2071: PUSH
2072: LD_STRING CyrusLoc
2074: PPUSH
2075: LD_INT 6
2077: PPUSH
2078: CALL_OW 30
2082: ST_TO_ADDR
// DONL = LoadVariable ( DonaldsonLoc , 6 ) ;
2083: LD_ADDR_EXP 26
2087: PUSH
2088: LD_STRING DonaldsonLoc
2090: PPUSH
2091: LD_INT 6
2093: PPUSH
2094: CALL_OW 30
2098: ST_TO_ADDR
// BROWNL = LoadVariable ( BrownLoc , 6 ) ;
2099: LD_ADDR_EXP 27
2103: PUSH
2104: LD_STRING BrownLoc
2106: PPUSH
2107: LD_INT 6
2109: PPUSH
2110: CALL_OW 30
2114: ST_TO_ADDR
// if CheckCharacterSet ( otherWithJMM ) then
2115: LD_STRING otherWithJMM
2117: PPUSH
2118: CALL_OW 29
2122: IFFALSE 2139
// lidi_other = CreateCharacterSet ( otherWithJMM ) else
2124: LD_ADDR_EXP 52
2128: PUSH
2129: LD_STRING otherWithJMM
2131: PPUSH
2132: CALL_OW 31
2136: ST_TO_ADDR
2137: GO 2146
// lidi_other = [ ] ;
2139: LD_ADDR_EXP 52
2143: PUSH
2144: EMPTY
2145: ST_TO_ADDR
// if CheckCharacterSet ( other_survivors ) then
2146: LD_STRING other_survivors
2148: PPUSH
2149: CALL_OW 29
2153: IFFALSE 2170
// pom = CreateCharacterSet ( other_survivors ) else
2155: LD_ADDR_VAR 0 2
2159: PUSH
2160: LD_STRING other_survivors
2162: PPUSH
2163: CALL_OW 31
2167: ST_TO_ADDR
2168: GO 2177
// pom = [ ] ;
2170: LD_ADDR_VAR 0 2
2174: PUSH
2175: EMPTY
2176: ST_TO_ADDR
// lidi_other = lidi_other ^ pom ;
2177: LD_ADDR_EXP 52
2181: PUSH
2182: LD_EXP 52
2186: PUSH
2187: LD_VAR 0 2
2191: ADD
2192: ST_TO_ADDR
// if CheckCharacterSet ( otherNotJMM ) then
2193: LD_STRING otherNotJMM
2195: PPUSH
2196: CALL_OW 29
2200: IFFALSE 2217
// pom = CreateCharacterSet ( otherNotJMM ) else
2202: LD_ADDR_VAR 0 2
2206: PUSH
2207: LD_STRING otherNotJMM
2209: PPUSH
2210: CALL_OW 31
2214: ST_TO_ADDR
2215: GO 2224
// pom = [ ] ;
2217: LD_ADDR_VAR 0 2
2221: PUSH
2222: EMPTY
2223: ST_TO_ADDR
// lidi_other = lidi_other ^ pom ;
2224: LD_ADDR_EXP 52
2228: PUSH
2229: LD_EXP 52
2233: PUSH
2234: LD_VAR 0 2
2238: ADD
2239: ST_TO_ADDR
// if CheckCharacterSet ( otherGamma2 ) then
2240: LD_STRING otherGamma2
2242: PPUSH
2243: CALL_OW 29
2247: IFFALSE 2264
// pom = CreateCharacterSet ( otherGamma2 ) else
2249: LD_ADDR_VAR 0 2
2253: PUSH
2254: LD_STRING otherGamma2
2256: PPUSH
2257: CALL_OW 31
2261: ST_TO_ADDR
2262: GO 2271
// pom = [ ] ;
2264: LD_ADDR_VAR 0 2
2268: PUSH
2269: EMPTY
2270: ST_TO_ADDR
// lidi_other = lidi_other ^ pom ;
2271: LD_ADDR_EXP 52
2275: PUSH
2276: LD_EXP 52
2280: PUSH
2281: LD_VAR 0 2
2285: ADD
2286: ST_TO_ADDR
// end ; end_of_file
2287: LD_VAR 0 1
2291: RET
// var i , pom , pom1 , pom2 , pom3 , pom4 ; var kecy ; var KAMI ; var disable_kecy_5D ; every 0 0$0.1 do
2292: GO 2294
2294: DISABLE
// begin for i := 1 to 2 do
2295: LD_ADDR_LOC 1
2299: PUSH
2300: DOUBLE
2301: LD_INT 1
2303: DEC
2304: ST_TO_ADDR
2305: LD_INT 2
2307: PUSH
2308: FOR_TO
2309: IFFALSE 2318
// disable ( i ) ;
2311: LD_LOC 1
2315: DISABLE_MARKED
2316: GO 2308
2318: POP
2319: POP
// kecy := false ;
2320: LD_ADDR_LOC 7
2324: PUSH
2325: LD_INT 0
2327: ST_TO_ADDR
// KAMI = false ;
2328: LD_ADDR_LOC 8
2332: PUSH
2333: LD_INT 0
2335: ST_TO_ADDR
// disable_kecy_5D = false ;
2336: LD_ADDR_LOC 9
2340: PUSH
2341: LD_INT 0
2343: ST_TO_ADDR
// end ;
2344: END
// export function chmo1 ; begin
2345: LD_INT 0
2347: PPUSH
// CenterOnXY ( 86 , 145 ) ;
2348: LD_INT 86
2350: PPUSH
2351: LD_INT 145
2353: PPUSH
2354: CALL_OW 84
// SetAttitude ( You , Arabi , att_enemy , true ) ;
2358: LD_EXP 1
2362: PPUSH
2363: LD_EXP 3
2367: PPUSH
2368: LD_INT 2
2370: PPUSH
2371: LD_INT 1
2373: PPUSH
2374: CALL_OW 80
// SetAttitude ( Arabi , You , att_enemy , true ) ;
2378: LD_EXP 3
2382: PPUSH
2383: LD_EXP 1
2387: PPUSH
2388: LD_INT 2
2390: PPUSH
2391: LD_INT 1
2393: PPUSH
2394: CALL_OW 80
// SaveForQuickRestart ;
2398: CALL_OW 22
// wait ( 0 0$0.5 ) ;
2402: LD_INT 18
2404: PPUSH
2405: CALL_OW 67
// InGameOff ;
2409: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2413: LD_STRING M1
2415: PPUSH
2416: CALL_OW 337
// end ;
2420: LD_VAR 0 1
2424: RET
// every 0 0$3 trigger GetSide ( A1_dep ) = You or IsDead ( A1_dep ) do var pom1 ;
2425: LD_INT 4
2427: PPUSH
2428: CALL_OW 255
2432: PUSH
2433: LD_EXP 1
2437: EQUAL
2438: PUSH
2439: LD_INT 4
2441: PPUSH
2442: CALL_OW 301
2446: OR
2447: IFFALSE 3032
2449: GO 2451
2451: DISABLE
2452: LD_INT 0
2454: PPUSH
// begin A1_dobyta = true ;
2455: LD_ADDR_EXP 28
2459: PUSH
2460: LD_INT 1
2462: ST_TO_ADDR
// DialogueOn ;
2463: CALL_OW 6
// SayRadio ( Jmm , D2-JMM-1 ) ;
2467: LD_EXP 32
2471: PPUSH
2472: LD_STRING D2-JMM-1
2474: PPUSH
2475: CALL_OW 94
// SayRadio ( Powell , D2-Pow-1 ) ;
2479: LD_EXP 33
2483: PPUSH
2484: LD_STRING D2-Pow-1
2486: PPUSH
2487: CALL_OW 94
// SayRadio ( JMM , D2-JMM-2 ) ;
2491: LD_EXP 32
2495: PPUSH
2496: LD_STRING D2-JMM-2
2498: PPUSH
2499: CALL_OW 94
// SayRadio ( Powell , D2-Pow-2 ) ;
2503: LD_EXP 33
2507: PPUSH
2508: LD_STRING D2-Pow-2
2510: PPUSH
2511: CALL_OW 94
// SayRadio ( JMM , D2-JMM-3 ) ;
2515: LD_EXP 32
2519: PPUSH
2520: LD_STRING D2-JMM-3
2522: PPUSH
2523: CALL_OW 94
// DialogueOff ;
2527: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
2531: LD_STRING M2
2533: PPUSH
2534: CALL_OW 337
// Hint ( CapturedBase ) ;
2538: LD_STRING CapturedBase
2540: PPUSH
2541: CALL_OW 339
// pom = [ ] ;
2545: LD_ADDR_LOC 2
2549: PUSH
2550: EMPTY
2551: ST_TO_ADDR
// for i in [ Gary , Bobby , Frank , Lisa , Cornel , Cyrus , Don , Brown ] do
2552: LD_ADDR_LOC 1
2556: PUSH
2557: LD_EXP 34
2561: PUSH
2562: LD_EXP 35
2566: PUSH
2567: LD_EXP 36
2571: PUSH
2572: LD_EXP 37
2576: PUSH
2577: LD_EXP 38
2581: PUSH
2582: LD_EXP 40
2586: PUSH
2587: LD_EXP 41
2591: PUSH
2592: LD_EXP 42
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: PUSH
2607: FOR_IN
2608: IFFALSE 2639
// if IsOK ( i ) then
2610: LD_LOC 1
2614: PPUSH
2615: CALL_OW 302
2619: IFFALSE 2637
// pom = pom ^ i ;
2621: LD_ADDR_LOC 2
2625: PUSH
2626: LD_LOC 2
2630: PUSH
2631: LD_LOC 1
2635: ADD
2636: ST_TO_ADDR
2637: GO 2607
2639: POP
2640: POP
// if pom > 3 then
2641: LD_LOC 2
2645: PUSH
2646: LD_INT 3
2648: GREATER
2649: IFFALSE 2799
// begin pom1 = pom [ Rand ( 1 , pom + 0 ) ] ;
2651: LD_ADDR_VAR 0 1
2655: PUSH
2656: LD_LOC 2
2660: PUSH
2661: LD_INT 1
2663: PPUSH
2664: LD_LOC 2
2668: PUSH
2669: LD_INT 0
2671: PLUS
2672: PPUSH
2673: CALL_OW 12
2677: ARRAY
2678: ST_TO_ADDR
// pom = pom diff pom1 [ 1 ] ;
2679: LD_ADDR_LOC 2
2683: PUSH
2684: LD_LOC 2
2688: PUSH
2689: LD_VAR 0 1
2693: PUSH
2694: LD_INT 1
2696: ARRAY
2697: DIFF
2698: ST_TO_ADDR
// pom1 = pom1 ^ pom [ Rand ( 1 , pom + 0 ) ] ;
2699: LD_ADDR_VAR 0 1
2703: PUSH
2704: LD_VAR 0 1
2708: PUSH
2709: LD_LOC 2
2713: PUSH
2714: LD_INT 1
2716: PPUSH
2717: LD_LOC 2
2721: PUSH
2722: LD_INT 0
2724: PLUS
2725: PPUSH
2726: CALL_OW 12
2730: ARRAY
2731: ADD
2732: ST_TO_ADDR
// pom = pom diff pom1 [ 2 ] ;
2733: LD_ADDR_LOC 2
2737: PUSH
2738: LD_LOC 2
2742: PUSH
2743: LD_VAR 0 1
2747: PUSH
2748: LD_INT 2
2750: ARRAY
2751: DIFF
2752: ST_TO_ADDR
// pom1 = pom1 ^ pom [ Rand ( 1 , pom + 0 ) ] ;
2753: LD_ADDR_VAR 0 1
2757: PUSH
2758: LD_VAR 0 1
2762: PUSH
2763: LD_LOC 2
2767: PUSH
2768: LD_INT 1
2770: PPUSH
2771: LD_LOC 2
2775: PUSH
2776: LD_INT 0
2778: PLUS
2779: PPUSH
2780: CALL_OW 12
2784: ARRAY
2785: ADD
2786: ST_TO_ADDR
// pom = pom1 ;
2787: LD_ADDR_LOC 2
2791: PUSH
2792: LD_VAR 0 1
2796: ST_TO_ADDR
// end else
2797: GO 2809
// pom1 = pom ;
2799: LD_ADDR_VAR 0 1
2803: PUSH
2804: LD_LOC 2
2808: ST_TO_ADDR
// for i in pom1 do
2809: LD_ADDR_LOC 1
2813: PUSH
2814: LD_VAR 0 1
2818: PUSH
2819: FOR_IN
2820: IFFALSE 3030
// case i of Gary :
2822: LD_LOC 1
2826: PUSH
2827: LD_EXP 34
2831: DOUBLE
2832: EQUAL
2833: IFTRUE 2837
2835: GO 2852
2837: POP
// Say ( Gary , D2a-Gary-1 ) ; Bobby :
2838: LD_EXP 34
2842: PPUSH
2843: LD_STRING D2a-Gary-1
2845: PPUSH
2846: CALL_OW 88
2850: GO 3028
2852: LD_EXP 35
2856: DOUBLE
2857: EQUAL
2858: IFTRUE 2862
2860: GO 2877
2862: POP
// Say ( Bobby , D2a-Bobby-1 ) ; Frank :
2863: LD_EXP 35
2867: PPUSH
2868: LD_STRING D2a-Bobby-1
2870: PPUSH
2871: CALL_OW 88
2875: GO 3028
2877: LD_EXP 36
2881: DOUBLE
2882: EQUAL
2883: IFTRUE 2887
2885: GO 2902
2887: POP
// Say ( Frank , D2a-Frank-1 ) ; Lisa :
2888: LD_EXP 36
2892: PPUSH
2893: LD_STRING D2a-Frank-1
2895: PPUSH
2896: CALL_OW 88
2900: GO 3028
2902: LD_EXP 37
2906: DOUBLE
2907: EQUAL
2908: IFTRUE 2912
2910: GO 2927
2912: POP
// Say ( Lisa , D2a-Lisa-1 ) ; Cornel :
2913: LD_EXP 37
2917: PPUSH
2918: LD_STRING D2a-Lisa-1
2920: PPUSH
2921: CALL_OW 88
2925: GO 3028
2927: LD_EXP 38
2931: DOUBLE
2932: EQUAL
2933: IFTRUE 2937
2935: GO 2952
2937: POP
// Say ( Cornel , D2a-Corn-1 ) ; Cyrus :
2938: LD_EXP 38
2942: PPUSH
2943: LD_STRING D2a-Corn-1
2945: PPUSH
2946: CALL_OW 88
2950: GO 3028
2952: LD_EXP 40
2956: DOUBLE
2957: EQUAL
2958: IFTRUE 2962
2960: GO 2977
2962: POP
// Say ( Cyrus , D2a-Cyrus-1 ) ; Don :
2963: LD_EXP 40
2967: PPUSH
2968: LD_STRING D2a-Cyrus-1
2970: PPUSH
2971: CALL_OW 88
2975: GO 3028
2977: LD_EXP 41
2981: DOUBLE
2982: EQUAL
2983: IFTRUE 2987
2985: GO 3002
2987: POP
// Say ( Don , D2a-Don-1 ) ; Brown :
2988: LD_EXP 41
2992: PPUSH
2993: LD_STRING D2a-Don-1
2995: PPUSH
2996: CALL_OW 88
3000: GO 3028
3002: LD_EXP 42
3006: DOUBLE
3007: EQUAL
3008: IFTRUE 3012
3010: GO 3027
3012: POP
// Say ( Brown , D2a-Brown-1 ) ; end ;
3013: LD_EXP 42
3017: PPUSH
3018: LD_STRING D2a-Brown-1
3020: PPUSH
3021: CALL_OW 88
3025: GO 3028
3027: POP
3028: GO 2819
3030: POP
3031: POP
// end ;
3032: PPOPN 1
3034: END
// export function dialog_frank ; var res ; begin
3035: LD_INT 0
3037: PPUSH
3038: PPUSH
// Say ( Frank , D3F-Frank-1 ) ;
3039: LD_EXP 36
3043: PPUSH
3044: LD_STRING D3F-Frank-1
3046: PPUSH
3047: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
3051: LD_EXP 32
3055: PPUSH
3056: LD_STRING D3F-JMM-1
3058: PPUSH
3059: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
3063: LD_EXP 36
3067: PPUSH
3068: LD_STRING D3F-Frank-2
3070: PPUSH
3071: CALL_OW 88
// res := Query ( QFrank ) ;
3075: LD_ADDR_VAR 0 2
3079: PUSH
3080: LD_STRING QFrank
3082: PPUSH
3083: CALL_OW 97
3087: ST_TO_ADDR
// case res of 1 :
3088: LD_VAR 0 2
3092: PUSH
3093: LD_INT 1
3095: DOUBLE
3096: EQUAL
3097: IFTRUE 3101
3099: GO 3124
3101: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
3102: LD_EXP 32
3106: PPUSH
3107: LD_STRING D3Fa-JMM-1
3109: PPUSH
3110: CALL_OW 88
// result := 1 ;
3114: LD_ADDR_VAR 0 1
3118: PUSH
3119: LD_INT 1
3121: ST_TO_ADDR
// end ; 2 :
3122: GO 3280
3124: LD_INT 2
3126: DOUBLE
3127: EQUAL
3128: IFTRUE 3132
3130: GO 3248
3132: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
3133: LD_EXP 32
3137: PPUSH
3138: LD_STRING D3Fb-JMM-1
3140: PPUSH
3141: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
3145: LD_EXP 36
3149: PPUSH
3150: LD_STRING D3Fb-Frank-1
3152: PPUSH
3153: CALL_OW 88
// res := Query ( QFrank2 ) ;
3157: LD_ADDR_VAR 0 2
3161: PUSH
3162: LD_STRING QFrank2
3164: PPUSH
3165: CALL_OW 97
3169: ST_TO_ADDR
// if res = 1 then
3170: LD_VAR 0 2
3174: PUSH
3175: LD_INT 1
3177: EQUAL
3178: IFFALSE 3226
// begin Say ( JMM , D3Fba-JMM-1 ) ;
3180: LD_EXP 32
3184: PPUSH
3185: LD_STRING D3Fba-JMM-1
3187: PPUSH
3188: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
3192: LD_EXP 36
3196: PPUSH
3197: LD_STRING D3Fba-Frank-1
3199: PPUSH
3200: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
3204: LD_EXP 32
3208: PPUSH
3209: LD_STRING D3Fba-JMM-2
3211: PPUSH
3212: CALL_OW 88
// result := 21 ;
3216: LD_ADDR_VAR 0 1
3220: PUSH
3221: LD_INT 21
3223: ST_TO_ADDR
// end else
3224: GO 3246
// begin Say ( JMM , D3Fbb-JMM-1 ) ;
3226: LD_EXP 32
3230: PPUSH
3231: LD_STRING D3Fbb-JMM-1
3233: PPUSH
3234: CALL_OW 88
// result := 22 ;
3238: LD_ADDR_VAR 0 1
3242: PUSH
3243: LD_INT 22
3245: ST_TO_ADDR
// end ; end ; 3 :
3246: GO 3280
3248: LD_INT 3
3250: DOUBLE
3251: EQUAL
3252: IFTRUE 3256
3254: GO 3279
3256: POP
// begin Say ( JMM , D3Fc-JMM-1 ) ;
3257: LD_EXP 32
3261: PPUSH
3262: LD_STRING D3Fc-JMM-1
3264: PPUSH
3265: CALL_OW 88
// result := 3 ;
3269: LD_ADDR_VAR 0 1
3273: PUSH
3274: LD_INT 3
3276: ST_TO_ADDR
// end ; end ;
3277: GO 3280
3279: POP
// end ;
3280: LD_VAR 0 1
3284: RET
// export function fuspech1 ; begin
3285: LD_INT 0
3287: PPUSH
// DialogueOn ;
3288: CALL_OW 6
// Say ( JMM , D4Fa-JMM-1 ) ;
3292: LD_EXP 32
3296: PPUSH
3297: LD_STRING D4Fa-JMM-1
3299: PPUSH
3300: CALL_OW 88
// RevealFogArea ( You , Pruzkum1 ) ;
3304: LD_EXP 1
3308: PPUSH
3309: LD_INT 6
3311: PPUSH
3312: CALL_OW 332
// CenterNowOnXY ( 111 , 123 ) ;
3316: LD_INT 111
3318: PPUSH
3319: LD_INT 123
3321: PPUSH
3322: CALL_OW 86
// CenterOnXy ( 32 , 39 ) ;
3326: LD_INT 32
3328: PPUSH
3329: LD_INT 39
3331: PPUSH
3332: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
3336: LD_EXP 36
3340: PPUSH
3341: LD_STRING D4Fa-Frank-1
3343: PPUSH
3344: CALL_OW 88
// wait ( 0 0$3 ) ;
3348: LD_INT 105
3350: PPUSH
3351: CALL_OW 67
// RevealFogArea ( You , Pruzkum2 ) ;
3355: LD_EXP 1
3359: PPUSH
3360: LD_INT 7
3362: PPUSH
3363: CALL_OW 332
// CenterNowOnXy ( 122 , 68 ) ;
3367: LD_INT 122
3369: PPUSH
3370: LD_INT 68
3372: PPUSH
3373: CALL_OW 86
// Say ( JMM , D4Fa-JMM-2 ) ;
3377: LD_EXP 32
3381: PPUSH
3382: LD_STRING D4Fa-JMM-2
3384: PPUSH
3385: CALL_OW 88
// Say ( Frank , D4Fa-Frank-2 ) ;
3389: LD_EXP 36
3393: PPUSH
3394: LD_STRING D4Fa-Frank-2
3396: PPUSH
3397: CALL_OW 88
// DialogueOff ;
3401: CALL_OW 7
// CenterOnUnits ( [ Frank ] ) ;
3405: LD_EXP 36
3409: PUSH
3410: EMPTY
3411: LIST
3412: PPUSH
3413: CALL_OW 85
// end ;
3417: LD_VAR 0 1
3421: RET
// export function fuspech2 ; begin
3422: LD_INT 0
3424: PPUSH
// DialogueOn ;
3425: CALL_OW 6
// RevealFogArea ( You , Pruzkum3 ) ;
3429: LD_EXP 1
3433: PPUSH
3434: LD_INT 8
3436: PPUSH
3437: CALL_OW 332
// if IsOK ( Frank ) then
3441: LD_EXP 36
3445: PPUSH
3446: CALL_OW 302
3450: IFFALSE 3544
// begin Say ( Frank , D4Fb-Frank-1 ) ;
3452: LD_EXP 36
3456: PPUSH
3457: LD_STRING D4Fb-Frank-1
3459: PPUSH
3460: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
3464: LD_EXP 32
3468: PPUSH
3469: LD_STRING D4Fb-JMM-1
3471: PPUSH
3472: CALL_OW 88
// pom = GetPeople ( sex_female , class_scientistic , [ ] ) ;
3476: LD_ADDR_LOC 2
3480: PUSH
3481: LD_INT 2
3483: PPUSH
3484: LD_INT 4
3486: PPUSH
3487: EMPTY
3488: PPUSH
3489: CALL 6667 0 3
3493: ST_TO_ADDR
// if pom > 0 then
3494: LD_LOC 2
3498: PUSH
3499: LD_INT 0
3501: GREATER
3502: IFFALSE 3520
// Say ( pom [ 1 ] , D4Fb-FSci1-1 ) ;
3504: LD_LOC 2
3508: PUSH
3509: LD_INT 1
3511: ARRAY
3512: PPUSH
3513: LD_STRING D4Fb-FSci1-1
3515: PPUSH
3516: CALL_OW 88
// Say ( Frank , D4Fb-Frank-2 ) ;
3520: LD_EXP 36
3524: PPUSH
3525: LD_STRING D4Fb-Frank-2
3527: PPUSH
3528: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
3532: LD_EXP 32
3536: PPUSH
3537: LD_STRING D4Fb-JMM-2
3539: PPUSH
3540: CALL_OW 88
// end ; DialogueOff ;
3544: CALL_OW 7
// CenterOnUnits ( [ Frank ] ) ;
3548: LD_EXP 36
3552: PUSH
3553: EMPTY
3554: LIST
3555: PPUSH
3556: CALL_OW 85
// end ;
3560: LD_VAR 0 1
3564: RET
// export function fuspech3 ; begin
3565: LD_INT 0
3567: PPUSH
// end ;
3568: LD_VAR 0 1
3572: RET
// export function dialog_yamoko ; begin
3573: LD_INT 0
3575: PPUSH
// Say ( Yamoko , D3Y-Yam-1 ) ;
3576: LD_EXP 39
3580: PPUSH
3581: LD_STRING D3Y-Yam-1
3583: PPUSH
3584: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
3588: LD_EXP 32
3592: PPUSH
3593: LD_STRING D3Y-JMM-1
3595: PPUSH
3596: CALL_OW 88
// Say ( Yamoko , D3Y-Yam-2 ) ;
3600: LD_EXP 39
3604: PPUSH
3605: LD_STRING D3Y-Yam-2
3607: PPUSH
3608: CALL_OW 88
// result = Query ( QYamoko ) ;
3612: LD_ADDR_VAR 0 1
3616: PUSH
3617: LD_STRING QYamoko
3619: PPUSH
3620: CALL_OW 97
3624: ST_TO_ADDR
// if result = 1 then
3625: LD_VAR 0 1
3629: PUSH
3630: LD_INT 1
3632: EQUAL
3633: IFFALSE 3661
// begin Say ( JMM , D3Ya-JMM-1 ) ;
3635: LD_EXP 32
3639: PPUSH
3640: LD_STRING D3Ya-JMM-1
3642: PPUSH
3643: CALL_OW 88
// Say ( Yamoko , D3Ya-Yam-1 ) ;
3647: LD_EXP 39
3651: PPUSH
3652: LD_STRING D3Ya-Yam-1
3654: PPUSH
3655: CALL_OW 88
// end else
3659: GO 3673
// Say ( JMM , D3Yb-JMM-1 ) ;
3661: LD_EXP 32
3665: PPUSH
3666: LD_STRING D3Yb-JMM-1
3668: PPUSH
3669: CALL_OW 88
// end ;
3673: LD_VAR 0 1
3677: RET
// export function yuspech1 ; begin
3678: LD_INT 0
3680: PPUSH
// DialogueOn ;
3681: CALL_OW 6
// Say ( Yamoko , D4Ya-Yam-1 ) ;
3685: LD_EXP 39
3689: PPUSH
3690: LD_STRING D4Ya-Yam-1
3692: PPUSH
3693: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
3697: LD_EXP 32
3701: PPUSH
3702: LD_STRING D4Ya-JMM-1
3704: PPUSH
3705: CALL_OW 88
// RevealFogArea ( You , Pruzkum1 ) ;
3709: LD_EXP 1
3713: PPUSH
3714: LD_INT 6
3716: PPUSH
3717: CALL_OW 332
// CenterNowOnXY ( 111 , 123 ) ;
3721: LD_INT 111
3723: PPUSH
3724: LD_INT 123
3726: PPUSH
3727: CALL_OW 86
// CenterOnXy ( 32 , 39 ) ;
3731: LD_INT 32
3733: PPUSH
3734: LD_INT 39
3736: PPUSH
3737: CALL_OW 84
// Say ( Yamoko , D4Ya-Yam-2 ) ;
3741: LD_EXP 39
3745: PPUSH
3746: LD_STRING D4Ya-Yam-2
3748: PPUSH
3749: CALL_OW 88
// wait ( 0 0$3 ) ;
3753: LD_INT 105
3755: PPUSH
3756: CALL_OW 67
// RevealFogArea ( You , Pruzkum2 ) ;
3760: LD_EXP 1
3764: PPUSH
3765: LD_INT 7
3767: PPUSH
3768: CALL_OW 332
// CenterNowOnXy ( 122 , 68 ) ;
3772: LD_INT 122
3774: PPUSH
3775: LD_INT 68
3777: PPUSH
3778: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
3782: LD_EXP 32
3786: PPUSH
3787: LD_STRING D4Ya-JMM-2
3789: PPUSH
3790: CALL_OW 88
// Say ( Yamoko , D4Ya-Yam-3 ) ;
3794: LD_EXP 39
3798: PPUSH
3799: LD_STRING D4Ya-Yam-3
3801: PPUSH
3802: CALL_OW 88
// DialogueOff ;
3806: CALL_OW 7
// CenterOnUnits ( [ Yamoko ] ) ;
3810: LD_EXP 39
3814: PUSH
3815: EMPTY
3816: LIST
3817: PPUSH
3818: CALL_OW 85
// end ;
3822: LD_VAR 0 1
3826: RET
// export function yuspech2 ; begin
3827: LD_INT 0
3829: PPUSH
// DialogueOn ;
3830: CALL_OW 6
// RevealFogArea ( You , Pruzkum3 ) ;
3834: LD_EXP 1
3838: PPUSH
3839: LD_INT 8
3841: PPUSH
3842: CALL_OW 332
// if IsOK ( Yamoko ) then
3846: LD_EXP 39
3850: PPUSH
3851: CALL_OW 302
3855: IFFALSE 3905
// begin Say ( Yamoko , D4Yc-Yam-1 ) ;
3857: LD_EXP 39
3861: PPUSH
3862: LD_STRING D4Yc-Yam-1
3864: PPUSH
3865: CALL_OW 88
// Say ( JMM , D4Yc-JMM-1 ) ;
3869: LD_EXP 32
3873: PPUSH
3874: LD_STRING D4Yc-JMM-1
3876: PPUSH
3877: CALL_OW 88
// Say ( Yamoko , D4Yc-Yam-2 ) ;
3881: LD_EXP 39
3885: PPUSH
3886: LD_STRING D4Yc-Yam-2
3888: PPUSH
3889: CALL_OW 88
// Say ( JMM , D4Yc-JMM-2 ) ;
3893: LD_EXP 32
3897: PPUSH
3898: LD_STRING D4Yc-JMM-2
3900: PPUSH
3901: CALL_OW 88
// end ; DialogueOff ;
3905: CALL_OW 7
// CenterOnUnits ( [ Yamoko ] ) ;
3909: LD_EXP 39
3913: PUSH
3914: EMPTY
3915: LIST
3916: PPUSH
3917: CALL_OW 85
// end ;
3921: LD_VAR 0 1
3925: RET
// export function yuspech3 ; begin
3926: LD_INT 0
3928: PPUSH
// end ;
3929: LD_VAR 0 1
3933: RET
// every 0 0$1 trigger See ( You , A2_kam1 ) or See ( You , A2_kam2 ) or See ( You , A2_kam3 ) do
3934: LD_EXP 1
3938: PPUSH
3939: LD_INT 86
3941: PPUSH
3942: CALL_OW 292
3946: PUSH
3947: LD_EXP 1
3951: PPUSH
3952: LD_INT 85
3954: PPUSH
3955: CALL_OW 292
3959: OR
3960: PUSH
3961: LD_EXP 1
3965: PPUSH
3966: LD_INT 84
3968: PPUSH
3969: CALL_OW 292
3973: OR
3974: IFFALSE 4292
3976: GO 3978
3978: DISABLE
// begin while kecy do
3979: LD_LOC 7
3983: IFFALSE 3994
// wait ( 0 0$1 ) ;
3985: LD_INT 35
3987: PPUSH
3988: CALL_OW 67
3992: GO 3979
// kecy = true ;
3994: LD_ADDR_LOC 7
3998: PUSH
3999: LD_INT 1
4001: ST_TO_ADDR
// DialogueOn ;
4002: CALL_OW 6
// if See ( You , A2_kam1 ) then
4006: LD_EXP 1
4010: PPUSH
4011: LD_INT 86
4013: PPUSH
4014: CALL_OW 292
4018: IFFALSE 4029
// CenterNowOnUnits ( A2_kam1 ) else
4020: LD_INT 86
4022: PPUSH
4023: CALL_OW 87
4027: GO 4093
// if See ( You , A2_kam2 ) then
4029: LD_EXP 1
4033: PPUSH
4034: LD_INT 85
4036: PPUSH
4037: CALL_OW 292
4041: IFFALSE 4052
// CenterNowOnUnits ( A2_kam2 ) else
4043: LD_INT 85
4045: PPUSH
4046: CALL_OW 87
4050: GO 4093
// if See ( You , A2_kam3 ) then
4052: LD_EXP 1
4056: PPUSH
4057: LD_INT 84
4059: PPUSH
4060: CALL_OW 292
4064: IFFALSE 4075
// CenterNowOnUnits ( A2_kam3 ) else
4066: LD_INT 84
4068: PPUSH
4069: CALL_OW 87
4073: GO 4093
// CenterNowOnUnits ( [ A2_kam1 , A2_kam2 , A2_kam3 ] ) ;
4075: LD_INT 86
4077: PUSH
4078: LD_INT 85
4080: PUSH
4081: LD_INT 84
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: LIST
4088: PPUSH
4089: CALL_OW 87
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
4093: LD_ADDR_LOC 2
4097: PUSH
4098: LD_INT 1
4100: PPUSH
4101: LD_INT 1
4103: PPUSH
4104: LD_EXP 32
4108: PUSH
4109: EMPTY
4110: LIST
4111: PPUSH
4112: CALL 6667 0 3
4116: ST_TO_ADDR
// if pom < 0 then
4117: LD_LOC 2
4121: PUSH
4122: LD_INT 0
4124: LESS
4125: IFFALSE 4138
// begin msg ( ERROR: GetPeople returns wrong data. Please report it as a bug ) ;
4127: LD_STRING ERROR: GetPeople returns wrong data. Please report it as a bug
4129: PPUSH
4130: CALL_OW 100
// konec_mise ;
4134: CALL 669 0 0
// end ; case pom of 0 :
4138: LD_LOC 2
4142: PUSH
4143: LD_INT 0
4145: DOUBLE
4146: EQUAL
4147: IFTRUE 4151
4149: GO 4174
4151: POP
// begin pom = JMM ;
4152: LD_ADDR_LOC 2
4156: PUSH
4157: LD_EXP 32
4161: ST_TO_ADDR
// pom1 = JMM ;
4162: LD_ADDR_LOC 3
4166: PUSH
4167: LD_EXP 32
4171: ST_TO_ADDR
// end ; 1 :
4172: GO 4238
4174: LD_INT 1
4176: DOUBLE
4177: EQUAL
4178: IFTRUE 4182
4180: GO 4209
4182: POP
// begin pom = pom [ 1 ] ;
4183: LD_ADDR_LOC 2
4187: PUSH
4188: LD_LOC 2
4192: PUSH
4193: LD_INT 1
4195: ARRAY
4196: ST_TO_ADDR
// pom1 = JMM ;
4197: LD_ADDR_LOC 3
4201: PUSH
4202: LD_EXP 32
4206: ST_TO_ADDR
// end ; else
4207: GO 4238
4209: POP
// begin pom1 = pom [ 2 ] ;
4210: LD_ADDR_LOC 3
4214: PUSH
4215: LD_LOC 2
4219: PUSH
4220: LD_INT 2
4222: ARRAY
4223: ST_TO_ADDR
// pom = pom [ 1 ] ;
4224: LD_ADDR_LOC 2
4228: PUSH
4229: LD_LOC 2
4233: PUSH
4234: LD_INT 1
4236: ARRAY
4237: ST_TO_ADDR
// end ; end ; DialogueOn ;
4238: CALL_OW 6
// Say ( pom , D5b-Sol1-1 ) ;
4242: LD_LOC 2
4246: PPUSH
4247: LD_STRING D5b-Sol1-1
4249: PPUSH
4250: CALL_OW 88
// Say ( pom1 , D5b-Sol2-1 ) ;
4254: LD_LOC 3
4258: PPUSH
4259: LD_STRING D5b-Sol2-1
4261: PPUSH
4262: CALL_OW 88
// DialogueOff ;
4266: CALL_OW 7
// if not disable_kecy_5D then
4270: LD_LOC 9
4274: NOT
4275: IFFALSE 4280
// enable ( 1 ) ;
4277: LD_INT 1
4279: ENABLE_MARKED
// DialogueOff ;
4280: CALL_OW 7
// kecy = false ;
4284: LD_ADDR_LOC 7
4288: PUSH
4289: LD_INT 0
4291: ST_TO_ADDR
// end ;
4292: END
// on UnitKamikazed ( un ) do begin if not KAMI then
4293: LD_LOC 8
4297: NOT
4298: IFFALSE 4494
// begin KAMI = true ;
4300: LD_ADDR_LOC 8
4304: PUSH
4305: LD_INT 1
4307: ST_TO_ADDR
// while kecy do
4308: LD_LOC 7
4312: IFFALSE 4323
// wait ( 0 0$1 ) ;
4314: LD_INT 35
4316: PPUSH
4317: CALL_OW 67
4321: GO 4308
// kecy = true ;
4323: LD_ADDR_LOC 7
4327: PUSH
4328: LD_INT 1
4330: ST_TO_ADDR
// wait ( 0 0$1.5 ) ;
4331: LD_INT 52
4333: PPUSH
4334: CALL_OW 67
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
4338: LD_ADDR_LOC 2
4342: PUSH
4343: LD_INT 22
4345: PUSH
4346: LD_EXP 1
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: PUSH
4355: LD_INT 21
4357: PUSH
4358: LD_INT 1
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: PPUSH
4369: CALL_OW 69
4373: ST_TO_ADDR
// pom = pom diff [ JMM ] ;
4374: LD_ADDR_LOC 2
4378: PUSH
4379: LD_LOC 2
4383: PUSH
4384: LD_EXP 32
4388: PUSH
4389: EMPTY
4390: LIST
4391: DIFF
4392: ST_TO_ADDR
// if pom > 0 then
4393: LD_LOC 2
4397: PUSH
4398: LD_INT 0
4400: GREATER
4401: IFFALSE 4476
// begin DialogueOn ;
4403: CALL_OW 6
// if GetSex ( pom [ 1 ] ) = sex_male then
4407: LD_LOC 2
4411: PUSH
4412: LD_INT 1
4414: ARRAY
4415: PPUSH
4416: CALL_OW 258
4420: PUSH
4421: LD_INT 1
4423: EQUAL
4424: IFFALSE 4444
// Say ( pom [ 1 ] , D5c-Sol1-1 ) else
4426: LD_LOC 2
4430: PUSH
4431: LD_INT 1
4433: ARRAY
4434: PPUSH
4435: LD_STRING D5c-Sol1-1
4437: PPUSH
4438: CALL_OW 88
4442: GO 4460
// Say ( pom [ 1 ] , D5c-FSol1-1 ) ;
4444: LD_LOC 2
4448: PUSH
4449: LD_INT 1
4451: ARRAY
4452: PPUSH
4453: LD_STRING D5c-FSol1-1
4455: PPUSH
4456: CALL_OW 88
// Say ( JMM , D5c-JMM-1 ) ;
4460: LD_EXP 32
4464: PPUSH
4465: LD_STRING D5c-JMM-1
4467: PPUSH
4468: CALL_OW 88
// DialogueOff ;
4472: CALL_OW 7
// end ; if not disable_kecy_5D then
4476: LD_LOC 9
4480: NOT
4481: IFFALSE 4486
// enable ( 1 ) ;
4483: LD_INT 1
4485: ENABLE_MARKED
// kecy = false ;
4486: LD_ADDR_LOC 7
4490: PUSH
4491: LD_INT 0
4493: ST_TO_ADDR
// end ; enable ;
4494: ENABLE
// end ;
4495: PPOPN 1
4497: END
// every 0 0$1 trigger See ( You , A2_op1 ) or See ( You , A2_op2 ) or See ( You , A2_op3 ) do
4498: LD_EXP 1
4502: PPUSH
4503: LD_INT 89
4505: PPUSH
4506: CALL_OW 292
4510: PUSH
4511: LD_EXP 1
4515: PPUSH
4516: LD_INT 90
4518: PPUSH
4519: CALL_OW 292
4523: OR
4524: PUSH
4525: LD_EXP 1
4529: PPUSH
4530: LD_INT 91
4532: PPUSH
4533: CALL_OW 292
4537: OR
4538: IFFALSE 4837
4540: GO 4542
4542: DISABLE
// begin while kecy do
4543: LD_LOC 7
4547: IFFALSE 4558
// wait ( 0 0$1 ) ;
4549: LD_INT 35
4551: PPUSH
4552: CALL_OW 67
4556: GO 4543
// kecy = true ;
4558: LD_ADDR_LOC 7
4562: PUSH
4563: LD_INT 1
4565: ST_TO_ADDR
// CenterOnUnits ( [ A2_op1 , A2_op2 , A2_op3 ] ) ;
4566: LD_INT 89
4568: PUSH
4569: LD_INT 90
4571: PUSH
4572: LD_INT 91
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: LIST
4579: PPUSH
4580: CALL_OW 85
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
4584: LD_ADDR_LOC 2
4588: PUSH
4589: LD_INT 1
4591: PPUSH
4592: LD_INT 1
4594: PPUSH
4595: LD_EXP 32
4599: PUSH
4600: EMPTY
4601: LIST
4602: PPUSH
4603: CALL 6667 0 3
4607: ST_TO_ADDR
// if pom < 0 then
4608: LD_LOC 2
4612: PUSH
4613: LD_INT 0
4615: LESS
4616: IFFALSE 4629
// begin msg ( ERROR: GetPeople returns wrong data. Please report it as a bug ) ;
4618: LD_STRING ERROR: GetPeople returns wrong data. Please report it as a bug
4620: PPUSH
4621: CALL_OW 100
// konec_mise ;
4625: CALL 669 0 0
// end ; case pom of 0 :
4629: LD_LOC 2
4633: PUSH
4634: LD_INT 0
4636: DOUBLE
4637: EQUAL
4638: IFTRUE 4642
4640: GO 4665
4642: POP
// begin pom = JMM ;
4643: LD_ADDR_LOC 2
4647: PUSH
4648: LD_EXP 32
4652: ST_TO_ADDR
// pom1 = JMM ;
4653: LD_ADDR_LOC 3
4657: PUSH
4658: LD_EXP 32
4662: ST_TO_ADDR
// end ; 1 :
4663: GO 4729
4665: LD_INT 1
4667: DOUBLE
4668: EQUAL
4669: IFTRUE 4673
4671: GO 4700
4673: POP
// begin pom = pom [ 1 ] ;
4674: LD_ADDR_LOC 2
4678: PUSH
4679: LD_LOC 2
4683: PUSH
4684: LD_INT 1
4686: ARRAY
4687: ST_TO_ADDR
// pom1 = JMM ;
4688: LD_ADDR_LOC 3
4692: PUSH
4693: LD_EXP 32
4697: ST_TO_ADDR
// end ; else
4698: GO 4729
4700: POP
// begin pom1 = pom [ 2 ] ;
4701: LD_ADDR_LOC 3
4705: PUSH
4706: LD_LOC 2
4710: PUSH
4711: LD_INT 2
4713: ARRAY
4714: ST_TO_ADDR
// pom = pom [ 1 ] ;
4715: LD_ADDR_LOC 2
4719: PUSH
4720: LD_LOC 2
4724: PUSH
4725: LD_INT 1
4727: ARRAY
4728: ST_TO_ADDR
// end ; end ; DialogueOn ;
4729: CALL_OW 6
// if GetSex ( pom ) = sex_male then
4733: LD_LOC 2
4737: PPUSH
4738: CALL_OW 258
4742: PUSH
4743: LD_INT 1
4745: EQUAL
4746: IFFALSE 4762
// Say ( pom , D5a-Sol1-1 ) else
4748: LD_LOC 2
4752: PPUSH
4753: LD_STRING D5a-Sol1-1
4755: PPUSH
4756: CALL_OW 88
4760: GO 4774
// Say ( pom , D5a-FSol1-1 ) ;
4762: LD_LOC 2
4766: PPUSH
4767: LD_STRING D5a-FSol1-1
4769: PPUSH
4770: CALL_OW 88
// if GetSex ( pom1 ) = sex_male then
4774: LD_LOC 3
4778: PPUSH
4779: CALL_OW 258
4783: PUSH
4784: LD_INT 1
4786: EQUAL
4787: IFFALSE 4803
// Say ( pom1 , D5a-Sol2-1 ) else
4789: LD_LOC 3
4793: PPUSH
4794: LD_STRING D5a-Sol2-1
4796: PPUSH
4797: CALL_OW 88
4801: GO 4815
// Say ( pom1 , D5a-FSol2-1 ) ;
4803: LD_LOC 3
4807: PPUSH
4808: LD_STRING D5a-FSol2-1
4810: PPUSH
4811: CALL_OW 88
// DialogueOff ;
4815: CALL_OW 7
// if not disable_kecy_5D then
4819: LD_LOC 9
4823: NOT
4824: IFFALSE 4829
// enable ( 1 ) ;
4826: LD_INT 1
4828: ENABLE_MARKED
// kecy = false ;
4829: LD_ADDR_LOC 7
4833: PUSH
4834: LD_INT 0
4836: ST_TO_ADDR
// end ;
4837: END
// every 0 0$1 trigger not disable_kecy_5D marked 1 do
4838: LD_LOC 9
4842: NOT
4843: IFFALSE 5036
4845: GO 4847
4847: DISABLE
// begin while kecy do
4848: LD_LOC 7
4852: IFFALSE 4863
// wait ( 0 0$1 ) ;
4854: LD_INT 35
4856: PPUSH
4857: CALL_OW 67
4861: GO 4848
// kecy = true ;
4863: LD_ADDR_LOC 7
4867: PUSH
4868: LD_INT 1
4870: ST_TO_ADDR
// if IsOK ( Lisa ) then
4871: LD_EXP 37
4875: PPUSH
4876: CALL_OW 302
4880: IFFALSE 4896
// Say ( Lisa , D5d-Lisa-1 ) else
4882: LD_EXP 37
4886: PPUSH
4887: LD_STRING D5d-Lisa-1
4889: PPUSH
4890: CALL_OW 88
4894: GO 5008
// if IsOK ( Cyrus ) then
4896: LD_EXP 40
4900: PPUSH
4901: CALL_OW 302
4905: IFFALSE 4921
// Say ( Cyrus , D5d-Cyrus-1 ) else
4907: LD_EXP 40
4911: PPUSH
4912: LD_STRING D5d-Cyrus-1
4914: PPUSH
4915: CALL_OW 88
4919: GO 5008
// if IsOK ( Gary ) then
4921: LD_EXP 34
4925: PPUSH
4926: CALL_OW 302
4930: IFFALSE 4946
// Say ( Gary , D5d-Gary-1 ) else
4932: LD_EXP 34
4936: PPUSH
4937: LD_STRING D5d-Gary-1
4939: PPUSH
4940: CALL_OW 88
4944: GO 5008
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
4946: LD_ADDR_LOC 2
4950: PUSH
4951: LD_INT 22
4953: PUSH
4954: LD_EXP 1
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: PUSH
4963: LD_INT 21
4965: PUSH
4966: LD_INT 1
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: PPUSH
4977: CALL_OW 69
4981: ST_TO_ADDR
// if pom > 0 then
4982: LD_LOC 2
4986: PUSH
4987: LD_INT 0
4989: GREATER
4990: IFFALSE 5008
// Say ( pom [ 1 ] , D5d-Sol1-1 ) ;
4992: LD_LOC 2
4996: PUSH
4997: LD_INT 1
4999: ARRAY
5000: PPUSH
5001: LD_STRING D5d-Sol1-1
5003: PPUSH
5004: CALL_OW 88
// end ; Say ( JMM , D5d-JMM-1 ) ;
5008: LD_EXP 32
5012: PPUSH
5013: LD_STRING D5d-JMM-1
5015: PPUSH
5016: CALL_OW 88
// disable_kecy_5D = true ;
5020: LD_ADDR_LOC 9
5024: PUSH
5025: LD_INT 1
5027: ST_TO_ADDR
// kecy = false ;
5028: LD_ADDR_LOC 7
5032: PUSH
5033: LD_INT 0
5035: ST_TO_ADDR
// end ;
5036: END
// every 0 0$3 trigger GetSide ( A2_dep ) = You or IsDead ( A2_dep ) do var sci ;
5037: LD_INT 46
5039: PPUSH
5040: CALL_OW 255
5044: PUSH
5045: LD_EXP 1
5049: EQUAL
5050: PUSH
5051: LD_INT 46
5053: PPUSH
5054: CALL_OW 301
5058: OR
5059: IFFALSE 5319
5061: GO 5063
5063: DISABLE
5064: LD_INT 0
5066: PPUSH
// begin wait ( 0 0$1 ) ;
5067: LD_INT 35
5069: PPUSH
5070: CALL_OW 67
// CreateResourcesArea ( mat_artefact , 5 , Art_zone , false ) ;
5074: LD_INT 4
5076: PPUSH
5077: LD_INT 5
5079: PPUSH
5080: LD_INT 31
5082: PPUSH
5083: LD_INT 0
5085: PPUSH
5086: CALL_OW 59
// PlaceSeeing ( 16 , 9 , You , - 5 ) ;
5090: LD_INT 16
5092: PPUSH
5093: LD_INT 9
5095: PPUSH
5096: LD_EXP 1
5100: PPUSH
5101: LD_INT 5
5103: NEG
5104: PPUSH
5105: CALL_OW 330
// wait ( 0 0$1 ) ;
5109: LD_INT 35
5111: PPUSH
5112: CALL_OW 67
// DialogueOn ;
5116: CALL_OW 6
// CenterOnXY ( 17 , 10 ) ;
5120: LD_INT 17
5122: PPUSH
5123: LD_INT 10
5125: PPUSH
5126: CALL_OW 84
// pom = GetPeople ( sex_male , class_scientistic , [ JMM ] ) ;
5130: LD_ADDR_LOC 2
5134: PUSH
5135: LD_INT 1
5137: PPUSH
5138: LD_INT 4
5140: PPUSH
5141: LD_EXP 32
5145: PUSH
5146: EMPTY
5147: LIST
5148: PPUSH
5149: CALL 6667 0 3
5153: ST_TO_ADDR
// if pom then
5154: LD_LOC 2
5158: IFFALSE 5172
// sci = pom else
5160: LD_ADDR_VAR 0 1
5164: PUSH
5165: LD_LOC 2
5169: ST_TO_ADDR
5170: GO 5223
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_nation , 1 ] ] ) diff JMM ;
5172: LD_ADDR_VAR 0 1
5176: PUSH
5177: LD_INT 22
5179: PUSH
5180: LD_INT 1
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PUSH
5187: LD_INT 26
5189: PUSH
5190: LD_INT 1
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: PUSH
5197: LD_INT 23
5199: PUSH
5200: LD_INT 1
5202: PUSH
5203: EMPTY
5204: LIST
5205: LIST
5206: PUSH
5207: EMPTY
5208: LIST
5209: LIST
5210: LIST
5211: PPUSH
5212: CALL_OW 69
5216: PUSH
5217: LD_EXP 32
5221: DIFF
5222: ST_TO_ADDR
// if sci then
5223: LD_VAR 0 1
5227: IFFALSE 5285
// begin Say ( sci [ 1 ] , D6-Sci1-1 ) ;
5229: LD_VAR 0 1
5233: PUSH
5234: LD_INT 1
5236: ARRAY
5237: PPUSH
5238: LD_STRING D6-Sci1-1
5240: PPUSH
5241: CALL_OW 88
// Say ( JMM , D6-JMM-1 ) ;
5245: LD_EXP 32
5249: PPUSH
5250: LD_STRING D6-JMM-1
5252: PPUSH
5253: CALL_OW 88
// Say ( sci [ 1 ] , D6-Sci1-2 ) ;
5257: LD_VAR 0 1
5261: PUSH
5262: LD_INT 1
5264: ARRAY
5265: PPUSH
5266: LD_STRING D6-Sci1-2
5268: PPUSH
5269: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
5273: LD_EXP 32
5277: PPUSH
5278: LD_STRING D6-JMM-2
5280: PPUSH
5281: CALL_OW 88
// end ; DialogueOff ;
5285: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
5289: LD_STRING M3
5291: PPUSH
5292: CALL_OW 337
// RemoveSeeing ( 16 , 9 , You ) ;
5296: LD_INT 16
5298: PPUSH
5299: LD_INT 9
5301: PPUSH
5302: LD_EXP 1
5306: PPUSH
5307: CALL_OW 331
// A2_dobyta = true ;
5311: LD_ADDR_EXP 29
5315: PUSH
5316: LD_INT 1
5318: ST_TO_ADDR
// end ;
5319: PPOPN 1
5321: END
// every 0 0$20 trigger A2_dobyta do
5322: LD_EXP 29
5326: IFFALSE 5665
5328: GO 5330
5330: DISABLE
// begin if A1_dobyta and A3_dobyta then
5331: LD_EXP 28
5335: PUSH
5336: LD_EXP 30
5340: AND
5341: IFFALSE 5345
// exit ;
5343: GO 5665
// wait ( 0 0$10 ) ;
5345: LD_INT 350
5347: PPUSH
5348: CALL_OW 67
// if not IsOK ( A3_solop ) then
5352: LD_INT 102
5354: PPUSH
5355: CALL_OW 302
5359: NOT
5360: IFFALSE 5364
// exit ;
5362: GO 5665
// DialogueOn ;
5364: CALL_OW 6
// pom = GetPeople ( sex_male , class_soldier , [ JMM , Cyrus , Gary , Bobby ] ) ;
5368: LD_ADDR_LOC 2
5372: PUSH
5373: LD_INT 1
5375: PPUSH
5376: LD_INT 1
5378: PPUSH
5379: LD_EXP 32
5383: PUSH
5384: LD_EXP 40
5388: PUSH
5389: LD_EXP 34
5393: PUSH
5394: LD_EXP 35
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: LIST
5403: LIST
5404: PPUSH
5405: CALL 6667 0 3
5409: ST_TO_ADDR
// if pom = 0 then
5410: LD_LOC 2
5414: PUSH
5415: LD_INT 0
5417: EQUAL
5418: IFFALSE 5444
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
5420: LD_ADDR_LOC 2
5424: PUSH
5425: LD_INT 1
5427: PPUSH
5428: LD_INT 1
5430: PPUSH
5431: LD_EXP 32
5435: PUSH
5436: EMPTY
5437: LIST
5438: PPUSH
5439: CALL 6667 0 3
5443: ST_TO_ADDR
// if pom = 0 then
5444: LD_LOC 2
5448: PUSH
5449: LD_INT 0
5451: EQUAL
5452: IFFALSE 5466
// pom = JMM else
5454: LD_ADDR_LOC 2
5458: PUSH
5459: LD_EXP 32
5463: ST_TO_ADDR
5464: GO 5480
// pom = pom [ 1 ] ;
5466: LD_ADDR_LOC 2
5470: PUSH
5471: LD_LOC 2
5475: PUSH
5476: LD_INT 1
5478: ARRAY
5479: ST_TO_ADDR
// Say ( pom , D7-Sol1-1 ) ;
5480: LD_LOC 2
5484: PPUSH
5485: LD_STRING D7-Sol1-1
5487: PPUSH
5488: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
5492: LD_EXP 32
5496: PPUSH
5497: LD_STRING D7-JMM-1
5499: PPUSH
5500: CALL_OW 88
// SayRadio ( A3_solop , D7-Ar1-1 ) ;
5504: LD_INT 102
5506: PPUSH
5507: LD_STRING D7-Ar1-1
5509: PPUSH
5510: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
5514: LD_EXP 32
5518: PPUSH
5519: LD_STRING D7-JMM-2
5521: PPUSH
5522: CALL_OW 88
// SayRadio ( A3_solop , D7-Ar1-2 ) ;
5526: LD_INT 102
5528: PPUSH
5529: LD_STRING D7-Ar1-2
5531: PPUSH
5532: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
5536: LD_EXP 32
5540: PPUSH
5541: LD_STRING D7-JMM-3
5543: PPUSH
5544: CALL_OW 88
// SayRadio ( A3_solop , D7-Ar1-3 ) ;
5548: LD_INT 102
5550: PPUSH
5551: LD_STRING D7-Ar1-3
5553: PPUSH
5554: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
5558: LD_EXP 32
5562: PPUSH
5563: LD_STRING D7-JMM-4
5565: PPUSH
5566: CALL_OW 88
// CenterOnXY ( 126 , 93 ) ;
5570: LD_INT 126
5572: PPUSH
5573: LD_INT 93
5575: PPUSH
5576: CALL_OW 84
// RevealFogArea ( You , Baziny ) ;
5580: LD_EXP 1
5584: PPUSH
5585: LD_INT 12
5587: PPUSH
5588: CALL_OW 332
// SayRadio ( A3_solop , D7-Ar1-4 ) ;
5592: LD_INT 102
5594: PPUSH
5595: LD_STRING D7-Ar1-4
5597: PPUSH
5598: CALL_OW 94
// pom = Query ( QCameras ) ;
5602: LD_ADDR_LOC 2
5606: PUSH
5607: LD_STRING QCameras
5609: PPUSH
5610: CALL_OW 97
5614: ST_TO_ADDR
// if pom = 1 then
5615: LD_LOC 2
5619: PUSH
5620: LD_INT 1
5622: EQUAL
5623: IFFALSE 5652
// begin oposoldier = 1 ;
5625: LD_ADDR_EXP 46
5629: PUSH
5630: LD_INT 1
5632: ST_TO_ADDR
// ChangeMissionObjectives ( MCar ) ;
5633: LD_STRING MCar
5635: PPUSH
5636: CALL_OW 337
// SetAreaMapShow ( baziny , 1 ) ;
5640: LD_INT 12
5642: PPUSH
5643: LD_INT 1
5645: PPUSH
5646: CALL_OW 424
// end else
5650: GO 5661
// oposoldier = - 1 ;
5652: LD_ADDR_EXP 46
5656: PUSH
5657: LD_INT 1
5659: NEG
5660: ST_TO_ADDR
// DialogueOff ;
5661: CALL_OW 7
// end ;
5665: END
// export function dialog_kamery ; begin
5666: LD_INT 0
5668: PPUSH
// if not IsOK ( A3_solop ) then
5669: LD_INT 102
5671: PPUSH
5672: CALL_OW 302
5676: NOT
5677: IFFALSE 5681
// exit ;
5679: GO 5783
// Say ( A3_solop , D7a-Ar1-1 ) ;
5681: LD_INT 102
5683: PPUSH
5684: LD_STRING D7a-Ar1-1
5686: PPUSH
5687: CALL_OW 88
// HiddenCamera ( 87 , 3 , You ) ;
5691: LD_INT 87
5693: PPUSH
5694: LD_INT 3
5696: PPUSH
5697: LD_EXP 1
5701: PPUSH
5702: CALL_OW 244
// HiddenCamera ( 105 , 39 , You ) ;
5706: LD_INT 105
5708: PPUSH
5709: LD_INT 39
5711: PPUSH
5712: LD_EXP 1
5716: PPUSH
5717: CALL_OW 244
// HiddenCamera ( 134 , 56 , You ) ;
5721: LD_INT 134
5723: PPUSH
5724: LD_INT 56
5726: PPUSH
5727: LD_EXP 1
5731: PPUSH
5732: CALL_OW 244
// HiddenCamera ( 122 , 51 , You ) ;
5736: LD_INT 122
5738: PPUSH
5739: LD_INT 51
5741: PPUSH
5742: LD_EXP 1
5746: PPUSH
5747: CALL_OW 244
// HiddenCamera ( 91 , 8 , You ) ;
5751: LD_INT 91
5753: PPUSH
5754: LD_INT 8
5756: PPUSH
5757: LD_EXP 1
5761: PPUSH
5762: CALL_OW 244
// ChangeMissionObjectives ( MCarOut ) ;
5766: LD_STRING MCarOut
5768: PPUSH
5769: CALL_OW 337
// SetAreaMapShow ( baziny , 0 ) ;
5773: LD_INT 12
5775: PPUSH
5776: LD_INT 0
5778: PPUSH
5779: CALL_OW 424
// end ;
5783: LD_VAR 0 1
5787: RET
// every 1 1$0 do
5788: GO 5790
5790: DISABLE
// begin wait ( timelimit [ difficulty ] ) ;
5791: LD_EXP 50
5795: PUSH
5796: LD_OWVAR 67
5800: ARRAY
5801: PPUSH
5802: CALL_OW 67
// InGameOn ;
5806: CALL_OW 8
// Say ( Powell , D9-Pow-1 ) ;
5810: LD_EXP 33
5814: PPUSH
5815: LD_STRING D9-Pow-1
5817: PPUSH
5818: CALL_OW 88
// InGameOff ;
5822: CALL_OW 9
// wait ( 10 10$0 ) ;
5826: LD_INT 21000
5828: PPUSH
5829: CALL_OW 67
// DialogueOn ;
5833: CALL_OW 6
// Say ( Powell , D9a-Pow-1 ) ;
5837: LD_EXP 33
5841: PPUSH
5842: LD_STRING D9a-Pow-1
5844: PPUSH
5845: CALL_OW 88
// end_of_mission_time ;
5849: CALL 462 0 0
// end ;
5853: END
// every 0 0$3 do
5854: GO 5856
5856: DISABLE
// begin pom1 = false ;
5857: LD_ADDR_LOC 3
5861: PUSH
5862: LD_INT 0
5864: ST_TO_ADDR
// pom = [ A3_are1 , A3_are2 , A3_are3 , A3_are4 , A3_are5 , A3_are6 , A3_are7 , A3_are8 , A3_are9 ] ;
5865: LD_ADDR_LOC 2
5869: PUSH
5870: LD_INT 23
5872: PUSH
5873: LD_INT 18
5875: PUSH
5876: LD_INT 44
5878: PUSH
5879: LD_INT 19
5881: PUSH
5882: LD_INT 24
5884: PUSH
5885: LD_INT 20
5887: PUSH
5888: LD_INT 21
5890: PUSH
5891: LD_INT 93
5893: PUSH
5894: LD_INT 22
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: ST_TO_ADDR
// for i in pom do
5908: LD_ADDR_LOC 1
5912: PUSH
5913: LD_LOC 2
5917: PUSH
5918: FOR_IN
5919: IFFALSE 5947
// if See ( You , i ) then
5921: LD_EXP 1
5925: PPUSH
5926: LD_LOC 1
5930: PPUSH
5931: CALL_OW 292
5935: IFFALSE 5945
// pom1 = true ;
5937: LD_ADDR_LOC 3
5941: PUSH
5942: LD_INT 1
5944: ST_TO_ADDR
5945: GO 5918
5947: POP
5948: POP
// if not pom1 then
5949: LD_LOC 3
5953: NOT
5954: IFFALSE 5959
// enable else
5956: ENABLE
5957: GO 6186
// begin if not ( IsOK ( A3_rv1 ) or IsOK ( A3_rv2 ) or IsOK ( A3_rv3 ) ) then
5959: LD_INT 26
5961: PPUSH
5962: CALL_OW 302
5966: PUSH
5967: LD_INT 25
5969: PPUSH
5970: CALL_OW 302
5974: OR
5975: PUSH
5976: LD_INT 27
5978: PPUSH
5979: CALL_OW 302
5983: OR
5984: NOT
5985: IFFALSE 5990
// begin disable ;
5987: DISABLE
// exit ;
5988: GO 6186
// end ; pom = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] ] ) ;
5990: LD_ADDR_LOC 2
5994: PUSH
5995: LD_INT 22
5997: PUSH
5998: LD_EXP 1
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: PUSH
6007: LD_INT 25
6009: PUSH
6010: LD_INT 1
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: PPUSH
6021: CALL_OW 69
6025: ST_TO_ADDR
// if pom = 0 then
6026: LD_LOC 2
6030: PUSH
6031: LD_INT 0
6033: EQUAL
6034: IFFALSE 6060
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
6036: LD_ADDR_LOC 2
6040: PUSH
6041: LD_INT 1
6043: PPUSH
6044: LD_INT 1
6046: PPUSH
6047: LD_EXP 32
6051: PUSH
6052: EMPTY
6053: LIST
6054: PPUSH
6055: CALL 6667 0 3
6059: ST_TO_ADDR
// if pom = 0 then
6060: LD_LOC 2
6064: PUSH
6065: LD_INT 0
6067: EQUAL
6068: IFFALSE 6088
// pom = GetPeople ( sex_female , class_soldier , [ ] ) ;
6070: LD_ADDR_LOC 2
6074: PUSH
6075: LD_INT 2
6077: PPUSH
6078: LD_INT 1
6080: PPUSH
6081: EMPTY
6082: PPUSH
6083: CALL 6667 0 3
6087: ST_TO_ADDR
// if pom = 0 then
6088: LD_LOC 2
6092: PUSH
6093: LD_INT 0
6095: EQUAL
6096: IFFALSE 6111
// pom = [ JMM ] ;
6098: LD_ADDR_LOC 2
6102: PUSH
6103: LD_EXP 32
6107: PUSH
6108: EMPTY
6109: LIST
6110: ST_TO_ADDR
// if GetSex ( pom [ 1 ] ) = sex_male then
6111: LD_LOC 2
6115: PUSH
6116: LD_INT 1
6118: ARRAY
6119: PPUSH
6120: CALL_OW 258
6124: PUSH
6125: LD_INT 1
6127: EQUAL
6128: IFFALSE 6148
// Say ( pom [ 1 ] , D8-Sol1-1 ) else
6130: LD_LOC 2
6134: PUSH
6135: LD_INT 1
6137: ARRAY
6138: PPUSH
6139: LD_STRING D8-Sol1-1
6141: PPUSH
6142: CALL_OW 88
6146: GO 6164
// Say ( pom [ 1 ] , D8-FSol1-1 ) ;
6148: LD_LOC 2
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: LD_STRING D8-FSol1-1
6159: PPUSH
6160: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
6164: LD_EXP 32
6168: PPUSH
6169: LD_STRING D8-JMM-1
6171: PPUSH
6172: CALL_OW 88
// wait ( 0 0$20 ) ;
6176: LD_INT 700
6178: PPUSH
6179: CALL_OW 67
// enable ( 2 ) ;
6183: LD_INT 2
6185: ENABLE_MARKED
// end ; end ;
6186: END
// every 0 0$5 marked 2 do
6187: GO 6189
6189: DISABLE
// begin pom1 = false ;
6190: LD_ADDR_LOC 3
6194: PUSH
6195: LD_INT 0
6197: ST_TO_ADDR
// pom = [ A3_rv1 , A3_rv2 , A3_rv3 ] ;
6198: LD_ADDR_LOC 2
6202: PUSH
6203: LD_INT 26
6205: PUSH
6206: LD_INT 25
6208: PUSH
6209: LD_INT 27
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: LIST
6216: ST_TO_ADDR
// for i in pom do
6217: LD_ADDR_LOC 1
6221: PUSH
6222: LD_LOC 2
6226: PUSH
6227: FOR_IN
6228: IFFALSE 6256
// if See ( You , i ) then
6230: LD_EXP 1
6234: PPUSH
6235: LD_LOC 1
6239: PPUSH
6240: CALL_OW 292
6244: IFFALSE 6254
// pom1 = true ;
6246: LD_ADDR_LOC 3
6250: PUSH
6251: LD_INT 1
6253: ST_TO_ADDR
6254: GO 6227
6256: POP
6257: POP
// if not pom1 then
6258: LD_LOC 3
6262: NOT
6263: IFFALSE 6268
// enable else
6265: ENABLE
6266: GO 6533
// begin pom = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] ] ) diff JMM ;
6268: LD_ADDR_LOC 2
6272: PUSH
6273: LD_INT 22
6275: PUSH
6276: LD_EXP 1
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PUSH
6285: LD_INT 25
6287: PUSH
6288: LD_INT 1
6290: PUSH
6291: EMPTY
6292: LIST
6293: LIST
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: PPUSH
6299: CALL_OW 69
6303: PUSH
6304: LD_EXP 32
6308: DIFF
6309: ST_TO_ADDR
// if pom = 0 then
6310: LD_LOC 2
6314: PUSH
6315: LD_INT 0
6317: EQUAL
6318: IFFALSE 6344
// pom = GetPeople ( sex_male , class_soldier , [ JMM ] ) ;
6320: LD_ADDR_LOC 2
6324: PUSH
6325: LD_INT 1
6327: PPUSH
6328: LD_INT 1
6330: PPUSH
6331: LD_EXP 32
6335: PUSH
6336: EMPTY
6337: LIST
6338: PPUSH
6339: CALL 6667 0 3
6343: ST_TO_ADDR
// if pom = 0 then
6344: LD_LOC 2
6348: PUSH
6349: LD_INT 0
6351: EQUAL
6352: IFFALSE 6378
// pom = GetPeople ( sex_female , class_soldier , [ JMM ] ) ;
6354: LD_ADDR_LOC 2
6358: PUSH
6359: LD_INT 2
6361: PPUSH
6362: LD_INT 1
6364: PPUSH
6365: LD_EXP 32
6369: PUSH
6370: EMPTY
6371: LIST
6372: PPUSH
6373: CALL 6667 0 3
6377: ST_TO_ADDR
// if pom = 0 then
6378: LD_LOC 2
6382: PUSH
6383: LD_INT 0
6385: EQUAL
6386: IFFALSE 6430
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) diff JMM ;
6388: LD_ADDR_LOC 2
6392: PUSH
6393: LD_INT 22
6395: PUSH
6396: LD_EXP 1
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: LD_INT 21
6407: PUSH
6408: LD_INT 1
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PPUSH
6419: CALL_OW 69
6423: PUSH
6424: LD_EXP 32
6428: DIFF
6429: ST_TO_ADDR
// if pom = 0 then
6430: LD_LOC 2
6434: PUSH
6435: LD_INT 0
6437: EQUAL
6438: IFFALSE 6442
// exit ;
6440: GO 6533
// DialogueOn ;
6442: CALL_OW 6
// CenterOnUnits ( [ A3_rv1 , A3_rv2 , A3_rv3 ] ) ;
6446: LD_INT 26
6448: PUSH
6449: LD_INT 25
6451: PUSH
6452: LD_INT 27
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: PPUSH
6460: CALL_OW 85
// if GetSex ( pom [ 1 ] ) = sex_male then
6464: LD_LOC 2
6468: PUSH
6469: LD_INT 1
6471: ARRAY
6472: PPUSH
6473: CALL_OW 258
6477: PUSH
6478: LD_INT 1
6480: EQUAL
6481: IFFALSE 6501
// Say ( pom [ 1 ] , D8a-Sol2-1 ) else
6483: LD_LOC 2
6487: PUSH
6488: LD_INT 1
6490: ARRAY
6491: PPUSH
6492: LD_STRING D8a-Sol2-1
6494: PPUSH
6495: CALL_OW 88
6499: GO 6517
// Say ( pom [ 1 ] , D8a-FSol2-1 ) ;
6501: LD_LOC 2
6505: PUSH
6506: LD_INT 1
6508: ARRAY
6509: PPUSH
6510: LD_STRING D8a-FSol2-1
6512: PPUSH
6513: CALL_OW 88
// Say ( JMM , D8a-JMM-1 ) ;
6517: LD_EXP 32
6521: PPUSH
6522: LD_STRING D8a-JMM-1
6524: PPUSH
6525: CALL_OW 88
// DialogueOff ;
6529: CALL_OW 7
// end ; end ;
6533: END
// every 0 0$0.1 trigger FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) > 0 do var pom ;
6534: LD_INT 3
6536: PPUSH
6537: LD_INT 22
6539: PUSH
6540: LD_EXP 1
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: PUSH
6549: EMPTY
6550: LIST
6551: PPUSH
6552: CALL_OW 70
6556: PUSH
6557: LD_INT 0
6559: GREATER
6560: IFFALSE 6664
6562: GO 6564
6564: DISABLE
6565: LD_INT 0
6567: PPUSH
// begin case Rand ( 1 , 3 ) of 1 :
6568: LD_INT 1
6570: PPUSH
6571: LD_INT 3
6573: PPUSH
6574: CALL_OW 12
6578: PUSH
6579: LD_INT 1
6581: DOUBLE
6582: EQUAL
6583: IFTRUE 6587
6585: GO 6598
6587: POP
// pom = A1_vo1 ; 2 :
6588: LD_ADDR_VAR 0 1
6592: PUSH
6593: LD_INT 72
6595: ST_TO_ADDR
6596: GO 6637
6598: LD_INT 2
6600: DOUBLE
6601: EQUAL
6602: IFTRUE 6606
6604: GO 6617
6606: POP
// pom = A1_ve1 ; 3 :
6607: LD_ADDR_VAR 0 1
6611: PUSH
6612: LD_INT 87
6614: ST_TO_ADDR
6615: GO 6637
6617: LD_INT 3
6619: DOUBLE
6620: EQUAL
6621: IFTRUE 6625
6623: GO 6636
6625: POP
// pom = A1_vo4 ; end ;
6626: LD_ADDR_VAR 0 1
6630: PUSH
6631: LD_INT 76
6633: ST_TO_ADDR
6634: GO 6637
6636: POP
// if IsOK ( pom ) then
6637: LD_VAR 0 1
6641: PPUSH
6642: CALL_OW 302
6646: IFFALSE 6660
// Say ( pom , D2aa-Ar1-1 ) ;
6648: LD_VAR 0 1
6652: PPUSH
6653: LD_STRING D2aa-Ar1-1
6655: PPUSH
6656: CALL_OW 88
// uprav_zivoty_arabskych_budov ;
6660: CALL 23441 0 0
// end ;
6664: PPOPN 1
6666: END
// function GetPeople ( sex , povolani , diffseznam ) ; var pom , pom1 , pom2 , pom3 , pom4 , pom5 , pom6 ; var pom1a , pom2a , pom3a , pom4a , pom5a , pom6a ; var j ; begin
6667: LD_INT 0
6669: PPUSH
6670: PPUSH
6671: PPUSH
6672: PPUSH
6673: PPUSH
6674: PPUSH
6675: PPUSH
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
6680: PPUSH
6681: PPUSH
6682: PPUSH
6683: PPUSH
// pom1 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_scientistic ] , [ f_sex , sex ] ] ) ;
6684: LD_ADDR_VAR 0 6
6688: PUSH
6689: LD_INT 22
6691: PUSH
6692: LD_EXP 1
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: PUSH
6701: LD_INT 25
6703: PUSH
6704: LD_INT 4
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: PUSH
6711: LD_INT 26
6713: PUSH
6714: LD_VAR 0 1
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: LIST
6727: PPUSH
6728: CALL_OW 69
6732: ST_TO_ADDR
// pom1a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
6733: LD_ADDR_VAR 0 12
6737: PUSH
6738: LD_INT 22
6740: PUSH
6741: LD_EXP 1
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: PUSH
6750: LD_INT 21
6752: PUSH
6753: LD_INT 2
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: PUSH
6760: LD_INT 33
6762: PUSH
6763: LD_INT 1
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: LIST
6774: PPUSH
6775: CALL_OW 69
6779: ST_TO_ADDR
// for j in pom1a do
6780: LD_ADDR_VAR 0 18
6784: PUSH
6785: LD_VAR 0 12
6789: PUSH
6790: FOR_IN
6791: IFFALSE 6831
// if GetClass ( Isdrivenby ( j ) ) = class_scientistic then
6793: LD_VAR 0 18
6797: PPUSH
6798: CALL_OW 311
6802: PPUSH
6803: CALL_OW 257
6807: PUSH
6808: LD_INT 4
6810: EQUAL
6811: IFFALSE 6829
// pom1 = pom1 ^ j ;
6813: LD_ADDR_VAR 0 6
6817: PUSH
6818: LD_VAR 0 6
6822: PUSH
6823: LD_VAR 0 18
6827: ADD
6828: ST_TO_ADDR
6829: GO 6790
6831: POP
6832: POP
// pom2 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mechanic ] , [ f_sex , sex ] ] ) ;
6833: LD_ADDR_VAR 0 7
6837: PUSH
6838: LD_INT 22
6840: PUSH
6841: LD_EXP 1
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PUSH
6850: LD_INT 25
6852: PUSH
6853: LD_INT 3
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PUSH
6860: LD_INT 26
6862: PUSH
6863: LD_VAR 0 1
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: LIST
6876: PPUSH
6877: CALL_OW 69
6881: ST_TO_ADDR
// pom2a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
6882: LD_ADDR_VAR 0 13
6886: PUSH
6887: LD_INT 22
6889: PUSH
6890: LD_EXP 1
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: PUSH
6899: LD_INT 21
6901: PUSH
6902: LD_INT 2
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: PUSH
6909: LD_INT 33
6911: PUSH
6912: LD_INT 1
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: LIST
6923: PPUSH
6924: CALL_OW 69
6928: ST_TO_ADDR
// for j in pom2a do
6929: LD_ADDR_VAR 0 18
6933: PUSH
6934: LD_VAR 0 13
6938: PUSH
6939: FOR_IN
6940: IFFALSE 6980
// if GetClass ( Isdrivenby ( j ) ) = class_mechanic then
6942: LD_VAR 0 18
6946: PPUSH
6947: CALL_OW 311
6951: PPUSH
6952: CALL_OW 257
6956: PUSH
6957: LD_INT 3
6959: EQUAL
6960: IFFALSE 6978
// pom2 = pom2 ^ j ;
6962: LD_ADDR_VAR 0 7
6966: PUSH
6967: LD_VAR 0 7
6971: PUSH
6972: LD_VAR 0 18
6976: ADD
6977: ST_TO_ADDR
6978: GO 6939
6980: POP
6981: POP
// pom3 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_engineer ] , [ f_sex , sex ] ] ) ;
6982: LD_ADDR_VAR 0 8
6986: PUSH
6987: LD_INT 22
6989: PUSH
6990: LD_EXP 1
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: PUSH
6999: LD_INT 25
7001: PUSH
7002: LD_INT 2
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: PUSH
7009: LD_INT 26
7011: PUSH
7012: LD_VAR 0 1
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: PPUSH
7026: CALL_OW 69
7030: ST_TO_ADDR
// pom3a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
7031: LD_ADDR_VAR 0 14
7035: PUSH
7036: LD_INT 22
7038: PUSH
7039: LD_EXP 1
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 21
7050: PUSH
7051: LD_INT 2
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: LD_INT 33
7060: PUSH
7061: LD_INT 1
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: LIST
7072: PPUSH
7073: CALL_OW 69
7077: ST_TO_ADDR
// for j in pom3a do
7078: LD_ADDR_VAR 0 18
7082: PUSH
7083: LD_VAR 0 14
7087: PUSH
7088: FOR_IN
7089: IFFALSE 7129
// if GetClass ( Isdrivenby ( j ) ) = class_engineer then
7091: LD_VAR 0 18
7095: PPUSH
7096: CALL_OW 311
7100: PPUSH
7101: CALL_OW 257
7105: PUSH
7106: LD_INT 2
7108: EQUAL
7109: IFFALSE 7127
// pom3 = pom3 ^ j ;
7111: LD_ADDR_VAR 0 8
7115: PUSH
7116: LD_VAR 0 8
7120: PUSH
7121: LD_VAR 0 18
7125: ADD
7126: ST_TO_ADDR
7127: GO 7088
7129: POP
7130: POP
// pom4 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_soldier ] , [ f_sex , sex ] ] ) ;
7131: LD_ADDR_VAR 0 9
7135: PUSH
7136: LD_INT 22
7138: PUSH
7139: LD_EXP 1
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 25
7150: PUSH
7151: LD_INT 1
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: LD_INT 26
7160: PUSH
7161: LD_VAR 0 1
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: LIST
7174: PPUSH
7175: CALL_OW 69
7179: ST_TO_ADDR
// pom4a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
7180: LD_ADDR_VAR 0 15
7184: PUSH
7185: LD_INT 22
7187: PUSH
7188: LD_EXP 1
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 21
7199: PUSH
7200: LD_INT 2
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 33
7209: PUSH
7210: LD_INT 1
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: LIST
7221: PPUSH
7222: CALL_OW 69
7226: ST_TO_ADDR
// for j in pom4a do
7227: LD_ADDR_VAR 0 18
7231: PUSH
7232: LD_VAR 0 15
7236: PUSH
7237: FOR_IN
7238: IFFALSE 7278
// if GetClass ( Isdrivenby ( j ) ) = class_soldier then
7240: LD_VAR 0 18
7244: PPUSH
7245: CALL_OW 311
7249: PPUSH
7250: CALL_OW 257
7254: PUSH
7255: LD_INT 1
7257: EQUAL
7258: IFFALSE 7276
// pom4 = pom4 ^ j ;
7260: LD_ADDR_VAR 0 9
7264: PUSH
7265: LD_VAR 0 9
7269: PUSH
7270: LD_VAR 0 18
7274: ADD
7275: ST_TO_ADDR
7276: GO 7237
7278: POP
7279: POP
// pom5 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_sniper ] , [ f_sex , sex ] ] ) ;
7280: LD_ADDR_VAR 0 10
7284: PUSH
7285: LD_INT 22
7287: PUSH
7288: LD_EXP 1
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: LD_INT 25
7299: PUSH
7300: LD_INT 5
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PUSH
7307: LD_INT 26
7309: PUSH
7310: LD_VAR 0 1
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: LIST
7323: PPUSH
7324: CALL_OW 69
7328: ST_TO_ADDR
// pom5a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
7329: LD_ADDR_VAR 0 16
7333: PUSH
7334: LD_INT 22
7336: PUSH
7337: LD_EXP 1
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: PUSH
7346: LD_INT 21
7348: PUSH
7349: LD_INT 2
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: PUSH
7356: LD_INT 33
7358: PUSH
7359: LD_INT 1
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: LIST
7370: PPUSH
7371: CALL_OW 69
7375: ST_TO_ADDR
// for j in pom5a do
7376: LD_ADDR_VAR 0 18
7380: PUSH
7381: LD_VAR 0 16
7385: PUSH
7386: FOR_IN
7387: IFFALSE 7427
// if GetClass ( Isdrivenby ( j ) ) = class_sniper then
7389: LD_VAR 0 18
7393: PPUSH
7394: CALL_OW 311
7398: PPUSH
7399: CALL_OW 257
7403: PUSH
7404: LD_INT 5
7406: EQUAL
7407: IFFALSE 7425
// pom5 = pom5 ^ j ;
7409: LD_ADDR_VAR 0 10
7413: PUSH
7414: LD_VAR 0 10
7418: PUSH
7419: LD_VAR 0 18
7423: ADD
7424: ST_TO_ADDR
7425: GO 7386
7427: POP
7428: POP
// pom6 = FilterAllUnits ( [ [ f_side , You ] , [ f_class , class_mortar ] , [ f_sex , sex ] ] ) ;
7429: LD_ADDR_VAR 0 11
7433: PUSH
7434: LD_INT 22
7436: PUSH
7437: LD_EXP 1
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 25
7448: PUSH
7449: LD_INT 8
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PUSH
7456: LD_INT 26
7458: PUSH
7459: LD_VAR 0 1
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: LIST
7472: PPUSH
7473: CALL_OW 69
7477: ST_TO_ADDR
// pom6a = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] ] ) ;
7478: LD_ADDR_VAR 0 17
7482: PUSH
7483: LD_INT 22
7485: PUSH
7486: LD_EXP 1
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PUSH
7495: LD_INT 21
7497: PUSH
7498: LD_INT 2
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PUSH
7505: LD_INT 33
7507: PUSH
7508: LD_INT 1
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: LIST
7519: PPUSH
7520: CALL_OW 69
7524: ST_TO_ADDR
// for j in pom6a do
7525: LD_ADDR_VAR 0 18
7529: PUSH
7530: LD_VAR 0 17
7534: PUSH
7535: FOR_IN
7536: IFFALSE 7576
// if GetClass ( Isdrivenby ( j ) ) = class_mortar then
7538: LD_VAR 0 18
7542: PPUSH
7543: CALL_OW 311
7547: PPUSH
7548: CALL_OW 257
7552: PUSH
7553: LD_INT 8
7555: EQUAL
7556: IFFALSE 7574
// pom6 = pom6 ^ j ;
7558: LD_ADDR_VAR 0 11
7562: PUSH
7563: LD_VAR 0 11
7567: PUSH
7568: LD_VAR 0 18
7572: ADD
7573: ST_TO_ADDR
7574: GO 7535
7576: POP
7577: POP
// case povolani of class_scientistic :
7578: LD_VAR 0 2
7582: PUSH
7583: LD_INT 4
7585: DOUBLE
7586: EQUAL
7587: IFTRUE 7591
7589: GO 7604
7591: POP
// pom = pom1 ; class_mechanic :
7592: LD_ADDR_VAR 0 5
7596: PUSH
7597: LD_VAR 0 6
7601: ST_TO_ADDR
7602: GO 7710
7604: LD_INT 3
7606: DOUBLE
7607: EQUAL
7608: IFTRUE 7612
7610: GO 7625
7612: POP
// pom = pom2 ; class_engineer :
7613: LD_ADDR_VAR 0 5
7617: PUSH
7618: LD_VAR 0 7
7622: ST_TO_ADDR
7623: GO 7710
7625: LD_INT 2
7627: DOUBLE
7628: EQUAL
7629: IFTRUE 7633
7631: GO 7646
7633: POP
// pom = pom3 ; class_soldier :
7634: LD_ADDR_VAR 0 5
7638: PUSH
7639: LD_VAR 0 8
7643: ST_TO_ADDR
7644: GO 7710
7646: LD_INT 1
7648: DOUBLE
7649: EQUAL
7650: IFTRUE 7654
7652: GO 7667
7654: POP
// pom = pom4 ; class_sniper :
7655: LD_ADDR_VAR 0 5
7659: PUSH
7660: LD_VAR 0 9
7664: ST_TO_ADDR
7665: GO 7710
7667: LD_INT 5
7669: DOUBLE
7670: EQUAL
7671: IFTRUE 7675
7673: GO 7688
7675: POP
// pom = pom5 ; class_mortar :
7676: LD_ADDR_VAR 0 5
7680: PUSH
7681: LD_VAR 0 10
7685: ST_TO_ADDR
7686: GO 7710
7688: LD_INT 8
7690: DOUBLE
7691: EQUAL
7692: IFTRUE 7696
7694: GO 7709
7696: POP
// pom = pom6 ; end ;
7697: LD_ADDR_VAR 0 5
7701: PUSH
7702: LD_VAR 0 11
7706: ST_TO_ADDR
7707: GO 7710
7709: POP
// if povolani <> class_scientistic then
7710: LD_VAR 0 2
7714: PUSH
7715: LD_INT 4
7717: NONEQUAL
7718: IFFALSE 7736
// pom = pom ^ pom1 ;
7720: LD_ADDR_VAR 0 5
7724: PUSH
7725: LD_VAR 0 5
7729: PUSH
7730: LD_VAR 0 6
7734: ADD
7735: ST_TO_ADDR
// if povolani <> class_mechanic then
7736: LD_VAR 0 2
7740: PUSH
7741: LD_INT 3
7743: NONEQUAL
7744: IFFALSE 7762
// pom = pom ^ pom2 ;
7746: LD_ADDR_VAR 0 5
7750: PUSH
7751: LD_VAR 0 5
7755: PUSH
7756: LD_VAR 0 7
7760: ADD
7761: ST_TO_ADDR
// if povolani <> class_engineer then
7762: LD_VAR 0 2
7766: PUSH
7767: LD_INT 2
7769: NONEQUAL
7770: IFFALSE 7788
// pom = pom ^ pom3 ;
7772: LD_ADDR_VAR 0 5
7776: PUSH
7777: LD_VAR 0 5
7781: PUSH
7782: LD_VAR 0 8
7786: ADD
7787: ST_TO_ADDR
// if povolani <> class_soldier then
7788: LD_VAR 0 2
7792: PUSH
7793: LD_INT 1
7795: NONEQUAL
7796: IFFALSE 7814
// pom = pom ^ pom4 ;
7798: LD_ADDR_VAR 0 5
7802: PUSH
7803: LD_VAR 0 5
7807: PUSH
7808: LD_VAR 0 9
7812: ADD
7813: ST_TO_ADDR
// if povolani <> class_sniper then
7814: LD_VAR 0 2
7818: PUSH
7819: LD_INT 5
7821: NONEQUAL
7822: IFFALSE 7840
// pom = pom ^ pom5 ;
7824: LD_ADDR_VAR 0 5
7828: PUSH
7829: LD_VAR 0 5
7833: PUSH
7834: LD_VAR 0 10
7838: ADD
7839: ST_TO_ADDR
// if povolani <> class_mortar then
7840: LD_VAR 0 2
7844: PUSH
7845: LD_INT 8
7847: NONEQUAL
7848: IFFALSE 7866
// pom = pom ^ pom6 ;
7850: LD_ADDR_VAR 0 5
7854: PUSH
7855: LD_VAR 0 5
7859: PUSH
7860: LD_VAR 0 11
7864: ADD
7865: ST_TO_ADDR
// result := pom diff diffseznam ;
7866: LD_ADDR_VAR 0 4
7870: PUSH
7871: LD_VAR 0 5
7875: PUSH
7876: LD_VAR 0 3
7880: DIFF
7881: ST_TO_ADDR
// end ;
7882: LD_VAR 0 4
7886: RET
// export function query_konec_mise ; var pom ; begin
7887: LD_INT 0
7889: PPUSH
7890: PPUSH
// pom = Query ( QEndMission ) ;
7891: LD_ADDR_VAR 0 2
7895: PUSH
7896: LD_STRING QEndMission
7898: PPUSH
7899: CALL_OW 97
7903: ST_TO_ADDR
// result := pom ;
7904: LD_ADDR_VAR 0 1
7908: PUSH
7909: LD_VAR 0 2
7913: ST_TO_ADDR
// end ;
7914: LD_VAR 0 1
7918: RET
// every 0 0$1 do var pom ; var jedn ;
7919: GO 7921
7921: DISABLE
7922: LD_INT 0
7924: PPUSH
7925: PPUSH
// begin jedn = 0 ;
7926: LD_ADDR_VAR 0 2
7930: PUSH
7931: LD_INT 0
7933: ST_TO_ADDR
// pom = FilterAllUnits ( [ [ f_side , Arabi ] , [ f_type , unit_human ] , [ f_see , You ] ] ) ;
7934: LD_ADDR_VAR 0 1
7938: PUSH
7939: LD_INT 22
7941: PUSH
7942: LD_EXP 3
7946: PUSH
7947: EMPTY
7948: LIST
7949: LIST
7950: PUSH
7951: LD_INT 21
7953: PUSH
7954: LD_INT 1
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: PUSH
7961: LD_INT 101
7963: PUSH
7964: LD_EXP 1
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: LIST
7977: PPUSH
7978: CALL_OW 69
7982: ST_TO_ADDR
// for i in pom do
7983: LD_ADDR_LOC 1
7987: PUSH
7988: LD_VAR 0 1
7992: PUSH
7993: FOR_IN
7994: IFFALSE 8023
// if GetLives ( i ) < 250 then
7996: LD_LOC 1
8000: PPUSH
8001: CALL_OW 256
8005: PUSH
8006: LD_INT 250
8008: LESS
8009: IFFALSE 8021
// jedn = i ;
8011: LD_ADDR_VAR 0 2
8015: PUSH
8016: LD_LOC 1
8020: ST_TO_ADDR
8021: GO 7993
8023: POP
8024: POP
// if jedn <> 0 then
8025: LD_VAR 0 2
8029: PUSH
8030: LD_INT 0
8032: NONEQUAL
8033: IFFALSE 8044
// Hint ( stimulationdrugs ) else
8035: LD_STRING stimulationdrugs
8037: PPUSH
8038: CALL_OW 339
8042: GO 8045
// enable ;
8044: ENABLE
// end ; end_of_file
8045: PPOPN 2
8047: END
// export CREATE_AR_PROTIOFENZIVU_LIST ; export JEDNOTKY_BAZE_2_LIST ; export JEDNOTKY_BAZE_3_LIST ; export Ar_utok1_LIST ; export Ar_utok2_LIST ; export Ar_utok3_LIST ; export Ar_utok4_LIST ; export Ar_utoklast_LIST ; export AR_backa_LIST ; export GARYL ; export LISAL ; export YAML ; export FRANKL ; export CORNELL ; export BOBL ; export CYRL ; export DONL ; export BROWNL ; var ah , av ; function prepare_human ( sex , clas , level , name ) ; begin
8048: LD_INT 0
8050: PPUSH
// PrepareHuman ( sex , clas , level ) ;
8051: LD_VAR 0 1
8055: PPUSH
8056: LD_VAR 0 2
8060: PPUSH
8061: LD_VAR 0 3
8065: PPUSH
8066: CALL_OW 380
// hc_name := name ;
8070: LD_ADDR_OWVAR 26
8074: PUSH
8075: LD_VAR 0 4
8079: ST_TO_ADDR
// end ;
8080: LD_VAR 0 5
8084: RET
// export function nacti_osobu ( ident ) ; begin
8085: LD_INT 0
8087: PPUSH
// if CheckCharacterSet ( ident ) then
8088: LD_VAR 0 1
8092: PPUSH
8093: CALL_OW 29
8097: IFFALSE 8116
// result := CreateCharacter ( ident ) else
8099: LD_ADDR_VAR 0 2
8103: PUSH
8104: LD_VAR 0 1
8108: PPUSH
8109: CALL_OW 34
8113: ST_TO_ADDR
8114: GO 8124
// result := 0 ;
8116: LD_ADDR_VAR 0 2
8120: PUSH
8121: LD_INT 0
8123: ST_TO_ADDR
// end ;
8124: LD_VAR 0 2
8128: RET
// export function create_amici ; var i ; begin
8129: LD_INT 0
8131: PPUSH
8132: PPUSH
// uc_side = You ;
8133: LD_ADDR_OWVAR 20
8137: PUSH
8138: LD_EXP 1
8142: ST_TO_ADDR
// uc_nation = nation_american ;
8143: LD_ADDR_OWVAR 21
8147: PUSH
8148: LD_INT 1
8150: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
8151: LD_ADDR_OWVAR 37
8155: PUSH
8156: LD_INT 3
8158: ST_TO_ADDR
// vc_control = control_computer ;
8159: LD_ADDR_OWVAR 38
8163: PUSH
8164: LD_INT 3
8166: ST_TO_ADDR
// vc_engine = engine_solar ;
8167: LD_ADDR_OWVAR 39
8171: PUSH
8172: LD_INT 2
8174: ST_TO_ADDR
// vc_weapon = us_radar ;
8175: LD_ADDR_OWVAR 40
8179: PUSH
8180: LD_INT 11
8182: ST_TO_ADDR
// av = CreateVehicle ;
8183: LD_ADDR_LOC 11
8187: PUSH
8188: CALL_OW 45
8192: ST_TO_ADDR
// Radar_enter := av ;
8193: LD_ADDR_EXP 44
8197: PUSH
8198: LD_LOC 11
8202: ST_TO_ADDR
// PlaceUnitXY ( av , 85 , 145 , false ) ;
8203: LD_LOC 11
8207: PPUSH
8208: LD_INT 85
8210: PPUSH
8211: LD_INT 145
8213: PPUSH
8214: LD_INT 0
8216: PPUSH
8217: CALL_OW 48
// for i in Amici_enter do
8221: LD_ADDR_VAR 0 2
8225: PUSH
8226: LD_EXP 43
8230: PUSH
8231: FOR_IN
8232: IFFALSE 8251
// PlaceUnitArea ( i , AMEnter , false ) ;
8234: LD_VAR 0 2
8238: PPUSH
8239: LD_INT 1
8241: PPUSH
8242: LD_INT 0
8244: PPUSH
8245: CALL_OW 49
8249: GO 8231
8251: POP
8252: POP
// end ;
8253: LD_VAR 0 1
8257: RET
// export function create_ar_protiofenzivu ; var pom ; begin
8258: LD_INT 0
8260: PPUSH
8261: PPUSH
// pom = [ ] ;
8262: LD_ADDR_VAR 0 2
8266: PUSH
8267: EMPTY
8268: ST_TO_ADDR
// uc_side := Arabi ;
8269: LD_ADDR_OWVAR 20
8273: PUSH
8274: LD_EXP 3
8278: ST_TO_ADDR
// uc_nation := nation_arabian ;
8279: LD_ADDR_OWVAR 21
8283: PUSH
8284: LD_INT 2
8286: ST_TO_ADDR
// uc_direction := 3 ;
8287: LD_ADDR_OWVAR 24
8291: PUSH
8292: LD_INT 3
8294: ST_TO_ADDR
// prepare_human ( sex_male , class_mechanic , Ar_levely [ difficulty ] , Hasam El Azis ) ;
8295: LD_INT 1
8297: PPUSH
8298: LD_INT 3
8300: PPUSH
8301: LD_EXP 49
8305: PUSH
8306: LD_OWVAR 67
8310: ARRAY
8311: PPUSH
8312: LD_STRING Hasam El Azis
8314: PPUSH
8315: CALL 8048 0 4
// ah = CreateHuman ;
8319: LD_ADDR_LOC 10
8323: PUSH
8324: CALL_OW 44
8328: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
8329: LD_ADDR_OWVAR 37
8333: PUSH
8334: LD_INT 14
8336: ST_TO_ADDR
// vc_control := control_manual ;
8337: LD_ADDR_OWVAR 38
8341: PUSH
8342: LD_INT 1
8344: ST_TO_ADDR
// vc_engine := engine_combustion ;
8345: LD_ADDR_OWVAR 39
8349: PUSH
8350: LD_INT 1
8352: ST_TO_ADDR
// vc_weapon := ar_gun ;
8353: LD_ADDR_OWVAR 40
8357: PUSH
8358: LD_INT 27
8360: ST_TO_ADDR
// av = CreateVehicle ;
8361: LD_ADDR_LOC 11
8365: PUSH
8366: CALL_OW 45
8370: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
8371: LD_LOC 10
8375: PPUSH
8376: LD_LOC 11
8380: PPUSH
8381: CALL_OW 52
// pom = pom ^ av ;
8385: LD_ADDR_VAR 0 2
8389: PUSH
8390: LD_VAR 0 2
8394: PUSH
8395: LD_LOC 11
8399: ADD
8400: ST_TO_ADDR
// prepare_human ( sex_female , class_mechanic , Ar_levely [ difficulty ] - 2 ,  ) ;
8401: LD_INT 2
8403: PPUSH
8404: LD_INT 3
8406: PPUSH
8407: LD_EXP 49
8411: PUSH
8412: LD_OWVAR 67
8416: ARRAY
8417: PUSH
8418: LD_INT 2
8420: MINUS
8421: PPUSH
8422: LD_STRING 
8424: PPUSH
8425: CALL 8048 0 4
// ah = CreateHuman ;
8429: LD_ADDR_LOC 10
8433: PUSH
8434: CALL_OW 44
8438: ST_TO_ADDR
// vc_chassis := ar_light_trike ;
8439: LD_ADDR_OWVAR 37
8443: PUSH
8444: LD_INT 12
8446: ST_TO_ADDR
// vc_control := control_manual ;
8447: LD_ADDR_OWVAR 38
8451: PUSH
8452: LD_INT 1
8454: ST_TO_ADDR
// vc_engine := engine_solar ;
8455: LD_ADDR_OWVAR 39
8459: PUSH
8460: LD_INT 2
8462: ST_TO_ADDR
// vc_weapon := ar_double_machine_gun ;
8463: LD_ADDR_OWVAR 40
8467: PUSH
8468: LD_INT 24
8470: ST_TO_ADDR
// av = CreateVehicle ;
8471: LD_ADDR_LOC 11
8475: PUSH
8476: CALL_OW 45
8480: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
8481: LD_LOC 10
8485: PPUSH
8486: LD_LOC 11
8490: PPUSH
8491: CALL_OW 52
// pom = pom ^ av ;
8495: LD_ADDR_VAR 0 2
8499: PUSH
8500: LD_VAR 0 2
8504: PUSH
8505: LD_LOC 11
8509: ADD
8510: ST_TO_ADDR
// if difficulty > 1 then
8511: LD_OWVAR 67
8515: PUSH
8516: LD_INT 1
8518: GREATER
8519: IFFALSE 8553
// begin ah = get_human ( get_sex , class_soldier , Ar_levely [ difficulty ] ,  ) ;
8521: LD_ADDR_LOC 10
8525: PUSH
8526: CALL 10585 0 0
8530: PPUSH
8531: LD_INT 1
8533: PPUSH
8534: LD_EXP 49
8538: PUSH
8539: LD_OWVAR 67
8543: ARRAY
8544: PPUSH
8545: LD_STRING 
8547: PPUSH
8548: CALL 14149 0 4
8552: ST_TO_ADDR
// end ; if difficulty > 2 then
8553: LD_OWVAR 67
8557: PUSH
8558: LD_INT 2
8560: GREATER
8561: IFFALSE 8621
// begin vc_chassis := ar_medium_trike ;
8563: LD_ADDR_OWVAR 37
8567: PUSH
8568: LD_INT 13
8570: ST_TO_ADDR
// vc_control := control_apeman ;
8571: LD_ADDR_OWVAR 38
8575: PUSH
8576: LD_INT 5
8578: ST_TO_ADDR
// vc_engine := engine_siberite ;
8579: LD_ADDR_OWVAR 39
8583: PUSH
8584: LD_INT 3
8586: ST_TO_ADDR
// vc_weapon := ar_multimissile_ballista ;
8587: LD_ADDR_OWVAR 40
8591: PUSH
8592: LD_INT 22
8594: ST_TO_ADDR
// av = CreateVehicle ;
8595: LD_ADDR_LOC 11
8599: PUSH
8600: CALL_OW 45
8604: ST_TO_ADDR
// pom = pom ^ av ;
8605: LD_ADDR_VAR 0 2
8609: PUSH
8610: LD_VAR 0 2
8614: PUSH
8615: LD_LOC 11
8619: ADD
8620: ST_TO_ADDR
// end ; CREATE_AR_PROTIOFENZIVU_LIST := pom ;
8621: LD_ADDR_EXP 10
8625: PUSH
8626: LD_VAR 0 2
8630: ST_TO_ADDR
// end ;
8631: LD_VAR 0 1
8635: RET
// export function create_auto_pro_solopa ; begin
8636: LD_INT 0
8638: PPUSH
// uc_side := Arabi ;
8639: LD_ADDR_OWVAR 20
8643: PUSH
8644: LD_EXP 3
8648: ST_TO_ADDR
// uc_nation := nation_arabian ;
8649: LD_ADDR_OWVAR 21
8653: PUSH
8654: LD_INT 2
8656: ST_TO_ADDR
// uc_direction := 3 ;
8657: LD_ADDR_OWVAR 24
8661: PUSH
8662: LD_INT 3
8664: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
8665: LD_ADDR_OWVAR 37
8669: PUSH
8670: LD_INT 14
8672: ST_TO_ADDR
// vc_control := control_manual ;
8673: LD_ADDR_OWVAR 38
8677: PUSH
8678: LD_INT 1
8680: ST_TO_ADDR
// vc_engine := engine_siberite ;
8681: LD_ADDR_OWVAR 39
8685: PUSH
8686: LD_INT 3
8688: ST_TO_ADDR
// vc_weapon := ar_gun ;
8689: LD_ADDR_OWVAR 40
8693: PUSH
8694: LD_INT 27
8696: ST_TO_ADDR
// av := CreateVehicle ;
8697: LD_ADDR_LOC 11
8701: PUSH
8702: CALL_OW 45
8706: ST_TO_ADDR
// result := av ;
8707: LD_ADDR_VAR 0 1
8711: PUSH
8712: LD_LOC 11
8716: ST_TO_ADDR
// end ;
8717: LD_VAR 0 1
8721: RET
// var pom3 , pom4 , pom5 , pom6 , pom1 ; export function dodej_skily ; var pom , i ; begin
8722: LD_INT 0
8724: PPUSH
8725: PPUSH
8726: PPUSH
// uprav_cloveka ( A2_mor3 , class_mortar , Ar_levely [ difficulty ] ) ;
8727: LD_INT 92
8729: PPUSH
8730: LD_INT 8
8732: PPUSH
8733: LD_EXP 49
8737: PUSH
8738: LD_OWVAR 67
8742: ARRAY
8743: PPUSH
8744: CALL 8988 0 3
// uprav_cloveka ( A2_zas1 , class_soldier , Ar_levely [ difficulty ] ) ;
8748: LD_INT 82
8750: PPUSH
8751: LD_INT 1
8753: PPUSH
8754: LD_EXP 49
8758: PUSH
8759: LD_OWVAR 67
8763: ARRAY
8764: PPUSH
8765: CALL 8988 0 3
// uprav_cloveka ( A2_zas2 , class_soldier , Ar_levely [ difficulty ] ) ;
8769: LD_INT 83
8771: PPUSH
8772: LD_INT 1
8774: PPUSH
8775: LD_EXP 49
8779: PUSH
8780: LD_OWVAR 67
8784: ARRAY
8785: PPUSH
8786: CALL 8988 0 3
// uprav_cloveka ( A3_zas1 , class_soldier , Ar_levely [ difficulty ] ) ;
8790: LD_INT 101
8792: PPUSH
8793: LD_INT 1
8795: PPUSH
8796: LD_EXP 49
8800: PUSH
8801: LD_OWVAR 67
8805: ARRAY
8806: PPUSH
8807: CALL 8988 0 3
// uprav_cloveka ( A3_solop , class_engineer , Ar_levely [ difficulty ] ) ;
8811: LD_INT 102
8813: PPUSH
8814: LD_INT 2
8816: PPUSH
8817: LD_EXP 49
8821: PUSH
8822: LD_OWVAR 67
8826: ARRAY
8827: PPUSH
8828: CALL 8988 0 3
// pom = [ A3_rme1 , A3_rme2 , A3_rme3 ] ;
8832: LD_ADDR_VAR 0 2
8836: PUSH
8837: LD_INT 96
8839: PUSH
8840: LD_INT 95
8842: PUSH
8843: LD_INT 94
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: LIST
8850: ST_TO_ADDR
// for i in pom do
8851: LD_ADDR_VAR 0 3
8855: PUSH
8856: LD_VAR 0 2
8860: PUSH
8861: FOR_IN
8862: IFFALSE 8889
// uprav_cloveka ( i , class_mechanic , Ar_levely [ difficulty ] ) ;
8864: LD_VAR 0 3
8868: PPUSH
8869: LD_INT 3
8871: PPUSH
8872: LD_EXP 49
8876: PUSH
8877: LD_OWVAR 67
8881: ARRAY
8882: PPUSH
8883: CALL 8988 0 3
8887: GO 8861
8889: POP
8890: POP
// end ;
8891: LD_VAR 0 1
8895: RET
// function set_skills ( un , skills ) ; begin
8896: LD_INT 0
8898: PPUSH
// SetSkill ( un , skill_combat , skills [ 1 ] ) ;
8899: LD_VAR 0 1
8903: PPUSH
8904: LD_INT 1
8906: PPUSH
8907: LD_VAR 0 2
8911: PUSH
8912: LD_INT 1
8914: ARRAY
8915: PPUSH
8916: CALL_OW 237
// SetSkill ( un , skill_engineering , skills [ 2 ] ) ;
8920: LD_VAR 0 1
8924: PPUSH
8925: LD_INT 2
8927: PPUSH
8928: LD_VAR 0 2
8932: PUSH
8933: LD_INT 2
8935: ARRAY
8936: PPUSH
8937: CALL_OW 237
// SetSkill ( un , skill_mechanical , skills [ 3 ] ) ;
8941: LD_VAR 0 1
8945: PPUSH
8946: LD_INT 3
8948: PPUSH
8949: LD_VAR 0 2
8953: PUSH
8954: LD_INT 3
8956: ARRAY
8957: PPUSH
8958: CALL_OW 237
// SetSkill ( un , skill_scientistic , skills [ 4 ] ) ;
8962: LD_VAR 0 1
8966: PPUSH
8967: LD_INT 4
8969: PPUSH
8970: LD_VAR 0 2
8974: PUSH
8975: LD_INT 4
8977: ARRAY
8978: PPUSH
8979: CALL_OW 237
// end ;
8983: LD_VAR 0 3
8987: RET
// function uprav_cloveka ( un , clas , lev ) ; begin
8988: LD_INT 0
8990: PPUSH
// prepare_human ( sex_male , clas , lev ,  ) ;
8991: LD_INT 1
8993: PPUSH
8994: LD_VAR 0 2
8998: PPUSH
8999: LD_VAR 0 3
9003: PPUSH
9004: LD_STRING 
9006: PPUSH
9007: CALL 8048 0 4
// ah = CreateHuman ;
9011: LD_ADDR_LOC 10
9015: PUSH
9016: CALL_OW 44
9020: ST_TO_ADDR
// pom1 = get_skills ( ah ) ;
9021: LD_ADDR_LOC 16
9025: PUSH
9026: LD_LOC 10
9030: PPUSH
9031: CALL 12552 0 1
9035: ST_TO_ADDR
// set_skills ( un , get_skills ( ah ) ) ;
9036: LD_VAR 0 1
9040: PPUSH
9041: LD_LOC 10
9045: PPUSH
9046: CALL 12552 0 1
9050: PPUSH
9051: CALL 8896 0 2
// DestroyUnit ( ah ) ;
9055: LD_LOC 10
9059: PPUSH
9060: CALL_OW 65
// end ;
9064: LD_VAR 0 4
9068: RET
// export function vytvor_opravare ; var pom ; begin
9069: LD_INT 0
9071: PPUSH
9072: PPUSH
// uc_side := Arabi ;
9073: LD_ADDR_OWVAR 20
9077: PUSH
9078: LD_EXP 3
9082: ST_TO_ADDR
// uc_nation := nation_arabian ;
9083: LD_ADDR_OWVAR 21
9087: PUSH
9088: LD_INT 2
9090: ST_TO_ADDR
// uc_direction := 3 ;
9091: LD_ADDR_OWVAR 24
9095: PUSH
9096: LD_INT 3
9098: ST_TO_ADDR
// pom = [ ] ;
9099: LD_ADDR_VAR 0 2
9103: PUSH
9104: EMPTY
9105: ST_TO_ADDR
// if difficulty < 3 then
9106: LD_OWVAR 67
9110: PUSH
9111: LD_INT 3
9113: LESS
9114: IFFALSE 9188
// begin prepare_human ( sex_male , class_engineer , Ar_levely [ difficulty ] + 1 , Gru Pakansu ) ;
9116: LD_INT 1
9118: PPUSH
9119: LD_INT 2
9121: PPUSH
9122: LD_EXP 49
9126: PUSH
9127: LD_OWVAR 67
9131: ARRAY
9132: PUSH
9133: LD_INT 1
9135: PLUS
9136: PPUSH
9137: LD_STRING Gru Pakansu
9139: PPUSH
9140: CALL 8048 0 4
// ah = CreateHuman ;
9144: LD_ADDR_LOC 10
9148: PUSH
9149: CALL_OW 44
9153: ST_TO_ADDR
// PlaceUnitXY ( ah , 19 , 6 , false ) ;
9154: LD_LOC 10
9158: PPUSH
9159: LD_INT 19
9161: PPUSH
9162: LD_INT 6
9164: PPUSH
9165: LD_INT 0
9167: PPUSH
9168: CALL_OW 48
// pom = pom ^ ah ;
9172: LD_ADDR_VAR 0 2
9176: PUSH
9177: LD_VAR 0 2
9181: PUSH
9182: LD_LOC 10
9186: ADD
9187: ST_TO_ADDR
// end ; if difficulty < 2 then
9188: LD_OWVAR 67
9192: PUSH
9193: LD_INT 2
9195: LESS
9196: IFFALSE 9272
// begin prepare_human ( get_sex , class_engineer , Ar_levely [ difficulty ] + 2 ,  ) ;
9198: CALL 10585 0 0
9202: PPUSH
9203: LD_INT 2
9205: PPUSH
9206: LD_EXP 49
9210: PUSH
9211: LD_OWVAR 67
9215: ARRAY
9216: PUSH
9217: LD_INT 2
9219: PLUS
9220: PPUSH
9221: LD_STRING 
9223: PPUSH
9224: CALL 8048 0 4
// ah = CreateHuman ;
9228: LD_ADDR_LOC 10
9232: PUSH
9233: CALL_OW 44
9237: ST_TO_ADDR
// PlaceUnitXY ( ah , 25 , 1 , false ) ;
9238: LD_LOC 10
9242: PPUSH
9243: LD_INT 25
9245: PPUSH
9246: LD_INT 1
9248: PPUSH
9249: LD_INT 0
9251: PPUSH
9252: CALL_OW 48
// pom = pom ^ ah ;
9256: LD_ADDR_VAR 0 2
9260: PUSH
9261: LD_VAR 0 2
9265: PUSH
9266: LD_LOC 10
9270: ADD
9271: ST_TO_ADDR
// end ; result := pom ;
9272: LD_ADDR_VAR 0 1
9276: PUSH
9277: LD_VAR 0 2
9281: ST_TO_ADDR
// end ;
9282: LD_VAR 0 1
9286: RET
// export function vojcli_base_2 ; var pom ; var i , j ; begin
9287: LD_INT 0
9289: PPUSH
9290: PPUSH
9291: PPUSH
9292: PPUSH
// pom = [ ] ;
9293: LD_ADDR_VAR 0 2
9297: PUSH
9298: EMPTY
9299: ST_TO_ADDR
// uc_side := Arabi ;
9300: LD_ADDR_OWVAR 20
9304: PUSH
9305: LD_EXP 3
9309: ST_TO_ADDR
// uc_nation := nation_arabian ;
9310: LD_ADDR_OWVAR 21
9314: PUSH
9315: LD_INT 2
9317: ST_TO_ADDR
// uc_direction := 0 ;
9318: LD_ADDR_OWVAR 24
9322: PUSH
9323: LD_INT 0
9325: ST_TO_ADDR
// for i = 1 to 7 do
9326: LD_ADDR_VAR 0 3
9330: PUSH
9331: DOUBLE
9332: LD_INT 1
9334: DEC
9335: ST_TO_ADDR
9336: LD_INT 7
9338: PUSH
9339: FOR_TO
9340: IFFALSE 9414
// begin prepare_human ( get_sex_uprava ( 1 , i ) , class_soldier , Ar_levely [ difficulty ] , get_name ( 1 , i ) ) ;
9342: LD_INT 1
9344: PPUSH
9345: LD_VAR 0 3
9349: PPUSH
9350: CALL 10620 0 2
9354: PPUSH
9355: LD_INT 1
9357: PPUSH
9358: LD_EXP 49
9362: PUSH
9363: LD_OWVAR 67
9367: ARRAY
9368: PPUSH
9369: LD_INT 1
9371: PPUSH
9372: LD_VAR 0 3
9376: PPUSH
9377: CALL 10836 0 2
9381: PPUSH
9382: CALL 8048 0 4
// ah = CreateHuman ;
9386: LD_ADDR_LOC 10
9390: PUSH
9391: CALL_OW 44
9395: ST_TO_ADDR
// pom = pom ^ ah ;
9396: LD_ADDR_VAR 0 2
9400: PUSH
9401: LD_VAR 0 2
9405: PUSH
9406: LD_LOC 10
9410: ADD
9411: ST_TO_ADDR
// end ;
9412: GO 9339
9414: POP
9415: POP
// for i = 1 to 3 do
9416: LD_ADDR_VAR 0 3
9420: PUSH
9421: DOUBLE
9422: LD_INT 1
9424: DEC
9425: ST_TO_ADDR
9426: LD_INT 3
9428: PUSH
9429: FOR_TO
9430: IFFALSE 9504
// begin prepare_human ( get_sex_uprava ( 1 , i ) , class_mortar , Ar_levely [ difficulty ] , get_name ( 1 , i ) ) ;
9432: LD_INT 1
9434: PPUSH
9435: LD_VAR 0 3
9439: PPUSH
9440: CALL 10620 0 2
9444: PPUSH
9445: LD_INT 8
9447: PPUSH
9448: LD_EXP 49
9452: PUSH
9453: LD_OWVAR 67
9457: ARRAY
9458: PPUSH
9459: LD_INT 1
9461: PPUSH
9462: LD_VAR 0 3
9466: PPUSH
9467: CALL 10836 0 2
9471: PPUSH
9472: CALL 8048 0 4
// ah = CreateHuman ;
9476: LD_ADDR_LOC 10
9480: PUSH
9481: CALL_OW 44
9485: ST_TO_ADDR
// pom = pom ^ ah ;
9486: LD_ADDR_VAR 0 2
9490: PUSH
9491: LD_VAR 0 2
9495: PUSH
9496: LD_LOC 10
9500: ADD
9501: ST_TO_ADDR
// end ;
9502: GO 9429
9504: POP
9505: POP
// for i = 1 to 2 do
9506: LD_ADDR_VAR 0 3
9510: PUSH
9511: DOUBLE
9512: LD_INT 1
9514: DEC
9515: ST_TO_ADDR
9516: LD_INT 2
9518: PUSH
9519: FOR_TO
9520: IFFALSE 9576
// begin prepare_human ( get_sex , class_scientistic , Ar_levely [ difficulty ] ,  ) ;
9522: CALL 10585 0 0
9526: PPUSH
9527: LD_INT 4
9529: PPUSH
9530: LD_EXP 49
9534: PUSH
9535: LD_OWVAR 67
9539: ARRAY
9540: PPUSH
9541: LD_STRING 
9543: PPUSH
9544: CALL 8048 0 4
// ah = CreateHuman ;
9548: LD_ADDR_LOC 10
9552: PUSH
9553: CALL_OW 44
9557: ST_TO_ADDR
// pom = pom ^ ah ;
9558: LD_ADDR_VAR 0 2
9562: PUSH
9563: LD_VAR 0 2
9567: PUSH
9568: LD_LOC 10
9572: ADD
9573: ST_TO_ADDR
// end ;
9574: GO 9519
9576: POP
9577: POP
// for i = 1 to 2 do
9578: LD_ADDR_VAR 0 3
9582: PUSH
9583: DOUBLE
9584: LD_INT 1
9586: DEC
9587: ST_TO_ADDR
9588: LD_INT 2
9590: PUSH
9591: FOR_TO
9592: IFFALSE 9674
// begin prepare_human ( get_sex_uprava ( 1 , i + 12 ) , class_mortar , Ar_levely [ difficulty ] , get_name ( 1 , i + 12 ) ) ;
9594: LD_INT 1
9596: PPUSH
9597: LD_VAR 0 3
9601: PUSH
9602: LD_INT 12
9604: PLUS
9605: PPUSH
9606: CALL 10620 0 2
9610: PPUSH
9611: LD_INT 8
9613: PPUSH
9614: LD_EXP 49
9618: PUSH
9619: LD_OWVAR 67
9623: ARRAY
9624: PPUSH
9625: LD_INT 1
9627: PPUSH
9628: LD_VAR 0 3
9632: PUSH
9633: LD_INT 12
9635: PLUS
9636: PPUSH
9637: CALL 10836 0 2
9641: PPUSH
9642: CALL 8048 0 4
// ah = CreateHuman ;
9646: LD_ADDR_LOC 10
9650: PUSH
9651: CALL_OW 44
9655: ST_TO_ADDR
// pom = pom ^ ah ;
9656: LD_ADDR_VAR 0 2
9660: PUSH
9661: LD_VAR 0 2
9665: PUSH
9666: LD_LOC 10
9670: ADD
9671: ST_TO_ADDR
// end ;
9672: GO 9591
9674: POP
9675: POP
// for i = 1 to 2 do
9676: LD_ADDR_VAR 0 3
9680: PUSH
9681: DOUBLE
9682: LD_INT 1
9684: DEC
9685: ST_TO_ADDR
9686: LD_INT 2
9688: PUSH
9689: FOR_TO
9690: IFFALSE 9772
// begin prepare_human ( get_sex_uprava ( 1 , i + 14 ) , class_engineer , Ar_levely [ difficulty ] , get_name ( 1 , i + 14 ) ) ;
9692: LD_INT 1
9694: PPUSH
9695: LD_VAR 0 3
9699: PUSH
9700: LD_INT 14
9702: PLUS
9703: PPUSH
9704: CALL 10620 0 2
9708: PPUSH
9709: LD_INT 2
9711: PPUSH
9712: LD_EXP 49
9716: PUSH
9717: LD_OWVAR 67
9721: ARRAY
9722: PPUSH
9723: LD_INT 1
9725: PPUSH
9726: LD_VAR 0 3
9730: PUSH
9731: LD_INT 14
9733: PLUS
9734: PPUSH
9735: CALL 10836 0 2
9739: PPUSH
9740: CALL 8048 0 4
// ah = CreateHuman ;
9744: LD_ADDR_LOC 10
9748: PUSH
9749: CALL_OW 44
9753: ST_TO_ADDR
// pom = pom ^ ah ;
9754: LD_ADDR_VAR 0 2
9758: PUSH
9759: LD_VAR 0 2
9763: PUSH
9764: LD_LOC 10
9768: ADD
9769: ST_TO_ADDR
// end ;
9770: GO 9689
9772: POP
9773: POP
// for i = 1 to 4 do
9774: LD_ADDR_VAR 0 3
9778: PUSH
9779: DOUBLE
9780: LD_INT 1
9782: DEC
9783: ST_TO_ADDR
9784: LD_INT 4
9786: PUSH
9787: FOR_TO
9788: IFFALSE 9870
// begin prepare_human ( get_sex_uprava ( 1 , i + 16 ) , class_mechanic , Ar_levely [ difficulty ] , get_name ( 1 , i + 16 ) ) ;
9790: LD_INT 1
9792: PPUSH
9793: LD_VAR 0 3
9797: PUSH
9798: LD_INT 16
9800: PLUS
9801: PPUSH
9802: CALL 10620 0 2
9806: PPUSH
9807: LD_INT 3
9809: PPUSH
9810: LD_EXP 49
9814: PUSH
9815: LD_OWVAR 67
9819: ARRAY
9820: PPUSH
9821: LD_INT 1
9823: PPUSH
9824: LD_VAR 0 3
9828: PUSH
9829: LD_INT 16
9831: PLUS
9832: PPUSH
9833: CALL 10836 0 2
9837: PPUSH
9838: CALL 8048 0 4
// ah = CreateHuman ;
9842: LD_ADDR_LOC 10
9846: PUSH
9847: CALL_OW 44
9851: ST_TO_ADDR
// pom = pom ^ ah ;
9852: LD_ADDR_VAR 0 2
9856: PUSH
9857: LD_VAR 0 2
9861: PUSH
9862: LD_LOC 10
9866: ADD
9867: ST_TO_ADDR
// end ;
9868: GO 9787
9870: POP
9871: POP
// for i = 1 to 3 do
9872: LD_ADDR_VAR 0 3
9876: PUSH
9877: DOUBLE
9878: LD_INT 1
9880: DEC
9881: ST_TO_ADDR
9882: LD_INT 3
9884: PUSH
9885: FOR_TO
9886: IFFALSE 9968
// begin prepare_human ( get_sex_uprava ( 1 , i + 20 ) , class_mechanic , Ar_levely [ difficulty ] , get_name ( 1 , i + 20 ) ) ;
9888: LD_INT 1
9890: PPUSH
9891: LD_VAR 0 3
9895: PUSH
9896: LD_INT 20
9898: PLUS
9899: PPUSH
9900: CALL 10620 0 2
9904: PPUSH
9905: LD_INT 3
9907: PPUSH
9908: LD_EXP 49
9912: PUSH
9913: LD_OWVAR 67
9917: ARRAY
9918: PPUSH
9919: LD_INT 1
9921: PPUSH
9922: LD_VAR 0 3
9926: PUSH
9927: LD_INT 20
9929: PLUS
9930: PPUSH
9931: CALL 10836 0 2
9935: PPUSH
9936: CALL 8048 0 4
// ah = CreateHuman ;
9940: LD_ADDR_LOC 10
9944: PUSH
9945: CALL_OW 44
9949: ST_TO_ADDR
// pom = pom ^ ah ;
9950: LD_ADDR_VAR 0 2
9954: PUSH
9955: LD_VAR 0 2
9959: PUSH
9960: LD_LOC 10
9964: ADD
9965: ST_TO_ADDR
// end ;
9966: GO 9885
9968: POP
9969: POP
// JEDNOTKY_BAZE_2_LIST = pom ;
9970: LD_ADDR_EXP 11
9974: PUSH
9975: LD_VAR 0 2
9979: ST_TO_ADDR
// end ;
9980: LD_VAR 0 1
9984: RET
// export function vojcli_base_3 ; var pom ; var i , j ; begin
9985: LD_INT 0
9987: PPUSH
9988: PPUSH
9989: PPUSH
9990: PPUSH
// pom = [ ] ;
9991: LD_ADDR_VAR 0 2
9995: PUSH
9996: EMPTY
9997: ST_TO_ADDR
// uc_side := Arabi ;
9998: LD_ADDR_OWVAR 20
10002: PUSH
10003: LD_EXP 3
10007: ST_TO_ADDR
// uc_nation := nation_arabian ;
10008: LD_ADDR_OWVAR 21
10012: PUSH
10013: LD_INT 2
10015: ST_TO_ADDR
// uc_direction := 0 ;
10016: LD_ADDR_OWVAR 24
10020: PUSH
10021: LD_INT 0
10023: ST_TO_ADDR
// for i = 1 to 4 do
10024: LD_ADDR_VAR 0 3
10028: PUSH
10029: DOUBLE
10030: LD_INT 1
10032: DEC
10033: ST_TO_ADDR
10034: LD_INT 4
10036: PUSH
10037: FOR_TO
10038: IFFALSE 10112
// begin prepare_human ( get_sex_uprava ( 2 , i ) , class_soldier , Ar_levely [ difficulty ] , get_name ( 2 , i ) ) ;
10040: LD_INT 2
10042: PPUSH
10043: LD_VAR 0 3
10047: PPUSH
10048: CALL 10620 0 2
10052: PPUSH
10053: LD_INT 1
10055: PPUSH
10056: LD_EXP 49
10060: PUSH
10061: LD_OWVAR 67
10065: ARRAY
10066: PPUSH
10067: LD_INT 2
10069: PPUSH
10070: LD_VAR 0 3
10074: PPUSH
10075: CALL 10836 0 2
10079: PPUSH
10080: CALL 8048 0 4
// ah = CreateHuman ;
10084: LD_ADDR_LOC 10
10088: PUSH
10089: CALL_OW 44
10093: ST_TO_ADDR
// pom = pom ^ ah ;
10094: LD_ADDR_VAR 0 2
10098: PUSH
10099: LD_VAR 0 2
10103: PUSH
10104: LD_LOC 10
10108: ADD
10109: ST_TO_ADDR
// end ;
10110: GO 10037
10112: POP
10113: POP
// for i = 1 to 3 do
10114: LD_ADDR_VAR 0 3
10118: PUSH
10119: DOUBLE
10120: LD_INT 1
10122: DEC
10123: ST_TO_ADDR
10124: LD_INT 3
10126: PUSH
10127: FOR_TO
10128: IFFALSE 10202
// begin prepare_human ( get_sex_uprava ( 2 , i ) , class_mortar , Ar_levely [ difficulty ] , get_name ( 2 , i ) ) ;
10130: LD_INT 2
10132: PPUSH
10133: LD_VAR 0 3
10137: PPUSH
10138: CALL 10620 0 2
10142: PPUSH
10143: LD_INT 8
10145: PPUSH
10146: LD_EXP 49
10150: PUSH
10151: LD_OWVAR 67
10155: ARRAY
10156: PPUSH
10157: LD_INT 2
10159: PPUSH
10160: LD_VAR 0 3
10164: PPUSH
10165: CALL 10836 0 2
10169: PPUSH
10170: CALL 8048 0 4
// ah = CreateHuman ;
10174: LD_ADDR_LOC 10
10178: PUSH
10179: CALL_OW 44
10183: ST_TO_ADDR
// pom = pom ^ ah ;
10184: LD_ADDR_VAR 0 2
10188: PUSH
10189: LD_VAR 0 2
10193: PUSH
10194: LD_LOC 10
10198: ADD
10199: ST_TO_ADDR
// end ;
10200: GO 10127
10202: POP
10203: POP
// for i = 1 to 4 do
10204: LD_ADDR_VAR 0 3
10208: PUSH
10209: DOUBLE
10210: LD_INT 1
10212: DEC
10213: ST_TO_ADDR
10214: LD_INT 4
10216: PUSH
10217: FOR_TO
10218: IFFALSE 10300
// begin prepare_human ( get_sex_uprava ( 2 , i + 7 ) , class_mechanic , Ar_levely [ difficulty ] , get_name ( 2 , i + 7 ) ) ;
10220: LD_INT 2
10222: PPUSH
10223: LD_VAR 0 3
10227: PUSH
10228: LD_INT 7
10230: PLUS
10231: PPUSH
10232: CALL 10620 0 2
10236: PPUSH
10237: LD_INT 3
10239: PPUSH
10240: LD_EXP 49
10244: PUSH
10245: LD_OWVAR 67
10249: ARRAY
10250: PPUSH
10251: LD_INT 2
10253: PPUSH
10254: LD_VAR 0 3
10258: PUSH
10259: LD_INT 7
10261: PLUS
10262: PPUSH
10263: CALL 10836 0 2
10267: PPUSH
10268: CALL 8048 0 4
// ah = CreateHuman ;
10272: LD_ADDR_LOC 10
10276: PUSH
10277: CALL_OW 44
10281: ST_TO_ADDR
// pom = pom ^ ah ;
10282: LD_ADDR_VAR 0 2
10286: PUSH
10287: LD_VAR 0 2
10291: PUSH
10292: LD_LOC 10
10296: ADD
10297: ST_TO_ADDR
// end ;
10298: GO 10217
10300: POP
10301: POP
// for i = 1 to 2 do
10302: LD_ADDR_VAR 0 3
10306: PUSH
10307: DOUBLE
10308: LD_INT 1
10310: DEC
10311: ST_TO_ADDR
10312: LD_INT 2
10314: PUSH
10315: FOR_TO
10316: IFFALSE 10372
// begin prepare_human ( get_sex , class_scientistic , Ar_levely [ difficulty ] ,  ) ;
10318: CALL 10585 0 0
10322: PPUSH
10323: LD_INT 4
10325: PPUSH
10326: LD_EXP 49
10330: PUSH
10331: LD_OWVAR 67
10335: ARRAY
10336: PPUSH
10337: LD_STRING 
10339: PPUSH
10340: CALL 8048 0 4
// ah = CreateHuman ;
10344: LD_ADDR_LOC 10
10348: PUSH
10349: CALL_OW 44
10353: ST_TO_ADDR
// pom = pom ^ ah ;
10354: LD_ADDR_VAR 0 2
10358: PUSH
10359: LD_VAR 0 2
10363: PUSH
10364: LD_LOC 10
10368: ADD
10369: ST_TO_ADDR
// end ;
10370: GO 10315
10372: POP
10373: POP
// for i = 1 to 2 do
10374: LD_ADDR_VAR 0 3
10378: PUSH
10379: DOUBLE
10380: LD_INT 1
10382: DEC
10383: ST_TO_ADDR
10384: LD_INT 2
10386: PUSH
10387: FOR_TO
10388: IFFALSE 10470
// begin prepare_human ( get_sex_uprava ( 2 , i + 13 ) , class_mortar , Ar_levely [ difficulty ] , get_name ( 2 , i + 13 ) ) ;
10390: LD_INT 2
10392: PPUSH
10393: LD_VAR 0 3
10397: PUSH
10398: LD_INT 13
10400: PLUS
10401: PPUSH
10402: CALL 10620 0 2
10406: PPUSH
10407: LD_INT 8
10409: PPUSH
10410: LD_EXP 49
10414: PUSH
10415: LD_OWVAR 67
10419: ARRAY
10420: PPUSH
10421: LD_INT 2
10423: PPUSH
10424: LD_VAR 0 3
10428: PUSH
10429: LD_INT 13
10431: PLUS
10432: PPUSH
10433: CALL 10836 0 2
10437: PPUSH
10438: CALL 8048 0 4
// ah = CreateHuman ;
10442: LD_ADDR_LOC 10
10446: PUSH
10447: CALL_OW 44
10451: ST_TO_ADDR
// pom = pom ^ ah ;
10452: LD_ADDR_VAR 0 2
10456: PUSH
10457: LD_VAR 0 2
10461: PUSH
10462: LD_LOC 10
10466: ADD
10467: ST_TO_ADDR
// end ;
10468: GO 10387
10470: POP
10471: POP
// for i = 1 to 2 do
10472: LD_ADDR_VAR 0 3
10476: PUSH
10477: DOUBLE
10478: LD_INT 1
10480: DEC
10481: ST_TO_ADDR
10482: LD_INT 2
10484: PUSH
10485: FOR_TO
10486: IFFALSE 10568
// begin prepare_human ( get_sex_uprava ( 2 , i + 15 ) , class_engineer , Ar_levely [ difficulty ] , get_name ( 2 , i + 15 ) ) ;
10488: LD_INT 2
10490: PPUSH
10491: LD_VAR 0 3
10495: PUSH
10496: LD_INT 15
10498: PLUS
10499: PPUSH
10500: CALL 10620 0 2
10504: PPUSH
10505: LD_INT 2
10507: PPUSH
10508: LD_EXP 49
10512: PUSH
10513: LD_OWVAR 67
10517: ARRAY
10518: PPUSH
10519: LD_INT 2
10521: PPUSH
10522: LD_VAR 0 3
10526: PUSH
10527: LD_INT 15
10529: PLUS
10530: PPUSH
10531: CALL 10836 0 2
10535: PPUSH
10536: CALL 8048 0 4
// ah = CreateHuman ;
10540: LD_ADDR_LOC 10
10544: PUSH
10545: CALL_OW 44
10549: ST_TO_ADDR
// pom = pom ^ ah ;
10550: LD_ADDR_VAR 0 2
10554: PUSH
10555: LD_VAR 0 2
10559: PUSH
10560: LD_LOC 10
10564: ADD
10565: ST_TO_ADDR
// end ;
10566: GO 10485
10568: POP
10569: POP
// JEDNOTKY_BAZE_3_LIST = pom ;
10570: LD_ADDR_EXP 12
10574: PUSH
10575: LD_VAR 0 2
10579: ST_TO_ADDR
// end ;
10580: LD_VAR 0 1
10584: RET
// function get_sex ; begin
10585: LD_INT 0
10587: PPUSH
// if Prob ( 20 ) then
10588: LD_INT 20
10590: PPUSH
10591: CALL_OW 13
10595: IFFALSE 10607
// result = sex_female else
10597: LD_ADDR_VAR 0 1
10601: PUSH
10602: LD_INT 2
10604: ST_TO_ADDR
10605: GO 10615
// result = sex_male ;
10607: LD_ADDR_VAR 0 1
10611: PUSH
10612: LD_INT 1
10614: ST_TO_ADDR
// end ;
10615: LD_VAR 0 1
10619: RET
// function get_sex_uprava ( ser , cis ) ; var a ; begin
10620: LD_INT 0
10622: PPUSH
10623: PPUSH
// case ser of 1 :
10624: LD_VAR 0 1
10628: PUSH
10629: LD_INT 1
10631: DOUBLE
10632: EQUAL
10633: IFTRUE 10637
10635: GO 10729
10637: POP
// if cis = 1 then
10638: LD_VAR 0 2
10642: PUSH
10643: LD_INT 1
10645: EQUAL
10646: IFFALSE 10658
// a = sex_female else
10648: LD_ADDR_VAR 0 4
10652: PUSH
10653: LD_INT 2
10655: ST_TO_ADDR
10656: GO 10727
// if cis in [ 3 , 4 , 5 , 7 , 8 , 13 , 14 , 15 , 20 , 23 ] then
10658: LD_VAR 0 2
10662: PUSH
10663: LD_INT 3
10665: PUSH
10666: LD_INT 4
10668: PUSH
10669: LD_INT 5
10671: PUSH
10672: LD_INT 7
10674: PUSH
10675: LD_INT 8
10677: PUSH
10678: LD_INT 13
10680: PUSH
10681: LD_INT 14
10683: PUSH
10684: LD_INT 15
10686: PUSH
10687: LD_INT 20
10689: PUSH
10690: LD_INT 23
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: IN
10705: IFFALSE 10717
// a = sex_male else
10707: LD_ADDR_VAR 0 4
10711: PUSH
10712: LD_INT 1
10714: ST_TO_ADDR
10715: GO 10727
// a = get_sex ; 2 :
10717: LD_ADDR_VAR 0 4
10721: PUSH
10722: CALL 10585 0 0
10726: ST_TO_ADDR
10727: GO 10821
10729: LD_INT 2
10731: DOUBLE
10732: EQUAL
10733: IFTRUE 10737
10735: GO 10820
10737: POP
// if cis in [ 5 ] then
10738: LD_VAR 0 2
10742: PUSH
10743: LD_INT 5
10745: PUSH
10746: EMPTY
10747: LIST
10748: IN
10749: IFFALSE 10761
// a = sex_female else
10751: LD_ADDR_VAR 0 4
10755: PUSH
10756: LD_INT 2
10758: ST_TO_ADDR
10759: GO 10818
// if cis in [ 2 , 3 , 4 , 8 , 11 , 14 , 17 ] then
10761: LD_VAR 0 2
10765: PUSH
10766: LD_INT 2
10768: PUSH
10769: LD_INT 3
10771: PUSH
10772: LD_INT 4
10774: PUSH
10775: LD_INT 8
10777: PUSH
10778: LD_INT 11
10780: PUSH
10781: LD_INT 14
10783: PUSH
10784: LD_INT 17
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: IN
10796: IFFALSE 10808
// a = sex_male else
10798: LD_ADDR_VAR 0 4
10802: PUSH
10803: LD_INT 1
10805: ST_TO_ADDR
10806: GO 10818
// a = get_sex ; end ;
10808: LD_ADDR_VAR 0 4
10812: PUSH
10813: CALL 10585 0 0
10817: ST_TO_ADDR
10818: GO 10821
10820: POP
// result = a ;
10821: LD_ADDR_VAR 0 3
10825: PUSH
10826: LD_VAR 0 4
10830: ST_TO_ADDR
// end ;
10831: LD_VAR 0 3
10835: RET
// function get_name ( serie , cislo ) ; var a ; begin
10836: LD_INT 0
10838: PPUSH
10839: PPUSH
// a =  ;
10840: LD_ADDR_VAR 0 4
10844: PUSH
10845: LD_STRING 
10847: ST_TO_ADDR
// case serie of 1 :
10848: LD_VAR 0 1
10852: PUSH
10853: LD_INT 1
10855: DOUBLE
10856: EQUAL
10857: IFTRUE 10861
10859: GO 11079
10861: POP
// case cislo of 1 :
10862: LD_VAR 0 2
10866: PUSH
10867: LD_INT 1
10869: DOUBLE
10870: EQUAL
10871: IFTRUE 10875
10873: GO 10886
10875: POP
// a = Petronela Fagan ; 3 :
10876: LD_ADDR_VAR 0 4
10880: PUSH
10881: LD_STRING Petronela Fagan
10883: ST_TO_ADDR
10884: GO 11077
10886: LD_INT 3
10888: DOUBLE
10889: EQUAL
10890: IFTRUE 10894
10892: GO 10905
10894: POP
// a = Jaryn Floryk ; 4 :
10895: LD_ADDR_VAR 0 4
10899: PUSH
10900: LD_STRING Jaryn Floryk
10902: ST_TO_ADDR
10903: GO 11077
10905: LD_INT 4
10907: DOUBLE
10908: EQUAL
10909: IFTRUE 10913
10911: GO 10924
10913: POP
// a = Ira Smailer ; 5 :
10914: LD_ADDR_VAR 0 4
10918: PUSH
10919: LD_STRING Ira Smailer
10921: ST_TO_ADDR
10922: GO 11077
10924: LD_INT 5
10926: DOUBLE
10927: EQUAL
10928: IFTRUE 10932
10930: GO 10943
10932: POP
// a = Soren Rafin ; 7 :
10933: LD_ADDR_VAR 0 4
10937: PUSH
10938: LD_STRING Soren Rafin
10940: ST_TO_ADDR
10941: GO 11077
10943: LD_INT 7
10945: DOUBLE
10946: EQUAL
10947: IFTRUE 10951
10949: GO 10962
10951: POP
// a = Mark Kent ; 8 :
10952: LD_ADDR_VAR 0 4
10956: PUSH
10957: LD_STRING Mark Kent
10959: ST_TO_ADDR
10960: GO 11077
10962: LD_INT 8
10964: DOUBLE
10965: EQUAL
10966: IFTRUE 10970
10968: GO 10981
10970: POP
// a = Patrick Bull ; 13 :
10971: LD_ADDR_VAR 0 4
10975: PUSH
10976: LD_STRING Patrick Bull
10978: ST_TO_ADDR
10979: GO 11077
10981: LD_INT 13
10983: DOUBLE
10984: EQUAL
10985: IFTRUE 10989
10987: GO 11000
10989: POP
// a = Muzhid Galabi ; 14 :
10990: LD_ADDR_VAR 0 4
10994: PUSH
10995: LD_STRING Muzhid Galabi
10997: ST_TO_ADDR
10998: GO 11077
11000: LD_INT 14
11002: DOUBLE
11003: EQUAL
11004: IFTRUE 11008
11006: GO 11019
11008: POP
// a = Maxim Daigle ; 15 :
11009: LD_ADDR_VAR 0 4
11013: PUSH
11014: LD_STRING Maxim Daigle
11016: ST_TO_ADDR
11017: GO 11077
11019: LD_INT 15
11021: DOUBLE
11022: EQUAL
11023: IFTRUE 11027
11025: GO 11038
11027: POP
// a = Rick C. West ; 20 :
11028: LD_ADDR_VAR 0 4
11032: PUSH
11033: LD_STRING Rick C. West
11035: ST_TO_ADDR
11036: GO 11077
11038: LD_INT 20
11040: DOUBLE
11041: EQUAL
11042: IFTRUE 11046
11044: GO 11057
11046: POP
// a = Sinisa Mikhailovic ; 23 :
11047: LD_ADDR_VAR 0 4
11051: PUSH
11052: LD_STRING Sinisa Mikhailovic
11054: ST_TO_ADDR
11055: GO 11077
11057: LD_INT 23
11059: DOUBLE
11060: EQUAL
11061: IFTRUE 11065
11063: GO 11076
11065: POP
// a = Wayne Kettlewell ; end ; 2 :
11066: LD_ADDR_VAR 0 4
11070: PUSH
11071: LD_STRING Wayne Kettlewell
11073: ST_TO_ADDR
11074: GO 11077
11076: POP
11077: GO 11249
11079: LD_INT 2
11081: DOUBLE
11082: EQUAL
11083: IFTRUE 11087
11085: GO 11248
11087: POP
// case cislo of 2 :
11088: LD_VAR 0 2
11092: PUSH
11093: LD_INT 2
11095: DOUBLE
11096: EQUAL
11097: IFTRUE 11101
11099: GO 11112
11101: POP
// a = Danne Rydrgren ; 3 :
11102: LD_ADDR_VAR 0 4
11106: PUSH
11107: LD_STRING Danne Rydrgren
11109: ST_TO_ADDR
11110: GO 11246
11112: LD_INT 3
11114: DOUBLE
11115: EQUAL
11116: IFTRUE 11120
11118: GO 11131
11120: POP
// a = Alfred Van der Poel ; 4 :
11121: LD_ADDR_VAR 0 4
11125: PUSH
11126: LD_STRING Alfred Van der Poel
11128: ST_TO_ADDR
11129: GO 11246
11131: LD_INT 4
11133: DOUBLE
11134: EQUAL
11135: IFTRUE 11139
11137: GO 11150
11139: POP
// a = Muhammad Ali ; 5 :
11140: LD_ADDR_VAR 0 4
11144: PUSH
11145: LD_STRING Muhammad Ali
11147: ST_TO_ADDR
11148: GO 11246
11150: LD_INT 5
11152: DOUBLE
11153: EQUAL
11154: IFTRUE 11158
11156: GO 11169
11158: POP
// a = Elena Grubina ; 8 :
11159: LD_ADDR_VAR 0 4
11163: PUSH
11164: LD_STRING Elena Grubina
11166: ST_TO_ADDR
11167: GO 11246
11169: LD_INT 8
11171: DOUBLE
11172: EQUAL
11173: IFTRUE 11177
11175: GO 11188
11177: POP
// a = Oto Zimmerman ; 11 :
11178: LD_ADDR_VAR 0 4
11182: PUSH
11183: LD_STRING Oto Zimmerman
11185: ST_TO_ADDR
11186: GO 11246
11188: LD_INT 11
11190: DOUBLE
11191: EQUAL
11192: IFTRUE 11196
11194: GO 11207
11196: POP
// a = Neil Hoss ; 14 :
11197: LD_ADDR_VAR 0 4
11201: PUSH
11202: LD_STRING Neil Hoss
11204: ST_TO_ADDR
11205: GO 11246
11207: LD_INT 14
11209: DOUBLE
11210: EQUAL
11211: IFTRUE 11215
11213: GO 11226
11215: POP
// a = Cardi Nowitzke ; 17 :
11216: LD_ADDR_VAR 0 4
11220: PUSH
11221: LD_STRING Cardi Nowitzke
11223: ST_TO_ADDR
11224: GO 11246
11226: LD_INT 17
11228: DOUBLE
11229: EQUAL
11230: IFTRUE 11234
11232: GO 11245
11234: POP
// a = Leonard Van Horn ; end ; end ;
11235: LD_ADDR_VAR 0 4
11239: PUSH
11240: LD_STRING Leonard Van Horn
11242: ST_TO_ADDR
11243: GO 11246
11245: POP
11246: GO 11249
11248: POP
// result = a ;
11249: LD_ADDR_VAR 0 3
11253: PUSH
11254: LD_VAR 0 4
11258: ST_TO_ADDR
// end ;
11259: LD_VAR 0 3
11263: RET
// export function choose_vojaky ; var pom , i ; var ovyb ; var poc ; begin
11264: LD_INT 0
11266: PPUSH
11267: PPUSH
11268: PPUSH
11269: PPUSH
11270: PPUSH
// SetClass ( JMM , class_soldier ) ;
11271: LD_EXP 32
11275: PPUSH
11276: LD_INT 1
11278: PPUSH
11279: CALL_OW 336
// if Gary > 0 then
11283: LD_EXP 34
11287: PUSH
11288: LD_INT 0
11290: GREATER
11291: IFFALSE 11305
// SetClass ( Gary , class_soldier ) ;
11293: LD_EXP 34
11297: PPUSH
11298: LD_INT 1
11300: PPUSH
11301: CALL_OW 336
// if Lisa > 0 then
11305: LD_EXP 37
11309: PUSH
11310: LD_INT 0
11312: GREATER
11313: IFFALSE 11327
// SetClass ( Lisa , class_soldier ) ;
11315: LD_EXP 37
11319: PPUSH
11320: LD_INT 1
11322: PPUSH
11323: CALL_OW 336
// if Yamoko > 0 then
11327: LD_EXP 39
11331: PUSH
11332: LD_INT 0
11334: GREATER
11335: IFFALSE 11349
// SetClass ( Yamoko , class_soldier ) ;
11337: LD_EXP 39
11341: PPUSH
11342: LD_INT 1
11344: PPUSH
11345: CALL_OW 336
// if Frank > 0 then
11349: LD_EXP 36
11353: PUSH
11354: LD_INT 0
11356: GREATER
11357: IFFALSE 11371
// SetClass ( Frank , class_soldier ) ;
11359: LD_EXP 36
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: CALL_OW 336
// if Cornel > 0 then
11371: LD_EXP 38
11375: PUSH
11376: LD_INT 0
11378: GREATER
11379: IFFALSE 11393
// SetClass ( Cornel , class_soldier ) ;
11381: LD_EXP 38
11385: PPUSH
11386: LD_INT 1
11388: PPUSH
11389: CALL_OW 336
// if Bobby > 0 then
11393: LD_EXP 35
11397: PUSH
11398: LD_INT 0
11400: GREATER
11401: IFFALSE 11415
// SetClass ( Bobby , class_soldier ) ;
11403: LD_EXP 35
11407: PPUSH
11408: LD_INT 1
11410: PPUSH
11411: CALL_OW 336
// if Cyrus > 0 then
11415: LD_EXP 40
11419: PUSH
11420: LD_INT 0
11422: GREATER
11423: IFFALSE 11437
// SetClass ( Cyrus , class_soldier ) ;
11425: LD_EXP 40
11429: PPUSH
11430: LD_INT 1
11432: PPUSH
11433: CALL_OW 336
// if Don > 0 then
11437: LD_EXP 41
11441: PUSH
11442: LD_INT 0
11444: GREATER
11445: IFFALSE 11459
// SetClass ( Don , class_engineer ) ;
11447: LD_EXP 41
11451: PPUSH
11452: LD_INT 2
11454: PPUSH
11455: CALL_OW 336
// if Brown > 0 then
11459: LD_EXP 42
11463: PUSH
11464: LD_INT 0
11466: GREATER
11467: IFFALSE 11481
// SetClass ( Brown , class_soldier ) ;
11469: LD_EXP 42
11473: PPUSH
11474: LD_INT 1
11476: PPUSH
11477: CALL_OW 336
// ovyb = [ sel_not_changeable , sel_hired , sel_dont_change_class , JMM ] ;
11481: LD_ADDR_VAR 0 4
11485: PUSH
11486: LD_INT -4
11488: PUSH
11489: LD_INT -1
11491: PUSH
11492: LD_INT -6
11494: PUSH
11495: LD_EXP 32
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: ST_TO_ADDR
// ovyb = ovyb ^ [ sel_not_hired , Powell , sel_changeable , sel_change_class ] ;
11506: LD_ADDR_VAR 0 4
11510: PUSH
11511: LD_VAR 0 4
11515: PUSH
11516: LD_INT -2
11518: PUSH
11519: LD_EXP 33
11523: PUSH
11524: LD_INT -3
11526: PUSH
11527: LD_INT -5
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: ADD
11536: ST_TO_ADDR
// poc = 0 ;
11537: LD_ADDR_VAR 0 5
11541: PUSH
11542: LD_INT 0
11544: ST_TO_ADDR
// if Gary <> 0 and GARYL <> 7 then
11545: LD_EXP 34
11549: PUSH
11550: LD_INT 0
11552: NONEQUAL
11553: PUSH
11554: LD_EXP 19
11558: PUSH
11559: LD_INT 7
11561: NONEQUAL
11562: AND
11563: IFFALSE 11595
// begin ovyb = ovyb ^ Gary ;
11565: LD_ADDR_VAR 0 4
11569: PUSH
11570: LD_VAR 0 4
11574: PUSH
11575: LD_EXP 34
11579: ADD
11580: ST_TO_ADDR
// poc = poc + 1 ;
11581: LD_ADDR_VAR 0 5
11585: PUSH
11586: LD_VAR 0 5
11590: PUSH
11591: LD_INT 1
11593: PLUS
11594: ST_TO_ADDR
// end ; if Lisa <> 0 and LISAL <> 7 then
11595: LD_EXP 37
11599: PUSH
11600: LD_INT 0
11602: NONEQUAL
11603: PUSH
11604: LD_EXP 20
11608: PUSH
11609: LD_INT 7
11611: NONEQUAL
11612: AND
11613: IFFALSE 11645
// begin ovyb = ovyb ^ Lisa ;
11615: LD_ADDR_VAR 0 4
11619: PUSH
11620: LD_VAR 0 4
11624: PUSH
11625: LD_EXP 37
11629: ADD
11630: ST_TO_ADDR
// poc = poc + 1 ;
11631: LD_ADDR_VAR 0 5
11635: PUSH
11636: LD_VAR 0 5
11640: PUSH
11641: LD_INT 1
11643: PLUS
11644: ST_TO_ADDR
// end ; if Cornel <> 0 and CORNELL <> 7 then
11645: LD_EXP 38
11649: PUSH
11650: LD_INT 0
11652: NONEQUAL
11653: PUSH
11654: LD_EXP 23
11658: PUSH
11659: LD_INT 7
11661: NONEQUAL
11662: AND
11663: IFFALSE 11695
// begin ovyb = ovyb ^ Cornel ;
11665: LD_ADDR_VAR 0 4
11669: PUSH
11670: LD_VAR 0 4
11674: PUSH
11675: LD_EXP 38
11679: ADD
11680: ST_TO_ADDR
// poc = poc + 1 ;
11681: LD_ADDR_VAR 0 5
11685: PUSH
11686: LD_VAR 0 5
11690: PUSH
11691: LD_INT 1
11693: PLUS
11694: ST_TO_ADDR
// end ; if Frank <> 0 and FRANKL <> 7 then
11695: LD_EXP 36
11699: PUSH
11700: LD_INT 0
11702: NONEQUAL
11703: PUSH
11704: LD_EXP 22
11708: PUSH
11709: LD_INT 7
11711: NONEQUAL
11712: AND
11713: IFFALSE 11745
// begin ovyb = ovyb ^ Frank ;
11715: LD_ADDR_VAR 0 4
11719: PUSH
11720: LD_VAR 0 4
11724: PUSH
11725: LD_EXP 36
11729: ADD
11730: ST_TO_ADDR
// poc = poc + 1 ;
11731: LD_ADDR_VAR 0 5
11735: PUSH
11736: LD_VAR 0 5
11740: PUSH
11741: LD_INT 1
11743: PLUS
11744: ST_TO_ADDR
// end ; if Yamoko <> 0 and ( Frank = 0 or FRANKL = 7 ) then
11745: LD_EXP 39
11749: PUSH
11750: LD_INT 0
11752: NONEQUAL
11753: PUSH
11754: LD_EXP 36
11758: PUSH
11759: LD_INT 0
11761: EQUAL
11762: PUSH
11763: LD_EXP 22
11767: PUSH
11768: LD_INT 7
11770: EQUAL
11771: OR
11772: AND
11773: IFFALSE 11805
// begin ovyb = ovyb ^ Yamoko ;
11775: LD_ADDR_VAR 0 4
11779: PUSH
11780: LD_VAR 0 4
11784: PUSH
11785: LD_EXP 39
11789: ADD
11790: ST_TO_ADDR
// poc = poc + 1 ;
11791: LD_ADDR_VAR 0 5
11795: PUSH
11796: LD_VAR 0 5
11800: PUSH
11801: LD_INT 1
11803: PLUS
11804: ST_TO_ADDR
// end ; if Bobby <> 0 and BOBL <> 7 then
11805: LD_EXP 35
11809: PUSH
11810: LD_INT 0
11812: NONEQUAL
11813: PUSH
11814: LD_EXP 24
11818: PUSH
11819: LD_INT 7
11821: NONEQUAL
11822: AND
11823: IFFALSE 11855
// begin ovyb = ovyb ^ Bobby ;
11825: LD_ADDR_VAR 0 4
11829: PUSH
11830: LD_VAR 0 4
11834: PUSH
11835: LD_EXP 35
11839: ADD
11840: ST_TO_ADDR
// poc = poc + 1 ;
11841: LD_ADDR_VAR 0 5
11845: PUSH
11846: LD_VAR 0 5
11850: PUSH
11851: LD_INT 1
11853: PLUS
11854: ST_TO_ADDR
// end ; if Cyrus <> 0 and CYRL <> 7 then
11855: LD_EXP 40
11859: PUSH
11860: LD_INT 0
11862: NONEQUAL
11863: PUSH
11864: LD_EXP 25
11868: PUSH
11869: LD_INT 7
11871: NONEQUAL
11872: AND
11873: IFFALSE 11905
// begin ovyb = ovyb ^ Cyrus ;
11875: LD_ADDR_VAR 0 4
11879: PUSH
11880: LD_VAR 0 4
11884: PUSH
11885: LD_EXP 40
11889: ADD
11890: ST_TO_ADDR
// poc = poc + 1 ;
11891: LD_ADDR_VAR 0 5
11895: PUSH
11896: LD_VAR 0 5
11900: PUSH
11901: LD_INT 1
11903: PLUS
11904: ST_TO_ADDR
// end ; if Don <> 0 and DONL <> 7 then
11905: LD_EXP 41
11909: PUSH
11910: LD_INT 0
11912: NONEQUAL
11913: PUSH
11914: LD_EXP 26
11918: PUSH
11919: LD_INT 7
11921: NONEQUAL
11922: AND
11923: IFFALSE 11955
// begin ovyb = ovyb ^ Don ;
11925: LD_ADDR_VAR 0 4
11929: PUSH
11930: LD_VAR 0 4
11934: PUSH
11935: LD_EXP 41
11939: ADD
11940: ST_TO_ADDR
// poc = poc + 1 ;
11941: LD_ADDR_VAR 0 5
11945: PUSH
11946: LD_VAR 0 5
11950: PUSH
11951: LD_INT 1
11953: PLUS
11954: ST_TO_ADDR
// end ; if Brown <> 0 and BROWNL then
11955: LD_EXP 42
11959: PUSH
11960: LD_INT 0
11962: NONEQUAL
11963: PUSH
11964: LD_EXP 27
11968: AND
11969: IFFALSE 12001
// begin ovyb = ovyb ^ Brown ;
11971: LD_ADDR_VAR 0 4
11975: PUSH
11976: LD_VAR 0 4
11980: PUSH
11981: LD_EXP 42
11985: ADD
11986: ST_TO_ADDR
// poc = poc + 1 ;
11987: LD_ADDR_VAR 0 5
11991: PUSH
11992: LD_VAR 0 5
11996: PUSH
11997: LD_INT 1
11999: PLUS
12000: ST_TO_ADDR
// end ; pom = uprav_lidi ( lidi_other ) ;
12001: LD_ADDR_VAR 0 2
12005: PUSH
12006: LD_EXP 52
12010: PPUSH
12011: CALL 12368 0 1
12015: ST_TO_ADDR
// ovyb = ovyb ^ pom ;
12016: LD_ADDR_VAR 0 4
12020: PUSH
12021: LD_VAR 0 4
12025: PUSH
12026: LD_VAR 0 2
12030: ADD
12031: ST_TO_ADDR
// poc = poc + pom + 0 ;
12032: LD_ADDR_VAR 0 5
12036: PUSH
12037: LD_VAR 0 5
12041: PUSH
12042: LD_VAR 0 2
12046: PLUS
12047: PUSH
12048: LD_INT 0
12050: PLUS
12051: ST_TO_ADDR
// uc_side := You ;
12052: LD_ADDR_OWVAR 20
12056: PUSH
12057: LD_EXP 1
12061: ST_TO_ADDR
// uc_nation := nation_american ;
12062: LD_ADDR_OWVAR 21
12066: PUSH
12067: LD_INT 1
12069: ST_TO_ADDR
// uc_direction := 0 ;
12070: LD_ADDR_OWVAR 24
12074: PUSH
12075: LD_INT 0
12077: ST_TO_ADDR
// prepare_human ( sex_male , class_engineer , 6 ,  ) ;
12078: LD_INT 1
12080: PPUSH
12081: LD_INT 2
12083: PPUSH
12084: LD_INT 6
12086: PPUSH
12087: LD_STRING 
12089: PPUSH
12090: CALL 8048 0 4
// pom = CreateHuman ;
12094: LD_ADDR_VAR 0 2
12098: PUSH
12099: CALL_OW 44
12103: ST_TO_ADDR
// ovyb = ovyb ^ pom ;
12104: LD_ADDR_VAR 0 4
12108: PUSH
12109: LD_VAR 0 4
12113: PUSH
12114: LD_VAR 0 2
12118: ADD
12119: ST_TO_ADDR
// prepare_human ( sex_male , class_soldier , 6 ,  ) ;
12120: LD_INT 1
12122: PPUSH
12123: LD_INT 1
12125: PPUSH
12126: LD_INT 6
12128: PPUSH
12129: LD_STRING 
12131: PPUSH
12132: CALL 8048 0 4
// pom = CreateHuman ;
12136: LD_ADDR_VAR 0 2
12140: PUSH
12141: CALL_OW 44
12145: ST_TO_ADDR
// ovyb = ovyb ^ pom ;
12146: LD_ADDR_VAR 0 4
12150: PUSH
12151: LD_VAR 0 4
12155: PUSH
12156: LD_VAR 0 2
12160: ADD
12161: ST_TO_ADDR
// poc = poc + 2 ;
12162: LD_ADDR_VAR 0 5
12166: PUSH
12167: LD_VAR 0 5
12171: PUSH
12172: LD_INT 2
12174: PLUS
12175: ST_TO_ADDR
// if poc < 20 then
12176: LD_VAR 0 5
12180: PUSH
12181: LD_INT 20
12183: LESS
12184: IFFALSE 12288
// for i := 1 to 20 - poc do
12186: LD_ADDR_VAR 0 3
12190: PUSH
12191: DOUBLE
12192: LD_INT 1
12194: DEC
12195: ST_TO_ADDR
12196: LD_INT 20
12198: PUSH
12199: LD_VAR 0 5
12203: MINUS
12204: PUSH
12205: FOR_TO
12206: IFFALSE 12286
// begin if Rand ( 1 , 2 ) = 1 then
12208: LD_INT 1
12210: PPUSH
12211: LD_INT 2
12213: PPUSH
12214: CALL_OW 12
12218: PUSH
12219: LD_INT 1
12221: EQUAL
12222: IFFALSE 12242
// prepare_human ( sex_male , class_engineer , 6 ,  ) else
12224: LD_INT 1
12226: PPUSH
12227: LD_INT 2
12229: PPUSH
12230: LD_INT 6
12232: PPUSH
12233: LD_STRING 
12235: PPUSH
12236: CALL 8048 0 4
12240: GO 12258
// prepare_human ( sex_male , class_soldier , 6 ,  ) ;
12242: LD_INT 1
12244: PPUSH
12245: LD_INT 1
12247: PPUSH
12248: LD_INT 6
12250: PPUSH
12251: LD_STRING 
12253: PPUSH
12254: CALL 8048 0 4
// pom = CreateHuman ;
12258: LD_ADDR_VAR 0 2
12262: PUSH
12263: CALL_OW 44
12267: ST_TO_ADDR
// ovyb = ovyb ^ pom ;
12268: LD_ADDR_VAR 0 4
12272: PUSH
12273: LD_VAR 0 4
12277: PUSH
12278: LD_VAR 0 2
12282: ADD
12283: ST_TO_ADDR
// end ;
12284: GO 12205
12286: POP
12287: POP
// Amici_enter = CharacterSelection ( Choose 11 people , 11 , 11 , ovyb , [ [ class_engineer , 1 ] , [ class_soldier , 4 ] , [ class_mechanic , 0 ] ] ) ;
12288: LD_ADDR_EXP 43
12292: PUSH
12293: LD_STRING Choose 11 people
12295: PPUSH
12296: LD_INT 11
12298: PPUSH
12299: LD_INT 11
12301: PPUSH
12302: LD_VAR 0 4
12306: PPUSH
12307: LD_INT 2
12309: PUSH
12310: LD_INT 1
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: PUSH
12317: LD_INT 1
12319: PUSH
12320: LD_INT 4
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: PUSH
12327: LD_INT 3
12329: PUSH
12330: LD_INT 0
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: LIST
12341: PPUSH
12342: CALL_OW 42
12346: ST_TO_ADDR
// Amici_enter = Amici_enter ^ JMM ;
12347: LD_ADDR_EXP 43
12351: PUSH
12352: LD_EXP 43
12356: PUSH
12357: LD_EXP 32
12361: ADD
12362: ST_TO_ADDR
// end ;
12363: LD_VAR 0 1
12367: RET
// function uprav_lidi ( lidi ) ; var pom , i ; var sk ; begin
12368: LD_INT 0
12370: PPUSH
12371: PPUSH
12372: PPUSH
12373: PPUSH
// pom = [ ] ;
12374: LD_ADDR_VAR 0 3
12378: PUSH
12379: EMPTY
12380: ST_TO_ADDR
// for i in lidi do
12381: LD_ADDR_VAR 0 4
12385: PUSH
12386: LD_VAR 0 1
12390: PUSH
12391: FOR_IN
12392: IFFALSE 12535
// begin sk = get_skills ( i ) ;
12394: LD_ADDR_VAR 0 5
12398: PUSH
12399: LD_VAR 0 4
12403: PPUSH
12404: CALL 12552 0 1
12408: ST_TO_ADDR
// if sk [ 4 ] > sk [ 1 ] and sk [ 4 ] > sk [ 2 ] and sk [ 4 ] > sk [ 3 ] then
12409: LD_VAR 0 5
12413: PUSH
12414: LD_INT 4
12416: ARRAY
12417: PUSH
12418: LD_VAR 0 5
12422: PUSH
12423: LD_INT 1
12425: ARRAY
12426: GREATER
12427: PUSH
12428: LD_VAR 0 5
12432: PUSH
12433: LD_INT 4
12435: ARRAY
12436: PUSH
12437: LD_VAR 0 5
12441: PUSH
12442: LD_INT 2
12444: ARRAY
12445: GREATER
12446: AND
12447: PUSH
12448: LD_VAR 0 5
12452: PUSH
12453: LD_INT 4
12455: ARRAY
12456: PUSH
12457: LD_VAR 0 5
12461: PUSH
12462: LD_INT 3
12464: ARRAY
12465: GREATER
12466: AND
12467: IFFALSE 12471
// continue ;
12469: GO 12391
// if sk [ 1 ] > sk [ 2 ] then
12471: LD_VAR 0 5
12475: PUSH
12476: LD_INT 1
12478: ARRAY
12479: PUSH
12480: LD_VAR 0 5
12484: PUSH
12485: LD_INT 2
12487: ARRAY
12488: GREATER
12489: IFFALSE 12505
// SetClass ( i , class_soldier ) else
12491: LD_VAR 0 4
12495: PPUSH
12496: LD_INT 1
12498: PPUSH
12499: CALL_OW 336
12503: GO 12517
// SetClass ( i , class_engineer ) ;
12505: LD_VAR 0 4
12509: PPUSH
12510: LD_INT 2
12512: PPUSH
12513: CALL_OW 336
// pom = pom ^ i ;
12517: LD_ADDR_VAR 0 3
12521: PUSH
12522: LD_VAR 0 3
12526: PUSH
12527: LD_VAR 0 4
12531: ADD
12532: ST_TO_ADDR
// end ;
12533: GO 12391
12535: POP
12536: POP
// result := pom ;
12537: LD_ADDR_VAR 0 2
12541: PUSH
12542: LD_VAR 0 3
12546: ST_TO_ADDR
// end ;
12547: LD_VAR 0 2
12551: RET
// function get_skills ( un ) ; var pom1 , pom2 , pom3 , pom4 ; begin
12552: LD_INT 0
12554: PPUSH
12555: PPUSH
12556: PPUSH
12557: PPUSH
12558: PPUSH
// pom1 := GetSkill ( un , skill_combat ) ;
12559: LD_ADDR_VAR 0 3
12563: PUSH
12564: LD_VAR 0 1
12568: PPUSH
12569: LD_INT 1
12571: PPUSH
12572: CALL_OW 259
12576: ST_TO_ADDR
// pom2 := GetSkill ( un , skill_engineering ) ;
12577: LD_ADDR_VAR 0 4
12581: PUSH
12582: LD_VAR 0 1
12586: PPUSH
12587: LD_INT 2
12589: PPUSH
12590: CALL_OW 259
12594: ST_TO_ADDR
// pom3 := GetSkill ( un , skill_mechanical ) ;
12595: LD_ADDR_VAR 0 5
12599: PUSH
12600: LD_VAR 0 1
12604: PPUSH
12605: LD_INT 3
12607: PPUSH
12608: CALL_OW 259
12612: ST_TO_ADDR
// pom4 := GetSkill ( un , skill_scientistic ) ;
12613: LD_ADDR_VAR 0 6
12617: PUSH
12618: LD_VAR 0 1
12622: PPUSH
12623: LD_INT 4
12625: PPUSH
12626: CALL_OW 259
12630: ST_TO_ADDR
// result := [ pom1 , pom2 , pom3 , pom4 ] end ;
12631: LD_ADDR_VAR 0 2
12635: PUSH
12636: LD_VAR 0 3
12640: PUSH
12641: LD_VAR 0 4
12645: PUSH
12646: LD_VAR 0 5
12650: PUSH
12651: LD_VAR 0 6
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: ST_TO_ADDR
12662: LD_VAR 0 2
12666: RET
// export function create_arabske_utoky_behem_mise ; var pom ; begin
12667: LD_INT 0
12669: PPUSH
12670: PPUSH
// uc_side = Arabi ;
12671: LD_ADDR_OWVAR 20
12675: PUSH
12676: LD_EXP 3
12680: ST_TO_ADDR
// uc_nation = nation_arabian ;
12681: LD_ADDR_OWVAR 21
12685: PUSH
12686: LD_INT 2
12688: ST_TO_ADDR
// pom = [ ] ;
12689: LD_ADDR_VAR 0 2
12693: PUSH
12694: EMPTY
12695: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 4 ,  ) ;
12696: LD_ADDR_VAR 0 2
12700: PUSH
12701: CALL 10585 0 0
12705: PPUSH
12706: LD_INT 1
12708: PPUSH
12709: LD_INT 4
12711: PPUSH
12712: LD_STRING 
12714: PPUSH
12715: CALL 14149 0 4
12719: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 4 ,  ) ;
12720: LD_ADDR_VAR 0 2
12724: PUSH
12725: LD_VAR 0 2
12729: PUSH
12730: CALL 10585 0 0
12734: PPUSH
12735: LD_INT 1
12737: PPUSH
12738: LD_INT 4
12740: PPUSH
12741: LD_STRING 
12743: PPUSH
12744: CALL 14149 0 4
12748: ADD
12749: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , 5 ,  ) ;
12750: LD_ADDR_VAR 0 2
12754: PUSH
12755: LD_VAR 0 2
12759: PUSH
12760: CALL 10585 0 0
12764: PPUSH
12765: LD_INT 8
12767: PPUSH
12768: LD_INT 5
12770: PPUSH
12771: LD_STRING 
12773: PPUSH
12774: CALL 14149 0 4
12778: ADD
12779: ST_TO_ADDR
// if difficulty > 1 then
12780: LD_OWVAR 67
12784: PUSH
12785: LD_INT 1
12787: GREATER
12788: IFFALSE 12820
// pom = pom ^ get_human ( get_sex , class_mortar , 5 ,  ) ;
12790: LD_ADDR_VAR 0 2
12794: PUSH
12795: LD_VAR 0 2
12799: PUSH
12800: CALL 10585 0 0
12804: PPUSH
12805: LD_INT 8
12807: PPUSH
12808: LD_INT 5
12810: PPUSH
12811: LD_STRING 
12813: PPUSH
12814: CALL 14149 0 4
12818: ADD
12819: ST_TO_ADDR
// if difficulty > 2 then
12820: LD_OWVAR 67
12824: PUSH
12825: LD_INT 2
12827: GREATER
12828: IFFALSE 12860
// pom = pom ^ get_human ( get_sex , class_soldier , 5 ,  ) ;
12830: LD_ADDR_VAR 0 2
12834: PUSH
12835: LD_VAR 0 2
12839: PUSH
12840: CALL 10585 0 0
12844: PPUSH
12845: LD_INT 1
12847: PPUSH
12848: LD_INT 5
12850: PPUSH
12851: LD_STRING 
12853: PPUSH
12854: CALL 14149 0 4
12858: ADD
12859: ST_TO_ADDR
// Ar_utok1_LIST = pom ;
12860: LD_ADDR_EXP 13
12864: PUSH
12865: LD_VAR 0 2
12869: ST_TO_ADDR
// pom = [ ] ;
12870: LD_ADDR_VAR 0 2
12874: PUSH
12875: EMPTY
12876: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
12877: LD_ADDR_OWVAR 37
12881: PUSH
12882: LD_INT 14
12884: ST_TO_ADDR
// vc_weapon = ar_gun ;
12885: LD_ADDR_OWVAR 40
12889: PUSH
12890: LD_INT 27
12892: ST_TO_ADDR
// vc_control = control_apeman ;
12893: LD_ADDR_OWVAR 38
12897: PUSH
12898: LD_INT 5
12900: ST_TO_ADDR
// vc_engine = engine_siberite ;
12901: LD_ADDR_OWVAR 39
12905: PUSH
12906: LD_INT 3
12908: ST_TO_ADDR
// av = CreateVehicle ;
12909: LD_ADDR_LOC 11
12913: PUSH
12914: CALL_OW 45
12918: ST_TO_ADDR
// pom = av ;
12919: LD_ADDR_VAR 0 2
12923: PUSH
12924: LD_LOC 11
12928: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , 4 ,  ) ;
12929: LD_ADDR_LOC 10
12933: PUSH
12934: CALL 10585 0 0
12938: PPUSH
12939: LD_INT 3
12941: PPUSH
12942: LD_INT 4
12944: PPUSH
12945: LD_STRING 
12947: PPUSH
12948: CALL 14149 0 4
12952: ST_TO_ADDR
// vc_control = control_manual ;
12953: LD_ADDR_OWVAR 38
12957: PUSH
12958: LD_INT 1
12960: ST_TO_ADDR
// vc_weapon = ar_gatling_gun ;
12961: LD_ADDR_OWVAR 40
12965: PUSH
12966: LD_INT 25
12968: ST_TO_ADDR
// av = CreateVehicle ;
12969: LD_ADDR_LOC 11
12973: PUSH
12974: CALL_OW 45
12978: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
12979: LD_LOC 10
12983: PPUSH
12984: LD_LOC 11
12988: PPUSH
12989: CALL_OW 52
// pom = pom ^ av ;
12993: LD_ADDR_VAR 0 2
12997: PUSH
12998: LD_VAR 0 2
13002: PUSH
13003: LD_LOC 11
13007: ADD
13008: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 4 ,  ) ;
13009: LD_ADDR_VAR 0 2
13013: PUSH
13014: LD_VAR 0 2
13018: PUSH
13019: CALL 10585 0 0
13023: PPUSH
13024: LD_INT 1
13026: PPUSH
13027: LD_INT 4
13029: PPUSH
13030: LD_STRING 
13032: PPUSH
13033: CALL 14149 0 4
13037: ADD
13038: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , Ar_levely [ difficulty ] ,  ) ;
13039: LD_ADDR_VAR 0 2
13043: PUSH
13044: LD_VAR 0 2
13048: PUSH
13049: CALL 10585 0 0
13053: PPUSH
13054: LD_INT 2
13056: PPUSH
13057: LD_EXP 49
13061: PUSH
13062: LD_OWVAR 67
13066: ARRAY
13067: PPUSH
13068: LD_STRING 
13070: PPUSH
13071: CALL 14149 0 4
13075: ADD
13076: ST_TO_ADDR
// if difficulty > 1 then
13077: LD_OWVAR 67
13081: PUSH
13082: LD_INT 1
13084: GREATER
13085: IFFALSE 13163
// begin pom = pom ^ get_human ( get_sex , class_engineer , Ar_levely [ difficulty ] ,  ) ;
13087: LD_ADDR_VAR 0 2
13091: PUSH
13092: LD_VAR 0 2
13096: PUSH
13097: CALL 10585 0 0
13101: PPUSH
13102: LD_INT 2
13104: PPUSH
13105: LD_EXP 49
13109: PUSH
13110: LD_OWVAR 67
13114: ARRAY
13115: PPUSH
13116: LD_STRING 
13118: PPUSH
13119: CALL 14149 0 4
13123: ADD
13124: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , Ar_levely [ difficulty ] ,  ) ;
13125: LD_ADDR_VAR 0 2
13129: PUSH
13130: LD_VAR 0 2
13134: PUSH
13135: CALL 10585 0 0
13139: PPUSH
13140: LD_INT 1
13142: PPUSH
13143: LD_EXP 49
13147: PUSH
13148: LD_OWVAR 67
13152: ARRAY
13153: PPUSH
13154: LD_STRING 
13156: PPUSH
13157: CALL 14149 0 4
13161: ADD
13162: ST_TO_ADDR
// end ; Ar_utok2_LIST = pom ;
13163: LD_ADDR_EXP 14
13167: PUSH
13168: LD_VAR 0 2
13172: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 4 ,  ) ;
13173: LD_ADDR_VAR 0 2
13177: PUSH
13178: CALL 10585 0 0
13182: PPUSH
13183: LD_INT 1
13185: PPUSH
13186: LD_INT 4
13188: PPUSH
13189: LD_STRING 
13191: PPUSH
13192: CALL 14149 0 4
13196: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_soldier , 4 ,  ) ;
13197: LD_ADDR_VAR 0 2
13201: PUSH
13202: LD_VAR 0 2
13206: PUSH
13207: CALL 10585 0 0
13211: PPUSH
13212: LD_INT 1
13214: PPUSH
13215: LD_INT 4
13217: PPUSH
13218: LD_STRING 
13220: PPUSH
13221: CALL 14149 0 4
13225: ADD
13226: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , Ar_levely [ difficulty ] ,  ) ;
13227: LD_ADDR_VAR 0 2
13231: PUSH
13232: LD_VAR 0 2
13236: PUSH
13237: CALL 10585 0 0
13241: PPUSH
13242: LD_INT 8
13244: PPUSH
13245: LD_EXP 49
13249: PUSH
13250: LD_OWVAR 67
13254: ARRAY
13255: PPUSH
13256: LD_STRING 
13258: PPUSH
13259: CALL 14149 0 4
13263: ADD
13264: ST_TO_ADDR
// if difficulty > 1 then
13265: LD_OWVAR 67
13269: PUSH
13270: LD_INT 1
13272: GREATER
13273: IFFALSE 13401
// begin pom = pom ^ get_human ( get_sex , class_soldier , 4 ,  ) ;
13275: LD_ADDR_VAR 0 2
13279: PUSH
13280: LD_VAR 0 2
13284: PUSH
13285: CALL 10585 0 0
13289: PPUSH
13290: LD_INT 1
13292: PPUSH
13293: LD_INT 4
13295: PPUSH
13296: LD_STRING 
13298: PPUSH
13299: CALL 14149 0 4
13303: ADD
13304: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_engineer , Ar_levely [ difficulty ] ,  ) ;
13305: LD_ADDR_VAR 0 2
13309: PUSH
13310: LD_VAR 0 2
13314: PUSH
13315: CALL 10585 0 0
13319: PPUSH
13320: LD_INT 2
13322: PPUSH
13323: LD_EXP 49
13327: PUSH
13328: LD_OWVAR 67
13332: ARRAY
13333: PPUSH
13334: LD_STRING 
13336: PPUSH
13337: CALL 14149 0 4
13341: ADD
13342: ST_TO_ADDR
// vc_control = control_apeman ;
13343: LD_ADDR_OWVAR 38
13347: PUSH
13348: LD_INT 5
13350: ST_TO_ADDR
// vc_chassis = ar_hovercraft ;
13351: LD_ADDR_OWVAR 37
13355: PUSH
13356: LD_INT 11
13358: ST_TO_ADDR
// vc_engine = engine_combustion ;
13359: LD_ADDR_OWVAR 39
13363: PUSH
13364: LD_INT 1
13366: ST_TO_ADDR
// vc_weapon = ar_light_gun ;
13367: LD_ADDR_OWVAR 40
13371: PUSH
13372: LD_INT 23
13374: ST_TO_ADDR
// av = CreateVehicle ;
13375: LD_ADDR_LOC 11
13379: PUSH
13380: CALL_OW 45
13384: ST_TO_ADDR
// pom = pom ^ av ;
13385: LD_ADDR_VAR 0 2
13389: PUSH
13390: LD_VAR 0 2
13394: PUSH
13395: LD_LOC 11
13399: ADD
13400: ST_TO_ADDR
// end ; Ar_utok3_LIST = pom ;
13401: LD_ADDR_EXP 15
13405: PUSH
13406: LD_VAR 0 2
13410: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , 6 ,  ) ;
13411: LD_ADDR_VAR 0 2
13415: PUSH
13416: CALL 10585 0 0
13420: PPUSH
13421: LD_INT 1
13423: PPUSH
13424: LD_INT 6
13426: PPUSH
13427: LD_STRING 
13429: PPUSH
13430: CALL 14149 0 4
13434: ST_TO_ADDR
// vc_chassis = ar_half_tracked ;
13435: LD_ADDR_OWVAR 37
13439: PUSH
13440: LD_INT 14
13442: ST_TO_ADDR
// vc_weapon = ar_gun ;
13443: LD_ADDR_OWVAR 40
13447: PUSH
13448: LD_INT 27
13450: ST_TO_ADDR
// vc_control = control_apeman ;
13451: LD_ADDR_OWVAR 38
13455: PUSH
13456: LD_INT 5
13458: ST_TO_ADDR
// vc_engine = engine_siberite ;
13459: LD_ADDR_OWVAR 39
13463: PUSH
13464: LD_INT 3
13466: ST_TO_ADDR
// av = CreateVehicle ;
13467: LD_ADDR_LOC 11
13471: PUSH
13472: CALL_OW 45
13476: ST_TO_ADDR
// pom = pom ^ av ;
13477: LD_ADDR_VAR 0 2
13481: PUSH
13482: LD_VAR 0 2
13486: PUSH
13487: LD_LOC 11
13491: ADD
13492: ST_TO_ADDR
// av = CreateVehicle ;
13493: LD_ADDR_LOC 11
13497: PUSH
13498: CALL_OW 45
13502: ST_TO_ADDR
// pom = pom ^ av ;
13503: LD_ADDR_VAR 0 2
13507: PUSH
13508: LD_VAR 0 2
13512: PUSH
13513: LD_LOC 11
13517: ADD
13518: ST_TO_ADDR
// av = CreateVehicle ;
13519: LD_ADDR_LOC 11
13523: PUSH
13524: CALL_OW 45
13528: ST_TO_ADDR
// pom = pom ^ av ;
13529: LD_ADDR_VAR 0 2
13533: PUSH
13534: LD_VAR 0 2
13538: PUSH
13539: LD_LOC 11
13543: ADD
13544: ST_TO_ADDR
// Ar_utok4_LIST = pom ;
13545: LD_ADDR_EXP 16
13549: PUSH
13550: LD_VAR 0 2
13554: ST_TO_ADDR
// pom = get_human ( get_sex , class_soldier , Ar_levely [ difficulty ] ,  ) ;
13555: LD_ADDR_VAR 0 2
13559: PUSH
13560: CALL 10585 0 0
13564: PPUSH
13565: LD_INT 1
13567: PPUSH
13568: LD_EXP 49
13572: PUSH
13573: LD_OWVAR 67
13577: ARRAY
13578: PPUSH
13579: LD_STRING 
13581: PPUSH
13582: CALL 14149 0 4
13586: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , Ar_levely [ difficulty ] ,  ) ;
13587: LD_ADDR_LOC 10
13591: PUSH
13592: CALL 10585 0 0
13596: PPUSH
13597: LD_INT 3
13599: PPUSH
13600: LD_EXP 49
13604: PUSH
13605: LD_OWVAR 67
13609: ARRAY
13610: PPUSH
13611: LD_STRING 
13613: PPUSH
13614: CALL 14149 0 4
13618: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
13619: LD_ADDR_OWVAR 40
13623: PUSH
13624: LD_INT 28
13626: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
13627: LD_ADDR_OWVAR 37
13631: PUSH
13632: LD_INT 13
13634: ST_TO_ADDR
// vc_control = control_manual ;
13635: LD_ADDR_OWVAR 38
13639: PUSH
13640: LD_INT 1
13642: ST_TO_ADDR
// vc_engine = engine_siberite ;
13643: LD_ADDR_OWVAR 39
13647: PUSH
13648: LD_INT 3
13650: ST_TO_ADDR
// av = CreateVehicle ;
13651: LD_ADDR_LOC 11
13655: PUSH
13656: CALL_OW 45
13660: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
13661: LD_LOC 10
13665: PPUSH
13666: LD_LOC 11
13670: PPUSH
13671: CALL_OW 52
// pom = pom ^ av ;
13675: LD_ADDR_VAR 0 2
13679: PUSH
13680: LD_VAR 0 2
13684: PUSH
13685: LD_LOC 11
13689: ADD
13690: ST_TO_ADDR
// if difficulty > 1 then
13691: LD_OWVAR 67
13695: PUSH
13696: LD_INT 1
13698: GREATER
13699: IFFALSE 13736
// begin vc_weapon = ar_selfpropelled_bomb ;
13701: LD_ADDR_OWVAR 40
13705: PUSH
13706: LD_INT 29
13708: ST_TO_ADDR
// av = CreateVehicle ;
13709: LD_ADDR_LOC 11
13713: PUSH
13714: CALL_OW 45
13718: ST_TO_ADDR
// pom = - pom ^ av ;
13719: LD_ADDR_VAR 0 2
13723: PUSH
13724: LD_VAR 0 2
13728: NEG
13729: PUSH
13730: LD_LOC 11
13734: ADD
13735: ST_TO_ADDR
// end ; pom = pom ^ get_human ( get_sex , class_soldier , Ar_levely [ difficulty ] ,  ) ;
13736: LD_ADDR_VAR 0 2
13740: PUSH
13741: LD_VAR 0 2
13745: PUSH
13746: CALL 10585 0 0
13750: PPUSH
13751: LD_INT 1
13753: PPUSH
13754: LD_EXP 49
13758: PUSH
13759: LD_OWVAR 67
13763: ARRAY
13764: PPUSH
13765: LD_STRING 
13767: PPUSH
13768: CALL 14149 0 4
13772: ADD
13773: ST_TO_ADDR
// if difficulty > 2 then
13774: LD_OWVAR 67
13778: PUSH
13779: LD_INT 2
13781: GREATER
13782: IFFALSE 13898
// begin pom = pom ^ get_human ( get_sex , class_scientistic , Ar_levely [ difficulty ] ,  ) ;
13784: LD_ADDR_VAR 0 2
13788: PUSH
13789: LD_VAR 0 2
13793: PUSH
13794: CALL 10585 0 0
13798: PPUSH
13799: LD_INT 4
13801: PPUSH
13802: LD_EXP 49
13806: PUSH
13807: LD_OWVAR 67
13811: ARRAY
13812: PPUSH
13813: LD_STRING 
13815: PPUSH
13816: CALL 14149 0 4
13820: ADD
13821: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , Ar_levely [ difficulty ] ,  ) ;
13822: LD_ADDR_VAR 0 2
13826: PUSH
13827: LD_VAR 0 2
13831: PUSH
13832: CALL 10585 0 0
13836: PPUSH
13837: LD_INT 8
13839: PPUSH
13840: LD_EXP 49
13844: PUSH
13845: LD_OWVAR 67
13849: ARRAY
13850: PPUSH
13851: LD_STRING 
13853: PPUSH
13854: CALL 14149 0 4
13858: ADD
13859: ST_TO_ADDR
// pom = pom ^ get_human ( get_sex , class_mortar , Ar_levely [ difficulty ] ,  ) ;
13860: LD_ADDR_VAR 0 2
13864: PUSH
13865: LD_VAR 0 2
13869: PUSH
13870: CALL 10585 0 0
13874: PPUSH
13875: LD_INT 8
13877: PPUSH
13878: LD_EXP 49
13882: PUSH
13883: LD_OWVAR 67
13887: ARRAY
13888: PPUSH
13889: LD_STRING 
13891: PPUSH
13892: CALL 14149 0 4
13896: ADD
13897: ST_TO_ADDR
// end ; Ar_utoklast_LIST = pom ;
13898: LD_ADDR_EXP 17
13902: PUSH
13903: LD_VAR 0 2
13907: ST_TO_ADDR
// pom = get_human ( get_sex , class_mortar , 4 ,  ) ;
13908: LD_ADDR_VAR 0 2
13912: PUSH
13913: CALL 10585 0 0
13917: PPUSH
13918: LD_INT 8
13920: PPUSH
13921: LD_INT 4
13923: PPUSH
13924: LD_STRING 
13926: PPUSH
13927: CALL 14149 0 4
13931: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
13932: LD_ADDR_OWVAR 40
13936: PUSH
13937: LD_INT 28
13939: ST_TO_ADDR
// vc_engine = engine_combustion ;
13940: LD_ADDR_OWVAR 39
13944: PUSH
13945: LD_INT 1
13947: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
13948: LD_ADDR_OWVAR 37
13952: PUSH
13953: LD_INT 13
13955: ST_TO_ADDR
// if difficulty = 1 then
13956: LD_OWVAR 67
13960: PUSH
13961: LD_INT 1
13963: EQUAL
13964: IFFALSE 13986
// begin vc_control = control_apeman ;
13966: LD_ADDR_OWVAR 38
13970: PUSH
13971: LD_INT 5
13973: ST_TO_ADDR
// av = CreateVehicle ;
13974: LD_ADDR_LOC 11
13978: PUSH
13979: CALL_OW 45
13983: ST_TO_ADDR
// end else
13984: GO 14050
// begin vc_control = control_manual ;
13986: LD_ADDR_OWVAR 38
13990: PUSH
13991: LD_INT 1
13993: ST_TO_ADDR
// av = CreateVehicle ;
13994: LD_ADDR_LOC 11
13998: PUSH
13999: CALL_OW 45
14003: ST_TO_ADDR
// ah = get_human ( get_sex , class_mechanic , Ar_levely [ difficulty ] ,  ) ;
14004: LD_ADDR_LOC 10
14008: PUSH
14009: CALL 10585 0 0
14013: PPUSH
14014: LD_INT 3
14016: PPUSH
14017: LD_EXP 49
14021: PUSH
14022: LD_OWVAR 67
14026: ARRAY
14027: PPUSH
14028: LD_STRING 
14030: PPUSH
14031: CALL 14149 0 4
14035: ST_TO_ADDR
// PlaceHumanInUnit ( ah , av ) ;
14036: LD_LOC 10
14040: PPUSH
14041: LD_LOC 11
14045: PPUSH
14046: CALL_OW 52
// end ; pom = pom ^ av ;
14050: LD_ADDR_VAR 0 2
14054: PUSH
14055: LD_VAR 0 2
14059: PUSH
14060: LD_LOC 11
14064: ADD
14065: ST_TO_ADDR
// vc_control = control_apeman ;
14066: LD_ADDR_OWVAR 38
14070: PUSH
14071: LD_INT 5
14073: ST_TO_ADDR
// av = CreateVehicle ;
14074: LD_ADDR_LOC 11
14078: PUSH
14079: CALL_OW 45
14083: ST_TO_ADDR
// pom = pom ^ av ;
14084: LD_ADDR_VAR 0 2
14088: PUSH
14089: LD_VAR 0 2
14093: PUSH
14094: LD_LOC 11
14098: ADD
14099: ST_TO_ADDR
// vc_weapon = ar_radar ;
14100: LD_ADDR_OWVAR 40
14104: PUSH
14105: LD_INT 30
14107: ST_TO_ADDR
// av = CreateVehicle ;
14108: LD_ADDR_LOC 11
14112: PUSH
14113: CALL_OW 45
14117: ST_TO_ADDR
// pom = pom ^ av ;
14118: LD_ADDR_VAR 0 2
14122: PUSH
14123: LD_VAR 0 2
14127: PUSH
14128: LD_LOC 11
14132: ADD
14133: ST_TO_ADDR
// Ar_backa_LIST = pom ;
14134: LD_ADDR_EXP 18
14138: PUSH
14139: LD_VAR 0 2
14143: ST_TO_ADDR
// end ;
14144: LD_VAR 0 1
14148: RET
// function get_human ( sex , clas , level , name ) ; var pom ; begin
14149: LD_INT 0
14151: PPUSH
14152: PPUSH
// PrepareHuman ( sex , clas , level ) ;
14153: LD_VAR 0 1
14157: PPUSH
14158: LD_VAR 0 2
14162: PPUSH
14163: LD_VAR 0 3
14167: PPUSH
14168: CALL_OW 380
// hc_name := name ;
14172: LD_ADDR_OWVAR 26
14176: PUSH
14177: LD_VAR 0 4
14181: ST_TO_ADDR
// pom = CreateHuman ;
14182: LD_ADDR_VAR 0 6
14186: PUSH
14187: CALL_OW 44
14191: ST_TO_ADDR
// result := pom ;
14192: LD_ADDR_VAR 0 5
14196: PUSH
14197: LD_VAR 0 6
14201: ST_TO_ADDR
// end ; end_of_file
14202: LD_VAR 0 5
14206: RET
// var plazici ; var navrat ; var zradci ; var pom , i ; var pocet_spadlych_beden ; every 0 0$0.1 do
14207: GO 14209
14209: DISABLE
// begin pocet_spadlych_beden = 0 ;
14210: LD_ADDR_LOC 22
14214: PUSH
14215: LD_INT 0
14217: ST_TO_ADDR
// end ;
14218: END
// every 0 0$0.1 do var sold ;
14219: GO 14221
14221: DISABLE
14222: LD_INT 0
14224: PPUSH
// begin navrat := false ;
14225: LD_ADDR_LOC 18
14229: PUSH
14230: LD_INT 0
14232: ST_TO_ADDR
// sold = UnitFilter ( Amici_enter , [ [ f_class , class_soldier ] ] ) ;
14233: LD_ADDR_VAR 0 1
14237: PUSH
14238: LD_EXP 43
14242: PPUSH
14243: LD_INT 25
14245: PUSH
14246: LD_INT 1
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: PUSH
14253: EMPTY
14254: LIST
14255: PPUSH
14256: CALL_OW 72
14260: ST_TO_ADDR
// if sold < 4 then
14261: LD_VAR 0 1
14265: PUSH
14266: LD_INT 4
14268: LESS
14269: IFFALSE 14280
// msg ( ERROR: malo vojaku . je to v prdeli ) else
14271: LD_STRING ERROR: malo vojaku . je to v prdeli
14273: PPUSH
14274: CALL_OW 100
14278: GO 14327
// plazici := [ sold [ 1 ] , sold [ 2 ] , sold [ 3 ] , sold [ 4 ] ] ;
14280: LD_ADDR_LOC 17
14284: PUSH
14285: LD_VAR 0 1
14289: PUSH
14290: LD_INT 1
14292: ARRAY
14293: PUSH
14294: LD_VAR 0 1
14298: PUSH
14299: LD_INT 2
14301: ARRAY
14302: PUSH
14303: LD_VAR 0 1
14307: PUSH
14308: LD_INT 3
14310: ARRAY
14311: PUSH
14312: LD_VAR 0 1
14316: PUSH
14317: LD_INT 4
14319: ARRAY
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: ST_TO_ADDR
// ComMoveXY ( Radar_enter , 87 , 137 ) ;
14327: LD_EXP 44
14331: PPUSH
14332: LD_INT 87
14334: PPUSH
14335: LD_INT 137
14337: PPUSH
14338: CALL_OW 111
// AddComMoveXY ( Radar_enter , 89 , 134 ) ;
14342: LD_EXP 44
14346: PPUSH
14347: LD_INT 89
14349: PPUSH
14350: LD_INT 134
14352: PPUSH
14353: CALL_OW 171
// AddComMoveXY ( Radar_enter , 91 , 131 ) ;
14357: LD_EXP 44
14361: PPUSH
14362: LD_INT 91
14364: PPUSH
14365: LD_INT 131
14367: PPUSH
14368: CALL_OW 171
// AddComHold ( Radar_enter ) ;
14372: LD_EXP 44
14376: PPUSH
14377: CALL_OW 200
// AddComMoveXY ( plazici [ 1 ] , 84 , 127 ) ;
14381: LD_LOC 17
14385: PUSH
14386: LD_INT 1
14388: ARRAY
14389: PPUSH
14390: LD_INT 84
14392: PPUSH
14393: LD_INT 127
14395: PPUSH
14396: CALL_OW 171
// AddComCrawl ( plazici [ 1 ] ) ;
14400: LD_LOC 17
14404: PUSH
14405: LD_INT 1
14407: ARRAY
14408: PPUSH
14409: CALL_OW 197
// AddComMoveXY ( plazici [ 1 ] , 91 , 126 ) ;
14413: LD_LOC 17
14417: PUSH
14418: LD_INT 1
14420: ARRAY
14421: PPUSH
14422: LD_INT 91
14424: PPUSH
14425: LD_INT 126
14427: PPUSH
14428: CALL_OW 171
// AddComMoveXY ( plazici [ 2 ] , 85 , 127 ) ;
14432: LD_LOC 17
14436: PUSH
14437: LD_INT 2
14439: ARRAY
14440: PPUSH
14441: LD_INT 85
14443: PPUSH
14444: LD_INT 127
14446: PPUSH
14447: CALL_OW 171
// AddComCrawl ( plazici [ 2 ] ) ;
14451: LD_LOC 17
14455: PUSH
14456: LD_INT 2
14458: ARRAY
14459: PPUSH
14460: CALL_OW 197
// AddComMoveXY ( plazici [ 2 ] , 93 , 128 ) ;
14464: LD_LOC 17
14468: PUSH
14469: LD_INT 2
14471: ARRAY
14472: PPUSH
14473: LD_INT 93
14475: PPUSH
14476: LD_INT 128
14478: PPUSH
14479: CALL_OW 171
// AddComMoveXY ( plazici [ 3 ] , 83 , 126 ) ;
14483: LD_LOC 17
14487: PUSH
14488: LD_INT 3
14490: ARRAY
14491: PPUSH
14492: LD_INT 83
14494: PPUSH
14495: LD_INT 126
14497: PPUSH
14498: CALL_OW 171
// AddComCrawl ( plazici [ 3 ] ) ;
14502: LD_LOC 17
14506: PUSH
14507: LD_INT 3
14509: ARRAY
14510: PPUSH
14511: CALL_OW 197
// AddComMoveXY ( plazici [ 3 ] , 92 , 128 ) ;
14515: LD_LOC 17
14519: PUSH
14520: LD_INT 3
14522: ARRAY
14523: PPUSH
14524: LD_INT 92
14526: PPUSH
14527: LD_INT 128
14529: PPUSH
14530: CALL_OW 171
// AddComMoveXY ( plazici [ 4 ] , 82 , 125 ) ;
14534: LD_LOC 17
14538: PUSH
14539: LD_INT 4
14541: ARRAY
14542: PPUSH
14543: LD_INT 82
14545: PPUSH
14546: LD_INT 125
14548: PPUSH
14549: CALL_OW 171
// AddComCrawl ( plazici [ 4 ] ) ;
14553: LD_LOC 17
14557: PUSH
14558: LD_INT 4
14560: ARRAY
14561: PPUSH
14562: CALL_OW 197
// AddComMoveXY ( plazici [ 4 ] , 90 , 127 ) ;
14566: LD_LOC 17
14570: PUSH
14571: LD_INT 4
14573: ARRAY
14574: PPUSH
14575: LD_INT 90
14577: PPUSH
14578: LD_INT 127
14580: PPUSH
14581: CALL_OW 171
// AddComHold ( plazici ) ;
14585: LD_LOC 17
14589: PPUSH
14590: CALL_OW 200
// CenterNowOnXY ( 92 , 135 ) ;
14594: LD_INT 92
14596: PPUSH
14597: LD_INT 135
14599: PPUSH
14600: CALL_OW 86
// end ;
14604: PPOPN 1
14606: END
// every 0 0$0.5 trigger IsAt ( Radar_enter , 91 , 131 ) do
14607: LD_EXP 44
14611: PPUSH
14612: LD_INT 91
14614: PPUSH
14615: LD_INT 131
14617: PPUSH
14618: CALL_OW 307
14622: IFFALSE 14663
14624: GO 14626
14626: DISABLE
// begin ComMoveXY ( mrtvola , 105 , 139 ) ;
14627: LD_INT 64
14629: PPUSH
14630: LD_INT 105
14632: PPUSH
14633: LD_INT 139
14635: PPUSH
14636: CALL_OW 111
// AddComTurnXY ( mrtvola , 103 , 137 ) ;
14640: LD_INT 64
14642: PPUSH
14643: LD_INT 103
14645: PPUSH
14646: LD_INT 137
14648: PPUSH
14649: CALL_OW 178
// CenterOnXY ( 97 , 132 ) ;
14653: LD_INT 97
14655: PPUSH
14656: LD_INT 132
14658: PPUSH
14659: CALL_OW 84
// end ;
14663: END
// every 0 0$1 trigger IsAt ( mrtvola , 105 , 139 ) do
14664: LD_INT 64
14666: PPUSH
14667: LD_INT 105
14669: PPUSH
14670: LD_INT 139
14672: PPUSH
14673: CALL_OW 307
14677: IFFALSE 14702
14679: GO 14681
14681: DISABLE
// begin ComExitBuilding ( zradce1 ) ;
14682: LD_INT 65
14684: PPUSH
14685: CALL_OW 122
// ComMoveXY ( zradce1 , 107 , 138 ) ;
14689: LD_INT 65
14691: PPUSH
14692: LD_INT 107
14694: PPUSH
14695: LD_INT 138
14697: PPUSH
14698: CALL_OW 111
// end ;
14702: END
// every 0 0$1 trigger IsAt ( zradce1 , 107 , 138 ) do
14703: LD_INT 65
14705: PPUSH
14706: LD_INT 107
14708: PPUSH
14709: LD_INT 138
14711: PPUSH
14712: CALL_OW 307
14716: IFFALSE 15274
14718: GO 14720
14720: DISABLE
// begin ComTurnUnit ( mrtvola , zradce1 ) ;
14721: LD_INT 64
14723: PPUSH
14724: LD_INT 65
14726: PPUSH
14727: CALL_OW 119
// ComTurnUnit ( zradce1 , mrtvola ) ;
14731: LD_INT 65
14733: PPUSH
14734: LD_INT 64
14736: PPUSH
14737: CALL_OW 119
// SayNoFace ( mrtvola , D1a-Merc1-1 ) ;
14741: LD_INT 64
14743: PPUSH
14744: LD_STRING D1a-Merc1-1
14746: PPUSH
14747: CALL_OW 89
// SayNoFace ( zradce1 , D1a-FMerc2-1 ) ;
14751: LD_INT 65
14753: PPUSH
14754: LD_STRING D1a-FMerc2-1
14756: PPUSH
14757: CALL_OW 89
// wait ( 0 0$0.3 ) ;
14761: LD_INT 10
14763: PPUSH
14764: CALL_OW 67
// ComTurnXY ( mrtvola , 101 , 141 ) ;
14768: LD_INT 64
14770: PPUSH
14771: LD_INT 101
14773: PPUSH
14774: LD_INT 141
14776: PPUSH
14777: CALL_OW 118
// wait ( 10 ) ;
14781: LD_INT 10
14783: PPUSH
14784: CALL_OW 67
// ComMoveUnit ( zradce1 , mrtvola ) ;
14788: LD_INT 65
14790: PPUSH
14791: LD_INT 64
14793: PPUSH
14794: CALL_OW 112
// SetLives ( mrtvola , 300 ) ;
14798: LD_INT 64
14800: PPUSH
14801: LD_INT 300
14803: PPUSH
14804: CALL_OW 234
// wait ( 0 0$1 ) ;
14808: LD_INT 35
14810: PPUSH
14811: CALL_OW 67
// AddComTurnUnit ( zradce1 , mrtvola ) ;
14815: LD_INT 65
14817: PPUSH
14818: LD_INT 64
14820: PPUSH
14821: CALL_OW 179
// AddComHeal ( zradce1 , mrtvola ) ;
14825: LD_INT 65
14827: PPUSH
14828: LD_INT 64
14830: PPUSH
14831: CALL_OW 188
// repeat wait ( 3 ) until GetLives ( mrtvola ) > 340 ;
14835: LD_INT 3
14837: PPUSH
14838: CALL_OW 67
14842: LD_INT 64
14844: PPUSH
14845: CALL_OW 256
14849: PUSH
14850: LD_INT 340
14852: GREATER
14853: IFFALSE 14835
// SetLives ( mrtvola , 10 ) ;
14855: LD_INT 64
14857: PPUSH
14858: LD_INT 10
14860: PPUSH
14861: CALL_OW 234
// enable ( 80 ) ;
14865: LD_INT 80
14867: ENABLE_MARKED
// wait ( 0 0$0.5 ) ;
14868: LD_INT 18
14870: PPUSH
14871: CALL_OW 67
// ForceSayNoFace ( mrtvola , D1a-Merc1-2 ) ;
14875: LD_INT 64
14877: PPUSH
14878: LD_STRING D1a-Merc1-2
14880: PPUSH
14881: CALL_OW 93
// wait ( 0 0$3 ) ;
14885: LD_INT 105
14887: PPUSH
14888: CALL_OW 67
// KillUnit ( mrtvola ) ;
14892: LD_INT 64
14894: PPUSH
14895: CALL_OW 66
// ComTurnXY ( zradce1 , 87 , 137 ) ;
14899: LD_INT 65
14901: PPUSH
14902: LD_INT 87
14904: PPUSH
14905: LD_INT 137
14907: PPUSH
14908: CALL_OW 118
// wait ( 0 0$1 ) ;
14912: LD_INT 35
14914: PPUSH
14915: CALL_OW 67
// SayNoFace ( zradce1 , D1a-FMerc2-2 ) ;
14919: LD_INT 65
14921: PPUSH
14922: LD_STRING D1a-FMerc2-2
14924: PPUSH
14925: CALL_OW 89
// ComExitBuilding ( [ zradce4 , zradce5 ] ) ;
14929: LD_INT 70
14931: PUSH
14932: LD_INT 71
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: PPUSH
14939: CALL_OW 122
// ComExitBuilding ( [ zradce2 , zradce3 , zradce6 , zradce7 ] ) ;
14943: LD_INT 68
14945: PUSH
14946: LD_INT 69
14948: PUSH
14949: LD_INT 75
14951: PUSH
14952: LD_INT 77
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: PPUSH
14961: CALL_OW 122
// ComMoveXY ( [ zradce2 , zradce3 , zradce6 , zradce7 ] , 165 , 141 ) ;
14965: LD_INT 68
14967: PUSH
14968: LD_INT 69
14970: PUSH
14971: LD_INT 75
14973: PUSH
14974: LD_INT 77
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: PPUSH
14983: LD_INT 165
14985: PPUSH
14986: LD_INT 141
14988: PPUSH
14989: CALL_OW 111
// KillUnit ( mrtvola2 ) ;
14993: LD_INT 78
14995: PPUSH
14996: CALL_OW 66
// AddComMoveUnit ( zradce4 , utek2 ) ;
15000: LD_INT 70
15002: PPUSH
15003: LD_INT 67
15005: PPUSH
15006: CALL_OW 172
// AddComMoveUnit ( zradce5 , utek1 ) ;
15010: LD_INT 71
15012: PPUSH
15013: LD_INT 66
15015: PPUSH
15016: CALL_OW 172
// SetFuel ( utek1 , 0 ) ;
15020: LD_INT 66
15022: PPUSH
15023: LD_INT 0
15025: PPUSH
15026: CALL_OW 240
// SetFuel ( utek2 , 0 ) ;
15030: LD_INT 67
15032: PPUSH
15033: LD_INT 0
15035: PPUSH
15036: CALL_OW 240
// wait ( 0 0$1 ) ;
15040: LD_INT 35
15042: PPUSH
15043: CALL_OW 67
// AddComMoveXY ( utek1 , 162 , 142 ) ;
15047: LD_INT 66
15049: PPUSH
15050: LD_INT 162
15052: PPUSH
15053: LD_INT 142
15055: PPUSH
15056: CALL_OW 171
// AddComMoveXY ( utek2 , 162 , 139 ) ;
15060: LD_INT 67
15062: PPUSH
15063: LD_INT 162
15065: PPUSH
15066: LD_INT 139
15068: PPUSH
15069: CALL_OW 171
// ComMoveXY ( zradce1 , 162 , 140 ) ;
15073: LD_INT 65
15075: PPUSH
15076: LD_INT 162
15078: PPUSH
15079: LD_INT 140
15081: PPUSH
15082: CALL_OW 111
// AddComMoveXY ( [ zradce1 , zradce2 , zradce3 , zradce6 , zradce7 ] , 175 , 128 ) ;
15086: LD_INT 65
15088: PUSH
15089: LD_INT 68
15091: PUSH
15092: LD_INT 69
15094: PUSH
15095: LD_INT 75
15097: PUSH
15098: LD_INT 77
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: PPUSH
15108: LD_INT 175
15110: PPUSH
15111: LD_INT 128
15113: PPUSH
15114: CALL_OW 171
// AddComMoveXY ( [ zradce1 , zradce2 , zradce3 , zradce6 , zradce7 ] , 126 , 94 ) ;
15118: LD_INT 65
15120: PUSH
15121: LD_INT 68
15123: PUSH
15124: LD_INT 69
15126: PUSH
15127: LD_INT 75
15129: PUSH
15130: LD_INT 77
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: PPUSH
15140: LD_INT 126
15142: PPUSH
15143: LD_INT 94
15145: PPUSH
15146: CALL_OW 171
// AddComMoveXY ( [ zradce1 , zradce2 , zradce3 , zradce6 , zradce7 ] , 165 , 92 ) ;
15150: LD_INT 65
15152: PUSH
15153: LD_INT 68
15155: PUSH
15156: LD_INT 69
15158: PUSH
15159: LD_INT 75
15161: PUSH
15162: LD_INT 77
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: PPUSH
15172: LD_INT 165
15174: PPUSH
15175: LD_INT 92
15177: PPUSH
15178: CALL_OW 171
// zradci = [ zradce1 , zradce2 , zradce3 , zradce4 , zradce5 , zradce6 , zradce7 , utek1 , utek2 ] ;
15182: LD_ADDR_LOC 19
15186: PUSH
15187: LD_INT 65
15189: PUSH
15190: LD_INT 68
15192: PUSH
15193: LD_INT 69
15195: PUSH
15196: LD_INT 70
15198: PUSH
15199: LD_INT 71
15201: PUSH
15202: LD_INT 75
15204: PUSH
15205: LD_INT 77
15207: PUSH
15208: LD_INT 66
15210: PUSH
15211: LD_INT 67
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: ST_TO_ADDR
// Odebirani = true ;
15225: LD_ADDR_EXP 45
15229: PUSH
15230: LD_INT 1
15232: ST_TO_ADDR
// ComFree ( plazici ) ;
15233: LD_LOC 17
15237: PPUSH
15238: CALL_OW 139
// ComFree ( Radar_enter ) ;
15242: LD_EXP 44
15246: PPUSH
15247: CALL_OW 139
// ComMoveXY ( plazici , 86 , 133 ) ;
15251: LD_LOC 17
15255: PPUSH
15256: LD_INT 86
15258: PPUSH
15259: LD_INT 133
15261: PPUSH
15262: CALL_OW 111
// navrat := true ;
15266: LD_ADDR_LOC 18
15270: PUSH
15271: LD_INT 1
15273: ST_TO_ADDR
// end ;
15274: END
// every 3 trigger IsLive ( mrtvola ) marked 80 do
15275: LD_INT 64
15277: PPUSH
15278: CALL_OW 300
15282: IFFALSE 15324
15284: GO 15286
15286: DISABLE
// begin enable ;
15287: ENABLE
// if GetLives ( mrtvola ) > 10 and GetLives ( mrtvola ) < 250 then
15288: LD_INT 64
15290: PPUSH
15291: CALL_OW 256
15295: PUSH
15296: LD_INT 10
15298: GREATER
15299: PUSH
15300: LD_INT 64
15302: PPUSH
15303: CALL_OW 256
15307: PUSH
15308: LD_INT 250
15310: LESS
15311: AND
15312: IFFALSE 15324
// SetLives ( mrtvola , 10 ) ;
15314: LD_INT 64
15316: PPUSH
15317: LD_INT 10
15319: PPUSH
15320: CALL_OW 234
// end ;
15324: END
// every 0 0$5 do
15325: GO 15327
15327: DISABLE
// begin if ( IsInArea ( utek1 , Benal ) or not IsOk ( zradce5 ) ) and ( IsInArea ( utek2 , Benal ) or not IsOk ( zradce4 ) ) then
15328: LD_INT 66
15330: PPUSH
15331: LD_INT 4
15333: PPUSH
15334: CALL_OW 308
15338: PUSH
15339: LD_INT 71
15341: PPUSH
15342: CALL_OW 302
15346: NOT
15347: OR
15348: PUSH
15349: LD_INT 67
15351: PPUSH
15352: LD_INT 4
15354: PPUSH
15355: CALL_OW 308
15359: PUSH
15360: LD_INT 70
15362: PPUSH
15363: CALL_OW 302
15367: NOT
15368: OR
15369: AND
15370: IFFALSE 15512
// begin if IsOk ( zradce5 ) then
15372: LD_INT 71
15374: PPUSH
15375: CALL_OW 302
15379: IFFALSE 15391
// SetFuel ( utek1 , 100 ) ;
15381: LD_INT 66
15383: PPUSH
15384: LD_INT 100
15386: PPUSH
15387: CALL_OW 240
// if IsOk ( zradce4 ) then
15391: LD_INT 70
15393: PPUSH
15394: CALL_OW 302
15398: IFFALSE 15410
// SetFuel ( utek2 , 100 ) ;
15400: LD_INT 67
15402: PPUSH
15403: LD_INT 100
15405: PPUSH
15406: CALL_OW 240
// ComEnterUnit ( zradce5 , utek1 ) ;
15410: LD_INT 71
15412: PPUSH
15413: LD_INT 66
15415: PPUSH
15416: CALL_OW 120
// ComEnterUnit ( zradce4 , utek2 ) ;
15420: LD_INT 70
15422: PPUSH
15423: LD_INT 67
15425: PPUSH
15426: CALL_OW 120
// AddComMoveXY ( [ zradce4 , zradce5 ] , 179 , 136 ) ;
15430: LD_INT 70
15432: PUSH
15433: LD_INT 71
15435: PUSH
15436: EMPTY
15437: LIST
15438: LIST
15439: PPUSH
15440: LD_INT 179
15442: PPUSH
15443: LD_INT 136
15445: PPUSH
15446: CALL_OW 171
// AddComMoveXY ( [ zradce4 , zradce5 ] , 153 , 108 ) ;
15450: LD_INT 70
15452: PUSH
15453: LD_INT 71
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: PPUSH
15460: LD_INT 153
15462: PPUSH
15463: LD_INT 108
15465: PPUSH
15466: CALL_OW 171
// AddComMoveXY ( [ zradce4 , zradce5 ] , 126 , 91 ) ;
15470: LD_INT 70
15472: PUSH
15473: LD_INT 71
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: PPUSH
15480: LD_INT 126
15482: PPUSH
15483: LD_INT 91
15485: PPUSH
15486: CALL_OW 171
// AddComMoveXY ( [ zradce4 , zradce5 ] , 165 , 92 ) ;
15490: LD_INT 70
15492: PUSH
15493: LD_INT 71
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PPUSH
15500: LD_INT 165
15502: PPUSH
15503: LD_INT 92
15505: PPUSH
15506: CALL_OW 171
// end else
15510: GO 15533
// begin ComMoveXY ( [ utek1 , utek2 ] , 162 , 142 ) ;
15512: LD_INT 66
15514: PUSH
15515: LD_INT 67
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PPUSH
15522: LD_INT 162
15524: PPUSH
15525: LD_INT 142
15527: PPUSH
15528: CALL_OW 111
// enable ;
15532: ENABLE
// end ; end ;
15533: END
// every 0 0$1 trigger Odebirani do
15534: LD_EXP 45
15538: IFFALSE 15652
15540: GO 15542
15542: DISABLE
// begin pom = UnitFilter ( zradci , [ f_inarea , ExitAR ] ) ;
15543: LD_ADDR_LOC 20
15547: PUSH
15548: LD_LOC 19
15552: PPUSH
15553: LD_INT 95
15555: PUSH
15556: LD_INT 5
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: PPUSH
15563: CALL_OW 72
15567: ST_TO_ADDR
// for i in pom do
15568: LD_ADDR_LOC 21
15572: PUSH
15573: LD_LOC 20
15577: PUSH
15578: FOR_IN
15579: IFFALSE 15592
// RemoveUnit ( i ) ;
15581: LD_LOC 21
15585: PPUSH
15586: CALL_OW 64
15590: GO 15578
15592: POP
15593: POP
// zradci = UnitFilter ( zradci , [ [ f_alive ] , [ f_side , Arabi ] ] ) ;
15594: LD_ADDR_LOC 19
15598: PUSH
15599: LD_LOC 19
15603: PPUSH
15604: LD_INT 51
15606: PUSH
15607: EMPTY
15608: LIST
15609: PUSH
15610: LD_INT 22
15612: PUSH
15613: LD_EXP 3
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PPUSH
15626: CALL_OW 72
15630: ST_TO_ADDR
// if zradci > 0 then
15631: LD_LOC 19
15635: PUSH
15636: LD_INT 0
15638: GREATER
15639: IFFALSE 15644
// enable else
15641: ENABLE
15642: GO 15652
// Odebirani = false ;
15644: LD_ADDR_EXP 45
15648: PUSH
15649: LD_INT 0
15651: ST_TO_ADDR
// end ;
15652: END
// every 0 0$1 trigger navrat do
15653: LD_LOC 18
15657: IFFALSE 15788
15659: GO 15661
15661: DISABLE
// begin if IsAt ( plazici [ 1 ] , 86 , 133 ) or IsAt ( plazici [ 2 ] , 86 , 133 ) or IsAt ( plazici [ 3 ] , 86 , 133 ) or IsAt ( plazici [ 4 ] , 86 , 133 ) then
15662: LD_LOC 17
15666: PUSH
15667: LD_INT 1
15669: ARRAY
15670: PPUSH
15671: LD_INT 86
15673: PPUSH
15674: LD_INT 133
15676: PPUSH
15677: CALL_OW 307
15681: PUSH
15682: LD_LOC 17
15686: PUSH
15687: LD_INT 2
15689: ARRAY
15690: PPUSH
15691: LD_INT 86
15693: PPUSH
15694: LD_INT 133
15696: PPUSH
15697: CALL_OW 307
15701: OR
15702: PUSH
15703: LD_LOC 17
15707: PUSH
15708: LD_INT 3
15710: ARRAY
15711: PPUSH
15712: LD_INT 86
15714: PPUSH
15715: LD_INT 133
15717: PPUSH
15718: CALL_OW 307
15722: OR
15723: PUSH
15724: LD_LOC 17
15728: PUSH
15729: LD_INT 4
15731: ARRAY
15732: PPUSH
15733: LD_INT 86
15735: PPUSH
15736: LD_INT 133
15738: PPUSH
15739: CALL_OW 307
15743: OR
15744: IFFALSE 15787
// begin ComWalk ( plazici ) ;
15746: LD_LOC 17
15750: PPUSH
15751: CALL_OW 138
// AddComMoveXY ( plazici , 83 , 148 ) ;
15755: LD_LOC 17
15759: PPUSH
15760: LD_INT 83
15762: PPUSH
15763: LD_INT 148
15765: PPUSH
15766: CALL_OW 171
// ComMoveXY ( Radar_enter , 87 , 152 ) ;
15770: LD_EXP 44
15774: PPUSH
15775: LD_INT 87
15777: PPUSH
15778: LD_INT 152
15780: PPUSH
15781: CALL_OW 111
// end else
15785: GO 15788
// enable ;
15787: ENABLE
// end ;
15788: END
// every 0 0$0.5 trigger navrat do
15789: LD_LOC 18
15793: IFFALSE 15827
15795: GO 15797
15797: DISABLE
// begin if IsInArea ( plazici [ 1 ] , AMret ) then
15798: LD_LOC 17
15802: PUSH
15803: LD_INT 1
15805: ARRAY
15806: PPUSH
15807: LD_INT 2
15809: PPUSH
15810: CALL_OW 308
15814: IFFALSE 15826
// begin chmo1 ;
15816: CALL 2345 0 0
// InGameOff ;
15820: CALL_OW 9
// end else
15824: GO 15827
// enable ;
15826: ENABLE
// end ;
15827: END
// every 0 0$10 trigger A1_dobyta do var pom ;
15828: LD_EXP 28
15832: IFFALSE 15927
15834: GO 15836
15836: DISABLE
15837: LD_INT 0
15839: PPUSH
// begin wait ( Rand ( 1 1$0 , 2 2$20 ) ) ;
15840: LD_INT 2100
15842: PPUSH
15843: LD_INT 4900
15845: PPUSH
15846: CALL_OW 12
15850: PPUSH
15851: CALL_OW 67
// pom = Rand ( 4 - difficulty , 5 ) ;
15855: LD_ADDR_VAR 0 1
15859: PUSH
15860: LD_INT 4
15862: PUSH
15863: LD_OWVAR 67
15867: MINUS
15868: PPUSH
15869: LD_INT 5
15871: PPUSH
15872: CALL_OW 12
15876: ST_TO_ADDR
// CreateCratesArea ( pom , Abase1 , true ) ;
15877: LD_VAR 0 1
15881: PPUSH
15882: LD_INT 3
15884: PPUSH
15885: LD_INT 1
15887: PPUSH
15888: CALL_OW 55
// pocet_spadlych_beden = pocet_spadlych_beden + pom ;
15892: LD_ADDR_LOC 22
15896: PUSH
15897: LD_LOC 22
15901: PUSH
15902: LD_VAR 0 1
15906: PLUS
15907: ST_TO_ADDR
// if pocet_spadlych_beden < max_bedny [ difficulty ] then
15908: LD_LOC 22
15912: PUSH
15913: LD_EXP 51
15917: PUSH
15918: LD_OWVAR 67
15922: ARRAY
15923: LESS
15924: IFFALSE 15927
// enable ;
15926: ENABLE
// end ;
15927: PPOPN 1
15929: END
// every 0 0$10 trigger A2_dobyta do
15930: LD_EXP 29
15934: IFFALSE 15959
15936: GO 15938
15938: DISABLE
// begin pocet_spadlych_beden = pocet_spadlych_beden - 10 + difficulty ;
15939: LD_ADDR_LOC 22
15943: PUSH
15944: LD_LOC 22
15948: PUSH
15949: LD_INT 10
15951: MINUS
15952: PUSH
15953: LD_OWVAR 67
15957: PLUS
15958: ST_TO_ADDR
// end ; end_of_file
15959: END
// export A1_dobyta ; export A2_dobyta ; export A3_dobyta ; export Pruzkumnik ; var vysl ; var pom , i ; var uspech ; export JMM ; export Powell ; export Gary ; export Bobby ; export Frank ; export Lisa ; export Cornel ; export Yamoko ; export Cyrus ; export Don ; export Brown ; export Amici_enter ; export Radar_enter ; every 0 0$30 trigger A1_dobyta do
15960: LD_EXP 28
15964: IFFALSE 16287
15966: GO 15968
15968: DISABLE
// begin if IsOK ( Frank ) then
15969: LD_EXP 36
15973: PPUSH
15974: CALL_OW 302
15978: IFFALSE 16286
// begin wait ( 0 0$10 ) ;
15980: LD_INT 350
15982: PPUSH
15983: CALL_OW 67
// vysl := dialog_frank ;
15987: LD_ADDR_LOC 23
15991: PUSH
15992: CALL 3035 0 0
15996: ST_TO_ADDR
// pom = Rand ( 1 , 100 ) ;
15997: LD_ADDR_LOC 24
16001: PUSH
16002: LD_INT 1
16004: PPUSH
16005: LD_INT 100
16007: PPUSH
16008: CALL_OW 12
16012: ST_TO_ADDR
// case vysl of 1 :
16013: LD_LOC 23
16017: PUSH
16018: LD_INT 1
16020: DOUBLE
16021: EQUAL
16022: IFTRUE 16026
16024: GO 16056
16026: POP
// begin i = [ 50 , 30 , 20 ] ;
16027: LD_ADDR_LOC 25
16031: PUSH
16032: LD_INT 50
16034: PUSH
16035: LD_INT 30
16037: PUSH
16038: LD_INT 20
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: LIST
16045: ST_TO_ADDR
// Pruzkumnik = true ;
16046: LD_ADDR_EXP 31
16050: PUSH
16051: LD_INT 1
16053: ST_TO_ADDR
// end ; 21 :
16054: GO 16103
16056: LD_INT 21
16058: DOUBLE
16059: EQUAL
16060: IFTRUE 16064
16062: GO 16094
16064: POP
// begin i = [ 80 , 15 , 5 ] ;
16065: LD_ADDR_LOC 25
16069: PUSH
16070: LD_INT 80
16072: PUSH
16073: LD_INT 15
16075: PUSH
16076: LD_INT 5
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: LIST
16083: ST_TO_ADDR
// Pruzkumnik = true ;
16084: LD_ADDR_EXP 31
16088: PUSH
16089: LD_INT 1
16091: ST_TO_ADDR
// end ; else
16092: GO 16103
16094: POP
// uspech = 0 ; end ;
16095: LD_ADDR_LOC 26
16099: PUSH
16100: LD_INT 0
16102: ST_TO_ADDR
// if Pruzkumnik then
16103: LD_EXP 31
16107: IFFALSE 16188
// begin jdi_na_pruzkum ( Frank ) ;
16109: LD_EXP 36
16113: PPUSH
16114: CALL 16608 0 1
// if pom <= i [ 1 ] then
16118: LD_LOC 24
16122: PUSH
16123: LD_LOC 25
16127: PUSH
16128: LD_INT 1
16130: ARRAY
16131: LESSEQUAL
16132: IFFALSE 16144
// uspech = 1 else
16134: LD_ADDR_LOC 26
16138: PUSH
16139: LD_INT 1
16141: ST_TO_ADDR
16142: GO 16188
// if pom <= i [ 1 ] + i [ 2 ] then
16144: LD_LOC 24
16148: PUSH
16149: LD_LOC 25
16153: PUSH
16154: LD_INT 1
16156: ARRAY
16157: PUSH
16158: LD_LOC 25
16162: PUSH
16163: LD_INT 2
16165: ARRAY
16166: PLUS
16167: LESSEQUAL
16168: IFFALSE 16180
// uspech = 2 else
16170: LD_ADDR_LOC 26
16174: PUSH
16175: LD_INT 2
16177: ST_TO_ADDR
16178: GO 16188
// uspech = 3 ;
16180: LD_ADDR_LOC 26
16184: PUSH
16185: LD_INT 3
16187: ST_TO_ADDR
// end ; case uspech of 1 :
16188: LD_LOC 26
16192: PUSH
16193: LD_INT 1
16195: DOUBLE
16196: EQUAL
16197: IFTRUE 16201
16199: GO 16227
16201: POP
// begin wait ( 3 3$0 ) ;
16202: LD_INT 6300
16204: PPUSH
16205: CALL_OW 67
// navrat_z_pruzkumu ( Frank , 1 ) ;
16209: LD_EXP 36
16213: PPUSH
16214: LD_INT 1
16216: PPUSH
16217: CALL 16856 0 2
// fuspech1 ;
16221: CALL 3285 0 0
// end ; 2 :
16225: GO 16284
16227: LD_INT 2
16229: DOUBLE
16230: EQUAL
16231: IFTRUE 16235
16233: GO 16261
16235: POP
// begin wait ( 1 1$0 ) ;
16236: LD_INT 2100
16238: PPUSH
16239: CALL_OW 67
// navrat_z_pruzkumu ( Frank , 2 ) ;
16243: LD_EXP 36
16247: PPUSH
16248: LD_INT 2
16250: PPUSH
16251: CALL 16856 0 2
// fuspech2 ;
16255: CALL 3422 0 0
// end ; 3 :
16259: GO 16284
16261: LD_INT 3
16263: DOUBLE
16264: EQUAL
16265: IFTRUE 16269
16267: GO 16283
16269: POP
// begin wait ( 5 5$0 ) ;
16270: LD_INT 10500
16272: PPUSH
16273: CALL_OW 67
// fuspech3 ;
16277: CALL 3565 0 0
// end ; end ;
16281: GO 16284
16283: POP
// end else
16284: GO 16287
// enable ;
16286: ENABLE
// end ;
16287: END
// every 0 0$30 trigger A1_dobyta do
16288: LD_EXP 28
16292: IFFALSE 16607
16294: GO 16296
16296: DISABLE
// begin if IsOK ( Yamoko ) then
16297: LD_EXP 39
16301: PPUSH
16302: CALL_OW 302
16306: IFFALSE 16606
// begin wait ( 0 0$10 ) ;
16308: LD_INT 350
16310: PPUSH
16311: CALL_OW 67
// vysl := dialog_yamoko ;
16315: LD_ADDR_LOC 23
16319: PUSH
16320: CALL 3573 0 0
16324: ST_TO_ADDR
// pom = Rand ( 1 , 100 ) ;
16325: LD_ADDR_LOC 24
16329: PUSH
16330: LD_INT 1
16332: PPUSH
16333: LD_INT 100
16335: PPUSH
16336: CALL_OW 12
16340: ST_TO_ADDR
// case vysl of 1 :
16341: LD_LOC 23
16345: PUSH
16346: LD_INT 1
16348: DOUBLE
16349: EQUAL
16350: IFTRUE 16354
16352: GO 16384
16354: POP
// begin i = [ 50 , 20 , 30 ] ;
16355: LD_ADDR_LOC 25
16359: PUSH
16360: LD_INT 50
16362: PUSH
16363: LD_INT 20
16365: PUSH
16366: LD_INT 30
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: LIST
16373: ST_TO_ADDR
// Pruzkumnik = true ;
16374: LD_ADDR_EXP 31
16378: PUSH
16379: LD_INT 1
16381: ST_TO_ADDR
// end ; 21 :
16382: GO 16423
16384: LD_INT 21
16386: DOUBLE
16387: EQUAL
16388: IFTRUE 16392
16390: GO 16422
16392: POP
// begin i = [ 70 , 25 , 5 ] ;
16393: LD_ADDR_LOC 25
16397: PUSH
16398: LD_INT 70
16400: PUSH
16401: LD_INT 25
16403: PUSH
16404: LD_INT 5
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: LIST
16411: ST_TO_ADDR
// Pruzkumnik = true ;
16412: LD_ADDR_EXP 31
16416: PUSH
16417: LD_INT 1
16419: ST_TO_ADDR
// end ; end ;
16420: GO 16423
16422: POP
// if Pruzkumnik then
16423: LD_EXP 31
16427: IFFALSE 16508
// begin jdi_na_pruzkum ( Yamoko ) ;
16429: LD_EXP 39
16433: PPUSH
16434: CALL 16608 0 1
// if pom <= i [ 1 ] then
16438: LD_LOC 24
16442: PUSH
16443: LD_LOC 25
16447: PUSH
16448: LD_INT 1
16450: ARRAY
16451: LESSEQUAL
16452: IFFALSE 16464
// uspech = 1 else
16454: LD_ADDR_LOC 26
16458: PUSH
16459: LD_INT 1
16461: ST_TO_ADDR
16462: GO 16508
// if pom <= i [ 1 ] + i [ 2 ] then
16464: LD_LOC 24
16468: PUSH
16469: LD_LOC 25
16473: PUSH
16474: LD_INT 1
16476: ARRAY
16477: PUSH
16478: LD_LOC 25
16482: PUSH
16483: LD_INT 2
16485: ARRAY
16486: PLUS
16487: LESSEQUAL
16488: IFFALSE 16500
// uspech = 2 else
16490: LD_ADDR_LOC 26
16494: PUSH
16495: LD_INT 2
16497: ST_TO_ADDR
16498: GO 16508
// uspech = 3 ;
16500: LD_ADDR_LOC 26
16504: PUSH
16505: LD_INT 3
16507: ST_TO_ADDR
// end ; case uspech of 1 :
16508: LD_LOC 26
16512: PUSH
16513: LD_INT 1
16515: DOUBLE
16516: EQUAL
16517: IFTRUE 16521
16519: GO 16547
16521: POP
// begin wait ( 2 2$0 ) ;
16522: LD_INT 4200
16524: PPUSH
16525: CALL_OW 67
// navrat_z_pruzkumu ( Yamoko , 1 ) ;
16529: LD_EXP 39
16533: PPUSH
16534: LD_INT 1
16536: PPUSH
16537: CALL 16856 0 2
// yuspech1 ;
16541: CALL 3678 0 0
// end ; 2 :
16545: GO 16604
16547: LD_INT 2
16549: DOUBLE
16550: EQUAL
16551: IFTRUE 16555
16553: GO 16581
16555: POP
// begin wait ( 1 1$0 ) ;
16556: LD_INT 2100
16558: PPUSH
16559: CALL_OW 67
// navrat_z_pruzkumu ( Yamoko , 2 ) ;
16563: LD_EXP 39
16567: PPUSH
16568: LD_INT 2
16570: PPUSH
16571: CALL 16856 0 2
// yuspech2 ;
16575: CALL 3827 0 0
// end ; 3 :
16579: GO 16604
16581: LD_INT 3
16583: DOUBLE
16584: EQUAL
16585: IFTRUE 16589
16587: GO 16603
16589: POP
// begin wait ( 5 5$0 ) ;
16590: LD_INT 10500
16592: PPUSH
16593: CALL_OW 67
// yuspech3 ;
16597: CALL 3926 0 0
// end ; end ;
16601: GO 16604
16603: POP
// end else
16604: GO 16607
// enable ;
16606: ENABLE
// end ;
16607: END
// function jdi_na_pruzkum ( pru ) ; begin
16608: LD_INT 0
16610: PPUSH
// ComStop ( pru ) ;
16611: LD_VAR 0 1
16615: PPUSH
16616: CALL_OW 141
// AddComExitBuilding ( pru ) ;
16620: LD_VAR 0 1
16624: PPUSH
16625: CALL_OW 182
// AddComExitVehicle ( pru ) ;
16629: LD_VAR 0 1
16633: PPUSH
16634: CALL_OW 181
// AddComStop ( pru ) ;
16638: LD_VAR 0 1
16642: PPUSH
16643: CALL_OW 201
// while IsInUnit ( pru ) <> 0 do
16647: LD_VAR 0 1
16651: PPUSH
16652: CALL_OW 310
16656: PUSH
16657: LD_INT 0
16659: NONEQUAL
16660: IFFALSE 16696
// begin wait ( 0 0$0.5 ) ;
16662: LD_INT 18
16664: PPUSH
16665: CALL_OW 67
// ComExitBuilding ( pru ) ;
16669: LD_VAR 0 1
16673: PPUSH
16674: CALL_OW 122
// wait ( 0 0$0.5 ) ;
16678: LD_INT 18
16680: PPUSH
16681: CALL_OW 67
// AddComExitVehicle ( pru ) ;
16685: LD_VAR 0 1
16689: PPUSH
16690: CALL_OW 181
// end ;
16694: GO 16647
// ComStop ( pru ) ;
16696: LD_VAR 0 1
16700: PPUSH
16701: CALL_OW 141
// SetSide ( pru , You2 ) ;
16705: LD_VAR 0 1
16709: PPUSH
16710: LD_EXP 2
16714: PPUSH
16715: CALL_OW 235
// SetClass ( pru , class_soldier ) ;
16719: LD_VAR 0 1
16723: PPUSH
16724: LD_INT 1
16726: PPUSH
16727: CALL_OW 336
// AddComMoveXY ( pru , 91 , 110 ) ;
16731: LD_VAR 0 1
16735: PPUSH
16736: LD_INT 91
16738: PPUSH
16739: LD_INT 110
16741: PPUSH
16742: CALL_OW 171
// AddComMoveXY ( pru , 59 , 103 ) ;
16746: LD_VAR 0 1
16750: PPUSH
16751: LD_INT 59
16753: PPUSH
16754: LD_INT 103
16756: PPUSH
16757: CALL_OW 171
// while not IsAt ( pru , 59 , 103 ) do
16761: LD_VAR 0 1
16765: PPUSH
16766: LD_INT 59
16768: PPUSH
16769: LD_INT 103
16771: PPUSH
16772: CALL_OW 307
16776: NOT
16777: IFFALSE 16803
// begin wait ( 0 0$2 ) ;
16779: LD_INT 70
16781: PPUSH
16782: CALL_OW 67
// AddComMoveXY ( pru , 59 , 103 ) ;
16786: LD_VAR 0 1
16790: PPUSH
16791: LD_INT 59
16793: PPUSH
16794: LD_INT 103
16796: PPUSH
16797: CALL_OW 171
// end ;
16801: GO 16761
// ComMoveXY ( pru , 51 , 101 ) ;
16803: LD_VAR 0 1
16807: PPUSH
16808: LD_INT 51
16810: PPUSH
16811: LD_INT 101
16813: PPUSH
16814: CALL_OW 111
// while not IsInArea ( pru , pru_out ) do
16818: LD_VAR 0 1
16822: PPUSH
16823: LD_INT 24
16825: PPUSH
16826: CALL_OW 308
16830: NOT
16831: IFFALSE 16842
// wait ( 0 0$1 ) ;
16833: LD_INT 35
16835: PPUSH
16836: CALL_OW 67
16840: GO 16818
// RemoveUnit ( pru ) ;
16842: LD_VAR 0 1
16846: PPUSH
16847: CALL_OW 64
// end ;
16851: LD_VAR 0 2
16855: RET
// function navrat_z_pruzkumu ( pru , usp ) ; begin
16856: LD_INT 0
16858: PPUSH
// PlaceUnitArea ( pru , pruarea , false ) ;
16859: LD_VAR 0 1
16863: PPUSH
16864: LD_INT 20
16866: PPUSH
16867: LD_INT 0
16869: PPUSH
16870: CALL_OW 49
// if usp = 1 then
16874: LD_VAR 0 2
16878: PUSH
16879: LD_INT 1
16881: EQUAL
16882: IFFALSE 16899
// AddComMoveXY ( pru , 47 , 87 ) ;
16884: LD_VAR 0 1
16888: PPUSH
16889: LD_INT 47
16891: PPUSH
16892: LD_INT 87
16894: PPUSH
16895: CALL_OW 171
// AddComMoveXY ( pru , 68 , 106 ) ;
16899: LD_VAR 0 1
16903: PPUSH
16904: LD_INT 68
16906: PPUSH
16907: LD_INT 106
16909: PPUSH
16910: CALL_OW 171
// AddComMoveXY ( pru , 118 , 129 ) ;
16914: LD_VAR 0 1
16918: PPUSH
16919: LD_INT 118
16921: PPUSH
16922: LD_INT 129
16924: PPUSH
16925: CALL_OW 171
// if usp <> 1 then
16929: LD_VAR 0 2
16933: PUSH
16934: LD_INT 1
16936: NONEQUAL
16937: IFFALSE 16951
// SetLives ( pru , 300 ) ;
16939: LD_VAR 0 1
16943: PPUSH
16944: LD_INT 300
16946: PPUSH
16947: CALL_OW 234
// while not IsInArea ( pru , Abase1 ) do
16951: LD_VAR 0 1
16955: PPUSH
16956: LD_INT 3
16958: PPUSH
16959: CALL_OW 308
16963: NOT
16964: IFFALSE 16975
// wait ( 0 0$2 ) ;
16966: LD_INT 70
16968: PPUSH
16969: CALL_OW 67
16973: GO 16951
// SetSide ( pru , You ) ;
16975: LD_VAR 0 1
16979: PPUSH
16980: LD_EXP 1
16984: PPUSH
16985: CALL_OW 235
// ComMoveUnit ( pru , JMM ) ;
16989: LD_VAR 0 1
16993: PPUSH
16994: LD_EXP 32
16998: PPUSH
16999: CALL_OW 112
// end ;
17003: LD_VAR 0 3
17007: RET
// every 0 0$10 trigger GetSide ( A1_tov ) or IsDead ( A1_tov ) do
17008: LD_INT 110
17010: PPUSH
17011: CALL_OW 255
17015: PUSH
17016: LD_INT 110
17018: PPUSH
17019: CALL_OW 301
17023: OR
17024: IFFALSE 17089
17026: GO 17028
17028: DISABLE
// begin SetTech ( tech_Flame , You , state_researched ) ;
17029: LD_INT 70
17031: PPUSH
17032: LD_EXP 1
17036: PPUSH
17037: LD_INT 2
17039: PPUSH
17040: CALL_OW 322
// SetTech ( tech_SibPow , You , state_researched ) ;
17044: LD_INT 21
17046: PPUSH
17047: LD_EXP 1
17051: PPUSH
17052: LD_INT 2
17054: PPUSH
17055: CALL_OW 322
// SetTech ( tech_SibEng , You , state_researched ) ;
17059: LD_INT 22
17061: PPUSH
17062: LD_EXP 1
17066: PPUSH
17067: LD_INT 2
17069: PPUSH
17070: CALL_OW 322
// SetTech ( tech_Mortar , You , state_researched ) ;
17074: LD_INT 41
17076: PPUSH
17077: LD_EXP 1
17081: PPUSH
17082: LD_INT 2
17084: PPUSH
17085: CALL_OW 322
// end ;
17089: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , Arabi ] , [ f_btype , b_warehouse ] ] ) = 0 do var pomauta ; var art ; var i , pom ;
17090: LD_INT 22
17092: PUSH
17093: LD_EXP 3
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PUSH
17102: LD_INT 30
17104: PUSH
17105: LD_INT 1
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PPUSH
17116: CALL_OW 69
17120: PUSH
17121: LD_INT 0
17123: EQUAL
17124: IFFALSE 17293
17126: GO 17128
17128: DISABLE
17129: LD_INT 0
17131: PPUSH
17132: PPUSH
17133: PPUSH
17134: PPUSH
// begin pomauta = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17135: LD_ADDR_VAR 0 1
17139: PUSH
17140: LD_INT 22
17142: PUSH
17143: LD_EXP 1
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: PUSH
17152: LD_INT 2
17154: PUSH
17155: LD_INT 34
17157: PUSH
17158: LD_INT 12
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 34
17167: PUSH
17168: LD_INT 32
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: LIST
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PPUSH
17184: CALL_OW 69
17188: ST_TO_ADDR
// art = false ;
17189: LD_ADDR_VAR 0 2
17193: PUSH
17194: LD_INT 0
17196: ST_TO_ADDR
// for i in pomauta do
17197: LD_ADDR_VAR 0 3
17201: PUSH
17202: LD_VAR 0 1
17206: PUSH
17207: FOR_IN
17208: IFFALSE 17238
// if GetCargo ( i , mat_artefact ) > 0 then
17210: LD_VAR 0 3
17214: PPUSH
17215: LD_INT 4
17217: PPUSH
17218: CALL_OW 289
17222: PUSH
17223: LD_INT 0
17225: GREATER
17226: IFFALSE 17236
// art = true ;
17228: LD_ADDR_VAR 0 2
17232: PUSH
17233: LD_INT 1
17235: ST_TO_ADDR
17236: GO 17207
17238: POP
17239: POP
// if art then
17240: LD_VAR 0 2
17244: IFFALSE 17252
// konec_mise else
17246: CALL 669 0 0
17250: GO 17293
// begin pom = query_konec_mise ;
17252: LD_ADDR_VAR 0 4
17256: PUSH
17257: CALL 7887 0 0
17261: ST_TO_ADDR
// if pom = 2 then
17262: LD_VAR 0 4
17266: PUSH
17267: LD_INT 2
17269: EQUAL
17270: IFFALSE 17278
// konec_mise else
17272: CALL 669 0 0
17276: GO 17293
// begin end_the_mission_allowed = true ;
17278: LD_ADDR_OWVAR 57
17282: PUSH
17283: LD_INT 1
17285: ST_TO_ADDR
// ChangeMissionObjectives ( MDestroyOut ) ;
17286: LD_STRING MDestroyOut
17288: PPUSH
17289: CALL_OW 337
// end ; end ; end ; end_of_file
17293: PPOPN 4
17295: END
// export Odebirani ; export oposoldier ; export bum2 ; var utok1 ; var utok1_over ; var utok3_over ; var utok4_over ; var Veze_2 ; var Opr_2 ; var i , pom , pom1 ; var uklizejici_mista ; var mcm1 ; var mcm2 ; every 0 0$0.3 do
17296: GO 17298
17298: DISABLE
// begin utok1 := false ;
17299: LD_ADDR_LOC 27
17303: PUSH
17304: LD_INT 0
17306: ST_TO_ADDR
// bum2 = false ;
17307: LD_ADDR_EXP 47
17311: PUSH
17312: LD_INT 0
17314: ST_TO_ADDR
// Veze_2 := [ A2_bu1 , A2_bu2 , A2_bu3 , A2_bu4 , A2_bu4 , A2_bu5 , A2_bu6 ] ;
17315: LD_ADDR_LOC 31
17319: PUSH
17320: LD_INT 112
17322: PUSH
17323: LD_INT 63
17325: PUSH
17326: LD_INT 47
17328: PUSH
17329: LD_INT 60
17331: PUSH
17332: LD_INT 60
17334: PUSH
17335: LD_INT 62
17337: PUSH
17338: LD_INT 59
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: ST_TO_ADDR
// Opr_2 = [ JEDNOTKY_BAZE_2_LIST [ 15 ] , JEDNOTKY_BAZE_2_LIST [ 16 ] ] ;
17350: LD_ADDR_LOC 32
17354: PUSH
17355: LD_EXP 11
17359: PUSH
17360: LD_INT 15
17362: ARRAY
17363: PUSH
17364: LD_EXP 11
17368: PUSH
17369: LD_INT 16
17371: ARRAY
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: ST_TO_ADDR
// pom = vytvor_opravare ;
17377: LD_ADDR_LOC 34
17381: PUSH
17382: CALL 9069 0 0
17386: ST_TO_ADDR
// Opr_2 = Opr_2 ^ pom ;
17387: LD_ADDR_LOC 32
17391: PUSH
17392: LD_LOC 32
17396: PUSH
17397: LD_LOC 34
17401: ADD
17402: ST_TO_ADDR
// Utok1_over = false ;
17403: LD_ADDR_LOC 28
17407: PUSH
17408: LD_INT 0
17410: ST_TO_ADDR
// utok3_over = false ;
17411: LD_ADDR_LOC 29
17415: PUSH
17416: LD_INT 0
17418: ST_TO_ADDR
// utok4_over = false ;
17419: LD_ADDR_LOC 30
17423: PUSH
17424: LD_INT 0
17426: ST_TO_ADDR
// uklizejici_mista = [ [ 28 , 16 ] , [ 22 , 18 ] , [ 29 , 20 ] , [ 19 , 33 ] ] ;
17427: LD_ADDR_LOC 36
17431: PUSH
17432: LD_INT 28
17434: PUSH
17435: LD_INT 16
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: LD_INT 22
17444: PUSH
17445: LD_INT 18
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 29
17454: PUSH
17455: LD_INT 20
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 19
17464: PUSH
17465: LD_INT 33
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: ST_TO_ADDR
// disable ( 998 ) ;
17478: LD_INT 998
17480: DISABLE_MARKED
// disable ( 997 ) ;
17481: LD_INT 997
17483: DISABLE_MARKED
// disable ( 996 ) ;
17484: LD_INT 996
17486: DISABLE_MARKED
// disable ( 995 ) ;
17487: LD_INT 995
17489: DISABLE_MARKED
// if difficulty < 3 then
17490: LD_OWVAR 67
17494: PUSH
17495: LD_INT 3
17497: LESS
17498: IFFALSE 17507
// RemoveUnit ( sui1 ) ;
17500: LD_INT 118
17502: PPUSH
17503: CALL_OW 64
// if difficulty < 2 then
17507: LD_OWVAR 67
17511: PUSH
17512: LD_INT 2
17514: LESS
17515: IFFALSE 17531
// begin RemoveUnit ( sui2 ) ;
17517: LD_INT 119
17519: PPUSH
17520: CALL_OW 64
// RemoveUnit ( sui3 ) ;
17524: LD_INT 121
17526: PPUSH
17527: CALL_OW 64
// end ; end ;
17531: END
// export function uklid_arabu ; begin
17532: LD_INT 0
17534: PPUSH
// ComEnterUnit ( zradce1 , A1_lab ) ;
17535: LD_INT 65
17537: PPUSH
17538: LD_INT 15
17540: PPUSH
17541: CALL_OW 120
// ComEnterUnit ( zradce2 , A1_bu1 ) ;
17545: LD_INT 68
17547: PPUSH
17548: LD_INT 9
17550: PPUSH
17551: CALL_OW 120
// ComEnterUnit ( zradce3 , A1_bu2 ) ;
17555: LD_INT 69
17557: PPUSH
17558: LD_INT 8
17560: PPUSH
17561: CALL_OW 120
// ComEnterUnit ( zradce4 , A1_bar ) ;
17565: LD_INT 70
17567: PPUSH
17568: LD_INT 14
17570: PPUSH
17571: CALL_OW 120
// ComEnterUnit ( zradce5 , A1_bar ) ;
17575: LD_INT 71
17577: PPUSH
17578: LD_INT 14
17580: PPUSH
17581: CALL_OW 120
// ComEnterUnit ( A1_vo1 , A1_bu3 ) ;
17585: LD_INT 72
17587: PPUSH
17588: LD_INT 11
17590: PPUSH
17591: CALL_OW 120
// ComEnterUnit ( A1_vo2 , A1_dep ) ;
17595: LD_INT 73
17597: PPUSH
17598: LD_INT 4
17600: PPUSH
17601: CALL_OW 120
// ComEnterUnit ( A1_vo4 , A1_dep ) ;
17605: LD_INT 76
17607: PPUSH
17608: LD_INT 4
17610: PPUSH
17611: CALL_OW 120
// ComEnterUnit ( A1_ve1 , A1_lab ) ;
17615: LD_INT 87
17617: PPUSH
17618: LD_INT 15
17620: PPUSH
17621: CALL_OW 120
// ComEnterUnit ( A1_ve2 , A1_lab ) ;
17625: LD_INT 74
17627: PPUSH
17628: LD_INT 15
17630: PPUSH
17631: CALL_OW 120
// ComEnterUnit ( zradce6 , A1_bu6 ) ;
17635: LD_INT 75
17637: PPUSH
17638: LD_INT 10
17640: PPUSH
17641: CALL_OW 120
// ComEnterUnit ( zradce7 , A1_bu4 ) ;
17645: LD_INT 77
17647: PPUSH
17648: LD_INT 12
17650: PPUSH
17651: CALL_OW 120
// ComHold ( mrtvola2 ) ;
17655: LD_INT 78
17657: PPUSH
17658: CALL_OW 140
// ComEnterUnit ( A1_en1 , A1_dep ) ;
17662: LD_INT 79
17664: PPUSH
17665: LD_INT 4
17667: PPUSH
17668: CALL_OW 120
// ComEnterUnit ( A1_me1 , A1_tov ) ;
17672: LD_INT 81
17674: PPUSH
17675: LD_INT 110
17677: PPUSH
17678: CALL_OW 120
// ComEnterUnit ( A1_me2 , A1_tov ) ;
17682: LD_INT 80
17684: PPUSH
17685: LD_INT 110
17687: PPUSH
17688: CALL_OW 120
// ComPlaceRemoteCharge ( A2_zas1 , 52 , 62 , 0 ) ;
17692: LD_INT 82
17694: PPUSH
17695: LD_INT 52
17697: PPUSH
17698: LD_INT 62
17700: PPUSH
17701: LD_INT 0
17703: PPUSH
17704: CALL_OW 133
// ComPlaceRemoteCharge ( A2_zas2 , 55 , 64 , 0 ) ;
17708: LD_INT 83
17710: PPUSH
17711: LD_INT 55
17713: PPUSH
17714: LD_INT 64
17716: PPUSH
17717: LD_INT 0
17719: PPUSH
17720: CALL_OW 133
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 44 , 24 ) ;
17724: LD_INT 82
17726: PUSH
17727: LD_INT 83
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: PPUSH
17734: LD_INT 44
17736: PPUSH
17737: LD_INT 24
17739: PPUSH
17740: CALL_OW 171
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 30 , 11 ) ;
17744: LD_INT 82
17746: PUSH
17747: LD_INT 83
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PPUSH
17754: LD_INT 30
17756: PPUSH
17757: LD_INT 11
17759: PPUSH
17760: CALL_OW 171
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 24 , 37 ) ;
17764: LD_INT 82
17766: PUSH
17767: LD_INT 83
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PPUSH
17774: LD_INT 24
17776: PPUSH
17777: LD_INT 37
17779: PPUSH
17780: CALL_OW 171
// AddComMoveXY ( A2_zas1 , 32 , 60 ) ;
17784: LD_INT 82
17786: PPUSH
17787: LD_INT 32
17789: PPUSH
17790: LD_INT 60
17792: PPUSH
17793: CALL_OW 171
// AddComMoveXY ( A2_zas2 , 37 , 58 ) ;
17797: LD_INT 83
17799: PPUSH
17800: LD_INT 37
17802: PPUSH
17803: LD_INT 58
17805: PPUSH
17806: CALL_OW 171
// AddComCrawl ( [ A2_zas1 , A2_zas2 ] ) ;
17810: LD_INT 82
17812: PUSH
17813: LD_INT 83
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PPUSH
17820: CALL_OW 197
// ComEnterUnit ( A3_rme1 , A3_rv1 ) ;
17824: LD_INT 96
17826: PPUSH
17827: LD_INT 26
17829: PPUSH
17830: CALL_OW 120
// ComEnterUnit ( A3_rme2 , A3_rv2 ) ;
17834: LD_INT 95
17836: PPUSH
17837: LD_INT 25
17839: PPUSH
17840: CALL_OW 120
// ComEnterUnit ( A3_rme3 , A3_rv3 ) ;
17844: LD_INT 94
17846: PPUSH
17847: LD_INT 27
17849: PPUSH
17850: CALL_OW 120
// wait ( 0 0$5 ) ;
17854: LD_INT 175
17856: PPUSH
17857: CALL_OW 67
// ComLinkTo ( [ A3_are1 , A3_are2 , A3_are3 ] , A3_rme1 ) ;
17861: LD_INT 23
17863: PUSH
17864: LD_INT 18
17866: PUSH
17867: LD_INT 44
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: LIST
17874: PPUSH
17875: LD_INT 96
17877: PPUSH
17878: CALL_OW 135
// ComLinkTo ( [ A3_are4 , A3_are5 , A3_are6 ] , A3_rme2 ) ;
17882: LD_INT 19
17884: PUSH
17885: LD_INT 24
17887: PUSH
17888: LD_INT 20
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: LIST
17895: PPUSH
17896: LD_INT 95
17898: PPUSH
17899: CALL_OW 135
// ComLinkTo ( [ A3_are7 , A3_are8 , A3_are9 ] , A3_rme3 ) ;
17903: LD_INT 21
17905: PUSH
17906: LD_INT 93
17908: PUSH
17909: LD_INT 22
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: LIST
17916: PPUSH
17917: LD_INT 94
17919: PPUSH
17920: CALL_OW 135
// ComPlaceRemoteCharge ( A3_zas1 , 103 , 19 , 0 ) ;
17924: LD_INT 101
17926: PPUSH
17927: LD_INT 103
17929: PPUSH
17930: LD_INT 19
17932: PPUSH
17933: LD_INT 0
17935: PPUSH
17936: CALL_OW 133
// AddComMoveXY ( A3_zas1 , 104 , 3 ) ;
17940: LD_INT 101
17942: PPUSH
17943: LD_INT 104
17945: PPUSH
17946: LD_INT 3
17948: PPUSH
17949: CALL_OW 171
// AddComCrawl ( A3_zas1 ) ;
17953: LD_INT 101
17955: PPUSH
17956: CALL_OW 197
// AddComTurnXY ( A3_zas1 , 102 , 8 ) ;
17960: LD_INT 101
17962: PPUSH
17963: LD_INT 102
17965: PPUSH
17966: LD_INT 8
17968: PPUSH
17969: CALL_OW 178
// end ;
17973: LD_VAR 0 1
17977: RET
// export function uklid_arabu2 ; var MD1_un ; var MD2_un ; begin
17978: LD_INT 0
17980: PPUSH
17981: PPUSH
17982: PPUSH
// MD1_un = [ ] ;
17983: LD_ADDR_VAR 0 2
17987: PUSH
17988: EMPTY
17989: ST_TO_ADDR
// MD2_un = [ ] ;
17990: LD_ADDR_VAR 0 3
17994: PUSH
17995: EMPTY
17996: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 1 ] , A2_bu1 ) ;
17997: LD_EXP 11
18001: PUSH
18002: LD_INT 1
18004: ARRAY
18005: PPUSH
18006: LD_INT 112
18008: PPUSH
18009: CALL_OW 120
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu1 , false , 0 ] ] ;
18013: LD_ADDR_LOC 36
18017: PUSH
18018: LD_LOC 36
18022: PUSH
18023: LD_INT 112
18025: PUSH
18026: LD_INT 0
18028: PUSH
18029: LD_INT 0
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: LIST
18036: PUSH
18037: EMPTY
18038: LIST
18039: ADD
18040: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 2 ] , A2_bu2 ) ;
18041: LD_EXP 11
18045: PUSH
18046: LD_INT 2
18048: ARRAY
18049: PPUSH
18050: LD_INT 63
18052: PPUSH
18053: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 2 ] ;
18057: LD_ADDR_VAR 0 2
18061: PUSH
18062: LD_VAR 0 2
18066: PUSH
18067: LD_EXP 11
18071: PUSH
18072: LD_INT 2
18074: ARRAY
18075: ADD
18076: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu2 , false , 0 ] ] ;
18077: LD_ADDR_LOC 36
18081: PUSH
18082: LD_LOC 36
18086: PUSH
18087: LD_INT 63
18089: PUSH
18090: LD_INT 0
18092: PUSH
18093: LD_INT 0
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: LIST
18100: PUSH
18101: EMPTY
18102: LIST
18103: ADD
18104: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 3 ] , A2_bu3 ) ;
18105: LD_EXP 11
18109: PUSH
18110: LD_INT 3
18112: ARRAY
18113: PPUSH
18114: LD_INT 47
18116: PPUSH
18117: CALL_OW 120
// if difficulty > 1 then
18121: LD_OWVAR 67
18125: PUSH
18126: LD_INT 1
18128: GREATER
18129: IFFALSE 18151
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 3 ] ;
18131: LD_ADDR_VAR 0 2
18135: PUSH
18136: LD_VAR 0 2
18140: PUSH
18141: LD_EXP 11
18145: PUSH
18146: LD_INT 3
18148: ARRAY
18149: ADD
18150: ST_TO_ADDR
// if difficulty > 1 then
18151: LD_OWVAR 67
18155: PUSH
18156: LD_INT 1
18158: GREATER
18159: IFFALSE 18181
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 3 ] ;
18161: LD_ADDR_VAR 0 3
18165: PUSH
18166: LD_VAR 0 3
18170: PUSH
18171: LD_EXP 11
18175: PUSH
18176: LD_INT 3
18178: ARRAY
18179: ADD
18180: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu3 , false , 0 ] ] ;
18181: LD_ADDR_LOC 36
18185: PUSH
18186: LD_LOC 36
18190: PUSH
18191: LD_INT 47
18193: PUSH
18194: LD_INT 0
18196: PUSH
18197: LD_INT 0
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: LIST
18204: PUSH
18205: EMPTY
18206: LIST
18207: ADD
18208: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 4 ] , A2_bu4 ) ;
18209: LD_EXP 11
18213: PUSH
18214: LD_INT 4
18216: ARRAY
18217: PPUSH
18218: LD_INT 60
18220: PPUSH
18221: CALL_OW 120
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu4 , false , 0 ] ] ;
18225: LD_ADDR_LOC 36
18229: PUSH
18230: LD_LOC 36
18234: PUSH
18235: LD_INT 60
18237: PUSH
18238: LD_INT 0
18240: PUSH
18241: LD_INT 0
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: LIST
18248: PUSH
18249: EMPTY
18250: LIST
18251: ADD
18252: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 5 ] , A2_bu5 ) ;
18253: LD_EXP 11
18257: PUSH
18258: LD_INT 5
18260: ARRAY
18261: PPUSH
18262: LD_INT 62
18264: PPUSH
18265: CALL_OW 120
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 5 ] ;
18269: LD_ADDR_VAR 0 3
18273: PUSH
18274: LD_VAR 0 3
18278: PUSH
18279: LD_EXP 11
18283: PUSH
18284: LD_INT 5
18286: ARRAY
18287: ADD
18288: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu5 , false , 0 ] ] ;
18289: LD_ADDR_LOC 36
18293: PUSH
18294: LD_LOC 36
18298: PUSH
18299: LD_INT 62
18301: PUSH
18302: LD_INT 0
18304: PUSH
18305: LD_INT 0
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: LIST
18312: PUSH
18313: EMPTY
18314: LIST
18315: ADD
18316: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 6 ] , A2_bu6 ) ;
18317: LD_EXP 11
18321: PUSH
18322: LD_INT 6
18324: ARRAY
18325: PPUSH
18326: LD_INT 59
18328: PPUSH
18329: CALL_OW 120
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 6 ] ;
18333: LD_ADDR_VAR 0 3
18337: PUSH
18338: LD_VAR 0 3
18342: PUSH
18343: LD_EXP 11
18347: PUSH
18348: LD_INT 6
18350: ARRAY
18351: ADD
18352: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bu6 , false , 0 ] ] ;
18353: LD_ADDR_LOC 36
18357: PUSH
18358: LD_LOC 36
18362: PUSH
18363: LD_INT 59
18365: PUSH
18366: LD_INT 0
18368: PUSH
18369: LD_INT 0
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: LIST
18376: PUSH
18377: EMPTY
18378: LIST
18379: ADD
18380: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 17 ] , A2_tov ) ;
18381: LD_EXP 11
18385: PUSH
18386: LD_INT 17
18388: ARRAY
18389: PPUSH
18390: LD_INT 50
18392: PPUSH
18393: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 17 ] ;
18397: LD_ADDR_VAR 0 2
18401: PUSH
18402: LD_VAR 0 2
18406: PUSH
18407: LD_EXP 11
18411: PUSH
18412: LD_INT 17
18414: ARRAY
18415: ADD
18416: ST_TO_ADDR
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 17 ] ;
18417: LD_ADDR_VAR 0 3
18421: PUSH
18422: LD_VAR 0 3
18426: PUSH
18427: LD_EXP 11
18431: PUSH
18432: LD_INT 17
18434: ARRAY
18435: ADD
18436: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_tov , true , class_mechanic ] ] ;
18437: LD_ADDR_LOC 36
18441: PUSH
18442: LD_LOC 36
18446: PUSH
18447: LD_INT 50
18449: PUSH
18450: LD_INT 1
18452: PUSH
18453: LD_INT 3
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: LIST
18460: PUSH
18461: EMPTY
18462: LIST
18463: ADD
18464: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 18 ] , A2_tov ) ;
18465: LD_EXP 11
18469: PUSH
18470: LD_INT 18
18472: ARRAY
18473: PPUSH
18474: LD_INT 50
18476: PPUSH
18477: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 18 ] ;
18481: LD_ADDR_VAR 0 2
18485: PUSH
18486: LD_VAR 0 2
18490: PUSH
18491: LD_EXP 11
18495: PUSH
18496: LD_INT 18
18498: ARRAY
18499: ADD
18500: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_tov , true , class_mechanic ] ] ;
18501: LD_ADDR_LOC 36
18505: PUSH
18506: LD_LOC 36
18510: PUSH
18511: LD_INT 50
18513: PUSH
18514: LD_INT 1
18516: PUSH
18517: LD_INT 3
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: LIST
18524: PUSH
18525: EMPTY
18526: LIST
18527: ADD
18528: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 19 ] , A2_tov ) ;
18529: LD_EXP 11
18533: PUSH
18534: LD_INT 19
18536: ARRAY
18537: PPUSH
18538: LD_INT 50
18540: PPUSH
18541: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 20 ] , A2_tov ) ;
18545: LD_EXP 11
18549: PUSH
18550: LD_INT 20
18552: ARRAY
18553: PPUSH
18554: LD_INT 50
18556: PPUSH
18557: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 15 ] , A2_dep ) ;
18561: LD_EXP 11
18565: PUSH
18566: LD_INT 15
18568: ARRAY
18569: PPUSH
18570: LD_INT 46
18572: PPUSH
18573: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 16 ] , A2_dep ) ;
18577: LD_EXP 11
18581: PUSH
18582: LD_INT 16
18584: ARRAY
18585: PPUSH
18586: LD_INT 46
18588: PPUSH
18589: CALL_OW 120
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 16 ] ;
18593: LD_ADDR_VAR 0 3
18597: PUSH
18598: LD_VAR 0 3
18602: PUSH
18603: LD_EXP 11
18607: PUSH
18608: LD_INT 16
18610: ARRAY
18611: ADD
18612: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_dep , true , class_engineer ] ] ;
18613: LD_ADDR_LOC 36
18617: PUSH
18618: LD_LOC 36
18622: PUSH
18623: LD_INT 46
18625: PUSH
18626: LD_INT 1
18628: PUSH
18629: LD_INT 2
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: LIST
18636: PUSH
18637: EMPTY
18638: LIST
18639: ADD
18640: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 7 ] , A2_bar ) ;
18641: LD_EXP 11
18645: PUSH
18646: LD_INT 7
18648: ARRAY
18649: PPUSH
18650: LD_INT 48
18652: PPUSH
18653: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 7 ] ;
18657: LD_ADDR_VAR 0 2
18661: PUSH
18662: LD_VAR 0 2
18666: PUSH
18667: LD_EXP 11
18671: PUSH
18672: LD_INT 7
18674: ARRAY
18675: ADD
18676: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bar , true , class_mortar ] ] ;
18677: LD_ADDR_LOC 36
18681: PUSH
18682: LD_LOC 36
18686: PUSH
18687: LD_INT 48
18689: PUSH
18690: LD_INT 1
18692: PUSH
18693: LD_INT 8
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: LIST
18700: PUSH
18701: EMPTY
18702: LIST
18703: ADD
18704: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 8 ] , A2_bar ) ;
18705: LD_EXP 11
18709: PUSH
18710: LD_INT 8
18712: ARRAY
18713: PPUSH
18714: LD_INT 48
18716: PPUSH
18717: CALL_OW 120
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 8 ] ;
18721: LD_ADDR_VAR 0 3
18725: PUSH
18726: LD_VAR 0 3
18730: PUSH
18731: LD_EXP 11
18735: PUSH
18736: LD_INT 8
18738: ARRAY
18739: ADD
18740: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bar , true , class_soldier ] ] ;
18741: LD_ADDR_LOC 36
18745: PUSH
18746: LD_LOC 36
18750: PUSH
18751: LD_INT 48
18753: PUSH
18754: LD_INT 1
18756: PUSH
18757: LD_INT 1
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: LIST
18764: PUSH
18765: EMPTY
18766: LIST
18767: ADD
18768: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 9 ] , A2_bar ) ;
18769: LD_EXP 11
18773: PUSH
18774: LD_INT 9
18776: ARRAY
18777: PPUSH
18778: LD_INT 48
18780: PPUSH
18781: CALL_OW 120
// uklizejici_mista = uklizejici_mista ^ [ [ A2_bar , true , class_mortar ] ] ;
18785: LD_ADDR_LOC 36
18789: PUSH
18790: LD_LOC 36
18794: PUSH
18795: LD_INT 48
18797: PUSH
18798: LD_INT 1
18800: PUSH
18801: LD_INT 8
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: LIST
18808: PUSH
18809: EMPTY
18810: LIST
18811: ADD
18812: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 10 ] , A2_bar ) ;
18813: LD_EXP 11
18817: PUSH
18818: LD_INT 10
18820: ARRAY
18821: PPUSH
18822: LD_INT 48
18824: PPUSH
18825: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 11 ] , A2_lab ) ;
18829: LD_EXP 11
18833: PUSH
18834: LD_INT 11
18836: ARRAY
18837: PPUSH
18838: LD_INT 61
18840: PPUSH
18841: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 10 ] ;
18845: LD_ADDR_VAR 0 2
18849: PUSH
18850: LD_VAR 0 2
18854: PUSH
18855: LD_EXP 11
18859: PUSH
18860: LD_INT 10
18862: ARRAY
18863: ADD
18864: ST_TO_ADDR
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 10 ] ;
18865: LD_ADDR_VAR 0 3
18869: PUSH
18870: LD_VAR 0 3
18874: PUSH
18875: LD_EXP 11
18879: PUSH
18880: LD_INT 10
18882: ARRAY
18883: ADD
18884: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_lab , true , class_scientistic ] ] ;
18885: LD_ADDR_LOC 36
18889: PUSH
18890: LD_LOC 36
18894: PUSH
18895: LD_INT 61
18897: PUSH
18898: LD_INT 1
18900: PUSH
18901: LD_INT 4
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: LIST
18908: PUSH
18909: EMPTY
18910: LIST
18911: ADD
18912: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 12 ] , A2_lab ) ;
18913: LD_EXP 11
18917: PUSH
18918: LD_INT 12
18920: ARRAY
18921: PPUSH
18922: LD_INT 61
18924: PPUSH
18925: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 23 ] , A2_radar ) ;
18929: LD_EXP 11
18933: PUSH
18934: LD_INT 23
18936: ARRAY
18937: PPUSH
18938: LD_INT 88
18940: PPUSH
18941: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 21 ] , A2_nau1 ) ;
18945: LD_EXP 11
18949: PUSH
18950: LD_INT 21
18952: ARRAY
18953: PPUSH
18954: LD_INT 107
18956: PPUSH
18957: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 21 ] ;
18961: LD_ADDR_VAR 0 2
18965: PUSH
18966: LD_VAR 0 2
18970: PUSH
18971: LD_EXP 11
18975: PUSH
18976: LD_INT 21
18978: ARRAY
18979: ADD
18980: ST_TO_ADDR
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 21 ] ;
18981: LD_ADDR_VAR 0 3
18985: PUSH
18986: LD_VAR 0 3
18990: PUSH
18991: LD_EXP 11
18995: PUSH
18996: LD_INT 21
18998: ARRAY
18999: ADD
19000: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_nau1 , false , 0 ] ] ;
19001: LD_ADDR_LOC 36
19005: PUSH
19006: LD_LOC 36
19010: PUSH
19011: LD_INT 107
19013: PUSH
19014: LD_INT 0
19016: PUSH
19017: LD_INT 0
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: LIST
19024: PUSH
19025: EMPTY
19026: LIST
19027: ADD
19028: ST_TO_ADDR
// ComEnterUnit ( JEDNOTKY_BAZE_2_LIST [ 22 ] , A2_nau2 ) ;
19029: LD_EXP 11
19033: PUSH
19034: LD_INT 22
19036: ARRAY
19037: PPUSH
19038: LD_INT 108
19040: PPUSH
19041: CALL_OW 120
// MD1_un = MD1_un ^ JEDNOTKY_BAZE_2_LIST [ 22 ] ;
19045: LD_ADDR_VAR 0 2
19049: PUSH
19050: LD_VAR 0 2
19054: PUSH
19055: LD_EXP 11
19059: PUSH
19060: LD_INT 22
19062: ARRAY
19063: ADD
19064: ST_TO_ADDR
// MD2_un = MD2_un ^ JEDNOTKY_BAZE_2_LIST [ 22 ] ;
19065: LD_ADDR_VAR 0 3
19069: PUSH
19070: LD_VAR 0 3
19074: PUSH
19075: LD_EXP 11
19079: PUSH
19080: LD_INT 22
19082: ARRAY
19083: ADD
19084: ST_TO_ADDR
// uklizejici_mista = uklizejici_mista ^ [ [ A2_nau2 , false , 0 ] ] ;
19085: LD_ADDR_LOC 36
19089: PUSH
19090: LD_LOC 36
19094: PUSH
19095: LD_INT 108
19097: PUSH
19098: LD_INT 0
19100: PUSH
19101: LD_INT 0
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: LIST
19108: PUSH
19109: EMPTY
19110: LIST
19111: ADD
19112: ST_TO_ADDR
// ComEnterUnit ( Opr_2 , A2_dep ) ;
19113: LD_LOC 32
19117: PPUSH
19118: LD_INT 46
19120: PPUSH
19121: CALL_OW 120
// AddMcUnits ( MD1 , MD1_un ) ;
19125: LD_EXP 6
19129: PPUSH
19130: LD_VAR 0 2
19134: PPUSH
19135: CALL_OW 390
// AddMcUnits ( MD2 , MD2_un ) ;
19139: LD_EXP 8
19143: PPUSH
19144: LD_VAR 0 3
19148: PPUSH
19149: CALL_OW 390
// end ;
19153: LD_VAR 0 1
19157: RET
// export function uklid_arabu3 ; begin
19158: LD_INT 0
19160: PPUSH
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 1 ] , A3_bu1 ) ;
19161: LD_EXP 12
19165: PUSH
19166: LD_INT 1
19168: ARRAY
19169: PPUSH
19170: LD_INT 30
19172: PPUSH
19173: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 2 ] , A3_bu2 ) ;
19177: LD_EXP 12
19181: PUSH
19182: LD_INT 2
19184: ARRAY
19185: PPUSH
19186: LD_INT 43
19188: PPUSH
19189: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 3 ] , A3_bu3 ) ;
19193: LD_EXP 12
19197: PUSH
19198: LD_INT 3
19200: ARRAY
19201: PPUSH
19202: LD_INT 31
19204: PPUSH
19205: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 7 ] , A3_bar ) ;
19209: LD_EXP 12
19213: PUSH
19214: LD_INT 7
19216: ARRAY
19217: PPUSH
19218: LD_INT 40
19220: PPUSH
19221: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 5 ] , A3_bar ) ;
19225: LD_EXP 12
19229: PUSH
19230: LD_INT 5
19232: ARRAY
19233: PPUSH
19234: LD_INT 40
19236: PPUSH
19237: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 6 ] , A3_bar ) ;
19241: LD_EXP 12
19245: PUSH
19246: LD_INT 6
19248: ARRAY
19249: PPUSH
19250: LD_INT 40
19252: PPUSH
19253: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 4 ] , A3_dep ) ;
19257: LD_EXP 12
19261: PUSH
19262: LD_INT 4
19264: ARRAY
19265: PPUSH
19266: LD_INT 28
19268: PPUSH
19269: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 8 ] , A3_tov ) ;
19273: LD_EXP 12
19277: PUSH
19278: LD_INT 8
19280: ARRAY
19281: PPUSH
19282: LD_INT 34
19284: PPUSH
19285: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 9 ] , A3_tov ) ;
19289: LD_EXP 12
19293: PUSH
19294: LD_INT 9
19296: ARRAY
19297: PPUSH
19298: LD_INT 34
19300: PPUSH
19301: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 10 ] , A3_tov ) ;
19305: LD_EXP 12
19309: PUSH
19310: LD_INT 10
19312: ARRAY
19313: PPUSH
19314: LD_INT 34
19316: PPUSH
19317: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 11 ] , A3_tov ) ;
19321: LD_EXP 12
19325: PUSH
19326: LD_INT 11
19328: ARRAY
19329: PPUSH
19330: LD_INT 34
19332: PPUSH
19333: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 12 ] , A3_lab ) ;
19337: LD_EXP 12
19341: PUSH
19342: LD_INT 12
19344: ARRAY
19345: PPUSH
19346: LD_INT 41
19348: PPUSH
19349: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 13 ] , A3_lab ) ;
19353: LD_EXP 12
19357: PUSH
19358: LD_INT 13
19360: ARRAY
19361: PPUSH
19362: LD_INT 41
19364: PPUSH
19365: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 16 ] , A3_dep ) ;
19369: LD_EXP 12
19373: PUSH
19374: LD_INT 16
19376: ARRAY
19377: PPUSH
19378: LD_INT 28
19380: PPUSH
19381: CALL_OW 120
// ComEnterUnit ( JEDNOTKY_BAZE_3_LIST [ 17 ] , A3_dep ) ;
19385: LD_EXP 12
19389: PUSH
19390: LD_INT 17
19392: ARRAY
19393: PPUSH
19394: LD_INT 28
19396: PPUSH
19397: CALL_OW 120
// end ;
19401: LD_VAR 0 1
19405: RET
// every 0 0$1 trigger FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) > 0 do
19406: LD_INT 3
19408: PPUSH
19409: LD_INT 22
19411: PUSH
19412: LD_EXP 1
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: EMPTY
19422: LIST
19423: PPUSH
19424: CALL_OW 70
19428: PUSH
19429: LD_INT 0
19431: GREATER
19432: IFFALSE 19578
19434: GO 19436
19436: DISABLE
// begin wait ( 0 0$2 ) ;
19437: LD_INT 70
19439: PPUSH
19440: CALL_OW 67
// ComExitBuilding ( A1_vo2 ) ;
19444: LD_INT 73
19446: PPUSH
19447: CALL_OW 122
// ComExitBuilding ( [ A1_ve1 , A1_ve2 ] ) ;
19451: LD_INT 87
19453: PUSH
19454: LD_INT 74
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PPUSH
19461: CALL_OW 122
// AddComAgressiveMove ( A1_ve1 , 121 , 147 ) ;
19465: LD_INT 87
19467: PPUSH
19468: LD_INT 121
19470: PPUSH
19471: LD_INT 147
19473: PPUSH
19474: CALL_OW 174
// AddComAgressiveMove ( A1_ve1 , 113 , 141 ) ;
19478: LD_INT 87
19480: PPUSH
19481: LD_INT 113
19483: PPUSH
19484: LD_INT 141
19486: PPUSH
19487: CALL_OW 174
// AddComEnterUnit ( A1_ve1 , A1_bu1 ) ;
19491: LD_INT 87
19493: PPUSH
19494: LD_INT 9
19496: PPUSH
19497: CALL_OW 180
// ComExitBuilding ( A1_en1 ) ;
19501: LD_INT 79
19503: PPUSH
19504: CALL_OW 122
// ComExitBuilding ( [ A1_me1 , A1_me2 ] ) ;
19508: LD_INT 81
19510: PUSH
19511: LD_INT 80
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PPUSH
19518: CALL_OW 122
// AddComAgressiveMove ( A1_me1 , 113 , 128 ) ;
19522: LD_INT 81
19524: PPUSH
19525: LD_INT 113
19527: PPUSH
19528: LD_INT 128
19530: PPUSH
19531: CALL_OW 174
// if difficulty = 3 then
19535: LD_OWVAR 67
19539: PUSH
19540: LD_INT 3
19542: EQUAL
19543: IFFALSE 19555
// AddComEnterUnit ( A1_me1 , A1_au2 ) ;
19545: LD_INT 81
19547: PPUSH
19548: LD_INT 109
19550: PPUSH
19551: CALL_OW 180
// AddComAgressiveMove ( A1_me2 , 117 , 125 ) ;
19555: LD_INT 80
19557: PPUSH
19558: LD_INT 117
19560: PPUSH
19561: LD_INT 125
19563: PPUSH
19564: CALL_OW 174
// AddComEnterUnit ( A1_me2 , A1_au1 ) ;
19568: LD_INT 80
19570: PPUSH
19571: LD_INT 105
19573: PPUSH
19574: CALL_OW 180
// end ;
19578: END
// every 1 1$0 trigger utok1_over do var pom , i ; var souradnice ;
19579: LD_LOC 28
19583: IFFALSE 19816
19585: GO 19587
19587: DISABLE
19588: LD_INT 0
19590: PPUSH
19591: PPUSH
19592: PPUSH
// begin wait ( utok_2_doba [ difficulty ] ) ;
19593: LD_EXP 54
19597: PUSH
19598: LD_OWVAR 67
19602: ARRAY
19603: PPUSH
19604: CALL_OW 67
// for i in Ar_utok3_LIST do
19608: LD_ADDR_VAR 0 2
19612: PUSH
19613: LD_EXP 15
19617: PUSH
19618: FOR_IN
19619: IFFALSE 19638
// PlaceUnitArea ( i , Ar_utoky , false ) ;
19621: LD_VAR 0 2
19625: PPUSH
19626: LD_INT 25
19628: PPUSH
19629: LD_INT 0
19631: PPUSH
19632: CALL_OW 49
19636: GO 19618
19638: POP
19639: POP
// pom = FilterAllUnits ( [ [ f_side , You ] ] ) ;
19640: LD_ADDR_VAR 0 1
19644: PUSH
19645: LD_INT 22
19647: PUSH
19648: LD_EXP 1
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: EMPTY
19658: LIST
19659: PPUSH
19660: CALL_OW 69
19664: ST_TO_ADDR
// if pom > 0 then
19665: LD_VAR 0 1
19669: PUSH
19670: LD_INT 0
19672: GREATER
19673: IFFALSE 19714
// souradnice = [ GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ] else
19675: LD_ADDR_VAR 0 3
19679: PUSH
19680: LD_VAR 0 1
19684: PUSH
19685: LD_INT 1
19687: ARRAY
19688: PPUSH
19689: CALL_OW 250
19693: PUSH
19694: LD_VAR 0 1
19698: PUSH
19699: LD_INT 1
19701: ARRAY
19702: PPUSH
19703: CALL_OW 251
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: ST_TO_ADDR
19712: GO 19729
// souradnice = [ 102 , 125 ] ;
19714: LD_ADDR_VAR 0 3
19718: PUSH
19719: LD_INT 102
19721: PUSH
19722: LD_INT 125
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19729: LD_INT 35
19731: PPUSH
19732: CALL_OW 67
// mcm1 = McMove ( 1 , Ar_utok3_LIST , [ [ 128 , 91 ] , [ 128 , 108 ] , [ 126 , 121 ] , [ 120 , 131 ] , souradnice ] , [ mc_move_wait , mc_move_agressive ] ) ;
19736: LD_ADDR_LOC 37
19740: PUSH
19741: LD_INT 1
19743: PPUSH
19744: LD_EXP 15
19748: PPUSH
19749: LD_INT 128
19751: PUSH
19752: LD_INT 91
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 128
19761: PUSH
19762: LD_INT 108
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 126
19771: PUSH
19772: LD_INT 121
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 120
19781: PUSH
19782: LD_INT 131
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_VAR 0 3
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: PPUSH
19801: LD_INT 1
19803: PUSH
19804: LD_INT 6
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PPUSH
19811: CALL_OW 398
19815: ST_TO_ADDR
// end ;
19816: PPOPN 3
19818: END
// every 0 0$5 trigger ( not IsOK ( A2_bu1 ) ) and ( not IsOK ( A2_bu2 ) ) do var pom , i ; var souradnice ;
19819: LD_INT 112
19821: PPUSH
19822: CALL_OW 302
19826: NOT
19827: PUSH
19828: LD_INT 63
19830: PPUSH
19831: CALL_OW 302
19835: NOT
19836: AND
19837: IFFALSE 20071
19839: GO 19841
19841: DISABLE
19842: LD_INT 0
19844: PPUSH
19845: PPUSH
19846: PPUSH
// begin for i in Ar_utok2_LIST do
19847: LD_ADDR_VAR 0 2
19851: PUSH
19852: LD_EXP 14
19856: PUSH
19857: FOR_IN
19858: IFFALSE 19877
// PlaceUnitArea ( i , Ar_utoky , false ) ;
19860: LD_VAR 0 2
19864: PPUSH
19865: LD_INT 25
19867: PPUSH
19868: LD_INT 0
19870: PPUSH
19871: CALL_OW 49
19875: GO 19857
19877: POP
19878: POP
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_type , unit_human ] ] ) ;
19879: LD_ADDR_VAR 0 1
19883: PUSH
19884: LD_INT 22
19886: PUSH
19887: LD_EXP 1
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 21
19898: PUSH
19899: LD_INT 1
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PPUSH
19910: CALL_OW 69
19914: ST_TO_ADDR
// if pom > 0 then
19915: LD_VAR 0 1
19919: PUSH
19920: LD_INT 0
19922: GREATER
19923: IFFALSE 19964
// souradnice = [ GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ] else
19925: LD_ADDR_VAR 0 3
19929: PUSH
19930: LD_VAR 0 1
19934: PUSH
19935: LD_INT 1
19937: ARRAY
19938: PPUSH
19939: CALL_OW 250
19943: PUSH
19944: LD_VAR 0 1
19948: PUSH
19949: LD_INT 1
19951: ARRAY
19952: PPUSH
19953: CALL_OW 251
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: ST_TO_ADDR
19962: GO 19979
// souradnice = [ 39 , 16 ] ;
19964: LD_ADDR_VAR 0 3
19968: PUSH
19969: LD_INT 39
19971: PUSH
19972: LD_INT 16
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: ST_TO_ADDR
// mcm2 = McMove ( 1 , Ar_utok2_LIST , [ [ 128 , 91 ] , [ 128 , 108 ] , [ 126 , 121 ] , [ 120 , 131 ] , souradnice ] , [ mc_move_wait , mc_move_agressive , mc_move_dontcapture ] ) ;
19979: LD_ADDR_LOC 38
19983: PUSH
19984: LD_INT 1
19986: PPUSH
19987: LD_EXP 14
19991: PPUSH
19992: LD_INT 128
19994: PUSH
19995: LD_INT 91
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 128
20004: PUSH
20005: LD_INT 108
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 126
20014: PUSH
20015: LD_INT 121
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 120
20024: PUSH
20025: LD_INT 131
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_VAR 0 3
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: PPUSH
20044: LD_INT 1
20046: PUSH
20047: LD_INT 6
20049: PUSH
20050: LD_INT 5
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: LIST
20057: PPUSH
20058: CALL_OW 398
20062: ST_TO_ADDR
// utok3_over = true ;
20063: LD_ADDR_LOC 29
20067: PUSH
20068: LD_INT 1
20070: ST_TO_ADDR
// end ;
20071: PPOPN 3
20073: END
// every 1 1$30 trigger A2_dobyta do var pom , i , pom1 ;
20074: LD_EXP 29
20078: IFFALSE 20343
20080: GO 20082
20082: DISABLE
20083: LD_INT 0
20085: PPUSH
20086: PPUSH
20087: PPUSH
// begin wait ( 2 2$0 ) ;
20088: LD_INT 4200
20090: PPUSH
20091: CALL_OW 67
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20095: LD_ADDR_VAR 0 1
20099: PUSH
20100: LD_INT 22
20102: PUSH
20103: LD_EXP 1
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 2
20114: PUSH
20115: LD_INT 34
20117: PUSH
20118: LD_INT 12
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 34
20127: PUSH
20128: LD_INT 32
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: LIST
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PPUSH
20144: CALL_OW 69
20148: ST_TO_ADDR
// for i in Ar_utok4_LIST do
20149: LD_ADDR_VAR 0 2
20153: PUSH
20154: LD_EXP 16
20158: PUSH
20159: FOR_IN
20160: IFFALSE 20179
// PlaceUnitArea ( i , Ar_utoky , false ) ;
20162: LD_VAR 0 2
20166: PPUSH
20167: LD_INT 25
20169: PPUSH
20170: LD_INT 0
20172: PPUSH
20173: CALL_OW 49
20177: GO 20159
20179: POP
20180: POP
// if pom > 0 then
20181: LD_VAR 0 1
20185: PUSH
20186: LD_INT 0
20188: GREATER
20189: IFFALSE 20263
// begin ComAgressiveMove ( Ar_utok4_LIST , GetX ( pom [ 1 ] ) , GetY ( pom [ 1 ] ) ) ;
20191: LD_EXP 16
20195: PPUSH
20196: LD_VAR 0 1
20200: PUSH
20201: LD_INT 1
20203: ARRAY
20204: PPUSH
20205: CALL_OW 250
20209: PPUSH
20210: LD_VAR 0 1
20214: PUSH
20215: LD_INT 1
20217: ARRAY
20218: PPUSH
20219: CALL_OW 251
20223: PPUSH
20224: CALL_OW 114
// AddComAttackUnit ( Ar_utok4_LIST , pom [ 1 ] ) ;
20228: LD_EXP 16
20232: PPUSH
20233: LD_VAR 0 1
20237: PUSH
20238: LD_INT 1
20240: ARRAY
20241: PPUSH
20242: CALL_OW 175
// AddComAgressiveMove ( Ar_utok4_LIST , 59 , 7 ) ;
20246: LD_EXP 16
20250: PPUSH
20251: LD_INT 59
20253: PPUSH
20254: LD_INT 7
20256: PPUSH
20257: CALL_OW 174
// end else
20261: GO 20335
// McMove ( 1 , Ar_utok2_LIST , [ [ 128 , 91 ] , [ 128 , 108 ] , [ 126 , 121 ] , [ 120 , 123 ] ] , [ mc_move_wait , mc_move_agressive , mc_move_dontcapture ] ) ;
20263: LD_INT 1
20265: PPUSH
20266: LD_EXP 14
20270: PPUSH
20271: LD_INT 128
20273: PUSH
20274: LD_INT 91
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: LD_INT 128
20283: PUSH
20284: LD_INT 108
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: LD_INT 126
20293: PUSH
20294: LD_INT 121
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 120
20303: PUSH
20304: LD_INT 123
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: PPUSH
20317: LD_INT 1
20319: PUSH
20320: LD_INT 6
20322: PUSH
20323: LD_INT 5
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: LIST
20330: PPUSH
20331: CALL_OW 398
// utok4_over = true ;
20335: LD_ADDR_LOC 30
20339: PUSH
20340: LD_INT 1
20342: ST_TO_ADDR
// end ;
20343: PPOPN 3
20345: END
// every 0 0$1 trigger FilterUnitsInArea ( zoufalost1 , [ [ f_side , Arabi ] ] ) = 0 do var i ;
20346: LD_INT 35
20348: PPUSH
20349: LD_INT 22
20351: PUSH
20352: LD_EXP 3
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: EMPTY
20362: LIST
20363: PPUSH
20364: CALL_OW 70
20368: PUSH
20369: LD_INT 0
20371: EQUAL
20372: IFFALSE 20465
20374: GO 20376
20376: DISABLE
20377: LD_INT 0
20379: PPUSH
// begin for i in Ar_backa_LIST do
20380: LD_ADDR_VAR 0 1
20384: PUSH
20385: LD_EXP 18
20389: PUSH
20390: FOR_IN
20391: IFFALSE 20410
// PlaceUnitArea ( i , backa1 , false ) ;
20393: LD_VAR 0 1
20397: PPUSH
20398: LD_INT 36
20400: PPUSH
20401: LD_INT 0
20403: PPUSH
20404: CALL_OW 49
20408: GO 20390
20410: POP
20411: POP
// McMove ( 1 , Ar_backa_LIST , [ [ 59 , 7 ] , [ 76 , 11 ] , [ 95 , 19 ] ] , [ mc_move_agressive ] ) ;
20412: LD_INT 1
20414: PPUSH
20415: LD_EXP 18
20419: PPUSH
20420: LD_INT 59
20422: PUSH
20423: LD_INT 7
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: LD_INT 76
20432: PUSH
20433: LD_INT 11
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 95
20442: PUSH
20443: LD_INT 19
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: LIST
20454: PPUSH
20455: LD_INT 6
20457: PUSH
20458: EMPTY
20459: LIST
20460: PPUSH
20461: CALL_OW 398
// end ;
20465: PPOPN 1
20467: END
// every 1 1$0 trigger utok4_over do var pom , i , pom1 ;
20468: LD_LOC 30
20472: IFFALSE 20695
20474: GO 20476
20476: DISABLE
20477: LD_INT 0
20479: PPUSH
20480: PPUSH
20481: PPUSH
// begin wait ( last_attack_wait [ difficulty ] ) ;
20482: LD_EXP 55
20486: PUSH
20487: LD_OWVAR 67
20491: ARRAY
20492: PPUSH
20493: CALL_OW 67
// wait ( 2 2$0 ) ;
20497: LD_INT 4200
20499: PPUSH
20500: CALL_OW 67
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20504: LD_ADDR_VAR 0 1
20508: PUSH
20509: LD_INT 22
20511: PUSH
20512: LD_EXP 1
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PUSH
20521: LD_INT 2
20523: PUSH
20524: LD_INT 34
20526: PUSH
20527: LD_INT 12
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PUSH
20534: LD_INT 34
20536: PUSH
20537: LD_INT 32
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: LIST
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PPUSH
20553: CALL_OW 69
20557: ST_TO_ADDR
// for i in Ar_utoklast_LIST do
20558: LD_ADDR_VAR 0 2
20562: PUSH
20563: LD_EXP 17
20567: PUSH
20568: FOR_IN
20569: IFFALSE 20588
// PlaceUnitArea ( i , Ar_utoky , false ) ;
20571: LD_VAR 0 2
20575: PPUSH
20576: LD_INT 25
20578: PPUSH
20579: LD_INT 0
20581: PPUSH
20582: CALL_OW 49
20586: GO 20568
20588: POP
20589: POP
// for i in pom do
20590: LD_ADDR_VAR 0 2
20594: PUSH
20595: LD_VAR 0 1
20599: PUSH
20600: FOR_IN
20601: IFFALSE 20648
// begin AddComAgressiveMove ( Ar_utoklast_LIST , GetX ( i ) , GetY ( i ) ) ;
20603: LD_EXP 17
20607: PPUSH
20608: LD_VAR 0 2
20612: PPUSH
20613: CALL_OW 250
20617: PPUSH
20618: LD_VAR 0 2
20622: PPUSH
20623: CALL_OW 251
20627: PPUSH
20628: CALL_OW 174
// AddComAttackUnit ( Ar_utoklast_LIST , i ) ;
20632: LD_EXP 17
20636: PPUSH
20637: LD_VAR 0 2
20641: PPUSH
20642: CALL_OW 175
// end ;
20646: GO 20600
20648: POP
20649: POP
// AddComAgressiveMove ( Ar_utoklast_LIST , 18 , 17 ) ;
20650: LD_EXP 17
20654: PPUSH
20655: LD_INT 18
20657: PPUSH
20658: LD_INT 17
20660: PPUSH
20661: CALL_OW 174
// AddComAgressiveMove ( Ar_utoklast_LIST , 72 , 10 ) ;
20665: LD_EXP 17
20669: PPUSH
20670: LD_INT 72
20672: PPUSH
20673: LD_INT 10
20675: PPUSH
20676: CALL_OW 174
// AddComAgressiveMove ( Ar_utoklast_LIST , 116 , 126 ) ;
20680: LD_EXP 17
20684: PPUSH
20685: LD_INT 116
20687: PPUSH
20688: LD_INT 126
20690: PPUSH
20691: CALL_OW 174
// end ;
20695: PPOPN 3
20697: END
// every 1 1$0 trigger A1_dobyta do var pom ;
20698: LD_EXP 28
20702: IFFALSE 21129
20704: GO 20706
20706: DISABLE
20707: LD_INT 0
20709: PPUSH
// begin pom = FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) ;
20710: LD_ADDR_VAR 0 1
20714: PUSH
20715: LD_INT 3
20717: PPUSH
20718: LD_INT 22
20720: PUSH
20721: LD_EXP 1
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: EMPTY
20731: LIST
20732: PPUSH
20733: CALL_OW 70
20737: ST_TO_ADDR
// wait ( protiutok1 [ difficulty ] ) ;
20738: LD_EXP 48
20742: PUSH
20743: LD_OWVAR 67
20747: ARRAY
20748: PPUSH
20749: CALL_OW 67
// ComMoveXY ( [ A2_kam1 , A2_kam2 , A2_kam3 ] , 66 , 110 ) ;
20753: LD_INT 86
20755: PUSH
20756: LD_INT 85
20758: PUSH
20759: LD_INT 84
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: LIST
20766: PPUSH
20767: LD_INT 66
20769: PPUSH
20770: LD_INT 110
20772: PPUSH
20773: CALL_OW 111
// AddComAttackUnit ( A2_kam1 , NearestUnitToXY ( pom , 102 , 112 ) ) ;
20777: LD_INT 86
20779: PPUSH
20780: LD_VAR 0 1
20784: PPUSH
20785: LD_INT 102
20787: PPUSH
20788: LD_INT 112
20790: PPUSH
20791: CALL_OW 73
20795: PPUSH
20796: CALL_OW 175
// AddComAttackUnit ( A2_kam1 , pom [ Rand ( 1 , pom + 0 ) ] ) ;
20800: LD_INT 86
20802: PPUSH
20803: LD_VAR 0 1
20807: PUSH
20808: LD_INT 1
20810: PPUSH
20811: LD_VAR 0 1
20815: PUSH
20816: LD_INT 0
20818: PLUS
20819: PPUSH
20820: CALL_OW 12
20824: ARRAY
20825: PPUSH
20826: CALL_OW 175
// AddComAttackUnit ( A2_kam2 , NearestUnitToXY ( pom , 90 , 121 ) ) ;
20830: LD_INT 85
20832: PPUSH
20833: LD_VAR 0 1
20837: PPUSH
20838: LD_INT 90
20840: PPUSH
20841: LD_INT 121
20843: PPUSH
20844: CALL_OW 73
20848: PPUSH
20849: CALL_OW 175
// AddComAttackUnit ( A2_kam2 , pom [ Rand ( 1 , pom + 0 ) ] ) ;
20853: LD_INT 85
20855: PPUSH
20856: LD_VAR 0 1
20860: PUSH
20861: LD_INT 1
20863: PPUSH
20864: LD_VAR 0 1
20868: PUSH
20869: LD_INT 0
20871: PLUS
20872: PPUSH
20873: CALL_OW 12
20877: ARRAY
20878: PPUSH
20879: CALL_OW 175
// AddComAttackUnit ( A2_kam3 , A1_dep ) ;
20883: LD_INT 84
20885: PPUSH
20886: LD_INT 4
20888: PPUSH
20889: CALL_OW 175
// AddComAttackUnit ( A2_kam3 , pom [ Rand ( 1 , pom + 0 ) ] ) ;
20893: LD_INT 84
20895: PPUSH
20896: LD_VAR 0 1
20900: PUSH
20901: LD_INT 1
20903: PPUSH
20904: LD_VAR 0 1
20908: PUSH
20909: LD_INT 0
20911: PLUS
20912: PPUSH
20913: CALL_OW 12
20917: ARRAY
20918: PPUSH
20919: CALL_OW 175
// McMove ( 1 , [ A2_op1 , A2_op2 , A2_op3 ] , [ [ 44 , 25 ] , [ 50 , 54 ] , [ 92 , 101 ] , [ 112 , 124 ] ] , [ mc_move_agressive , mc_move_dontcapture ] ) ;
20923: LD_INT 1
20925: PPUSH
20926: LD_INT 89
20928: PUSH
20929: LD_INT 90
20931: PUSH
20932: LD_INT 91
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: LIST
20939: PPUSH
20940: LD_INT 44
20942: PUSH
20943: LD_INT 25
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 50
20952: PUSH
20953: LD_INT 54
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 92
20962: PUSH
20963: LD_INT 101
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 112
20972: PUSH
20973: LD_INT 124
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: PPUSH
20986: LD_INT 6
20988: PUSH
20989: LD_INT 5
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PPUSH
20996: CALL_OW 398
// ComMoveXY ( A2_mor3 , 91 , 128 ) ;
21000: LD_INT 92
21002: PPUSH
21003: LD_INT 91
21005: PPUSH
21006: LD_INT 128
21008: PPUSH
21009: CALL_OW 111
// for i in CREATE_AR_PROTIOFENZIVU_LIST do
21013: LD_ADDR_LOC 33
21017: PUSH
21018: LD_EXP 10
21022: PUSH
21023: FOR_IN
21024: IFFALSE 21043
// PlaceUnitArea ( i , protiEN , false ) ;
21026: LD_LOC 33
21030: PPUSH
21031: LD_INT 21
21033: PPUSH
21034: LD_INT 0
21036: PPUSH
21037: CALL_OW 49
21041: GO 21023
21043: POP
21044: POP
// McMove ( 1 , CREATE_AR_PROTIOFENZIVU_LIST , [ [ 49 , 31 ] , [ 55 , 76 ] , [ 100 , 109 ] , [ 122 , 132 ] ] , [ mc_move_agressive , mc_move_dontcapture ] ) ;
21045: LD_INT 1
21047: PPUSH
21048: LD_EXP 10
21052: PPUSH
21053: LD_INT 49
21055: PUSH
21056: LD_INT 31
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 55
21065: PUSH
21066: LD_INT 76
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 100
21075: PUSH
21076: LD_INT 109
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 122
21085: PUSH
21086: LD_INT 132
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: PPUSH
21099: LD_INT 6
21101: PUSH
21102: LD_INT 5
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PPUSH
21109: CALL_OW 398
// utok1 := true ;
21113: LD_ADDR_LOC 27
21117: PUSH
21118: LD_INT 1
21120: ST_TO_ADDR
// utok1_over = true ;
21121: LD_ADDR_LOC 28
21125: PUSH
21126: LD_INT 1
21128: ST_TO_ADDR
// end ;
21129: PPOPN 1
21131: END
// every 0 0$17 trigger oposoldier = - 1 do
21132: LD_EXP 46
21136: PUSH
21137: LD_INT 1
21139: NEG
21140: EQUAL
21141: IFFALSE 21218
21143: GO 21145
21145: DISABLE
// begin if not See ( You , A3_solop ) then
21146: LD_EXP 1
21150: PPUSH
21151: LD_INT 102
21153: PPUSH
21154: CALL_OW 292
21158: NOT
21159: IFFALSE 21218
// begin SetClass ( A3_solop , class_mechanic ) ;
21161: LD_INT 102
21163: PPUSH
21164: LD_INT 3
21166: PPUSH
21167: CALL_OW 336
// RemoveUnit ( A3_solop ) ;
21171: LD_INT 102
21173: PPUSH
21174: CALL_OW 64
// pom := create_auto_pro_solopa ;
21178: LD_ADDR_LOC 34
21182: PUSH
21183: CALL 8636 0 0
21187: ST_TO_ADDR
// PlaceHumanInUnit ( A3_solop , pom ) ;
21188: LD_INT 102
21190: PPUSH
21191: LD_LOC 34
21195: PPUSH
21196: CALL_OW 52
// PlaceUnitXY ( pom , 111 , 16 , false ) ;
21200: LD_LOC 34
21204: PPUSH
21205: LD_INT 111
21207: PPUSH
21208: LD_INT 16
21210: PPUSH
21211: LD_INT 0
21213: PPUSH
21214: CALL_OW 48
// end ; end ;
21218: END
// every 1 1$0 trigger oposoldier = 1 marked 999 do
21219: LD_EXP 46
21223: PUSH
21224: LD_INT 1
21226: EQUAL
21227: IFFALSE 21261
21229: GO 21231
21231: DISABLE
// begin ComMoveXY ( A3_solop , 127 , 89 ) ;
21232: LD_INT 102
21234: PPUSH
21235: LD_INT 127
21237: PPUSH
21238: LD_INT 89
21240: PPUSH
21241: CALL_OW 111
// ComMoveXY ( OpoMike , 127 , 89 ) ;
21245: LD_INT 103
21247: PPUSH
21248: LD_INT 127
21250: PPUSH
21251: LD_INT 89
21253: PPUSH
21254: CALL_OW 111
// enable ( 997 ) ;
21258: LD_INT 997
21260: ENABLE_MARKED
// end ;
21261: END
// every 0 0$1 trigger IsInArea ( A3_solop , Baziny ) marked 997 do
21262: LD_INT 102
21264: PPUSH
21265: LD_INT 12
21267: PPUSH
21268: CALL_OW 308
21272: IFFALSE 21287
21274: GO 21276
21276: DISABLE
// begin wait ( 0 0$5 ) ;
21277: LD_INT 175
21279: PPUSH
21280: CALL_OW 67
// enable ( 998 ) ;
21284: LD_INT 998
21286: ENABLE_MARKED
// end ;
21287: END
// every 0 0$5 trigger oposoldier = 1 marked 998 do
21288: LD_EXP 46
21292: PUSH
21293: LD_INT 1
21295: EQUAL
21296: IFFALSE 21514
21298: GO 21300
21300: DISABLE
// begin pom = FilterUnitsInArea ( Baziny , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) ;
21301: LD_ADDR_LOC 34
21305: PUSH
21306: LD_INT 12
21308: PPUSH
21309: LD_INT 21
21311: PUSH
21312: LD_INT 2
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 33
21321: PUSH
21322: LD_INT 1
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: LD_INT 2
21331: PUSH
21332: LD_INT 34
21334: PUSH
21335: LD_INT 12
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 34
21344: PUSH
21345: LD_INT 32
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 3
21359: PUSH
21360: LD_INT 59
21362: PUSH
21363: EMPTY
21364: LIST
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: PPUSH
21376: CALL_OW 70
21380: ST_TO_ADDR
// if pom > 0 then
21381: LD_LOC 34
21385: PUSH
21386: LD_INT 0
21388: GREATER
21389: IFFALSE 21491
// begin ComEnterUnit ( A3_solop , pom [ 1 ] ) ;
21391: LD_INT 102
21393: PPUSH
21394: LD_LOC 34
21398: PUSH
21399: LD_INT 1
21401: ARRAY
21402: PPUSH
21403: CALL_OW 120
// AddComMoveXY ( A3_solop , 165 , 92 ) ;
21407: LD_INT 102
21409: PPUSH
21410: LD_INT 165
21412: PPUSH
21413: LD_INT 92
21415: PPUSH
21416: CALL_OW 171
// AddComMoveXY ( OpoMike , 165 , 92 ) ;
21420: LD_INT 103
21422: PPUSH
21423: LD_INT 165
21425: PPUSH
21426: LD_INT 92
21428: PPUSH
21429: CALL_OW 171
// oposoldier = 2 ;
21433: LD_ADDR_EXP 46
21437: PUSH
21438: LD_INT 2
21440: ST_TO_ADDR
// wait ( 0 0$15 ) ;
21441: LD_INT 525
21443: PPUSH
21444: CALL_OW 67
// if not IsInUnit ( A3_solop ) then
21448: LD_INT 102
21450: PPUSH
21451: CALL_OW 310
21455: NOT
21456: IFFALSE 21489
// begin ComMoveXY ( [ A3_solop , OpoMike ] , 116 , 23 ) ;
21458: LD_INT 102
21460: PUSH
21461: LD_INT 103
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PPUSH
21468: LD_INT 116
21470: PPUSH
21471: LD_INT 23
21473: PPUSH
21474: CALL_OW 111
// enable ( 996 ) ;
21478: LD_INT 996
21480: ENABLE_MARKED
// oposoldier = 1 ;
21481: LD_ADDR_EXP 46
21485: PUSH
21486: LD_INT 1
21488: ST_TO_ADDR
// end ; end else
21489: GO 21514
// begin AddComMoveXY ( [ A3_solop , OpoMike ] , 116 , 23 ) ;
21491: LD_INT 102
21493: PUSH
21494: LD_INT 103
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PPUSH
21501: LD_INT 116
21503: PPUSH
21504: LD_INT 23
21506: PPUSH
21507: CALL_OW 171
// enable ( 996 ) ;
21511: LD_INT 996
21513: ENABLE_MARKED
// end ; end ;
21514: END
// every 0 0$1 trigger IsInArea ( A3_solop , Baze_zpet ) marked 996 do
21515: LD_INT 102
21517: PPUSH
21518: LD_INT 34
21520: PPUSH
21521: CALL_OW 308
21525: IFFALSE 21533
21527: GO 21529
21529: DISABLE
// begin enable ( 999 ) ;
21530: LD_INT 999
21532: ENABLE_MARKED
// end ;
21533: END
// every 0 0$3 trigger oposoldier = 2 do
21534: LD_EXP 46
21538: PUSH
21539: LD_INT 2
21541: EQUAL
21542: IFFALSE 21673
21544: GO 21546
21546: DISABLE
// begin pom = FilterUnitsInArea ( SolopEx , [ [ f_side , Arabi2 ] ] ) ;
21547: LD_ADDR_LOC 34
21551: PUSH
21552: LD_INT 13
21554: PPUSH
21555: LD_INT 22
21557: PUSH
21558: LD_EXP 4
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: EMPTY
21568: LIST
21569: PPUSH
21570: CALL_OW 70
21574: ST_TO_ADDR
// if pom > 0 then
21575: LD_LOC 34
21579: PUSH
21580: LD_INT 0
21582: GREATER
21583: IFFALSE 21672
// for i in pom do
21585: LD_ADDR_LOC 33
21589: PUSH
21590: LD_LOC 34
21594: PUSH
21595: FOR_IN
21596: IFFALSE 21670
// begin if GetType ( i ) = unit_vehicle then
21598: LD_LOC 33
21602: PPUSH
21603: CALL_OW 247
21607: PUSH
21608: LD_INT 2
21610: EQUAL
21611: IFFALSE 21659
// if IsDrivenBy ( i ) = A3_solop then
21613: LD_LOC 33
21617: PPUSH
21618: CALL_OW 311
21622: PUSH
21623: LD_INT 102
21625: EQUAL
21626: IFFALSE 21659
// begin oposoldier = 3 ;
21628: LD_ADDR_EXP 46
21632: PUSH
21633: LD_INT 3
21635: ST_TO_ADDR
// dialog_kamery ;
21636: CALL 5666 0 0
// RemoveUnit ( IsInUnit ( A3_solop ) ) ;
21640: LD_INT 102
21642: PPUSH
21643: CALL_OW 310
21647: PPUSH
21648: CALL_OW 64
// RemoveUnit ( OpoMike ) ;
21652: LD_INT 103
21654: PPUSH
21655: CALL_OW 64
// end ; RemoveUnit ( i ) ;
21659: LD_LOC 33
21663: PPUSH
21664: CALL_OW 64
// end ;
21668: GO 21595
21670: POP
21671: POP
// enable ;
21672: ENABLE
// end ;
21673: END
// every 0 0$1 do
21674: GO 21676
21676: DISABLE
// begin pom = FilterUnitsInArea ( Calibre1 , [ [ f_side , You ] ] ) ;
21677: LD_ADDR_LOC 34
21681: PUSH
21682: LD_INT 14
21684: PPUSH
21685: LD_INT 22
21687: PUSH
21688: LD_EXP 1
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: EMPTY
21698: LIST
21699: PPUSH
21700: CALL_OW 70
21704: ST_TO_ADDR
// if pom > 0 then
21705: LD_LOC 34
21709: PUSH
21710: LD_INT 0
21712: GREATER
21713: IFFALSE 21905
// begin while FilterUnitsInArea ( Boom1 , [ [ f_side , You ] ] ) = 0 do
21715: LD_INT 15
21717: PPUSH
21718: LD_INT 22
21720: PUSH
21721: LD_EXP 1
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: EMPTY
21731: LIST
21732: PPUSH
21733: CALL_OW 70
21737: PUSH
21738: LD_INT 0
21740: EQUAL
21741: IFFALSE 21752
// wait ( 0 0$0.5 ) ;
21743: LD_INT 18
21745: PPUSH
21746: CALL_OW 67
21750: GO 21715
// ComFireExplosives ( [ A2_zas1 , A2_zas2 ] ) ;
21752: LD_INT 82
21754: PUSH
21755: LD_INT 83
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PPUSH
21762: CALL_OW 134
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 33 , 55 ) ;
21766: LD_INT 82
21768: PUSH
21769: LD_INT 83
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PPUSH
21776: LD_INT 33
21778: PPUSH
21779: LD_INT 55
21781: PPUSH
21782: CALL_OW 171
// AddComWalk ( [ A2_zas1 , A2_zas2 ] ) ;
21786: LD_INT 82
21788: PUSH
21789: LD_INT 83
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PPUSH
21796: CALL_OW 198
// AddComPlaceRemoteCharge ( A2_zas1 , 39 , 15 , 0 ) ;
21800: LD_INT 82
21802: PPUSH
21803: LD_INT 39
21805: PPUSH
21806: LD_INT 15
21808: PPUSH
21809: LD_INT 0
21811: PPUSH
21812: CALL_OW 193
// AddComPlaceRemoteCharge ( A2_zas2 , 37 , 14 , 0 ) ;
21816: LD_INT 83
21818: PPUSH
21819: LD_INT 37
21821: PPUSH
21822: LD_INT 14
21824: PPUSH
21825: LD_INT 0
21827: PPUSH
21828: CALL_OW 193
// AddComMoveXY ( [ A2_zas1 , A2_zas2 ] , 25 , 13 ) ;
21832: LD_INT 82
21834: PUSH
21835: LD_INT 83
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PPUSH
21842: LD_INT 25
21844: PPUSH
21845: LD_INT 13
21847: PPUSH
21848: CALL_OW 171
// while FilterUnitsInArea ( Boom1 , [ [ f_side , You ] ] ) = 0 do
21852: LD_INT 15
21854: PPUSH
21855: LD_INT 22
21857: PUSH
21858: LD_EXP 1
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: EMPTY
21868: LIST
21869: PPUSH
21870: CALL_OW 70
21874: PUSH
21875: LD_INT 0
21877: EQUAL
21878: IFFALSE 21889
// wait ( 0 0$0.5 ) ;
21880: LD_INT 18
21882: PPUSH
21883: CALL_OW 67
21887: GO 21852
// ComFireExplosives ( [ A2_zas1 , A2_zas2 ] ) ;
21889: LD_INT 82
21891: PUSH
21892: LD_INT 83
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PPUSH
21899: CALL_OW 134
// end else
21903: GO 21906
// enable ;
21905: ENABLE
// end ;
21906: END
// every 0 0$1 do
21907: GO 21909
21909: DISABLE
// begin pom = FilterUnitsInArea ( Calibre2 , [ [ f_side , You ] ] ) ;
21910: LD_ADDR_LOC 34
21914: PUSH
21915: LD_INT 18
21917: PPUSH
21918: LD_INT 22
21920: PUSH
21921: LD_EXP 1
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PUSH
21930: EMPTY
21931: LIST
21932: PPUSH
21933: CALL_OW 70
21937: ST_TO_ADDR
// if pom > 0 then
21938: LD_LOC 34
21942: PUSH
21943: LD_INT 0
21945: GREATER
21946: IFFALSE 22111
// begin while FilterUnitsInArea ( Boom3 , [ [ f_side , You ] ] ) = 0 do
21948: LD_INT 19
21950: PPUSH
21951: LD_INT 22
21953: PUSH
21954: LD_EXP 1
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: EMPTY
21964: LIST
21965: PPUSH
21966: CALL_OW 70
21970: PUSH
21971: LD_INT 0
21973: EQUAL
21974: IFFALSE 21985
// wait ( 0 0$0.5 ) ;
21976: LD_INT 18
21978: PPUSH
21979: CALL_OW 67
21983: GO 21948
// ComFireExplosives ( A3_zas1 ) ;
21985: LD_INT 101
21987: PPUSH
21988: CALL_OW 134
// bum2 := true ;
21992: LD_ADDR_EXP 47
21996: PUSH
21997: LD_INT 1
21999: ST_TO_ADDR
// AddComWalk ( A3_zas1 ) ;
22000: LD_INT 101
22002: PPUSH
22003: CALL_OW 198
// pom = FilterUnitsInArea ( Abase3 , [ [ f_side , You ] ] ) ;
22007: LD_ADDR_LOC 34
22011: PUSH
22012: LD_INT 17
22014: PPUSH
22015: LD_INT 22
22017: PUSH
22018: LD_EXP 1
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: EMPTY
22028: LIST
22029: PPUSH
22030: CALL_OW 70
22034: ST_TO_ADDR
// if pom > 0 then
22035: LD_LOC 34
22039: PUSH
22040: LD_INT 0
22042: GREATER
22043: IFFALSE 22079
// begin AddComPlaceDelayedCharge ( A3_zas1 , 0 , 0 , pom [ 1 ] ) ;
22045: LD_INT 101
22047: PPUSH
22048: LD_INT 0
22050: PPUSH
22051: LD_INT 0
22053: PPUSH
22054: LD_LOC 34
22058: PUSH
22059: LD_INT 1
22061: ARRAY
22062: PPUSH
22063: CALL_OW 192
// AddComEnterUnit ( A3_zas1 , A3_bar ) ;
22067: LD_INT 101
22069: PPUSH
22070: LD_INT 40
22072: PPUSH
22073: CALL_OW 180
// end else
22077: GO 22109
// begin AddComPlaceRemoteCharge ( A3_zas1 , 102 , 19 , 0 ) ;
22079: LD_INT 101
22081: PPUSH
22082: LD_INT 102
22084: PPUSH
22085: LD_INT 19
22087: PPUSH
22088: LD_INT 0
22090: PPUSH
22091: CALL_OW 193
// AddComMoveXY ( A3_zas1 , 99 , 3 ) ;
22095: LD_INT 101
22097: PPUSH
22098: LD_INT 99
22100: PPUSH
22101: LD_INT 3
22103: PPUSH
22104: CALL_OW 171
// enable ;
22108: ENABLE
// end ; end else
22109: GO 22112
// enable ;
22111: ENABLE
// end ;
22112: END
// every 0 0$2 do
22113: GO 22115
22115: DISABLE
// begin pom = [ ] ;
22116: LD_ADDR_LOC 34
22120: PUSH
22121: EMPTY
22122: ST_TO_ADDR
// pom1 = [ ] ;
22123: LD_ADDR_LOC 35
22127: PUSH
22128: EMPTY
22129: ST_TO_ADDR
// for i in Veze_2 do
22130: LD_ADDR_LOC 33
22134: PUSH
22135: LD_LOC 31
22139: PUSH
22140: FOR_IN
22141: IFFALSE 22176
// if GetLives ( i ) <> 1000 then
22143: LD_LOC 33
22147: PPUSH
22148: CALL_OW 256
22152: PUSH
22153: LD_INT 1000
22155: NONEQUAL
22156: IFFALSE 22174
// pom = pom ^ i ;
22158: LD_ADDR_LOC 34
22162: PUSH
22163: LD_LOC 34
22167: PUSH
22168: LD_LOC 33
22172: ADD
22173: ST_TO_ADDR
22174: GO 22140
22176: POP
22177: POP
// for i in Opr_2 do
22178: LD_ADDR_LOC 33
22182: PUSH
22183: LD_LOC 32
22187: PUSH
22188: FOR_IN
22189: IFFALSE 22220
// if IsOK ( i ) then
22191: LD_LOC 33
22195: PPUSH
22196: CALL_OW 302
22200: IFFALSE 22218
// pom1 = pom1 ^ i ;
22202: LD_ADDR_LOC 35
22206: PUSH
22207: LD_LOC 35
22211: PUSH
22212: LD_LOC 33
22216: ADD
22217: ST_TO_ADDR
22218: GO 22188
22220: POP
22221: POP
// if pom1 > 0 and pom > 0 then
22222: LD_LOC 35
22226: PUSH
22227: LD_INT 0
22229: GREATER
22230: PUSH
22231: LD_LOC 34
22235: PUSH
22236: LD_INT 0
22238: GREATER
22239: AND
22240: IFFALSE 22398
// begin if pom + 0 <= pom1 + 0 then
22242: LD_LOC 34
22246: PUSH
22247: LD_INT 0
22249: PLUS
22250: PUSH
22251: LD_LOC 35
22255: PUSH
22256: LD_INT 0
22258: PLUS
22259: LESSEQUAL
22260: IFFALSE 22331
// for i := 1 to pom + 0 do
22262: LD_ADDR_LOC 33
22266: PUSH
22267: DOUBLE
22268: LD_INT 1
22270: DEC
22271: ST_TO_ADDR
22272: LD_LOC 34
22276: PUSH
22277: LD_INT 0
22279: PLUS
22280: PUSH
22281: FOR_TO
22282: IFFALSE 22327
// begin AddComExitBuilding ( pom1 [ i ] ) ;
22284: LD_LOC 35
22288: PUSH
22289: LD_LOC 33
22293: ARRAY
22294: PPUSH
22295: CALL_OW 182
// AddComRepairBuilding ( pom1 [ i ] , pom [ i ] ) ;
22299: LD_LOC 35
22303: PUSH
22304: LD_LOC 33
22308: ARRAY
22309: PPUSH
22310: LD_LOC 34
22314: PUSH
22315: LD_LOC 33
22319: ARRAY
22320: PPUSH
22321: CALL_OW 190
// end else
22325: GO 22281
22327: POP
22328: POP
22329: GO 22398
// for i := 1 to pom1 + 0 do
22331: LD_ADDR_LOC 33
22335: PUSH
22336: DOUBLE
22337: LD_INT 1
22339: DEC
22340: ST_TO_ADDR
22341: LD_LOC 35
22345: PUSH
22346: LD_INT 0
22348: PLUS
22349: PUSH
22350: FOR_TO
22351: IFFALSE 22396
// begin AddComExitBuilding ( pom1 [ i ] ) ;
22353: LD_LOC 35
22357: PUSH
22358: LD_LOC 33
22362: ARRAY
22363: PPUSH
22364: CALL_OW 182
// AddComRepairBuilding ( pom1 [ i ] , pom [ i ] ) ;
22368: LD_LOC 35
22372: PUSH
22373: LD_LOC 33
22377: ARRAY
22378: PPUSH
22379: LD_LOC 34
22383: PUSH
22384: LD_LOC 33
22388: ARRAY
22389: PPUSH
22390: CALL_OW 190
// end ;
22394: GO 22350
22396: POP
22397: POP
// end ; enable ;
22398: ENABLE
// end ;
22399: END
// every 0 0$1 trigger FilterUnitsInArea ( Create2 , [ [ f_side , You ] ] ) > 0 do
22400: LD_INT 22
22402: PPUSH
22403: LD_INT 22
22405: PUSH
22406: LD_EXP 1
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: EMPTY
22416: LIST
22417: PPUSH
22418: CALL_OW 70
22422: PUSH
22423: LD_INT 0
22425: GREATER
22426: IFFALSE 23023
22428: GO 22430
22430: DISABLE
// begin PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 1 ] , 28 , 39 , false ) ;
22431: LD_EXP 11
22435: PUSH
22436: LD_INT 1
22438: ARRAY
22439: PPUSH
22440: LD_INT 28
22442: PPUSH
22443: LD_INT 39
22445: PPUSH
22446: LD_INT 0
22448: PPUSH
22449: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 2 ] , 23 , 38 , false ) ;
22453: LD_EXP 11
22457: PUSH
22458: LD_INT 2
22460: ARRAY
22461: PPUSH
22462: LD_INT 23
22464: PPUSH
22465: LD_INT 38
22467: PPUSH
22468: LD_INT 0
22470: PPUSH
22471: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 3 ] , 32 , 20 , false ) ;
22475: LD_EXP 11
22479: PUSH
22480: LD_INT 3
22482: ARRAY
22483: PPUSH
22484: LD_INT 32
22486: PPUSH
22487: LD_INT 20
22489: PPUSH
22490: LD_INT 0
22492: PPUSH
22493: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 4 ] , 32 , 17 , false ) ;
22497: LD_EXP 11
22501: PUSH
22502: LD_INT 4
22504: ARRAY
22505: PPUSH
22506: LD_INT 32
22508: PPUSH
22509: LD_INT 17
22511: PPUSH
22512: LD_INT 0
22514: PPUSH
22515: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 5 ] , 38 , 8 , false ) ;
22519: LD_EXP 11
22523: PUSH
22524: LD_INT 5
22526: ARRAY
22527: PPUSH
22528: LD_INT 38
22530: PPUSH
22531: LD_INT 8
22533: PPUSH
22534: LD_INT 0
22536: PPUSH
22537: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 6 ] , 40 , 7 , false ) ;
22541: LD_EXP 11
22545: PUSH
22546: LD_INT 6
22548: ARRAY
22549: PPUSH
22550: LD_INT 40
22552: PPUSH
22553: LD_INT 7
22555: PPUSH
22556: LD_INT 0
22558: PPUSH
22559: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 7 ] , 24 , 8 , false ) ;
22563: LD_EXP 11
22567: PUSH
22568: LD_INT 7
22570: ARRAY
22571: PPUSH
22572: LD_INT 24
22574: PPUSH
22575: LD_INT 8
22577: PPUSH
22578: LD_INT 0
22580: PPUSH
22581: CALL_OW 48
// if difficulty > 1 then
22585: LD_OWVAR 67
22589: PUSH
22590: LD_INT 1
22592: GREATER
22593: IFFALSE 22619
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 8 ] , 26 , 10 , false ) else
22595: LD_EXP 11
22599: PUSH
22600: LD_INT 8
22602: ARRAY
22603: PPUSH
22604: LD_INT 26
22606: PPUSH
22607: LD_INT 10
22609: PPUSH
22610: LD_INT 0
22612: PPUSH
22613: CALL_OW 48
22617: GO 22632
// DestroyUnit ( JEDNOTKY_BAZE_2_LIST [ 8 ] ) ;
22619: LD_EXP 11
22623: PUSH
22624: LD_INT 8
22626: ARRAY
22627: PPUSH
22628: CALL_OW 65
// if difficulty > 2 then
22632: LD_OWVAR 67
22636: PUSH
22637: LD_INT 2
22639: GREATER
22640: IFFALSE 22666
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 9 ] , 25 , 11 , false ) else
22642: LD_EXP 11
22646: PUSH
22647: LD_INT 9
22649: ARRAY
22650: PPUSH
22651: LD_INT 25
22653: PPUSH
22654: LD_INT 11
22656: PPUSH
22657: LD_INT 0
22659: PPUSH
22660: CALL_OW 48
22664: GO 22679
// DestroyUnit ( JEDNOTKY_BAZE_2_LIST [ 9 ] ) ;
22666: LD_EXP 11
22670: PUSH
22671: LD_INT 9
22673: ARRAY
22674: PPUSH
22675: CALL_OW 65
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 10 ] , 24 , 10 , false ) ;
22679: LD_EXP 11
22683: PUSH
22684: LD_INT 10
22686: ARRAY
22687: PPUSH
22688: LD_INT 24
22690: PPUSH
22691: LD_INT 10
22693: PPUSH
22694: LD_INT 0
22696: PPUSH
22697: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 11 ] , 31 , 9 , false ) ;
22701: LD_EXP 11
22705: PUSH
22706: LD_INT 11
22708: ARRAY
22709: PPUSH
22710: LD_INT 31
22712: PPUSH
22713: LD_INT 9
22715: PPUSH
22716: LD_INT 0
22718: PPUSH
22719: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 12 ] , 33 , 9 , false ) ;
22723: LD_EXP 11
22727: PUSH
22728: LD_INT 12
22730: ARRAY
22731: PPUSH
22732: LD_INT 33
22734: PPUSH
22735: LD_INT 9
22737: PPUSH
22738: LD_INT 0
22740: PPUSH
22741: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 13 ] , 38 , 40 , false ) ;
22745: LD_EXP 11
22749: PUSH
22750: LD_INT 13
22752: ARRAY
22753: PPUSH
22754: LD_INT 38
22756: PPUSH
22757: LD_INT 40
22759: PPUSH
22760: LD_INT 0
22762: PPUSH
22763: CALL_OW 48
// if difficulty > 1 then
22767: LD_OWVAR 67
22771: PUSH
22772: LD_INT 1
22774: GREATER
22775: IFFALSE 22801
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 14 ] , 36 , 39 , false ) else
22777: LD_EXP 11
22781: PUSH
22782: LD_INT 14
22784: ARRAY
22785: PPUSH
22786: LD_INT 36
22788: PPUSH
22789: LD_INT 39
22791: PPUSH
22792: LD_INT 0
22794: PPUSH
22795: CALL_OW 48
22799: GO 22814
// DestroyUnit ( JEDNOTKY_BAZE_2_LIST [ 14 ] ) ;
22801: LD_EXP 11
22805: PUSH
22806: LD_INT 14
22808: ARRAY
22809: PPUSH
22810: CALL_OW 65
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 15 ] , 21 , 12 , false ) ;
22814: LD_EXP 11
22818: PUSH
22819: LD_INT 15
22821: ARRAY
22822: PPUSH
22823: LD_INT 21
22825: PPUSH
22826: LD_INT 12
22828: PPUSH
22829: LD_INT 0
22831: PPUSH
22832: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 16 ] , 21 , 13 , false ) ;
22836: LD_EXP 11
22840: PUSH
22841: LD_INT 16
22843: ARRAY
22844: PPUSH
22845: LD_INT 21
22847: PPUSH
22848: LD_INT 13
22850: PPUSH
22851: LD_INT 0
22853: PPUSH
22854: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 17 ] , 23 , 19 , false ) ;
22858: LD_EXP 11
22862: PUSH
22863: LD_INT 17
22865: ARRAY
22866: PPUSH
22867: LD_INT 23
22869: PPUSH
22870: LD_INT 19
22872: PPUSH
22873: LD_INT 0
22875: PPUSH
22876: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 18 ] , 23 , 20 , false ) ;
22880: LD_EXP 11
22884: PUSH
22885: LD_INT 18
22887: ARRAY
22888: PPUSH
22889: LD_INT 23
22891: PPUSH
22892: LD_INT 20
22894: PPUSH
22895: LD_INT 0
22897: PPUSH
22898: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 19 ] , 21 , 19 , false ) ;
22902: LD_EXP 11
22906: PUSH
22907: LD_INT 19
22909: ARRAY
22910: PPUSH
22911: LD_INT 21
22913: PPUSH
22914: LD_INT 19
22916: PPUSH
22917: LD_INT 0
22919: PPUSH
22920: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 20 ] , 24 , 20 , false ) ;
22924: LD_EXP 11
22928: PUSH
22929: LD_INT 20
22931: ARRAY
22932: PPUSH
22933: LD_INT 24
22935: PPUSH
22936: LD_INT 20
22938: PPUSH
22939: LD_INT 0
22941: PPUSH
22942: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 22 ] , 21 , 34 , false ) ;
22946: LD_EXP 11
22950: PUSH
22951: LD_INT 22
22953: ARRAY
22954: PPUSH
22955: LD_INT 21
22957: PPUSH
22958: LD_INT 34
22960: PPUSH
22961: LD_INT 0
22963: PPUSH
22964: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 21 ] , 27 , 17 , false ) ;
22968: LD_EXP 11
22972: PUSH
22973: LD_INT 21
22975: ARRAY
22976: PPUSH
22977: LD_INT 27
22979: PPUSH
22980: LD_INT 17
22982: PPUSH
22983: LD_INT 0
22985: PPUSH
22986: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_2_LIST [ 23 ] , 28 , 21 , false ) ;
22990: LD_EXP 11
22994: PUSH
22995: LD_INT 23
22997: ARRAY
22998: PPUSH
22999: LD_INT 28
23001: PPUSH
23002: LD_INT 21
23004: PPUSH
23005: LD_INT 0
23007: PPUSH
23008: CALL_OW 48
// wait ( 0 0$1 ) ;
23012: LD_INT 35
23014: PPUSH
23015: CALL_OW 67
// uklid_arabu2 ;
23019: CALL 17978 0 0
// end ;
23023: END
// every 0 0$1 trigger FilterUnitsInArea ( Create3 , [ [ f_side , You ] ] ) > 0 do
23024: LD_INT 23
23026: PPUSH
23027: LD_INT 22
23029: PUSH
23030: LD_EXP 1
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: EMPTY
23040: LIST
23041: PPUSH
23042: CALL_OW 70
23046: PUSH
23047: LD_INT 0
23049: GREATER
23050: IFFALSE 23440
23052: GO 23054
23054: DISABLE
// begin PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 1 ] , 103 , 11 , false ) ;
23055: LD_EXP 12
23059: PUSH
23060: LD_INT 1
23062: ARRAY
23063: PPUSH
23064: LD_INT 103
23066: PPUSH
23067: LD_INT 11
23069: PPUSH
23070: LD_INT 0
23072: PPUSH
23073: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 2 ] , 108 , 18 , false ) ;
23077: LD_EXP 12
23081: PUSH
23082: LD_INT 2
23084: ARRAY
23085: PPUSH
23086: LD_INT 108
23088: PPUSH
23089: LD_INT 18
23091: PPUSH
23092: LD_INT 0
23094: PPUSH
23095: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 3 ] , 107 , 21 , false ) ;
23099: LD_EXP 12
23103: PUSH
23104: LD_INT 3
23106: ARRAY
23107: PPUSH
23108: LD_INT 107
23110: PPUSH
23111: LD_INT 21
23113: PPUSH
23114: LD_INT 0
23116: PPUSH
23117: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 4 ] , 118 , 11 , false ) ;
23121: LD_EXP 12
23125: PUSH
23126: LD_INT 4
23128: ARRAY
23129: PPUSH
23130: LD_INT 118
23132: PPUSH
23133: LD_INT 11
23135: PPUSH
23136: LD_INT 0
23138: PPUSH
23139: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 5 ] , 118 , 12 , false ) ;
23143: LD_EXP 12
23147: PUSH
23148: LD_INT 5
23150: ARRAY
23151: PPUSH
23152: LD_INT 118
23154: PPUSH
23155: LD_INT 12
23157: PPUSH
23158: LD_INT 0
23160: PPUSH
23161: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 6 ] , 119 , 13 , false ) ;
23165: LD_EXP 12
23169: PUSH
23170: LD_INT 6
23172: ARRAY
23173: PPUSH
23174: LD_INT 119
23176: PPUSH
23177: LD_INT 13
23179: PPUSH
23180: LD_INT 0
23182: PPUSH
23183: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 7 ] , 115 , 9 , false ) ;
23187: LD_EXP 12
23191: PUSH
23192: LD_INT 7
23194: ARRAY
23195: PPUSH
23196: LD_INT 115
23198: PPUSH
23199: LD_INT 9
23201: PPUSH
23202: LD_INT 0
23204: PPUSH
23205: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 8 ] , 119 , 18 , false ) ;
23209: LD_EXP 12
23213: PUSH
23214: LD_INT 8
23216: ARRAY
23217: PPUSH
23218: LD_INT 119
23220: PPUSH
23221: LD_INT 18
23223: PPUSH
23224: LD_INT 0
23226: PPUSH
23227: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 9 ] , 118 , 18 , false ) ;
23231: LD_EXP 12
23235: PUSH
23236: LD_INT 9
23238: ARRAY
23239: PPUSH
23240: LD_INT 118
23242: PPUSH
23243: LD_INT 18
23245: PPUSH
23246: LD_INT 0
23248: PPUSH
23249: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 10 ] , 118 , 17 , false ) ;
23253: LD_EXP 12
23257: PUSH
23258: LD_INT 10
23260: ARRAY
23261: PPUSH
23262: LD_INT 118
23264: PPUSH
23265: LD_INT 17
23267: PPUSH
23268: LD_INT 0
23270: PPUSH
23271: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 11 ] , 118 , 16 , false ) ;
23275: LD_EXP 12
23279: PUSH
23280: LD_INT 11
23282: ARRAY
23283: PPUSH
23284: LD_INT 118
23286: PPUSH
23287: LD_INT 16
23289: PPUSH
23290: LD_INT 0
23292: PPUSH
23293: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 12 ] , 111 , 13 , false ) ;
23297: LD_EXP 12
23301: PUSH
23302: LD_INT 12
23304: ARRAY
23305: PPUSH
23306: LD_INT 111
23308: PPUSH
23309: LD_INT 13
23311: PPUSH
23312: LD_INT 0
23314: PPUSH
23315: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 13 ] , 112 , 12 , false ) ;
23319: LD_EXP 12
23323: PUSH
23324: LD_INT 13
23326: ARRAY
23327: PPUSH
23328: LD_INT 112
23330: PPUSH
23331: LD_INT 12
23333: PPUSH
23334: LD_INT 0
23336: PPUSH
23337: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 14 ] , 113 , 25 , false ) ;
23341: LD_EXP 12
23345: PUSH
23346: LD_INT 14
23348: ARRAY
23349: PPUSH
23350: LD_INT 113
23352: PPUSH
23353: LD_INT 25
23355: PPUSH
23356: LD_INT 0
23358: PPUSH
23359: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 15 ] , 113 , 27 , false ) ;
23363: LD_EXP 12
23367: PUSH
23368: LD_INT 15
23370: ARRAY
23371: PPUSH
23372: LD_INT 113
23374: PPUSH
23375: LD_INT 27
23377: PPUSH
23378: LD_INT 0
23380: PPUSH
23381: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 16 ] , 114 , 9 , false ) ;
23385: LD_EXP 12
23389: PUSH
23390: LD_INT 16
23392: ARRAY
23393: PPUSH
23394: LD_INT 114
23396: PPUSH
23397: LD_INT 9
23399: PPUSH
23400: LD_INT 0
23402: PPUSH
23403: CALL_OW 48
// PlaceUnitXY ( JEDNOTKY_BAZE_3_LIST [ 17 ] , 114 , 10 , false ) ;
23407: LD_EXP 12
23411: PUSH
23412: LD_INT 17
23414: ARRAY
23415: PPUSH
23416: LD_INT 114
23418: PPUSH
23419: LD_INT 10
23421: PPUSH
23422: LD_INT 0
23424: PPUSH
23425: CALL_OW 48
// wait ( 0 0$1 ) ;
23429: LD_INT 35
23431: PPUSH
23432: CALL_OW 67
// uklid_arabu3 ;
23436: CALL 19158 0 0
// end ;
23440: END
// export function uprav_zivoty_arabskych_budov ; begin
23441: LD_INT 0
23443: PPUSH
// SetLives ( A1_bu3 , zivoty_prvni_baze [ difficulty ] ) ;
23444: LD_INT 11
23446: PPUSH
23447: LD_EXP 53
23451: PUSH
23452: LD_OWVAR 67
23456: ARRAY
23457: PPUSH
23458: CALL_OW 234
// SetLives ( A1_bu1 , zivoty_prvni_baze [ difficulty ] ) ;
23462: LD_INT 9
23464: PPUSH
23465: LD_EXP 53
23469: PUSH
23470: LD_OWVAR 67
23474: ARRAY
23475: PPUSH
23476: CALL_OW 234
// SetLives ( A1_au2 , zivoty_prvni_baze [ difficulty ] ) ;
23480: LD_INT 109
23482: PPUSH
23483: LD_EXP 53
23487: PUSH
23488: LD_OWVAR 67
23492: ARRAY
23493: PPUSH
23494: CALL_OW 234
// SetLives ( A1_vo1 , zivoty_prvni_baze [ difficulty ] ) ;
23498: LD_INT 72
23500: PPUSH
23501: LD_EXP 53
23505: PUSH
23506: LD_OWVAR 67
23510: ARRAY
23511: PPUSH
23512: CALL_OW 234
// end ;
23516: LD_VAR 0 1
23520: RET
// every 0 0$1 trigger FilterUnitsInArea ( BummArea , [ [ f_side , You ] ] ) do var pom ;
23521: LD_INT 26
23523: PPUSH
23524: LD_INT 22
23526: PUSH
23527: LD_EXP 1
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: EMPTY
23537: LIST
23538: PPUSH
23539: CALL_OW 70
23543: IFFALSE 23612
23545: GO 23547
23547: DISABLE
23548: LD_INT 0
23550: PPUSH
// begin pom = FilterUnitsInArea ( BummArea , [ [ f_side , You ] ] ) ;
23551: LD_ADDR_VAR 0 1
23555: PUSH
23556: LD_INT 26
23558: PPUSH
23559: LD_INT 22
23561: PUSH
23562: LD_EXP 1
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: EMPTY
23572: LIST
23573: PPUSH
23574: CALL_OW 70
23578: ST_TO_ADDR
// if pom > 0 then
23579: LD_VAR 0 1
23583: PUSH
23584: LD_INT 0
23586: GREATER
23587: IFFALSE 23612
// AddComAttackUnit ( [ bumm1 , bumm2 ] , pom [ 1 ] ) ;
23589: LD_INT 114
23591: PUSH
23592: LD_INT 115
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PPUSH
23599: LD_VAR 0 1
23603: PUSH
23604: LD_INT 1
23606: ARRAY
23607: PPUSH
23608: CALL_OW 175
// end ;
23612: PPOPN 1
23614: END
// every 0 0$1 trigger GetLives ( A2_bu1 ) < 700 do var pom , i ; var atakers ;
23615: LD_INT 112
23617: PPUSH
23618: CALL_OW 256
23622: PUSH
23623: LD_INT 700
23625: LESS
23626: IFFALSE 23874
23628: GO 23630
23630: DISABLE
23631: LD_INT 0
23633: PPUSH
23634: PPUSH
23635: PPUSH
// begin if not ( IsOK ( sui1 ) or IsOK ( sui3 ) ) then
23636: LD_INT 118
23638: PPUSH
23639: CALL_OW 302
23643: PUSH
23644: LD_INT 121
23646: PPUSH
23647: CALL_OW 302
23651: OR
23652: NOT
23653: IFFALSE 23657
// exit ;
23655: GO 23874
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23657: LD_ADDR_VAR 0 1
23661: PUSH
23662: LD_INT 22
23664: PUSH
23665: LD_EXP 1
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: LD_INT 2
23676: PUSH
23677: LD_INT 21
23679: PUSH
23680: LD_INT 1
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: LD_INT 21
23689: PUSH
23690: LD_INT 2
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: LIST
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PPUSH
23706: CALL_OW 69
23710: ST_TO_ADDR
// for i in pom do
23711: LD_ADDR_VAR 0 2
23715: PUSH
23716: LD_VAR 0 1
23720: PUSH
23721: FOR_IN
23722: IFFALSE 23757
// if Attacks ( i ) = A2_bu1 then
23724: LD_VAR 0 2
23728: PPUSH
23729: CALL_OW 320
23733: PUSH
23734: LD_INT 112
23736: EQUAL
23737: IFFALSE 23755
// atakers = atakers ^ i ;
23739: LD_ADDR_VAR 0 3
23743: PUSH
23744: LD_VAR 0 3
23748: PUSH
23749: LD_VAR 0 2
23753: ADD
23754: ST_TO_ADDR
23755: GO 23721
23757: POP
23758: POP
// if atakers > 0 then
23759: LD_VAR 0 3
23763: PUSH
23764: LD_INT 0
23766: GREATER
23767: IFFALSE 23794
// AddComAttackUnit ( [ sui1 , sui3 ] , atakers [ 1 ] ) else
23769: LD_INT 118
23771: PUSH
23772: LD_INT 121
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PPUSH
23779: LD_VAR 0 3
23783: PUSH
23784: LD_INT 1
23786: ARRAY
23787: PPUSH
23788: CALL_OW 175
23792: GO 23855
// begin pom = FilterUnitsInArea ( kamiattack , [ [ f_side , You ] ] ) ;
23794: LD_ADDR_VAR 0 1
23798: PUSH
23799: LD_INT 37
23801: PPUSH
23802: LD_INT 22
23804: PUSH
23805: LD_EXP 1
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: EMPTY
23815: LIST
23816: PPUSH
23817: CALL_OW 70
23821: ST_TO_ADDR
// if pom > 0 then
23822: LD_VAR 0 1
23826: PUSH
23827: LD_INT 0
23829: GREATER
23830: IFFALSE 23855
// AddComAttackUnit ( [ sui1 , sui3 ] , pom [ 1 ] ) ;
23832: LD_INT 118
23834: PUSH
23835: LD_INT 121
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PPUSH
23842: LD_VAR 0 1
23846: PUSH
23847: LD_INT 1
23849: ARRAY
23850: PPUSH
23851: CALL_OW 175
// end ; if IsOK ( sui1 ) or IsOK ( sui3 ) then
23855: LD_INT 118
23857: PPUSH
23858: CALL_OW 302
23862: PUSH
23863: LD_INT 121
23865: PPUSH
23866: CALL_OW 302
23870: OR
23871: IFFALSE 23874
// enable ;
23873: ENABLE
// end ;
23874: PPOPN 3
23876: END
// every 0 0$2 trigger GetLives ( A2_bu3 ) < 700 do var pom , i ; var atakers ;
23877: LD_INT 47
23879: PPUSH
23880: CALL_OW 256
23884: PUSH
23885: LD_INT 700
23887: LESS
23888: IFFALSE 24136
23890: GO 23892
23892: DISABLE
23893: LD_INT 0
23895: PPUSH
23896: PPUSH
23897: PPUSH
// begin if not ( IsOK ( sui2 ) or IsOK ( sui4 ) ) then
23898: LD_INT 119
23900: PPUSH
23901: CALL_OW 302
23905: PUSH
23906: LD_INT 120
23908: PPUSH
23909: CALL_OW 302
23913: OR
23914: NOT
23915: IFFALSE 23919
// exit ;
23917: GO 24136
// pom = FilterAllUnits ( [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23919: LD_ADDR_VAR 0 1
23923: PUSH
23924: LD_INT 22
23926: PUSH
23927: LD_EXP 1
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 2
23938: PUSH
23939: LD_INT 21
23941: PUSH
23942: LD_INT 1
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 21
23951: PUSH
23952: LD_INT 2
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: LIST
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PPUSH
23968: CALL_OW 69
23972: ST_TO_ADDR
// for i in pom do
23973: LD_ADDR_VAR 0 2
23977: PUSH
23978: LD_VAR 0 1
23982: PUSH
23983: FOR_IN
23984: IFFALSE 24019
// if Attacks ( i ) = A2_bu3 then
23986: LD_VAR 0 2
23990: PPUSH
23991: CALL_OW 320
23995: PUSH
23996: LD_INT 47
23998: EQUAL
23999: IFFALSE 24017
// atakers = atakers ^ i ;
24001: LD_ADDR_VAR 0 3
24005: PUSH
24006: LD_VAR 0 3
24010: PUSH
24011: LD_VAR 0 2
24015: ADD
24016: ST_TO_ADDR
24017: GO 23983
24019: POP
24020: POP
// if atakers > 0 then
24021: LD_VAR 0 3
24025: PUSH
24026: LD_INT 0
24028: GREATER
24029: IFFALSE 24056
// AddComAttackUnit ( [ sui2 , sui4 ] , atakers [ 1 ] ) else
24031: LD_INT 119
24033: PUSH
24034: LD_INT 120
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PPUSH
24041: LD_VAR 0 3
24045: PUSH
24046: LD_INT 1
24048: ARRAY
24049: PPUSH
24050: CALL_OW 175
24054: GO 24117
// begin pom = FilterUnitsInArea ( kamiattack , [ [ f_side , You ] ] ) ;
24056: LD_ADDR_VAR 0 1
24060: PUSH
24061: LD_INT 37
24063: PPUSH
24064: LD_INT 22
24066: PUSH
24067: LD_EXP 1
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: EMPTY
24077: LIST
24078: PPUSH
24079: CALL_OW 70
24083: ST_TO_ADDR
// if pom > 1 then
24084: LD_VAR 0 1
24088: PUSH
24089: LD_INT 1
24091: GREATER
24092: IFFALSE 24117
// AddComAttackUnit ( [ sui2 , sui4 ] , pom1 [ 2 ] ) ;
24094: LD_INT 119
24096: PUSH
24097: LD_INT 120
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PPUSH
24104: LD_LOC 35
24108: PUSH
24109: LD_INT 2
24111: ARRAY
24112: PPUSH
24113: CALL_OW 175
// end ; if IsOK ( sui1 ) or IsOK ( sui3 ) then
24117: LD_INT 118
24119: PPUSH
24120: CALL_OW 302
24124: PUSH
24125: LD_INT 121
24127: PPUSH
24128: CALL_OW 302
24132: OR
24133: IFFALSE 24136
// enable ;
24135: ENABLE
// end ;
24136: PPOPN 3
24138: END
// on McDefendReturnsUnit ( mcid , un ) do var a ;
24139: LD_INT 0
24141: PPUSH
// begin a = JEDNOTKY_BAZE_2_LIST ;
24142: LD_ADDR_VAR 0 3
24146: PUSH
24147: LD_EXP 11
24151: ST_TO_ADDR
// case un of a [ 1 ] :
24152: LD_VAR 0 2
24156: PUSH
24157: LD_VAR 0 3
24161: PUSH
24162: LD_INT 1
24164: ARRAY
24165: DOUBLE
24166: EQUAL
24167: IFTRUE 24171
24169: GO 24186
24171: POP
// posli_unit ( un , 5 ) ; a [ 2 ] :
24172: LD_VAR 0 2
24176: PPUSH
24177: LD_INT 5
24179: PPUSH
24180: CALL 24688 0 2
24184: GO 24685
24186: LD_VAR 0 3
24190: PUSH
24191: LD_INT 2
24193: ARRAY
24194: DOUBLE
24195: EQUAL
24196: IFTRUE 24200
24198: GO 24215
24200: POP
// posli_unit ( un , 6 ) ; a [ 3 ] :
24201: LD_VAR 0 2
24205: PPUSH
24206: LD_INT 6
24208: PPUSH
24209: CALL 24688 0 2
24213: GO 24685
24215: LD_VAR 0 3
24219: PUSH
24220: LD_INT 3
24222: ARRAY
24223: DOUBLE
24224: EQUAL
24225: IFTRUE 24229
24227: GO 24244
24229: POP
// posli_unit ( un , 7 ) ; a [ 3 ] :
24230: LD_VAR 0 2
24234: PPUSH
24235: LD_INT 7
24237: PPUSH
24238: CALL 24688 0 2
24242: GO 24685
24244: LD_VAR 0 3
24248: PUSH
24249: LD_INT 3
24251: ARRAY
24252: DOUBLE
24253: EQUAL
24254: IFTRUE 24258
24256: GO 24273
24258: POP
// posli_unit ( un , 8 ) ; a [ 3 ] :
24259: LD_VAR 0 2
24263: PPUSH
24264: LD_INT 8
24266: PPUSH
24267: CALL 24688 0 2
24271: GO 24685
24273: LD_VAR 0 3
24277: PUSH
24278: LD_INT 3
24280: ARRAY
24281: DOUBLE
24282: EQUAL
24283: IFTRUE 24287
24285: GO 24302
24287: POP
// posli_unit ( un , 9 ) ; a [ 3 ] :
24288: LD_VAR 0 2
24292: PPUSH
24293: LD_INT 9
24295: PPUSH
24296: CALL 24688 0 2
24300: GO 24685
24302: LD_VAR 0 3
24306: PUSH
24307: LD_INT 3
24309: ARRAY
24310: DOUBLE
24311: EQUAL
24312: IFTRUE 24316
24314: GO 24331
24316: POP
// posli_unit ( un , 10 ) ; a [ 17 ] :
24317: LD_VAR 0 2
24321: PPUSH
24322: LD_INT 10
24324: PPUSH
24325: CALL 24688 0 2
24329: GO 24685
24331: LD_VAR 0 3
24335: PUSH
24336: LD_INT 17
24338: ARRAY
24339: DOUBLE
24340: EQUAL
24341: IFTRUE 24345
24343: GO 24360
24345: POP
// posli_unit ( un , 11 ) ; a [ 18 ] :
24346: LD_VAR 0 2
24350: PPUSH
24351: LD_INT 11
24353: PPUSH
24354: CALL 24688 0 2
24358: GO 24685
24360: LD_VAR 0 3
24364: PUSH
24365: LD_INT 18
24367: ARRAY
24368: DOUBLE
24369: EQUAL
24370: IFTRUE 24374
24372: GO 24389
24374: POP
// posli_unit ( un , 12 ) ; a [ 16 ] :
24375: LD_VAR 0 2
24379: PPUSH
24380: LD_INT 12
24382: PPUSH
24383: CALL 24688 0 2
24387: GO 24685
24389: LD_VAR 0 3
24393: PUSH
24394: LD_INT 16
24396: ARRAY
24397: DOUBLE
24398: EQUAL
24399: IFTRUE 24403
24401: GO 24418
24403: POP
// posli_unit ( un , 13 ) ; a [ 7 ] :
24404: LD_VAR 0 2
24408: PPUSH
24409: LD_INT 13
24411: PPUSH
24412: CALL 24688 0 2
24416: GO 24685
24418: LD_VAR 0 3
24422: PUSH
24423: LD_INT 7
24425: ARRAY
24426: DOUBLE
24427: EQUAL
24428: IFTRUE 24432
24430: GO 24447
24432: POP
// posli_unit ( un , 14 ) ; a [ 8 ] :
24433: LD_VAR 0 2
24437: PPUSH
24438: LD_INT 14
24440: PPUSH
24441: CALL 24688 0 2
24445: GO 24685
24447: LD_VAR 0 3
24451: PUSH
24452: LD_INT 8
24454: ARRAY
24455: DOUBLE
24456: EQUAL
24457: IFTRUE 24461
24459: GO 24476
24461: POP
// posli_unit ( un , 15 ) ; a [ 9 ] :
24462: LD_VAR 0 2
24466: PPUSH
24467: LD_INT 15
24469: PPUSH
24470: CALL 24688 0 2
24474: GO 24685
24476: LD_VAR 0 3
24480: PUSH
24481: LD_INT 9
24483: ARRAY
24484: DOUBLE
24485: EQUAL
24486: IFTRUE 24490
24488: GO 24505
24490: POP
// posli_unit ( un , 16 ) ; a [ 10 ] :
24491: LD_VAR 0 2
24495: PPUSH
24496: LD_INT 16
24498: PPUSH
24499: CALL 24688 0 2
24503: GO 24685
24505: LD_VAR 0 3
24509: PUSH
24510: LD_INT 10
24512: ARRAY
24513: DOUBLE
24514: EQUAL
24515: IFTRUE 24519
24517: GO 24534
24519: POP
// posli_unit ( un , 17 ) ; a [ 21 ] :
24520: LD_VAR 0 2
24524: PPUSH
24525: LD_INT 17
24527: PPUSH
24528: CALL 24688 0 2
24532: GO 24685
24534: LD_VAR 0 3
24538: PUSH
24539: LD_INT 21
24541: ARRAY
24542: DOUBLE
24543: EQUAL
24544: IFTRUE 24548
24546: GO 24563
24548: POP
// posli_unit ( un , 18 ) ; a [ 22 ] :
24549: LD_VAR 0 2
24553: PPUSH
24554: LD_INT 18
24556: PPUSH
24557: CALL 24688 0 2
24561: GO 24685
24563: LD_VAR 0 3
24567: PUSH
24568: LD_INT 22
24570: ARRAY
24571: DOUBLE
24572: EQUAL
24573: IFTRUE 24577
24575: GO 24592
24577: POP
// posli_unit ( un , 19 ) ; A2_nau2 :
24578: LD_VAR 0 2
24582: PPUSH
24583: LD_INT 19
24585: PPUSH
24586: CALL 24688 0 2
24590: GO 24685
24592: LD_INT 108
24594: DOUBLE
24595: EQUAL
24596: IFTRUE 24600
24598: GO 24615
24600: POP
// posli_unit2 ( un , 3 ) ; A2_nau1 :
24601: LD_VAR 0 2
24605: PPUSH
24606: LD_INT 3
24608: PPUSH
24609: CALL 24795 0 2
24613: GO 24685
24615: LD_INT 107
24617: DOUBLE
24618: EQUAL
24619: IFTRUE 24623
24621: GO 24638
24623: POP
// posli_unit2 ( un , 4 ) ; MDopka1 :
24624: LD_VAR 0 2
24628: PPUSH
24629: LD_INT 4
24631: PPUSH
24632: CALL 24795 0 2
24636: GO 24685
24638: LD_INT 117
24640: DOUBLE
24641: EQUAL
24642: IFTRUE 24646
24644: GO 24661
24646: POP
// posli_unit2 ( un , 1 ) ; MDopka2 :
24647: LD_VAR 0 2
24651: PPUSH
24652: LD_INT 1
24654: PPUSH
24655: CALL 24795 0 2
24659: GO 24685
24661: LD_INT 116
24663: DOUBLE
24664: EQUAL
24665: IFTRUE 24669
24667: GO 24684
24669: POP
// posli_unit2 ( un , 2 ) ; end ;
24670: LD_VAR 0 2
24674: PPUSH
24675: LD_INT 2
24677: PPUSH
24678: CALL 24795 0 2
24682: GO 24685
24684: POP
// end ;
24685: PPOPN 3
24687: END
// function posli_unit ( un , cz ) ; var a ; begin
24688: LD_INT 0
24690: PPUSH
24691: PPUSH
// a = uklizejici_mista [ cz ] ;
24692: LD_ADDR_VAR 0 4
24696: PUSH
24697: LD_LOC 36
24701: PUSH
24702: LD_VAR 0 2
24706: ARRAY
24707: ST_TO_ADDR
// debug_strings = [ Vraci MD - zaznam,unit,cislo_zaznamu , a , un , cz ] ;
24708: LD_ADDR_OWVAR 48
24712: PUSH
24713: LD_STRING Vraci MD - zaznam,unit,cislo_zaznamu
24715: PUSH
24716: LD_VAR 0 4
24720: PUSH
24721: LD_VAR 0 1
24725: PUSH
24726: LD_VAR 0 2
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: ST_TO_ADDR
// wait ( 3 ) ;
24737: LD_INT 3
24739: PPUSH
24740: CALL_OW 67
// ComEnterUnit ( un , a [ 1 ] ) ;
24744: LD_VAR 0 1
24748: PPUSH
24749: LD_VAR 0 4
24753: PUSH
24754: LD_INT 1
24756: ARRAY
24757: PPUSH
24758: CALL_OW 120
// if a [ 2 ] then
24762: LD_VAR 0 4
24766: PUSH
24767: LD_INT 2
24769: ARRAY
24770: IFFALSE 24790
// AddComChangeProfession ( un , a [ 3 ] ) ;
24772: LD_VAR 0 1
24776: PPUSH
24777: LD_VAR 0 4
24781: PUSH
24782: LD_INT 3
24784: ARRAY
24785: PPUSH
24786: CALL_OW 183
// end ;
24790: LD_VAR 0 3
24794: RET
// function posli_unit2 ( un , cz ) ; var a ; begin
24795: LD_INT 0
24797: PPUSH
24798: PPUSH
// a = uklizejici_mista [ cz ] ;
24799: LD_ADDR_VAR 0 4
24803: PUSH
24804: LD_LOC 36
24808: PUSH
24809: LD_VAR 0 2
24813: ARRAY
24814: ST_TO_ADDR
// debug_strings = [ Vraci MD - zaznam,unit,cislo_zaznamu , a , un , cz ] ;
24815: LD_ADDR_OWVAR 48
24819: PUSH
24820: LD_STRING Vraci MD - zaznam,unit,cislo_zaznamu
24822: PUSH
24823: LD_VAR 0 4
24827: PUSH
24828: LD_VAR 0 1
24832: PUSH
24833: LD_VAR 0 2
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: ST_TO_ADDR
// ComMoveXY ( un , a [ 1 ] , a [ 2 ] ) ;
24844: LD_VAR 0 1
24848: PPUSH
24849: LD_VAR 0 4
24853: PUSH
24854: LD_INT 1
24856: ARRAY
24857: PPUSH
24858: LD_VAR 0 4
24862: PUSH
24863: LD_INT 2
24865: ARRAY
24866: PPUSH
24867: CALL_OW 111
// end ;
24871: LD_VAR 0 3
24875: RET
// on McDone ( makro , stat ) do begin case makro of 1 :
24876: LD_VAR 0 1
24880: PUSH
24881: LD_INT 1
24883: DOUBLE
24884: EQUAL
24885: IFTRUE 24889
24887: GO 24899
24889: POP
// zabijeni_1_baze ( 1 ) ; 2 :
24890: LD_INT 1
24892: PPUSH
24893: CALL 24922 0 1
24897: GO 24918
24899: LD_INT 2
24901: DOUBLE
24902: EQUAL
24903: IFTRUE 24907
24905: GO 24917
24907: POP
// zabijeni_1_baze ( 2 ) ; end ;
24908: LD_INT 2
24910: PPUSH
24911: CALL 24922 0 1
24915: GO 24918
24917: POP
// enable ;
24918: ENABLE
// end ;
24919: PPOPN 2
24921: END
// function zabijeni_1_baze ( jj ) ; var pom , i ; var jedn ; begin
24922: LD_INT 0
24924: PPUSH
24925: PPUSH
24926: PPUSH
24927: PPUSH
// case jj of 1 :
24928: LD_VAR 0 1
24932: PUSH
24933: LD_INT 1
24935: DOUBLE
24936: EQUAL
24937: IFTRUE 24941
24939: GO 24954
24941: POP
// jedn = Ar_utok3_LIST ; 2 :
24942: LD_ADDR_VAR 0 5
24946: PUSH
24947: LD_EXP 15
24951: ST_TO_ADDR
24952: GO 24976
24954: LD_INT 2
24956: DOUBLE
24957: EQUAL
24958: IFTRUE 24962
24960: GO 24975
24962: POP
// jedn = Ar_utok2_LIST ; end ;
24963: LD_ADDR_VAR 0 5
24967: PUSH
24968: LD_EXP 14
24972: ST_TO_ADDR
24973: GO 24976
24975: POP
// for i in jedn do
24976: LD_ADDR_VAR 0 4
24980: PUSH
24981: LD_VAR 0 5
24985: PUSH
24986: FOR_IN
24987: IFFALSE 25027
// if GetClass ( i ) = class_engineer then
24989: LD_VAR 0 4
24993: PPUSH
24994: CALL_OW 257
24998: PUSH
24999: LD_INT 2
25001: EQUAL
25002: IFFALSE 25025
// if IsOK ( A1_dep ) then
25004: LD_INT 4
25006: PPUSH
25007: CALL_OW 302
25011: IFFALSE 25025
// ComEnterUnit ( i , A1_dep ) ;
25013: LD_VAR 0 4
25017: PPUSH
25018: LD_INT 4
25020: PPUSH
25021: CALL_OW 120
25025: GO 24986
25027: POP
25028: POP
// pom = FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) ;
25029: LD_ADDR_VAR 0 3
25033: PUSH
25034: LD_INT 3
25036: PPUSH
25037: LD_INT 22
25039: PUSH
25040: LD_EXP 1
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: EMPTY
25050: LIST
25051: PPUSH
25052: CALL_OW 70
25056: ST_TO_ADDR
// for i in pom do
25057: LD_ADDR_VAR 0 4
25061: PUSH
25062: LD_VAR 0 3
25066: PUSH
25067: FOR_IN
25068: IFFALSE 25086
// PriorityAttack ( Arabi , i ) ;
25070: LD_EXP 3
25074: PPUSH
25075: LD_VAR 0 4
25079: PPUSH
25080: CALL_OW 470
25084: GO 25067
25086: POP
25087: POP
// enable ( 995 ) ;
25088: LD_INT 995
25090: ENABLE_MARKED
// end ;
25091: LD_VAR 0 2
25095: RET
// every 0 0$1 marked 995 do var pom , pom1 ; var i ; var pomat ;
25096: GO 25098
25098: DISABLE
25099: LD_INT 0
25101: PPUSH
25102: PPUSH
25103: PPUSH
25104: PPUSH
// begin pom = FilterUnitsInArea ( Abase1 , [ [ f_side , You ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_ready ] ] ] ] ) ;
25105: LD_ADDR_VAR 0 1
25109: PUSH
25110: LD_INT 3
25112: PPUSH
25113: LD_INT 22
25115: PUSH
25116: LD_EXP 1
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 2
25127: PUSH
25128: LD_INT 21
25130: PUSH
25131: LD_INT 1
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 21
25140: PUSH
25141: LD_INT 2
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 53
25150: PUSH
25151: EMPTY
25152: LIST
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: LIST
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PPUSH
25167: CALL_OW 70
25171: ST_TO_ADDR
// pom1 = FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) ;
25172: LD_ADDR_VAR 0 2
25176: PUSH
25177: LD_INT 3
25179: PPUSH
25180: LD_INT 22
25182: PUSH
25183: LD_EXP 1
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: EMPTY
25193: LIST
25194: PPUSH
25195: CALL_OW 70
25199: ST_TO_ADDR
// pomat = pom1 diff pom ;
25200: LD_ADDR_VAR 0 4
25204: PUSH
25205: LD_VAR 0 2
25209: PUSH
25210: LD_VAR 0 1
25214: DIFF
25215: ST_TO_ADDR
// if pomat = 0 then
25216: LD_VAR 0 4
25220: PUSH
25221: LD_INT 0
25223: EQUAL
25224: IFFALSE 25259
// for i in pom1 do
25226: LD_ADDR_VAR 0 3
25230: PUSH
25231: LD_VAR 0 2
25235: PUSH
25236: FOR_IN
25237: IFFALSE 25255
// PriorityAttack ( Arabi , i ) else
25239: LD_EXP 3
25243: PPUSH
25244: LD_VAR 0 3
25248: PPUSH
25249: CALL_OW 470
25253: GO 25236
25255: POP
25256: POP
25257: GO 25321
// begin for i in pom do
25259: LD_ADDR_VAR 0 3
25263: PUSH
25264: LD_VAR 0 1
25268: PUSH
25269: FOR_IN
25270: IFFALSE 25288
// PriorityAttack ( Arabi , i ) ;
25272: LD_EXP 3
25276: PPUSH
25277: LD_VAR 0 3
25281: PPUSH
25282: CALL_OW 470
25286: GO 25269
25288: POP
25289: POP
// for i in pomat do
25290: LD_ADDR_VAR 0 3
25294: PUSH
25295: LD_VAR 0 4
25299: PUSH
25300: FOR_IN
25301: IFFALSE 25319
// NormalAttack ( Arabi , i ) ;
25303: LD_EXP 3
25307: PPUSH
25308: LD_VAR 0 3
25312: PPUSH
25313: CALL_OW 472
25317: GO 25300
25319: POP
25320: POP
// end ; if pom <> 0 and FilterUnitsInArea ( Abase1 , [ [ f_side , You ] ] ) <> 0 then
25321: LD_VAR 0 1
25325: PUSH
25326: LD_INT 0
25328: NONEQUAL
25329: PUSH
25330: LD_INT 3
25332: PPUSH
25333: LD_INT 22
25335: PUSH
25336: LD_EXP 1
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: EMPTY
25346: LIST
25347: PPUSH
25348: CALL_OW 70
25352: PUSH
25353: LD_INT 0
25355: NONEQUAL
25356: AND
25357: IFFALSE 25360
// enable ;
25359: ENABLE
// end ; end_of_file
25360: PPOPN 4
25362: END
// export protiutok1 ; export Ar_levely ; export timelimit ; export max_bedny ; export lidi_other ; export zivoty_prvni_baze ; export utok_2_doba ; export last_attack_wait ; export medaile1 ; export medaile2 ; export Timecounter ; export function SET_DIFFICULTY ; var pom ; begin
25363: LD_INT 0
25365: PPUSH
25366: PPUSH
// protiutok1 = [ 10 10$0 , 7 7$30 , 5 5$30 ] ;
25367: LD_ADDR_EXP 48
25371: PUSH
25372: LD_INT 21000
25374: PUSH
25375: LD_INT 15750
25377: PUSH
25378: LD_INT 11550
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: LIST
25385: ST_TO_ADDR
// utok_2_doba = [ 10 10$0 , 8 8$0 , 6 6$0 ] ;
25386: LD_ADDR_EXP 54
25390: PUSH
25391: LD_INT 21000
25393: PUSH
25394: LD_INT 16800
25396: PUSH
25397: LD_INT 12600
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: LIST
25404: ST_TO_ADDR
// Ar_levely = [ 4 , 6 , 8 ] ;
25405: LD_ADDR_EXP 49
25409: PUSH
25410: LD_INT 4
25412: PUSH
25413: LD_INT 6
25415: PUSH
25416: LD_INT 8
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: LIST
25423: ST_TO_ADDR
// timelimit = [ 160 160$0 , 150 150$0 , 140 140$0 ] ;
25424: LD_ADDR_EXP 50
25428: PUSH
25429: LD_INT 336000
25431: PUSH
25432: LD_INT 315000
25434: PUSH
25435: LD_INT 294000
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: LIST
25442: ST_TO_ADDR
// medaile1 = [ 120 , 100 , 90 ] ;
25443: LD_ADDR_EXP 56
25447: PUSH
25448: LD_INT 120
25450: PUSH
25451: LD_INT 100
25453: PUSH
25454: LD_INT 90
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: LIST
25461: ST_TO_ADDR
// medaile2 = [ 100 , 90 , 80 ] ;
25462: LD_ADDR_EXP 57
25466: PUSH
25467: LD_INT 100
25469: PUSH
25470: LD_INT 90
25472: PUSH
25473: LD_INT 80
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: LIST
25480: ST_TO_ADDR
// max_bedny = [ 55 , 40 , 30 ] ;
25481: LD_ADDR_EXP 51
25485: PUSH
25486: LD_INT 55
25488: PUSH
25489: LD_INT 40
25491: PUSH
25492: LD_INT 30
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: LIST
25499: ST_TO_ADDR
// zivoty_prvni_baze = [ 700 , 850 , 1000 ] ;
25500: LD_ADDR_EXP 53
25504: PUSH
25505: LD_INT 700
25507: PUSH
25508: LD_INT 850
25510: PUSH
25511: LD_INT 1000
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: LIST
25518: ST_TO_ADDR
// last_attack_wait = [ 10 10$0 , 8 8$0 , 5 5$0 ] ;
25519: LD_ADDR_EXP 55
25523: PUSH
25524: LD_INT 21000
25526: PUSH
25527: LD_INT 16800
25529: PUSH
25530: LD_INT 10500
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: LIST
25537: ST_TO_ADDR
// Timecounter = 0 ;
25538: LD_ADDR_EXP 58
25542: PUSH
25543: LD_INT 0
25545: ST_TO_ADDR
// end ;
25546: LD_VAR 0 1
25550: RET
// export cas ; every 0 0$10 do var pom ;
25551: GO 25553
25553: DISABLE
25554: LD_INT 0
25556: PPUSH
// begin if cas [ 3 ] + 10 = 60 then
25557: LD_EXP 59
25561: PUSH
25562: LD_INT 3
25564: ARRAY
25565: PUSH
25566: LD_INT 10
25568: PLUS
25569: PUSH
25570: LD_INT 60
25572: EQUAL
25573: IFFALSE 25609
// cas = cas [ 1 ] + 1 ^ cas [ 2 ] ^ 0 else
25575: LD_ADDR_EXP 59
25579: PUSH
25580: LD_EXP 59
25584: PUSH
25585: LD_INT 1
25587: ARRAY
25588: PUSH
25589: LD_INT 1
25591: PLUS
25592: PUSH
25593: LD_EXP 59
25597: PUSH
25598: LD_INT 2
25600: ARRAY
25601: ADD
25602: PUSH
25603: LD_INT 0
25605: ADD
25606: ST_TO_ADDR
25607: GO 25647
// cas = cas [ 1 ] ^ cas [ 2 ] ^ cas [ 3 ] + 10 ;
25609: LD_ADDR_EXP 59
25613: PUSH
25614: LD_EXP 59
25618: PUSH
25619: LD_INT 1
25621: ARRAY
25622: PUSH
25623: LD_EXP 59
25627: PUSH
25628: LD_INT 2
25630: ARRAY
25631: ADD
25632: PUSH
25633: LD_EXP 59
25637: PUSH
25638: LD_INT 3
25640: ARRAY
25641: PUSH
25642: LD_INT 10
25644: PLUS
25645: ADD
25646: ST_TO_ADDR
// debug_strings = [ cas ] ;
25647: LD_ADDR_OWVAR 48
25651: PUSH
25652: LD_EXP 59
25656: PUSH
25657: EMPTY
25658: LIST
25659: ST_TO_ADDR
// enable ;
25660: ENABLE
// end ;
25661: PPOPN 1
25663: END
// every 1 1$0 do
25664: GO 25666
25666: DISABLE
// begin Timecounter = Timecounter + 1 ;
25667: LD_ADDR_EXP 58
25671: PUSH
25672: LD_EXP 58
25676: PUSH
25677: LD_INT 1
25679: PLUS
25680: ST_TO_ADDR
// enable ;
25681: ENABLE
// end ; end_of_file
25682: END
// every 0 0$2 + 0 0$0.1 do
25683: GO 25685
25685: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) > FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) then
25686: LD_INT 22
25688: PUSH
25689: LD_INT 1
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 2
25698: PUSH
25699: LD_INT 25
25701: PUSH
25702: LD_INT 12
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 25
25711: PUSH
25712: LD_INT 16
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 25
25721: PUSH
25722: LD_INT 15
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 25
25731: PUSH
25732: LD_INT 17
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PPUSH
25750: CALL_OW 69
25754: PUSH
25755: LD_INT 22
25757: PUSH
25758: LD_INT 1
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 21
25767: PUSH
25768: LD_INT 1
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: LD_INT 3
25777: PUSH
25778: LD_INT 2
25780: PUSH
25781: LD_INT 25
25783: PUSH
25784: LD_INT 12
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 25
25793: PUSH
25794: LD_INT 16
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 25
25803: PUSH
25804: LD_INT 15
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 25
25813: PUSH
25814: LD_INT 17
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: LIST
25836: PPUSH
25837: CALL_OW 69
25841: GREATER
25842: IFFALSE 25853
// begin SetAchievement ( ACH_POTA ) ;
25844: LD_STRING ACH_POTA
25846: PPUSH
25847: CALL_OW 543
// exit ;
25851: GO 25854
// end ; enable ;
25853: ENABLE
// end ; end_of_file
25854: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
25855: LD_INT 0
25857: PPUSH
25858: PPUSH
// if not missionNumber then
25859: LD_VAR 0 2
25863: NOT
25864: IFFALSE 25868
// exit ;
25866: GO 25998
// achiv := false ;
25868: LD_ADDR_VAR 0 7
25872: PUSH
25873: LD_INT 0
25875: ST_TO_ADDR
// case campaignNumber of 1 :
25876: LD_VAR 0 1
25880: PUSH
25881: LD_INT 1
25883: DOUBLE
25884: EQUAL
25885: IFTRUE 25889
25887: GO 25900
25889: POP
// achiv := ACH_GOTA ; 2 :
25890: LD_ADDR_VAR 0 7
25894: PUSH
25895: LD_STRING ACH_GOTA
25897: ST_TO_ADDR
25898: GO 25950
25900: LD_INT 2
25902: DOUBLE
25903: EQUAL
25904: IFTRUE 25908
25906: GO 25911
25908: POP
// ; 3 :
25909: GO 25950
25911: LD_INT 3
25913: DOUBLE
25914: EQUAL
25915: IFTRUE 25919
25917: GO 25930
25919: POP
// achiv := ACH_MOTSU ; 4 :
25920: LD_ADDR_VAR 0 7
25924: PUSH
25925: LD_STRING ACH_MOTSU
25927: ST_TO_ADDR
25928: GO 25950
25930: LD_INT 4
25932: DOUBLE
25933: EQUAL
25934: IFTRUE 25938
25936: GO 25949
25938: POP
// achiv := ACH_LOP ; end ;
25939: LD_ADDR_VAR 0 7
25943: PUSH
25944: LD_STRING ACH_LOP
25946: ST_TO_ADDR
25947: GO 25950
25949: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
25950: LD_OWVAR 67
25954: PUSH
25955: LD_INT 3
25957: EQUAL
25958: PUSH
25959: LD_VAR 0 7
25963: AND
25964: PUSH
25965: LD_VAR 0 3
25969: AND
25970: PUSH
25971: LD_VAR 0 4
25975: AND
25976: PUSH
25977: LD_VAR 0 5
25981: AND
25982: IFFALSE 25998
// SetAchievementEX ( achiv , missionNumber ) ;
25984: LD_VAR 0 7
25988: PPUSH
25989: LD_VAR 0 2
25993: PPUSH
25994: CALL_OW 564
// end ;
25998: LD_VAR 0 6
26002: RET
// export function SA_BehemothConstructed ; begin
26003: LD_INT 0
26005: PPUSH
// SetAchievement ( ACH_SMC ) ;
26006: LD_STRING ACH_SMC
26008: PPUSH
26009: CALL_OW 543
// end ;
26013: LD_VAR 0 1
26017: RET
